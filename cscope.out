cscope 15 $HOME/workspace/TheaBoot               0002543559
	@bl.c

40 
	~"hw_c⁄fig.h
"

42 
	~<öây≥s.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

46 
	~<lib›ícm3/°m32/rcc.h
>

47 
	~<lib›ícm3/°m32/gpio.h
>

48 
	~<lib›ícm3/°m32/Êash.h
>

50 
	~<lib›ícm3/cm3/scb.h
>

51 
	~<lib›ícm3/cm3/sy°ick.h
>

53 
	~"bl.h
"

54 
	~"cdˇcm.h
"

55 
	~"ußπ.h
"

61 
	#BL_PROTOCOL_VERSION
 "0.1.1.0"

	)

63 
	#PROTO_INSYNC
 0x12

	)

64 
	#PROTO_EOC
 0x84

	)

65 
	#PROTO_PROG_MULTI_MAX
 256

	)

66 
	#PROTO_REPLY_MAX
 256

	)

71 
	#PROTO_OK
 0x10

	)

72 
	#PROTO_FAILED
 0x11

	)

73 
	#PROTO_INVALID
 0x13

	)

78 
	#PROTO_GET_SYNC
 0x21

	)

80 
	#PROTO_GET_UDID
 0x31

	)

81 
	#PROTO_GET_FW_SIZE
 0x32

	)

83 
	#PROTO_GET_BL_REV
 0x41

	)

84 
	#PROTO_GET_ID
 0x42

	)

85 
	#PROTO_GET_SN
 0x43

	)

86 
	#PROTO_GET_REV
 0x44

	)

87 
	#PROTO_GET_FLASH_STRC
 0x45

	)

88 
	#PROTO_GET_DES
 0x46

	)

90 
	#PROTO_CHIP_ERASE
 0x51

	)

91 
	#PROTO_PROG_MULTI
 0x52

	)

92 
	#PROTO_GET_CRC
 0x53

	)

93 
	#PROTO_BOOT
 0x54

	)

96 
uöt8_t
 
	gbl_ty≥
;

97 
uöt8_t
 
	gœ°_öput
;

98 c⁄° 
uöt8_t
 
	gbl_¥Ÿo_ªv
[] = 
BL_PROTOCOL_VERSION
;

99 vﬁ©ûê
	gtimî
[
NTIMERS
];

100 
	eÀd_°©e
 {
	mLED_BLINK
, 
	mLED_ON
, 
	mLED_OFF
} 
	g_Àd_°©e
;

101 
	ghód
, 
	gèû
;

102 
uöt8_t
 
	grx_buf
[256];

109 
ölöe
 
	$cöô
(*
c⁄fig
, 
uöt8_t
 
öãrÁ˚
)

111 #i‡
INTERFACE_USB


113 i‡(
öãrÁ˚
 =
USB
)

115  
	`usb_cöô
();

119 #i‡
INTERFACE_USART


121 i‡(
öãrÁ˚
 =
USART
)

123  
	`u¨t_cöô
(
c⁄fig
);

127 
	}
}

134 
ölöe
 
	$cföi
()

136 #i‡
INTERFACE_USB


137 
	`usb_cföi
();

139 #i‡
INTERFACE_USART


140 
	`u¨t_cföi
();

142 
	}
}

149 
ölöe
 
	$cö
()

151 #i‡
INTERFACE_USB


153 i‡(
bl_ty≥
 =
NONE
 || bl_ty≥ =
USB
)

155 
usb_ö
 = 
	`usb_cö
();

157 i‡(
usb_ö
 >= 0)

159 
œ°_öput
 = 
USB
;

160  
usb_ö
;

166 #i‡
INTERFACE_USART


168 i‡(
bl_ty≥
 =
NONE
 || bl_ty≥ =
USART
)

170 
u¨t_ö
 = 
	`u¨t_cö
();

172 i‡(
u¨t_ö
 >= 0)

174 
œ°_öput
 = 
USART
;

175  
u¨t_ö
;

182 
	}
}

190 
ölöe
 
	$cout
(
uöt8_t
 *
buf
, 
Àn
)

192 #i‡
INTERFACE_USB


194 i‡(
bl_ty≥
 =
NONE
 || bl_ty≥ =
USB
)

196 
	`usb_cout
(
buf
, 
Àn
);

200 #i‡
INTERFACE_USART


202 i‡(
bl_ty≥
 =
NONE
 || bl_ty≥ =
USART
)

204 
	`u¨t_cout
(
buf
, 
Àn
);

208 
	}
}

210 
	$buf_put
(
uöt8_t
 
b
)

212 
√xt
 = (
hód
 + 1Ë% (
rx_buf
);

214 i‡(
√xt
 !
èû
) {

215 
rx_buf
[
hód
] = 
b
;

216 
hód
 = 
√xt
;

218 
	}
}

220 
	$buf_gë
()

222 
ªt
 = -1;

224 i‡(
èû
 !
hód
) {

225 
ªt
 = 
rx_buf
[
èû
];

226 
èû
 = (èû + 1Ë% (
rx_buf
);

229  
ªt
;

230 
	}
}

238 
	$do_jump
(
uöt32_t
 
°ackt›
, uöt32_à
íåypoöt
)

240 
asm
 volatile(

244 : "r"(
°ackt›
), "r"(
íåypoöt
)

250 
	}
}

257 
	$jump_to_≠p
()

260 c⁄° 
uöt32_t
 *
≠p_ba£
 = (c⁄° uöt32_à*)
APP_LOAD_ADDRESS
;

265 i‡(
≠p_ba£
[0] == 0xffffffff)

273 i‡(
≠p_ba£
[1] < 
APP_LOAD_ADDRESS
)

278 i‡(
≠p_ba£
[1] >(
APP_LOAD_ADDRESS
 + 
bﬂrd_öfo
.
fw_size
))

284 
	`Êash_lock
();

287 
	`sy°ick_öãºu±_dißbÀ
();

288 
	`sy°ick_cou¡î_dißbÀ
();

291 
	`cföi
();

294 
	`˛ock_deöô
();

297 
	`bﬂrd_deöô
();

300 
SCB_VTOR
 = 
APP_LOAD_ADDRESS
;

303 
	`do_jump
(
≠p_ba£
[0],ápp_base[1]);

304 
	}
}

311 
	$sys_tick_h™dÀr
()

313 
i
;

315 
i
 = 0; i < 
NTIMERS
; i++)

316 i‡(
timî
[
i
] > 0) {

317 
timî
[
i
]--;

320 i‡((
_Àd_°©e
 =
LED_BLINK
Ë&& (
timî
[
TIMER_LED
] == 0)) {

321 
	`Àd_toggÀ
(
LED_BOOTLOADER
);

322 
timî
[
TIMER_LED
] = 50;

324 
	}
}

331 
	$dñay
(
m£c
)

334 
timî
[
TIMER_DELAY
] = 
m£c
;

336 
timî
[
TIMER_DELAY
] > 0)

339 
	}
}

346 
	$Àd_£t
(
Àd_°©e
 
°©e
)

348 
_Àd_°©e
 = 
°©e
;

350 
°©e
) {

351 
LED_OFF
:

352 
	`Àd_off
(
LED_BOOTLOADER
);

355 
LED_ON
:

356 
	`Àd_⁄
(
LED_BOOTLOADER
);

359 
LED_BLINK
:

361 
timî
[
TIMER_LED
] = 0;

364 
	}
}

371 
	$sync_ª•⁄£
()

374 
uöt8_t
 
d©a
[] =

376 
PROTO_INSYNC
,

377 
PROTO_OK


380 
	`cout
(
d©a
, (data));

382 
	}
}

389 
	$övÆid_ª•⁄£
()

392 
uöt8_t
 
d©a
[] =

394 
PROTO_INSYNC
,

395 
PROTO_INVALID


398 
	`cout
(
d©a
, (data));

400 
	}
}

407 
	$Áûuª_ª•⁄£
()

410 
uöt8_t
 
d©a
[] =

412 
PROTO_INSYNC
,

413 
PROTO_FAILED


416 
	`cout
(
d©a
, (data));

417 
	}
}

419 vﬁ©ûê
	gcö_cou¡
;

426 
	$cö_waô
(
timeout
)

429 
c
 = -1;

432 
timî
[
TIMER_CIN
] = 
timeout
;

436 
c
 = 
	`cö
();

438 i‡(
c
 >= 0)

440 
cö_cou¡
++;

444 } 
timî
[
TIMER_CIN
] > 0);

446  
c
;

447 
	}
}

454 
ölöe
 
uöt8_t
 
	$waô_f‹_eoc
(
timeout
)

456  
	`cö_waô
(
timeout
Ë=
PROTO_EOC
;

457 
	}
}

464 
	$cout_w‹d
(
uöt32_t
 
vÆ
)

466 
	`cout
((
uöt8_t
 *)&
vÆ
, 4);

467 
	}
}

475 
__©åibuã__
((
unu£d
)Ë
	$cö_w‹d
(
uöt32_t
 *
wp
, 
timeout
)

478 
uöt32_t
 
w
;

479 
uöt8_t
 
b
[4];

480 } 
u
;

482 
i
 = 0; i < 4; i++)

484 
c
 = 
	`cö_waô
(
timeout
);

486 i‡(
c
 < 0)

488  
c
;

491 
u
.
b
[
i
] = 
c
 & 0xff;

494 *
wp
 = 
u
.
w
;

496 
	}
}

505 
uöt32_t
 
	$¸c32
(c⁄° 
uöt8_t
 *
§c
, 
Àn
, 
°©e
)

507 
uöt32_t
 
¸˘ab
[256];

511 i‡(
¸˘ab
[1] == 0)

513 
i
 = 0; i < 256; i++)

515 
uöt32_t
 
c
 = 
i
;

517 
j
 = 0; j < 8; j++)

519 i‡(
c
 & 1)

521 
c
 = 0xedb88320U ^ (c >> 1);

525 
c
 = c >> 1;

529 
¸˘ab
[
i
] = 
c
;

533 
i
 = 0; i < 
Àn
; i++)

535 
°©e
 = 
¸˘ab
[(°©ê^ 
§c
[
i
]) & 0xff] ^ (state >> 8);

538  
°©e
;

539 
	}
}

546 
	$boŸlﬂdî
(
timeout
)

549 
uöt32_t
 
addªss
 = 
bﬂrd_öfo
.
fw_size
;

550 
uöt32_t
 
fú°_w‹d
 = 0xffffffff;

552 
bl_ty≥
 = 
NONE
;

555 
	`sy°ick_£t_˛ocksour˚
(
STK_CSR_CLKSOURCE_AHB
);

556 
	`sy°ick_£t_ªlﬂd
(
bﬂrd_öfo
.
sy°ick_mhz
 * 1000);

557 
	`sy°ick_öãºu±_íabÀ
();

558 
	`sy°ick_cou¡î_íabÀ
();

561 i‡(
timeout
)

563 
timî
[
TIMER_BL_WAIT
] = 
timeout
;

567 
	`Àd_£t
(
LED_BLINK
);

571 vﬁ©ûê
c
;

572 
¨g
;

575 
uöt8_t
 
c
[256];

576 
uöt32_t
 
w
[64];

577 } 
Êash_buf„r
;

579 
	`Àd_off
(
LED_ACTIVITY
);

583 i‡(
timeout
 && !
timî
[
TIMER_BL_WAIT
])

587 
c
 = 
	`cö_waô
(0);

589 } 
c
 < 0);

591 
	`Àd_⁄
(
LED_ACTIVITY
);

594 
c
)

598 
PROTO_GET_SYNC
:

599 i‡(!
	`waô_f‹_eoc
(2))

601 
cmd_bad
;

607 
PROTO_GET_UDID
:

609 
uöt32_t
 
udid
[3] = {0};

610 
tmp
[12] = {0};

611 
uöt8_t
 
i
;

613 i‡(!
	`waô_f‹_eoc
(2))

615 
cmd_bad
;

618 
udid
[0] = 
	`Êash_func_ªad_udid
(0);

619 
udid
[1] = 
	`Êash_func_ªad_udid
(1);

620 
udid
[2] = 
	`Êash_func_ªad_udid
(2);

622 
i
 = 0; i < 12; i++)

624 
tmp
[
i
] = (
udid
[i / 4] >> (4 * (i % 4)));

627 
	`cout
((
uöt8_t
 *)
tmp
, 24);

632 
PROTO_GET_FW_SIZE
:

633 i‡(!
	`waô_f‹_eoc
(2))

635 
cmd_bad
;

638 
	`cout
((
uöt8_t
 *)&
bﬂrd_öfo
.
fw_size
, (board_info.fw_size));

642 
PROTO_GET_BL_REV
:

643 i‡(!
	`waô_f‹_eoc
(2))

645 
cmd_bad
;

648 
	`cout
((
uöt8_t
 *)&
bl_¥Ÿo_ªv
, (bl_proto_rev));

652 
PROTO_GET_ID
:

653 i‡(!
	`waô_f‹_eoc
(2))

655 
cmd_bad
;

658 
	`cout
((
uöt8_t
 *)&
bﬂrd_öfo
.
id
, (board_info.id));

662 
PROTO_GET_SN
:

663 i‡(!
	`waô_f‹_eoc
(2))

665 
cmd_bad
;

668 
	`cout
((
uöt8_t
 *)&
bﬂrd_öfo
.
¢
, (board_info.sn));

672 
PROTO_GET_REV
:

673 i‡(!
	`waô_f‹_eoc
(2))

675 
cmd_bad
;

678 
	`cout
((
uöt8_t
 *)&
bﬂrd_öfo
.
ªv
, (board_info.rev));

682 
PROTO_GET_FLASH_STRC
:

683 i‡(!
	`waô_f‹_eoc
(2))

685 
cmd_bad
;

688 
	`cout
((
uöt8_t
 *)&
bﬂrd_öfo
.
Êash_°rc
, (board_info.flash_strc));

692 
PROTO_GET_DES
:

693 i‡(!
	`waô_f‹_eoc
(2))

695 
cmd_bad
;

698 
	`cout
((
uöt8_t
 *)&
bﬂrd_öfo
.
devi˚_des
, (board_info.device_des));

702 
PROTO_CHIP_ERASE
:

704 i‡(!
	`waô_f‹_eoc
(2))

706 
cmd_bad
;

709 
	`Àd_£t
(
LED_ON
);

712 
	`Êash_u∆ock
();

714 
i
 = 0; 
	`Êash_func_£˘‹_size
(i) != 0; i++)

716 
	`Êash_func_îa£_£˘‹
(
i
);

719 
	`Àd_£t
(
LED_OFF
);

722 
addªss
 = 0;áddªs†< 
bﬂrd_öfo
.
fw_size
;áddress += 4)

723 i‡(
	`Êash_func_ªad_w‹d
(
addªss
) != 0xffffffff)

725 
cmd_Áû
;

728 
addªss
 = 0;

730 
	`Àd_£t
(
LED_BLINK
);

735 
PROTO_PROG_MULTI
:

737 
¨g
 = 
	`cö_waô
(50);

739 i‡(
¨g
 < 0)

741 
cmd_bad
;

745 i‡(
¨g
 % 4)

747 
cmd_bad
;

750 i‡((
addªss
 + 
¨g
Ë> 
bﬂrd_öfo
.
fw_size
)

752 
cmd_bad
;

755 i‡(
¨g
 > (
Êash_buf„r
.
c
))

757 
cmd_bad
;

760 
i
 = 0; i < 
¨g
; i++)

762 
c
 = 
	`cö_waô
(1000);

764 i‡(
c
 < 0)

766 
cmd_bad
;

769 
Êash_buf„r
.
c
[
i
] = c;

772 i‡(!
	`waô_f‹_eoc
(200))

774 
cmd_bad
;

777 i‡(
addªss
 == 0)

780 
fú°_w‹d
 = 
Êash_buf„r
.
w
[0];

782 
Êash_buf„r
.
w
[0] = 0xffffffff;

785 
¨g
 /= 4;

787 
i
 = 0; i < 
¨g
; i++)

790 
	`Êash_func_wrôe_w‹d
(
addªss
, 
Êash_buf„r
.
w
[
i
]);

793 i‡(
	`Êash_func_ªad_w‹d
(
addªss
Ë!
Êash_buf„r
.
w
[
i
])

795 
cmd_Áû
;

798 
addªss
 += 4;

804 
PROTO_GET_CRC
:

807 
uöt32_t
 
sum
 = 0;

809 i‡(!
	`waô_f‹_eoc
(2))

811 
cmd_bad
;

814 
p
 = 0;Ö < 
bﬂrd_öfo
.
fw_size
;Ö += 4)

816 
uöt32_t
 
byãs
;

819 i‡((
p
 =0Ë&& (
fú°_w‹d
 != 0xffffffff))

821 
byãs
 = 
fú°_w‹d
;

825 
byãs
 = 
	`Êash_func_ªad_w‹d
(
p
);

828 
sum
 = 
	`¸c32
((
uöt8_t
 *)&
byãs
, (bytes), sum);

831 
	`cout_w‹d
(
sum
);

836 
PROTO_BOOT
:

838 i‡(!
	`waô_f‹_eoc
(1000))

840 
cmd_bad
;

844 i‡(
fú°_w‹d
 != 0xffffffff)

846 
	`Êash_func_wrôe_w‹d
(0, 
fú°_w‹d
);

848 i‡(
	`Êash_func_ªad_w‹d
(0Ë!
fú°_w‹d
)

850 
cmd_Áû
;

854 
fú°_w‹d
 = 0xffffffff;

857 
	`sync_ª•⁄£
();

858 
	`dñay
(100);

864 
cmd_bad
;

868 
timeout
 = 0;

871 i‡(
bl_ty≥
 =
NONE
)

873 
bl_ty≥
 = 
œ°_öput
;

877 
	`sync_ª•⁄£
();

880 
cmd_bad
:

882 
	`övÆid_ª•⁄£
();

885 
cmd_Áû
:

887 
	`Áûuª_ª•⁄£
();

890 
	}
}

	@bl.h

39 #i‚de‡
__BL_H


40 
	#__BL_H


	)

43 
	#MAX_DEVICE_ID_LENGTH
 32

	)

44 
	#MAX_DEVICE_SN_LENGTH
 32

	)

45 
	#MAX_DEVICE_REV_LENGTH
 16

	)

46 
	#MAX_FLASH_STRC_LENGTH
 64

	)

47 
	#MAX_DEVICE_DES_LENGTH
 64

	)

49 
	#LED_ACTIVITY
 1

	)

50 
	#LED_BOOTLOADER
 2

	)

53 
	eI¡îÁ˚_Ty≥


55 
	mNONE
,

56 
	mUSART
,

57 
	mUSB


61 
	sbﬂrdöfo


63 
uöt8_t
 
	mid
[
MAX_DEVICE_ID_LENGTH
];

64 
uöt8_t
 
	m¢
[
MAX_DEVICE_SN_LENGTH
];

65 
uöt8_t
 
	mªv
[
MAX_DEVICE_REV_LENGTH
];

66 
uöt8_t
 
	mÊash_°rc
[
MAX_FLASH_STRC_LENGTH
];

67 
uöt8_t
 
	mdevi˚_des
[
MAX_DEVICE_DES_LENGTH
];

68 
uöt32_t
 
	mfw_size
;

69 
uöt32_t
 
	msy°ick_mhz
;

70 }
__©åibuã__
((
∑cked
));

72 
bﬂrdöfo
 
bﬂrd_öfo
;

74 
jump_to_≠p
();

75 
boŸlﬂdî
(
timeout
);

76 
dñay
(
m£c
);

77 
hex_to_ch¨
(
bHex
);

82 
	#NTIMERS
 4

	)

83 
	#TIMER_BL_WAIT
 0

	)

84 
	#TIMER_CIN
 1

	)

85 
	#TIMER_LED
 2

	)

86 
	#TIMER_DELAY
 3

	)

87 vﬁ©ûê
timî
[
NTIMERS
];

92 
Àd_⁄
(
Àd
);

93 
Àd_off
(
Àd
);

94 
Àd_toggÀ
(
Àd
);

95 
bﬂrd_deöô
();

96 
˛ock_deöô
();

97 
uöt32_t
 
Êash_func_£˘‹_size
(
∑ge
);

98 
Êash_func_îa£_£˘‹
(
∑ge
);

99 
Êash_func_wrôe_w‹d
(
uöt32_t
 
addªss
, uöt32_à
w‹d
);

100 
uöt32_t
 
Êash_func_ªad_w‹d
(uöt32_à
addªss
);

101 
uöt32_t
 
Êash_func_ªad_Ÿp
(uöt32_à
addªss
);

102 
uöt32_t
 
Êash_func_ªad_udid
(uöt32_à
addªss
);

103 
uöt32_t
 
gë_mcu_id
();

108 
ölöe
 
cöô
(*
c⁄fig
, 
uöt8_t
 
öãrÁ˚
);

109 
ölöe
 
cföi
();

110 
ölöe
 
cö
();

111 
ölöe
 
cout
(
uöt8_t
 *
buf
, 
Àn
);

114 
buf_put
(
uöt8_t
 
b
);

115 
buf_gë
();

	@cdcacm.c

44 
	~"hw_c⁄fig.h
"

46 
	~<°dlib.h
>

48 
	~<lib›ícm3/°m32/rcc.h
>

49 
	~<lib›ícm3/°m32/gpio.h
>

50 
	~<lib›ícm3/°m32/Êash.h
>

51 
	~<lib›ícm3/usb/dwc/Ÿg_fs.h
>

53 
	~<lib›ícm3/cm3/sy°ick.h
>

54 
	~<lib›ícm3/cm3/nvic.h
>

55 
	~<lib›ícm3/usb/usbd.h
>

56 
	~<lib›ícm3/usb/cdc.h
>

58 
	~"bl.h
"

59 #i‡
INTERFACE_USB
 != 0

60 
	#USB_CDC_REQ_GET_LINE_CODING
 0x21

61 

	)

69 
	#OTG_CID_HAS_VBDEN
 0x00002000

	)

70 
	#OTG_GCCFG_VBDEN
 (1 << 21)

	)

76 c⁄° *
	gusb_°rögs
[] = {

77 
USBMFGSTRING
,

78 
USBDEVICESTRING
,

81 
	#NUM_USB_STRINGS
 ((
usb_°rögs
)/(usb_°rögs[0]))

	)

83 
usbd_devi˚
 *
	gusbd_dev
;

86 
uöt8_t
 
	gusbd_c⁄åﬁ_buf„r
[128];

88 c⁄° 
usb_devi˚_des¸ùt‹
 
	gdev
 = {

89 .
bLígth
 = 
USB_DT_DEVICE_SIZE
,

90 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_DEVICE
,

91 .
	gbcdUSB
 = 0x0200,

92 .
	gbDevi˚Cœss
 = 
USB_CLASS_CDC
,

93 .
	gbDevi˚SubCœss
 = 0,

94 .
	gbDevi˚PrŸocﬁ
 = 0,

95 .
	gbMaxPackëSize0
 = 64,

96 .
	gidVíd‹
 = 0x26AC,

97 .
	gidProdu˘
 = 
USBPRODUCTID
,

98 .
	gbcdDevi˚
 = 0x0101,

99 .
	giM™uÁ˘uªr
 = 1,

100 .
	giProdu˘
 = 2,

101 .
	giSîülNumbî
 = 3,

102 .
	gbNumC⁄figuøti⁄s
 = 1,

110 c⁄° 
usb_ídpoöt_des¸ùt‹
 
	gcomm_ídp
[] = {{

111 .
bLígth
 = 
USB_DT_ENDPOINT_SIZE
,

112 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

113 .
	gbEndpoötAddªss
 = 0x83,

114 .
	gbmAâribuãs
 = 
USB_ENDPOINT_ATTR_INTERRUPT
,

115 .
	gwMaxPackëSize
 = 16,

116 .
	gbI¡îvÆ
 = 255,

120 c⁄° 
usb_ídpoöt_des¸ùt‹
 
	gd©a_ídp
[] = {{

121 .
bLígth
 = 
USB_DT_ENDPOINT_SIZE
,

122 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

123 .
	gbEndpoötAddªss
 = 0x01,

124 .
	gbmAâribuãs
 = 
USB_ENDPOINT_ATTR_BULK
,

125 .
	gwMaxPackëSize
 = 64,

126 .
	gbI¡îvÆ
 = 1,

128 .
	gbLígth
 = 
USB_DT_ENDPOINT_SIZE
,

129 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

130 .
	gbEndpoötAddªss
 = 0x82,

131 .
	gbmAâribuãs
 = 
USB_ENDPOINT_ATTR_BULK
,

132 .
	gwMaxPackëSize
 = 64,

133 .
	gbI¡îvÆ
 = 1,

138 
usb_cdc_hódî_des¸ùt‹
 
	mhódî
;

139 
usb_cdc_ˇŒ_m™agemít_des¸ùt‹
 
	mˇŒ_mgmt
;

140 
usb_cdc_acm_des¸ùt‹
 
	macm
;

141 
usb_cdc_uni⁄_des¸ùt‹
 
	mcdc_uni⁄
;

142 } 
__©åibuã__
((
∑cked
)Ë
	gcdˇcm_fun˘i⁄Æ_des¸ùt‹s
 = {

143 .
hódî
 = {

144 .
bFun˘i⁄Lígth
 = (
usb_cdc_hódî_des¸ùt‹
),

145 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

146 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_HEADER
,

147 .
	gbcdCDC
 = 0x0110,

149 .
	gˇŒ_mgmt
 = {

150 .
bFun˘i⁄Lígth
 =

151 (
usb_cdc_ˇŒ_m™agemít_des¸ùt‹
),

152 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

153 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_CALL_MANAGEMENT
,

154 .
	gbmC≠abûôõs
 = 0,

155 .
	gbD©aI¡îÁ˚
 = 1,

157 .
	gacm
 = {

158 .
bFun˘i⁄Lígth
 = (
usb_cdc_acm_des¸ùt‹
),

159 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

160 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_ACM
,

161 .
	gbmC≠abûôõs
 = 0,

163 .
	gcdc_uni⁄
 = {

164 .
bFun˘i⁄Lígth
 = (
usb_cdc_uni⁄_des¸ùt‹
),

165 .
	gbDes¸ùt‹Ty≥
 = 
CS_INTERFACE
,

166 .
	gbDes¸ùt‹Subty≥
 = 
USB_CDC_TYPE_UNION
,

167 .
	gbC⁄åﬁI¡îÁ˚
 = 0,

168 .
	gbSub‹dö©eI¡îÁ˚0
 = 1,

172 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	gcomm_iÁ˚
[] = {{

173 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

174 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

175 .
	gbI¡îÁ˚Numbî
 = 0,

176 .
	gbA…î«ãSëtög
 = 0,

177 .
	gbNumEndpoöts
 = 1,

178 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_CDC
,

179 .
	gbI¡îÁ˚SubCœss
 = 
USB_CDC_SUBCLASS_ACM
,

180 .
	gbI¡îÁ˚PrŸocﬁ
 = 
USB_CDC_PROTOCOL_AT
,

181 .
	giI¡îÁ˚
 = 0,

183 .
	gídpoöt
 = 
comm_ídp
,

185 .
	gexåa
 = &
cdˇcm_fun˘i⁄Æ_des¸ùt‹s
,

186 .
	gexåÆí
 = (
cdˇcm_fun˘i⁄Æ_des¸ùt‹s
)

190 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	gd©a_iÁ˚
[] = {{

191 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

192 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

193 .
	gbI¡îÁ˚Numbî
 = 1,

194 .
	gbA…î«ãSëtög
 = 0,

195 .
	gbNumEndpoöts
 = 2,

196 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_DATA
,

197 .
	gbI¡îÁ˚SubCœss
 = 0,

198 .
	gbI¡îÁ˚PrŸocﬁ
 = 0,

199 .
	giI¡îÁ˚
 = 0,

201 .
	gídpoöt
 = 
d©a_ídp
,

205 c⁄° 
usb_öãrÁ˚
 
	giÁ˚s
[] = {{

206 .
num_Æt£âög
 = 1,

207 .
	gÆt£âög
 = 
comm_iÁ˚
,

209 .
	gnum_Æt£âög
 = 1,

210 .
	gÆt£âög
 = 
d©a_iÁ˚
,

214 c⁄° 
usb_c⁄fig_des¸ùt‹
 
	gc⁄fig
 = {

215 .
bLígth
 = 
USB_DT_CONFIGURATION_SIZE
,

216 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_CONFIGURATION
,

217 .
	gwTŸÆLígth
 = 0,

218 .
	gbNumI¡îÁ˚s
 = 2,

219 .
	gbC⁄figuøti⁄VÆue
 = 1,

220 .
	giC⁄figuøti⁄
 = 0,

221 .
	gbmAâribuãs
 = 0x80,

222 .
	gbMaxPowî
 = 0xFA,

224 .
	göãrÁ˚
 = 
iÁ˚s
,

227 c⁄° 
usb_cdc_löe_codög
 
	glöe_codög
 = {

228 .
dwDTER©e
 = 115200,

229 .
	gbCh¨F‹m©
 = 
USB_CDC_1_STOP_BITS
,

230 .
	gbP¨ôyTy≥
 = 
USB_CDC_NO_PARITY
,

231 .
	gbD©aBôs
 = 0x08

233 
usbd_ªque°_ªtu∫_codes
 
	$cdˇcm_c⁄åﬁ_ªque°
(
usbd_devi˚
 *
usbd_dev
, 
usb_£tup_d©a
 *
ªq
,

234 
uöt8_t
 **
buf
,

235 
uöt16_t
 *
Àn
, 
usbd_c⁄åﬁ_com∂ëe_ˇŒback
 *
com∂ëe
)

237 ()
com∂ëe
;

238 ()
buf
;

239 ()
usbd_dev
;

241 
ªq
->
bReque°
) {

242 
USB_CDC_REQ_SET_CONTROL_LINE_STATE
: {

251 
USB_CDC_REQ_SET_LINE_CODING
:

252 i‡(*
Àn
 < (
usb_cdc_löe_codög
)) {

258 
USB_CDC_REQ_GET_LINE_CODING
:

259 *
buf
 = (
uöt8_t
 *)&
löe_codög
;

264 
	}
}

266 
	$cdˇcm_d©a_rx_cb
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
)

268 ()
ï
;

270 
buf
[64];

271 
i
;

272 
Àn
 = 
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 0x01, 
buf
, (buf));

274 
i
 = 0; i < 
Àn
; i++) {

275 
	`buf_put
(
buf
[
i
]);

277 
	}
}

279 
	$cdˇcm_£t_c⁄fig
(
usbd_devi˚
 *
usbd_dev
, 
uöt16_t
 
wVÆue
)

281 ()
wVÆue
;

283 
	`usbd_ï_£tup
(
usbd_dev
, 0x01, 
USB_ENDPOINT_ATTR_BULK
, 64, 
cdˇcm_d©a_rx_cb
);

284 
	`usbd_ï_£tup
(
usbd_dev
, 0x82, 
USB_ENDPOINT_ATTR_BULK
, 64, 
NULL
);

285 
	`usbd_ï_£tup
(
usbd_dev
, 0x83, 
USB_ENDPOINT_ATTR_INTERRUPT
, 16, 
NULL
);

287 
	`usbd_ªgi°î_c⁄åﬁ_ˇŒback
(

288 
usbd_dev
,

289 
USB_REQ_TYPE_CLASS
 | 
USB_REQ_TYPE_INTERFACE
,

290 
USB_REQ_TYPE_TYPE
 | 
USB_REQ_TYPE_RECIPIENT
,

291 
cdˇcm_c⁄åﬁ_ªque°
);

292 
	}
}

296 
	$Ÿg_fs_i§
()

298 i‡(
usbd_dev
) {

299 
	`usbd_pﬁl
(
usbd_dev
);

301 
	}
}

304 
	$usb_cöô
()

306 #i‡
	`deföed
(
STM32F4
)

308 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
RCC_AHB1ENR
, 
RCC_AHB1ENR_IOPAEN
);

309 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
RCC_AHB2ENR
, 
RCC_AHB2ENR_OTGFSEN
);

311 #i‡
	`deföed
(
USB_FORCE_DISCONNECT
)

312 
	`gpio_mode_£tup
(
GPIOA
, 
GPIO_MODE_OUTPUT
, 
GPIO_OTYPE_OD
, 
GPIO12
);

313 
	`gpio_£t_ouçut_›ti⁄s
(
GPIOA
, 
GPIO_OTYPE_PP
, 
GPIO_OSPEED_50MHZ
, 
GPIO12
);

314 
	`gpio_˛ór
(
GPIOA
, 
GPIO12
);

315 
	`sy°ick_£t_˛ocksour˚
(
STK_CSR_CLKSOURCE_AHB
);

316 
	`sy°ick_£t_ªlﬂd
(
bﬂrd_öfo
.
sy°ick_mhz
 * 1000);

317 
	`sy°ick_öãºu±_íabÀ
();

318 
	`sy°ick_cou¡î_íabÀ
();

320 
	`dñay
(1);

321 
	`sy°ick_öãºu±_dißbÀ
();

322 
	`sy°ick_cou¡î_dißbÀ
();

326 
	`gpio_mode_£tup
(
GPIOA
, 
GPIO_MODE_AF
, 
GPIO_PUPD_NONE
, 
GPIO11
 | 
GPIO12
);

327 
	`gpio_£t_af
(
GPIOA
, 
GPIO_AF10
, 
GPIO11
 | 
GPIO12
);

329 #i‡
	`deföed
(
BOARD_USB_VBUS_SENSE_DISABLED
)

330 
OTG_FS_GCCFG
 |
OTG_GCCFG_NOVBUSSENS
;

333 
usbd_dev
 = 
	`usbd_öô
(&
Ÿgfs_usb_drivî
, &
dev
, &
c⁄fig
, 
usb_°rögs
, 
NUM_USB_STRINGS
,

334 
usbd_c⁄åﬁ_buf„r
, (usbd_control_buffer));

336 #ñi‡
	`deföed
(
STM32F1
)

337 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
RCC_APB2ENR
, 
RCC_APB2ENR_IOPAEN
);

338 
	`gpio_£t
(
GPIOA
, 
GPIO8
);

339 
	`gpio_£t_mode
(
GPIOA
, 
GPIO_MODE_OUTPUT_2_MHZ
, 
GPIO_CNF_OUTPUT_PUSHPULL
, 
GPIO8
);

341 
usbd_dev
 = 
	`usbd_öô
(&
°_usbfs_v1_usb_drivî
, &
dev
, &
c⁄fig
, 
usb_°rögs
, 
NUM_USB_STRINGS
,

342 
usbd_c⁄åﬁ_buf„r
, (usbd_control_buffer));

345 
	`usbd_ªgi°î_£t_c⁄fig_ˇŒback
(
usbd_dev
, 
cdˇcm_£t_c⁄fig
);

347 #i‡
	`deföed
(
STM32F4
)

349 i‡(
OTG_FS_CID
 =
OTG_CID_HAS_VBDEN
) {

351 
OTG_FS_GCCFG
 |
OTG_GCCFG_VBDEN
 | 
OTG_GCCFG_PWRDWN
;

355 
OTG_FS_DCTL
 &~
OTG_DCTL_SDIS
;

358 
	`nvic_íabÀ_úq
(
NVIC_OTG_FS_IRQ
);

360 
	}
}

363 
	$usb_cföi
()

365 #i‡
	`deföed
(
STM32F4
)

366 
	`nvic_dißbÀ_úq
(
NVIC_OTG_FS_IRQ
);

369 i‡(
usbd_dev
) {

370 
	`usbd_disc⁄√˘
(
usbd_dev
, 
åue
);

371 
usbd_dev
 = 
NULL
;

374 #i‡
	`deföed
(
STM32F4
)

376 
	`gpio_mode_£tup
(
GPIOA
, 
GPIO_MODE_INPUT
, 
GPIO_PUPD_NONE
, 
GPIO11
 | 
GPIO12
);

379 
	`rcc_≥rùhîÆ_dißbÀ_˛ock
(&
RCC_AHB2ENR
, 
RCC_AHB2ENR_OTGFSEN
);

381 #ñi‡
	`deföed
(
STM32F1
)

383 
	`gpio_£t_mode
(
GPIOA
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_FLOAT
, 
GPIO8
);

384 
	`gpio_˛ór
(
GPIOA
, 
GPIO8
);

386 
	}
}

389 
	$usb_cö
()

391 i‡(
usbd_dev
 =
NULL
) {  -1; }

393 #i‡
	`deföed
(
STM32F1
)

394 
	`usbd_pﬁl
(
usbd_dev
);

396  
	`buf_gë
();

397 
	}
}

400 
	$usb_cout
(
uöt8_t
 *
buf
, 
cou¡
)

402 i‡(
usbd_dev
) {

403 
cou¡
) {

404 
Àn
 = (
cou¡
 > 64) ? 64 : count;

405 
£¡
;

407 
£¡
 = 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 0x82, 
buf
, 
Àn
);

409 
cou¡
 -
£¡
;

410 
buf
 +
£¡
;

413 
	}
}

	@cdcacm.h

42 #¥agm®
⁄˚


44 
usb_cöô
();

45 
usb_cföi
();

46 
usb_cö
();

47 
usb_cout
(
uöt8_t
 *
buf
, 
Àn
);

	@hw_config.h

39 #i‚de‡
HW_CONFIG_H_


40 
	#HW_CONFIG_H_


	)

45 #ifde‡
TARGET_HW_STM32F103_WARSHIP_V2_0


48 
	#DEVICE_ID
 "ALIENTEK ’ΩΩ¢ STM32"

	)

49 
	#DEVICE_REV
 "2.0"

	)

50 
	#DEVICE_SN
 "3DFC40D115E8174"

	)

51 
	#DEVICE_FLASH_STRC
 "@I¡î«l/0x08000000/8*2Ka,248*2Kg"

	)

56 
	#DEVICE_DES
 "µ•∆¨ª˙: STM32F103ZET6\r\n‘≠◊”STM32’ΩΩ¢ø™∑¢∞Â V2.0"

	)

59 
	#INTERFACE_USB
 0

60 
	#INTERFACE_USART
 1

	)

63 
	#BOOTLOADER_DELAY
 2000

	)

64 
	#BOOTLOADER_PAGE
 8

	)

65 
	#APP_LOAD_ADDRESS
 0x08002000

	)

68 
	#USBDEVICESTRING
 "STM32 W¨Shù V2.0"

	)

69 
	#USBPRODUCTID
 0x0001

	)

70 
	#USBMFGSTRING
 "ALIENTEK"

	)

73 
	#BOARD_PAGES
 256

	)

74 
	#FLASH_PAGE_SIZE
 0x800

	)

77 
	#OSC_FREQ
 8

	)

79 
	#BOARD_PORT_USART
 
GPIOA


	)

80 
	#BOARD_PIN_TX
 
GPIO9


	)

81 
	#BOARD_PIN_RX
 
GPIO10


	)

82 
	#BOARD_USART_PIN_CLOCK_REGISTER
 
RCC_APB2ENR


	)

83 
	#BOARD_USART_PIN_CLOCK_BIT
 
RCC_APB2ENR_IOPAEN


	)

84 
	#BOARD_USART
 
USART1


	)

85 
	#BOARD_USART_CLOCK_REGISTER
 
RCC_APB2ENR


	)

86 
	#BOARD_USART_CLOCK_BIT
 
RCC_APB2ENR_USART1EN


	)

88 
	#BOARD_PIN_LED_ACTIVITY
 
GPIO5


	)

89 
	#BOARD_PORT_LED_ACTIVITY
 
GPIOB


	)

90 
	#BOARD_CLOCK_LED_ACTIVITY_REGISTER
 
RCC_APB2ENR


	)

91 
	#BOARD_CLOCK_LED_ACTIVITY
 
RCC_APB2ENR_IOPBEN


	)

92 
	#BOARD_PIN_LED_BOOTLOADER
 
GPIO5


	)

93 
	#BOARD_PORT_LED_BOOTLOADER
 
GPIOE


	)

94 
	#BOARD_CLOCK_LED_BOOTLOADER_REGISTER
 
RCC_APB2ENR


	)

95 
	#BOARD_CLOCK_LED_BOOTLOADER
 
RCC_APB2ENR_IOPEEN


	)

96 
	#BOARD_LED_ON
 
gpio_˛ór


	)

97 
	#BOARD_LED_OFF
 
gpio_£t


	)

99 
	#BOARD_FORCE_BL_PIN
 
GPIO0


	)

100 
	#BOARD_FORCE_BL_PORT
 
GPIOA


	)

101 
	#BOARD_FORCE_BL_CLOCK_REGISTER
 
RCC_APB2ENR


	)

102 
	#BOARD_FORCE_BL_CLOCK_BIT
 
RCC_APB2ENR_IOPAEN


	)

103 
	#BOARD_FORCE_BL_MODE
 
GPIO_CNF_OUTPUT_PUSHPULL


	)

104 
	#BOARD_FORCE_BL_PULL
 0

	)

105 
	#BOARD_FORCE_BL_STATE
 1

	)

	@libopencm3/include/libopencm3/cm3/assert.h

47 #i‚de‡
LIBOPENCM3_CM3_ASSERT_H


48 
	#LIBOPENCM3_CM3_ASSERT_H


	)

50 
	~<lib›ícm3/cm3/comm⁄.h
>

52 
	#CM3_LIKELY
(
ex¥
Ë(
	`__buûtö_ex≥˘
(!!”x¥), 1))

	)

54 #ifde‡
NDEBUG


55 
	#cm3_as£π
(
ex¥
Ë()0

	)

56 
	#cm3_as£π_nŸ_ªached
(Ëdÿ{ } 1)

	)

58 #ifde‡
CM3_ASSERT_VERBOSE


59 
	#cm3_as£π
(
ex¥
) do { \

60 i‡(
	`CM3_LIKELY
(
ex¥
)) { \

63 
	`cm3_as£π_Áûed_vîbo£
( \

64 
__FILE__
, 
__LINE__
, \

65 
__func__
, #expr); \

67 } 0)

	)

68 
	#cm3_as£π_nŸ_ªached
() \

69 
	`cm3_as£π_Áûed_vîbo£
( \

70 
__FILE__
, 
__LINE__
, \

71 
__func__
, 0)

	)

85 
	#cm3_as£π
(
ex¥
) do { \

86 i‡(
	`CM3_LIKELY
(
ex¥
)) { \

89 
	`cm3_as£π_Áûed
(); \

91 } 0)

	)

101 
	#cm3_as£π_nŸ_ªached
(Ë
	`cm3_as£π_Áûed
()

	)

105 
BEGIN_DECLS


115 
	$cm3_as£π_Áûed
(Ë
	`__©åibuã__
((
__n‹ëu∫__
));

130 
	$cm3_as£π_Áûed_vîbo£
(c⁄° *
fûe
, 
löe
, c⁄° *
func
,

131 c⁄° *
as£π_ex¥
Ë
	`__©åibuã__
((
__n‹ëu∫__
));

133 
END_DECLS


	@libopencm3/include/libopencm3/cm3/common.h

20 #i‚de‡
LIBOPENCM3_CM3_COMMON_H


21 
	#LIBOPENCM3_CM3_COMMON_H


	)

23 
	~<°döt.h
>

24 
	~<°dboﬁ.h
>

28 #ifde‡
__˝lu•lus


29 
	#BEGIN_DECLS
 "C" {

	)

30 
	#END_DECLS
 }

	)

32 
	#BEGIN_DECLS


	)

33 
	#END_DECLS


	)

38 #ifde‡
__GNUC__


39 #i‡
__GNUC__
 > 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 > 4)

40 
	#LIBOPENCM3_DEPRECATED
(
x
Ë
	`__©åibuã__
((
	`dïªˇãd
(x)))

	)

42 
	#LIBOPENCM3_DEPRECATED
(
x
Ë
	`__©åibuã__
((
dïªˇãd
))

	)

45 
	#LIBOPENCM3_DEPRECATED
(
x
)

	)

50 
	#MMIO8
(
addr
Ë(*(vﬁ©ûê
uöt8_t
 *)◊ddr))

	)

51 
	#MMIO16
(
addr
Ë(*(vﬁ©ûê
uöt16_t
 *)◊ddr))

	)

52 
	#MMIO32
(
addr
Ë(*(vﬁ©ûê
uöt32_t
 *)◊ddr))

	)

53 
	#MMIO64
(
addr
Ë(*(vﬁ©ûê
uöt64_t
 *)◊ddr))

	)

56 
	#BBIO_SRAM
(
addr
, 
bô
) \

57 
	`MMIO32
((((
uöt32_t
)
addr
Ë& 0x0FFFFFË* 32 + 0x22000000 + (
bô
Ë* 4)

	)

59 
	#BBIO_PERIPH
(
addr
, 
bô
) \

60 
	`MMIO32
((((
uöt32_t
)
addr
Ë& 0x0FFFFFË* 32 + 0x42000000 + (
bô
Ë* 4)

	)

63 
	#BIT0
 (1<<0)

	)

64 
	#BIT1
 (1<<1)

	)

65 
	#BIT2
 (1<<2)

	)

66 
	#BIT3
 (1<<3)

	)

67 
	#BIT4
 (1<<4)

	)

68 
	#BIT5
 (1<<5)

	)

69 
	#BIT6
 (1<<6)

	)

70 
	#BIT7
 (1<<7)

	)

71 
	#BIT8
 (1<<8)

	)

72 
	#BIT9
 (1<<9)

	)

73 
	#BIT10
 (1<<10)

	)

74 
	#BIT11
 (1<<11)

	)

75 
	#BIT12
 (1<<12)

	)

76 
	#BIT13
 (1<<13)

	)

77 
	#BIT14
 (1<<14)

	)

78 
	#BIT15
 (1<<15)

	)

79 
	#BIT16
 (1<<16)

	)

80 
	#BIT17
 (1<<17)

	)

81 
	#BIT18
 (1<<18)

	)

82 
	#BIT19
 (1<<19)

	)

83 
	#BIT20
 (1<<20)

	)

84 
	#BIT21
 (1<<21)

	)

85 
	#BIT22
 (1<<22)

	)

86 
	#BIT23
 (1<<23)

	)

87 
	#BIT24
 (1<<24)

	)

88 
	#BIT25
 (1<<25)

	)

89 
	#BIT26
 (1<<26)

	)

90 
	#BIT27
 (1<<27)

	)

91 
	#BIT28
 (1<<28)

	)

92 
	#BIT29
 (1<<29)

	)

93 
	#BIT30
 (1<<30)

	)

94 
	#BIT31
 (1<<31)

	)

	@libopencm3/include/libopencm3/cm3/cortex.h

31 #i‚de‡
LIBOPENCM3_CORTEX_H


32 
	#LIBOPENCM3_CORTEX_H


	)

36 
	~<°dboﬁ.h
>

37 
	~<°döt.h
>

44 
ölöe
 
	$cm_íabÀ_öãºu±s
()

46 
__asm__
 volatile ("CPSIE I\n");

47 
	}
}

54 
ölöe
 
	$cm_dißbÀ_öãºu±s
()

56 
__asm__
 volatile ("CPSID I\n");

57 
	}
}

64 
ölöe
 
	$cm_íabÀ_Áu…s
()

66 
__asm__
 volatile ("CPSIE F\n");

67 
	}
}

74 
ölöe
 
	$cm_dißbÀ_Áu…s
()

76 
__asm__
 volatile ("CPSID F\n");

77 
	}
}

86 
__©åibuã__
((
Æways_ölöe
))

87 
ölöe
 
boﬁ
 
	$cm_is_masked_öãºu±s
()

89 
uöt32_t
 
ªsu…
;

90 
__asm__
 vﬁ©ûê("MRS %0, PRIMASK" : "Ù" (
ªsu…
));

91  
ªsu…
;

92 
	}
}

101 
__©åibuã__
((
Æways_ölöe
))

102 
ölöe
 
boﬁ
 
	$cm_is_masked_Áu…s
()

104 
uöt32_t
 
ªsu…
;

105 
__asm__
 vﬁ©ûê("MRS %0, FAULTMASK" : "Ù" (
ªsu…
));

106  
ªsu…
;

107 
	}
}

119 
__©åibuã__
((
Æways_ölöe
))

120 
ölöe
 
uöt32_t
 
	$cm_mask_öãºu±s
(
uöt32_t
 
mask
)

122 
uöt32_t
 
ﬁd
;

123 
__asm__
 
	`__vﬁ©ûe__
("MRS %0, PRIMASK" : "Ù" (
ﬁd
));

124 
__asm__
 
	`__vﬁ©ûe__
("" : : : "memory");

125 
__asm__
 
	`__vﬁ©ûe__
("MSR PRIMASK, %0" : : "r" (
mask
));

126  
ﬁd
;

127 
	}
}

139 
__©åibuã__
((
Æways_ölöe
))

140 
ölöe
 
uöt32_t
 
	$cm_mask_Áu…s
(
uöt32_t
 
mask
)

142 
uöt32_t
 
ﬁd
;

143 
__asm__
 
	`__vﬁ©ûe__
 ("MRS %0, FAULTMASK" : "Ù" (
ﬁd
));

144 
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "memory");

145 
__asm__
 
	`__vﬁ©ûe__
 ("MSR FAULTMASK, %0" : : "r" (
mask
));

146  
ﬁd
;

147 
	}
}

160 #i‡!
deföed
(
__DOXYGEN__
)

162 
ölöe
 
uöt32_t
 
	$__cm_©omic_£t
(
uöt32_t
 *
vÆ
)

164  
	`cm_mask_öãºu±s
(*
vÆ
);

165 
	}
}

167 
	#__CM_SAVER
(
°©e
) \

168 
__vÆ
 = (
°©e
), \

169 
__ßve
 
	`__©åibuã__
((
	`__˛ónup__
(
__cm_©omic_£t
))) = \

170 
	`__cm_©omic_£t
(&
__vÆ
)

	)

217 #i‡
deföed
(
__DOXYGEN__
)

218 
	#CM_ATOMIC_BLOCK
()

	)

220 
	#CM_ATOMIC_BLOCK
() \

221 
uöt32_t
 
	`__CM_SAVER
(
åue
), 
__my
 =Årue; __my; __my = 
Ál£
)

	)

271 #i‡
deföed
(
__DOXYGEN__
)

272 
	#CM_ATOMIC_CONTEXT
()

	)

274 
	#CM_ATOMIC_CONTEXT
(Ë
uöt32_t
 
	`__CM_SAVER
(
åue
)

	)

	@libopencm3/include/libopencm3/cm3/doc-cm3.h

	@libopencm3/include/libopencm3/cm3/dwt.h

20 #i‚de‡
LIBOPENCM3_CM3_DWT_H


21 
	#LIBOPENCM3_CM3_DWT_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

30 
	#DWT_CTRL
 
	`MMIO32
(
DWT_BASE
 + 0x00)

	)

33 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

35 
	#DWT_CYCCNT
 
	`MMIO32
(
DWT_BASE
 + 0x04)

	)

36 
	#DWT_CPICNT
 
	`MMIO32
(
DWT_BASE
 + 0x08)

	)

37 
	#DWT_EXCCNT
 
	`MMIO32
(
DWT_BASE
 + 0x0C)

	)

38 
	#DWT_SLEEPCNT
 
	`MMIO32
(
DWT_BASE
 + 0x10)

	)

39 
	#DWT_LSUCNT
 
	`MMIO32
(
DWT_BASE
 + 0x14)

	)

40 
	#DWT_FOLDCNT
 
	`MMIO32
(
DWT_BASE
 + 0x18)

	)

44 
	#DWT_PCSR
 
	`MMIO32
(
DWT_BASE
 + 0x1C)

	)

45 
	#DWT_COMP
(
n
Ë
	`MMIO32
(
DWT_BASE
 + 0x20 + (nË* 16)

	)

46 
	#DWT_MASK
(
n
Ë
	`MMIO32
(
DWT_BASE
 + 0x24 + (nË* 16)

	)

47 
	#DWT_FUNCTION
(
n
Ë
	`MMIO32
(
DWT_BASE
 + 0x28 + (nË* 16)

	)

55 
	#DWT_CTRL_NUMCOMP_SHIFT
 28

	)

56 
	#DWT_CTRL_NUMCOMP
 (0x0F << 
DWT_CTRL_NUMCOMP_SHIFT
)

	)

59 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

61 
	#DWT_CTRL_NOTRCPKT
 (1 << 27)

	)

62 
	#DWT_CTRL_NOEXTTRIG
 (1 << 26)

	)

63 
	#DWT_CTRL_NOCYCCNT
 (1 << 25)

	)

64 
	#DWT_CTRL_NOPRFCCNT
 (1 << 24)

	)

66 
	#DWT_CTRL_CYCEVTENA
 (1 << 22)

	)

67 
	#DWT_CTRL_FOLDEVTENA
 (1 << 21)

	)

68 
	#DWT_CTRL_LSUEVTENA
 (1 << 20)

	)

69 
	#DWT_CTRL_SLEEPEVTENA
 (1 << 19)

	)

70 
	#DWT_CTRL_EXCEVTENA
 (1 << 18)

	)

71 
	#DWT_CTRL_CPIEVTENA
 (1 << 17)

	)

72 
	#DWT_CTRL_EXCTRCENA
 (1 << 16)

	)

73 
	#DWT_CTRL_PCSAMPLENA
 (1 << 12)

	)

75 
	#DWT_CTRL_SYNCTAP_SHIFT
 10

	)

76 
	#DWT_CTRL_SYNCTAP
 (3 << 
DWT_CTRL_SYNCTAP_SHIFT
)

	)

77 
	#DWT_CTRL_SYNCTAP_DISABLED
 (0 << 
DWT_CTRL_SYNCTAP_SHIFT
)

	)

78 
	#DWT_CTRL_SYNCTAP_BIT24
 (1 << 
DWT_CTRL_SYNCTAP_SHIFT
)

	)

79 
	#DWT_CTRL_SYNCTAP_BIT26
 (2 << 
DWT_CTRL_SYNCTAP_SHIFT
)

	)

80 
	#DWT_CTRL_SYNCTAP_BIT28
 (3 << 
DWT_CTRL_SYNCTAP_SHIFT
)

	)

82 
	#DWT_CTRL_CYCTAP
 (1 << 9)

	)

84 
	#DWT_CTRL_POSTCNT_SHIFT
 5

	)

85 
	#DWT_CTRL_POSTCNT
 (0x0F << 
DWT_CTRL_POSTCNT_SHIFT
)

	)

87 
	#DWT_CTRL_POSTPRESET_SHIFT
 1

	)

88 
	#DWT_CTRL_POSTPRESET
 (0x0F << 
DWT_CTRL_POSTPRESET_SHIFT
)

	)

90 
	#DWT_CTRL_CYCCNTENA
 (1 << 0)

	)

96 
	#DWT_MASKx_MASK
 0x0F

	)

100 
	#DWT_FUNCTIONx_MATCHED
 (1 << 24)

	)

103 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

105 
	#DWT_FUNCTIONx_DATAVADDR1_SHIFT
 16

	)

106 
	#DWT_FUNCTIONx_DATAVADDR1
 (15 << 
DWT_FUNCTIONx_DATAVADDR1_SHIFT
)

	)

108 
	#DWT_FUNCTIONx_DATAVADDR0_SHIFT
 12

	)

109 
	#DWT_FUNCTIONx_DATAVADDR0
 (15 << 
DWT_FUNCTIONx_DATAVADDR0_SHIFT
)

	)

111 
	#DWT_FUNCTIONx_DATAVSIZE_SHIFT
 10

	)

112 
	#DWT_FUNCTIONx_DATAVSIZE
 (3 << 
DWT_FUNCTIONx_DATAVSIZE_SHIFT
)

	)

113 
	#DWT_FUNCTIONx_DATAVSIZE_BYTE
 (0 << 
DWT_FUNCTIONx_DATAVSIZE_SHIFT
)

	)

114 
	#DWT_FUNCTIONx_DATAVSIZE_HALF
 (1 << 
DWT_FUNCTIONx_DATAVSIZE_SHIFT
)

	)

115 
	#DWT_FUNCTIONx_DATAVSIZE_WORD
 (2 << 
DWT_FUNCTIONx_DATAVSIZE_SHIFT
)

	)

117 
	#DWT_FUNCTIONx_LNK1ENA
 (1 << 9)

	)

118 
	#DWT_FUNCTIONx_DATAVMATCH
 (1 << 8)

	)

119 
	#DWT_FUNCTIONx_CYCMATCH
 (1 << 7)

	)

120 
	#DWT_FUNCTIONx_EMITRANGE
 (1 << 5)

	)

124 
	#DWT_FUNCTIONx_FUNCTION
 15

	)

125 
	#DWT_FUNCTIONx_FUNCTION_DISABLED
 0

	)

128 #i‡
deföed
(
__ARM_ARCH_6M__
)

130 
	#DWT_FUNCTIONx_FUNCTION_PCWATCH
 4

	)

131 
	#DWT_FUNCTIONx_FUNCTION_DWATCH_R
 5

	)

132 
	#DWT_FUNCTIONx_FUNCTION_DWATCH_W
 6

	)

133 
	#DWT_FUNCTIONx_FUNCTION_DWATCH_RW
 7

	)

145 
BEGIN_DECLS


147 
boﬁ
 
dwt_íabÀ_cy˛e_cou¡î
();

148 
uöt32_t
 
dwt_ªad_cy˛e_cou¡î
();

150 
	gEND_DECLS


	@libopencm3/include/libopencm3/cm3/fpb.h

20 #i‚de‡
LIBOPENCM3_CM3_FPB_H


21 
	#LIBOPENCM3_CM3_FPB_H


	)

26 #i‡!
deföed
(
__ARM_ARCH_7M__
Ë&& !deföed(
__ARM_ARCH_7EM__
)

35 
	#FPB_CTRL
 
	`MMIO32
(
FPB_BASE
 + 0)

	)

38 
	#FPB_REMAP
 
	`MMIO32
(
FPB_BASE
 + 4)

	)

41 
	#FPB_COMP
 (&
	`MMIO32
(
FPB_BASE
 + 8))

	)

44 
	#FPB_LSR
 
	`MMIO32
(
FPB_BASE
 + 0xFB4)

	)

46 
	#FPB_LAR
 
	`MMIO32
(
FPB_BASE
 + 0xFB0)

	)

55 
	#FPB_CTRL_NUM_CODE2_MASK
 (0x7 << 12)

	)

57 
	#FPB_CTRL_NUM_LIT_MASK
 (0x‡<< 8)

	)

59 
	#FPB_CTRL_NUM_CODE1_MASK
 (0x‡<< 4)

	)

63 
	#FPB_CTRL_KEY
 (1 << 1)

	)

65 
	#FPB_CTRL_ENABLE
 (1 << 0)

	)

73 
	#FPB_COMP_REPLACE_REMAP
 (0x0 << 30)

	)

74 
	#FPB_COMP_REPLACE_BREAK_LOWER
 (0x1 << 30)

	)

75 
	#FPB_COMP_REPLACE_BREAK_UPPER
 (0x2 << 30)

	)

76 
	#FPB_COMP_REPLACE_BREAK_BOTH
 (0x3 << 30)

	)

77 
	#FPB_COMP_REPLACE_MASK
 (0x3 << 30)

	)

85 
	#FPB_COMP_ENABLE
 (1 << 0)

	)

	@libopencm3/include/libopencm3/cm3/itm.h

20 #i‚de‡
LIBOPENCM3_CM3_ITM_H


21 
	#LIBOPENCM3_CM3_ITM_H


	)

26 #i‡!
deföed
(
__ARM_ARCH_7M__
Ë&& !deföed(
__ARM_ARCH_7EM__
)

33 
	#ITM_STIM8
(
n
Ë(
	`MMIO8
(
ITM_BASE
 + (“)*4)))

	)

34 
	#ITM_STIM16
(
n
Ë(
	`MMIO16
(
ITM_BASE
 + (“)*4)))

	)

35 
	#ITM_STIM32
(
n
Ë(
	`MMIO32
(
ITM_BASE
 + (“)*4)))

	)

38 
	#ITM_TER
 (&
	`MMIO32
(
ITM_BASE
 + 0xE00))

	)

41 
	#ITM_TPR
 
	`MMIO32
(
ITM_BASE
 + 0xE40)

	)

44 
	#ITM_TCR
 
	`MMIO32
(
ITM_BASE
 + 0xE80)

	)

47 
	#ITM_LSR
 
	`MMIO32
(
ITM_BASE
 + 0xFB4)

	)

49 
	#ITM_LAR
 
	`MMIO32
(
ITM_BASE
 + 0xFB0)

	)

57 
	#ITM_STIM_FIFOREADY
 (1 << 0)

	)

73 
	#ITM_TCR_BUSY
 (1 << 23)

	)

74 
	#ITM_TCR_TRACE_BUS_ID_MASK
 (0x3‡<< 16)

	)

76 
	#ITM_TCR_TSPRESCALE_NONE
 (0 << 8)

	)

77 
	#ITM_TCR_TSPRESCALE_DIV4
 (1 << 8)

	)

78 
	#ITM_TCR_TSPRESCALE_DIV16
 (2 << 8)

	)

79 
	#ITM_TCR_TSPRESCALE_DIV64
 (3 << 8)

	)

80 
	#ITM_TCR_TSPRESCALE_MASK
 (3 << 8)

	)

82 
	#ITM_TCR_SWOENA
 (1 << 4)

	)

83 
	#ITM_TCR_TXENA
 (1 << 3)

	)

84 
	#ITM_TCR_SYNCENA
 (1 << 2)

	)

85 
	#ITM_TCR_TSENA
 (1 << 1)

	)

86 
	#ITM_TCR_ITMENA
 (1 << 0)

	)

	@libopencm3/include/libopencm3/cm3/memorymap.h

20 #i‚de‡
LIBOPENCM3_CM3_MEMORYMAP_H


21 
	#LIBOPENCM3_CM3_MEMORYMAP_H


	)

26 
	#PPBI_BASE
 (0xE0000000U)

	)

29 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

31 
	#ITM_BASE
 (
PPBI_BASE
 + 0x0000)

	)

34 
	#DWT_BASE
 (
PPBI_BASE
 + 0x1000)

	)

37 
	#FPB_BASE
 (
PPBI_BASE
 + 0x2000)

	)

42 
	#SCS_BASE
 (
PPBI_BASE
 + 0xE000)

	)

47 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

48 
	#TPIU_BASE
 (
PPBI_BASE
 + 0x40000)

	)

54 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

56 
	#ITR_BASE
 (
SCS_BASE
 + 0x0000)

	)

60 
	#SYS_TICK_BASE
 (
SCS_BASE
 + 0x0010)

	)

63 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100)

	)

66 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00)

	)

69 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90)

	)

72 #i‡
deföed
(
__ARM_ARCH_6M__
)

74 
	#DEBUG_BASE
 (
SCS_BASE
 + 0x0DF0)

	)

78 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

80 
	#STIR_BASE
 (
SCS_BASE
 + 0x0F00)

	)

82 
	#ID_BASE
 (
SCS_BASE
 + 0x0FD0)

	)

	@libopencm3/include/libopencm3/cm3/mpu.h

37 #i‚de‡
LIBOPENCM3_MPU_H


38 
	#LIBOPENCM3_MPU_H


	)

40 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

41 
	~<lib›ícm3/cm3/comm⁄.h
>

49 
	#MPU_TYPE
 
	`MMIO32
(
MPU_BASE
 + 0x00)

	)

50 
	#MPU_CTRL
 
	`MMIO32
(
MPU_BASE
 + 0x04)

	)

51 
	#MPU_RNR
 
	`MMIO32
(
MPU_BASE
 + 0x08)

	)

52 
	#MPU_RBAR
 
	`MMIO32
(
MPU_BASE
 + 0x0C)

	)

53 
	#MPU_RASR
 
	`MMIO32
(
MPU_BASE
 + 0x10)

	)

64 
	#MPU_TYPE_IREGION_LSB
 16

	)

65 
	#MPU_TYPE_IREGION
 (0xFF << 
MPU_TYPE_IREGION_LSB
)

	)

67 
	#MPU_TYPE_DREGION_LSB
 8

	)

68 
	#MPU_TYPE_DREGION
 (0xFF << 
MPU_TYPE_DREGION_LSB
)

	)

70 
	#MPU_TYPE_SEPARATE
 (1<<0)

	)

77 
	#MPU_CTRL_PRIVDEFENA
 (1<<2)

	)

78 
	#MPU_CTRL_HFNMIENA
 (1<<1)

	)

79 
	#MPU_CTRL_ENABLE
 (1<<0)

	)

86 
	#MPU_RNR_REGION_LSB
 0

	)

87 
	#MPU_RNR_REGION
 (0xFF << 
MPU_RNR_REGION_LSB
)

	)

95 
	#MPU_RBAR_ADDR
 0xFFFFFFE0

	)

96 
	#MPU_RBAR_VALID
 (1<<4)

	)

97 
	#MPU_RBAR_REGION_LSB
 0

	)

98 
	#MPU_RBAR_REGION
 (0xF << 
MPU_RBAR_REGION_LSB
)

	)

105 
	#MPU_RASR_ATTRS_LSB
 16

	)

106 
	#MPU_RASR_ATTRS
 (0xFFFF << 
MPU_RASR_ATTRS_LSB
)

	)

107 
	#MPU_RASR_SRD_LSB
 8

	)

108 
	#MPU_RASR_SRD
 (0xFF << 
MPU_RASR_SRD_LSB
)

	)

109 
	#MPU_RASR_SIZE_LSB
 1

	)

110 
	#MPU_RASR_SIZE
 (0x1F << 
MPU_RASR_SIZE_LSB
)

	)

111 
	#MPU_RASR_ENABLE
 (1 << 0)

	)

118 
	#MPU_RASR_ATTR_XN
 (1 << 28)

	)

119 
	#MPU_RASR_ATTR_AP
 (7 << 24)

	)

120 
	#MPU_RASR_ATTR_AP_PNO_UNO
 (0 << 24)

	)

121 
	#MPU_RASR_ATTR_AP_PRW_UNO
 (1 << 24)

	)

122 
	#MPU_RASR_ATTR_AP_PRW_URO
 (2 << 24)

	)

123 
	#MPU_RASR_ATTR_AP_PRW_URW
 (3 << 24)

	)

124 
	#MPU_RASR_ATTR_AP_PRO_UNO
 (5 << 24)

	)

125 
	#MPU_RASR_ATTR_AP_PRO_URO
 (6 << 24)

	)

126 
	#MPU_RASR_ATTR_TEX
 (7 << 19)

	)

127 
	#MPU_RASR_ATTR_S
 (1 << 18)

	)

128 
	#MPU_RASR_ATTR_C
 (1 << 17)

	)

129 
	#MPU_RASR_ATTR_B
 (1 << 16)

	)

130 
	#MPU_RASR_ATTR_SCB
 (7 << 16)

	)

136 
BEGIN_DECLS


139 
	gEND_DECLS


	@libopencm3/include/libopencm3/cm3/nvic.h

37 #i‚de‡
LIBOPENCM3_NVIC_H


38 
	#LIBOPENCM3_NVIC_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

48 
	#NVIC_ISER
(
i£r_id
Ë
	`MMIO32
(
NVIC_BASE
 + 0x00 + \

49 ((
i£r_id
Ë* 4))

	)

56 
	#NVIC_ICER
(
i˚r_id
Ë
	`MMIO32
(
NVIC_BASE
 + 0x80 + \

57 ((
i˚r_id
Ë* 4))

	)

64 
	#NVIC_ISPR
(
i•r_id
Ë
	`MMIO32
(
NVIC_BASE
 + 0x100 + \

65 ((
i•r_id
Ë* 4))

	)

72 
	#NVIC_ICPR
(
i˝r_id
Ë
	`MMIO32
(
NVIC_BASE
 + 0x180 + \

73 ((
i˝r_id
Ë* 4))

	)

78 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

81 
	#NVIC_IABR
(
übr_id
Ë
	`MMIO32
(
NVIC_BASE
 + 0x200 + \

82 ((
übr_id
Ë* 4))

	)

90 
	#NVIC_IPR
(
ùr_id
Ë
	`MMIO8
(
NVIC_BASE
 + 0x300 + \

91 (
ùr_id
))

	)

93 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

95 
	#NVIC_STIR
 
	`MMIO32
(
STIR_BASE
)

	)

106 
	#NVIC_NMI_IRQ
 -14

	)

107 
	#NVIC_HARD_FAULT_IRQ
 -13

	)

110 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

111 
	#NVIC_MEM_MANAGE_IRQ
 -12

	)

112 
	#NVIC_BUS_FAULT_IRQ
 -11

	)

113 
	#NVIC_USAGE_FAULT_IRQ
 -10

	)

117 
	#NVIC_SV_CALL_IRQ
 -5

	)

120 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

121 
	#DEBUG_MONITOR_IRQ
 -4

	)

125 
	#NVIC_PENDSV_IRQ
 -2

	)

126 
	#NVIC_SYSTICK_IRQ
 -1

	)

133 
	~<lib›ícm3/di•©ch/nvic.h
>

137 
BEGIN_DECLS


139 
nvic_íabÀ_úq
(
uöt8_t
 
úqn
);

140 
nvic_dißbÀ_úq
(
uöt8_t
 
úqn
);

141 
uöt8_t
 
nvic_gë_≥ndög_úq
(uöt8_à
úqn
);

142 
nvic_£t_≥ndög_úq
(
uöt8_t
 
úqn
);

143 
nvic_˛ór_≥ndög_úq
(
uöt8_t
 
úqn
);

144 
uöt8_t
 
nvic_gë_úq_íabÀd
(uöt8_à
úqn
);

145 
nvic_£t_¥i‹ôy
(
uöt8_t
 
úqn
, uöt8_à
¥i‹ôy
);

148 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

149 
uöt8_t
 
nvic_gë_a˘ive_úq
(uöt8_à
úqn
);

150 
nvic_gíî©e_so·w¨e_öãºu±
(
uöt16_t
 
úqn
);

153 
ª£t_h™dÀr
();

154 
nmi_h™dÀr
();

155 
h¨d_Áu…_h™dÀr
();

156 
sv_ˇŒ_h™dÀr
();

157 
≥nd_sv_h™dÀr
();

158 
sys_tick_h™dÀr
();

161 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

162 
mem_m™age_h™dÀr
();

163 
bus_Áu…_h™dÀr
();

164 
ußge_Áu…_h™dÀr
();

165 
debug_m⁄ô‹_h™dÀr
();

168 
	gEND_DECLS


	@libopencm3/include/libopencm3/cm3/scb.h

21 #i‚de‡
LIBOPENCM3_SCB_H


22 
	#LIBOPENCM3_SCB_H


	)

24 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

25 
	~<lib›ícm3/cm3/comm⁄.h
>

30 
	#SCB_CPUID
 
	`MMIO32
(
SCB_BASE
 + 0x00)

	)

33 
	#SCB_ICSR
 
	`MMIO32
(
SCB_BASE
 + 0x04)

	)

36 
	#SCB_VTOR
 
	`MMIO32
(
SCB_BASE
 + 0x08)

	)

39 
	#SCB_AIRCR
 
	`MMIO32
(
SCB_BASE
 + 0x0C)

	)

42 
	#SCB_SCR
 
	`MMIO32
(
SCB_BASE
 + 0x10)

	)

45 
	#SCB_CCR
 
	`MMIO32
(
SCB_BASE
 + 0x14)

	)

49 
	#SCB_SHPR
(
sh¥_id
Ë
	`MMIO8
(
SCB_BASE
 + 0x18 + (sh¥_id))

	)

50 
	#SCB_SHPR1
 
	`MMIO32
(
SCB_BASE
 + 0x18)

	)

51 
	#SCB_SHPR2
 
	`MMIO32
(
SCB_BASE
 + 0x1C)

	)

52 
	#SCB_SHPR3
 
	`MMIO32
(
SCB_BASE
 + 0x20)

	)

55 
	#SCB_SHCSR
 
	`MMIO32
(
SCB_BASE
 + 0x24)

	)

58 
	#SCB_DFSR
 
	`MMIO32
(
SCB_BASE
 + 0x30)

	)

61 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

63 
	#SCB_CFSR
 
	`MMIO32
(
SCB_BASE
 + 0x28)

	)

66 
	#SCB_HFSR
 
	`MMIO32
(
SCB_BASE
 + 0x2C)

	)

69 
	#SCB_MMFAR
 
	`MMIO32
(
SCB_BASE
 + 0x34)

	)

72 
	#SCB_BFAR
 
	`MMIO32
(
SCB_BASE
 + 0x38)

	)

75 
	#SCB_AFSR
 
	`MMIO32
(
SCB_BASE
 + 0x3C)

	)

78 
	#SCB_ID_PFR0
 
	`MMIO32
(
SCB_BASE
 + 0x40)

	)

81 
	#SCB_ID_PFR1
 
	`MMIO32
(
SCB_BASE
 + 0x44)

	)

84 
	#SCB_ID_DFR0
 
	`MMIO32
(
SCB_BASE
 + 0x48)

	)

87 
	#SCB_ID_AFR0
 
	`MMIO32
(
SCB_BASE
 + 0x4C)

	)

90 
	#SCB_ID_MMFR0
 
	`MMIO32
(
SCB_BASE
 + 0x50)

	)

93 
	#SCB_ID_MMFR1
 
	`MMIO32
(
SCB_BASE
 + 0x54)

	)

96 
	#SCB_ID_MMFR2
 
	`MMIO32
(
SCB_BASE
 + 0x58)

	)

99 
	#SCB_ID_MMFR3
 
	`MMIO32
(
SCB_BASE
 + 0x5C)

	)

102 
	#SCB_ID_ISAR0
 
	`MMIO32
(
SCB_BASE
 + 0x60)

	)

105 
	#SCB_ID_ISAR1
 
	`MMIO32
(
SCB_BASE
 + 0x64)

	)

108 
	#SCB_ID_ISAR2
 
	`MMIO32
(
SCB_BASE
 + 0x68)

	)

111 
	#SCB_ID_ISAR3
 
	`MMIO32
(
SCB_BASE
 + 0x6C)

	)

114 
	#SCB_ID_ISAR4
 
	`MMIO32
(
SCB_BASE
 + 0x70)

	)

117 
	#SCB_CPACR
 
	`MMIO32
(
SCB_BASE
 + 0x88)

	)

120 
	#SCB_FPCCR
 
	`MMIO32
(
SCB_BASE
 + 0x234)

	)

123 
	#SCB_FPCAR
 
	`MMIO32
(
SCB_BASE
 + 0x238)

	)

126 
	#SCB_FPDSCR
 
	`MMIO32
(
SCB_BASE
 + 0x23C)

	)

129 
	#SCB_MVFR0
 
	`MMIO32
(
SCB_BASE
 + 0x240)

	)

132 
	#SCB_MVFR1
 
	`MMIO32
(
SCB_BASE
 + 0x244)

	)

140 
	#SCB_CPUID_IMPLEMENTER_LSB
 24

	)

141 
	#SCB_CPUID_IMPLEMENTER
 (0xFF << 
SCB_CPUID_IMPLEMENTER_LSB
)

	)

143 
	#SCB_CPUID_VARIANT_LSB
 20

	)

144 
	#SCB_CPUID_VARIANT
 (0xF << 
SCB_CPUID_VARIANT_LSB
)

	)

147 
	#SCB_CPUID_CONSTANT_LSB
 16

	)

148 
	#SCB_CPUID_CONSTANT
 (0xF << 
SCB_CPUID_CONSTANT_LSB
)

	)

149 
	#SCB_CPUID_CONSTANT_ARMV6
 (0xC << 
SCB_CPUID_CONSTANT_LSB
)

	)

150 
	#SCB_CPUID_CONSTANT_ARMV7
 (0xF << 
SCB_CPUID_CONSTANT_LSB
)

	)

153 
	#SCB_CPUID_PARTNO_LSB
 4

	)

154 
	#SCB_CPUID_PARTNO
 (0xFFF << 
SCB_CPUID_PARTNO_LSB
)

	)

156 
	#SCB_CPUID_REVISION_LSB
 0

	)

157 
	#SCB_CPUID_REVISION
 (0xF << 
SCB_CPUID_REVISION_LSB
)

	)

162 
	#SCB_ICSR_NMIPENDSET
 (1 << 31)

	)

165 
	#SCB_ICSR_PENDSVSET
 (1 << 28)

	)

167 
	#SCB_ICSR_PENDSVCLR
 (1 << 27)

	)

169 
	#SCB_ICSR_PENDSTSET
 (1 << 26)

	)

171 
	#SCB_ICSR_PENDSTCLR
 (1 << 25)

	)

174 
	#SCB_ICSR_ISRPREEMPT
 (1 << 23)

	)

176 
	#SCB_ICSR_ISRPENDING
 (1 << 22)

	)

178 
	#SCB_ICSR_VECTPENDING_LSB
 12

	)

179 
	#SCB_ICSR_VECTPENDING
 (0x1FF << 
SCB_ICSR_VECTPENDING_LSB
)

	)

181 
	#SCB_ICSR_RETOBASE
 (1 << 11)

	)

184 
	#SCB_ICSR_VECTACTIVE_LSB
 0

	)

185 
	#SCB_ICSR_VECTACTIVE
 (0x1FF << 
SCB_ICSR_VECTACTIVE_LSB
)

	)

192 #i‡
deföed
(
__ARM_ARCH_6M__
)

194 
	#SCB_VTOR_TBLOFF_LSB
 7

	)

195 
	#SCB_VTOR_TBLOFF
 (0x1FFFFFF << 
SCB_VTOR_TBLOFF_LSB
)

	)

197 #ñi‡
deföed
(
CM1
)

200 #ñi‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

206 
	#SCB_VTOR_TBLOFF_LSB
 9

	)

207 
	#SCB_VTOR_TBLOFF
 (0x7FFFFF << 
SCB_VTOR_TBLOFF_LSB
)

	)

214 
	#SCB_AIRCR_VECTKEYSTAT_LSB
 16

	)

215 
	#SCB_AIRCR_VECTKEYSTAT
 (0xFFFF << 
SCB_AIRCR_VECTKEYSTAT_LSB
)

	)

216 
	#SCB_AIRCR_VECTKEY
 (0x05FA << 
SCB_AIRCR_VECTKEYSTAT_LSB
)

	)

219 
	#SCB_AIRCR_ENDIANESS
 (1 << 15)

	)

222 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

225 
	#SCB_AIRCR_PRIGROUP_GROUP16_NOSUB
 (0x3 << 8)

	)

226 
	#SCB_AIRCR_PRIGROUP_GROUP8_SUB2
 (0x4 << 8)

	)

227 
	#SCB_AIRCR_PRIGROUP_GROUP4_SUB4
 (0x5 << 8)

	)

228 
	#SCB_AIRCR_PRIGROUP_GROUP2_SUB8
 (0x6 << 8)

	)

229 
	#SCB_AIRCR_PRIGROUP_NOGROUP_SUB16
 (0x7 << 8)

	)

230 
	#SCB_AIRCR_PRIGROUP_MASK
 (0x7 << 8)

	)

231 
	#SCB_AIRCR_PRIGROUP_SHIFT
 8

	)

236 
	#SCB_AIRCR_SYSRESETREQ
 (1 << 2)

	)

238 
	#SCB_AIRCR_VECTCLRACTIVE
 (1 << 1)

	)

241 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

243 
	#SCB_AIRCR_VECTRESET
 (1 << 0)

	)

250 
	#SCB_SCR_SEVONPEND
 (1 << 4)

	)

253 
	#SCB_SCR_SLEEPDEEP
 (1 << 2)

	)

255 
	#SCB_SCR_SLEEPONEXIT
 (1 << 1)

	)

262 
	#SCB_CCR_STKALIGN
 (1 << 9)

	)

265 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

267 
	#SCB_CCR_BFHFNMIGN
 (1 << 8)

	)

270 
	#SCB_CCR_DIV_0_TRP
 (1 << 4)

	)

274 
	#SCB_CCR_UNALIGN_TRP
 (1 << 3)

	)

277 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

280 
	#SCB_CCR_USERSETMPEND
 (1 << 1)

	)

282 
	#SCB_CCR_NONBASETHRDENA
 (1 << 0)

	)

287 
	#SCB_SHPR_PRI_4_MEMMANAGE
 0

	)

288 
	#SCB_SHPR_PRI_5_BUSFAULT
 1

	)

289 
	#SCB_SHPR_PRI_6_USAGEFAULT
 2

	)

290 
	#SCB_SHPR_PRI_7_RESERVED
 3

	)

292 
	#SCB_SHPR_PRI_8_RESERVED
 4

	)

293 
	#SCB_SHPR_PRI_9_RESERVED
 5

	)

294 
	#SCB_SHPR_PRI_10_RESERVED
 6

	)

295 
	#SCB_SHPR_PRI_11_SVCALL
 7

	)

297 
	#SCB_SHPR_PRI_12_RESERVED
 8

	)

298 
	#SCB_SHPR_PRI_13_RESERVED
 9

	)

299 
	#SCB_SHPR_PRI_14_PENDSV
 10

	)

300 
	#SCB_SHPR_PRI_15_SYSTICK
 11

	)

307 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

309 
	#SCB_SHCSR_USGFAULTENA
 (1 << 18)

	)

311 
	#SCB_SHCSR_BUSFAULTENA
 (1 << 17)

	)

313 
	#SCB_SHCSR_MEMFAULTENA
 (1 << 16)

	)

317 
	#SCB_SHCSR_SVCALLPENDED
 (1 << 15)

	)

320 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

322 
	#SCB_SHCSR_BUSFAULTPENDED
 (1 << 14)

	)

324 
	#SCB_SHCSR_MEMFAULTPENDED
 (1 << 13)

	)

326 
	#SCB_SHCSR_USGFAULTPENDED
 (1 << 12)

	)

328 
	#SCB_SHCSR_SYSTICKACT
 (1 << 11)

	)

330 
	#SCB_SHCSR_PENDSVACT
 (1 << 10)

	)

333 
	#SCB_SHCSR_MONITORACT
 (1 << 8)

	)

335 
	#SCB_SHCSR_SVCALLACT
 (1 << 7)

	)

338 
	#SCB_SHCSR_USGFAULTACT
 (1 << 3)

	)

341 
	#SCB_SHCSR_BUSFAULTACT
 (1 << 1)

	)

343 
	#SCB_SHCSR_MEMFAULTACT
 (1 << 0)

	)

349 
	#SCB_CFSR_DIVBYZERO
 (1 << 25)

	)

351 
	#SCB_CFSR_UNALIGNED
 (1 << 24)

	)

354 
	#SCB_CFSR_NOCP
 (1 << 19)

	)

356 
	#SCB_CFSR_INVPC
 (1 << 18)

	)

358 
	#SCB_CFSR_INVSTATE
 (1 << 17)

	)

360 
	#SCB_CFSR_UNDEFINSTR
 (1 << 16)

	)

362 
	#SCB_CFSR_BFARVALID
 (1 << 15)

	)

365 
	#SCB_CFSR_STKERR
 (1 << 12)

	)

367 
	#SCB_CFSR_UNSTKERR
 (1 << 11)

	)

369 
	#SCB_CFSR_IMPRECISERR
 (1 << 10)

	)

371 
	#SCB_CFSR_PRECISERR
 (1 << 9)

	)

373 
	#SCB_CFSR_IBUSERR
 (1 << 8)

	)

375 
	#SCB_CFSR_MMARVALID
 (1 << 7)

	)

378 
	#SCB_CFSR_MSTKERR
 (1 << 4)

	)

380 
	#SCB_CFSR_MUNSTKERR
 (1 << 3)

	)

383 
	#SCB_CFSR_DACCVIOL
 (1 << 1)

	)

385 
	#SCB_CFSR_IACCVIOL
 (1 << 0)

	)

390 
	#SCB_HFSR_DEBUG_VT
 (1 << 31)

	)

392 
	#SCB_HFSR_FORCED
 (1 << 30)

	)

395 
	#SCB_HFSR_VECTTBL
 (1 << 1)

	)

409 
	#SCB_CPACR_NONE
 0

	)

410 
	#SCB_CPACR_PRIV
 1

	)

411 
	#SCB_CPACR_FULL
 3

	)

414 
	#SCB_CPACR_CP10
 (1 << 20)

	)

416 
	#SCB_CPACR_CP11
 (1 << 22)

	)

421 
BEGIN_DECLS


423 
	sscb_ex˚±i⁄_°ack_‰ame
 {

424 
uöt32_t
 
	mr0
;

425 
uöt32_t
 
	mr1
;

426 
uöt32_t
 
	mr2
;

427 
uöt32_t
 
	mr3
;

428 
uöt32_t
 
	mr12
;

429 
uöt32_t
 
	mÃ
;

430 
uöt32_t
 
	mpc
;

431 
uöt32_t
 
	mxp§
;

432 } 
__©åibuã__
((
∑cked
));

434 
	#SCB_GET_EXCEPTION_STACK_FRAME
(
f
) \

436 
asm
 volatile ("mov %[frameptr], sp" \

437 : [
‰amïå
]"Ù" (
f
)); \

438 } 0)

	)

440 
	$scb_ª£t_sy°em
(Ë
	`__©åibuã__
((
n‹ëu∫
, 
«ked
));

443 #i‡
	`deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

444 
	$scb_ª£t_c‹e
(Ë
	`__©åibuã__
((
n‹ëu∫
, 
«ked
));

445 
	`scb_£t_¥i‹ôy_groupög
(
uöt32_t
 
¥igroup
);

448 
END_DECLS


	@libopencm3/include/libopencm3/cm3/scs.h

21 #i‚de‡
LIBOPENCM3_CM3_SCS_H


22 
	#LIBOPENCM3_CM3_SCS_H


	)

47 
	#SCS_SHPR
(
ùr_id
Ë
	`MMIO8
(
SCS_BASE
 + 0xD18 + (ùr_id))

	)

64 
	#SCS_DHCSR
 
	`MMIO32
(
SCS_BASE
 + 0xDF0)

	)

77 
	#SCS_DCRSR
 
	`MMIO32
(
SCS_BASE
 + 0xDF4)

	)

96 
	#SCS_DCRDR
 
	`MMIO32
(
SCS_BASE
 + 0xDF8)

	)

109 
	#SCS_DEMCR
 
	`MMIO32
(
SCS_BASE
 + 0xDFC)

	)

112 
	#SCS_DHCSR_DBGKEY
 0xA05F0000

	)

113 
	#SCS_DHCSR_C_DEBUGEN
 0x00000001

	)

114 
	#SCS_DHCSR_C_HALT
 0x00000002

	)

115 
	#SCS_DHCSR_C_STEP
 0x00000004

	)

116 
	#SCS_DHCSR_C_MASKINTS
 0x00000008

	)

117 
	#SCS_DHCSR_C_SNAPSTALL
 0x00000020

	)

118 
	#SCS_DHCSR_S_REGRDY
 0x00010000

	)

119 
	#SCS_DHCSR_S_HALT
 0x00020000

	)

120 
	#SCS_DHCSR_S_SLEEP
 0x00040000

	)

121 
	#SCS_DHCSR_S_LOCKUP
 0x00080000

	)

122 
	#SCS_DHCSR_S_RETIRE_ST
 0x01000000

	)

123 
	#SCS_DHCSR_S_RESET_ST
 0x02000000

	)

126 
	#SCS_DCRSR_REGSEL_MASK
 0x0000001F

	)

127 
	#SCS_DCRSR_REGSEL_XPSR
 0x00000010

	)

128 
	#SCS_DCRSR_REGSEL_MSP
 0x00000011

	)

129 
	#SCS_DCRSR_REGSEL_PSP
 0x00000012

	)

133 
	#SCS_DEMCR_TRCENA
 (1 << 24)

	)

135 
	#SCS_DEMCR_MON_REQ
 (1 << 19)

	)

136 
	#SCS_DEMCR_MON_STEP
 (1 << 18)

	)

137 
	#SCS_DEMCR_VC_MON_PEND
 (1 << 17)

	)

138 
	#SCS_DEMCR_VC_MON_EN
 (1 << 16)

	)

140 
	#SCS_DEMCR_VC_HARDERR
 (1 << 10)

	)

141 
	#SCS_DEMCR_VC_INTERR
 (1 << 9)

	)

142 
	#SCS_DEMCR_VC_BUSERR
 (1 << 8)

	)

143 
	#SCS_DEMCR_VC_STATERR
 (1 << 7)

	)

144 
	#SCS_DEMCR_VC_CHKERR
 (1 << 6)

	)

145 
	#SCS_DEMCR_VC_NOCPERR
 (1 << 5)

	)

146 
	#SCS_DEMCR_VC_MMERR
 (1 << 4)

	)

148 
	#SCS_DEMCR_VC_CORERESET
 (1 << 0)

	)

175 
	#SCS_SYST_CSR
 
	`MMIO32
(
SCS_BASE
 + 0x10)

	)

185 
	#CM_SCS_SYST_RVR
 
	`MMIO32
(
SCS_BASE
 + 0x14)

	)

192 
	#CM_SCS_SYST_CVR
 
	`MMIO32
(
SCS_BASE
 + 0x18)

	)

200 
	#CM_SCS_SYST_CALIB
 
	`MMIO32
(
SCS_BASE
 + 0x1C)

	)

204 
	#SCS_SYST_CSR_ENABLE
 (
BIT0
)

	)

206 
	#SCS_SYST_CSR_TICKINT
 (
BIT1
)

	)

208 
	#SCS_SYST_CSR_CLKSOURCE
 (
BIT2
)

	)

215 
	#SCS_SYST_CSR_COUNTFLAG
 (
BIT16
)

	)

232 
	#SCS_SYST_SYST_CALIB_TENMS_MASK
 (
BIT24
-1)

	)

239 
	#SCS_SYST_SYST_CALIB_VALUE_INEXACT
 (
BIT30
)

	)

248 
	#SCS_SYST_SYST_CALIB_REF_NOT_IMPLEMENTED
 (
BIT31
)

	)

265 
	#SCS_DWT_CTRL
 
	`MMIO32
(
DWT_BASE
 + 0x00)

	)

281 
	#SCS_DWT_CYCCNT
 
	`MMIO32
(
DWT_BASE
 + 0x04)

	)

294 
	#SCS_DWT_CPICNT
 
	`MMIO32
(
DWT_BASE
 + 0x08)

	)

297 
	#SCS_DWT_EXCCNT
 
	`MMIO32
(
DWT_BASE
 + 0x0C)

	)

300 
	#SCS_DWT_SLEEPCNT
 
	`MMIO32
(
DWT_BASE
 + 0x10)

	)

303 
	#SCS_DWT_LSUCNT
 
	`MMIO32
(
DWT_BASE
 + 0x14)

	)

306 
	#SCS_DWT_FOLDCNT
 
	`MMIO32
(
DWT_BASE
 + 0x18)

	)

309 
	#SCS_DWT_PCSR
 
	`MMIO32
(
DWT_BASE
 + 0x18)

	)

312 
	#SCS_DWT_LSR
 
	`MMIO32
(
SCS_DWT_BASE
 + 0xFB4)

	)

314 
	#SCS_DWT_LAR
 
	`MMIO32
(
SCS_DWT_BASE
 + 0xFB0)

	)

322 
	#SCS_DWT_CTRL_CYCCNTENA
 (
BIT0
)

	)

325 
	#SCS_LSR_SLK
 (1<<1)

	)

327 
	#SCS_LSR_SLI
 (1<<0)

	)

329 
	#SCS_LAR_KEY
 0xC5ACCE55

	)

334 
	#SCS_DWT_CYCLE_COUNTER_ENABLED
(Ë((
SCS_DEMCR
 |
SCS_DEMCR_TRCENA
)\

335 (
SCS_DWT_CTRL
 |
SCS_DWT_CTRL_CYCCNTENA
))

	)

337 
	#SCS_SYSTICK_DISABLED
(Ë(
SCS_SYST_CSR
 = 0)

	)

342 
	#SCS_SYSTICK_ENABLED
(Ë(
SCS_SYST_CSR
 = (
SCS_SYST_CSR_ENABLE
 | \

343 
SCS_SYST_CSR_CLKSOURCE
))

	)

346 
	#SCS_SYSTICK_AND_IRQ_ENABLED
(Ë(
SCS_SYST_CSR
 = (
SCS_SYST_CSR_ENABLE
 | \

347 
SCS_SYST_CSR_CLKSOURCE
 | \

348 
SCS_SYST_CSR_TICKINT
))

	)

	@libopencm3/include/libopencm3/cm3/sync.h

20 #i‚de‡
LIBOPENCM3_CM3_SYNC_H


21 
	#LIBOPENCM3_CM3_SYNC_H


	)

23 
	~"comm⁄.h
"

25 
BEGIN_DECLS


27 
__dmb
();

37 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

39 
uöt32_t
 
__ldªx
(vﬁ©ûêuöt32_à*
addr
);

40 
uöt32_t
 
__°ªx
(uöt32_à
vÆ
, vﬁ©ûêuöt32_à*
addr
);

46 
uöt32_t
 
	tmuãx_t
;

48 
	#MUTEX_UNLOCKED
 0

	)

49 
	#MUTEX_LOCKED
 1

	)

51 
muãx_lock
(
muãx_t
 *
m
);

52 
uöt32_t
 
muãx_åylock
(
muãx_t
 *
m
);

53 
muãx_u∆ock
(
muãx_t
 *
m
);

57 
	gEND_DECLS


	@libopencm3/include/libopencm3/cm3/systick.h

43 #i‚de‡
LIBOPENCM3_SYSTICK_H


44 
	#LIBOPENCM3_SYSTICK_H


	)

46 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

47 
	~<lib›ícm3/cm3/comm⁄.h
>

52 
	#STK_CSR
 
	`MMIO32
(
SYS_TICK_BASE
 + 0x00)

	)

55 
	#STK_RVR
 
	`MMIO32
(
SYS_TICK_BASE
 + 0x04)

	)

58 
	#STK_CVR
 
	`MMIO32
(
SYS_TICK_BASE
 + 0x08)

	)

61 
	#STK_CALIB
 
	`MMIO32
(
SYS_TICK_BASE
 + 0x0C)

	)

66 
	#STK_CSR_COUNTFLAG
 (1 << 16)

	)

70 
	#STK_CSR_CLKSOURCE_LSB
 2

	)

71 
	#STK_CSR_CLKSOURCE
 (1 << 
STK_CSR_CLKSOURCE_LSB
)

	)

77 #i‡
deföed
(
__ARM_ARCH_6M__
)

78 
	#STK_CSR_CLKSOURCE_EXT
 (0 << 
STK_CSR_CLKSOURCE_LSB
)

	)

79 
	#STK_CSR_CLKSOURCE_AHB
 (1 << 
STK_CSR_CLKSOURCE_LSB
)

	)

81 
	#STK_CSR_CLKSOURCE_AHB_DIV8
 (0 << 
STK_CSR_CLKSOURCE_LSB
)

	)

82 
	#STK_CSR_CLKSOURCE_AHB
 (1 << 
STK_CSR_CLKSOURCE_LSB
)

	)

87 
	#STK_CSR_TICKINT
 (1 << 1)

	)

89 
	#STK_CSR_ENABLE
 (1 << 0)

	)

94 
	#STK_RVR_RELOAD
 0x00FFFFFF

	)

100 
	#STK_CVR_CURRENT
 0x00FFFFFF

	)

105 
	#STK_CALIB_NOREF
 (1 << 31)

	)

107 
	#STK_CALIB_SKEW
 (1 << 30)

	)

110 
	#STK_CALIB_TENMS
 0x00FFFFFF

	)

114 
BEGIN_DECLS


116 
sy°ick_£t_ªlﬂd
(
uöt32_t
 
vÆue
);

117 
boﬁ
 
sy°ick_£t_‰equícy
(
uöt32_t
 
‰eq
, uöt32_à
ahb
);

118 
uöt32_t
 
sy°ick_gë_ªlﬂd
();

119 
uöt32_t
 
sy°ick_gë_vÆue
();

120 
sy°ick_£t_˛ocksour˚
(
uöt8_t
 
˛ocksour˚
);

121 
sy°ick_öãºu±_íabÀ
();

122 
sy°ick_öãºu±_dißbÀ
();

123 
sy°ick_cou¡î_íabÀ
();

124 
sy°ick_cou¡î_dißbÀ
();

125 
uöt8_t
 
sy°ick_gë_cou¡Êag
();

126 
sy°ick_˛ór
();

128 
uöt32_t
 
sy°ick_gë_ˇlib
();

130 
	gEND_DECLS


	@libopencm3/include/libopencm3/cm3/tpiu.h

20 #i‚de‡
LIBOPENCM3_CM3_TPIU_H


21 
	#LIBOPENCM3_CM3_TPIU_H


	)

26 #i‡!
deföed
(
__ARM_ARCH_7M__
Ë&& !deföed(
__ARM_ARCH_7EM__
)

33 
	#TPIU_SSPSR
 
	`MMIO32
(
TPIU_BASE
 + 0x000)

	)

36 
	#TPIU_CSPSR
 
	`MMIO32
(
TPIU_BASE
 + 0x004)

	)

39 
	#TPIU_ACPR
 
	`MMIO32
(
TPIU_BASE
 + 0x010)

	)

42 
	#TPIU_SPPR
 
	`MMIO32
(
TPIU_BASE
 + 0x0F0)

	)

45 
	#TPIU_FFSR
 
	`MMIO32
(
TPIU_BASE
 + 0x300)

	)

48 
	#TPIU_FFCR
 
	`MMIO32
(
TPIU_BASE
 + 0x304)

	)

51 
	#TPIU_DEVID
 
	`MMIO32
(
TPIU_BASE
 + 0xFC8)

	)

54 
	#TPIU_LSR
 
	`MMIO32
(
TPIU_BASE
 + 0xFB4)

	)

56 
	#TPIU_LAR
 
	`MMIO32
(
TPIU_BASE
 + 0xFB0)

	)

68 
	#TPIU_SPPR_SYNC
 (0x0)

	)

69 
	#TPIU_SPPR_ASYNC_MANCHESTER
 (0x1)

	)

70 
	#TPIU_SPPR_ASYNC_NRZ
 (0x2)

	)

75 
	#TPIU_FFSR_FTNONSTOP
 (1 << 3)

	)

76 
	#TPIU_FFSR_TCPRESENT
 (1 << 2)

	)

77 
	#TPIU_FFSR_FTSTOPPED
 (1 << 1)

	)

78 
	#TPIU_FFSR_FLINPROG
 (1 << 0)

	)

83 
	#TPIU_FFCR_TRIGIN
 (1 << 8)

	)

85 
	#TPIU_FFCR_ENFCONT
 (1 << 1)

	)

91 
	#TPUI_DEVID_NRZ_SUPPORTED
 (1 << 11)

	)

92 
	#TPUI_DEVID_MANCHESTER_SUPPORTED
 (1 << 10)

	)

94 
	#TPUI_DEVID_FIFO_SIZE_MASK
 (7 << 6)

	)

	@libopencm3/include/libopencm3/cm3/vector.h

37 #i‚de‡
LIBOPENCM3_VECTOR_H


38 
	#LIBOPENCM3_VECTOR_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/cm3/nvic.h
>

45 (*
	tve˘‹_èbÀ_íåy_t
)();

48 *
öôül_•_vÆue
;

49 
ve˘‹_èbÀ_íåy_t
 
ª£t
;

50 
ve˘‹_èbÀ_íåy_t
 
nmi
;

51 
ve˘‹_èbÀ_íåy_t
 
h¨d_Áu…
;

52 
ve˘‹_èbÀ_íåy_t
 
mem‹y_m™age_Áu…
;

53 
ve˘‹_èbÀ_íåy_t
 
bus_Áu…
;

54 
ve˘‹_èbÀ_íåy_t
 
ußge_Áu…
;

55 
ve˘‹_èbÀ_íåy_t
 
ª£rved_x001c
[4];

56 
ve˘‹_èbÀ_íåy_t
 
sv_ˇŒ
;

57 
ve˘‹_èbÀ_íåy_t
 
debug_m⁄ô‹
;

58 
ve˘‹_èbÀ_íåy_t
 
ª£rved_x0034
;

59 
ve˘‹_èbÀ_íåy_t
 
≥nd_sv
;

60 
ve˘‹_èbÀ_íåy_t
 
sy°ick
;

61 
ve˘‹_èbÀ_íåy_t
 
úq
[
NVIC_IRQ_COUNT
];

62 } 
	tve˘‹_èbÀ_t
;

65 
_d©a_lﬂdaddr
, 
_d©a
, 
_ed©a
, 
_ebss
, 
_°ack
;

66 
ve˘‹_èbÀ_t
 
ve˘‹_èbÀ
;

	@libopencm3/include/libopencm3/dispatch/nvic.h

1 #i‚de‡
LIBOPENCM3_NVIC_H


2 #îr‹ 
You
 
should
 
nŸ
 
be
 
ö˛udög
 
this
 
fûe
 
dúe˘ly
, 
but
 <
lib›ícm3
/
cm3
/
nvic
.
h
>

5 #i‡
deföed
(
STM32F0
)

6 
	~<lib›ícm3/°m32/f0/nvic.h
>

7 #ñi‡
deföed
(
STM32F1
)

8 
	~<lib›ícm3/°m32/f1/nvic.h
>

9 #ñi‡
deföed
(
STM32F2
)

10 
	~<lib›ícm3/°m32/f2/nvic.h
>

11 #ñi‡
deföed
(
STM32F3
)

12 
	~<lib›ícm3/°m32/f3/nvic.h
>

13 #ñi‡
deföed
(
STM32F4
)

14 
	~<lib›ícm3/°m32/f4/nvic.h
>

15 #ñi‡
deföed
(
STM32F7
)

16 
	~<lib›ícm3/°m32/f7/nvic.h
>

17 #ñi‡
deföed
(
STM32L0
)

18 
	~<lib›ícm3/°m32/l0/nvic.h
>

19 #ñi‡
deföed
(
STM32L1
)

20 
	~<lib›ícm3/°m32/l1/nvic.h
>

21 #ñi‡
deföed
(
STM32L4
)

22 
	~<lib›ícm3/°m32/l4/nvic.h
>

24 #ñi‡
deföed
(
EFM32TG
)

25 
	~<lib›ícm3/efm32/tg/nvic.h
>

26 #ñi‡
deföed
(
EFM32G
)

27 
	~<lib›ícm3/efm32/g/nvic.h
>

28 #ñi‡
deföed
(
EFM32LG
)

29 
	~<lib›ícm3/efm32/lg/nvic.h
>

30 #ñi‡
deföed
(
EFM32GG
)

31 
	~<lib›ícm3/efm32/gg/nvic.h
>

32 #ñi‡
deföed
(
EFM32HG
)

33 
	~<lib›ícm3/efm32/hg/nvic.h
>

34 #ñi‡
deföed
(
EFM32WG
)

35 
	~<lib›ícm3/efm32/wg/nvic.h
>

36 #ñi‡
deföed
(
EZR32WG
)

37 
	~<lib›ícm3/efm32/ezr32wg/nvic.h
>

39 #ñi‡
deföed
(
LPC13XX
)

40 
	~<lib›ícm3/Õc13xx/nvic.h
>

41 #ñi‡
deföed
(
LPC17XX
)

42 
	~<lib›ícm3/Õc17xx/nvic.h
>

43 #ñi‡
deföed
(
LPC43XX_M4
)

44 
	~<lib›ícm3/Õc43xx/m4/nvic.h
>

45 #ñi‡
deföed
(
LPC43XX_M0
)

46 
	~<lib›ícm3/Õc43xx/m0/nvic.h
>

48 #ñi‡
deföed
(
SAM3A
)

49 
	~<lib›ícm3/ßm/3a/nvic.h
>

50 #ñi‡
deföed
(
SAM3N
)

51 
	~<lib›ícm3/ßm/3n/nvic.h
>

52 #ñi‡
deföed
(
SAM3S
)

53 
	~<lib›ícm3/ßm/3s/nvic.h
>

54 #ñi‡
deföed
(
SAM3U
)

55 
	~<lib›ícm3/ßm/3u/nvic.h
>

56 #ñi‡
deföed
(
SAM3X
)

57 
	~<lib›ícm3/ßm/3x/nvic.h
>

58 #ñi‡
deföed
(
SAM4L
)

59 
	~<lib›ícm3/ßm/4l/nvic.h
>

60 #ñi‡
deföed
(
SAMD
)

61 
	~<lib›ícm3/ßm/d/nvic.h
>

63 #ñi‡
deföed
(
LM3S
Ë|| deföed(
LM4F
)

65 
	~<lib›ícm3/lm3s/nvic.h
>

67 #ñi‡
deföed
(
VF6XX
)

68 
	~<lib›ícm3/vf6xx/nvic.h
>

73 
	#NVIC_IRQ_COUNT
 0

	)

	@libopencm3/include/libopencm3/efm32/acmp.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/acmp.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/acmp.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/acmp.h
>

	@libopencm3/include/libopencm3/efm32/adc.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/adc.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/adc.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/adc.h
>

	@libopencm3/include/libopencm3/efm32/burtc.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/buπc.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/buπc.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/buπc.h
>

	@libopencm3/include/libopencm3/efm32/cmu.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/cmu.h
>

22 #ñi‡
deföed
(
EFM32HG
)

23 
	~<lib›ícm3/efm32/hg/cmu.h
>

24 #ñi‡
deföed
(
EFM32WG
)

25 
	~<lib›ícm3/efm32/wg/cmu.h
>

26 #ñi‡
deföed
(
EZR32WG
)

27 
	~<lib›ícm3/efm32/ezr32wg/cmu.h
>

	@libopencm3/include/libopencm3/efm32/common/acmp_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_ACMP_H


21 
	#LIBOPENCM3_EFM32_ACMP_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#ACMP_CTRL
(
ba£
Ë((ba£Ë+ 0x000)

	)

27 
	#ACMP_INPUTSEL
(
ba£
Ë((ba£Ë+ 0x004)

	)

28 
	#ACMP_STATUS
(
ba£
Ë((ba£Ë+ 0x008)

	)

29 
	#ACMP_IEN
(
ba£
Ë((ba£Ë+ 0x00C)

	)

30 
	#ACMP_IF
(
ba£
Ë((ba£Ë+ 0x010)

	)

31 
	#ACMP_IFS
(
ba£
Ë((ba£Ë+ 0x014)

	)

32 
	#ACMP_IFC
(
ba£
Ë((ba£Ë+ 0x018)

	)

33 
	#ACMP_ROUTE
(
ba£
Ë((ba£Ë+ 0x01C)

	)

36 
	#ACMP_CTRL_FULLBIAS
 (1 << 31)

	)

37 
	#ACMP_CTRL_HALFBIAS
 (1 << 30)

	)

39 
	#ACMP_CTRL_BIASPROG_SHIFT
 (24)

	)

40 
	#ACMP_CTRL_BIASPROG_MASK
 (0xF << 
ACMP_CTRL_BIASPROG_SHIFT
)

	)

41 
	#ACMP_CTRL_BIASPROG
(
v
) \

42 (((
v
Ë<< 
ACMP_CTRL_BIASPROG_SHIFT
Ë& 
ACMP_CTRL_BIASPROG_MASK
)

	)

44 
	#ACMP_CTRL_IFALL
 (1 << 17)

	)

45 
	#ACMP_CTRL_IRISE
 (1 << 16)

	)

47 
	#ACMP_CTRL_WARMTIME_SHIFT
 (8)

	)

48 
	#ACMP_CTRL_WARMTIME_MASK
 (0x7 << 
ACMP_CTRL_WARMTIME_SHIFT
)

	)

49 
	#ACMP_CTRL_WARMTIME
(
v
) \

50 (((
v
Ë<< 
ACMP_CTRL_WARMTIME_SHIFT
Ë& 
ACMP_CTRL_WARMTIME_MASK
)

	)

51 
	#ACMP_CTRL_WARMTIME_4CYCLES
 0

	)

52 
	#ACMP_CTRL_WARMTIME_8CYCLES
 1

	)

53 
	#ACMP_CTRL_WARMTIME_16CYCLES
 2

	)

54 
	#ACMP_CTRL_WARMTIME_32CYCLES
 3

	)

55 
	#ACMP_CTRL_WARMTIME_64CYCLES
 4

	)

56 
	#ACMP_CTRL_WARMTIME_128CYCLES
 5

	)

57 
	#ACMP_CTRL_WARMTIME_256CYCLES
 6

	)

58 
	#ACMP_CTRL_WARMTIME_512CYCLES
 7

	)

60 
	#ACMP_CTRL_HYSTSEL_SHIFT
 (8)

	)

61 
	#ACMP_CTRL_HYSTSEL_MASK
 (0x7 << 
ACMP_CTRL_HYSTSEL_SHIFT
)

	)

62 
	#ACMP_CTRL_HYSTSEL
(
v
) \

63 (((
v
Ë<< 
ACMP_CTRL_HYSTSEL_SHIFT
Ë& 
ACMP_CTRL_HYSTSEL_MASK
)

	)

64 
	#ACMP_CTRL_HYSTSEL_HYSTx
(
x
Ë
	`ACMP_CTRL_HYSTSEL
(x)

	)

65 
	#ACMP_CTRL_HYSTSEL_HYST0
 0

	)

66 
	#ACMP_CTRL_HYSTSEL_HYST1
 1

	)

67 
	#ACMP_CTRL_HYSTSEL_HYST2
 2

	)

68 
	#ACMP_CTRL_HYSTSEL_HYST3
 3

	)

69 
	#ACMP_CTRL_HYSTSEL_HYST4
 4

	)

70 
	#ACMP_CTRL_HYSTSEL_HYST5
 5

	)

71 
	#ACMP_CTRL_HYSTSEL_HYST6
 6

	)

72 
	#ACMP_CTRL_HYSTSEL_HYST7
 7

	)

74 
	#ACMP_CTRL_GPIOINV
 (1 << 3)

	)

75 
	#ACMP_CTRL_INACTVAL
 (1 << 2)

	)

76 
	#ACMP_CTRL_MUXEN
 (1 << 1)

	)

77 
	#ACMP_CTRL_EN
 (1 << 0)

	)

80 
	#ACMP_INPUTSEL_CSRESSEL_SHIFT
 (28)

	)

81 
	#ACMP_INPUTSEL_CSRESSEL_MASK
 (0x3 << 
ACMP_INPUTSEL_CSRESSEL_SHIFT
)

	)

82 
	#ACMP_INPUTSEL_CSRESSEL
(
v
) \

83 (((
v
Ë<< 
ACMP_INPUTSEL_CSRESSEL_SHIFT
Ë& 
ACMP_INPUTSEL_CSRESSEL_MASK
)

	)

84 
	#ACMP_INPUTSEL_CSRESSEL_RESx
(
x
Ë
	`ACMP_INPUTSEL_CSRESSEL_RES
(x)

	)

85 
	#ACMP_INPUTSEL_CSRESSEL_RES0
 
	`ACMP_INPUTSEL_CSRESSEL_RESx
(0)

	)

86 
	#ACMP_INPUTSEL_CSRESSEL_RES1
 
	`ACMP_INPUTSEL_CSRESSEL_RESx
(1)

	)

87 
	#ACMP_INPUTSEL_CSRESSEL_RES2
 
	`ACMP_INPUTSEL_CSRESSEL_RESx
(2)

	)

88 
	#ACMP_INPUTSEL_CSRESSEL_RES3
 
	`ACMP_INPUTSEL_CSRESSEL_RESx
(3)

	)

90 
	#ACMP_INPUTSEL_CSRESEN
 (1 << 24)

	)

91 
	#ACMP_INPUTSEL_LPREF
 (1 << 16)

	)

93 
	#ACMP_INPUTSEL_VDDLEVEL_SHIFT
 (8)

	)

94 
	#ACMP_INPUTSEL_VDDLEVEL_MASK
 (0x3F << 
ACMP_INPUTSEL_VDDLEVEL_SHIFT
)

	)

95 
	#ACMP_INPUTSEL_VDDLEVEL
(
v
) \

96 (((
v
Ë<< 
ACMP_INPUTSEL_VDDLEVEL_SHIFT
Ë& 
ACMP_INPUTSEL_VDDLEVEL_MASK
)

	)

98 
	#ACMP_INPUTSEL_NEGSEL_SHIFT
 (8)

	)

99 
	#ACMP_INPUTSEL_NEGSEL_MASK
 (0x3F << 
ACMP_INPUTSEL_NEGSEL_SHIFT
)

	)

100 
	#ACMP_INPUTSEL_NEGSEL
(
v
) \

101 (((
v
Ë<< 
ACMP_INPUTSEL_NEGSEL_SHIFT
Ë& 
ACMP_INPUTSEL_NEGSEL_MASK
)

	)

102 
	#ACMP_INPUTSEL_NEGSEL_CHx
(
x
Ë
	`ACMP_INPUTSEL_NEGSEL
(x)

	)

103 
	#ACMP_INPUTSEL_NEGSEL_CH0
 0

	)

104 
	#ACMP_INPUTSEL_NEGSEL_CH1
 1

	)

105 
	#ACMP_INPUTSEL_NEGSEL_CH2
 2

	)

106 
	#ACMP_INPUTSEL_NEGSEL_CH3
 3

	)

107 
	#ACMP_INPUTSEL_NEGSEL_CH4
 4

	)

108 
	#ACMP_INPUTSEL_NEGSEL_CH5
 5

	)

109 
	#ACMP_INPUTSEL_NEGSEL_CH6
 6

	)

110 
	#ACMP_INPUTSEL_NEGSEL_CH7
 7

	)

111 
	#ACMP_INPUTSEL_NEGSEL_1V25
 8

	)

112 
	#ACMP_INPUTSEL_NEGSEL_2V5
 9

	)

113 
	#ACMP_INPUTSEL_NEGSEL_VDD
 10

	)

114 
	#ACMP_INPUTSEL_NEGSEL_CAPSENSE
 11

	)

115 
	#ACMP_INPUTSEL_NEGSEL_DAC0CH0
 12

	)

116 
	#ACMP_INPUTSEL_NEGSEL_DAC0CH1
 13

	)

118 
	#ACMP_INPUTSEL_POSSEL_SHIFT
 (0)

	)

119 
	#ACMP_INPUTSEL_POSSEL_MASK
 (0x7 << 
ACMP_INPUTSEL_POSSEL_SHIFT
)

	)

120 
	#ACMP_INPUTSEL_POSSEL
(
v
) \

121 (((
v
Ë<< 
ACMP_INPUTSEL_LPOSSELL_SHIFT
Ë& 
ACMP_INPUTSEL_LPOSSELL_MASK
)

	)

122 
	#ACMP_INPUTSEL_POSSEL_CHx
(
x
Ë
	`ACMP_INPUTSEL_POSSEL
(x)

	)

123 
	#ACMP_INPUTSEL_POSSEL_CH0
 0

	)

124 
	#ACMP_INPUTSEL_POSSEL_CH1
 1

	)

125 
	#ACMP_INPUTSEL_POSSEL_CH2
 2

	)

126 
	#ACMP_INPUTSEL_POSSEL_CH3
 3

	)

127 
	#ACMP_INPUTSEL_POSSEL_CH4
 4

	)

128 
	#ACMP_INPUTSEL_POSSEL_CH5
 5

	)

129 
	#ACMP_INPUTSEL_POSSEL_CH6
 6

	)

130 
	#ACMP_INPUTSEL_POSSEL_CH7
 7

	)

133 
	#ACMP_STATUS_ACMPOUT
 (1 << 1)

	)

134 
	#ACMP_STATUS_ACMPACT
 (1 << 0)

	)

137 
	#ACMP_IEN_WARMUP
 (1 << 1)

	)

138 
	#ACMP_IEN_EDGE
 (1 << 0)

	)

141 
	#ACMP_IF_WARMUP
 (1 << 1)

	)

142 
	#ACMP_IF_EDGE
 (1 << 0)

	)

145 
	#ACMP_IFS_WARMUP
 (1 << 1)

	)

146 
	#ACMP_IFS_EDGE
 (1 << 0)

	)

149 
	#ACMP_IFC_WARMUP
 (1 << 1)

	)

150 
	#ACMP_IFC_EDGE
 (1 << 0)

	)

153 
	#ACMP_ROUTE_LOCATION_SHIFT
 (8)

	)

154 
	#ACMP_ROUTE_LOCATION_MASK
 (0x7 << 
ACMP_ROUTE_LOCATION_SHIFT
)

	)

155 
	#ACMP_ROUTE_LOCATION
(
v
) \

156 (((
v
Ë<< 
ACMP_ROUTE_LOCATION_SHIFT
Ë& 
ACMP_ROUTE_LOCATION_MASK
)

	)

157 
	#ACMP_ROUTE_LOCATION_LOCx
(
x
Ë
	`ACMP_ROUTE_LOCATION
(x)

	)

158 
	#ACMP_ROUTE_LOCATION_LOC0
 
	`ACMP_ROUTE_LOCATIONx
(0)

	)

159 
	#ACMP_ROUTE_LOCATION_LOC1
 
	`ACMP_ROUTE_LOCATIONx
(1)

	)

160 
	#ACMP_ROUTE_LOCATION_LOC2
 
	`ACMP_ROUTE_LOCATIONx
(2)

	)

162 
	#ACMP_ROUTE_ACMPPEN
 (1 << 0)

	)

164 
	#ACMP0
 
ACMP0_BASE


	)

165 
	#ACMP0_CTRL
 
	`ACMP_CTRL
(
ACMP0
)

	)

166 
	#ACMP0_INPUTSEL
 
	`ACMP_INPUTSEL
(
ACMP0
)

	)

167 
	#ACMP0_STATUS
 
	`ACMP_STATUS
(
ACMP0
)

	)

168 
	#ACMP0_IEN
 
	`ACMP_IEN
(
ACMP0
)

	)

169 
	#ACMP0_IF
 
	`ACMP_IF
(
ACMP0
)

	)

170 
	#ACMP0_IFS
 
	`ACMP_IFS
(
ACMP0
)

	)

171 
	#ACMP0_IFC
 
	`ACMP_IFC
(
ACMP0
)

	)

172 
	#ACMP0_ROUTE
 
	`ACMP_ROUTE
(
ACMP0
)

	)

174 
	#ACMP1
 
ACMP1_BASE


	)

175 
	#ACMP1_CTRL
 
	`ACMP_CTRL
(
ACMP1
)

	)

176 
	#ACMP1_INPUTSEL
 
	`ACMP_INPUTSEL
(
ACMP1
)

	)

177 
	#ACMP1_STATUS
 
	`ACMP_STATUS
(
ACMP1
)

	)

178 
	#ACMP1_IEN
 
	`ACMP_IEN
(
ACMP1
)

	)

179 
	#ACMP1_IF
 
	`ACMP_IF
(
ACMP1
)

	)

180 
	#ACMP1_IFS
 
	`ACMP_IFS
(
ACMP1
)

	)

181 
	#ACMP1_IFC
 
	`ACMP_IFC
(
ACMP1
)

	)

182 
	#ACMP1_ROUTE
 
	`ACMP_ROUTE
(
ACMP1
)

	)

	@libopencm3/include/libopencm3/efm32/common/adc_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_ADC_H


21 
	#LIBOPENCM3_EFM32_ADC_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#ADC_CTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x000)

	)

27 
	#ADC_CMD
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x004)

	)

28 
	#ADC_STATUS
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x008)

	)

29 
	#ADC_SINGLECTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x00C)

	)

30 
	#ADC_SCANCTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x010)

	)

31 
	#ADC_IEN
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x014)

	)

32 
	#ADC_IF
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x018)

	)

33 
	#ADC_IFS
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x01C)

	)

34 
	#ADC_IFC
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x020)

	)

35 
	#ADC_SINGLEDATA
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x024)

	)

36 
	#ADC_SCANDATA
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x028)

	)

37 
	#ADC_SINGLEDATAP
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x02C)

	)

38 
	#ADC_SCANDATAP
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x030)

	)

39 
	#ADC_CAL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x034)

	)

40 
	#ADC_BIASPROG
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x03C)

	)

43 
	#ADC_CTRL_OVERSEL_SHIFT
 (24)

	)

44 
	#ADC_CTRL_OVERSEL_MASK
 (0xF << 
ADC_CTRL_OVERSEL_SHIFT
)

	)

45 
	#ADC_CTRL_OVERSEL
(
v
) \

46 (((
v
Ë<< 
ADC_CTRL_OVERSEL_SHIFT
Ë& 
ADC_CTRL_OVERSEL_MASK
)

	)

47 
	#ADC_CTRL_OVERSEL_X2
 0

	)

48 
	#ADC_CTRL_OVERSEL_X4
 1

	)

49 
	#ADC_CTRL_OVERSEL_X8
 2

	)

50 
	#ADC_CTRL_OVERSEL_X16
 3

	)

51 
	#ADC_CTRL_OVERSEL_X32
 4

	)

52 
	#ADC_CTRL_OVERSEL_X64
 5

	)

53 
	#ADC_CTRL_OVERSEL_X128
 6

	)

54 
	#ADC_CTRL_OVERSEL_X256
 7

	)

55 
	#ADC_CTRL_OVERSEL_X512
 8

	)

56 
	#ADC_CTRL_OVERSEL_X1024
 9

	)

57 
	#ADC_CTRL_OVERSEL_X2048
 10

	)

58 
	#ADC_CTRL_OVERSEL_X4096
 11

	)

60 
	#ADC_CTRL_TIMEBASE_SHIFT
 (16)

	)

61 
	#ADC_CTRL_TIMEBASE_MASK
 (0x3F << 
ADC_CTRL_TIMEBASE_SHIFT
)

	)

62 
	#ADC_CTRL_TIMEBASE
(
v
) \

63 (((
v
Ë<< 
ADC_CTRL_TIMEBASE_SHIFT
Ë& 
ADC_CTRL_TIMEBASE_MASK
)

	)

65 
	#ADC_CTRL_PRESC_SHIFT
 (8)

	)

66 
	#ADC_CTRL_PRESC_MASK
 (0x3F << 
ADC_CTRL_PRESC_SHIFT
)

	)

67 
	#ADC_CTRL_PRESC
(
v
) \

68 (((
v
Ë<< 
ADC_CTRL_PRESC_SHIFT
Ë& 
ADC_CTRL_PRESC_MASK
)

	)

70 
	#ADC_CTRL_LPFMODE_SHIFT
 (4)

	)

71 
	#ADC_CTRL_LPFMODE_MASK
 (0x3 << 
ADC_CTRL_LPFMODE_SHIFT
)

	)

72 
	#ADC_CTRL_LPFMODE
(
v
) \

73 (((
v
Ë<< 
ADC_CTRL_LPFMODE_SHIFT
Ë& 
ADC_CTRL_LPFMODE_MASK
)

	)

74 
	#ADC_CTRL_LPFMODE_BYPASS
 0

	)

75 
	#ADC_CTRL_LPFMODE_DECAP
 1

	)

76 
	#ADC_CTRL_LPFMODE_RCFILT
 2

	)

78 
	#ADC_CTRL_TAILGATE
 (1 << 3)

	)

80 
	#ADC_CTRL_WARMUPMODE_SHIFT
 (0)

	)

81 
	#ADC_CTRL_WARMUPMODE_MASK
 (0x3 << 
ADC_CTRL_WARMUPMODE_SHIFT
)

	)

82 
	#ADC_CTRL_WARMUPMODE
(
v
) \

83 (((
v
Ë<< 
ADC_CTRL_WARMUPMODE_SHIFT
Ë& 
ADC_CTRL_WARMUPMODE_MASK
)

	)

84 
	#ADC_CTRL_WARMUPMODE_NORMAL
 0

	)

85 
	#ADC_CTRL_WARMUPMODE_FASTBG
 1

	)

86 
	#ADC_CTRL_WARMUPMODE_KEEPSCANREFWARM
 2

	)

87 
	#ADC_CTRL_WARMUPMODE_KEEPADCWARM
 3

	)

90 
	#ADC_CMD_SCANSTOP
 (1 << 3)

	)

91 
	#ADC_CMD_SCANSTART
 (1 << 2)

	)

92 
	#ADC_CMD_SINGLESTOP
 (1 << 1)

	)

93 
	#ADC_CMD_SINGLESTART
 (1 << 0)

	)

96 
	#ADC_STATUS_SCANDATASRC_SHIFT
 (0)

	)

97 
	#ADC_STATUS_SCANDATASRC_MASK
 (0x7 << 
ADC_STATUS_SCANDATASRC_SHIFT
)

	)

98 
	#ADC_STATUS_SCANDATASRC
(
v
) \

99 (((
v
Ë<< 
ADC_STATUS_SCANDATASRC_SHIFT
Ë& 
ADC_STATUS_SCANDATASRC_MASK
)

	)

101 
	#ADC_STATUS_SCANDV
 (1 << 17)

	)

102 
	#ADC_STATUS_SINGLEDV
 (1 << 16)

	)

103 
	#ADC_STATUS_WARM
 (1 << 12)

	)

104 
	#ADC_STATUS_SCANREFWARM
 (1 << 9)

	)

105 
	#ADC_STATUS_SINGLEREFWARM
 (1 << 8)

	)

106 
	#ADC_STATUS_SCANACT
 (1 << 1)

	)

107 
	#ADC_STATUS_SINGLEACT
 (1 << 0)

	)

110 
	#ADC_SINGLECTRL_PRSSEL_SHIFT
 (28)

	)

111 
	#ADC_SINGLECTRL_PRSSEL_MASK
 (0xF << 
ADC_SINGLECTRL_PRSSEL_SHIFT
)

	)

112 
	#ADC_SINGLECTRL_PRSSEL
(
v
) \

113 (((
v
Ë<< 
ADC_SINGLECTRL_PRSSEL_SHIFT
Ë& 
ADC_SINGLECTRL_PRSSEL_MASK
)

	)

114 
	#ADC_SINGLECTRL_PRSSEL_PRSCHx
(
x
Ë
	`ADC_SINGLECTRL_PRSSEL
(x)

	)

115 
	#ADC_SINGLECTRL_PRSSEL_PRSCH0
 0

	)

116 
	#ADC_SINGLECTRL_PRSSEL_PRSCH1
 1

	)

117 
	#ADC_SINGLECTRL_PRSSEL_PRSCH2
 2

	)

118 
	#ADC_SINGLECTRL_PRSSEL_PRSCH3
 3

	)

119 
	#ADC_SINGLECTRL_PRSSEL_PRSCH4
 4

	)

120 
	#ADC_SINGLECTRL_PRSSEL_PRSCH5
 5

	)

121 
	#ADC_SINGLECTRL_PRSSEL_PRSCH6
 6

	)

122 
	#ADC_SINGLECTRL_PRSSEL_PRSCH7
 7

	)

123 
	#ADC_SINGLECTRL_PRSSEL_PRSCH8
 8

	)

124 
	#ADC_SINGLECTRL_PRSSEL_PRSCH9
 9

	)

125 
	#ADC_SINGLECTRL_PRSSEL_PRSCH10
 10

	)

126 
	#ADC_SINGLECTRL_PRSSEL_PRSCH11
 11

	)

128 
	#ADC_SINGLECTRL_PRSEN
 (1 << 24)

	)

130 
	#ADC_SINGLECTRL_AT_SHIFT
 (20)

	)

131 
	#ADC_SINGLECTRL_AT_MASK
 (0xF << 
ADC_SINGLECTRL_AT_SHIFT
)

	)

132 
	#ADC_SINGLECTRL_AT
(
v
) \

133 (((
v
Ë<< 
ADC_SINGLECTRL_AT_SHIFT
Ë& 
ADC_SINGLECTRL_AT_MASK
)

	)

134 
	#ADC_SINGLECTRL_AT_1CYCLE
 0x0

	)

135 
	#ADC_SINGLECTRL_AT_2CYCLES
 0x1

	)

136 
	#ADC_SINGLECTRL_AT_4CYCLES
 0x2

	)

137 
	#ADC_SINGLECTRL_AT_8CYCLES
 0x3

	)

138 
	#ADC_SINGLECTRL_AT_16CYCLES
 0x4

	)

139 
	#ADC_SINGLECTRL_AT_32CYCLES
 0x5

	)

140 
	#ADC_SINGLECTRL_AT_64CYCLES
 0x6

	)

141 
	#ADC_SINGLECTRL_AT_128CYCLES
 0x7

	)

142 
	#ADC_SINGLECTRL_AT_256CYCLES
 0x8

	)

144 
	#ADC_SINGLECTRL_REF_SHIFT
 (16)

	)

145 
	#ADC_SINGLECTRL_REF_MASK
 (0xF << 
ADC_SINGLECTRL_REF_SHIFT
)

	)

146 
	#ADC_SINGLECTRL_REF
(
v
) \

147 (((
v
Ë<< 
ADC_SINGLECTRL_REF_SHIFT
Ë& 
ADC_SINGLECTRL_REF_MASK
)

	)

148 
	#ADC_SINGLECTRL_REF_1V25
 0

	)

149 
	#ADC_SINGLECTRL_REF_2V5
 1

	)

150 
	#ADC_SINGLECTRL_REF_VDD
 2

	)

151 
	#ADC_SINGLECTRL_REF_5VDIFF
 3

	)

152 
	#ADC_SINGLECTRL_REF_EXTSINGLE
 4

	)

153 
	#ADC_SINGLECTRL_REF_2XEXTDIFF
 5

	)

154 
	#ADC_SINGLECTRL_REF_2XVDD
 6

	)

156 
	#ADC_SINGLECTRL_INPUTSEL_SHIFT
 (8)

	)

157 
	#ADC_SINGLECTRL_INPUTSEL_MASK
 (0xF << 
ADC_SINGLECTRL_INPUTSEL_SHIFT
)

	)

158 
	#ADC_SINGLECTRL_INPUTSEL
(
v
) \

159 (((
v
Ë<< 
ADC_SINGLECTRL_INPUTSEL_SHIFT
Ë& 
ADC_SINGLECTRL_INPUTSEL_MASK
)

	)

161 
	#ADC_SINGLECTRL_INPUTSEL_CHx
(
x
Ë
	`ADC_SINGLECTRL_INPUTSEL
(x)

	)

162 
	#ADC_SINGLECTRL_INPUTSEL_CH0
 0

	)

163 
	#ADC_SINGLECTRL_INPUTSEL_CH1
 1

	)

164 
	#ADC_SINGLECTRL_INPUTSEL_CH2
 2

	)

165 
	#ADC_SINGLECTRL_INPUTSEL_CH3
 3

	)

166 
	#ADC_SINGLECTRL_INPUTSEL_CH4
 4

	)

167 
	#ADC_SINGLECTRL_INPUTSEL_CH5
 5

	)

168 
	#ADC_SINGLECTRL_INPUTSEL_CH6
 6

	)

169 
	#ADC_SINGLECTRL_INPUTSEL_CH7
 7

	)

170 
	#ADC_SINGLECTRL_INPUTSEL_TEMP
 8

	)

171 
	#ADC_SINGLECTRL_INPUTSEL_VDDDIV3
 9

	)

172 
	#ADC_SINGLECTRL_INPUTSEL_VDD
 10

	)

173 
	#ADC_SINGLECTRL_INPUTSEL_VSS
 11

	)

174 
	#ADC_SINGLECTRL_INPUTSEL_VREFDIV2
 12

	)

175 
	#ADC_SINGLECTRL_INPUTSEL_DAC0OUT0
 13

	)

176 
	#ADC_SINGLECTRL_INPUTSEL_DAC0OUT1
 14

	)

178 
	#ADC_SINGLECTRL_INPUTSEL_CH0CH1
 0

	)

179 
	#ADC_SINGLECTRL_INPUTSEL_CH2CH3
 1

	)

180 
	#ADC_SINGLECTRL_INPUTSEL_CH4CH5
 2

	)

181 
	#ADC_SINGLECTRL_INPUTSEL_CH6CH7
 3

	)

182 
	#ADC_SINGLECTRL_INPUTSEL_DIFF0
 4

	)

184 
	#ADC_SINGLECTRL_RES_SHIFT
 (4)

	)

185 
	#ADC_SINGLECTRL_RES_MASK
 (0x3 << 
ADC_SINGLECTRL_RES_SHIFT
)

	)

186 
	#ADC_SINGLECTRL_RES
(
v
) \

187 (((
v
Ë<< 
ADC_SINGLECTRL_RES_SHIFT
Ë& 
ADC_SINGLECTRL_RES_MASK
)

	)

188 
	#ADC_SINGLECTRL_RES_12BIT
 0

	)

189 
	#ADC_SINGLECTRL_RES_8BIT
 1

	)

190 
	#ADC_SINGLECTRL_RES_6BIT
 2

	)

191 
	#ADC_SINGLECTRL_RES_OVS
 3

	)

193 
	#ADC_SINGLECTRL_ADJ
 (1 << 2)

	)

194 
	#ADC_SINGLECTRL_DIFF
 (1 << 1)

	)

195 
	#ADC_SINGLECTRL_REP
 (1 << 0)

	)

198 
	#ADC_SCANCTRL_PRSSEL_SHIFT
 (28)

	)

199 
	#ADC_SCANCTRL_PRSSEL_MASK
 (0xF << 
ADC_SCANCTRL_PRSSEL_SHIFT
)

	)

200 
	#ADC_SCANCTRL_PRSSEL
(
v
) \

201 (((
v
Ë<< 
ADC_SCANCTRL_PRSSEL_SHIFT
Ë& 
ADC_SCANCTRL_PRSSEL_MASK
)

	)

202 
	#ADC_SCANCTRL_PRSSEL_PRSCHx
(
x
Ë
	`ADC_SCANCTRL_PRSSEL
(x)

	)

203 
	#ADC_SCANCTRL_PRSSEL_PRSCH0
 0

	)

204 
	#ADC_SCANCTRL_PRSSEL_PRSCH1
 1

	)

205 
	#ADC_SCANCTRL_PRSSEL_PRSCH2
 2

	)

206 
	#ADC_SCANCTRL_PRSSEL_PRSCH3
 3

	)

207 
	#ADC_SCANCTRL_PRSSEL_PRSCH4
 4

	)

208 
	#ADC_SCANCTRL_PRSSEL_PRSCH5
 5

	)

209 
	#ADC_SCANCTRL_PRSSEL_PRSCH6
 6

	)

210 
	#ADC_SCANCTRL_PRSSEL_PRSCH7
 7

	)

211 
	#ADC_SCANCTRL_PRSSEL_PRSCH8
 8

	)

212 
	#ADC_SCANCTRL_PRSSEL_PRSCH9
 9

	)

213 
	#ADC_SCANCTRL_PRSSEL_PRSCH10
 10

	)

214 
	#ADC_SCANCTRL_PRSSEL_PRSCH11
 11

	)

216 
	#ADC_SCANCTRL_PRSEN
 (1 << 24)

	)

218 
	#ADC_SCANCTRL_AT_SHIFT
 (20)

	)

219 
	#ADC_SCANCTRL_AT_MASK
 (0xF << 
ADC_SCANCTRL_AT_SHIFT
)

	)

220 
	#ADC_SCANCTRL_AT
(
v
) \

221 (((
v
Ë<< 
ADC_SCANCTRL_AT_SHIFT
Ë& 
ADC_SCANCTRL_AT_MASK
)

	)

222 
	#ADC_SCANCTRL_AT_1CYCLE
 0

	)

223 
	#ADC_SCANCTRL_AT_2CYCLES
 1

	)

224 
	#ADC_SCANCTRL_AT_4CYCLES
 2

	)

225 
	#ADC_SCANCTRL_AT_8CYCLES
 3

	)

226 
	#ADC_SCANCTRL_AT_16CYCLES
 4

	)

227 
	#ADC_SCANCTRL_AT_32CYCLES
 5

	)

228 
	#ADC_SCANCTRL_AT_64CYCLES
 6

	)

229 
	#ADC_SCANCTRL_AT_128CYCLES
 7

	)

230 
	#ADC_SCANCTRL_AT_256CYCLES
 8

	)

232 
	#ADC_SCANCTRL_REF_SHIFT
 (16)

	)

233 
	#ADC_SCANCTRL_REF_MASK
 (0xF << 
ADC_SCANCTRL_REF_SHIFT
)

	)

234 
	#ADC_SCANCTRL_REF
(
v
) \

235 (((
v
Ë<< 
ADC_SCANCTRL_REF_SHIFT
Ë& 
ADC_SCANCTRL_REF_MASK
)

	)

236 
	#ADC_SCANCTRL_REF_1V25
 0

	)

237 
	#ADC_SCANCTRL_REF_2V5
 1

	)

238 
	#ADC_SCANCTRL_REF_VDD
 2

	)

239 
	#ADC_SCANCTRL_REF_5VDIFF
 3

	)

240 
	#ADC_SCANCTRL_REF_EXTSCAN
 4

	)

241 
	#ADC_SCANCTRL_REF_2XEXTDIFF
 5

	)

242 
	#ADC_SCANCTRL_REF_2XVDD
 6

	)

245 
	#ADC_SCANCTRL_INPUTSEL_SHIFT
 (8)

	)

246 
	#ADC_SCANCTRL_INPUTSEL_MASK
 (0xFF << 
ADC_SCANCTRL_INPUTSEL_SHIFT
)

	)

247 
	#ADC_SCANCTRL_INPUTSEL
(
v
) \

248 (((
v
Ë<< 
ADC_SCANCTRL_INPUTSEL_SHIFT
Ë& 
ADC_SCANCTRL_INPUTSEL_MASK
)

	)

250 
	#ADC_SCANCTRL_INPUTSEL_CHx
(
x
Ë
	`ADC_SCANCTRL_INPUTSEL
(1 << (x))

	)

251 
	#ADC_SCANCTRL_INPUTSEL_CH0
 
	`ADC_SCANCTRL_INPUTSEL_CHx
(0)

	)

252 
	#ADC_SCANCTRL_INPUTSEL_CH1
 
	`ADC_SCANCTRL_INPUTSEL_CHx
(1)

	)

253 
	#ADC_SCANCTRL_INPUTSEL_CH2
 
	`ADC_SCANCTRL_INPUTSEL_CHx
(2)

	)

254 
	#ADC_SCANCTRL_INPUTSEL_CH3
 
	`ADC_SCANCTRL_INPUTSEL_CHx
(3)

	)

255 
	#ADC_SCANCTRL_INPUTSEL_CH4
 
	`ADC_SCANCTRL_INPUTSEL_CHx
(4)

	)

256 
	#ADC_SCANCTRL_INPUTSEL_CH5
 
	`ADC_SCANCTRL_INPUTSEL_CHx
(5)

	)

257 
	#ADC_SCANCTRL_INPUTSEL_CH6
 
	`ADC_SCANCTRL_INPUTSEL_CHx
(6)

	)

258 
	#ADC_SCANCTRL_INPUTSEL_CH7
 
	`ADC_SCANCTRL_INPUTSEL_CHx
(7)

	)

260 
	#ADC_SCANCTRL_INPUTSEL_CH0CH1
 
	`ADC_SCANCTRL_INPUTSEL
(1 << 0)

	)

261 
	#ADC_SCANCTRL_INPUTSEL_CH2CH3
 
	`ADC_SCANCTRL_INPUTSEL
(1 << 1)

	)

262 
	#ADC_SCANCTRL_INPUTSEL_CH4CH5
 
	`ADC_SCANCTRL_INPUTSEL
(1 << 2)

	)

263 
	#ADC_SCANCTRL_INPUTSEL_CH6CH7
 
	`ADC_SCANCTRL_INPUTSEL
(1 << 3)

	)

265 
	#ADC_SCANCTRL_RES_SHIFT
 (4)

	)

266 
	#ADC_SCANCTRL_RES_MASK
 (0x3 << 
ADC_SCANCTRL_RES_SHIFT
)

	)

267 
	#ADC_SCANCTRL_RES
(
v
) \

268 (((
v
Ë<< 
ADC_SCANCTRL_RES_SHIFT
Ë& 
ADC_SCANCTRL_RES_MASK
)

	)

269 
	#ADC_SCANCTRL_RES_12BIT
 0

	)

270 
	#ADC_SCANCTRL_RES_8BIT
 1

	)

271 
	#ADC_SCANCTRL_RES_6BIT
 2

	)

272 
	#ADC_SCANCTRL_RES_OVS
 3

	)

274 
	#ADC_SCANCTRL_ADJ
 (1 << 2)

	)

275 
	#ADC_SCANCTRL_DIFF
 (1 << 1)

	)

276 
	#ADC_SCANCTRL_REP
 (1 << 0)

	)

279 
	#ADC_IEN_SCANOF
 (1 << 9)

	)

280 
	#ADC_IEN_SINGLEOF
 (1 << 8)

	)

281 
	#ADC_IEN_SCAN
 (1 << 1)

	)

282 
	#ADC_IEN_SINGLE
 (1 << 0)

	)

285 
	#ADC_IF_SCANOF
 (1 << 9)

	)

286 
	#ADC_IF_SINGLEOF
 (1 << 8)

	)

287 
	#ADC_IF_SCAN
 (1 << 1)

	)

288 
	#ADC_IF_SINGLE
 (1 << 0)

	)

291 
	#ADC_IFS_SCANOF
 (1 << 9)

	)

292 
	#ADC_IFS_SINGLEOF
 (1 << 8)

	)

293 
	#ADC_IFS_SCAN
 (1 << 1)

	)

294 
	#ADC_IFS_SINGLE
 (1 << 0)

	)

297 
	#ADC_IFC_SCANOF
 (1 << 9)

	)

298 
	#ADC_IFC_SINGLEOF
 (1 << 8)

	)

299 
	#ADC_IFC_SCAN
 (1 << 1)

	)

300 
	#ADC_IFC_SINGLE
 (1 << 0)

	)

303 
	#ADC_CAL_SCANGAIN_SHIFT
 (24)

	)

304 
	#ADC_CAL_SCANGAIN_MASK
 (0x7F)

	)

306 
	#ADC_CAL_SCANOFF_SHIFT
 (16)

	)

307 
	#ADC_CAL_SCANOFF_MASK
 (0x7F)

	)

309 
	#ADC_CAL_SINGLEGAIN_SHIFT
 (8)

	)

310 
	#ADC_CAL_SINGLEGAIN_MASK
 (0x7F)

	)

312 
	#ADC_CAL_SINGLEOFF_SHIFT
 (0)

	)

313 
	#ADC_CAL_SINGLEOFF_MASK
 (0x7F)

	)

316 
	#ADC_BIASPROG_COMPBIAS_SHIFT
 (8)

	)

317 
	#ADC_BIASPROG_COMPBIAS_MASK
 (0xF)

	)

319 
	#ADC_BIASPROG_HALFBIAS
 (1 << 6)

	)

321 
	#ADC_BIASPROG_BIASPROG_SHIFT
 (0)

	)

322 
	#ADC_BIASPROG_BIASPROG_MASK
 (0xF)

	)

325 
	#ADC0
 
ADC0_BASE


	)

326 
	#ADC0_CTRL
 
	`ADC_CTRL
(
ADC0
)

	)

327 
	#ADC0_CMD
 
	`ADC_CMD
(
ADC0
)

	)

328 
	#ADC0_STATUS
 
	`ADC_STATUS
(
ADC0
)

	)

329 
	#ADC0_SINGLECTRL
 
	`ADC_SINGLECTRL
(
ADC0
)

	)

330 
	#ADC0_SCANCTRL
 
	`ADC_SCANCTRL
(
ADC0
)

	)

331 
	#ADC0_IEN
 
	`ADC_IEN
(
ADC0
)

	)

332 
	#ADC0_IF
 
	`ADC_IF
(
ADC0
)

	)

333 
	#ADC0_IFS
 
	`ADC_IFS
(
ADC0
)

	)

334 
	#ADC0_IFC
 
	`ADC_IFC
(
ADC0
)

	)

335 
	#ADC0_SINGLEDATA
 
	`ADC_SINGLEDATA
(
ADC0
)

	)

336 
	#ADC0_SCANDATA
 
	`ADC_SCANDATA
(
ADC0
)

	)

337 
	#ADC0_SINGLEDATAP
 
	`ADC_SINGLEDATAP
(
ADC0
)

	)

338 
	#ADC0_SCANDATAP
 
	`ADC_SCANDATAP
(
ADC0
)

	)

339 
	#ADC0_CAL
 
	`ADC_CAL
(
ADC0
)

	)

340 
	#ADC0_BIASPROG
 
	`ADC_BIASPROG
(
ADC0
)

	)

346 
	#ADC_CH0
 0

	)

347 
	#ADC_CH1
 1

	)

348 
	#ADC_CH2
 2

	)

349 
	#ADC_CH3
 3

	)

350 
	#ADC_CH4
 4

	)

351 
	#ADC_CH5
 5

	)

352 
	#ADC_CH6
 6

	)

353 
	#ADC_CH7
 7

	)

354 
	#ADC_CH_TEMP
 8

	)

355 
	#ADC_CH_VDDDIV3
 9

	)

356 
	#ADC_CH_VDD
 10

	)

357 
	#ADC_CH_VSS
 11

	)

358 
	#ADC_CH_VREFDIV2
 12

	)

359 
	#ADC_CH_DAC0OUT0
 13

	)

360 
	#ADC_CH_DAC0OUT1
 14

	)

362 
	#ADC_CH_CH0CH1
 0

	)

363 
	#ADC_CH_CH2CH3
 1

	)

364 
	#ADC_CH_CH4CH5
 2

	)

365 
	#ADC_CH_CH6CH7
 3

	)

366 
	#ADC_CH_DIFF0
 4

	)

369 
BEGIN_DECLS


371 
adc_£t_ovîßm∂ög
(
uöt32_t
 
adc
, uöt32_à
ovîßmp
);

372 
adc_£t_w¨m_up
(
uöt32_t
 
adc
, 
uöt8_t
 
˛ocks
);

373 
adc_£t_˛ock_¥esˇÀr
(
uöt32_t
 
adc
, 
uöt8_t
 
Á˘‹
);

374 
adc_£t_low∑ss_fûãr
(
uöt32_t
 
adc
, uöt32_à
Õfmode
);

376 
adc_íabÀ_èûg©ög
(
uöt32_t
 
adc
);

377 
adc_dißbÀ_èûg©ög
(
uöt32_t
 
adc
);

379 
adc_£t_w¨m_up_mode
(
uöt32_t
 
adc
, uöt32_à
w¨mupmode
);

381 
adc_sögÀ_°¨t
(
uöt32_t
 
adc
);

382 
adc_sögÀ_°›
(
uöt32_t
 
adc
);

384 
adc_sˇn_°¨t
(
uöt32_t
 
adc
);

385 
adc_sˇn_°›
(
uöt32_t
 
adc
);

389 
adc_£t_sögÀ_¥s_åiggî
(
uöt32_t
 
adc
, 
uöt8_t
 
¥s£l
);

390 
adc_íabÀ_sögÀ_¥s_åiggî
(
uöt32_t
 
adc
);

391 
adc_dißbÀ_sögÀ_¥s_åiggî
(
uöt32_t
 
adc
);

392 
adc_£t_sögÀ_acquisôi⁄_cy˛e
(
uöt32_t
 
adc
, uöt32_à
©
);

393 
adc_£t_sögÀ_ª„ªn˚
(
uöt32_t
 
adc
, uöt32_à
ªf
);

394 
adc_£t_sögÀ_ch™√l
(
uöt32_t
 
adc
, 
uöt8_t
 
ch
);

395 
adc_£t_sögÀ_ªsﬁuti⁄
(
uöt32_t
 
adc
, uöt32_à
ªs
);

396 
adc_£t_sögÀ_À·_Æig√d
(
uöt32_t
 
adc
);

397 
adc_£t_sögÀ_right_Æig√d
(
uöt32_t
 
adc
);

398 
adc_£t_sögÀ_sögÀ_íded
(
uöt32_t
 
adc
);

399 
adc_£t_sögÀ_dif„ª¡ül
(
uöt32_t
 
adc
);

400 
adc_íabÀ_sögÀ_ª≥©_c⁄v
(
uöt32_t
 
adc
);

401 
adc_dißbÀ_sögÀ_ª≥©_c⁄v
(
uöt32_t
 
adc
);

403 
adc_£t_sˇn_¥s_åiggî
(
uöt32_t
 
adc
, 
uöt8_t
 
¥s£l
);

404 
adc_íabÀ_sˇn_¥s_åiggî
(
uöt32_t
 
adc
);

405 
adc_dißbÀ_sˇn_¥s_åiggî
(
uöt32_t
 
adc
);

406 
adc_£t_sˇn_acquisôi⁄_cy˛e
(
uöt32_t
 
adc
, uöt32_à
©
);

407 
adc_£t_sˇn_ª„ªn˚
(
uöt32_t
 
adc
, uöt32_à
ªf
);

408 
adc_£t_sˇn_ch™√l
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
,

409 
uöt8_t
 
ch™√l
[]);

410 
adc_£t_sˇn_ªsﬁuti⁄
(
uöt32_t
 
adc
, uöt32_à
ªs
);

411 
adc_£t_sˇn_À·_Æig√d
(
uöt32_t
 
adc
);

412 
adc_£t_sˇn_right_Æig√d
(
uöt32_t
 
adc
);

413 
adc_£t_sˇn_sögÀ_íded
(
uöt32_t
 
adc
);

414 
adc_£t_sˇn_dif„ª¡ül
(
uöt32_t
 
adc
);

415 
adc_íabÀ_sˇn_ª≥©_c⁄v
(
uöt32_t
 
adc
);

416 
adc_dißbÀ_sˇn_ª≥©_c⁄v
(
uöt32_t
 
adc
);

418 
adc_íabÀ_sögÀ_ªsu…_ovîÊow_öãºu±
(
uöt32_t
 
adc
);

419 
adc_dißbÀ_sögÀ_ªsu…_ovîÊow_öãºu±
(
uöt32_t
 
adc
);

420 
adc_íabÀ_sögÀ_c⁄vîsi⁄_com∂ëe_öãºu±
(
uöt32_t
 
adc
);

421 
adc_dißbÀ_sögÀ_c⁄vîsi⁄_com∂ëe_öãºu±
(
uöt32_t
 
adc
);

422 
adc_íabÀ_sˇn_ªsu…_ovîÊow_öãºu±
(
uöt32_t
 
adc
);

423 
adc_dißbÀ_sˇn_ªsu…_ovîÊow_öãºu±
(
uöt32_t
 
adc
);

424 
adc_íabÀ_sˇn_c⁄vîsi⁄_com∂ëe_öãºu±
(
uöt32_t
 
adc
);

425 
adc_dißbÀ_sˇn_c⁄vîsi⁄_com∂ëe_öãºu±
(
uöt32_t
 
adc
);

427 
boﬁ
 
adc_gë_sögÀ_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
);

428 
boﬁ
 
adc_gë_sögÀ_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
);

429 
boﬁ
 
adc_gë_sˇn_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
);

430 
boﬁ
 
adc_gë_sˇn_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
);

432 
adc_£t_sögÀ_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
);

433 
adc_£t_sögÀ_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
);

434 
adc_£t_sˇn_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
);

435 
adc_£t_sˇn_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
);

437 
adc_˛ór_sögÀ_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
);

438 
adc_˛ór_sögÀ_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
);

439 
adc_˛ór_sˇn_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
);

440 
adc_˛ór_sˇn_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
);

442 
uöt32_t
 
adc_sögÀ_d©a
(uöt32_à
adc
);

443 
uöt32_t
 
adc_sˇn_d©a
(uöt32_à
adc
);

445 
uöt32_t
 
adc_sögÀ_d©a_≥ak
(uöt32_à
adc
);

446 
uöt32_t
 
adc_sˇn_d©a_≥ak
(uöt32_à
adc
);

448 
adc_£t_ˇlibøti⁄_sˇn_gaö
(
uöt32_t
 
adc
, 
uöt8_t
 
sˇn_gaö
);

449 
adc_£t_ˇlibøti⁄_sˇn_off£t
(
uöt32_t
 
adc
, 
uöt8_t
 
sˇn_off£t
);

451 
adc_£t_ˇlibøti⁄_sögÀ_gaö
(
uöt32_t
 
adc
, 
uöt8_t
 
sögÀ_gaö
);

452 
adc_£t_ˇlibøti⁄_sögÀ_off£t
(
uöt32_t
 
adc
, 
uöt8_t
 
sögÀ_off£t
);

454 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/common/burtc_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_BURTC_H


21 
	#LIBOPENCM3_EFM32_BURTC_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#BURTC_CTRL
 
	`MMIO32
(
BURTC_BASE
 + 0x000)

	)

27 
	#BURTC_LPMODE
 
	`MMIO32
(
BURTC_BASE
 + 0x004)

	)

28 
	#BURTC_CNT
 
	`MMIO32
(
BURTC_BASE
 + 0x008)

	)

29 
	#BURTC_COMP0
 
	`MMIO32
(
BURTC_BASE
 + 0x00C)

	)

30 
	#BURTC_TIMESTAMP
 
	`MMIO32
(
BURTC_BASE
 + 0x010)

	)

31 
	#BURTC_LFXOFDET
 
	`MMIO32
(
BURTC_BASE
 + 0x014)

	)

32 
	#BURTC_STATUS
 
	`MMIO32
(
BURTC_BASE
 + 0x018)

	)

33 
	#BURTC_CMD
 
	`MMIO32
(
BURTC_BASE
 + 0x01C)

	)

34 
	#BURTC_POWERDOWN
 
	`MMIO32
(
BURTC_BASE
 + 0x020)

	)

35 
	#BURTC_LOCK
 
	`MMIO32
(
BURTC_BASE
 + 0x024)

	)

36 
	#BURTC_IF
 
	`MMIO32
(
BURTC_BASE
 + 0x028)

	)

37 
	#BURTC_IFS
 
	`MMIO32
(
BURTC_BASE
 + 0x02C)

	)

38 
	#BURTC_IFC
 
	`MMIO32
(
BURTC_BASE
 + 0x030)

	)

39 
	#BURTC_IEN
 
	`MMIO32
(
BURTC_BASE
 + 0x034)

	)

40 
	#BURTC_FREEZE
 
	`MMIO32
(
BURTC_BASE
 + 0x038)

	)

41 
	#BURTC_SYNCBUSY
 
	`MMIO32
(
BURTC_BASE
 + 0x03C)

	)

43 
	#RETx_REG
(
x
Ë
	`MMIO32
(
BURTC_BASE
 + 0x100 + (4 * (x)))

	)

45 
	#BURTC_RETx
(
x
Ë
	`RETx_REG
(x)

	)

48 
	#BURTC_CTRL_BUMODETSEN
 (1 << 14)

	)

50 
	#BURTC_CTRL_CLKSEL_SHIFT
 (8)

	)

51 
	#BURTC_CTRL_CLKSEL_MASK
 (0x3 << 
BURTC_CTRL_CLKSEL_SHIFT
)

	)

52 
	#BURTC_CTRL_CLKSEL
(
v
) \

53 (((
v
Ë<< 
BURTC_CTRL_CLKSEL_SHIFT
Ë& 
BURTC_CTRL_CLKSEL_MASK
)

	)

54 
	#BURTC_CTRL_CLKSEL_NONE
 0

	)

55 
	#BURTC_CTRL_CLKSEL_LFRCO
 1

	)

56 
	#BURTC_CTRL_CLKSEL_LFXO
 2

	)

57 
	#BURTC_CTRL_CLKSEL_ULFRCO
 3

	)

59 
	#BURTC_CTRL_PRESC_SHIFT
 (12)

	)

60 
	#BURTC_CTRL_PRESC_MASK
 (0x7 << 
BURTC_CTRL_PRESC_SHIFT
)

	)

61 
	#BURTC_CTRL_PRESC
(
v
) \

62 (((
v
Ë<< 
BURTC_CTRL_PRESC_SHIFT
Ë& 
BURTC_CTRL_PRESC_MASK
)

	)

63 
	#BURTC_CTRL_PRESC_DIV1
 0

	)

64 
	#BURTC_CTRL_PRESC_DIV2
 1

	)

65 
	#BURTC_CTRL_PRESC_DIV4
 2

	)

66 
	#BURTC_CTRL_PRESC_DIV8
 3

	)

67 
	#BURTC_CTRL_PRESC_DIV16
 4

	)

68 
	#BURTC_CTRL_PRESC_DIV32
 5

	)

69 
	#BURTC_CTRL_PRESC_DIV64
 6

	)

70 
	#BURTC_CTRL_PRESC_DIV128
 7

	)

71 
	#BURTC_CTRL_PRESC_NODIV
 
BURTC_CTRL_PRESC_DIV1


	)

73 
	#BURTC_CTRL_LPCOMPC_SHIFT
 (5)

	)

74 
	#BURTC_CTRL_LPCOMPC_MASK
 (0x7 << 
BURTC_CTRL_LPCOMPC_SHIFT
)

	)

75 
	#BURTC_CTRL_LPCOMPC
(
v
) \

76 (((
v
Ë<< 
BURTC_CTRL_LPCOMPC_SHIFT
Ë& 
BURTC_CTRL_LPCOMPC_MASK
)

	)

77 
	#BURTC_CTRL_LPCOMPC_IGNxLSB
(
x
Ë
	`BURTC_CTRL_LPCOMPC
(x)

	)

78 
	#BURTC_CTRL_LPCOMPC_IGN0LSB
 0

	)

79 
	#BURTC_CTRL_LPCOMPC_IGN1LSB
 1

	)

80 
	#BURTC_CTRL_LPCOMPC_IGN2LSB
 2

	)

81 
	#BURTC_CTRL_LPCOMPC_IGN3LSB
 3

	)

82 
	#BURTC_CTRL_LPCOMPC_IGN4LSB
 4

	)

83 
	#BURTC_CTRL_LPCOMPC_IGN5LSB
 5

	)

84 
	#BURTC_CTRL_LPCOMPC_IGN6LSB
 6

	)

85 
	#BURTC_CTRL_LPCOMPC_IGN7LSB
 7

	)

87 
	#BURTC_CTRL_COMP0TOP
 (1 << 4)

	)

88 
	#BURTC_CTRL_RSTEN
 (1 << 3)

	)

89 
	#BURTC_CTRL_DEBUGRUN
 (1 << 2)

	)

91 
	#BURTC_CTRL_MODE_SHIFT
 (0)

	)

92 
	#BURTC_CTRL_MODE_MASK
 (0x3 << 
BURTC_CTRL_MODE_SHIFT
)

	)

93 
	#BURTC_CTRL_MODE
(
v
) \

94 (((
v
Ë<< 
BURTC_CTRL_MODE_SHIFT
Ë& 
BURTC_CTRL_MODE_MASK
)

	)

95 
	#BURTC_CTRL_MODE_DISABLE
 0

	)

96 
	#BURTC_CTRL_MODE_EM2EN
 1

	)

97 
	#BURTC_CTRL_MODE_EM3EN
 2

	)

98 
	#BURTC_CTRL_MODE_EM4EN
 3

	)

101 
	#BURTC_LPMODE_LPMODE_SHIFT
 (0)

	)

102 
	#BURTC_LPMODE_LPMODE_MASK
 (0x3 << 
BURTC_LPMODE_LPMODE_SHIFT
)

	)

103 
	#BURTC_LPMODE_LPMODE
(
v
) \

104 (((
v
Ë<< 
BURTC_LPMODE_LPMODE_SHIFT
Ë& 
BURTC_LPMODE_LPMODE_MASK
)

	)

105 
	#BURTC_LPMODE_LPMODE_DISABLE
 0

	)

106 
	#BURTC_LPMODE_LPMODE_ENABLE
 1

	)

107 
	#BURTC_LPMODE_LPMODE_BUEN
 2

	)

110 
	#BURTC_LFXOFDET_TOP_SHIFT
 (4)

	)

111 
	#BURTC_LFXOFDET_TOP_MASK
 (0xF << 
BURTC_LFXOFDET_TOP_SHIFT
)

	)

112 
	#BURTC_LFXOFDET_TOP
(
v
) \

113 (((
v
Ë<< 
BURTC_LFXOFDET_TOP_SHIFT
Ë& 
BURTC_LFXOFDET_TOP_MASK
)

	)

115 
	#BURTC_LFXOFDET_OSC_SHIFT
 (0)

	)

116 
	#BURTC_LFXOFDET_OSC_MASK
 (0x3 << 
BURTC_LFXOFDET_OSC_SHIFT
)

	)

117 
	#BURTC_LFXOFDET_OSC
(
v
) \

118 (((
v
Ë<< 
BURTC_LFXOFDET_OSC_SHIFT
Ë& 
BURTC_LFXOFDET_OSC_MASK
)

	)

119 
	#BURTC_LFXOFDET_OSC_DISABLE
 0

	)

120 
	#BURTC_LFXOFDET_OSC_LFRCO
 1

	)

121 
	#BURTC_LFXOFDET_OSC_ULFRCO
 2

	)

124 
	#BURTC_STATUS_RAMWERR
 (1 << 2)

	)

125 
	#BURTC_STATUS_BUMODETS
 (1 << 1)

	)

126 
	#BURTC_STATUS_LPMODEACT
 (1 << 0)

	)

129 
	#BURTC_CMD_CLRSTATUS
 (1 << 0)

	)

132 
	#BURTC_POWERDOWN_RAM
 (1 << 0)

	)

135 
	#BURTC_LOCK_LOCKKEY_SHIFT
 (0)

	)

136 
	#BURTC_LOCK_LOCKKEY_MASK
 (0xFFFF << 
BURTC_LOCK_LOCKKEY_SHIFT
)

	)

137 
	#BURTC_LOCK_LOCKKEY_UNLOCKED
 (0x0000 << 
BURTC_LOCK_LOCKKEY_SHIFT
)

	)

138 
	#BURTC_LOCK_LOCKKEY_LOCKED
 (0x0001 << 
BURTC_LOCK_LOCKKEY_SHIFT
)

	)

139 
	#BURTC_LOCK_LOCKKEY_LOCK
 (0x0000 << 
BURTC_LOCK_LOCKKEY_SHIFT
)

	)

140 
	#BURTC_LOCK_LOCKKEY_UNLOCK
 (0xAEE8 << 
BURTC_LOCK_LOCKKEY_SHIFT
)

	)

143 
	#BURTC_IF_LFXOFAIL
 (1 << 2)

	)

144 
	#BURTC_IF_COMP0
 (1 << 1)

	)

145 
	#BURTC_IF_OF
 (1 << 0)

	)

148 
	#BURTC_IFS_LFXOFAIL
 (1 << 2)

	)

149 
	#BURTC_IFS_COMP0
 (1 << 1)

	)

150 
	#BURTC_IFS_OF
 (1 << 0)

	)

153 
	#BURTC_IFC_LFXOFAIL
 (1 << 2)

	)

154 
	#BURTC_IFC_COMP0
 (1 << 1)

	)

155 
	#BURTC_IFC_OF
 (1 << 0)

	)

158 
	#BURTC_IEN_LFXOFAIL
 (1 << 2)

	)

159 
	#BURTC_IEN_COMP0
 (1 << 1)

	)

160 
	#BURTC_IEN_OF
 (1 << 0)

	)

163 
	#BURTC_FREEZE_REGFREEZE
 (1 << 0)

	)

166 
	#BURTC_SYNCBUSY_COMP0
 (1 << 1)

	)

167 
	#BURTC_SYNCBUSY_LPMODE
 (1 << 0)

	)

	@libopencm3/include/libopencm3/efm32/common/cmu_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_CMU_H


21 
	#LIBOPENCM3_EFM32_CMU_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#CMU_CTRL
 
	`MMIO32
(
CMU_BASE
 + 0x000)

	)

27 
	#CMU_HFCORECLKDIV
 
	`MMIO32
(
CMU_BASE
 + 0x004)

	)

28 
	#CMU_HFPERCLKDIV
 
	`MMIO32
(
CMU_BASE
 + 0x008)

	)

29 
	#CMU_HFRCOCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x00C)

	)

30 
	#CMU_LFRCOCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x010)

	)

31 
	#CMU_AUXHFRCOCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x014)

	)

32 
	#CMU_CALCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x018)

	)

33 
	#CMU_CALCNT
 
	`MMIO32
(
CMU_BASE
 + 0x01C)

	)

34 
	#CMU_OSCENCMD
 
	`MMIO32
(
CMU_BASE
 + 0x020)

	)

35 
	#CMU_CMD
 
	`MMIO32
(
CMU_BASE
 + 0x024)

	)

36 
	#CMU_LFCLKSEL
 
	`MMIO32
(
CMU_BASE
 + 0x028)

	)

37 
	#CMU_STATUS
 
	`MMIO32
(
CMU_BASE
 + 0x02C)

	)

38 
	#CMU_IF
 
	`MMIO32
(
CMU_BASE
 + 0x030)

	)

39 
	#CMU_IFS
 
	`MMIO32
(
CMU_BASE
 + 0x034)

	)

40 
	#CMU_IFC
 
	`MMIO32
(
CMU_BASE
 + 0x038)

	)

41 
	#CMU_IEN
 
	`MMIO32
(
CMU_BASE
 + 0x03C)

	)

42 
	#CMU_HFCORECLKEN0
 
	`MMIO32
(
CMU_BASE
 + 0x040)

	)

43 
	#CMU_HFPERCLKEN0
 
	`MMIO32
(
CMU_BASE
 + 0x044)

	)

44 
	#CMU_SYNCBUSY
 
	`MMIO32
(
CMU_BASE
 + 0x050)

	)

45 
	#CMU_FREEZE
 
	`MMIO32
(
CMU_BASE
 + 0x054)

	)

46 
	#CMU_LFACLKEN0
 
	`MMIO32
(
CMU_BASE
 + 0x058)

	)

47 
	#CMU_LFBCLKEN0
 
	`MMIO32
(
CMU_BASE
 + 0x060)

	)

48 
	#CMU_LFAPRESC0
 
	`MMIO32
(
CMU_BASE
 + 0x068)

	)

49 
	#CMU_LFBPRESC0
 
	`MMIO32
(
CMU_BASE
 + 0x070)

	)

50 
	#CMU_PCNTCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x078)

	)

51 
	#CMU_LCDCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x07C)

	)

52 
	#CMU_ROUTE
 
	`MMIO32
(
CMU_BASE
 + 0x080)

	)

53 
	#CMU_LOCK
 
	`MMIO32
(
CMU_BASE
 + 0x084)

	)

56 
	#CMU_CTRL_HFLE
 (1 << 30)

	)

57 
	#CMU_CTRL_DBGCLK
 (1 << 28)

	)

60 
	#CMU_CTRL_CLKOUTSEL1_SHIFT
 (23)

	)

61 
	#CMU_CTRL_CLKOUTSEL1_MASK
 (0x7 << 
CMU_CTRL_CLKOUTSEL1_SHIFT
)

	)

62 
	#CMU_CTRL_CLKOUTSEL1
(
v
) \

63 (((
v
Ë<< 
CMU_CTRL_CLKOUTSEL1_SHIFT
Ë& 
CMU_CTRL_CLKOUTSEL1_MASK
)

	)

64 
	#CMU_CTRL_CLKOUTSEL1_LFRCO
 0

	)

65 
	#CMU_CTRL_CLKOUTSEL1_LFXO
 1

	)

66 
	#CMU_CTRL_CLKOUTSEL1_HFCLK
 2

	)

67 
	#CMU_CTRL_CLKOUTSEL1_LFXOQ
 3

	)

68 
	#CMU_CTRL_CLKOUTSEL1_HFXOQ
 4

	)

69 
	#CMU_CTRL_CLKOUTSEL1_LFRCOQ
 5

	)

70 
	#CMU_CTRL_CLKOUTSEL1_HFRCOQ
 6

	)

71 
	#CMU_CTRL_CLKOUTSEL1_AUXHFRCOQ
 7

	)

73 
	#CMU_CTRL_CLKOUTSEL0_SHIFT
 (23)

	)

74 
	#CMU_CTRL_CLKOUTSEL0_MASK
 (0x7 << 
CMU_CTRL_CLKOUTSEL0_SHIFT
)

	)

75 
	#CMU_CTRL_CLKOUTSEL0
(
v
) \

76 (((
v
Ë<< 
CMU_CTRL_CLKOUTSEL0_SHIFT
Ë& 
CMU_CTRL_CLKOUTSEL0_MASK
)

	)

77 
	#CMU_CTRL_CLKOUTSEL0_HFRCO
 0

	)

78 
	#CMU_CTRL_CLKOUTSEL0_HFXO
 1

	)

79 
	#CMU_CTRL_CLKOUTSEL0_HFCLK2
 2

	)

80 
	#CMU_CTRL_CLKOUTSEL0_HFCLK4
 3

	)

81 
	#CMU_CTRL_CLKOUTSEL0_HFCLK8
 4

	)

82 
	#CMU_CTRL_CLKOUTSEL0_HFCLK16
 5

	)

83 
	#CMU_CTRL_CLKOUTSEL0_ULFRCO
 6

	)

84 
	#CMU_CTRL_CLKOUTSEL0_AUXHFRCO
 7

	)

86 
	#CMU_CTRL_LFXOTIMEOUT_SHIFT
 (18)

	)

87 
	#CMU_CTRL_LFXOTIMEOUT_MASK
 (0x3 << 
CMU_CTRL_LFXOTIMEOUT_SHIFT
)

	)

88 
	#CMU_CTRL_LFXOTIMEOUT
(
v
) \

89 (((
v
Ë<< 
CMU_CTRL_LFXOTIMEOUT_SHIFT
Ë& 
CMU_CTRL_LFXOTIMEOUT_MASK
)

	)

90 
	#CMU_CTRL_LFXOTIMEOUT_8CYCLES
 0

	)

91 
	#CMU_CTRL_LFXOTIMEOUT_1KCYCLES
 1

	)

92 
	#CMU_CTRL_LFXOTIMEOUT_16KCYCLES
 2

	)

93 
	#CMU_CTRL_LFXOTIMEOUT_32KCYCLES
 3

	)

95 
	#CMU_CTRL_LFXOBUFCUR
 (1 << 17)

	)

97 
	#CMU_CTRL_HFCLKDIV_SHIFT
 (14)

	)

98 
	#CMU_CTRL_HFCLKDIV_MASK
 (0x7 << 
CMU_CTRL_HFCLKDIV_SHIFT
)

	)

99 
	#CMU_CTRL_HFCLKDIV
(
v
) \

100 (((
v
Ë<< 
CMU_CTRL_HFCLKDIV_SHIFT
Ë& 
CMU_CTRL_HFCLKDIV_MASK
)

	)

101 
	#CMU_CTRL_HFCLKDIV_NODIV
 0

	)

102 
	#CMU_CTRL_HFCLKDIV_DIV2
 1

	)

103 
	#CMU_CTRL_HFCLKDIV_DIV3
 2

	)

104 
	#CMU_CTRL_HFCLKDIV_DIV4
 3

	)

105 
	#CMU_CTRL_HFCLKDIV_DIV5
 4

	)

106 
	#CMU_CTRL_HFCLKDIV_DIV6
 5

	)

107 
	#CMU_CTRL_HFCLKDIV_DIV7
 6

	)

108 
	#CMU_CTRL_HFCLKDIV_DIV8
 7

	)

110 
	#CMU_CTRL_LFXOBOOST
 (1 << 13)

	)

112 
	#CMU_CTRL_LFXOMODE_SHIFT
 (11)

	)

113 
	#CMU_CTRL_LFXOMODE_MASK
 (0x3 << 
CMU_CTRL_LFXOMODE_SHIFT
)

	)

114 
	#CMU_CTRL_LFXOMODE
(
v
) \

115 (((
v
Ë<< 
CMU_CTRL_LFXOMODE_SHIFT
Ë& 
CMU_CTRL_LFXOMODE_MASK
)

	)

116 
	#CMU_CTRL_LFXOMODE_XTAL
 0

	)

117 
	#CMU_CTRL_LFXOMODE_BUFEXTCLK
 1

	)

118 
	#CMU_CTRL_LFXOMODE_DIGEXTCLK
 2

	)

120 
	#CMU_CTRL_HFXOTIMEOUT_SHIFT
 (9)

	)

121 
	#CMU_CTRL_HFXOTIMEOUT_MASK
 (0x3 << 
CMU_CTRL_HFXOTIMEOUT_SHIFT
)

	)

122 
	#CMU_CTRL_HFXOTIMEOUT
(
v
) \

123 (((
v
Ë<< 
CMU_CTRL_HFXOTIMEOUT_SHIFT
Ë& 
CMU_CTRL_HFXOTIMEOUT_MASK
)

	)

124 
	#CMU_CTRL_HFXOTIMEOUT_8CYCLES
 0

	)

125 
	#CMU_CTRL_HFXOTIMEOUT_256CYCLES
 1

	)

126 
	#CMU_CTRL_HFXOTIMEOUT_1KCYCLES
 2

	)

127 
	#CMU_CTRL_HFXOTIMEOUT_16KCYCLES
 3

	)

129 
	#CMU_CTRL_HFXOGLITCHDETEN
 (1 << 7)

	)

131 
	#CMU_CTRL_HFXOBUFCUR_SHIFT
 (5)

	)

132 
	#CMU_CTRL_HFXOBUFCUR_MASK
 (0x3 << 
CMU_CTRL_HFXOBUFCUR_SHIFT
)

	)

133 
	#CMU_CTRL_HFXOBUFCUR
(
v
) \

134 (((
v
Ë<< 
CMU_CTRL_HFXOBUFCUR_SHIFT
Ë& 
CMU_CTRL_HFXOBUFCUR_MASK
)

	)

135 
	#CMU_CTRL_HFXOBUFCUR_BOOSTUPTO32MHZ
 1

	)

136 
	#CMU_CTRL_HFXOBUFCUR_BOOSTABOVE32MHZ
 3

	)

138 
	#CMU_CTRL_HFXOBOOST_SHIFT
 (2)

	)

139 
	#CMU_CTRL_HFXOBOOST_MASK
 (0x3 << 
CMU_CTRL_HFXOBOOST_SHIFT
)

	)

140 
	#CMU_CTRL_HFXOBOOST
(
v
) \

141 (((
v
Ë<< 
CMU_CTRL_HFXOBOOST_SHIFT
Ë& 
CMU_CTRL_HFXOBOOST_MASK
)

	)

142 
	#CMU_CTRL_HFXOBOOST_50PCENT
 0

	)

143 
	#CMU_CTRL_HFXOBOOST_70PCENT
 1

	)

144 
	#CMU_CTRL_HFXOBOOST_80PCENT
 2

	)

145 
	#CMU_CTRL_HFXOBOOST_100PCENT
 3

	)

147 
	#CMU_CTRL_HFXOMODE_SHIFT
 (0)

	)

148 
	#CMU_CTRL_HFXOMODE_MASK
 (0x3 << 
CMU_CTRL_HFXOMODE_SHIFT
)

	)

149 
	#CMU_CTRL_HFXOMODE
(
v
) \

150 (((
v
Ë<< 
CMU_CTRL_HFXOMODE_SHIFT
Ë& 
CMU_CTRL_HFXOMODE_MASK
)

	)

151 
	#CMU_CTRL_HFXOMODE_XTAL
 0

	)

152 
	#CMU_CTRL_HFXOMODE_BUFEXTCLK
 1

	)

153 
	#CMU_CTRL_HFXOMODE_DIGEXTCLK
 2

	)

156 
	#CMU_HFCORECLKDIV_HFCORECLKLEDIV
 (1 << 8)

	)

158 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT
 (0)

	)

159 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_MASK
 \

160 (0xF << 
CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT
)

	)

161 
	#CMU_HFCORECLKDIV_HFCORECLKDIV
(
v
) \

162 (((
v
Ë<< 
CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT
) & \

163 
CMU_HFCORECLKDIV_HFCORECLKDIV_MASK
)

	)

164 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK
 \

165 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(0)

	)

166 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK2
 \

167 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(1)

	)

168 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK4
 \

169 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(2)

	)

170 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK8
 \

171 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(3)

	)

172 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK16
 \

173 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(4)

	)

174 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK32
 \

175 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(5)

	)

176 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK64
 \

177 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(6)

	)

178 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK128
 \

179 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(7)

	)

180 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK256
 \

181 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(8)

	)

182 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK512
 \

183 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(9)

	)

185 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_NODIV
 \

186 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK


	)

187 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV2
 \

188 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK2


	)

189 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV4
 \

190 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK4


	)

191 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV8
 \

192 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK8


	)

193 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV16
 \

194 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK16


	)

195 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV32
 \

196 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK32


	)

197 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV64
 \

198 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK64


	)

199 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV128
 \

200 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK128


	)

201 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV256
 \

202 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK256


	)

203 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV512
 \

204 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK512


	)

207 
	#CMU_HFPERCLKDIV_HFPERCLKEN
 (1 << 8)

	)

209 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT
 (0)

	)

210 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_MASK
 \

211 (0xF << 
CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT
)

	)

212 
	#CMU_HFPERCLKDIV_HFPERCLKDIV
(
v
) \

213 (((
v
Ë<< 
CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT
) & \

214 
CMU_HFPERCLKDIV_HFPERCLKDIV_MASK
)

	)

215 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(0)

	)

216 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK2
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(1)

	)

217 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK4
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(2)

	)

218 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK8
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(3)

	)

219 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK16
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(4)

	)

220 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK32
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(5)

	)

221 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK64
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(6)

	)

222 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK128
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(7)

	)

223 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK256
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(8)

	)

224 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK512
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(9)

	)

227 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_NODIV
 \

228 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK


	)

229 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV2
 \

230 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK2


	)

231 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV4
 \

232 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK4


	)

233 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV8
 \

234 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK8


	)

235 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV16
 \

236 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK16


	)

237 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV32
 \

238 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK32


	)

239 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV64
 \

240 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK64


	)

241 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV128
 \

242 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK128


	)

243 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV256
 \

244 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK256


	)

245 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV512
 \

246 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK512


	)

249 
	#CMU_HFRCOCTRL_SUDELAY_SHIFT
 (12)

	)

250 
	#CMU_HFRCOCTRL_SUDELAY_MASK
 (0x1F << 
CMU_HFRCOCTRL_SUDELAY_SHIFT
)

	)

251 
	#CMU_HFRCOCTRL_SUDELAY
(
v
) \

252 ((((
v
Ë<< 
CMU_HFRCOCTRL_SUDELAY_SHIFT
Ë& 
CMU_HFRCOCTRL_SUDELAY_MASK
))

	)

254 
	#CMU_HFRCOCTRL_BAND_SHIFT
 (8)

	)

255 
	#CMU_HFRCOCTRL_BAND_MASK
 (0x7 << 
CMU_HFRCOCTRL_BAND_SHIFT
)

	)

256 
	#CMU_HFRCOCTRL_BAND
(
v
) \

257 (((
v
Ë<< 
CMU_HFRCOCTRL_BAND_SHIFT
Ë& 
CMU_HFRCOCTRL_BAND_MASK
)

	)

258 
	#CMU_HFRCOCTRL_BAND_1MHZ
 0

	)

259 
	#CMU_HFRCOCTRL_BAND_7MHZ
 1

	)

260 
	#CMU_HFRCOCTRL_BAND_11MHZ
 2

	)

261 
	#CMU_HFRCOCTRL_BAND_14MHZ
 3

	)

262 
	#CMU_HFRCOCTRL_BAND_21MHZ
 4

	)

263 
	#CMU_HFRCOCTRL_BAND_28MHZ
 5

	)

265 
	#CMU_HFRCOCTRL_TUNING_SHIFT
 (0)

	)

266 
	#CMU_HFRCOCTRL_TUNING_MASK
 (0xFF << 
CMU_HFRCOCTRL_TUNING_SHIFT
)

	)

267 
	#CMU_HFRCOCTRL_TUNING
(
v
) \

268 (((
v
Ë<< 
CMU_HFRCOCTRL_TUNING_SHIFT
Ë& 
CMU_HFRCOCTRL_TUNING_MASK
)

	)

271 
	#CMU_LFRCOCTRL_TUNING_SHIFT
 (0)

	)

272 
	#CMU_LFRCOCTRL_TUNING_MASK
 (0xFF << 
CMU_LFRCOCTRL_TUNING_SHIFT
)

	)

273 
	#CMU_LFRCOCTRL_TUNING
(
v
) \

274 (((
v
Ë<< 
CMU_LFRCOCTRL_TUNING_SHIFT
Ë& 
CMU_LFRCOCTRL_TUNING_MASK
)

	)

277 
	#CMU_AUXHFRCOCTRL_BAND_SHIFT
 (8)

	)

278 
	#CMU_AUXHFRCOCTRL_BAND_MASK
 (0x7 << 
CMU_AUXHFRCOCTRL_BAND_SHIFT
)

	)

279 
	#CMU_AUXHFRCOCTRL_BAND
(
v
) \

280 (((
v
Ë<< 
CMU_AUXHFRCOCTRL_BAND_SHIFT
Ë& 
CMU_AUXHFRCOCTRL_BAND_MASK
)

	)

281 
	#CMU_AUXHFRCOCTRL_BAND_1MHZ
 0

	)

282 
	#CMU_AUXHFRCOCTRL_BAND_7MHZ
 1

	)

283 
	#CMU_AUXHFRCOCTRL_BAND_11MHZ
 2

	)

284 
	#CMU_AUXHFRCOCTRL_BAND_14MHZ
 3

	)

285 
	#CMU_AUXHFRCOCTRL_BAND_28MHZ
 4

	)

286 
	#CMU_AUXHFRCOCTRL_BAND_21MHZ
 5

	)

288 
	#CMU_AUXHFRCOCTRL_TUNING_SHIFT
 (0)

	)

289 
	#CMU_AUXHFRCOCTRL_TUNING_MASK
 (0xFF << 
CMU_AUXHFRCOCTRL_TUNING_SHIFT
)

	)

290 
	#CMU_AUXHFRCOCTRL_TUNING
(
v
) \

291 (((
v
Ë<< 
CMU_AUXHFRCOCTRL_TUNING_SHIFT
Ë& 
CMU_AUXHFRCOCTRL_TUNING_MASK
)

	)

294 
	#CMU_CALCTRL_CONT
 (1 << 6)

	)

296 
	#CMU_CALCTRL_DOWNSEL_SHIFT
 (3)

	)

297 
	#CMU_CALCTRL_DOWNSEL_MASK
 (0x7 << 
CMU_CALCTRL_DOWNSEL_SHIFT
)

	)

298 
	#CMU_CALCTRL_DOWNSEL
(
v
) \

299 (((
v
Ë<< 
CMU_CALCTRL_DOWNSEL_SHIFT
Ë& 
CMU_CALCTRL_DOWNSEL_MASK
)

	)

300 
	#CMU_CALCTRL_DOWNSEL_HFCLK
 0

	)

301 
	#CMU_CALCTRL_DOWNSEL_HFXO
 1

	)

302 
	#CMU_CALCTRL_DOWNSEL_LFXO
 2

	)

303 
	#CMU_CALCTRL_DOWNSEL_HFRCO
 3

	)

304 
	#CMU_CALCTRL_DOWNSEL_LFRCO
 4

	)

305 
	#CMU_CALCTRL_DOWNSEL_AUXHFRCO
 5

	)

307 
	#CMU_CALCTRL_UPSEL_SHIFT
 (3)

	)

308 
	#CMU_CALCTRL_UPSEL_MASK
 (0x7 << 
CMU_CALCTRL_UPSEL_SHIFT
)

	)

309 
	#CMU_CALCTRL_UPSEL
(
v
) \

310 (((
v
Ë<< 
CMU_CALCTRL_UPSEL_SHIFT
Ë& 
CMU_CALCTRL_UPSEL_MASK
)

	)

311 
	#CMU_CALCTRL_UPSEL_HFXO
 0

	)

312 
	#CMU_CALCTRL_UPSEL_LFXO
 1

	)

313 
	#CMU_CALCTRL_UPSEL_HFRCO
 2

	)

314 
	#CMU_CALCTRL_UPSEL_LFRCO
 3

	)

315 
	#CMU_CALCTRL_UPSEL_AUXHFRCO
 4

	)

318 
	#CMU_CALCNT_CALCNT_SHIFT
 (0)

	)

319 
	#CMU_CALCNT_CALCNT_MASK
 (0xFFFFF << 
CMU_CALCNT_CALCNT_SHIFT
)

	)

320 
	#CMU_CALCNT_CALCNT
(
v
) \

321 (((
v
Ë<< 
CMU_CALCNT_CALCNT_SHIFT
Ë& 
CMU_CALCNT_CALCNT_MASK
)

	)

324 
	#CMU_OSCENCMD_LFXODIS
 (1 << 9)

	)

325 
	#CMU_OSCENCMD_LFXOEN
 (1 << 8)

	)

326 
	#CMU_OSCENCMD_LFRCODIS
 (1 << 7)

	)

327 
	#CMU_OSCENCMD_LFRCOEN
 (1 << 6)

	)

328 
	#CMU_OSCENCMD_AUXHFRCODIS
 (1 << 5)

	)

329 
	#CMU_OSCENCMD_AUXHFRCOEN
 (1 << 4)

	)

330 
	#CMU_OSCENCMD_HFXODIS
 (1 << 3)

	)

331 
	#CMU_OSCENCMD_HFXOEN
 (1 << 2)

	)

332 
	#CMU_OSCENCMD_HFRCODIS
 (1 << 1)

	)

333 
	#CMU_OSCENCMD_HFRCOEN
 (1 << 0)

	)

336 
	#CMU_CMD_USBCCLKSEL_SHIFT
 (5)

	)

337 
	#CMU_CMD_USBCCLKSEL_MASK
 (0x3 << 
CMU_CMD_USBCCLKSEL_SHIFT
)

	)

338 
	#CMU_CMD_USBCCLKSEL
(
v
) \

339 (((
v
Ë<< 
CMU_CMD_USBCCLKSEL_SHIFT
Ë& 
CMU_CMD_USBCCLKSEL_MASK
)

	)

340 
	#CMU_CMD_USBCCLKSEL_HFCLKNODIV
 1

	)

341 
	#CMU_CMD_USBCCLKSEL_LFXO
 2

	)

342 
	#CMU_CMD_USBCCLKSEL_LFRCO
 3

	)

344 
	#CMU_CMD_CALSTOP
 (1 << 4)

	)

345 
	#CMU_CMD_CALSTART
 (1 << 3)

	)

347 
	#CMU_CMD_HFCLKSEL_SHIFT
 (0)

	)

348 
	#CMU_CMD_HFCLKSEL_MASK
 (0x7 << 
CMU_CMD_HFCLKSEL_SHIFT
)

	)

349 
	#CMU_CMD_HFCLKSEL
(
v
) \

350 (((
v
Ë<< 
CMU_CMD_HFCLKSEL_SHIFT
Ë& 
CMU_CMD_HFCLKSEL_MASK
)

	)

351 
	#CMU_CMD_HFCLKSEL_HFRCO
 1

	)

352 
	#CMU_CMD_HFCLKSEL_HFXO
 2

	)

353 
	#CMU_CMD_HFCLKSEL_LFRCO
 3

	)

354 
	#CMU_CMD_HFCLKSEL_LFXO
 4

	)

357 
	#CMU_LFCLKSEL_LFBE
 (1 << 20)

	)

358 
	#CMU_LFCLKSEL_LFAE
 (1 << 16)

	)

360 
	#CMU_LFCLKSEL_LFB_SHIFT
 (2)

	)

361 
	#CMU_LFCLKSEL_LFB_MASK
 (0x3 << 
CMU_LFCLKSEL_LFB_MASK
)

	)

362 
	#CMU_LFCLKSEL_LFB
(
v
) \

363 (((
v
Ë<< 
CMU_LFCLKSEL_LFB_MASK
Ë& CMU_LFCLKSEL_LFB_MASK)

	)

365 
	#CMU_LFCLKSEL_LFA_SHIFT
 (0)

	)

366 
	#CMU_LFCLKSEL_LFA_MASK
 (0x3 << 
CMU_LFCLKSEL_LFA_MASK
)

	)

367 
	#CMU_LFCLKSEL_LFA
(
v
) \

368 (((
v
Ë<< 
CMU_LFCLKSEL_LFA_MASK
Ë& CMU_LFCLKSEL_LFA_MASK)

	)

371 
	#CMU_STATUS_USBCLFRCOSEL
 (1 << 17)

	)

372 
	#CMU_STATUS_USBCLFXOSEL
 (1 << 16)

	)

373 
	#CMU_STATUS_USBCHFCLKSEL
 (1 << 15)

	)

374 
	#CMU_STATUS_CALBSY
 (1 << 14)

	)

375 
	#CMU_STATUS_LFXOSEL
 (1 << 13)

	)

376 
	#CMU_STATUS_LFRCOSEL
 (1 << 12)

	)

377 
	#CMU_STATUS_HFXOSEL
 (1 << 11)

	)

378 
	#CMU_STATUS_HFRCOSEL
 (1 << 10)

	)

379 
	#CMU_STATUS_LFXORDY
 (1 << 9)

	)

380 
	#CMU_STATUS_LFXOENS
 (1 << 8)

	)

381 
	#CMU_STATUS_LFRCORDY
 (1 << 7)

	)

382 
	#CMU_STATUS_LFRCOENS
 (1 << 6)

	)

383 
	#CMU_STATUS_AUXHFRCORDY
 (1 << 5)

	)

384 
	#CMU_STATUS_AUXHFRCOENS
 (1 << 4)

	)

385 
	#CMU_STATUS_HFXORDY
 (1 << 3)

	)

386 
	#CMU_STATUS_HFXOENS
 (1 << 2)

	)

387 
	#CMU_STATUS_HFRCORDY
 (1 << 1)

	)

388 
	#CMU_STATUS_HFRCOENS
 (1 << 0)

	)

391 
	#CMU_IF_USBCHFCLKSEL
 (1 << 7)

	)

392 
	#CMU_IF_CALOF
 (1 << 6)

	)

393 
	#CMU_IF_CALRDY
 (1 << 5)

	)

394 
	#CMU_IF_AUXHFRCORDY
 (1 << 4)

	)

395 
	#CMU_IF_LFXORDY
 (1 << 3)

	)

396 
	#CMU_IF_LFRCORDY
 (1 << 2)

	)

397 
	#CMU_IF_HFXORDY
 (1 << 1)

	)

398 
	#CMU_IF_HFRCORDY
 (1 << 0)

	)

401 
	#CMU_IFS_USBCHFCLKSEL
 (1 << 7)

	)

402 
	#CMU_IFS_CALOF
 (1 << 6)

	)

403 
	#CMU_IFS_CALRDY
 (1 << 5)

	)

404 
	#CMU_IFS_AUXHFRCORDY
 (1 << 4)

	)

405 
	#CMU_IFS_LFXORDY
 (1 << 3)

	)

406 
	#CMU_IFS_LFRCORDY
 (1 << 2)

	)

407 
	#CMU_IFS_HFXORDY
 (1 << 1)

	)

408 
	#CMU_IFS_HFRCORDY
 (1 << 0)

	)

411 
	#CMU_IFC_USBCHFCLKSEL
 (1 << 7)

	)

412 
	#CMU_IFC_CALOF
 (1 << 6)

	)

413 
	#CMU_IFC_CALRDY
 (1 << 5)

	)

414 
	#CMU_IFC_AUXHFRCORDY
 (1 << 4)

	)

415 
	#CMU_IFC_LFXORDY
 (1 << 3)

	)

416 
	#CMU_IFC_LFRCORDY
 (1 << 2)

	)

417 
	#CMU_IFC_HFXORDY
 (1 << 1)

	)

418 
	#CMU_IFC_HFRCORDY
 (1 << 0)

	)

421 
	#CMU_IEN_USBCHFCLKSEL
 (1 << 7)

	)

422 
	#CMU_IEN_CALOF
 (1 << 6)

	)

423 
	#CMU_IEN_CALRDY
 (1 << 5)

	)

424 
	#CMU_IEN_AUXHFRCORDY
 (1 << 4)

	)

425 
	#CMU_IEN_LFXORDY
 (1 << 3)

	)

426 
	#CMU_IEN_LFRCORDY
 (1 << 2)

	)

427 
	#CMU_IEN_HFXORDY
 (1 << 1)

	)

428 
	#CMU_IEN_HFRCORDY
 (1 << 0)

	)

431 
	#CMU_HFCORECLKEN0_EBI
 (1 << 5)

	)

432 
	#CMU_HFCORECLKEN0_LE
 (1 << 4)

	)

433 
	#CMU_HFCORECLKEN0_USB
 (1 << 3)

	)

434 
	#CMU_HFCORECLKEN0_USBC
 (1 << 2)

	)

435 
	#CMU_HFCORECLKEN0_AES
 (1 << 1)

	)

436 
	#CMU_HFCORECLKEN0_DMA
 (1 << 0)

	)

439 
	#CMU_HFPERCLKEN0_DAC0
 (1 << 17)

	)

440 
	#CMU_HFPERCLKEN0_ADC0
 (1 << 16)

	)

441 
	#CMU_HFPERCLKEN0_PRS
 (1 << 15)

	)

442 
	#CMU_HFPERCLKEN0_VCMP
 (1 << 14)

	)

443 
	#CMU_HFPERCLKEN0_GPIO
 (1 << 13)

	)

444 
	#CMU_HFPERCLKEN0_I2C1
 (1 << 12)

	)

445 
	#CMU_HFPERCLKEN0_I2C0
 (1 << 11)

	)

446 
	#CMU_HFPERCLKEN0_ACMP1
 (1 << 10)

	)

447 
	#CMU_HFPERCLKEN0_ACMP0
 (1 << 9)

	)

448 
	#CMU_HFPERCLKEN0_TIMER3
 (1 << 8)

	)

449 
	#CMU_HFPERCLKEN0_TIMER2
 (1 << 7)

	)

450 
	#CMU_HFPERCLKEN0_TIMER1
 (1 << 6)

	)

451 
	#CMU_HFPERCLKEN0_TIMER0
 (1 << 5)

	)

452 
	#CMU_HFPERCLKEN0_UART1
 (1 << 4)

	)

453 
	#CMU_HFPERCLKEN0_UART0
 (1 << 3)

	)

454 
	#CMU_HFPERCLKEN0_USART2
 (1 << 2)

	)

455 
	#CMU_HFPERCLKEN0_USART1
 (1 << 1)

	)

456 
	#CMU_HFPERCLKEN0_USART0
 (1 << 0)

	)

459 
	#CMU_SYNCBUSY_LFBPRESC0
 (1 << 6)

	)

460 
	#CMU_SYNCBUSY_LFBCLKEN0
 (1 << 4)

	)

461 
	#CMU_SYNCBUSY_LFAPRESC0
 (1 << 2)

	)

462 
	#CMU_SYNCBUSY_LFACLKEN0
 (1 << 0)

	)

465 
	#CMU_FREEZE_REGFREEZE
 (1 << 0)

	)

468 
	#CMU_LFACLKEN0_LCD
 (1 << 3)

	)

469 
	#CMU_LFACLKEN0_LETIMER0
 (1 << 2)

	)

470 
	#CMU_LFACLKEN0_RTC
 (1 << 1)

	)

471 
	#CMU_LFACLKEN0_LESENSE
 (1 << 0)

	)

474 
	#CMU_LFBCLKEN0_LEUART1
 (1 << 1)

	)

475 
	#CMU_LFBCLKEN0_LEUART0
 (1 << 0)

	)

478 
	#CMU_LFAPRESC0_LCD_SHIFT
 (12)

	)

479 
	#CMU_LFAPRESC0_LCD_MASK
 (0x3 << 
CMU_LFAPRESC0_LCD_SHIFT
)

	)

480 
	#CMU_LFAPRESC0_LCD
(
v
) \

481 (((
v
Ë<< 
CMU_LFAPRESC0_LCD_SHIFT
Ë& 
CMU_LFAPRESC0_LCD_MASK
)

	)

482 
	#CMU_LFAPRESC0_LCD_DIV16
 0

	)

483 
	#CMU_LFAPRESC0_LCD_DIV32
 1

	)

484 
	#CMU_LFAPRESC0_LCD_DIV64
 2

	)

485 
	#CMU_LFAPRESC0_LCD_DIV128
 3

	)

487 
	#CMU_LFAPRESC0_LETIMER0_SHIFT
 (8)

	)

488 
	#CMU_LFAPRESC0_LETIMER0_MASK
 (0xF << 
CMU_LFAPRESC0_LETIMER0_SHIFT
)

	)

489 
	#CMU_LFAPRESC0_LETIMER0
(
v
) \

490 (((
v
Ë<< 
CMU_LFAPRESC0_LETIMER0_SHIFT
Ë& 
CMU_LFAPRESC0_LETIMER0_MASK
)

	)

491 
	#CMU_LFAPRESC0_LETIMER0_DIV1
 0

	)

492 
	#CMU_LFAPRESC0_LETIMER0_DIV2
 1

	)

493 
	#CMU_LFAPRESC0_LETIMER0_DIV4
 2

	)

494 
	#CMU_LFAPRESC0_LETIMER0_DIV8
 3

	)

495 
	#CMU_LFAPRESC0_LETIMER0_DIV16
 4

	)

496 
	#CMU_LFAPRESC0_LETIMER0_DIV32
 5

	)

497 
	#CMU_LFAPRESC0_LETIMER0_DIV64
 6

	)

498 
	#CMU_LFAPRESC0_LETIMER0_DIV128
 7

	)

499 
	#CMU_LFAPRESC0_LETIMER0_DIV256
 8

	)

500 
	#CMU_LFAPRESC0_LETIMER0_DIV512
 9

	)

501 
	#CMU_LFAPRESC0_LETIMER0_DIV1024
 10

	)

502 
	#CMU_LFAPRESC0_LETIMER0_DIV2048
 11

	)

503 
	#CMU_LFAPRESC0_LETIMER0_DIV4096
 12

	)

504 
	#CMU_LFAPRESC0_LETIMER0_DIV8192
 13

	)

505 
	#CMU_LFAPRESC0_LETIMER0_DIV16384
 14

	)

506 
	#CMU_LFAPRESC0_LETIMER0_DIV32768
 15

	)

507 
	#CMU_LFAPRESC0_LETIMER0_NODIV
 
CMU_LFAPRESC0_LETIMER0_DIV1


	)

509 
	#CMU_LFAPRESC0_RTC_SHIFT
 (4)

	)

510 
	#CMU_LFAPRESC0_RTC_MASK
 (0xF << 
CMU_LFAPRESC0_RTC_SHIFT
)

	)

511 
	#CMU_LFAPRESC0_RTC
(
v
) \

512 (((
v
Ë<< 
CMU_LFAPRESC0_RTC_SHIFT
Ë& 
CMU_LFAPRESC0_RTC_MASK
)

	)

513 
	#CMU_LFAPRESC0_RTC_DIV1
 0

	)

514 
	#CMU_LFAPRESC0_RTC_DIV2
 1

	)

515 
	#CMU_LFAPRESC0_RTC_DIV4
 2

	)

516 
	#CMU_LFAPRESC0_RTC_DIV8
 3

	)

517 
	#CMU_LFAPRESC0_RTC_DIV16
 4

	)

518 
	#CMU_LFAPRESC0_RTC_DIV32
 5

	)

519 
	#CMU_LFAPRESC0_RTC_DIV64
 6

	)

520 
	#CMU_LFAPRESC0_RTC_DIV128
 7

	)

521 
	#CMU_LFAPRESC0_RTC_DIV256
 8

	)

522 
	#CMU_LFAPRESC0_RTC_DIV512
 9

	)

523 
	#CMU_LFAPRESC0_RTC_DIV1024
 10

	)

524 
	#CMU_LFAPRESC0_RTC_DIV2048
 11

	)

525 
	#CMU_LFAPRESC0_RTC_DIV4096
 12

	)

526 
	#CMU_LFAPRESC0_RTC_DIV8192
 13

	)

527 
	#CMU_LFAPRESC0_RTC_DIV16384
 14

	)

528 
	#CMU_LFAPRESC0_RTC_DIV32768
 15

	)

529 
	#CMU_LFAPRESC0_RTC_NODIV
 
CMU_LFAPRESC0_RTC_DIV1


	)

531 
	#CMU_LFAPRESC0_LESENSE_SHIFT
 (12)

	)

532 
	#CMU_LFAPRESC0_LESENSE_MASK
 (0x3 << 
CMU_LFAPRESC0_LESENSE_SHIFT
)

	)

533 
	#CMU_LFAPRESC0_LESENSE
(
v
) \

534 (((
v
Ë<< 
CMU_LFAPRESC0_LESENSE_SHIFT
Ë& 
CMU_LFAPRESC0_LESENSE_MASK
)

	)

535 
	#CMU_LFAPRESC0_LESENSE_DIV1
 0

	)

536 
	#CMU_LFAPRESC0_LESENSE_DIV2
 1

	)

537 
	#CMU_LFAPRESC0_LESENSE_DIV4
 2

	)

538 
	#CMU_LFAPRESC0_LESENSE_DIV8
 3

	)

539 
	#CMU_LFAPRESC0_LESENSE_NODIV
 
CMU_LFAPRESC0_LESENSE_DIV1


	)

542 
	#CMU_LFBPRESC0_LEUART1_SHIFT
 (4)

	)

543 
	#CMU_LFBPRESC0_LEUART1_MASK
 (0x3 << 
CMU_LFBPRESC0_LEUART1_SHIFT
)

	)

544 
	#CMU_LFBPRESC0_LEUART1
(
v
) \

545 (((
v
Ë<< 
CMU_LFBPRESC0_LEUART1_SHIFT
Ë& 
CMU_LFBPRESC0_LEUART1_MASK
)

	)

546 
	#CMU_LFBPRESC0_LEUART1_DIV1
 0

	)

547 
	#CMU_LFBPRESC0_LEUART1_DIV2
 1

	)

548 
	#CMU_LFBPRESC0_LEUART1_DIV4
 2

	)

549 
	#CMU_LFBPRESC0_LEUART1_DIV8
 3

	)

550 
	#CMU_LFBPRESC0_LEUART1_NODIV
 
CMU_LFBPRESC0_LEUART1_DIV1


	)

552 
	#CMU_LFBPRESC0_LEUART0_SHIFT
 (0)

	)

553 
	#CMU_LFBPRESC0_LEUART0_MASK
 (0x3 << 
CMU_LFBPRESC0_LEUART0_SHIFT
)

	)

554 
	#CMU_LFBPRESC0_LEUART0
(
v
) \

555 (((
v
Ë<< 
CMU_LFBPRESC0_LEUART0_SHIFT
Ë& 
CMU_LFBPRESC0_LEUART0_MASK
)

	)

556 
	#CMU_LFBPRESC0_LEUART0_DIV1
 0

	)

557 
	#CMU_LFBPRESC0_LEUART0_DIV2
 1

	)

558 
	#CMU_LFBPRESC0_LEUART0_DIV4
 2

	)

559 
	#CMU_LFBPRESC0_LEUART0_DIV8
 3

	)

560 
	#CMU_LFBPRESC0_LEUART0_NODIV
 
CMU_LFBPRESC0_LEUART0_DIV1


	)

563 
	#CMU_PCNTCTRL_PCNT2CLKSE
 (1 << 5)

	)

564 
	#CMU_PCNTCTRL_PCNT2CLKEN
 (1 << 4)

	)

565 
	#CMU_PCNTCTRL_PCNT1CLKSEL
 (1 << 3)

	)

566 
	#CMU_PCNTCTRL_PCNT1CLKEN
 (1 << 2)

	)

567 
	#CMU_PCNTCTRL_PCNT0CLKSEL
 (1 << 1)

	)

568 
	#CMU_PCNTCTRL_PCNT0CLKEN
 (1 << 0)

	)

571 
	#CMU_LCDCTRL_VBFDIV_SHIFT
 (4)

	)

572 
	#CMU_LCDCTRL_VBFDIV_MASK
 (0xF << 
CMU_LCDCTRL_VBFDIV_SHIFT
)

	)

573 
	#CMU_LCDCTRL_VBFDIV
(
v
) \

574 (((
v
Ë<< 
CMU_LCDCTRL_VBFDIV_SHIFT
Ë& 
CMU_LCDCTRL_VBFDIV_MASK
)

	)

575 
	#CMU_LCDCTRL_VBFDIV_DIV1
 0

	)

576 
	#CMU_LCDCTRL_VBFDIV_DIV2
 1

	)

577 
	#CMU_LCDCTRL_VBFDIV_DIV4
 2

	)

578 
	#CMU_LCDCTRL_VBFDIV_DIV8
 3

	)

579 
	#CMU_LCDCTRL_VBFDIV_DIV16
 4

	)

580 
	#CMU_LCDCTRL_VBFDIV_DIV32
 5

	)

581 
	#CMU_LCDCTRL_VBFDIV_DIV64
 6

	)

582 
	#CMU_LCDCTRL_VBFDIV_DIV128
 7

	)

583 
	#CMU_LCDCTRL_VBFDIV_NODIV
 
CMU_LCDCTRL_VBFDIV_DIV1


	)

585 
	#CMU_LCDCTRL_VBOOSTEN
 (1 << 3)

	)

587 
	#CMU_LCDCTRL_FDIV_SHIFT
 (0)

	)

588 
	#CMU_LCDCTRL_FDIV_MASK
 (0x3 << 
CMU_LCDCTRL_FDIV_SHIFT
)

	)

589 
	#CMU_LCDCTRL_FDIV
(
v
) \

590 (((
v
Ë& 
CMU_LCDCTRL_FDIV_MASK
Ë<< 
CMU_LCDCTRL_FDIV_SHIFT
)

	)

593 
	#CMU_ROUTE_LOCATION_SHIFT
 (2)

	)

594 
	#CMU_ROUTE_LOCATION_MASK
 (0x7 << 
CMU_ROUTE_LOCATION_SHIFT
)

	)

595 
	#CMU_ROUTE_LOCATION_LOCx
(
i
) \

596 (((
i
Ë<< 
CMU_ROUTE_LOCATION_SHIFT
Ë& 
CMU_ROUTE_LOCATION_MASK
)

	)

597 
	#CMU_ROUTE_LOCATION_LOC0
 0

	)

598 
	#CMU_ROUTE_LOCATION_LOC1
 1

	)

599 
	#CMU_ROUTE_LOCATION_LOC2
 2

	)

601 
	#CMU_ROUTE_CLKOUT1PEN
 (1 << 1)

	)

602 
	#CMU_ROUTE_CLKOUT0PEN
 (1 << 0)

	)

605 
	#CMU_LOCK_LOCKKEY_SHIFT
 (0)

	)

606 
	#CMU_LOCK_LOCKKEY_MASK
 (0xFFFF << 
CMU_LOCK_LOCKKEY_SHIFT
)

	)

607 
	#CMU_LOCK_LOCKKEY_UNLOCKED
 (0x0000 << 
CMU_LOCK_LOCKKEY_SHIFT
)

	)

608 
	#CMU_LOCK_LOCKKEY_LOCKED
 (0x0001 << 
CMU_LOCK_LOCKKEY_SHIFT
)

	)

609 
	#CMU_LOCK_LOCKKEY_LOCK
 (0x0000 << 
CMU_LOCK_LOCKKEY_SHIFT
)

	)

610 
	#CMU_LOCK_LOCKKEY_UNLOCK
 (0x580E << 
CMU_LOCK_LOCKKEY_SHIFT
)

	)

612 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

614 
	ecmu_≥rùh_˛kí
 {

616 
	mCMU_PCNT2
 = 
_REG_BIT
(0x078, 4),

617 
	mCMU_PCNT1
 = 
_REG_BIT
(0x078, 2),

618 
	mCMU_PCNT0
 = 
_REG_BIT
(0x078, 0),

621 
	mCMU_LEUART1
 = 
_REG_BIT
(0x060, 1),

622 
	mCMU_LEUART0
 = 
_REG_BIT
(0x060, 0),

625 
	mCMU_LCD
 = 
_REG_BIT
(0x058, 3),

626 
	mCMU_LETIMER0
 = 
_REG_BIT
(0x058, 2),

627 
	mCMU_RTC
 = 
_REG_BIT
(0x058, 1),

628 
	mCMU_LESENSE
 = 
_REG_BIT
(0x058, 0),

631 
	mCMU_DAC0
 = 
_REG_BIT
(0x044, 17),

632 
	mCMU_ADC0
 = 
_REG_BIT
(0x044, 16),

633 
	mCMU_PRS
 = 
_REG_BIT
(0x044, 15),

634 
	mCMU_VCMP
 = 
_REG_BIT
(0x044, 14),

635 
	mCMU_GPIO
 = 
_REG_BIT
(0x044, 13),

636 
	mCMU_I2C1
 = 
_REG_BIT
(0x044, 12),

637 
	mCMU_I2C0
 = 
_REG_BIT
(0x044, 11),

638 
	mCMU_ACMP1
 = 
_REG_BIT
(0x044, 10),

639 
	mCMU_ACMP0
 = 
_REG_BIT
(0x044, 9),

640 
	mCMU_TIMER3
 = 
_REG_BIT
(0x044, 8),

641 
	mCMU_TIMER2
 = 
_REG_BIT
(0x044, 7),

642 
	mCMU_TIMER1
 = 
_REG_BIT
(0x044, 6),

643 
	mCMU_TIMER0
 = 
_REG_BIT
(0x044, 5),

644 
	mCMU_UART1
 = 
_REG_BIT
(0x044, 4),

645 
	mCMU_UART0
 = 
_REG_BIT
(0x044, 3),

646 
	mCMU_USART2
 = 
_REG_BIT
(0x044, 2),

647 
	mCMU_USART1
 = 
_REG_BIT
(0x044, 1),

648 
	mCMU_USART0
 = 
_REG_BIT
(0x044, 0),

651 
	mCMU_EBI
 = 
_REG_BIT
(0x040, 5),

652 
	mCMU_LE
 = 
_REG_BIT
(0x040, 4),

653 
	mCMU_USB
 = 
_REG_BIT
(0x040, 3),

654 
	mCMU_USBC
 = 
_REG_BIT
(0x040, 2),

655 
	mCMU_AES
 = 
_REG_BIT
(0x040, 1),

656 
	mCMU_DMA
 = 
_REG_BIT
(0x040, 0)

659 
	ecmu_osc
 {

660 
	mHFRCO
,

661 
	mLFRCO
,

662 
	mULFRCO
,

663 
	mHFXO
,

664 
	mLFXO
,

665 
	mAUXHFRCO
,

670 
BEGIN_DECLS


672 
cmu_íabÀ_lock
();

673 
cmu_dißbÀ_lock
();

674 
boﬁ
 
cmu_gë_lock_Êag
();

676 
cmu_≥rùh_˛ock_íabÀ
(
cmu_≥rùh_˛kí
 
≥rùh
);

677 
cmu_≥rùh_˛ock_dißbÀ
(
cmu_≥rùh_˛kí
 
≥rùh
);

682 
cmu_osc_⁄
(
cmu_osc
 
osc
);

683 
cmu_osc_off
(
cmu_osc
 
osc
);

688 
boﬁ
 
cmu_osc_ªady_Êag
(
cmu_osc
 
osc
);

689 
cmu_waô_f‹_osc_ªady
(
cmu_osc
 
osc
);

690 
cmu_£t_hf˛k_sour˚
(
cmu_osc
 
osc
);

691 
cmu_£t_usb˛k_sour˚
(
cmu_osc
 
osc
);

692 
cmu_osc
 
cmu_gë_hf˛k_sour˚
();

700 
cmu_˛ock_£tup_ö_hfxo_out_48mhz
();

702 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/common/dac_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_DAC_H


21 
	#LIBOPENCM3_EFM32_DAC_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

25 
	~<lib›ícm3/efm32/¥s.h
>

27 
	#DAC_CTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x00)

	)

28 
	#DAC_STATUS
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x04)

	)

29 
	#DAC_CHx_CTRL
(
ba£
, 
x
Ë
	`MMIO32
((ba£Ë+ 0x08 + (0x04 * (x)))

	)

30 
	#DAC_CH0CTRL
(
ba£
Ë
	`DAC_CHx_CTRL
(ba£, 0)

	)

31 
	#DAC_CH1CTRL
(
ba£
Ë
	`DAC_CHx_CTRL
(ba£, 1)

	)

32 
	#DAC_IEN
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x010)

	)

33 
	#DAC_IF
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x014)

	)

34 
	#DAC_IFS
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x018)

	)

35 
	#DAC_IFC
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x01C)

	)

36 
	#DAC_CH0DATA
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x020)

	)

37 
	#DAC_CH1DATA
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x024)

	)

38 
	#DAC_COMBDATA
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x028)

	)

39 
	#DAC_CAL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x02C)

	)

40 
	#DAC_BIASPROG
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x030)

	)

41 
	#DAC_OPACTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x054)

	)

42 
	#DAC_OPAOFFSET
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x058)

	)

43 
	#DAC_OPA0MUX
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x05C)

	)

44 
	#DAC_OPA1MUX
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x060)

	)

45 
	#DAC_OPA2MUX
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x064)

	)

48 
	#DAC_CTRL_REFRSEL_SHIFT
 (20)

	)

49 
	#DAC_CTRL_REFRSEL_MASK
 (0x3 << 
DAC_CTRL_REFRSEL_SHIFT
)

	)

50 
	#DAC_CTRL_REFRSEL
(
v
) \

51 (((
v
Ë<< 
DAC_CTRL_REFRSEL_SHIFT
Ë& 
DAC_CTRL_REFRSEL_MASK
)

	)

52 
	#DAC_CTRL_REFRSEL_8CYCLES
 0

	)

53 
	#DAC_CTRL_REFRSEL_16CYCLES
 1

	)

54 
	#DAC_CTRL_REFRSEL_32CYCLES
 2

	)

55 
	#DAC_CTRL_REFRSEL_64CYCLES
 3

	)

57 
	#DAC_CTRL_PRESC_SHIFT
 (16)

	)

58 
	#DAC_CTRL_PRESC_MASK
 (0x7 << 
DAC_CTRL_PRESC_SHIFT
)

	)

59 
	#DAC_CTRL_PRESC
(
v
) \

60 (((
v
Ë<< 
DAC_CTRL_PRESC_SHIFT
Ë& 
DAC_CTRL_PRESC_MASK
)

	)

61 
	#DAC_CTRL_PRESC_DIV1
 0

	)

62 
	#DAC_CTRL_PRESC_DIV2
 1

	)

63 
	#DAC_CTRL_PRESC_DIV4
 2

	)

64 
	#DAC_CTRL_PRESC_DIV8
 3

	)

65 
	#DAC_CTRL_PRESC_DIV16
 4

	)

66 
	#DAC_CTRL_PRESC_DIV32
 5

	)

67 
	#DAC_CTRL_PRESC_DIV64
 6

	)

68 
	#DAC_CTRL_PRESC_DIV128
 7

	)

69 
	#DAC_CTRL_PRESC_NODIV
 
DAC_CTRL_PRESC_DIV1


	)

71 
	#DAC_CTRL_REFSEL_SHIFT
 (8)

	)

72 
	#DAC_CTRL_REFSEL_MASK
 (0x3 << 
DAC_CTRL_REFSEL_SHIFT
)

	)

73 
	#DAC_CTRL_REFSEL
(
v
) \

74 (((
v
Ë<< 
DAC_CTRL_REFSEL_SHIFT
Ë& 
DAC_CTRL_REFSEL_MASK
)

	)

75 
	#DAC_CTRL_REFSEL_1V25
 0

	)

76 
	#DAC_CTRL_REFSEL_2V5
 1

	)

77 
	#DAC_CTRL_REFSEL_VDD
 2

	)

79 
	#DAC_CTRL_CH0PRESCRST
 (1 << 7)

	)

80 
	#DAC_CTRL_OUTENPRS
 (1 << 6)

	)

82 
	#DAC_CTRL_OUTMODE_SHIFT
 (4)

	)

83 
	#DAC_CTRL_OUTMODE_MASK
 (0x3 << 
DAC_CTRL_OUTMODE_SHIFT
)

	)

84 
	#DAC_CTRL_OUTMODE
(
v
) \

85 (((
v
Ë<< 
DAC_CTRL_OUTMODE_SHIFT
Ë& 
DAC_CTRL_OUTMODE_MASK
)

	)

86 
	#DAC_CTRL_OUTMODE_DISABLE
 0

	)

87 
	#DAC_CTRL_OUTMODE_PIN
 1

	)

88 
	#DAC_CTRL_OUTMODE_ADC
 2

	)

89 
	#DAC_CTRL_OUTMODE_PINADC
 3

	)

91 
	#DAC_CTRL_CONVMODE_SHIFT
 (2)

	)

92 
	#DAC_CTRL_CONVMODE_MASK
 (0x3 << 
DAC_CTRL_CONVMODE_SHIFT
)

	)

93 
	#DAC_CTRL_CONVMODE
(
v
) \

94 (((
v
Ë<< 
DAC_CTRL_CONVMODE_SHIFT
Ë& 
DAC_CTRL_CONVMODE_MASK
)

	)

95 
	#DAC_CTRL_CONVMODE_CONTINUOUS
 0

	)

96 
	#DAC_CTRL_CONVMODE_SAMPLEHOLD
 1

	)

97 
	#DAC_CTRL_CONVMODE_SAMPLEOFF
 2

	)

99 
	#DAC_CTRL_SINMODE
 (1 << 1)

	)

100 
	#DAC_CTRL_DIFF
 (1 << 0)

	)

103 
	#DAC_STATUS_CH1DV
 (1 << 1)

	)

104 
	#DAC_STATUS_CH0DV
 (1 << 0)

	)

107 
	#DAC_CH_CTRL_PRSSEL_SHIFT
 (4)

	)

108 
	#DAC_CH_CTRL_PRSSEL_MASK
 (0xF << 
DAC_CH_CTRL_PRSSEL_SHIFT
)

	)

109 
	#DAC_CH_CTRL_PRSSEL
(
v
) \

110 (((
v
Ë<< 
DAC_CH_CTRL_PRSSEL_SHIFT
Ë& 
DAC_CH_CTRL_PRSSEL_MASK
)

	)

111 
	#DAC_CH_CTRL_PRSSEL_PRSCHx
(
x
Ë
	`DAC_CH_CTRL_PRSSEL
(x)

	)

112 
	#DAC_CH_CTRL_PRSSEL_PRSCH0
 0

	)

113 
	#DAC_CH_CTRL_PRSSEL_PRSCH1
 1

	)

114 
	#DAC_CH_CTRL_PRSSEL_PRSCH2
 2

	)

115 
	#DAC_CH_CTRL_PRSSEL_PRSCH3
 3

	)

116 
	#DAC_CH_CTRL_PRSSEL_PRSCH4
 4

	)

117 
	#DAC_CH_CTRL_PRSSEL_PRSCH5
 5

	)

118 
	#DAC_CH_CTRL_PRSSEL_PRSCH6
 6

	)

119 
	#DAC_CH_CTRL_PRSSEL_PRSCH7
 7

	)

120 
	#DAC_CH_CTRL_PRSSEL_PRSCH8
 8

	)

121 
	#DAC_CH_CTRL_PRSSEL_PRSCH9
 9

	)

122 
	#DAC_CH_CTRL_PRSSEL_PRSCH10
 10

	)

123 
	#DAC_CH_CTRL_PRSSEL_PRSCH11
 11

	)

125 
	#DAC_CH_CTRL_PRSEN
 (1 << 2)

	)

126 
	#DAC_CH_CTRL_REFREN
 (1 << 1)

	)

127 
	#DAC_CH_CTRL_EN
 (1 << 0)

	)

130 
	#DAC_CH0CTRL_PRSSEL_SHIFT
 
DAC_CH_CTRL_PRSSEL_SHIFT


	)

131 
	#DAC_CH0CTRL_PRSSEL_MASK
 
DAC_CH_CTRL_PRSSEL_MASK


	)

132 
	#DAC_CH0CTRL_PRSSEL
(
v
Ë
	`DAC_CH_CTRL_PRSSEL
(v)

	)

133 
	#DAC_CH0CTRL_PRSSEL_PRSCHx
(
x
Ë
	`DAC_CH_CTRL_PRSSEL_PRSCHx
(x)

	)

134 
	#DAC_CH0CTRL_PRSSEL_PRSCH0
 
DAC_CH0CTRL_PRSSEL_PRSCH0


	)

135 
	#DAC_CH0CTRL_PRSSEL_PRSCH1
 
DAC_CH_CTRL_PRSSEL_PRSCH1


	)

136 
	#DAC_CH0CTRL_PRSSEL_PRSCH2
 
DAC_CH_CTRL_PRSSEL_PRSCH2


	)

137 
	#DAC_CH0CTRL_PRSSEL_PRSCH3
 
DAC_CH_CTRL_PRSSEL_PRSCH3


	)

138 
	#DAC_CH0CTRL_PRSSEL_PRSCH4
 
DAC_CH_CTRL_PRSSEL_PRSCH4


	)

139 
	#DAC_CH0CTRL_PRSSEL_PRSCH5
 
DAC_CH_CTRL_PRSSEL_PRSCH5


	)

140 
	#DAC_CH0CTRL_PRSSEL_PRSCH6
 
DAC_CH_CTRL_PRSSEL_PRSCH6


	)

141 
	#DAC_CH0CTRL_PRSSEL_PRSCH7
 
DAC_CH_CTRL_PRSSEL_PRSCH7


	)

142 
	#DAC_CH0CTRL_PRSSEL_PRSCH8
 
DAC_CH_CTRL_PRSSEL_PRSCH8


	)

143 
	#DAC_CH0CTRL_PRSSEL_PRSCH9
 
DAC_CH_CTRL_PRSSEL_PRSCH9


	)

144 
	#DAC_CH0CTRL_PRSSEL_PRSCH10
 
DAC_CH_CTRL_PRSSEL_PRSCH10


	)

145 
	#DAC_CH0CTRL_PRSSEL_PRSCH11
 
DAC_CH_CTRL_PRSSEL_PRSCH11


	)

147 
	#DAC_CH0CTRL_PRSEN
 
DAC_CH_CTRL_PRSEN


	)

148 
	#DAC_CH0CTRL_REFREN
 
DAC_CH_CTRL_REFREN


	)

149 
	#DAC_CH0CTRL_EN
 
DAC_CH_CTRL_EN


	)

152 
	#DAC_CH1CTRL_PRSSEL_SHIFT
 
DAC_CH_CTRL_PRSSEL_SHIFT


	)

153 
	#DAC_CH1CTRL_PRSSEL_MASK
 
DAC_CH_CTRL_PRSSEL_MASK


	)

154 
	#DAC_CH1CTRL_PRSSEL
(
v
Ë
	`DAC_CH_CTRL_PRSSEL
(v)

	)

155 
	#DAC_CH1CTRL_PRSSEL_PRSCHx
(
x
Ë
	`DAC_CH_CTRL_PRSSEL_PRSCHx
(x)

	)

156 
	#DAC_CH1CTRL_PRSSEL_PRSCH0
 
DAC_CH_CTRL_PRSSEL_PRSCH0


	)

157 
	#DAC_CH1CTRL_PRSSEL_PRSCH1
 
DAC_CH_CTRL_PRSSEL_PRSCH1


	)

158 
	#DAC_CH1CTRL_PRSSEL_PRSCH2
 
DAC_CH_CTRL_PRSSEL_PRSCH2


	)

159 
	#DAC_CH1CTRL_PRSSEL_PRSCH3
 
DAC_CH_CTRL_PRSSEL_PRSCH3


	)

160 
	#DAC_CH1CTRL_PRSSEL_PRSCH4
 
DAC_CH_CTRL_PRSSEL_PRSCH4


	)

161 
	#DAC_CH1CTRL_PRSSEL_PRSCH5
 
DAC_CH_CTRL_PRSSEL_PRSCH5


	)

162 
	#DAC_CH1CTRL_PRSSEL_PRSCH6
 
DAC_CH_CTRL_PRSSEL_PRSCH6


	)

163 
	#DAC_CH1CTRL_PRSSEL_PRSCH7
 
DAC_CH_CTRL_PRSSEL_PRSCH7


	)

164 
	#DAC_CH1CTRL_PRSSEL_PRSCH8
 
DAC_CH_CTRL_PRSSEL_PRSCH8


	)

165 
	#DAC_CH1CTRL_PRSSEL_PRSCH9
 
DAC_CH_CTRL_PRSSEL_PRSCH9


	)

166 
	#DAC_CH1CTRL_PRSSEL_PRSCH10
 
DAC_CH_CTRL_PRSSEL_PRSCH10


	)

167 
	#DAC_CH1CTRL_PRSSEL_PRSCH11
 
DAC_CH_CTRL_PRSSEL_PRSCH11


	)

169 
	#DAC_CH1CTRL_PRSEN
 
DAC_CH_CTRL_PRSEN


	)

170 
	#DAC_CH1CTRL_REFREN
 
DAC_CH_CTRL_REFREN


	)

171 
	#DAC_CH1CTRL_EN
 
DAC_CH_CTRL_EN


	)

174 
	#DAC_IEN_CH1UF
 (5 << 0)

	)

175 
	#DAC_IEN_CH0UF
 (4 << 0)

	)

176 
	#DAC_IEN_CH1
 (1 << 1)

	)

177 
	#DAC_IEN_CH0
 (1 << 0)

	)

180 
	#DAC_IF_CH1UF
 (5 << 0)

	)

181 
	#DAC_IF_CH0UF
 (4 << 0)

	)

182 
	#DAC_IF_CH1
 (1 << 1)

	)

183 
	#DAC_IF_CH0
 (1 << 0)

	)

186 
	#DAC_IFS_CH1UF
 (5 << 0)

	)

187 
	#DAC_IFS_CH0UF
 (4 << 0)

	)

188 
	#DAC_IFS_CH1
 (1 << 1)

	)

189 
	#DAC_IFS_CH0
 (1 << 0)

	)

192 
	#DAC_IFC_CH1UF
 (5 << 0)

	)

193 
	#DAC_IFC_CH0UF
 (4 << 0)

	)

194 
	#DAC_IFC_CH1
 (1 << 1)

	)

195 
	#DAC_IFC_CH0
 (1 << 0)

	)

198 
	#DAC_CAL_GAIN_SHIFT
 (16)

	)

199 
	#DAC_CAL_GAIN_MASK
 (0x7F << 
DAC_CAL_GAIN_SHIFT
)

	)

200 
	#DAC_CAL_GAIN
(
v
) \

201 (((
v
Ë<< 
DAC_CAL_GAIN_SHIFT
Ë& 
DAC_CAL_GAIN_MASK
)

	)

203 
	#DAC_CAL_CH1OFFSET_SHIFT
 (8)

	)

204 
	#DAC_CAL_CH1OFFSET_MASK
 (0x3F << 
DAC_CAL_CH1OFFSET_SHIFT
)

	)

205 
	#DAC_CAL_CH1OFFSET
(
v
) \

206 (((
v
Ë<< 
DAC_CAL_CH1OFFSET_SHIFT
Ë& 
DAC_CAL_CH1OFFSET_MASK
)

	)

208 
	#DAC_CAL_CH0OFFSET_SHIFT
 (0)

	)

209 
	#DAC_CAL_CH0OFFSET_MASK
 (0x3F << 
DAC_CAL_CH0OFFSET_SHIFT
)

	)

210 
	#DAC_CAL_CH0OFFSET
(
v
) \

211 (((
v
Ë<< 
DAC_CAL_CH0OFFSET_SHIFT
Ë& 
DAC_CAL_CH0OFFSET_MASK
)

	)

214 
	#DAC_BIASPROG_OPA2HALFBIAS
 (1 << 14)

	)

216 
	#DAC_BIASPROG_OPA2BIASPROG_SHIFT
 (8)

	)

217 
	#DAC_BIASPROG_OPA2BIASPROG_MASK
 (0xF << 
DAC_BIASPROG_OPA2BIASPROG_SHIFT
)

	)

218 
	#DAC_BIASPROG_OPA2BIASPROG
(
v
) \

219 ((((
v
Ë<< 
DAC_BIASPROG_OPA2BIASPROG_SHIFT
)) & \

220 
DAC_BIASPROG_OPA2BIASPROG_MASK
)

	)

222 
	#DAC_BIASPROG_HALFBIAS
 (1 << 6)

	)

224 
	#DAC_BIASPROG_BIASPROG_SHIFT
 (0)

	)

225 
	#DAC_BIASPROG_BIASPROG_MASK
 (0xF << 
DAC_BIASPROG_BIASPROG_SHIFT
)

	)

226 
	#DAC_BIASPROG_BIASPROG
(
v
) \

227 ((((
v
Ë<< 
DAC_BIASPROG_BIASPROG_SHIFT
)Ë& 
DAC_BIASPROG_BIASPROG_MASK
)

	)

230 
	#DAC_OPACTRL_OPA2SHORT
 (1 << 24)

	)

231 
	#DAC_OPACTRL_OPA1SHORT
 (1 << 23)

	)

232 
	#DAC_OPACTRL_OPA0SHORT
 (1 << 22)

	)

234 
	#DAC_OPACTRL_OPA2LPFDIS_SHIFT
 (16)

	)

235 
	#DAC_OPACTRL_OPA2LPFDIS_MASK
 (0x3 << 
DAC_OPACTRL_OPA2LPFDIS_SHIFT
)

	)

236 
	#DAC_OPACTRL_OPA2LPFDIS
(
v
) \

237 (((
v
Ë<< 
DAC_OPACTRL_OPA2LPFDIS_SHIFT
Ë& 
DAC_OPACTRL_OPA2LPFDIS_MASK
)

	)

238 
	#DAC_OPACTRL_OPA2LPFDIS_PLPFDIS
 0b01

	)

239 
	#DAC_OPACTRL_OPA2LPFDIS_NLPFDIS
 0b10

	)

241 
	#DAC_OPACTRL_OPA1LPFDIS_SHIFT
 (14)

	)

242 
	#DAC_OPACTRL_OPA1LPFDIS_MASK
 (0x3 << 
DAC_OPACTRL_OPA1LPFDIS_SHIFT
)

	)

243 
	#DAC_OPACTRL_OPA1LPFDIS
(
v
) \

244 (((
v
Ë<< 
DAC_OPACTRL_OPA1LPFDIS_SHIFT
Ë& 
DAC_OPACTRL_OPA1LPFDIS_MASK
)

	)

245 
	#DAC_OPACTRL_OPA1LPFDIS_PLPFDIS
 0b01

	)

246 
	#DAC_OPACTRL_OPA1LPFDIS_NLPFDIS
 0b10

	)

248 
	#DAC_OPACTRL_OPA0LPFDIS_SHIFT
 (14)

	)

249 
	#DAC_OPACTRL_OPA0LPFDIS_MASK
 (0x3 << 
DAC_OPACTRL_OPA0LPFDIS_SHIFT
)

	)

250 
	#DAC_OPACTRL_OPA0LPFDIS
(
v
) \

251 (((
v
Ë<< 
DAC_OPACTRL_OPA0LPFDIS_SHIFT
Ë& 
DAC_OPACTRL_OPA0LPFDIS_MASK
)

	)

252 
	#DAC_OPACTRL_OPA0LPFDIS_PLPFDIS
 0b01

	)

253 
	#DAC_OPACTRL_OPA0LPFDIS_NLPFDIS
 0b10

	)

255 
	#DAC_OPACTRL_OPA2HCMDIS
 (1 << 8)

	)

256 
	#DAC_OPACTRL_OPA1HCMDIS
 (1 << 7)

	)

257 
	#DAC_OPACTRL_OPA0HCMDIS
 (1 << 6)

	)

259 
	#DAC_OPACTRL_OPA2EN
 (1 << 2)

	)

260 
	#DAC_OPACTRL_OPA1EN
 (1 << 1)

	)

261 
	#DAC_OPACTRL_OPA0EN
 (1 << 0)

	)

264 
	#DAC_OPA0MUX_RESSEL_SHIFT
 (28)

	)

265 
	#DAC_OPA0MUX_RESSEL_MASK
 (0x7 << 
DAC_OPA0MUX_RESSEL_SHIFT
)

	)

266 
	#DAC_OPA0MUX_RESSEL_RESSEL
(
v
) \

267 ((((
v
Ë<< 
DAC_OPA0MUX_RESSEL_SHIFT
)Ë& 
DAC_OPA0MUX_RESSEL_MASK
)

	)

268 
	#DAC_OPA0MUX_RESSEL_RESSEL_RESx
(
x
Ë
	`DAC_OPA0MUX_RESSEL_RESSEL
(x)

	)

269 
	#DAC_OPA0MUX_RESSEL_RESSEL_RES0
 
	`DAC_OPA0MUX_RESSEL_RESSEL_RESx
(0)

	)

270 
	#DAC_OPA0MUX_RESSEL_RESSEL_RES1
 
	`DAC_OPA0MUX_RESSEL_RESSEL_RESx
(1)

	)

271 
	#DAC_OPA0MUX_RESSEL_RESSEL_RES2
 
	`DAC_OPA0MUX_RESSEL_RESSEL_RESx
(2)

	)

272 
	#DAC_OPA0MUX_RESSEL_RESSEL_RES3
 
	`DAC_OPA0MUX_RESSEL_RESSEL_RESx
(3)

	)

273 
	#DAC_OPA0MUX_RESSEL_RESSEL_RES4
 
	`DAC_OPA0MUX_RESSEL_RESSEL_RESx
(4)

	)

274 
	#DAC_OPA0MUX_RESSEL_RESSEL_RES5
 
	`DAC_OPA0MUX_RESSEL_RESSEL_RESx
(5)

	)

275 
	#DAC_OPA0MUX_RESSEL_RESSEL_RES6
 
	`DAC_OPA0MUX_RESSEL_RESSEL_RESx
(6)

	)

276 
	#DAC_OPA0MUX_RESSEL_RESSEL_RES7
 
	`DAC_OPA0MUX_RESSEL_RESSEL_RESx
(7)

	)

278 
	#DAC_OPA0MUX_NEXTOUT
 (1 << 26)

	)

280 
	#DAC_OPA0MUX_OUTMODE_SHIFT
 (22)

	)

281 
	#DAC_OPA0MUX_OUTMODE_MASK
 (0x3 << 
DAC_OPA0MUX_OUTMODE_SHIFT
)

	)

282 
	#DAC_OPA0MUX_OUTMODE
(
v
) \

283 (((
v
Ë<< 
DAC_OPA0MUX_OUTMODE_SHIFT
Ë& 
DAC_OPA0MUX_OUTMODE_MASK
)

	)

284 
	#DAC_OPA0MUX_OUTMODE_DISABLE
 0

	)

285 
	#DAC_OPA0MUX_OUTMODE_MAIN
 1

	)

286 
	#DAC_OPA0MUX_OUTMODE_ALT
 2

	)

287 
	#DAC_OPA0MUX_OUTMODE_ALL
 3

	)

289 
	#DAC_OPA0MUX_OUTPEN_SHIFT
 (18)

	)

290 
	#DAC_OPA0MUX_OUTPEN_MASK
 (0x1F << 
DAC_OPA0MUX_OUTPEN_SHIFT
)

	)

291 
	#DAC_OPA0MUX_OUTPEN
(
v
) \

292 (((
v
Ë<< 
DAC_OPA0MUX_OUTPEN_SHIFT
Ë& 
DAC_OPA0MUX_OUTPEN_MASK
)

	)

293 
	#DAC_OPA0MUX_OUTPEN_OUT0
 
	`DAC_OPA0MUX_OUTPEN
(1 << 0)

	)

294 
	#DAC_OPA0MUX_OUTPEN_OUT1
 
	`DAC_OPA0MUX_OUTPEN
(1 << 1)

	)

295 
	#DAC_OPA0MUX_OUTPEN_OUT2
 
	`DAC_OPA0MUX_OUTPEN
(1 << 2)

	)

296 
	#DAC_OPA0MUX_OUTPEN_OUT3
 
	`DAC_OPA0MUX_OUTPEN
(1 << 3)

	)

297 
	#DAC_OPA0MUX_OUTPEN_OUT4
 
	`DAC_OPA0MUX_OUTPEN
(1 << 4)

	)

299 
	#DAC_OPA0MUX_NPEN
 (1 << 13)

	)

300 
	#DAC_OPA0MUX_PPEN
 (1 << 12)

	)

302 
	#DAC_OPA0MUX_RESINMUX_SHIFT
 (8)

	)

303 
	#DAC_OPA0MUX_RESINMUX_MASK
 (0x7 << 
DAC_OPA0MUX_RESINMUX_SHIFT
)

	)

304 
	#DAC_OPA0MUX_RESINMUX
(
v
) \

305 (((
v
Ë<< 
DAC_OPA0MUX_RESINMUX_SHIFT
Ë& 
DAC_OPA0MUX_RESINMUX_MASK
)

	)

306 
	#DAC_OPA0MUX_RESINMUX_DISABLE
 0

	)

307 
	#DAC_OPA0MUX_RESINMUX_OPA0INP
 1

	)

308 
	#DAC_OPA0MUX_RESINMUX_NEGPAD
 2

	)

309 
	#DAC_OPA0MUX_RESINMUX_POSPAD
 3

	)

310 
	#DAC_OPA0MUX_RESINMUX_VSS
 4

	)

312 
	#DAC_OPA0MUX_NEGSEL_SHIFT
 (4)

	)

313 
	#DAC_OPA0MUX_NEGSEL_MASK
 (0x3 << 
DAC_OPA0MUX_NEGSEL_SHIFT
)

	)

314 
	#DAC_OPA0MUX_NEGSEL
(
v
) \

315 (((
v
Ë<< 
DAC_OPA0MUX_NEGSEL_SHIFT
Ë& 
DAC_OPA0MUX_NEGSEL_MASK
)

	)

316 
	#DAC_OPA0MUX_NEGSEL_DISABLE
 0

	)

317 
	#DAC_OPA0MUX_NEGSEL_UG
 1

	)

318 
	#DAC_OPA0MUX_NEGSEL_OPATAP
 2

	)

319 
	#DAC_OPA0MUX_NEGSEL_NEGPAD
 3

	)

321 
	#DAC_OPA0MUX_POSSEL_SHIFT
 (0)

	)

322 
	#DAC_OPA0MUX_POSSEL_MASK
 (0x7 << 
DAC_OPA0MUX_POSSEL_SHIFT
)

	)

323 
	#DAC_OPA0MUX_POSSEL
(
v
) \

324 (((
v
Ë<< 
DAC_OPA0MUX_POSSEL_SHIFT
Ë& 
DAC_OPA0MUX_POSSEL_MASK
)

	)

325 
	#DAC_OPA0MUX_POSSEL_DISABLE
 0

	)

326 
	#DAC_OPA0MUX_POSSEL_DAC
 1

	)

327 
	#DAC_OPA0MUX_POSSEL_POSPAD
 2

	)

328 
	#DAC_OPA0MUX_POSSEL_OPA0INP
 3

	)

329 
	#DAC_OPA0MUX_POSSEL_OPATAP
 4

	)

332 
	#DAC_OPA1MUX_RESSEL_SHIFT
 (28)

	)

333 
	#DAC_OPA1MUX_RESSEL_MASK
 (0x7 << 
DAC_OPA1MUX_RESSEL_SHIFT
)

	)

334 
	#DAC_OPA1MUX_RESSEL_RESSEL
(
v
) \

335 ((((
v
Ë<< 
DAC_OPA1MUX_RESSEL_SHIFT
)Ë& 
DAC_OPA1MUX_RESSEL_MASK
)

	)

336 
	#DAC_OPA1MUX_RESSEL_RESSEL_RESx
(
x
Ë
	`DAC_OPA1MUX_RESSEL_RESSEL
(x)

	)

337 
	#DAC_OPA1MUX_RESSEL_RESSEL_RES0
 
	`DAC_OPA1MUX_RESSEL_RESSEL_RESx
(0)

	)

338 
	#DAC_OPA1MUX_RESSEL_RESSEL_RES1
 
	`DAC_OPA1MUX_RESSEL_RESSEL_RESx
(1)

	)

339 
	#DAC_OPA1MUX_RESSEL_RESSEL_RES2
 
	`DAC_OPA1MUX_RESSEL_RESSEL_RESx
(2)

	)

340 
	#DAC_OPA1MUX_RESSEL_RESSEL_RES3
 
	`DAC_OPA1MUX_RESSEL_RESSEL_RESx
(3)

	)

341 
	#DAC_OPA1MUX_RESSEL_RESSEL_RES4
 
	`DAC_OPA1MUX_RESSEL_RESSEL_RESx
(4)

	)

342 
	#DAC_OPA1MUX_RESSEL_RESSEL_RES5
 
	`DAC_OPA1MUX_RESSEL_RESSEL_RESx
(5)

	)

343 
	#DAC_OPA1MUX_RESSEL_RESSEL_RES6
 
	`DAC_OPA1MUX_RESSEL_RESSEL_RESx
(6)

	)

344 
	#DAC_OPA1MUX_RESSEL_RESSEL_RES7
 
	`DAC_OPA1MUX_RESSEL_RESSEL_RESx
(7)

	)

346 
	#DAC_OPA1MUX_NEXTOUT
 (1 << 26)

	)

348 
	#DAC_OPA1MUX_OUTMODE_SHIFT
 (22)

	)

349 
	#DAC_OPA1MUX_OUTMODE_MASK
 (0x3 << 
DAC_OPA1MUX_OUTMODE_SHIFT
)

	)

350 
	#DAC_OPA1MUX_OUTMODE
(
v
) \

351 (((
v
Ë<< 
DAC_OPA1MUX_OUTMODE_SHIFT
Ë& 
DAC_OPA1MUX_OUTMODE_MASK
)

	)

352 
	#DAC_OPA1MUX_OUTMODE_DISABLE
 0

	)

353 
	#DAC_OPA1MUX_OUTMODE_MAIN
 1

	)

354 
	#DAC_OPA1MUX_OUTMODE_ALT
 2

	)

355 
	#DAC_OPA1MUX_OUTMODE_ALL
 3

	)

357 
	#DAC_OPA1MUX_OUTPEN_SHIFT
 (18)

	)

358 
	#DAC_OPA1MUX_OUTPEN_MASK
 (0x1F << 
DAC_OPA1MUX_OUTPEN_SHIFT
)

	)

359 
	#DAC_OPA1MUX_OUTPEN
(
v
) \

360 (((
v
Ë<< 
DAC_OPA1MUX_OUTPEN_SHIFT
Ë& 
DAC_OPA1MUX_OUTPEN_MASK
)

	)

361 
	#DAC_OPA1MUX_OUTPEN_OUT0
 
	`DAC_OPA1MUX_OUTPEN
(1 << 0)

	)

362 
	#DAC_OPA1MUX_OUTPEN_OUT1
 
	`DAC_OPA1MUX_OUTPEN
(1 << 1)

	)

363 
	#DAC_OPA1MUX_OUTPEN_OUT2
 
	`DAC_OPA1MUX_OUTPEN
(1 << 2)

	)

364 
	#DAC_OPA1MUX_OUTPEN_OUT3
 
	`DAC_OPA1MUX_OUTPEN
(1 << 3)

	)

365 
	#DAC_OPA1MUX_OUTPEN_OUT4
 
	`DAC_OPA1MUX_OUTPEN
(1 << 4)

	)

367 
	#DAC_OPA1MUX_NPEN
 (1 << 13)

	)

368 
	#DAC_OPA1MUX_PPEN
 (1 << 12)

	)

370 
	#DAC_OPA1MUX_RESINMUX_SHIFT
 (8)

	)

371 
	#DAC_OPA1MUX_RESINMUX_MASK
 (0x7 << 
DAC_OPA1MUX_RESINMUX_SHIFT
)

	)

372 
	#DAC_OPA1MUX_RESINMUX
(
v
) \

373 (((
v
Ë<< 
DAC_OPA1MUX_RESINMUX_SHIFT
Ë& 
DAC_OPA1MUX_RESINMUX_MASK
)

	)

374 
	#DAC_OPA1MUX_RESINMUX_DISABLE
 0

	)

375 
	#DAC_OPA1MUX_RESINMUX_OPA0INP
 1

	)

376 
	#DAC_OPA1MUX_RESINMUX_NEGPAD
 2

	)

377 
	#DAC_OPA1MUX_RESINMUX_POSPAD
 3

	)

378 
	#DAC_OPA1MUX_RESINMUX_VSS
 4

	)

380 
	#DAC_OPA1MUX_NEGSEL_SHIFT
 (4)

	)

381 
	#DAC_OPA1MUX_NEGSEL_MASK
 (0x3 << 
DAC_OPA1MUX_NEGSEL_SHIFT
)

	)

382 
	#DAC_OPA1MUX_NEGSEL
(
v
) \

383 (((
v
Ë<< 
DAC_OPA1MUX_NEGSEL_SHIFT
Ë& 
DAC_OPA1MUX_NEGSEL_MASK
)

	)

384 
	#DAC_OPA1MUX_NEGSEL_DISABLE
 0

	)

385 
	#DAC_OPA1MUX_NEGSEL_UG
 1

	)

386 
	#DAC_OPA1MUX_NEGSEL_OPATAP
 2

	)

387 
	#DAC_OPA1MUX_NEGSEL_NEGPAD
 3

	)

389 
	#DAC_OPA1MUX_POSSEL_SHIFT
 (0)

	)

390 
	#DAC_OPA1MUX_POSSEL_MASK
 (0x7 << 
DAC_OPA1MUX_POSSEL_SHIFT
)

	)

391 
	#DAC_OPA1MUX_POSSEL
(
v
) \

392 (((
v
Ë<< 
DAC_OPA1MUX_POSSEL_SHIFT
Ë& 
DAC_OPA1MUX_POSSEL_MASK
)

	)

393 
	#DAC_OPA1MUX_POSSEL_DISABLE
 0

	)

394 
	#DAC_OPA1MUX_POSSEL_DAC
 1

	)

395 
	#DAC_OPA1MUX_POSSEL_POSPAD
 2

	)

396 
	#DAC_OPA1MUX_POSSEL_OPA0INP
 3

	)

397 
	#DAC_OPA1MUX_POSSEL_OPATAP
 4

	)

401 
	#DAC_OPA2MUX_RESSEL_SHIFT
 (28)

	)

402 
	#DAC_OPA2MUX_RESSEL_MASK
 (0x7 << 
DAC_OPA2MUX_RESSEL_SHIFT
)

	)

403 
	#DAC_OPA2MUX_RESSEL_RESSEL
(
v
) \

404 ((((
v
Ë<< 
DAC_OPA2MUX_RESSEL_SHIFT
)Ë& 
DAC_OPA2MUX_RESSEL_MASK
)

	)

405 
	#DAC_OPA2MUX_RESSEL_RESSEL_RESx
(
x
Ë
	`DAC_OPA2MUX_RESSEL_RESSEL
(x)

	)

406 
	#DAC_OPA2MUX_RESSEL_RESSEL_RES0
 
	`DAC_OPA2MUX_RESSEL_RESSEL_RESx
(0)

	)

407 
	#DAC_OPA2MUX_RESSEL_RESSEL_RES1
 
	`DAC_OPA2MUX_RESSEL_RESSEL_RESx
(1)

	)

408 
	#DAC_OPA2MUX_RESSEL_RESSEL_RES2
 
	`DAC_OPA2MUX_RESSEL_RESSEL_RESx
(2)

	)

409 
	#DAC_OPA2MUX_RESSEL_RESSEL_RES3
 
	`DAC_OPA2MUX_RESSEL_RESSEL_RESx
(3)

	)

410 
	#DAC_OPA2MUX_RESSEL_RESSEL_RES4
 
	`DAC_OPA2MUX_RESSEL_RESSEL_RESx
(4)

	)

411 
	#DAC_OPA2MUX_RESSEL_RESSEL_RES5
 
	`DAC_OPA2MUX_RESSEL_RESSEL_RESx
(5)

	)

412 
	#DAC_OPA2MUX_RESSEL_RESSEL_RES6
 
	`DAC_OPA2MUX_RESSEL_RESSEL_RESx
(6)

	)

413 
	#DAC_OPA2MUX_RESSEL_RESSEL_RES7
 
	`DAC_OPA2MUX_RESSEL_RESSEL_RESx
(7)

	)

415 
	#DAC_OPA2MUX_NEXTOUT
 (1 << 26)

	)

417 
	#DAC_OPA2MUX_OUTMODE
 (1 << 22)

	)

419 
	#DAC_OPA2MUX_OUTPEN_SHIFT
 (14)

	)

420 
	#DAC_OPA2MUX_OUTPEN_MASK
 (0x3 << 
DAC_OPA2MUX_OUTPEN_SHIFT
)

	)

421 
	#DAC_OPA2MUX_OUTPEN
(
v
) \

422 (((
v
Ë<< 
DAC_OPA2MUX_OUTPEN_SHIFT
Ë& 
DAC_OPA2MUX_OUTPEN_MASK
)

	)

423 
	#DAC_OPA2MUX_OUTPEN_OUT0
 0

	)

424 
	#DAC_OPA2MUX_OUTPEN_OUT1
 1

	)

426 
	#DAC_OPA2MUX_NPEN
 (1 << 13)

	)

427 
	#DAC_OPA2MUX_PPEN
 (1 << 12)

	)

429 
	#DAC_OPA2MUX_RESINMUX_SHIFT
 (8)

	)

430 
	#DAC_OPA2MUX_RESINMUX_MASK
 (0x7 << 
DAC_OPA2MUX_RESINMUX_SHIFT
)

	)

431 
	#DAC_OPA2MUX_RESINMUX
(
v
) \

432 (((
v
Ë<< 
DAC_OPA2MUX_RESINMUX_SHIFT
Ë& 
DAC_OPA2MUX_RESINMUX_MASK
)

	)

433 
	#DAC_OPA2MUX_RESINMUX_DISABLE
 0

	)

434 
	#DAC_OPA2MUX_RESINMUX_OPA1INP
 1

	)

435 
	#DAC_OPA2MUX_RESINMUX_NEGPAD
 2

	)

436 
	#DAC_OPA2MUX_RESINMUX_POSPAD
 3

	)

437 
	#DAC_OPA2MUX_RESINMUX_VSS
 4

	)

439 
	#DAC_OPA2MUX_NEGSEL_SHIFT
 (4)

	)

440 
	#DAC_OPA2MUX_NEGSEL_MASK
 (0x3 << 
DAC_OPA2MUX_NEGSEL_SHIFT
)

	)

441 
	#DAC_OPA2MUX_NEGSEL
(
v
) \

442 (((
v
Ë<< 
DAC_OPA2MUX_NEGSEL_SHIFT
Ë& 
DAC_OPA2MUX_NEGSEL_MASK
)

	)

443 
	#DAC_OPA2MUX_NEGSEL_DISABLE
 0

	)

444 
	#DAC_OPA2MUX_NEGSEL_UG
 1

	)

445 
	#DAC_OPA2MUX_NEGSEL_OPATAP
 2

	)

446 
	#DAC_OPA2MUX_NEGSEL_NEGPAD
 3

	)

448 
	#DAC_OPA2MUX_POSSEL_SHIFT
 (0)

	)

449 
	#DAC_OPA2MUX_POSSEL_MASK
 (0x7 << 
DAC_OPA2MUX_POSSEL_SHIFT
)

	)

450 
	#DAC_OPA2MUX_POSSEL
(
v
) \

451 (((
v
Ë<< 
DAC_OPA2MUX_POSSEL_SHIFT
Ë& 
DAC_OPA2MUX_POSSEL_MASK
)

	)

452 
	#DAC_OPA2MUX_POSSEL_DISABLE
 0

	)

453 
	#DAC_OPA2MUX_POSSEL_DAC
 1

	)

454 
	#DAC_OPA2MUX_POSSEL_POSPAD
 2

	)

455 
	#DAC_OPA2MUX_POSSEL_OPA1INP
 3

	)

456 
	#DAC_OPA2MUX_POSSEL_OPATAP
 4

	)

459 
	#DAC0
 
DAC0_BASE


	)

460 
	#DAC0_CTRL
 
	`DAC_CTRL
(
DAC0
)

	)

461 
	#DAC0_STATUS
 
	`DAC_STATUS
(
DAC0
)

	)

462 
	#DAC0_CH0CTRL
 
	`DAC_CH0CTRL
(
DAC0
)

	)

463 
	#DAC0_CH1CTRL
 
	`DAC_CH1CTRL
(
DAC0
)

	)

464 
	#DAC0_IEN
 
	`DAC_IEN
(
DAC0
)

	)

465 
	#DAC0_IF
 
	`DAC_IF
(
DAC0
)

	)

466 
	#DAC0_IFS
 
	`DAC_IFS
(
DAC0
)

	)

467 
	#DAC0_IFC
 
	`DAC_IFC
(
DAC0
)

	)

468 
	#DAC0_CH0DATA
 
	`DAC_CH0DATA
(
DAC0
)

	)

469 
	#DAC0_CH1DATA
 
	`DAC_CH1DATA
(
DAC0
)

	)

470 
	#DAC0_COMBDATA
 
	`DAC_COMBDATA
(
DAC0
)

	)

471 
	#DAC0_CAL
 
	`DAC_CAL
(
DAC0
)

	)

472 
	#DAC0_BIASPROG
 
	`DAC_BIASPROG
(
DAC0
)

	)

473 
	#DAC0_OPACTRL
 
	`DAC_OPACTRL
(
DAC0
)

	)

474 
	#DAC0_OPAOFFSET
 
	`DAC_OPAOFFSET
(
DAC0
)

	)

475 
	#DAC0_OPAOFFSET
 
	`DAC_OPAOFFSET
(
DAC0
)

	)

476 
	#DAC0_OPA1MUX
 
	`DAC_OPA1MUX
(
DAC0
)

	)

477 
	#DAC0_OPA2MUX
 
	`DAC_OPA2MUX
(
DAC0
)

	)

483 
	edac_ch
 {

484 
	mDAC_CH0
 = 0,

485 
	mDAC_CH1


489 
BEGIN_DECLS


491 
dac_£t_ª‰esh_cy˛e
(
uöt32_t
 
dac_ba£
, uöt32_à
ª‰£l
);

492 
dac_£t_˛ock_¥esˇÀr
(
uöt32_t
 
dac_ba£
, uöt32_à
¥esc
);

493 
dac_£t_ª„ªn˚
(
uöt32_t
 
dac_ba£
, uöt32_à
ªf£l
);

494 
dac_£t_out_mode
(
uöt32_t
 
dac_ba£
, uöt32_à
outmode
);

495 
dac_£t_c⁄vîsi⁄_mode
(
uöt32_t
 
dac_ba£
, uöt32_à
c⁄vmode
);

496 
dac_íabÀ_söe
(
uöt32_t
 
dac_ba£
);

497 
dac_dißbÀ_söe
(
uöt32_t
 
dac_ba£
);

499 
dac_£t_¥s_åiggî
(
uöt32_t
 
dac_ba£
, 
dac_ch
 
dac_ch™
,

500 
¥s_ch
 
¥s_ch™
);

501 
dac_íabÀ_¥s_åiggî
(
uöt32_t
 
dac_ba£
, 
dac_ch
 
ch
);

502 
dac_dißbÀ_¥s_åiggî
(
uöt32_t
 
dac_ba£
, 
dac_ch
 
ch
);

503 
dac_íabÀ_auto_ª‰esh
(
uöt32_t
 
dac_ba£
, 
dac_ch
 
ch
);

504 
dac_dißbÀ_auto_ª‰esh
(
uöt32_t
 
dac_ba£
, 
dac_ch
 
ch
);

506 
dac_íabÀ_ch™√l
(
uöt32_t
 
dac_ba£
, 
dac_ch
 
ch
);

507 
dac_dißbÀ_ch™√l
(
uöt32_t
 
dac_ba£
, 
dac_ch
 
ch
);

509 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/common/dma_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_DMA_H


21 
	#LIBOPENCM3_EFM32_DMA_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

37 
	#DMA
 
DMA_BASE


	)

39 
	#DMA_STATUS
 
	`MMIO32
(
DMA_BASE
 + 0x000)

	)

40 
	#DMA_CONFIG
 
	`MMIO32
(
DMA_BASE
 + 0x004)

	)

41 
	#DMA_CTRLBASE
 
	`MMIO32
(
DMA_BASE
 + 0x008)

	)

42 
	#DMA_ALTCTRLBASE
 
	`MMIO32
(
DMA_BASE
 + 0x00C)

	)

44 
	#DMA_CHWAITSTATUS
 
	`MMIO32
(
DMA_BASE
 + 0x010)

	)

45 
	#DMA_CHSWREQ
 
	`MMIO32
(
DMA_BASE
 + 0x014)

	)

46 
	#DMA_CHUSEBURSTS
 
	`MMIO32
(
DMA_BASE
 + 0x018)

	)

47 
	#DMA_CHUSEBURSTC
 
	`MMIO32
(
DMA_BASE
 + 0x01C)

	)

48 
	#DMA_CHREQMASKS
 
	`MMIO32
(
DMA_BASE
 + 0x020)

	)

49 
	#DMA_CHREQMASKC
 
	`MMIO32
(
DMA_BASE
 + 0x024)

	)

50 
	#DMA_CHENS
 
	`MMIO32
(
DMA_BASE
 + 0x028)

	)

51 
	#DMA_CHENC
 
	`MMIO32
(
DMA_BASE
 + 0x02C)

	)

52 
	#DMA_CHALTS
 
	`MMIO32
(
DMA_BASE
 + 0x030)

	)

53 
	#DMA_CHALTC
 
	`MMIO32
(
DMA_BASE
 + 0x034)

	)

54 
	#DMA_CHPRIS
 
	`MMIO32
(
DMA_BASE
 + 0x038)

	)

55 
	#DMA_CHPRIC
 
	`MMIO32
(
DMA_BASE
 + 0x03C)

	)

56 
	#DMA_ERRORC
 
	`MMIO32
(
DMA_BASE
 + 0x04C)

	)

57 
	#DMA_CHREQSTATUS
 
	`MMIO32
(
DMA_BASE
 + 0xE10)

	)

58 
	#DMA_CHSREQSTATUS
 
	`MMIO32
(
DMA_BASE
 + 0xE18)

	)

59 
	#DMA_IF
 
	`MMIO32
(
DMA_BASE
 + 0x1000)

	)

60 
	#DMA_IFS
 
	`MMIO32
(
DMA_BASE
 + 0x1004)

	)

61 
	#DMA_IFC
 
	`MMIO32
(
DMA_BASE
 + 0x1008)

	)

62 
	#DMA_IEN
 
	`MMIO32
(
DMA_BASE
 + 0x100C)

	)

63 
	#DMA_CTRL
 
	`MMIO32
(
DMA_BASE
 + 0x1010)

	)

64 
	#DMA_RDS
 
	`MMIO32
(
DMA_BASE
 + 0x1014)

	)

66 
	#DMA_LOOPx
(
i
Ë
	`MMIO32
(
DMA_BASE
 + 0x1020 + ((iË* 0x4))

	)

67 
	#DMA_LOOP0
 
	`DMA_LOOPx
(0)

	)

68 
	#DMA_LOOP1
 
	`DMA_LOOPx
(1)

	)

70 
	#DMA_RECTx
(
i
Ë
	`MMIO32
(
DMA_BASE
 + 0x1060 + ((iË* 0x4))

	)

71 
	#DMA_RECT0
 
	`DMA_RECT
(0)

	)

73 
	#DMA_CHx_CTRL
(
i
Ë
	`MMIO32
(
DMA_BASE
 + 0x1100 + ((iË* 0x4))

	)

74 
	#DMA_CH0_CTRL
 
	`DMA_CHx_CTRL
(0)

	)

75 
	#DMA_CH1_CTRL
 
	`DMA_CHx_CTRL
(1)

	)

76 
	#DMA_CH2_CTRL
 
	`DMA_CHx_CTRL
(2)

	)

77 
	#DMA_CH3_CTRL
 
	`DMA_CHx_CTRL
(3)

	)

78 
	#DMA_CH4_CTRL
 
	`DMA_CHx_CTRL
(4)

	)

79 
	#DMA_CH5_CTRL
 
	`DMA_CHx_CTRL
(5)

	)

80 
	#DMA_CH6_CTRL
 
	`DMA_CHx_CTRL
(6)

	)

81 
	#DMA_CH7_CTRL
 
	`DMA_CHx_CTRL
(7)

	)

82 
	#DMA_CH8_CTRL
 
	`DMA_CHx_CTRL
(8)

	)

83 
	#DMA_CH9_CTRL
 
	`DMA_CHx_CTRL
(9)

	)

84 
	#DMA_CH10_CTRL
 
	`DMA_CHx_CTRL
(10)

	)

85 
	#DMA_CH11_CTRL
 
	`DMA_CHx_CTRL
(11)

	)

88 
	#DMA_STATUS_CHNUM_SHIFT
 (16)

	)

89 
	#DMA_STATUS_CHNUM_MASK
 (0x1F << 
DMA_STATUS_CHNUM_SHIFT
)

	)

91 
	#DMA_STATUS_STATE_SHIFT
 (4)

	)

92 
	#DMA_STATUS_STATE_MASK
 (0xF << 
DMA_STATUS_STATE_SHIFT
)

	)

93 
	#DMA_STATUS_STATE
(
v
) \

94 (((
v
Ë<< 
DMA_STATUS_STATE_SHIFT
Ë& 
DMA_STATUS_STATE_MASK
)

	)

95 
	#DMA_STATUS_STATE_IDLE
 0

	)

96 
	#DMA_STATUS_STATE_RDCHCTRLDATA
 1

	)

97 
	#DMA_STATUS_STATE_RDSRCENDPTR
 2

	)

98 
	#DMA_STATUS_STATE_RDDSTENDPTR
 3

	)

99 
	#DMA_STATUS_STATE_RDSRCDATA
 4

	)

100 
	#DMA_STATUS_STATE_WRDSTDATA
 5

	)

101 
	#DMA_STATUS_STATE_WAITREQCLR
 6

	)

102 
	#DMA_STATUS_STATE_WRCHCTRLDATA
 7

	)

103 
	#DMA_STATUS_STATE_STALLED
 8

	)

104 
	#DMA_STATUS_STATE_DONE
 9

	)

105 
	#DMA_STATUS_STATE_PERSCATTRANS
 10

	)

107 
	#DMA_STATUS_EN
 (1 << 0)

	)

110 
	#DMA_CONFIG_CHPROT
 (1 << 5)

	)

111 
	#DMA_CONFIG_EN
 (1 << 0)

	)

114 
	#DMA_CHWAITSTATUS_CHxWAITSTATUS
(
i
Ë(1 << (i))

	)

115 
	#DMA_CHWAITSTATUS_CH11WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(11)

	)

116 
	#DMA_CHWAITSTATUS_CH10WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(10)

	)

117 
	#DMA_CHWAITSTATUS_CH9WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(9)

	)

118 
	#DMA_CHWAITSTATUS_CH8WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(8)

	)

119 
	#DMA_CHWAITSTATUS_CH7WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(7)

	)

120 
	#DMA_CHWAITSTATUS_CH6WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(6)

	)

121 
	#DMA_CHWAITSTATUS_CH5WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(5)

	)

122 
	#DMA_CHWAITSTATUS_CH4WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(4)

	)

123 
	#DMA_CHWAITSTATUS_CH3WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(3)

	)

124 
	#DMA_CHWAITSTATUS_CH2WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(2)

	)

125 
	#DMA_CHWAITSTATUS_CH1WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(1)

	)

126 
	#DMA_CHWAITSTATUS_CH0WAITSTATUS
 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(0)

	)

129 
	#DMA_CHSWREQ_CHxSWREQ
(
i
Ë(1 << (i))

	)

130 
	#DMA_CHSWREQ_CH11SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(11)

	)

131 
	#DMA_CHSWREQ_CH10SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(10)

	)

132 
	#DMA_CHSWREQ_CH9SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(9)

	)

133 
	#DMA_CHSWREQ_CH8SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(8)

	)

134 
	#DMA_CHSWREQ_CH7SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(7)

	)

135 
	#DMA_CHSWREQ_CH6SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(6)

	)

136 
	#DMA_CHSWREQ_CH5SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(5)

	)

137 
	#DMA_CHSWREQ_CH4SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(4)

	)

138 
	#DMA_CHSWREQ_CH3SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(3)

	)

139 
	#DMA_CHSWREQ_CH2SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(2)

	)

140 
	#DMA_CHSWREQ_CH1SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(1)

	)

141 
	#DMA_CHSWREQ_CH0SWREQ
 
	`DMA_CHSWREQ_CHxSWREQ
(0)

	)

144 
	#DMA_CHUSEBURSTS_CHxSUSEBURSTS
(
i
Ë(1 << (i))

	)

145 
	#DMA_CHUSEBURSTS_CH11SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(11)

	)

146 
	#DMA_CHUSEBURSTS_CH10SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(10)

	)

147 
	#DMA_CHUSEBURSTS_CH9SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(9)

	)

148 
	#DMA_CHUSEBURSTS_CH8SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(8)

	)

149 
	#DMA_CHUSEBURSTS_CH7SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(7)

	)

150 
	#DMA_CHUSEBURSTS_CH6SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(6)

	)

151 
	#DMA_CHUSEBURSTS_CH5SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(5)

	)

152 
	#DMA_CHUSEBURSTS_CH4SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(4)

	)

153 
	#DMA_CHUSEBURSTS_CH3SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(3)

	)

154 
	#DMA_CHUSEBURSTS_CH2SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(2)

	)

155 
	#DMA_CHUSEBURSTS_CH1SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(1)

	)

156 
	#DMA_CHUSEBURSTS_CH0SUSEBURSTS
 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(0)

	)

159 
	#DMA_CHUSEBURSTC_CHxSUSEBURSTC
(
i
Ë(1 << (i))

	)

160 
	#DMA_CHUSEBURSTC_CH11SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(11)

	)

161 
	#DMA_CHUSEBURSTC_CH10SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(10)

	)

162 
	#DMA_CHUSEBURSTC_CH9SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(9)

	)

163 
	#DMA_CHUSEBURSTC_CH8SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(8)

	)

164 
	#DMA_CHUSEBURSTC_CH7SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(7)

	)

165 
	#DMA_CHUSEBURSTC_CH6SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(6)

	)

166 
	#DMA_CHUSEBURSTC_CH5SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(5)

	)

167 
	#DMA_CHUSEBURSTC_CH4SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(4)

	)

168 
	#DMA_CHUSEBURSTC_CH3SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(3)

	)

169 
	#DMA_CHUSEBURSTC_CH2SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(2)

	)

170 
	#DMA_CHUSEBURSTC_CH1SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(1)

	)

171 
	#DMA_CHUSEBURSTC_CH0SUSEBURSTC
 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(0)

	)

174 
	#DMA_CHREQMASKS_CHxSREQMASKS
(
i
Ë(1 << (i))

	)

175 
	#DMA_CHREQMASKS_CH11SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(11)

	)

176 
	#DMA_CHREQMASKS_CH10SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(10)

	)

177 
	#DMA_CHREQMASKS_CH9SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(9)

	)

178 
	#DMA_CHREQMASKS_CH8SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(8)

	)

179 
	#DMA_CHREQMASKS_CH7SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(7)

	)

180 
	#DMA_CHREQMASKS_CH6SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(6)

	)

181 
	#DMA_CHREQMASKS_CH5SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(5)

	)

182 
	#DMA_CHREQMASKS_CH4SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(4)

	)

183 
	#DMA_CHREQMASKS_CH3SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(3)

	)

184 
	#DMA_CHREQMASKS_CH2SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(2)

	)

185 
	#DMA_CHREQMASKS_CH1SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(1)

	)

186 
	#DMA_CHREQMASKS_CH0SREQMASKS
 
	`DMA_CHREQMASKS_CHxSREQMASKS
(0)

	)

189 
	#DMA_CHREQMASKC_CHxSREQMASKC
(
i
Ë(1 << (i))

	)

190 
	#DMA_CHREQMASKC_CH11SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(11)

	)

191 
	#DMA_CHREQMASKC_CH10SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(10)

	)

192 
	#DMA_CHREQMASKC_CH9SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(9)

	)

193 
	#DMA_CHREQMASKC_CH8SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(8)

	)

194 
	#DMA_CHREQMASKC_CH7SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(7)

	)

195 
	#DMA_CHREQMASKC_CH6SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(6)

	)

196 
	#DMA_CHREQMASKC_CH5SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(5)

	)

197 
	#DMA_CHREQMASKC_CH4SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(4)

	)

198 
	#DMA_CHREQMASKC_CH3SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(3)

	)

199 
	#DMA_CHREQMASKC_CH2SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(2)

	)

200 
	#DMA_CHREQMASKC_CH1SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(1)

	)

201 
	#DMA_CHREQMASKC_CH0SREQMASKC
 
	`DMA_CHREQMASKC_CHxSREQMASKC
(0)

	)

204 
	#DMA_CHENS_CHxSENS
(
i
Ë(1 << (i))

	)

205 
	#DMA_CHENS_CH11SENS
 
	`DMA_CHENS_CHxSENS
(11)

	)

206 
	#DMA_CHENS_CH10SENS
 
	`DMA_CHENS_CHxSENS
(10)

	)

207 
	#DMA_CHENS_CH9SENS
 
	`DMA_CHENS_CHxSENS
(9)

	)

208 
	#DMA_CHENS_CH8SENS
 
	`DMA_CHENS_CHxSENS
(8)

	)

209 
	#DMA_CHENS_CH7SENS
 
	`DMA_CHENS_CHxSENS
(7)

	)

210 
	#DMA_CHENS_CH6SENS
 
	`DMA_CHENS_CHxSENS
(6)

	)

211 
	#DMA_CHENS_CH5SENS
 
	`DMA_CHENS_CHxSENS
(5)

	)

212 
	#DMA_CHENS_CH4SENS
 
	`DMA_CHENS_CHxSENS
(4)

	)

213 
	#DMA_CHENS_CH3SENS
 
	`DMA_CHENS_CHxSENS
(3)

	)

214 
	#DMA_CHENS_CH2SENS
 
	`DMA_CHENS_CHxSENS
(2)

	)

215 
	#DMA_CHENS_CH1SENS
 
	`DMA_CHENS_CHxSENS
(1)

	)

216 
	#DMA_CHENS_CH0SENS
 
	`DMA_CHENS_CHxSENS
(0)

	)

219 
	#DMA_CHENC_CHxSENC
(
i
Ë(1 << (i))

	)

220 
	#DMA_CHENC_CH11SENC
 
	`DMA_CHENC_CHxSENC
(11)

	)

221 
	#DMA_CHENC_CH10SENC
 
	`DMA_CHENC_CHxSENC
(10)

	)

222 
	#DMA_CHENC_CH9SENC
 
	`DMA_CHENC_CHxSENC
(9)

	)

223 
	#DMA_CHENC_CH8SENC
 
	`DMA_CHENC_CHxSENC
(8)

	)

224 
	#DMA_CHENC_CH7SENC
 
	`DMA_CHENC_CHxSENC
(7)

	)

225 
	#DMA_CHENC_CH6SENC
 
	`DMA_CHENC_CHxSENC
(6)

	)

226 
	#DMA_CHENC_CH5SENC
 
	`DMA_CHENC_CHxSENC
(5)

	)

227 
	#DMA_CHENC_CH4SENC
 
	`DMA_CHENC_CHxSENC
(4)

	)

228 
	#DMA_CHENC_CH3SENC
 
	`DMA_CHENC_CHxSENC
(3)

	)

229 
	#DMA_CHENC_CH2SENC
 
	`DMA_CHENC_CHxSENC
(2)

	)

230 
	#DMA_CHENC_CH1SENC
 
	`DMA_CHENC_CHxSENC
(1)

	)

231 
	#DMA_CHENC_CH0SENC
 
	`DMA_CHENC_CHxSENC
(0)

	)

234 
	#DMA_CHALTS_CHxSALTS
(
i
Ë(1 << (i))

	)

235 
	#DMA_CHALTS_CH11SALTS
 
	`DMA_CHALTS_CHxSALTS
(11)

	)

236 
	#DMA_CHALTS_CH10SALTS
 
	`DMA_CHALTS_CHxSALTS
(10)

	)

237 
	#DMA_CHALTS_CH9SALTS
 
	`DMA_CHALTS_CHxSALTS
(9)

	)

238 
	#DMA_CHALTS_CH8SALTS
 
	`DMA_CHALTS_CHxSALTS
(8)

	)

239 
	#DMA_CHALTS_CH7SALTS
 
	`DMA_CHALTS_CHxSALTS
(7)

	)

240 
	#DMA_CHALTS_CH6SALTS
 
	`DMA_CHALTS_CHxSALTS
(6)

	)

241 
	#DMA_CHALTS_CH5SALTS
 
	`DMA_CHALTS_CHxSALTS
(5)

	)

242 
	#DMA_CHALTS_CH4SALTS
 
	`DMA_CHALTS_CHxSALTS
(4)

	)

243 
	#DMA_CHALTS_CH3SALTS
 
	`DMA_CHALTS_CHxSALTS
(3)

	)

244 
	#DMA_CHALTS_CH2SALTS
 
	`DMA_CHALTS_CHxSALTS
(2)

	)

245 
	#DMA_CHALTS_CH1SALTS
 
	`DMA_CHALTS_CHxSALTS
(1)

	)

246 
	#DMA_CHALTS_CH0SALTS
 
	`DMA_CHALTS_CHxSALTS
(0)

	)

249 
	#DMA_CHALTC_CHxSALTC
(
i
Ë(1 << (i))

	)

250 
	#DMA_CHALTC_CH11SALTC
 
	`DMA_CHALTC_CHxSALTC
(11)

	)

251 
	#DMA_CHALTC_CH10SALTC
 
	`DMA_CHALTC_CHxSALTC
(10)

	)

252 
	#DMA_CHALTC_CH9SALTC
 
	`DMA_CHALTC_CHxSALTC
(9)

	)

253 
	#DMA_CHALTC_CH8SALTC
 
	`DMA_CHALTC_CHxSALTC
(8)

	)

254 
	#DMA_CHALTC_CH7SALTC
 
	`DMA_CHALTC_CHxSALTC
(7)

	)

255 
	#DMA_CHALTC_CH6SALTC
 
	`DMA_CHALTC_CHxSALTC
(6)

	)

256 
	#DMA_CHALTC_CH5SALTC
 
	`DMA_CHALTC_CHxSALTC
(5)

	)

257 
	#DMA_CHALTC_CH4SALTC
 
	`DMA_CHALTC_CHxSALTC
(4)

	)

258 
	#DMA_CHALTC_CH3SALTC
 
	`DMA_CHALTC_CHxSALTC
(3)

	)

259 
	#DMA_CHALTC_CH2SALTC
 
	`DMA_CHALTC_CHxSALTC
(2)

	)

260 
	#DMA_CHALTC_CH1SALTC
 
	`DMA_CHALTC_CHxSALTC
(1)

	)

261 
	#DMA_CHALTC_CH0SALTC
 
	`DMA_CHALTC_CHxSALTC
(0)

	)

264 
	#DMA_CHPRIS_CHxSPRIC
(
i
Ë(1 << (i))

	)

265 
	#DMA_CHPRIS_CH11SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(11)

	)

266 
	#DMA_CHPRIS_CH10SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(10)

	)

267 
	#DMA_CHPRIS_CH9SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(9)

	)

268 
	#DMA_CHPRIS_CH8SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(8)

	)

269 
	#DMA_CHPRIS_CH7SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(7)

	)

270 
	#DMA_CHPRIS_CH6SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(6)

	)

271 
	#DMA_CHPRIS_CH5SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(5)

	)

272 
	#DMA_CHPRIS_CH4SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(4)

	)

273 
	#DMA_CHPRIS_CH3SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(3)

	)

274 
	#DMA_CHPRIS_CH2SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(2)

	)

275 
	#DMA_CHPRIS_CH1SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(1)

	)

276 
	#DMA_CHPRIS_CH0SPRIC
 
	`DMA_CHPRIS_CHxSPRIC
(0)

	)

279 
	#DMA_CHPRIC_CHxSPRIC
(
i
Ë(1 << (i))

	)

280 
	#DMA_CHPRIC_CH11SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(11)

	)

281 
	#DMA_CHPRIC_CH10SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(10)

	)

282 
	#DMA_CHPRIC_CH9SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(9)

	)

283 
	#DMA_CHPRIC_CH8SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(8)

	)

284 
	#DMA_CHPRIC_CH7SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(7)

	)

285 
	#DMA_CHPRIC_CH6SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(6)

	)

286 
	#DMA_CHPRIC_CH5SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(5)

	)

287 
	#DMA_CHPRIC_CH4SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(4)

	)

288 
	#DMA_CHPRIC_CH3SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(3)

	)

289 
	#DMA_CHPRIC_CH2SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(2)

	)

290 
	#DMA_CHPRIC_CH1SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(1)

	)

291 
	#DMA_CHPRIC_CH0SPRIC
 
	`DMA_CHPRIC_CHxSPRIC
(0)

	)

294 
	#DMA_ERRORC_ERRORC
 (1 << 0)

	)

297 
	#DMA_CHREQSTATUS_CHxSREQSTATUS
(
i
Ë(1 << (i))

	)

298 
	#DMA_CHREQSTATUS_CH11SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(11)

	)

299 
	#DMA_CHREQSTATUS_CH10SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(10)

	)

300 
	#DMA_CHREQSTATUS_CH9SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(9)

	)

301 
	#DMA_CHREQSTATUS_CH8SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(8)

	)

302 
	#DMA_CHREQSTATUS_CH7SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(7)

	)

303 
	#DMA_CHREQSTATUS_CH6SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(6)

	)

304 
	#DMA_CHREQSTATUS_CH5SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(5)

	)

305 
	#DMA_CHREQSTATUS_CH4SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(4)

	)

306 
	#DMA_CHREQSTATUS_CH3SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(3)

	)

307 
	#DMA_CHREQSTATUS_CH2SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(2)

	)

308 
	#DMA_CHREQSTATUS_CH1SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(1)

	)

309 
	#DMA_CHREQSTATUS_CH0SREQSTATUS
 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(0)

	)

312 
	#DMA_CHSREQSTATUS_CHxSREQSTATUS
(
i
Ë(1 << (i))

	)

313 
	#DMA_CHSREQSTATUS_CH11SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(11)

	)

314 
	#DMA_CHSREQSTATUS_CH10SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(10)

	)

315 
	#DMA_CHSREQSTATUS_CH9SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(9)

	)

316 
	#DMA_CHSREQSTATUS_CH8SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(8)

	)

317 
	#DMA_CHSREQSTATUS_CH7SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(7)

	)

318 
	#DMA_CHSREQSTATUS_CH6SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(6)

	)

319 
	#DMA_CHSREQSTATUS_CH5SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(5)

	)

320 
	#DMA_CHSREQSTATUS_CH4SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(4)

	)

321 
	#DMA_CHSREQSTATUS_CH3SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(3)

	)

322 
	#DMA_CHSREQSTATUS_CH2SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(2)

	)

323 
	#DMA_CHSREQSTATUS_CH1SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(1)

	)

324 
	#DMA_CHSREQSTATUS_CH0SREQSTATUS
 
	`DMA_CHSREQSTATUS_CHxSREQSTATUS
(0)

	)

327 
	#DMA_IF_ERR
 (1UL << 31)

	)

328 
	#DMA_IF_CHxDONE
(
x
Ë(1 << (x))

	)

329 
	#DMA_IF_CH11DONE
 
	`DMA_IF_CHxDONE
(11)

	)

330 
	#DMA_IF_CH10DONE
 
	`DMA_IF_CHxDONE
(10)

	)

331 
	#DMA_IF_CH9DONE
 
	`DMA_IF_CHxDONE
(9)

	)

332 
	#DMA_IF_CH8DONE
 
	`DMA_IF_CHxDONE
(8)

	)

333 
	#DMA_IF_CH7DONE
 
	`DMA_IF_CHxDONE
(7)

	)

334 
	#DMA_IF_CH6DONE
 
	`DMA_IF_CHxDONE
(6)

	)

335 
	#DMA_IF_CH5DONE
 
	`DMA_IF_CHxDONE
(5)

	)

336 
	#DMA_IF_CH4DONE
 
	`DMA_IF_CHxDONE
(4)

	)

337 
	#DMA_IF_CH3DONE
 
	`DMA_IF_CHxDONE
(3)

	)

338 
	#DMA_IF_CH2DONE
 
	`DMA_IF_CHxDONE
(2)

	)

339 
	#DMA_IF_CH1DONE
 
	`DMA_IF_CHxDONE
(1)

	)

340 
	#DMA_IF_CH0DONE
 
	`DMA_IF_CHxDONE
(0)

	)

344 
	#DMA_IFS_ERR
 (1 << 31)

	)

345 
	#DMA_IFS_CHxDONE
(
x
Ë(1 << (x))

	)

346 
	#DMA_IFS_CH11DONE
 
	`DMA_IFS_CHxDONE
(11)

	)

347 
	#DMA_IFS_CH10DONE
 
	`DMA_IFS_CHxDONE
(10)

	)

348 
	#DMA_IFS_CH9DONE
 
	`DMA_IFS_CHxDONE
(9)

	)

349 
	#DMA_IFS_CH8DONE
 
	`DMA_IFS_CHxDONE
(8)

	)

350 
	#DMA_IFS_CH7DONE
 
	`DMA_IFS_CHxDONE
(7)

	)

351 
	#DMA_IFS_CH6DONE
 
	`DMA_IFS_CHxDONE
(6)

	)

352 
	#DMA_IFS_CH5DONE
 
	`DMA_IFS_CHxDONE
(5)

	)

353 
	#DMA_IFS_CH4DONE
 
	`DMA_IFS_CHxDONE
(4)

	)

354 
	#DMA_IFS_CH3DONE
 
	`DMA_IFS_CHxDONE
(3)

	)

355 
	#DMA_IFS_CH2DONE
 
	`DMA_IFS_CHxDONE
(2)

	)

356 
	#DMA_IFS_CH1DONE
 
	`DMA_IFS_CHxDONE
(1)

	)

357 
	#DMA_IFS_CH0DONE
 
	`DMA_IFS_CHxDONE
(0)

	)

360 
	#DMA_IFC_ERR
 (1 << 31)

	)

361 
	#DMA_IFC_CHxDONE
(
x
Ë(1 << (x))

	)

362 
	#DMA_IFC_CH11DONE
 
	`DMA_IFC_CHxDONE
(11)

	)

363 
	#DMA_IFC_CH10DONE
 
	`DMA_IFC_CHxDONE
(10)

	)

364 
	#DMA_IFC_CH9DONE
 
	`DMA_IFC_CHxDONE
(9)

	)

365 
	#DMA_IFC_CH8DONE
 
	`DMA_IFC_CHxDONE
(8)

	)

366 
	#DMA_IFC_CH7DONE
 
	`DMA_IFC_CHxDONE
(7)

	)

367 
	#DMA_IFC_CH6DONE
 
	`DMA_IFC_CHxDONE
(6)

	)

368 
	#DMA_IFC_CH5DONE
 
	`DMA_IFC_CHxDONE
(5)

	)

369 
	#DMA_IFC_CH4DONE
 
	`DMA_IFC_CHxDONE
(4)

	)

370 
	#DMA_IFC_CH3DONE
 
	`DMA_IFC_CHxDONE
(3)

	)

371 
	#DMA_IFC_CH2DONE
 
	`DMA_IFC_CHxDONE
(2)

	)

372 
	#DMA_IFC_CH1DONE
 
	`DMA_IFC_CHxDONE
(1)

	)

373 
	#DMA_IFC_CH0DONE
 
	`DMA_IFC_CHxDONE
(0)

	)

376 
	#DMA_IEN_ERR
 (1 << 31)

	)

377 
	#DMA_IEN_CHxDONE
(
x
Ë(1 << (x))

	)

378 
	#DMA_IEN_CH11DONE
 
	`DMA_IEN_CHxDONE
(11)

	)

379 
	#DMA_IEN_CH10DONE
 
	`DMA_IEN_CHxDONE
(10)

	)

380 
	#DMA_IEN_CH9DONE
 
	`DMA_IEN_CHxDONE
(9)

	)

381 
	#DMA_IEN_CH8DONE
 
	`DMA_IEN_CHxDONE
(8)

	)

382 
	#DMA_IEN_CH7DONE
 
	`DMA_IEN_CHxDONE
(7)

	)

383 
	#DMA_IEN_CH6DONE
 
	`DMA_IEN_CHxDONE
(6)

	)

384 
	#DMA_IEN_CH5DONE
 
	`DMA_IEN_CHxDONE
(5)

	)

385 
	#DMA_IEN_CH4DONE
 
	`DMA_IEN_CHxDONE
(4)

	)

386 
	#DMA_IEN_CH3DONE
 
	`DMA_IEN_CHxDONE
(3)

	)

387 
	#DMA_IEN_CH2DONE
 
	`DMA_IEN_CHxDONE
(2)

	)

388 
	#DMA_IEN_CH1DONE
 
	`DMA_IEN_CHxDONE
(1)

	)

389 
	#DMA_IEN_CH0DONE
 
	`DMA_IEN_CHxDONE
(0)

	)

392 
	#DMA_CTRL_PRDU
 (1 << 1)

	)

393 
	#DMA_CTRL_DESCRECT
 (1 << 0)

	)

396 
	#DMA_RDS_RDSCHx
(
i
Ë(1 << (i))

	)

397 
	#DMA_RDS_RDSCH11
 
	`DMA_RDS_RDSCHx
(11)

	)

398 
	#DMA_RDS_RDSCH10
 
	`DMA_RDS_RDSCHx
(10)

	)

399 
	#DMA_RDS_RDSCH9
 
	`DMA_RDS_RDSCHx
(9)

	)

400 
	#DMA_RDS_RDSCH8
 
	`DMA_RDS_RDSCHx
(8)

	)

401 
	#DMA_RDS_RDSCH7
 
	`DMA_RDS_RDSCHx
(7)

	)

402 
	#DMA_RDS_RDSCH6
 
	`DMA_RDS_RDSCHx
(6)

	)

403 
	#DMA_RDS_RDSCH5
 
	`DMA_RDS_RDSCHx
(5)

	)

404 
	#DMA_RDS_RDSCH4
 
	`DMA_RDS_RDSCHx
(4)

	)

405 
	#DMA_RDS_RDSCH3
 
	`DMA_RDS_RDSCHx
(3)

	)

406 
	#DMA_RDS_RDSCH2
 
	`DMA_RDS_RDSCHx
(2)

	)

407 
	#DMA_RDS_RDSCH1
 
	`DMA_RDS_RDSCHx
(1)

	)

408 
	#DMA_RDS_RDSCH0
 
	`DMA_RDS_RDSCHx
(0)

	)

411 
	#DMA_LOOP_EN
 (1 << 16)

	)

412 
	#DMA_LOOP_WIDTH_SHIFT
 (0)

	)

413 
	#DMA_LOOP_WIDTH_MASK
 (0x3FF << 
DMA_LOOP_WIDTH_SHIFT
)

	)

414 
	#DMA_LOOP_WIDTH
(
v
) \

415 (((
v
Ë<< 
DMA_LOOP_WIDTH_SHIFT
Ë& 
DMA_LOOP_WIDTH_MASK
)

	)

418 
	#DMA_RECT_DSTSTRIDE_SHIFT
 (21)

	)

419 
	#DMA_RECT_DSTSTRIDE_MASK
 (0x7FF << 
DMA_RECT_DSTSTRIDE_SHIFT
)

	)

420 
	#DMA_RECT_DSTSTRIDE
(
v
) \

421 (((
v
Ë<< 
DMA_RECT_DSTSTRIDE_SHIFT
Ë& 
DMA_RECT_DSTSTRIDE_MASK
)

	)

423 
	#DMA_RECT_SRCSTRIDE_SHIFT
 (10)

	)

424 
	#DMA_RECT_SRCSTRIDE_MASK
 (0x7FF << 
DMA_RECT_SRCSTRIDE_SHIFT
)

	)

425 
	#DMA_RECT_SRCSTRIDE
(
v
) \

426 (((
v
Ë<< 
DMA_RECT_SRCSTRIDE_SHIFT
Ë& 
DMA_RECT_SRCSTRIDE_MASK
)

	)

428 
	#DMA_RECT_HEIGHT_SHIFT
 (0)

	)

429 
	#DMA_RECT_HEIGHT_MASK
 (0x3FF << 
DMA_RECT_HEIGHT_SHIFT
)

	)

430 
	#DMA_RECT_HEIGHT
(
v
) \

431 (((
v
Ë<< 
DMA_RECT_HEIGHT_SHIFT
Ë& 
DMA_RECT_HEIGHT_MASK
)

	)

434 
	#DMA_CH_CTRL_SOURCESEL_SHIFT
 (16)

	)

435 
	#DMA_CH_CTRL_SOURCESEL_MASK
 (0x3F << 
DMA_CH_CTRL_SOURCESEL_SHIFT
)

	)

436 
	#DMA_CH_CTRL_SOURCESEL
(
v
) \

437 (((
v
Ë<< 
DMA_CH_CTRL_SOURCESEL_SHIFT
Ë& 
DMA_CH_CTRL_SOURCESEL_MASK
)

	)

438 
	#DMA_CH_CTRL_SOURCESEL_NONE
 0b000000

	)

439 
	#DMA_CH_CTRL_SOURCESEL_ADC0
 0b001000

	)

440 
	#DMA_CH_CTRL_SOURCESEL_DAC0
 0b001010

	)

441 
	#DMA_CH_CTRL_SOURCESEL_USART0
 0b001100

	)

442 
	#DMA_CH_CTRL_SOURCESEL_USART1
 0b001101

	)

443 
	#DMA_CH_CTRL_SOURCESEL_USART2
 0b001110

	)

444 
	#DMA_CH_CTRL_SOURCESEL_LEUART0
 0b010000

	)

445 
	#DMA_CH_CTRL_SOURCESEL_LEUART1
 0b010001

	)

446 
	#DMA_CH_CTRL_SOURCESEL_I2C0
 0b010100

	)

447 
	#DMA_CH_CTRL_SOURCESEL_I2C1
 0b010101

	)

448 
	#DMA_CH_CTRL_SOURCESEL_TIMER0
 0b011000

	)

449 
	#DMA_CH_CTRL_SOURCESEL_TIMER1
 0b011001

	)

450 
	#DMA_CH_CTRL_SOURCESEL_TIMER2
 0b011010

	)

451 
	#DMA_CH_CTRL_SOURCESEL_TIMER3
 0b011011

	)

452 
	#DMA_CH_CTRL_SOURCESEL_UART0
 0b101100

	)

453 
	#DMA_CH_CTRL_SOURCESEL_UART1
 0b101101

	)

454 
	#DMA_CH_CTRL_SOURCESEL_MSC
 0b110000

	)

455 
	#DMA_CH_CTRL_SOURCESEL_AES
 0b110001

	)

456 
	#DMA_CH_CTRL_SOURCESEL_LESENSE
 0b110010

	)

457 
	#DMA_CH_CTRL_SOURCESEL_EBI
 0b110011

	)

459 
	#DMA_CH_CTRL_SIGSEL_SHIFT
 (0)

	)

460 
	#DMA_CH_CTRL_SIGSEL_MASK
 (0xF << 
DMA_CH_CTRL_SIGSEL_SHIFT
)

	)

461 
	#DMA_CH_CTRL_SIGSEL
(
v
) \

462 (((
v
Ë<< 
DMA_CH_CTRL_SIGSEL_SHIFT
Ë& 
DMA_CH_CTRL_SIGSEL_MASK
)

	)

464 
	#DMA_CH_CTRL_SIGSEL_OFF
 0

	)

465 
	#DMA_CH_CTRL_SIGSEL_ADC0SINGLE
 0

	)

466 
	#DMA_CH_CTRL_SIGSEL_ADC0SCAN
 1

	)

467 
	#DMA_CH_CTRL_SIGSEL_DAC0CH0
 0

	)

468 
	#DMA_CH_CTRL_SIGSEL_DAC0CH1
 1

	)

469 
	#DMA_CH_CTRL_SIGSEL_USART0RXDATAV
 0

	)

470 
	#DMA_CH_CTRL_SIGSEL_USART0TXBL
 1

	)

471 
	#DMA_CH_CTRL_SIGSEL_USART0TXEMPTY
 2

	)

472 
	#DMA_CH_CTRL_SIGSEL_USART1RXDATAV
 0

	)

473 
	#DMA_CH_CTRL_SIGSEL_USART1TXBL
 1

	)

474 
	#DMA_CH_CTRL_SIGSEL_USART1TXEMPTY
 2

	)

475 
	#DMA_CH_CTRL_SIGSEL_USART1RXDATAVRIGHT
 3

	)

476 
	#DMA_CH_CTRL_SIGSEL_USART1TXBLRIGHT
 4

	)

477 
	#DMA_CH_CTRL_SIGSEL_USART2RXDATAV
 0

	)

478 
	#DMA_CH_CTRL_SIGSEL_USART2TXBL
 1

	)

479 
	#DMA_CH_CTRL_SIGSEL_USART2TXEMPTY
 2

	)

480 
	#DMA_CH_CTRL_SIGSEL_USART2RXDATAVRIGHT
 3

	)

481 
	#DMA_CH_CTRL_SIGSEL_USART2TXBLRIGHT
 4

	)

482 
	#DMA_CH_CTRL_SIGSEL_LEUART0RXDATAV
 0

	)

483 
	#DMA_CH_CTRL_SIGSEL_LEUART0TXBL
 1

	)

484 
	#DMA_CH_CTRL_SIGSEL_LEUART0TXEMPTY
 2

	)

485 
	#DMA_CH_CTRL_SIGSEL_LEUART1RXDATAV
 0

	)

486 
	#DMA_CH_CTRL_SIGSEL_LEUART1TXBL
 1

	)

487 
	#DMA_CH_CTRL_SIGSEL_LEUART1TXEMPTY
 2

	)

488 
	#DMA_CH_CTRL_SIGSEL_I2C0RXDATAV
 0

	)

489 
	#DMA_CH_CTRL_SIGSEL_I2C0TXBL
 1

	)

490 
	#DMA_CH_CTRL_SIGSEL_I2C1RXDATAV
 0

	)

491 
	#DMA_CH_CTRL_SIGSEL_I2C1TXBL
 1

	)

492 
	#DMA_CH_CTRL_SIGSEL_TIMER0UFOF
 0

	)

493 
	#DMA_CH_CTRL_SIGSEL_TIMER0CC0
 1

	)

494 
	#DMA_CH_CTRL_SIGSEL_TIMER0CC1
 2

	)

495 
	#DMA_CH_CTRL_SIGSEL_TIMER0CC2
 3

	)

496 
	#DMA_CH_CTRL_SIGSEL_TIMER1UFOF
 0

	)

497 
	#DMA_CH_CTRL_SIGSEL_TIMER1CC0
 1

	)

498 
	#DMA_CH_CTRL_SIGSEL_TIMER1CC1
 2

	)

499 
	#DMA_CH_CTRL_SIGSEL_TIMER1CC2
 3

	)

500 
	#DMA_CH_CTRL_SIGSEL_TIMER2UFOF
 0

	)

501 
	#DMA_CH_CTRL_SIGSEL_TIMER2CC0
 1

	)

502 
	#DMA_CH_CTRL_SIGSEL_TIMER2CC1
 2

	)

503 
	#DMA_CH_CTRL_SIGSEL_TIMER2CC2
 3

	)

504 
	#DMA_CH_CTRL_SIGSEL_TIMER3UFOF
 0

	)

505 
	#DMA_CH_CTRL_SIGSEL_TIMER3CC0
 1

	)

506 
	#DMA_CH_CTRL_SIGSEL_TIMER3CC1
 2

	)

507 
	#DMA_CH_CTRL_SIGSEL_TIMER3CC2
 3

	)

508 
	#DMA_CH_CTRL_SIGSEL_UART0RXDATAV
 0

	)

509 
	#DMA_CH_CTRL_SIGSEL_UART0TXBL
 1

	)

510 
	#DMA_CH_CTRL_SIGSEL_UART0TXEMPTY
 2

	)

511 
	#DMA_CH_CTRL_SIGSEL_UART1RXDATAV
 0

	)

512 
	#DMA_CH_CTRL_SIGSEL_UART1TXBL
 1

	)

513 
	#DMA_CH_CTRL_SIGSEL_UART1TXEMPTY
 2

	)

514 
	#DMA_CH_CTRL_SIGSEL_MSCWDATA
 0

	)

515 
	#DMA_CH_CTRL_SIGSEL_AESDATAWR
 0

	)

516 
	#DMA_CH_CTRL_SIGSEL_AESXORDATAWR
 1

	)

517 
	#DMA_CH_CTRL_SIGSEL_AESDATARD
 2

	)

518 
	#DMA_CH_CTRL_SIGSEL_AESKEYWR
 3

	)

519 
	#DMA_CH_CTRL_SIGSEL_LESENSEBUFDATAV
 0

	)

520 
	#DMA_CH_CTRL_SIGSEL_EBIPXL0EMPTY
 0

	)

521 
	#DMA_CH_CTRL_SIGSEL_EBIPXL1EMPTY
 1

	)

522 
	#DMA_CH_CTRL_SIGSEL_EBIPXLFULL
 2

	)

523 
	#DMA_CH_CTRL_SIGSEL_EBIDDEMPTY
 3

	)

526 
	#DMA_CH_CTRL_SIGSEL_ADC_SINGLE
 0

	)

527 
	#DMA_CH_CTRL_SIGSEL_ADC_SCAN
 1

	)

528 
	#DMA_CH_CTRL_SIGSEL_DAC_CHx
(
x
Ë
	`DMA_CH_CTRL_SIGSEL
(x)

	)

529 
	#DMA_CH_CTRL_SIGSEL_DAC_CH0
 0

	)

530 
	#DMA_CH_CTRL_SIGSEL_DAC_CH1
 1

	)

531 
	#DMA_CH_CTRL_SIGSEL_USART_RXDATAV
 0

	)

532 
	#DMA_CH_CTRL_SIGSEL_USART_TXBL
 1

	)

533 
	#DMA_CH_CTRL_SIGSEL_USART_TXEMPTY
 2

	)

534 
	#DMA_CH_CTRL_SIGSEL_USART_RXDATAVRIGHT
 3

	)

535 
	#DMA_CH_CTRL_SIGSEL_USART_TXBLRIGHT
 4

	)

536 
	#DMA_CH_CTRL_SIGSEL_LEUART_RXDATAV
 0

	)

537 
	#DMA_CH_CTRL_SIGSEL_LEUART_TXBL
 1

	)

538 
	#DMA_CH_CTRL_SIGSEL_LEUART_TXEMPTY
 2

	)

539 
	#DMA_CH_CTRL_SIGSEL_I2C_RXDATAV
 0

	)

540 
	#DMA_CH_CTRL_SIGSEL_I2C_TXBL
 1

	)

541 
	#DMA_CH_CTRL_SIGSEL_I2C_RXDATAV
 0

	)

542 
	#DMA_CH_CTRL_SIGSEL_I2C_TXBL
 1

	)

543 
	#DMA_CH_CTRL_SIGSEL_TIMER_UFOF
 0

	)

544 
	#DMA_CH_CTRL_SIGSEL_TIMER_CCx
(
x
Ë
	`DMA_CH_CTRL_SIGSEL
((xË+ 1)

	)

545 
	#DMA_CH_CTRL_SIGSEL_TIMER_CC0
 
	`DMA_CH_CTRL_SIGSEL_TIMER_CCx
(0)

	)

546 
	#DMA_CH_CTRL_SIGSEL_TIMER_CC1
 
	`DMA_CH_CTRL_SIGSEL_TIMER_CCx
(1)

	)

547 
	#DMA_CH_CTRL_SIGSEL_TIMER_CC2
 
	`DMA_CH_CTRL_SIGSEL_TIMER_CCx
(3)

	)

548 
	#DMA_CH_CTRL_SIGSEL_UART_RXDATAV
 0

	)

549 
	#DMA_CH_CTRL_SIGSEL_UART_TXBL
 1

	)

550 
	#DMA_CH_CTRL_SIGSEL_UART_TXEMPTY
 2

	)

551 
	#DMA_CH_CTRL_SIGSEL_MSC_WDATA
 0

	)

552 
	#DMA_CH_CTRL_SIGSEL_AES_DATA_WR
 0

	)

553 
	#DMA_CH_CTRL_SIGSEL_AES_XOR_DATA_WR
 1

	)

554 
	#DMA_CH_CTRL_SIGSEL_AES_DATA_RD
 2

	)

555 
	#DMA_CH_CTRL_SIGSEL_AES_KEY_WR
 3

	)

556 
	#DMA_CH_CTRL_SIGSEL_LESENSE_BUF_DATAV
 0

	)

557 
	#DMA_CH_CTRL_SIGSEL_EBI_PXLx_EMPTY
(
x
Ë
	`DMA_CH_CTRL_SIGSEL
(x)

	)

558 
	#DMA_CH_CTRL_SIGSEL_EBI_PXL0_EMPTY
 \

559 0

	)

560 
	#DMA_CH_CTRL_SIGSEL_EBI_PXL1_EMPTY
 \

561 1

	)

562 
	#DMA_CH_CTRL_SIGSEL_EBI_PXL_FULL
 2

	)

563 
	#DMA_CH_CTRL_SIGSEL_EBI_DD_EMPTY
 3

	)

581 
	#DMA_DESC_CH_SIZE
 (0x4 * 0x4)

	)

582 
	#DMA_DESC_CHx_BASE
(
ba£
, 
x
) \

583 ((
ba£
Ë+ ((
x
Ë* 
DMA_DESC_CH_SIZE
))

	)

584 
	#DMA_DESC_CHx_SRC_DATA_END_PTR
(
ba£
, 
x
) \

585 
	`MMIO32
(
	`DMA_DESC_CHx_BASE
(
ba£
, 
x
Ë+ 0x00)

	)

586 
	#DMA_DESC_CHx_DEST_DATA_END_PTR
(
ba£
, 
x
) \

587 
	`MMIO32
(
	`DMA_DESC_CHx_BASE
(
ba£
, 
x
Ë+ 0x04)

	)

588 
	#DMA_DESC_CHx_CFG
(
ba£
, 
x
) \

589 
	`MMIO32
(
	`DMA_DESC_CHx_BASE
(
ba£
, 
x
Ë+ 0x08)

	)

590 
	#DMA_DESC_CHx_USER_DATA
(
ba£
, 
x
) \

591 
	`MMIO32
(
	`DMA_DESC_CHx_BASE
(
ba£
, 
x
Ë+ 0x0C)

	)

594 
	#DMA_DESC_CH_CFG_DEST_INC_SHIFT
 (30)

	)

595 
	#DMA_DESC_CH_CFG_DEST_INC_MASK
 \

596 (0x3 << 
DMA_DESC_CH_CFG_DEST_INC_SHIFT
)

	)

597 
	#DMA_DESC_CH_CFG_DEST_INC
(
v
) \

598 (((
v
Ë<< 
DMA_DESC_CH_CFG_DEST_INC_SHIFT
) & \

599 
DMA_DESC_CH_CFG_DEST_INC_MASK
)

	)

600 
	#DMA_DESC_CH_CFG_DEST_INC_BYTE
 
	`DMA_DESC_CH_CFG_DEST_INC
(0)

	)

601 
	#DMA_DESC_CH_CFG_DEST_INC_HALFWORD
 
	`DMA_DESC_CH_CFG_DEST_INC
(1)

	)

602 
	#DMA_DESC_CH_CFG_DEST_INC_WORD
 
	`DMA_DESC_CH_CFG_DEST_INC
(2)

	)

603 
	#DMA_DESC_CH_CFG_DEST_INC_NOINC
 
	`DMA_DESC_CH_CFG_DEST_INC
(3)

	)

605 
	#DMA_DESC_CH_CFG_DEST_SIZE_SHIFT
 (28)

	)

606 
	#DMA_DESC_CH_CFG_DEST_SIZE_MASK
 \

607 (0x3 << 
DMA_DESC_CH_CFG_DEST_SIZE_SHIFT
)

	)

608 
	#DMA_DESC_CH_CFG_DEST_SIZE
(
v
) \

609 (((
v
Ë<< 
DMA_DESC_CH_CFG_DEST_SIZE_SHIFT
) & \

610 
DMA_DESC_CH_CFG_DEST_SIZE_MASK
)

	)

611 
	#DMA_DESC_CH_CFG_DEST_SIZE_BYTE
 
	`DMA_DESC_CH_CFG_DEST_SIZE
(0)

	)

612 
	#DMA_DESC_CH_CFG_DEST_SIZE_HALFWORD
 
	`DMA_DESC_CH_CFG_DEST_SIZE
(1)

	)

613 
	#DMA_DESC_CH_CFG_DEST_SIZE_WORD
 
	`DMA_DESC_CH_CFG_DEST_SIZE
(2)

	)

614 
	#DMA_DESC_CH_CFG_DEST_SIZE_NOINC
 
	`DMA_DESC_CH_CFG_DEST_SIZE
(3)

	)

616 
	#DMA_DESC_CH_CFG_SRC_INC_SHIFT
 (26)

	)

617 
	#DMA_DESC_CH_CFG_SRC_INC_MASK
 \

618 (0x3 << 
DMA_DESC_CH_CFG_SRC_INC_SHIFT
)

	)

619 
	#DMA_DESC_CH_CFG_SRC_INC
(
v
) \

620 (((
v
Ë<< 
DMA_DESC_CH_CFG_SRC_INC_SHIFT
) & \

621 
DMA_DESC_CH_CFG_SRC_INC_MASK
)

	)

622 
	#DMA_DESC_CH_CFG_SRC_INC_BYTE
 
	`DMA_DESC_CH_CFG_SRC_INC
(0)

	)

623 
	#DMA_DESC_CH_CFG_SRC_INC_HALFWORD
 
	`DMA_DESC_CH_CFG_SRC_INC
(1)

	)

624 
	#DMA_DESC_CH_CFG_SRC_INC_WORD
 
	`DMA_DESC_CH_CFG_SRC_INC
(2)

	)

625 
	#DMA_DESC_CH_CFG_SRC_INC_NOINC
 
	`DMA_DESC_CH_CFG_SRC_INC
(3)

	)

627 
	#DMA_DESC_CH_CFG_SRC_SIZE_SHIFT
 (24)

	)

628 
	#DMA_DESC_CH_CFG_SRC_SIZE_MASK
 \

629 (0x3 << 
DMA_DESC_CH_CFG_SRC_SIZE_SHIFT
)

	)

630 
	#DMA_DESC_CH_CFG_SRC_SIZE
(
v
) \

631 (((
v
Ë<< 
DMA_DESC_CH_CFG_SRC_SIZE_SHIFT
) & \

632 
DMA_DESC_CH_CFG_SRC_SIZE_MASK
)

	)

633 
	#DMA_DESC_CH_CFG_SRC_SIZE_BYTE
 
	`DMA_DESC_CH_CFG_SRC_SIZE
(0)

	)

634 
	#DMA_DESC_CH_CFG_SRC_SIZE_HALFWORD
 
	`DMA_DESC_CH_CFG_SRC_SIZE
(1)

	)

635 
	#DMA_DESC_CH_CFG_SRC_SIZE_WORD
 
	`DMA_DESC_CH_CFG_SRC_SIZE
(2)

	)

636 
	#DMA_DESC_CH_CFG_SRC_SIZE_NOINC
 
	`DMA_DESC_CH_CFG_SRC_SIZE
(3)

	)

638 
	#DMA_DESC_CH_CFG_R_POWER_SHIFT
 (14)

	)

639 
	#DMA_DESC_CH_CFG_R_POWER_MASK
 \

640 (0xF << 
DMA_DESC_CH_CFG_R_POWER_SHIFT
)

	)

641 
	#DMA_DESC_CH_CFG_R_POWER
(
v
) \

642 (((
v
Ë<< 
DMA_DESC_CH_CFG_R_POWER_SHIFT
) & \

643 
DMA_DESC_CH_CFG_R_POWER_MASK
)

	)

645 
	#DMA_DESC_CH_CFG_CYCLE_CTRL_SHIFT
 (0)

	)

646 
	#DMA_DESC_CH_CFG_CYCLE_CTRL_MASK
 \

647 (0x7 << 
DMA_DESC_CH_CFG_CYCLE_CTRL_SHIFT
)

	)

648 
	#DMA_DESC_CH_CFG_CYCLE_CTRL
(
v
) \

649 (((
v
Ë<< 
DMA_DESC_CH_CFG_CYCLE_CTRL_SHIFT
) & \

650 
DMA_DESC_CH_CFG_CYCLE_CTRL_MASK
)

	)

651 
	#DMA_DESC_CH_CFG_CYCLE_CTRL_INVALD
 \

652 
	`DMA_DESC_CH_CFG_CYCLE_CTRL
(0)

	)

653 
	#DMA_DESC_CH_CFG_CYCLE_CTRL_BASIC
 \

654 
	`DMA_DESC_CH_CFG_CYCLE_CTRL
(1)

	)

655 
	#DMA_DESC_CH_CFG_CYCLE_CTRL_AUTOREQUEST
 \

656 
	`DMA_DESC_CH_CFG_CYCLE_CTRL
(2)

	)

657 
	#DMA_DESC_CH_CFG_CYCLE_CTRL_PINGPONG
 \

658 
	`DMA_DESC_CH_CFG_CYCLE_CTRL
(3)

	)

659 
	#DMA_DESC_CH_CFG_CYCLE_CTRL_MEM_SCAT_GATH_PRIM
 \

660 
	`DMA_DESC_CH_CFG_CYCLE_CTRL
(4)

	)

661 
	#DMA_DESC_CH_CFG_CYCLE_CTRL_MEM_SCAT_GATH_ALT
 \

662 
	`DMA_DESC_CH_CFG_CYCLE_CTRL
(5)

	)

663 
	#DMA_DESC_CH_CFG_CYCLE_CTRL_PERIPH_SCAT_GATH_PRIM
 \

664 
	`DMA_DESC_CH_CFG_CYCLE_CTRL
(6)

	)

665 
	#DMA_DESC_CH_CFG_CYCLE_CTRL_PERIPH_SCAT_GATH_ALT
 \

666 
	`DMA_DESC_CH_CFG_CYCLE_CTRL
(7)

	)

668 
	#DMA_DESC_CH_CFG_DEST_PROT_CTRL_SHIFT
 (21)

	)

669 
	#DMA_DESC_CH_CFG_DEST_PROT_CTRL_MASK
 \

670 (0x7 << 
DMA_DESC_CH_CFG_DEST_PROT_CTRL_SHIFT
)

	)

671 
	#DMA_DESC_CH_CFG_DEST_PROT_CTRL
(
v
) \

672 (((
v
Ë<< 
DMA_DESC_CH_CFG_DEST_PROT_CTRL_SHIFT
) & \

673 
DMA_DESC_CH_CFG_DEST_PROT_CTRL_MASK
)

	)

675 
	#DMA_DESC_CH_CFG_SRC_PROT_CTRL_SHIFT
 (18)

	)

676 
	#DMA_DESC_CH_CFG_SRC_PROT_CTRL_MASK
 \

677 (0x7 << 
DMA_DESC_CH_CFG_SRC_PROT_CTRL_SHIFT
)

	)

678 
	#DMA_DESC_CH_CFG_SRC_PROT_CTRL
(
v
) \

679 (((
v
Ë<< 
DMA_DESC_CH_CFG_SRC_PROT_CTRL_SHIFT
) & \

680 
DMA_DESC_CH_CFG_SRC_PROT_CTRL_SHIFT
)

	)

682 
	#DMA_DESC_CH_CFG_N_MINUS_1_SHIFT
 (4)

	)

683 
	#DMA_DESC_CH_CFG_N_MINUS_1_MASK
 \

684 (0x3FF << 
DMA_DESC_CH_CFG_N_MINUS_1_SHIFT
)

	)

685 
	#DMA_DESC_CH_CFG_N_MINUS_1
(
v
) \

686 (((
v
Ë<< 
DMA_DESC_CH_CFG_N_MINUS_1_SHIFT
) & \

687 
DMA_DESC_CH_CFG_N_MINUS_1_MASK
)

	)

689 
	#DMA_DESC_CH_CFG_NEXT_USEBURST
 (1 << 3)

	)

692 
	sdma_ch™_desc
 {

693 
uöt32_t
 
	m§c_d©a_íd_±r
;

694 
uöt32_t
 
	md°_d©a_íd_±r
;

695 
uöt32_t
 
	mcfg
;

696 
uöt32_t
 
	mu£r_d©a
;

697 } 
__©åibuã__
((
∑cked
));

703 
	edma_ch
 {

704 
	mDMA_CH0
 = 0,

705 
	mDMA_CH1
,

706 
	mDMA_CH2
,

707 
	mDMA_CH3
,

708 
	mDMA_CH4
,

709 
	mDMA_CH5
,

710 
	mDMA_CH6
,

711 
	mDMA_CH7
,

712 
	mDMA_CH8
,

713 
	mDMA_CH9
,

714 
	mDMA_CH10
,

715 
	mDMA_CH11


720 
	edma_mem
 {

721 
	mDMA_MEM_BYTE
 = 0,

722 
	mDMA_MEM_HALF_WORD
,

723 
	mDMA_MEM_WORD
,

724 
	mDMA_MEM_NONE


728 
	edma_mode
 {

729 
	mDMA_MODE_INVALID
 = 0,

730 
	mDMA_MODE_BASIC
,

731 
	mDMA_MODE_AUTO_REQUEST
,

732 
	mDMA_MODE_PING_PONG
,

733 
	mDMA_MODE_MEM_SCAT_GATH_PRIM
,

734 
	mDMA_MODE_MEM_SCAT_GATH_ALT
,

735 
	mDMA_MODE_PERIPH_SCAT_GATH_PRIM
,

736 
	mDMA_MODE_PERIPH_SCAT_GATH_ALT
,

740 
	edma_r_powî
 {

741 
	mDMA_R_POWER_1
 = 0,

742 
	mDMA_R_POWER_2
,

743 
	mDMA_R_POWER_4
,

744 
	mDMA_R_POWER_8
,

745 
	mDMA_R_POWER_16
,

746 
	mDMA_R_POWER_32
,

747 
	mDMA_R_POWER_64
,

748 
	mDMA_R_POWER_128
,

749 
	mDMA_R_POWER_256
,

750 
	mDMA_R_POWER_512
,

751 
	mDMA_R_POWER_1024


754 
BEGIN_DECLS


756 
dma_íabÀ
();

757 
dma_dißbÀ
();

759 
boﬁ
 
dma_gë_waô_⁄_ªque°_Êag
(
dma_ch
 
ch
);

763 
dma_íabÀ_wôh_u≈rivûeged_ac˚ss
();

764 
dma_íabÀ_wôh_¥ivûeged_ac˚ss
();

766 
dma_£t_desc_addªss
(
uöt32_t
 
desc_ba£
);

768 
dma_gíî©e_so·w¨e_ªque°
(
dma_ch
 
ch
);

770 
dma_íabÀ_bur°_⁄ly
(
dma_ch
 
ch
);

771 
dma_íabÀ_sögÀ_™d_bur°
(
dma_ch
 
ch
);

773 
dma_íabÀ_≥rùh_ªque°
(
dma_ch
 
ch
);

774 
dma_dißbÀ_≥rùh_ªque°
(
dma_ch
 
ch
);

776 
dma_íabÀ_ch™√l
(
dma_ch
 
ch
);

777 
dma_dißbÀ_ch™√l
(
dma_ch
 
ch
);

779 
dma_dißbÀ_Æã∫©e_°ru˘uª
(
dma_ch
 
ch
);

780 
dma_íabÀ_Æã∫©e_°ru˘uª
(
dma_ch
 
ch
);

782 
dma_íabÀ_¥i‹ôy
(
dma_ch
 
ch
);

783 
dma_dißbÀ_¥i‹ôy
(
dma_ch
 
ch
);

785 
boﬁ
 
dma_gë_bus_îr‹_Êag
();

786 
dma_˛ór_bus_îr‹_Êag
();

788 
boﬁ
 
dma_gë_ªque°_Êag
(
dma_ch
 
ch
);

792 
boﬁ
 
dma_gë_bus_îr‹_öãºu±_Êag
();

793 
boﬁ
 
dma_gë_d⁄e_öãºu±_Êag
(
dma_ch
 
ch
);

795 
dma_£t_bus_îr‹_öãºu±_Êag
();

796 
dma_£t_d⁄e_öãºu±_Êag
(
dma_ch
 
ch
);

798 
dma_˛ór_bus_îr‹_öãºu±_Êag
();

799 
dma_˛ór_d⁄e_öãºu±_Êag
(
dma_ch
 
ch
);

801 
dma_íabÀ_bus_îr‹_öãºu±
();

802 
dma_dißbÀ_bus_îr‹_öãºu±
();

803 
dma_íabÀ_d⁄e_öãºu±
(
dma_ch
 
ch
);

804 
dma_dißbÀ_d⁄e_öãºu±
(
dma_ch
 
ch
);

808 
dma_£t_sour˚
(
dma_ch
 
ch
, 
uöt32_t
 
sour˚
);

809 
dma_£t_sig«l
(
dma_ch
 
ch
, 
uöt32_t
 
sig«l
);

811 
dma_ch™√l_ª£t
(
dma_ch
 
ch
);

813 
dma_£t_lo›_cou¡
(
dma_ch
 
ch
, 
uöt16_t
 
cou¡
);

814 
dma_íabÀ_lo›
(
dma_ch
 
ch
);

815 
dma_dißbÀ_lo›
(
dma_ch
 
ch
);

818 
dma_desc_£t_de°_size
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

819 
dma_mem
 
size
);

820 
dma_desc_£t_de°_öc
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

821 
dma_mem
 
öc
);

822 
dma_desc_£t_§c_size
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

823 
dma_mem
 
size
);

824 
dma_desc_£t_§c_öc
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

825 
dma_mem
 
öc
);

827 
dma_desc_£t_r_powî
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

828 
dma_r_powî
 
r_powî
);

830 
dma_desc_íabÀ_√xt_u£bur°
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
);

831 
dma_desc_dißbÀ_√xt_u£bur°
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
);

833 
dma_desc_£t_cou¡
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
, 
uöt16_t
 
cou¡
);

835 
dma_desc_£t_u£r_d©a
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

836 
uöt32_t
 
u£r_d©a
);

837 
uöt32_t
 
dma_desc_gë_u£r_d©a
(uöt32_à
desc_ba£
, 
dma_ch
 
ch
);

839 
dma_desc_£t_§c_addªss
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

840 
uöt32_t
 
§c
);

841 
dma_desc_£t_de°_addªss
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

842 
uöt32_t
 
de°
);

844 
dma_desc_£t_mode
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
, 
dma_mode
 
mode
);

848 
	#dma_£t_de°_size
(
ch
, 
size
) \

849 
	`dma_desc_£t_de°_size
(
DMA_CTRLBASE
, 
ch
, 
size
)

	)

850 
	#dma_£t_de°_öc
(
ch
, 
öc
) \

851 
	`dma_desc_£t_de°_öc
(
DMA_CTRLBASE
, 
ch
, 
öc
)

	)

852 
	#dma_£t_§c_size
(
ch
, 
size
) \

853 
	`dma_desc_£t_§c_size
(
DMA_CTRLBASE
, 
ch
, 
size
)

	)

854 
	#dma_£t_§c_öc
(
ch
, 
öc
) \

855 
	`dma_desc_£t_§c_öc
(
DMA_CTRLBASE
, 
ch
, 
öc
)

	)

857 
	#dma_£t_Æt_de°_size
(
ch
, 
size
) \

858 
	`dma_desc_£t_de°_size
(
DMA_ALTCTRLBASE
, 
ch
, 
size
)

	)

859 
	#dma_£t_Æt_de°_öc
(
ch
, 
öc
) \

860 
	`dma_desc_£t_de°_öc
(
DMA_ALTCTRLBASE
, 
ch
, 
öc
)

	)

861 
	#dma_£t_Æt_§c_size
(
ch
, 
size
) \

862 
	`dma_desc_£t_§c_size
(
DMA_ALTCTRLBASE
, 
ch
, 
size
)

	)

863 
	#dma_£t_Æt_§c_öc
(
ch
, 
öc
) \

864 
	`dma_desc_£t_§c_öc
(
DMA_ALTCTRLBASE
, 
ch
, 
öc
)

	)

866 
	#dma_£t_r_powî
(
ch
, 
r_powî
) \

867 
	`dma_desc_£t_r_powî
(
DMA_CTRLBASE
, 
ch
, 
r_powî
)

	)

868 
	#dma_£t_Æt_r_powî
(
ch
, 
r_powî
) \

869 
	`dma_desc_£t_r_powî
(
DMA_ALTCTRLBASE
, 
ch
, 
r_powî
)

	)

871 
	#dma_íabÀ_√xt_u£bur°
(
ch
) \

872 
	`dma_desc_íabÀ_√xt_u£bur°
(
DMA_CTRLBASE
, 
ch
)

	)

873 
	#dma_dißbÀ_√xt_u£bur°
(
ch
) \

874 
	`dma_desc_dißbÀ_√xt_u£bur°
(
DMA_CTRLBASE
, 
ch
)

	)

875 
	#dma_íabÀ_Æt_√xt_u£bur°
(
ch
) \

876 
	`dma_desc_íabÀ_Æt_√xt_u£bur°
(
DMA_CTRLBASE
, 
ch
)

	)

877 
	#dma_dißbÀ_Æt_√xt_u£bur°
(
ch
) \

878 
	`dma_desc_dißbÀ_Æt_√xt_u£bur°
(
DMA_CTRLBASE
, 
ch
)

	)

880 
	#dma_£t_cou¡
(
ch
, 
cou¡
) \

881 
	`dma_desc_£t_cou¡
(
DMA_CTRLBASE
, 
ch
, 
cou¡
)

	)

882 
	#dma_£t_Æt_cou¡
(
ch
, 
cou¡
) \

883 
	`dma_desc_£t_cou¡
(
DMA_ALTCTRLBASE
, 
ch
, 
cou¡
)

	)

885 
	#dma_£t_u£r_d©a
(
ch
, 
u£r_d©a
) \

886 
	`dma_desc_£t_u£r_d©a
(
DMA_CTRLBASE
, 
ch
, 
u£r_d©a
)

	)

887 
	#dma_£t_Æt_u£r_d©a
(
ch
, 
u£r_d©a
) \

888 
	`dma_desc_£t_u£r_d©a
(
DMA_ALTCTRLBASE
, 
ch
, 
u£r_d©a
)

	)

890 
	#dma_gë_u£r_d©a
(
ch
) \

891 
	`dma_desc_gë_u£r_d©a
(
DMA_CTRLBASE
, 
ch
)

	)

892 
	#dma_gë_Æt_u£r_d©a
(
ch
) \

893 
	`dma_desc_gë_u£r_d©a
(
DMA_ALTCTRLBASE
, 
ch
)

	)

895 
	#dma_£t_§c_addªss
(
ch
, 
§c
) \

896 
	`dma_desc_£t_§c_addªss
(
DMA_CTRLBASE
, 
ch
, 
§c
)

	)

897 
	#dma_£t_Æt_§c_addªss
(
ch
, 
§c
) \

898 
	`dma_desc_£t_§c_addªss
(
DMA_ALTCTRLBASE
, 
ch
, 
§c
)

	)

899 
	#dma_£t_de°_addªss
(
ch
, 
de°
) \

900 
	`dma_desc_£t_de°_addªss
(
DMA_CTRLBASE
, 
ch
, 
de°
)

	)

901 
	#dma_£t_Æt_de°_addªss
(
ch
, 
de°
) \

902 
	`dma_desc_£t_de°_addªss
(
DMA_ALTCTRLBASE
, 
ch
, 
de°
)

	)

904 
	#dma_£t_mode
(
ch
, 
mode
) \

905 
	`dma_desc_£t_mode
(
DMA_CTRLBASE
, 
ch
, 
mode
)

	)

906 
	#dma_£t_Æt_mode
(
ch
, 
mode
) \

907 
	`dma_desc_£t_mode
(
DMA_ALTCTRLBASE
, 
ch
, 
mode
)

	)

909 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/common/emu_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_EMU_H


21 
	#LIBOPENCM3_EFM32_EMU_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#EMU_CTRL
 
	`MMIO32
(
EMU_BASE
 + 0x000)

	)

27 
	#EMU_LOCK
 
	`MMIO32
(
EMU_BASE
 + 0x008)

	)

28 
	#EMU_AUXCTRL
 
	`MMIO32
(
EMU_BASE
 + 0x024)

	)

29 
	#EMU_EM4CONF
 
	`MMIO32
(
EMU_BASE
 + 0x02C)

	)

30 
	#EMU_BUCTRL
 
	`MMIO32
(
EMU_BASE
 + 0x030)

	)

31 
	#EMU_PWRCONF
 
	`MMIO32
(
EMU_BASE
 + 0x034)

	)

32 
	#EMU_BUINACT
 
	`MMIO32
(
EMU_BASE
 + 0x038)

	)

33 
	#EMU_BUACT
 
	`MMIO32
(
EMU_BASE
 + 0x03C)

	)

34 
	#EMU_STATUS
 
	`MMIO32
(
EMU_BASE
 + 0x040)

	)

35 
	#EMU_ROUTE
 
	`MMIO32
(
EMU_BASE
 + 0x044)

	)

36 
	#EMU_IF
 
	`MMIO32
(
EMU_BASE
 + 0x048)

	)

37 
	#EMU_IFS
 
	`MMIO32
(
EMU_BASE
 + 0x04C)

	)

38 
	#EMU_IFC
 
	`MMIO32
(
EMU_BASE
 + 0x050)

	)

39 
	#EMU_IEN
 
	`MMIO32
(
EMU_BASE
 + 0x054)

	)

40 
	#EMU_BUBODBUVINCAL
 
	`MMIO32
(
EMU_BASE
 + 0x058)

	)

41 
	#EMU_BUBODUNREGCAL
 
	`MMIO32
(
EMU_BASE
 + 0x05C)

	)

44 
	#EMU_CTRL_EM4CTRL_SHIFT
 (2)

	)

45 
	#EMU_CTRL_EM4CTRL_MASK
 (0x3 << 
EMU_CTRL_EM4CTRL_SHIFT
)

	)

46 
	#EMU_CTLR_EM4CTRL
(
v
) \

47 (((
v
Ë<< 
EMU_CTRL_EM4CTRL_SHIFT
Ë& 
EMU_CTRL_EM4CTRL_MASK
)

	)

49 
	#EMU_CTRL_EM2BLOCK
 (1 << 1)

	)

50 
	#EMU_CTRL_EMVREG
 (1 << 0)

	)

53 
	#EMU_LOCK_LOCKKEY_MASK
 (0xFFFF)

	)

54 
	#EMU_LOCK_LOCKKEY_LOCK
 (0)

	)

55 
	#EMU_LOCK_LOCKKEY_UNLOCK
 (0xADE8)

	)

58 
	#EMU_AUXCTRL_HRCCLR
 (1 << 0)

	)

61 
	#EMU_EM4CONF_LOCKCONF
 (1 << 16)

	)

62 
	#EMU_EM4CONF_BUBODRSTDIS
 (1 << 4)

	)

64 
	#EMU_EM4CONF_OSC_SHIFT
 (2)

	)

65 
	#EMU_EM4CONF_OSC_MASK
 (0x3 << 
EMU_EM4CONF_OSC_SHIFT
)

	)

66 
	#EMU_EM4CONF_OSC
(
v
) \

67 (((
v
Ë<< 
EMU_EM4CONF_OSC_SHIFT
Ë& 
EMU_EM4CONF_OSC_MASK
)

	)

68 
	#EMU_EM4CONF_OSC_ULFRCO
 0

	)

69 
	#EMU_EM4CONF_OSC_LFRCO
 1

	)

70 
	#EMU_EM4CONF_OSC_LFXO
 2

	)

72 
	#EMU_EM4CONF_BURTCWU
 (1 << 1)

	)

73 
	#EMU_EM4CONF_VREGEN
 (1 << 0)

	)

76 
	#EMU_BUCTRL_PROBE_SHIFT
 (5)

	)

77 
	#EMU_BUCTRL_PROBE_MASK
 (0x3 << 
EMU_BUCTRL_PROBE_SHIFT
)

	)

78 
	#EMU_BUCTRL_PROBE
(
v
) \

79 (((
v
Ë<< 
EMU_BUCTRL_PROBE_SHIFT
Ë& 
EMU_BUCTRL_PROBE_MASK
)

	)

80 
	#EMU_BUCTRL_PROBE_DISABLE
 0

	)

81 
	#EMU_BUCTRL_PROBE_VDDDREG
 1

	)

82 
	#EMU_BUCTRL_PROBE_BUIN
 2

	)

83 
	#EMU_BUCTRL_PROBE_BUOUT
 3

	)

85 
	#EMU_BUCTRL_BUMODEBODEN
 (1 << 3)

	)

86 
	#EMU_BUCTRL_BODCAL
 (1 << 2)

	)

87 
	#EMU_BUCTRL_STATEN
 (1 << 1)

	)

88 
	#EMU_BUCTRL_EN
 (1 << 0)

	)

91 
	#EMU_PWRCONF_PWRRES_SHIFT
 (3)

	)

92 
	#EMU_PWRCONF_PWRRES_MASK
 (0x3 << 
EMU_PWRCONF_PWRRES_SHIFT
)

	)

93 
	#EMU_PWRCONF_PWRRES
(
v
) \

94 (((
v
Ë<< 
EMU_PWRCONF_PWRRES_SHIFT
Ë& 
EMU_PWRCONF_PWRRES_MASK
)

	)

95 
	#EMU_PWRCONF_PWRRES_DISABLE
 0

	)

96 
	#EMU_PWRCONF_PWRRES_VDDDREG
 1

	)

97 
	#EMU_PWRCONF_PWRRES_BUIN
 2

	)

98 
	#EMU_PWRCONF_PWRRES_BUOUT
 3

	)

100 
	#EMU_PWRCONF_VOUTSTRONG
 (1 << 2)

	)

101 
	#EMU_PWRCONF_VOUTMED
 (1 << 1)

	)

102 
	#EMU_PWRCONF_VOUTWEAK
 (1 << 0)

	)

105 
	#EMU_BUINACT_PWRCON_SHIFT
 (5)

	)

106 
	#EMU_BUINACT_PWRCON_MASK
 (0x3 << 
EMU_BUINACT_PWRCON_SHIFT
)

	)

107 
	#EMU_BUINACT_PWRCON
(
v
) \

108 (((
v
Ë<< 
EMU_BUINACT_PWRCON_SHIFT
Ë& 
EMU_BUINACT_PWRCON_MASK
)

	)

109 
	#EMU_BUINACT_PWRCON_NONE
 0

	)

110 
	#EMU_BUINACT_PWRCON_BUMAIN
 1

	)

111 
	#EMU_BUINACT_PWRCON_MAINBU
 2

	)

112 
	#EMU_BUINACT_PWRCON_NODIODE
 3

	)

114 
	#EMU_BUINACT_BUENRANGE_SHIFT
 (3)

	)

115 
	#EMU_BUINACT_BUENRANGE_MASK
 (0x3 << 
EMU_BUINACT_BUENRANGE_SHIFT
)

	)

116 
	#EMU_BUINACT_BUENRANGE
(
v
) \

117 (((
v
Ë<< 
EMU_BUINACT_BUENRANGE_SHIFT
Ë& 
EMU_BUINACT_BUENRANGE_MASK
)

	)

119 
	#EMU_BUINACT_BUENTHRES_SHIFT
 (0)

	)

120 
	#EMU_BUINACT_BUENTHRES_MASK
 (0x7 << 
EMU_BUINACT_BUENTHRES_SHIFT
)

	)

121 
	#EMU_BUINACT_BUENTHRES
(
v
) \

122 (((
v
Ë<< 
EMU_BUINACT_BUENTHRES_SHIFT
Ë& 
EMU_BUINACT_BUENTHRES_MASK
)

	)

125 
	#EMU_BUACT_PWRCON_SHIFT
 (5)

	)

126 
	#EMU_BUACT_PWRCON_MASK
 (0x3 << 
EMU_BUACT_PWRCON_SHIFT
)

	)

127 
	#EMU_BUACT_PWRCON
(
v
) \

128 (((
v
Ë<< 
EMU_BUACT_PWRCON_SHIFT
Ë& 
EMU_BUACT_PWRCON_MASK
)

	)

129 
	#EMU_BUACT_PWRCON_NONE
 0

	)

130 
	#EMU_BUACT_PWRCON_BUMAIN
 1

	)

131 
	#EMU_BUACT_PWRCON_MAINBU
 2

	)

132 
	#EMU_BUACT_PWRCON_NODIODE
 3

	)

134 
	#EMU_BUACT_BUEXRANGE_SHIFT
 (3)

	)

135 
	#EMU_BUACT_BUEXRANGE_MASK
 (0x3 << 
EMU_BUACT_BUEXRANGE_SHIFT
)

	)

136 
	#EMU_BUACT_BUEXRANGE
(
v
) \

137 (((
v
Ë<< 
EMU_BUACT_BUEXRANGE_SHIFT
Ë& 
EMU_BUACT_BUEXRANGE_MASK
)

	)

139 
	#EMU_BUACT_BUEXTHRES_SHIFT
 (0)

	)

140 
	#EMU_BUACT_BUEXTHRES_MASK
 (0x7 << 
EMU_BUACT_BUEXTHRES_SHIFT
)

	)

141 
	#EMU_BUACT_BUEXTHRES
(
v
) \

142 (((
v
Ë<< 
EMU_BUACT_BUEXTHRES_SHIFT
Ë& 
EMU_BUACT_BUEXTHRES_MASK
)

	)

145 
	#EMU_STATUS_BURDY
 (1 << 0)

	)

148 
	#EMU_ROUTE_BUVINPEN
 (1 << 0)

	)

151 
	#EMU_IF_BURDY
 (1 << 0)

	)

154 
	#EMU_IFS_BURDY
 (1 << 0)

	)

157 
	#EMU_IFC_BURDY
 (1 << 0)

	)

160 
	#EMU_IEN_BURDY
 (1 << 0)

	)

163 
	#EMU_BUBODBUVINCAL_RANGE_SHIFT
 (3)

	)

164 
	#EMU_BUBODBUVINCAL_RANGE_MASK
 (0x3 << 
EMU_BUBODBUVINCAL_RANGE_SHIFT
)

	)

165 
	#EMU_BUBODBUVINCAL_RANGE
(
v
) \

166 (((
v
Ë<< 
EMU_BUBODBUVINCAL_RANGE_SHIFT
) & \

167 
EMU_BUBODBUVINCAL_RANGE_MASK
)

	)

169 
	#EMU_BUBODBUVINCAL_THRES_SHIFT
 (0)

	)

170 
	#EMU_BUBODBUVINCAL_THRES_MASK
 (0x7 << 
EMU_BUBODBUVINCAL_THRES_SHIFT
)

	)

171 
	#EMU_BUBODBUVINCAL_THRES
(
v
) \

172 (((
v
Ë<< 
EMU_BUBODBUVINCAL_THRES_SHIFT
) & \

173 
EMU_BUBODBUVINCAL_THRES_MASK
)

	)

176 
	#EMU_BUBODUNREGCAL_RANGE_SHIFT
 (3)

	)

177 
	#EMU_BUBODUNREGCAL_RANGE_MASK
 (0x3 << 
EMU_BUBODUNREGCAL_RANGE_SHIFT
)

	)

178 
	#EMU_BUBODUNREGCAL_RANGE
(
v
) \

179 (((
v
Ë<< 
EMU_BUBODUNREGCAL_RANGE_SHIFT
) & \

180 
EMU_BUBODUNREGCAL_RANGE_MASK
)

	)

182 
	#EMU_BUBODUNREGCAL_THRES_SHIFT
 (0)

	)

183 
	#EMU_BUBODUNREGCAL_THRES_MASK
 (0x7 << 
EMU_BUBODUNREGCAL_THRES_SHIFT
)

	)

184 
	#EMU_BUBODUNREGCAL_THRES
(
v
) \

185 (((
v
Ë<< 
EMU_BUBODUNREGCAL_THRES_SHIFT
) & \

186 
EMU_BUBODUNREGCAL_THRES_MASK
)

	)

	@libopencm3/include/libopencm3/efm32/common/gpio_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_GPIO_H


21 
	#LIBOPENCM3_EFM32_GPIO_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#GPIO_P
(
i
Ë(
GPIO_BASE
 + (0x24 * (i)))

	)

27 
	#GPIO_PA
 
	`GPIO_P
(0)

	)

28 
	#GPIO_PB
 
	`GPIO_P
(1)

	)

29 
	#GPIO_PC
 
	`GPIO_P
(2)

	)

30 
	#GPIO_PD
 
	`GPIO_P
(3)

	)

31 
	#GPIO_PE
 
	`GPIO_P
(4)

	)

32 
	#GPIO_PF
 
	`GPIO_P
(5)

	)

34 
	#GPIO_P_CTRL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00)

	)

35 
	#GPIO_PA_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PA
)

	)

36 
	#GPIO_PB_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PB
)

	)

37 
	#GPIO_PC_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PC
)

	)

38 
	#GPIO_PD_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PD
)

	)

39 
	#GPIO_PE_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PE
)

	)

40 
	#GPIO_PF_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PF
)

	)

42 
	#GPIO_P_CTRL_DRIVEMODE_SHIFT
 (0)

	)

43 
	#GPIO_P_CTRL_DRIVEMODE_MASK
 (0x03 << 
GPIO_P_CTRL_DRIVEMODE_SHIFT
)

	)

44 
	#GPIO_P_CTRL_DRIVEMODE
(
v
) \

45 (((
v
Ë<< 
GPIO_P_CTRL_DRIVEMODE_SHIFT
Ë& 
GPIO_P_CTRL_DRIVEMODE_MASK
)

	)

46 
	#GPIO_P_CTRL_DRIVEMODE_STANDARD
 0

	)

47 
	#GPIO_P_CTRL_DRIVEMODE_LOWEST
 1

	)

48 
	#GPIO_P_CTRL_DRIVEMODE_HIGH
 2

	)

49 
	#GPIO_P_CTRL_DRIVEMODE_LOW
 3

	)

53 
	#GPIO_P_MODE_MODEx_MASK
(
x
Ë(0x0F << (((xË& 0x7Ë* 4))

	)

55 
	#GPIO_P_MODE_MODEx
(
x
, 
mode
) \

56 (((
mode
Ë<< (((
x
Ë& 0x7Ë* 4)Ë& 
	`GPIO_P_MODE_MODEx_MASK
(x))

	)

58 
	#GPIO_P_MODEL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x04)

	)

59 
	#GPIO_PA_MODEL
 
	`GPIO_P_MODEL
(
GPIO_PA
)

	)

60 
	#GPIO_PB_MODEL
 
	`GPIO_P_MODEL
(
GPIO_PB
)

	)

61 
	#GPIO_PC_MODEL
 
	`GPIO_P_MODEL
(
GPIO_PC
)

	)

62 
	#GPIO_PD_MODEL
 
	`GPIO_P_MODEL
(
GPIO_PD
)

	)

63 
	#GPIO_PE_MODEL
 
	`GPIO_P_MODEL
(
GPIO_PE
)

	)

65 
	#GPIO_P_MODEL_MODEx_MASK
(
x
Ë
	`GPIO_P_MODE_MODEx_MASK
(x)

	)

66 
	#GPIO_P_MODEL_MODEx
(
x
, 
mode
Ë
	`GPIO_P_MODE_MODEx
(x, mode)

	)

68 
	#GPIO_P_MODEL_MODE0_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(0)

	)

69 
	#GPIO_P_MODEL_MODE0
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(0, mode)

	)

71 
	#GPIO_P_MODEL_MODE1_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(1)

	)

72 
	#GPIO_P_MODEL_MODE1
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(1, mode)

	)

74 
	#GPIO_P_MODEL_MODE2_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(2)

	)

75 
	#GPIO_P_MODEL_MODE2
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(2, mode)

	)

77 
	#GPIO_P_MODEL_MODE3_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(3)

	)

78 
	#GPIO_P_MODEL_MODE3
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(3, mode)

	)

80 
	#GPIO_P_MODEL_MODE4_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(4)

	)

81 
	#GPIO_P_MODEL_MODE4
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(4, mode)

	)

83 
	#GPIO_P_MODEL_MODE5_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(5)

	)

84 
	#GPIO_P_MODEL_MODE5
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(5, mode)

	)

86 
	#GPIO_P_MODEL_MODE6_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(6)

	)

87 
	#GPIO_P_MODEL_MODE6
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(6, mode)

	)

89 
	#GPIO_P_MODEL_MODE7_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(7)

	)

90 
	#GPIO_P_MODEL_MODE7
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(7, mode)

	)

92 
	#GPIO_P_MODEH
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x08)

	)

93 
	#GPIO_PA_MODEH
 
	`GPIO_P_MODEH
(
GPIO_PA
)

	)

94 
	#GPIO_PB_MODEH
 
	`GPIO_P_MODEH
(
GPIO_PB
)

	)

95 
	#GPIO_PC_MODEH
 
	`GPIO_P_MODEH
(
GPIO_PC
)

	)

96 
	#GPIO_PD_MODEH
 
	`GPIO_P_MODEH
(
GPIO_PD
)

	)

97 
	#GPIO_PE_MODEH
 
	`GPIO_P_MODEH
(
GPIO_PE
)

	)

100 
	#GPIO_P_MODEH_MODEx_MASK
(
x
Ë
	`GPIO_P_MODE_MODEx_MASK
((xË- 8)

	)

101 
	#GPIO_P_MODEH_MODEx
(
x
, 
mode
Ë
	`GPIO_P_MODE_MODEx
((xË- 8, mode)

	)

103 
	#GPIO_P_MODEH_MODE8_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(8)

	)

104 
	#GPIO_P_MODEH_MODE8
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(8, mode)

	)

106 
	#GPIO_P_MODEH_MODE9_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(9)

	)

107 
	#GPIO_P_MODEH_MODE9
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(9, mode)

	)

109 
	#GPIO_P_MODEH_MODE10_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(10)

	)

110 
	#GPIO_P_MODEH_MODE10
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(10, mode)

	)

112 
	#GPIO_P_MODEH_MODE11_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(11)

	)

113 
	#GPIO_P_MODEH_MODE11
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(11, mode)

	)

115 
	#GPIO_P_MODEH_MODE12_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(12)

	)

116 
	#GPIO_P_MODEH_MODE12
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(12, mode)

	)

118 
	#GPIO_P_MODEH_MODE13_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(13)

	)

119 
	#GPIO_P_MODEH_MODE13
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(13, mode)

	)

121 
	#GPIO_P_MODEH_MODE14_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(14)

	)

122 
	#GPIO_P_MODEH_MODE14
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(14, mode)

	)

124 
	#GPIO_P_MODEH_MODE15_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(15)

	)

125 
	#GPIO_P_MODEH_MODE15
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(15, mode)

	)

127 
	#GPIO_P_DOUT
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0C)

	)

128 
	#GPIO_PA_DOUT
 
	`GPIO_P_DOUT
(
GPIO_PA
)

	)

129 
	#GPIO_PB_DOUT
 
	`GPIO_P_DOUT
(
GPIO_PB
)

	)

130 
	#GPIO_PC_DOUT
 
	`GPIO_P_DOUT
(
GPIO_PC
)

	)

131 
	#GPIO_PD_DOUT
 
	`GPIO_P_DOUT
(
GPIO_PD
)

	)

132 
	#GPIO_PE_DOUT
 
	`GPIO_P_DOUT
(
GPIO_PE
)

	)

134 
	#GPIO_P_DOUTSET
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x10)

	)

135 
	#GPIO_PA_DOUTSET
 
	`GPIO_P_DOUTSET
(
GPIO_PA
)

	)

136 
	#GPIO_PB_DOUTSET
 
	`GPIO_P_DOUTSET
(
GPIO_PB
)

	)

137 
	#GPIO_PC_DOUTSET
 
	`GPIO_P_DOUTSET
(
GPIO_PC
)

	)

138 
	#GPIO_PD_DOUTSET
 
	`GPIO_P_DOUTSET
(
GPIO_PD
)

	)

139 
	#GPIO_PE_DOUTSET
 
	`GPIO_P_DOUTSET
(
GPIO_PE
)

	)

141 
	#GPIO_P_DOUTCLR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x14)

	)

142 
	#GPIO_PA_DOUTCLR
 
	`GPIO_P_DOUTCLR
(
GPIO_PA
)

	)

143 
	#GPIO_PB_DOUTCLR
 
	`GPIO_P_DOUTCLR
(
GPIO_PB
)

	)

144 
	#GPIO_PC_DOUTCLR
 
	`GPIO_P_DOUTCLR
(
GPIO_PC
)

	)

145 
	#GPIO_PD_DOUTCLR
 
	`GPIO_P_DOUTCLR
(
GPIO_PD
)

	)

146 
	#GPIO_PE_DOUTCLR
 
	`GPIO_P_DOUTCLR
(
GPIO_PE
)

	)

148 
	#GPIO_P_DOUTTGL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x18)

	)

149 
	#GPIO_PA_DOUTTGL
 
	`GPIO_P_DOUTTGL
(
GPIO_PA
)

	)

150 
	#GPIO_PB_DOUTTGL
 
	`GPIO_P_DOUTTGL
(
GPIO_PB
)

	)

151 
	#GPIO_PC_DOUTTGL
 
	`GPIO_P_DOUTTGL
(
GPIO_PC
)

	)

152 
	#GPIO_PD_DOUTTGL
 
	`GPIO_P_DOUTTGL
(
GPIO_PD
)

	)

153 
	#GPIO_PE_DOUTTGL
 
	`GPIO_P_DOUTTGL
(
GPIO_PE
)

	)

155 
	#GPIO_P_DIN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x1C)

	)

156 
	#GPIO_PA_DIN
 
	`GPIO_P_DIN
(
GPIO_PA
)

	)

157 
	#GPIO_PB_DIN
 
	`GPIO_P_DIN
(
GPIO_PB
)

	)

158 
	#GPIO_PC_DIN
 
	`GPIO_P_DIN
(
GPIO_PC
)

	)

159 
	#GPIO_PD_DIN
 
	`GPIO_P_DIN
(
GPIO_PD
)

	)

160 
	#GPIO_PE_DIN
 
	`GPIO_P_DIN
(
GPIO_PE
)

	)

162 
	#GPIO_P_PINLOCKN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x20)

	)

163 
	#GPIO_PA_PINLOCKN
 
	`GPIO_P_PINLOCKN
(
GPIO_PA
)

	)

164 
	#GPIO_PB_PINLOCKN
 
	`GPIO_P_PINLOCKN
(
GPIO_PB
)

	)

165 
	#GPIO_PC_PINLOCKN
 
	`GPIO_P_PINLOCKN
(
GPIO_PC
)

	)

166 
	#GPIO_PD_PINLOCKN
 
	`GPIO_P_PINLOCKN
(
GPIO_PD
)

	)

167 
	#GPIO_PE_PINLOCKN
 
	`GPIO_P_PINLOCKN
(
GPIO_PE
)

	)

169 
	#GPIO_EXTIPSELL
 
	`MMIO32
(
GPIO_BASE
 + 0x100)

	)

170 
	#GPIO_EXTIPSELH
 
	`MMIO32
(
GPIO_BASE
 + 0x104)

	)

171 
	#GPIO_EXTIRISE
 
	`MMIO32
(
GPIO_BASE
 + 0x108)

	)

172 
	#GPIO_EXTIFALL
 
	`MMIO32
(
GPIO_BASE
 + 0x10C)

	)

173 
	#GPIO_IEN
 
	`MMIO32
(
GPIO_BASE
 + 0x110)

	)

174 
	#GPIO_IF
 
	`MMIO32
(
GPIO_BASE
 + 0x114)

	)

175 
	#GPIO_IFS
 
	`MMIO32
(
GPIO_BASE
 + 0x118)

	)

176 
	#GPIO_IFC
 
	`MMIO32
(
GPIO_BASE
 + 0x11C)

	)

177 
	#GPIO_ROUTE
 
	`MMIO32
(
GPIO_BASE
 + 0x120)

	)

178 
	#GPIO_INSENSE
 
	`MMIO32
(
GPIO_BASE
 + 0x124)

	)

179 
	#GPIO_LOCK
 
	`MMIO32
(
GPIO_BASE
 + 0x128)

	)

180 
	#GPIO_CTRL
 
	`MMIO32
(
GPIO_BASE
 + 0x12C)

	)

181 
	#GPIO_CMD
 
	`MMIO32
(
GPIO_BASE
 + 0x130)

	)

182 
	#GPIO_EM4WUEN
 
	`MMIO32
(
GPIO_BASE
 + 0x134)

	)

183 
	#GPIO_EM4WUPOL
 
	`MMIO32
(
GPIO_BASE
 + 0x138)

	)

184 
	#GPIO_EM4WUCAUSE
 
	`MMIO32
(
GPIO_BASE
 + 0x13C)

	)

187 
	#GPIO_EXTIPSEL_MASK
(
n
Ë(0x7 << (“Ë& 0xF))

	)

188 
	#GPIO_EXTIPSEL_PORTMASK
(
n
, 
v
Ë((vË<< (“Ë& 0xF))

	)

189 
	#GPIO_EXTIPSEL_PORTA
 0x0

	)

190 
	#GPIO_EXTIPSEL_PORTB
 0x1

	)

191 
	#GPIO_EXTIPSEL_PORTC
 0x2

	)

192 
	#GPIO_EXTIPSEL_PORTD
 0x3

	)

193 
	#GPIO_EXTIPSEL_PORTE
 0x4

	)

194 
	#GPIO_EXTIPSEL_PORTF
 0x5

	)

196 
	#GPIO_ROUTE_SWCLKPEN
 (1 << 0)

	)

197 
	#GPIO_ROUTE_SWDIOPEN
 (1 << 1)

	)

198 
	#GPIO_ROUTE_SWOPEN
 (1 << 3)

	)

200 
	#GPIO_ROUTE_SWLOCATION_SHIFT
 (8)

	)

201 
	#GPIO_ROUTE_SWLOCATION_MASK
 (0x3 << 
GPIO_ROUTE_SWLOCATION_SHIFT
)

	)

202 
	#GPIO_ROUTE_SWLOCATION
(
v
) \

203 (((
v
Ë<< 
GPIO_ROUTE_SWLOCATION_SHIFT
Ë& 
GPIO_ROUTE_SWLOCATION_MASK
)

	)

205 
	#GPIO_ROUTE_TCLKPEN
 (1 << 12)

	)

206 
	#GPIO_ROUTE_TD0PEN
 (1 << 13)

	)

207 
	#GPIO_ROUTE_TD1PEN
 (1 << 14)

	)

208 
	#GPIO_ROUTE_TD2PEN
 (1 << 15)

	)

209 
	#GPIO_ROUTE_TD3PEN
 (1 << 16)

	)

211 
	#GPIO_ROUTE_ETMLOCATION_SHIFT
 (24)

	)

212 
	#GPIO_ROUTE_ETMLOCATION_MASK
 (0x3 << 
GPIO_ROUTE_ETMLOCATION_SHIFT
)

	)

213 
	#GPIO_ROUTE_ETMLOCATION
(
v
) \

214 (((
v
Ë<< 
GPIO_ROUTE_ETMLOCATION_SHIFT
Ë& 
GPIO_ROUTE_ETMLOCATION_MASK
)

	)

215 
	#GPIO_ROUTE_ETMLOCATION_LOCx
(
x
Ë
	`GPIO_ROUTE_ETMLOCATION
(x)

	)

216 
	#GPIO_ROUTE_ETMLOCATION_LOC0
 0

	)

217 
	#GPIO_ROUTE_ETMLOCATION_LOC1
 1

	)

218 
	#GPIO_ROUTE_ETMLOCATION_LOC2
 2

	)

219 
	#GPIO_ROUTE_ETMLOCATION_LOC3
 3

	)

221 
	#GPIO_INSENSE_INT
 (1 << 0)

	)

222 
	#GPIO_INSENSE_PRS
 (1 << 1)

	)

224 
	#GPIO_LOCK_LOCKKEY_SHIFT
 (0)

	)

225 
	#GPIO_LOCK_LOCKKEY_MASK
 (0xFFFF << 
GPIO_LOCK_LOCKKEY_SHIFT
)

	)

226 
	#GPIO_LOCK_LOCKKEY_UNLOCKED
 (0x0000 << 
GPIO_LOCK_LOCKKEY_SHIFT
)

	)

227 
	#GPIO_LOCK_LOCKKEY_LOCKED
 (0x0001 << 
GPIO_LOCK_LOCKKEY_SHIFT
)

	)

228 
	#GPIO_LOCK_LOCKKEY_LOCK
 (0x0000 << 
GPIO_LOCK_LOCKKEY_SHIFT
)

	)

229 
	#GPIO_LOCK_LOCKKEY_UNLOCK
 (0xA534 << 
GPIO_LOCK_LOCKKEY_SHIFT
)

	)

231 
	#GPIO_CTRL_EM4RET
 (1 << 0)

	)

233 
	#GPIO_CMD_EM4WUCLR
 (1 << 0)

	)

235 
	#GPIO_EM4WUEN_EM4WUEN_A0
 (1 << 0)

	)

236 
	#GPIO_EM4WUEN_EM4WUEN_A6
 (1 << 1)

	)

237 
	#GPIO_EM4WUEN_EM4WUEN_C9
 (1 << 2)

	)

238 
	#GPIO_EM4WUEN_EM4WUEN_F1
 (1 << 3)

	)

239 
	#GPIO_EM4WUEN_EM4WUEN_F2
 (1 << 4)

	)

240 
	#GPIO_EM4WUEN_EM4WUEN_E13
 (1 << 5)

	)

242 
	#GPIO_EM4WUPOL_EM4WUPOL_A0
 (1 << 0)

	)

243 
	#GPIO_EM4WUPOL_EM4WUPOL_A6
 (1 << 1)

	)

244 
	#GPIO_EM4WUPOL_EM4WUPOL_C9
 (1 << 2)

	)

245 
	#GPIO_EM4WUPOL_EM4WUPOL_F1
 (1 << 3)

	)

246 
	#GPIO_EM4WUPOL_EM4WUPOL_F2
 (1 << 4)

	)

247 
	#GPIO_EM4WUPOL_EM4WUPOL_E13
 (1 << 5)

	)

249 
	#GPIO0
 (1 << 0)

	)

250 
	#GPIO1
 (1 << 1)

	)

251 
	#GPIO2
 (1 << 2)

	)

252 
	#GPIO3
 (1 << 3)

	)

253 
	#GPIO4
 (1 << 4)

	)

254 
	#GPIO5
 (1 << 5)

	)

255 
	#GPIO6
 (1 << 6)

	)

256 
	#GPIO7
 (1 << 7)

	)

257 
	#GPIO8
 (1 << 8)

	)

258 
	#GPIO9
 (1 << 9)

	)

259 
	#GPIO10
 (1 << 10)

	)

260 
	#GPIO11
 (1 << 11)

	)

261 
	#GPIO12
 (1 << 12)

	)

262 
	#GPIO13
 (1 << 13)

	)

263 
	#GPIO14
 (1 << 14)

	)

264 
	#GPIO15
 (1 << 15)

	)

265 
	#GPIO_ALL
 (0xFFFF)

	)

271 
	egpio_mode
 {

272 
	mGPIO_MODE_DISABLE
 = 0,

273 
	mGPIO_MODE_INPUT
,

274 
	mGPIO_MODE_INPUT_PULL
,

275 
	mGPIO_MODE_INPUT_PULL_FILTER
,

276 
	mGPIO_MODE_PUSH_PULL
,

277 
	mGPIO_MODE_PUSH_PULL_DRIVE
,

278 
	mGPIO_MODE_WIRED_OR
,

279 
	mGPIO_MODE_WIRED_OR_PULL_DOWN
,

280 
	mGPIO_MODE_WIRED_AND
,

281 
	mGPIO_MODE_WIRED_AND_FILTER
,

282 
	mGPIO_MODE_WIRED_AND_PULLUP
,

283 
	mGPIO_MODE_WIRED_AND_PULLUP_FILTER
,

284 
	mGPIO_MODE_WIRED_AND_DRIVE
,

285 
	mGPIO_MODE_WIRED_AND_DRIVE_FILTER
,

286 
	mGPIO_MODE_WIRED_AND_DRIVE_PULLUP
,

287 
	mGPIO_MODE_WIRED_AND_DRIVE_PULLUP_FILTER


291 
	egpio_drive_°ªngth
 {

292 
	mGPIO_STRENGTH_STANDARD
 = 0,

293 
	mGPIO_STRENGTH_LOWEST
,

294 
	mGPIO_STRENGTH_HIGH
,

295 
	mGPIO_STRENGTH_LOW


299 
	#GPIOA
 
GPIO_PA


	)

300 
	#GPIOB
 
GPIO_PB


	)

301 
	#GPIOC
 
GPIO_PC


	)

302 
	#GPIOD
 
GPIO_PD


	)

303 
	#GPIOE
 
GPIO_PE


	)

304 
	#GPIOF
 
GPIO_PF


	)

308 
BEGIN_DECLS


310 
gpio_íabÀ_lock
();

311 
gpio_dißbÀ_lock
();

312 
boﬁ
 
gpio_gë_lock_Êag
();

314 
gpio_£t_drive_°ªngth
(
uöt32_t
 
gpio_p‹t
,

315 
gpio_drive_°ªngth
 
drivî_°ígth
);

316 
gpio_mode_£tup
(
uöt32_t
 
gpio_p‹t
, 
gpio_mode
 
mode
, 
uöt16_t
 
gpios
);

318 
gpio_£t
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
);

319 
gpio_˛ór
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
);

320 
uöt16_t
 
gpio_gë
(
uöt32_t
 
gpio_p‹t
, uöt16_à
gpios
);

321 
gpio_toggÀ
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
);

322 
uöt16_t
 
gpio_p‹t_ªad
(
uöt32_t
 
gpio_p‹t
);

323 
gpio_p‹t_wrôe
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
d©a
);

325 
gpio_p‹t_c⁄fig_lock
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
);

327 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/common/gpio_common_hglg.h

21 #i‡
deföed
(
LIBOPENCM3_GPIO_H
)

23 #i‚de‡
LIBOPENCM3_EFM32_GPIO_COMMON_HGLG_H


24 
	#LIBOPENCM3_EFM32_GPIO_COMMON_HGLG_H


	)

26 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

27 
	~<lib›ícm3/cm3/comm⁄.h
>

29 
	#GPIO_P
(
i
Ë(
GPIO_BASE
 + (0x24 * (i)))

	)

30 
	#GPIO_PA
 
	`GPIO_P
(0)

	)

31 
	#GPIO_PB
 
	`GPIO_P
(1)

	)

32 
	#GPIO_PC
 
	`GPIO_P
(2)

	)

33 
	#GPIO_PD
 
	`GPIO_P
(3)

	)

34 
	#GPIO_PE
 
	`GPIO_P
(4)

	)

35 
	#GPIO_PF
 
	`GPIO_P
(5)

	)

37 
	#GPIO_P_CTRL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00)

	)

38 
	#GPIO_PA_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PA
)

	)

39 
	#GPIO_PB_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PB
)

	)

40 
	#GPIO_PC_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PC
)

	)

41 
	#GPIO_PD_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PD
)

	)

42 
	#GPIO_PE_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PE
)

	)

43 
	#GPIO_PF_CTRL
 
	`GPIO_P_CTRL
(
GPIO_PF
)

	)

45 
	#GPIO_P_CTRL_DRIVEMODE_SHIFT
 (0)

	)

46 
	#GPIO_P_CTRL_DRIVEMODE_MASK
 (0x03 << 
GPIO_P_CTRL_DRIVEMODE_SHIFT
)

	)

47 
	#GPIO_P_CTRL_DRIVEMODE
(
v
) \

48 (((
v
Ë<< 
GPIO_P_CTRL_DRIVEMODE_SHIFT
Ë& 
GPIO_P_CTRL_DRIVEMODE_MASK
)

	)

49 
	#GPIO_P_CTRL_DRIVEMODE_STANDARD
 
	`GPIO_P_CTRL_DRIVEMODE
(0)

	)

50 
	#GPIO_P_CTRL_DRIVEMODE_LOWEST
 
	`GPIO_P_CTRL_DRIVEMODE
(1)

	)

51 
	#GPIO_P_CTRL_DRIVEMODE_HIGH
 
	`GPIO_P_CTRL_DRIVEMODE
(2)

	)

52 
	#GPIO_P_CTRL_DRIVEMODE_LOW
 
	`GPIO_P_CTRL_DRIVEMODE
(3)

	)

56 
	#GPIO_P_MODE_MODEx_MASK
(
x
Ë(0x0F << (((xË& 0x7Ë* 4))

	)

58 
	#GPIO_P_MODE_MODEx
(
x
, 
mode
) \

59 (((
mode
Ë<< (((
x
Ë& 0x7Ë* 4)Ë& 
	`GPIO_P_MODE_MODEx_MASK
(x))

	)

61 
	#GPIO_P_MODEL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x04)

	)

62 
	#GPIO_PA_MODEL
 
	`GPIO_P_MODEL
(
GPIO_PA
)

	)

63 
	#GPIO_PB_MODEL
 
	`GPIO_P_MODEL
(
GPIO_PB
)

	)

64 
	#GPIO_PC_MODEL
 
	`GPIO_P_MODEL
(
GPIO_PC
)

	)

65 
	#GPIO_PD_MODEL
 
	`GPIO_P_MODEL
(
GPIO_PD
)

	)

66 
	#GPIO_PE_MODEL
 
	`GPIO_P_MODEL
(
GPIO_PE
)

	)

68 
	#GPIO_P_MODEL_MODEx_MASK
(
x
Ë
	`GPIO_P_MODE_MODEx_MASK
(x)

	)

69 
	#GPIO_P_MODEL_MODEx
(
x
, 
mode
Ë
	`GPIO_P_MODE_MODEx
(x, mode)

	)

71 
	#GPIO_P_MODEL_MODE0_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(0)

	)

72 
	#GPIO_P_MODEL_MODE0
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(0, mode)

	)

74 
	#GPIO_P_MODEL_MODE1_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(1)

	)

75 
	#GPIO_P_MODEL_MODE1
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(1, mode)

	)

77 
	#GPIO_P_MODEL_MODE2_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(2)

	)

78 
	#GPIO_P_MODEL_MODE2
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(2, mode)

	)

80 
	#GPIO_P_MODEL_MODE3_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(3)

	)

81 
	#GPIO_P_MODEL_MODE3
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(3, mode)

	)

83 
	#GPIO_P_MODEL_MODE4_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(4)

	)

84 
	#GPIO_P_MODEL_MODE4
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(4, mode)

	)

86 
	#GPIO_P_MODEL_MODE5_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(5)

	)

87 
	#GPIO_P_MODEL_MODE5
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(5, mode)

	)

89 
	#GPIO_P_MODEL_MODE6_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(6)

	)

90 
	#GPIO_P_MODEL_MODE6
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(6, mode)

	)

92 
	#GPIO_P_MODEL_MODE7_MASK
 
	`GPIO_P_MODEL_MODEx_MASK
(7)

	)

93 
	#GPIO_P_MODEL_MODE7
(
mode
Ë
	`GPIO_P_MODEL_MODEx
(7, mode)

	)

95 
	#GPIO_P_MODEH
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x08)

	)

96 
	#GPIO_PA_MODEH
 
	`GPIO_P_MODEH
(
GPIO_PA
)

	)

97 
	#GPIO_PB_MODEH
 
	`GPIO_P_MODEH
(
GPIO_PB
)

	)

98 
	#GPIO_PC_MODEH
 
	`GPIO_P_MODEH
(
GPIO_PC
)

	)

99 
	#GPIO_PD_MODEH
 
	`GPIO_P_MODEH
(
GPIO_PD
)

	)

100 
	#GPIO_PE_MODEH
 
	`GPIO_P_MODEH
(
GPIO_PE
)

	)

103 
	#GPIO_P_MODEH_MODEx_MASK
(
x
Ë
	`GPIO_P_MODE_MODEx_MASK
((xË- 8)

	)

104 
	#GPIO_P_MODEH_MODEx
(
x
, 
mode
Ë
	`GPIO_P_MODE_MODEx
((xË- 8, mode)

	)

106 
	#GPIO_P_MODEH_MODE8_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(8)

	)

107 
	#GPIO_P_MODEH_MODE8
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(8, mode)

	)

109 
	#GPIO_P_MODEH_MODE9_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(9)

	)

110 
	#GPIO_P_MODEH_MODE9
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(9, mode)

	)

112 
	#GPIO_P_MODEH_MODE10_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(10)

	)

113 
	#GPIO_P_MODEH_MODE10
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(10, mode)

	)

115 
	#GPIO_P_MODEH_MODE11_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(11)

	)

116 
	#GPIO_P_MODEH_MODE11
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(11, mode)

	)

118 
	#GPIO_P_MODEH_MODE12_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(12)

	)

119 
	#GPIO_P_MODEH_MODE12
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(12, mode)

	)

121 
	#GPIO_P_MODEH_MODE13_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(13)

	)

122 
	#GPIO_P_MODEH_MODE13
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(13, mode)

	)

124 
	#GPIO_P_MODEH_MODE14_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(14)

	)

125 
	#GPIO_P_MODEH_MODE14
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(14, mode)

	)

127 
	#GPIO_P_MODEH_MODE15_MASK
 
	`GPIO_P_MODEH_MODEx_MASK
(15)

	)

128 
	#GPIO_P_MODEH_MODE15
(
mode
Ë
	`GPIO_P_MODEH_MODEx
(15, mode)

	)

130 
	#GPIO_P_DOUT
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0C)

	)

131 
	#GPIO_PA_DOUT
 
	`GPIO_P_DOUT
(
GPIO_PA
)

	)

132 
	#GPIO_PB_DOUT
 
	`GPIO_P_DOUT
(
GPIO_PB
)

	)

133 
	#GPIO_PC_DOUT
 
	`GPIO_P_DOUT
(
GPIO_PC
)

	)

134 
	#GPIO_PD_DOUT
 
	`GPIO_P_DOUT
(
GPIO_PD
)

	)

135 
	#GPIO_PE_DOUT
 
	`GPIO_P_DOUT
(
GPIO_PE
)

	)

137 
	#GPIO_P_DOUTSET
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x10)

	)

138 
	#GPIO_PA_DOUTSET
 
	`GPIO_P_DOUTSET
(
GPIO_PA
)

	)

139 
	#GPIO_PB_DOUTSET
 
	`GPIO_P_DOUTSET
(
GPIO_PB
)

	)

140 
	#GPIO_PC_DOUTSET
 
	`GPIO_P_DOUTSET
(
GPIO_PC
)

	)

141 
	#GPIO_PD_DOUTSET
 
	`GPIO_P_DOUTSET
(
GPIO_PD
)

	)

142 
	#GPIO_PE_DOUTSET
 
	`GPIO_P_DOUTSET
(
GPIO_PE
)

	)

144 
	#GPIO_P_DOUTCLR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x14)

	)

145 
	#GPIO_PA_DOUTCLR
 
	`GPIO_P_DOUTCLR
(
GPIO_PA
)

	)

146 
	#GPIO_PB_DOUTCLR
 
	`GPIO_P_DOUTCLR
(
GPIO_PB
)

	)

147 
	#GPIO_PC_DOUTCLR
 
	`GPIO_P_DOUTCLR
(
GPIO_PC
)

	)

148 
	#GPIO_PD_DOUTCLR
 
	`GPIO_P_DOUTCLR
(
GPIO_PD
)

	)

149 
	#GPIO_PE_DOUTCLR
 
	`GPIO_P_DOUTCLR
(
GPIO_PE
)

	)

151 
	#GPIO_P_DOUTTGL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x18)

	)

152 
	#GPIO_PA_DOUTTGL
 
	`GPIO_P_DOUTTGL
(
GPIO_PA
)

	)

153 
	#GPIO_PB_DOUTTGL
 
	`GPIO_P_DOUTTGL
(
GPIO_PB
)

	)

154 
	#GPIO_PC_DOUTTGL
 
	`GPIO_P_DOUTTGL
(
GPIO_PC
)

	)

155 
	#GPIO_PD_DOUTTGL
 
	`GPIO_P_DOUTTGL
(
GPIO_PD
)

	)

156 
	#GPIO_PE_DOUTTGL
 
	`GPIO_P_DOUTTGL
(
GPIO_PE
)

	)

158 
	#GPIO_P_DIN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x1C)

	)

159 
	#GPIO_PA_DIN
 
	`GPIO_P_DIN
(
GPIO_PA
)

	)

160 
	#GPIO_PB_DIN
 
	`GPIO_P_DIN
(
GPIO_PB
)

	)

161 
	#GPIO_PC_DIN
 
	`GPIO_P_DIN
(
GPIO_PC
)

	)

162 
	#GPIO_PD_DIN
 
	`GPIO_P_DIN
(
GPIO_PD
)

	)

163 
	#GPIO_PE_DIN
 
	`GPIO_P_DIN
(
GPIO_PE
)

	)

165 
	#GPIO_P_PINLOCKN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x20)

	)

166 
	#GPIO_PA_PINLOCKN
 
	`GPIO_P_PINLOCKN
(
GPIO_PA
)

	)

167 
	#GPIO_PB_PINLOCKN
 
	`GPIO_P_PINLOCKN
(
GPIO_PB
)

	)

168 
	#GPIO_PC_PINLOCKN
 
	`GPIO_P_PINLOCKN
(
GPIO_PC
)

	)

169 
	#GPIO_PD_PINLOCKN
 
	`GPIO_P_PINLOCKN
(
GPIO_PD
)

	)

170 
	#GPIO_PE_PINLOCKN
 
	`GPIO_P_PINLOCKN
(
GPIO_PE
)

	)

172 
	#GPIO_EXTIPSELL
 
	`MMIO32
(
GPIO_BASE
 + 0x100)

	)

173 
	#GPIO_EXTIPSELH
 
	`MMIO32
(
GPIO_BASE
 + 0x104)

	)

174 
	#GPIO_EXTIRISE
 
	`MMIO32
(
GPIO_BASE
 + 0x108)

	)

175 
	#GPIO_EXTIFALL
 
	`MMIO32
(
GPIO_BASE
 + 0x10C)

	)

176 
	#GPIO_IEN
 
	`MMIO32
(
GPIO_BASE
 + 0x110)

	)

177 
	#GPIO_IF
 
	`MMIO32
(
GPIO_BASE
 + 0x114)

	)

178 
	#GPIO_IFS
 
	`MMIO32
(
GPIO_BASE
 + 0x118)

	)

179 
	#GPIO_IFC
 
	`MMIO32
(
GPIO_BASE
 + 0x11C)

	)

180 
	#GPIO_ROUTE
 
	`MMIO32
(
GPIO_BASE
 + 0x120)

	)

181 
	#GPIO_INSENSE
 
	`MMIO32
(
GPIO_BASE
 + 0x124)

	)

182 
	#GPIO_LOCK
 
	`MMIO32
(
GPIO_BASE
 + 0x128)

	)

183 
	#GPIO_CTRL
 
	`MMIO32
(
GPIO_BASE
 + 0x12C)

	)

184 
	#GPIO_CMD
 
	`MMIO32
(
GPIO_BASE
 + 0x130)

	)

185 
	#GPIO_EM4WUEN
 
	`MMIO32
(
GPIO_BASE
 + 0x134)

	)

186 
	#GPIO_EM4WUPOL
 
	`MMIO32
(
GPIO_BASE
 + 0x138)

	)

187 
	#GPIO_EM4WUCAUSE
 
	`MMIO32
(
GPIO_BASE
 + 0x13C)

	)

190 
	#GPIO_EXTIPSEL_MASK
(
n
Ë(0x7 << (“Ë& 0xF))

	)

191 
	#GPIO_EXTIPSEL_PORTMASK
(
n
, 
v
Ë((vË<< (“Ë& 0xF))

	)

192 
	#GPIO_EXTIPSEL_PORTA
 0x0

	)

193 
	#GPIO_EXTIPSEL_PORTB
 0x1

	)

194 
	#GPIO_EXTIPSEL_PORTC
 0x2

	)

195 
	#GPIO_EXTIPSEL_PORTD
 0x3

	)

196 
	#GPIO_EXTIPSEL_PORTE
 0x4

	)

197 
	#GPIO_EXTIPSEL_PORTF
 0x5

	)

199 
	#GPIO_ROUTE_SWCLKPEN
 (1 << 0)

	)

200 
	#GPIO_ROUTE_SWDIOPEN
 (1 << 1)

	)

201 
	#GPIO_ROUTE_SWOPEN
 (1 << 3)

	)

203 
	#GPIO_ROUTE_SWLOCATION_SHIFT
 (8)

	)

204 
	#GPIO_ROUTE_SWLOCATION_MASK
 (0x3 << 
GPIO_ROUTE_SWLOCATION_SHIFT
)

	)

205 
	#GPIO_ROUTE_SWLOCATION
(
v
) \

206 (((
v
Ë<< 
GPIO_ROUTE_SWLOCATION_SHIFT
Ë& 
GPIO_ROUTE_SWLOCATION_MASK
)

	)

208 
	#GPIO_ROUTE_TCLKPEN
 (1 << 12)

	)

209 
	#GPIO_ROUTE_TD0PEN
 (1 << 13)

	)

210 
	#GPIO_ROUTE_TD1PEN
 (1 << 14)

	)

211 
	#GPIO_ROUTE_TD2PEN
 (1 << 15)

	)

212 
	#GPIO_ROUTE_TD3PEN
 (1 << 16)

	)

214 
	#GPIO_ROUTE_ETMLOCATION_SHIFT
 (24)

	)

215 
	#GPIO_ROUTE_ETMLOCATION_MASK
 (0x3 << 
GPIO_ROUTE_ETMLOCATION_SHIFT
)

	)

216 
	#GPIO_ROUTE_ETMLOCATION
(
v
) \

217 (((
v
Ë<< 
GPIO_ROUTE_ETMLOCATION_SHIFT
Ë& 
GPIO_ROUTE_ETMLOCATION_MASK
)

	)

218 
	#GPIO_ROUTE_ETMLOCATION_LOCx
(
x
Ë
	`GPIO_ROUTE_ETMLOCATION
(x)

	)

219 
	#GPIO_ROUTE_ETMLOCATION_LOC0
 
	`GPIO_ROUTE_ETMLOCATION_LOCx
(0)

	)

220 
	#GPIO_ROUTE_ETMLOCATION_LOC1
 
	`GPIO_ROUTE_ETMLOCATION_LOCx
(1)

	)

221 
	#GPIO_ROUTE_ETMLOCATION_LOC2
 
	`GPIO_ROUTE_ETMLOCATION_LOCx
(2)

	)

222 
	#GPIO_ROUTE_ETMLOCATION_LOC3
 
	`GPIO_ROUTE_ETMLOCATION_LOCx
(3)

	)

224 
	#GPIO_INSENSE_INT
 (1 << 0)

	)

225 
	#GPIO_INSENSE_PRS
 (1 << 1)

	)

227 
	#GPIO_LOCK_LOCKKEY_SHIFT
 (0)

	)

228 
	#GPIO_LOCK_LOCKKEY_MASK
 (0xFFFF << 
GPIO_LOCK_LOCKKEY_SHIFT
)

	)

229 
	#GPIO_LOCK_LOCKKEY_UNLOCKED
 (0x0000 << 
GPIO_LOCK_LOCKKEY_SHIFT
)

	)

230 
	#GPIO_LOCK_LOCKKEY_LOCKED
 (0x0001 << 
GPIO_LOCK_LOCKKEY_SHIFT
)

	)

231 
	#GPIO_LOCK_LOCKKEY_LOCK
 (0x0000 << 
GPIO_LOCK_LOCKKEY_SHIFT
)

	)

232 
	#GPIO_LOCK_LOCKKEY_UNLOCK
 (0xA534 << 
GPIO_LOCK_LOCKKEY_SHIFT
)

	)

234 
	#GPIO_CTRL_EM4RET
 (1 << 0)

	)

236 
	#GPIO_CMD_EM4WUCLR
 (1 << 0)

	)

238 
	#GPIO_EM4WUEN_EM4WUEN_A0
 (1 << 0)

	)

239 
	#GPIO_EM4WUEN_EM4WUEN_A6
 (1 << 1)

	)

240 
	#GPIO_EM4WUEN_EM4WUEN_C9
 (1 << 2)

	)

241 
	#GPIO_EM4WUEN_EM4WUEN_F1
 (1 << 3)

	)

242 
	#GPIO_EM4WUEN_EM4WUEN_F2
 (1 << 4)

	)

243 
	#GPIO_EM4WUEN_EM4WUEN_E13
 (1 << 5)

	)

245 
	#GPIO_EM4WUPOL_EM4WUPOL_A0
 (1 << 0)

	)

246 
	#GPIO_EM4WUPOL_EM4WUPOL_A6
 (1 << 1)

	)

247 
	#GPIO_EM4WUPOL_EM4WUPOL_C9
 (1 << 2)

	)

248 
	#GPIO_EM4WUPOL_EM4WUPOL_F1
 (1 << 3)

	)

249 
	#GPIO_EM4WUPOL_EM4WUPOL_F2
 (1 << 4)

	)

250 
	#GPIO_EM4WUPOL_EM4WUPOL_E13
 (1 << 5)

	)

252 
	#GPIO0
 (1 << 0)

	)

253 
	#GPIO1
 (1 << 1)

	)

254 
	#GPIO2
 (1 << 2)

	)

255 
	#GPIO3
 (1 << 3)

	)

256 
	#GPIO4
 (1 << 4)

	)

257 
	#GPIO5
 (1 << 5)

	)

258 
	#GPIO6
 (1 << 6)

	)

259 
	#GPIO7
 (1 << 7)

	)

260 
	#GPIO8
 (1 << 8)

	)

261 
	#GPIO9
 (1 << 9)

	)

262 
	#GPIO10
 (1 << 10)

	)

263 
	#GPIO11
 (1 << 11)

	)

264 
	#GPIO12
 (1 << 12)

	)

265 
	#GPIO13
 (1 << 13)

	)

266 
	#GPIO14
 (1 << 14)

	)

267 
	#GPIO15
 (1 << 15)

	)

268 
	#GPIO_ALL
 (0xFFFF)

	)

274 
	egpio_mode
 {

275 
	mGPIO_MODE_DISABLE
 = 0,

276 
	mGPIO_MODE_INPUT
,

277 
	mGPIO_MODE_INPUT_PULL
,

278 
	mGPIO_MODE_INPUT_PULL_FILTER
,

279 
	mGPIO_MODE_PUSH_PULL
,

280 
	mGPIO_MODE_PUSH_PULL_DRIVE
,

281 
	mGPIO_MODE_WIRED_OR
,

282 
	mGPIO_MODE_WIRED_OR_PULL_DOWN
,

283 
	mGPIO_MODE_WIRED_AND
,

284 
	mGPIO_MODE_WIRED_AND_FILTER
,

285 
	mGPIO_MODE_WIRED_AND_PULLUP
,

286 
	mGPIO_MODE_WIRED_AND_PULLUP_FILTER
,

287 
	mGPIO_MODE_WIRED_AND_DRIVE
,

288 
	mGPIO_MODE_WIRED_AND_DRIVE_FILTER
,

289 
	mGPIO_MODE_WIRED_AND_DRIVE_PULLUP
,

290 
	mGPIO_MODE_WIRED_AND_DRIVE_PULLUP_FILTER


294 
	egpio_drive_°ªngth
 {

295 
	mGPIO_STRENGTH_STANDARD
 = 0,

296 
	mGPIO_STRENGTH_LOWEST
,

297 
	mGPIO_STRENGTH_HIGH
,

298 
	mGPIO_STRENGTH_LOW


302 
	#GPIOA
 
GPIO_PA


	)

303 
	#GPIOB
 
GPIO_PB


	)

304 
	#GPIOC
 
GPIO_PC


	)

305 
	#GPIOD
 
GPIO_PD


	)

306 
	#GPIOE
 
GPIO_PE


	)

307 
	#GPIOF
 
GPIO_PF


	)

311 
BEGIN_DECLS


313 
gpio_íabÀ_lock
();

314 
gpio_dißbÀ_lock
();

315 
boﬁ
 
gpio_gë_lock_Êag
();

317 
gpio_£t_drive_°ªngth
(
uöt32_t
 
gpio_p‹t
,

318 
gpio_drive_°ªngth
 
drivî_°ígth
);

319 
gpio_mode_£tup
(
uöt32_t
 
gpio_p‹t
, 
gpio_mode
 
mode
, 
uöt16_t
 
gpios
);

321 
gpio_£t
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
);

322 
gpio_˛ór
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
);

323 
uöt16_t
 
gpio_gë
(
uöt32_t
 
gpio_p‹t
, uöt16_à
gpios
);

324 
gpio_toggÀ
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
);

325 
uöt16_t
 
gpio_p‹t_ªad
(
uöt32_t
 
gpio_p‹t
);

326 
gpio_p‹t_wrôe
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
d©a
);

328 
gpio_p‹t_c⁄fig_lock
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
);

330 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/common/i2c_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_I2C_H


21 
	#LIBOPENCM3_EFM32_I2C_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#I2C_CTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x000)

	)

27 
	#I2C_CMD
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x004)

	)

28 
	#I2C_STATE
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x008)

	)

29 
	#I2C_STATUS
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x00C)

	)

30 
	#I2C_CLKDIV
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x010)

	)

31 
	#I2C_SADDR
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x014)

	)

32 
	#I2C_SADDRMASK
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x018)

	)

33 
	#I2C_RXDATA
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x01C)

	)

34 
	#I2C_RXDATAP
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x020)

	)

35 
	#I2C_TXDATA
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x024)

	)

36 
	#I2C_IF
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x028)

	)

37 
	#I2C_IFS
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x02C)

	)

38 
	#I2C_IFC
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x030)

	)

39 
	#I2C_IEN
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x034)

	)

40 
	#I2C_ROUTE
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x038)

	)

43 
	#I2C_CTRL_CLTO_SHIFT
 (16)

	)

44 
	#I2C_CTRL_CLTO_MASK
 (0x7 << 
I2C_CTRL_CLTO_SHIFT
)

	)

45 
	#I2C_CTRL_CLTO
(
v
) \

46 (((
v
Ë<< 
I2C_CTRL_CLTO_SHIFT
Ë& 
I2C_CTRL_CLTO_MASK
)

	)

47 
	#I2C_CTRL_CLTO_OFF
 0

	)

48 
	#I2C_CTRL_CLTO_40PCC
 1

	)

49 
	#I2C_CTRL_CLTO_80PCC
 2

	)

50 
	#I2C_CTRL_CLTO_160PCC
 3

	)

51 
	#I2C_CTRL_CLTO_320PPC
 4

	)

52 
	#I2C_CTRL_CLTO_1024PPC
 5

	)

54 
	#I2C_CTRL_GIBITO
 (1 << 15)

	)

56 
	#I2C_CTRL_BTO_SHIFT
 (12)

	)

57 
	#I2C_CTRL_BTO_MASK
 (0x3 << 
I2C_CTRL_BTO_SHIFT
)

	)

58 
	#I2C_CTRL_BTO
(
v
) \

59 (((
v
Ë<< 
I2C_CTRL_BTO_SHIFT
Ë& 
I2C_CTRL_BTO_MASK
)

	)

60 
	#I2C_CTRL_BTO_OFF
 0

	)

61 
	#I2C_CTRL_BTO_40PCC
 1

	)

62 
	#I2C_CTRL_BTO_80PCC
 2

	)

63 
	#I2C_CTRL_BTO_160PCC
 3

	)

65 
	#I2C_CTRL_CLHR_SHIFT
 (12)

	)

66 
	#I2C_CTRL_CLHR_MASK
 (0x3 << 
I2C_CTRL_CLHR_SHIFT
)

	)

67 
	#I2C_CTRL_CLHR
(
v
) \

68 (((
v
Ë<< 
I2C_CTRL_CLHR_SHIFT
Ë& 
I2C_CTRL_CLHR_MASK
)

	)

69 
	#I2C_CTRL_CLHR_STANDARD
 0

	)

70 
	#I2C_CTRL_CLHR_ASYMMETRIC
 1

	)

71 
	#I2C_CTRL_CLHR_FAST
 2

	)

73 
	#I2C_CTRL_GCAMEN
 (1 << 6)

	)

74 
	#I2C_CTRL_ARBDIS
 (1 << 5)

	)

75 
	#I2C_CTRL_AUTOSN
 (1 << 4)

	)

76 
	#I2C_CTRL_AUTOSE
 (1 << 3)

	)

77 
	#I2C_CTRL_AUTOACK
 (1 << 2)

	)

78 
	#I2C_CTRL_SLAVE
 (1 << 1)

	)

79 
	#I2C_CTRL_EN
 (1 << 0)

	)

82 
	#I2C_CMD_CLEARPC
 (1 << 7)

	)

83 
	#I2C_CMD_CLEARTX
 (1 << 6)

	)

84 
	#I2C_CMD_ABORT
 (1 << 5)

	)

85 
	#I2C_CMD_CONT
 (1 << 4)

	)

86 
	#I2C_CMD_NACK
 (1 << 3)

	)

87 
	#I2C_CMD_ACK
 (1 << 2)

	)

88 
	#I2C_CMD_STOP
 (1 << 1)

	)

89 
	#I2C_CMD_START
 (1 << 0)

	)

92 
	#I2C_STATE_STATE_SHIFT
 (5)

	)

93 
	#I2C_STATE_STATE_MASK
 (0x7 << 
I2C_STATE_STATE_SHIFT
)

	)

94 
	#I2C_STATE_STATE
(
v
) \

95 (((
v
Ë<< 
I2C_STATE_STATE_SHIFT
Ë& 
I2C_STATE_STATE_MASK
)

	)

96 
	#I2C_STATE_STATE_IDLE
 0

	)

97 
	#I2C_STATE_STATE_WAIT
 1

	)

98 
	#I2C_STATE_STATE_START
 2

	)

99 
	#I2C_STATE_STATE_ADDR
 3

	)

100 
	#I2C_STATE_STATE_ADDRACK
 4

	)

101 
	#I2C_STATE_STATE_DATA
 5

	)

102 
	#I2C_STATE_STATE_DATAACK
 6

	)

104 
	#I2C_STATE_BUSHOLD
 (1 << 4)

	)

105 
	#I2C_STATE_NACKED
 (1 << 3)

	)

106 
	#I2C_STATE_TRANSMITTER
 (1 << 2)

	)

107 
	#I2C_STATE_MASTER
 (1 << 1)

	)

108 
	#I2C_STATE_BUSY
 (1 << 0)

	)

111 
	#I2C_STATUS_RXDATAV
 (1 << 8)

	)

112 
	#I2C_STATUS_TXBL
 (1 << 7)

	)

113 
	#I2C_STATUS_TXC
 (1 << 6)

	)

114 
	#I2C_STATUS_PABORT
 (1 << 5)

	)

115 
	#I2C_STATUS_PCONT
 (1 << 4)

	)

116 
	#I2C_STATUS_PNACK
 (1 << 3)

	)

117 
	#I2C_STATUS_PACK
 (1 << 2)

	)

118 
	#I2C_STATUS_PSTOP
 (1 << 1)

	)

119 
	#I2C_STATUS_PSTART
 (1 << 0)

	)

122 
	#I2C_CLKDIV_DIV_SHIFT
 (0)

	)

123 
	#I2C_CLKDIV_DIV_MASK
 (0xFF << 
I2C_CLKDIV_DIV_SHIFT
)

	)

124 
	#I2C_CLKDIV_DIV
(
v
) \

125 (((
v
Ë<< 
I2C_CLKDIV_DIV_SHIFT
Ë& 
I2C_CLKDIV_DIV_MASK
)

	)

128 
	#I2C_SADDR_ADDR_SHIFT
 (0)

	)

129 
	#I2C_SADDR_ADDR_MASK
 (0xFF << 
I2C_SADDR_ADDR_SHIFT
)

	)

130 
	#I2C_SADDR_ADDR
(
v
) \

131 (((
v
Ë<< 
I2C_SADDR_ADDR_SHIFT
Ë& 
I2C_SADDR_ADDR_MASK
)

	)

134 
	#I2C_SADDRMASK_MASK_SHIFT
 (0)

	)

135 
	#I2C_SADDRMASK_MASK_MASK
 (0xFF << 
I2C_SADDRMASK_MASK_SHIFT
)

	)

136 
	#I2C_SADDRMASK_MASK
(
v
) \

137 (((
v
Ë<< 
I2C_SADDRMASK_MASK_SHIFT
Ë& 
I2C_SADDRMASK_MASK_MASK
)

	)

140 
	#I2C_IF_SSTOP
 (1 << 16)

	)

141 
	#I2C_IF_CLTO
 (1 << 15)

	)

142 
	#I2C_IF_BITO
 (1 << 14)

	)

143 
	#I2C_IF_RXUF
 (1 << 13)

	)

144 
	#I2C_IF_TXOF
 (1 << 12)

	)

145 
	#I2C_IF_BUSHOLD
 (1 << 11)

	)

146 
	#I2C_IF_BUSERR
 (1 << 10)

	)

147 
	#I2C_IF_ARBLOST
 (1 << 9)

	)

148 
	#I2C_IF_MSTOP
 (1 << 8)

	)

149 
	#I2C_IF_NACK
 (1 << 7)

	)

150 
	#I2C_IF_ACK
 (1 << 6)

	)

151 
	#I2C_IF_RXDATAV
 (1 << 5)

	)

152 
	#I2C_IF_TXBL
 (1 << 4)

	)

153 
	#I2C_IF_TXC
 (1 << 3)

	)

154 
	#I2C_IF_ADDR
 (1 << 2)

	)

155 
	#I2C_IF_RSTART
 (1 << 1)

	)

156 
	#I2C_IF_START
 (1 << 0)

	)

159 
	#I2C_IFS_SSTOP
 (1 << 16)

	)

160 
	#I2C_IFS_CLTO
 (1 << 15)

	)

161 
	#I2C_IFS_BITO
 (1 << 14)

	)

162 
	#I2C_IFS_RXUF
 (1 << 13)

	)

163 
	#I2C_IFS_TXOF
 (1 << 12)

	)

164 
	#I2C_IFS_BUSHOLD
 (1 << 11)

	)

165 
	#I2C_IFS_BUSERR
 (1 << 10)

	)

166 
	#I2C_IFS_ARBLOST
 (1 << 9)

	)

167 
	#I2C_IFS_MSTOP
 (1 << 8)

	)

168 
	#I2C_IFS_NACK
 (1 << 7)

	)

169 
	#I2C_IFS_ACK
 (1 << 6)

	)

170 
	#I2C_IFS_RXDATAV
 (1 << 5)

	)

171 
	#I2C_IFS_TXBL
 (1 << 4)

	)

172 
	#I2C_IFS_TXC
 (1 << 3)

	)

173 
	#I2C_IFS_ADDR
 (1 << 2)

	)

174 
	#I2C_IFS_RSTART
 (1 << 1)

	)

175 
	#I2C_IFS_START
 (1 << 0)

	)

178 
	#I2C_IFC_SSTOP
 (1 << 16)

	)

179 
	#I2C_IFC_CLTO
 (1 << 15)

	)

180 
	#I2C_IFC_BITO
 (1 << 14)

	)

181 
	#I2C_IFC_RXUF
 (1 << 13)

	)

182 
	#I2C_IFC_TXOF
 (1 << 12)

	)

183 
	#I2C_IFC_BUSHOLD
 (1 << 11)

	)

184 
	#I2C_IFC_BUSERR
 (1 << 10)

	)

185 
	#I2C_IFC_ARBLOST
 (1 << 9)

	)

186 
	#I2C_IFC_MSTOP
 (1 << 8)

	)

187 
	#I2C_IFC_NACK
 (1 << 7)

	)

188 
	#I2C_IFC_ACK
 (1 << 6)

	)

189 
	#I2C_IFC_RXDATAV
 (1 << 5)

	)

190 
	#I2C_IFC_TXBL
 (1 << 4)

	)

191 
	#I2C_IFC_TXC
 (1 << 3)

	)

192 
	#I2C_IFC_ADDR
 (1 << 2)

	)

193 
	#I2C_IFC_RSTART
 (1 << 1)

	)

194 
	#I2C_IFC_START
 (1 << 0)

	)

197 
	#I2C_IEN_SSTOP
 (1 << 16)

	)

198 
	#I2C_IEN_CLTO
 (1 << 15)

	)

199 
	#I2C_IEN_BITO
 (1 << 14)

	)

200 
	#I2C_IEN_RXUF
 (1 << 13)

	)

201 
	#I2C_IEN_TXOF
 (1 << 12)

	)

202 
	#I2C_IEN_BUSHOLD
 (1 << 11)

	)

203 
	#I2C_IEN_BUSERR
 (1 << 10)

	)

204 
	#I2C_IEN_ARBLOST
 (1 << 9)

	)

205 
	#I2C_IEN_MSTOP
 (1 << 8)

	)

206 
	#I2C_IEN_NACK
 (1 << 7)

	)

207 
	#I2C_IEN_ACK
 (1 << 6)

	)

208 
	#I2C_IEN_RXDATAV
 (1 << 5)

	)

209 
	#I2C_IEN_TXBL
 (1 << 4)

	)

210 
	#I2C_IEN_TXC
 (1 << 3)

	)

211 
	#I2C_IEN_ADDR
 (1 << 2)

	)

212 
	#I2C_IEN_RSTART
 (1 << 1)

	)

213 
	#I2C_IEN_START
 (1 << 0)

	)

216 
	#I2C_ROUTE_LOCATION_SHIFT
 (8)

	)

217 
	#I2C_ROUTE_LOCATION_MASK
 (0x7 << 
I2C_ROUTE_LOCATION_SHIFT
)

	)

218 
	#I2C_ROUTE_LOCATION
(
v
) \

219 (((
v
Ë<< 
I2C_ROUTE_LOCATION_SHIFT
Ë& 
I2C_ROUTE_LOCATION_MASK
)

	)

220 
	#I2C_ROUTE_LOCATION_LOCx
(
x
Ë
	`I2C_ROUTE_LOCATION
(x)

	)

221 
	#I2C_ROUTE_LOCATION_LOC0
 0

	)

222 
	#I2C_ROUTE_LOCATION_LOC1
 1

	)

223 
	#I2C_ROUTE_LOCATION_LOC2
 2

	)

224 
	#I2C_ROUTE_LOCATION_LOC3
 3

	)

225 
	#I2C_ROUTE_LOCATION_LOC4
 4

	)

226 
	#I2C_ROUTE_LOCATION_LOC5
 5

	)

227 
	#I2C_ROUTE_LOCATION_LOC6
 6

	)

229 
	#I2C_ROUTE_SCLPEN
 (1 << 1)

	)

230 
	#I2C_ROUTE_SDAPEN
 (1 << 0)

	)

233 
	#I2C0
 
I2C0_BASE


	)

234 
	#I2C0_CTRL
 
	`I2C_CTRL
(
ba£
)

	)

235 
	#I2C0_CMD
 
	`I2C_CMD
(
ba£
)

	)

236 
	#I2C0_STATE
 
	`I2C_STATE
(
ba£
)

	)

237 
	#I2C0_STATUS
 
	`I2C_STATUS
(
ba£
)

	)

238 
	#I2C0_CLKDIV
 
	`I2C_CLKDIV
(
ba£
)

	)

239 
	#I2C0_SADDR
 
	`I2C_SADDR
(
ba£
)

	)

240 
	#I2C0_SADDRMASK
 
	`I2C_SADDRMASK
(
ba£
)

	)

241 
	#I2C0_RXDATA
 
	`I2C_RXDATA
(
ba£
)

	)

242 
	#I2C0_RXDATAP
 
	`I2C_RXDATAP
(
ba£
)

	)

243 
	#I2C0_TXDATA
 
	`I2C_TXDATA
(
ba£
)

	)

244 
	#I2C0_IF
 
	`I2C_IF
(
ba£
)

	)

245 
	#I2C0_IFS
 
	`I2C_IFS
(
ba£
)

	)

246 
	#I2C0_IFC
 
	`I2C_IFC
(
ba£
)

	)

247 
	#I2C0_IEN
 
	`I2C_IEN
(
ba£
)

	)

248 
	#I2C0_ROUTE
 
	`I2C_ROUTE
(
ba£
)

	)

251 
	#I2C1
 
I2C1_BASE


	)

252 
	#I2C1_CTRL
 
	`I2C_CTRL
(
ba£
)

	)

253 
	#I2C1_CMD
 
	`I2C_CMD
(
ba£
)

	)

254 
	#I2C1_STATE
 
	`I2C_STATE
(
ba£
)

	)

255 
	#I2C1_STATUS
 
	`I2C_STATUS
(
ba£
)

	)

256 
	#I2C1_CLKDIV
 
	`I2C_CLKDIV
(
ba£
)

	)

257 
	#I2C1_SADDR
 
	`I2C_SADDR
(
ba£
)

	)

258 
	#I2C1_SADDRMASK
 
	`I2C_SADDRMASK
(
ba£
)

	)

259 
	#I2C1_RXDATA
 
	`I2C_RXDATA
(
ba£
)

	)

260 
	#I2C1_RXDATAP
 
	`I2C_RXDATAP
(
ba£
)

	)

261 
	#I2C1_TXDATA
 
	`I2C_TXDATA
(
ba£
)

	)

262 
	#I2C1_IF
 
	`I2C_IF
(
ba£
)

	)

263 
	#I2C1_IFS
 
	`I2C_IFS
(
ba£
)

	)

264 
	#I2C1_IFC
 
	`I2C_IFC
(
ba£
)

	)

265 
	#I2C1_IEN
 
	`I2C_IEN
(
ba£
)

	)

266 
	#I2C1_ROUTE
 
	`I2C_ROUTE
(
ba£
)

	)

	@libopencm3/include/libopencm3/efm32/common/letimer_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_LETIMER_H


21 
	#LIBOPENCM3_EFM32_LETIMER_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#LETIMER_CTRL
(
ba£
Ë((ba£Ë+ 0x000)

	)

27 
	#LETIMER_CMD
(
ba£
Ë((ba£Ë+ 0x004)

	)

28 
	#LETIMER_STATUS
(
ba£
Ë((ba£Ë+ 0x008)

	)

29 
	#LETIMER_CNT
(
ba£
Ë((ba£Ë+ 0x00C)

	)

30 
	#LETIMER_COMP0
(
ba£
Ë((ba£Ë+ 0x010)

	)

31 
	#LETIMER_COMP1
(
ba£
Ë((ba£Ë+ 0x014)

	)

32 
	#LETIMER_REP0
(
ba£
Ë((ba£Ë+ 0x018)

	)

33 
	#LETIMER_REP1
(
ba£
Ë((ba£Ë+ 0x01C)

	)

34 
	#LETIMER_IF
(
ba£
Ë((ba£Ë+ 0x020)

	)

35 
	#LETIMER_IFS
(
ba£
Ë((ba£Ë+ 0x024)

	)

36 
	#LETIMER_IFC
(
ba£
Ë((ba£Ë+ 0x028)

	)

37 
	#LETIMER_IEN
(
ba£
Ë((ba£Ë+ 0x02C)

	)

38 
	#LETIMER_FREEZE
(
ba£
Ë((ba£Ë+ 0x030)

	)

39 
	#LETIMER_SYNCBUSY
(
ba£
Ë((ba£Ë+ 0x034)

	)

40 
	#LETIMER_ROUTE
(
ba£
Ë((ba£Ë+ 0x040)

	)

43 
	#LETIMER_CTRL_DEBUG
 (1 << 12)

	)

44 
	#LETIMER_CTRL_RTCC1TEN
 (1 << 11)

	)

45 
	#LETIMER_CTRL_RTCC0TEN
 (1 << 10)

	)

46 
	#LETIMER_CTRL_COMP0TOP
 (1 << 9)

	)

47 
	#LETIMER_CTRL_BUFTOP
 (1 << 8)

	)

48 
	#LETIMER_CTRL_OPOL1
 (1 << 7)

	)

49 
	#LETIMER_CTRL_OPOL0
 (1 << 6)

	)

51 
	#LETIMER_CTRL_UFOA1_SHIFT
 (4)

	)

52 
	#LETIMER_CTRL_UFOA1_MASK
 (0x3 << 
LETIMER_CTRL_UFOA1_SHIFT
)

	)

53 
	#LETIMER_CTRL_UFOA1
(
v
) \

54 (((
v
Ë<< 
LETIMER_CTRL_UFOA1_SHIFT
Ë& 
LETIMER_CTRL_UFOA1_MASK
)

	)

55 
	#LETIMER_CTRL_UFOA1_NONE
 0

	)

56 
	#LETIMER_CTRL_UFOA1_TOGGLE
 1

	)

57 
	#LETIMER_CTRL_UFOA1_PULSE
 2

	)

58 
	#LETIMER_CTRL_UFOA1_PWM
 3

	)

60 
	#LETIMER_CTRL_UFOA0_SHIFT
 (2)

	)

61 
	#LETIMER_CTRL_UFOA0_MASK
 (0x3 << 
LETIMER_CTRL_UFOA0_SHIFT
)

	)

62 
	#LETIMER_CTRL_UFOA0
(
v
) \

63 (((
v
Ë<< 
LETIMER_CTRL_UFOA0_SHIFT
Ë& 
LETIMER_CTRL_UFOA0_MASK
)

	)

64 
	#LETIMER_CTRL_UFOA0_NONE
 0

	)

65 
	#LETIMER_CTRL_UFOA0_TOGGLE
 1

	)

66 
	#LETIMER_CTRL_UFOA0_PULSE
 2

	)

67 
	#LETIMER_CTRL_UFOA0_PWM
 3

	)

69 
	#LETIMER_CTRL_REPMODE_SHIFT
 (2)

	)

70 
	#LETIMER_CTRL_REPMODE_MASK
 (0x3 << 
LETIMER_CTRL_REPMODE_SHIFT
)

	)

71 
	#LETIMER_CTRL_REPMODE
(
v
) \

72 (((
v
Ë<< 
LETIMER_CTRL_REPMODE_SHIFT
Ë& 
LETIMER_CTRL_REPMODE_MASK
)

	)

73 
	#LETIMER_CTRL_REPMODE_FREE
 0

	)

74 
	#LETIMER_CTRL_REPMODE_ONESHOT
 1

	)

75 
	#LETIMER_CTRL_REPMODE_BUFFERED
 2

	)

76 
	#LETIMER_CTRL_REPMODE_DOUBLE
 3

	)

77 
	#LETIMER_CTRL_REPMODE_ONE_SHOT
 
LETIMER_CTRL_REPMODE_ONESHOT


	)

80 
	#LETIMER_CMD_CTO1
 (1 << 4)

	)

81 
	#LETIMER_CMD_CTO0
 (1 << 3)

	)

82 
	#LETIMER_CMD_CLEAR
 (1 << 2)

	)

83 
	#LETIMER_CMD_STOP
 (1 << 1)

	)

84 
	#LETIMER_CMD_START
 (1 << 0)

	)

87 
	#LETIMER_STATUS_RUNNING
 (1 << 0)

	)

90 
	#LETIMER_IF_REP1
 (1 << 4)

	)

91 
	#LETIMER_IF_REP0
 (1 << 3)

	)

92 
	#LETIMER_IF_UF
 (1 << 2)

	)

93 
	#LETIMER_IF_COMP1
 (1 << 1)

	)

94 
	#LETIMER_IF_COMP0
 (1 << 0)

	)

97 
	#LETIMER_IFS_REP1
 (1 << 4)

	)

98 
	#LETIMER_IFS_REP0
 (1 << 3)

	)

99 
	#LETIMER_IFS_UF
 (1 << 2)

	)

100 
	#LETIMER_IFS_COMP1
 (1 << 1)

	)

101 
	#LETIMER_IFS_COMP0
 (1 << 0)

	)

104 
	#LETIMER_IFC_REP1
 (1 << 4)

	)

105 
	#LETIMER_IFC_REP0
 (1 << 3)

	)

106 
	#LETIMER_IFC_UF
 (1 << 2)

	)

107 
	#LETIMER_IFC_COMP1
 (1 << 1)

	)

108 
	#LETIMER_IFC_COMP0
 (1 << 0)

	)

111 
	#LETIMER_IFE_REP1
 (1 << 4)

	)

112 
	#LETIMER_IFE_REP0
 (1 << 3)

	)

113 
	#LETIMER_IFE_UF
 (1 << 2)

	)

114 
	#LETIMER_IFE_COMP1
 (1 << 1)

	)

115 
	#LETIMER_IFE_COMP0
 (1 << 0)

	)

118 
	#LETIMER_FREEZE_REGFREEZE
 (1 << 0)

	)

121 
	#LETIMER_SYNCBUSY_REP1
 (1 << 5)

	)

122 
	#LETIMER_SYNCBUSY_REP0
 (1 << 4)

	)

123 
	#LETIMER_SYNCBUSY_COMP1
 (1 << 3)

	)

124 
	#LETIMER_SYNCBUSY_COMP0
 (1 << 2)

	)

125 
	#LETIMER_SYNCBUSY_CMD
 (1 << 1)

	)

126 
	#LETIMER_SYNCBUSY_CTRL
 (1 << 0)

	)

129 
	#LETIMER_ROUTE_LOCATION_SHIFT
 (8)

	)

130 
	#LETIMER_ROUTE_LOCATION_MASK
 (0x7 << 
LETIMER_ROUTE_LOCATION_SHIFT
)

	)

131 
	#LETIMER_ROUTE_LOCATION
(
v
) \

132 (((
v
Ë<< 
LETIMER_ROUTE_LOCATION_SHIFT
Ë& 
LETIMER_ROUTE_LOCATION_MASK
)

	)

133 
	#LETIMER_ROUTE_LOCATION_LOCx
(
x
Ë
	`LETIMER_ROUTE_LOCATION
(x)

	)

134 
	#LETIMER_ROUTE_LOCATION_LOC0
 0

	)

135 
	#LETIMER_ROUTE_LOCATION_LOC1
 1

	)

136 
	#LETIMER_ROUTE_LOCATION_LOC2
 2

	)

137 
	#LETIMER_ROUTE_LOCATION_LOC3
 3

	)

138 
	#LETIMER_ROUTE_LOCATION_LOC4
 4

	)

139 
	#LETIMER_ROUTE_LOCATION_LOC5
 5

	)

140 
	#LETIMER_ROUTE_LOCATION_LOC6
 6

	)

141 
	#LETIMER_ROUTE_LOCATION_LOC7
 7

	)

143 
	#LETIMER_ROUTE_OUT1PEN
 (1 << 1)

	)

144 
	#LETIMER_ROUTE_OUT0PEN
 (1 << 0)

	)

147 
	#LETIMER0
 
LETIMER0_BASE


	)

148 
	#LETIMER0_CTRL
 
	`LETIMER_CTRL
(
LETIMER0
)

	)

149 
	#LETIMER0_CMD
 
	`LETIMER_CMD
(
LETIMER0
)

	)

150 
	#LETIMER0_STATUS
 
	`LETIMER_STATUS
(
LETIMER0
)

	)

151 
	#LETIMER0_CNT
 
	`LETIMER_CNT
(
LETIMER0
)

	)

152 
	#LETIMER0_COMP0
 
	`LETIMER_COMP0
(
LETIMER0
)

	)

153 
	#LETIMER0_COMP1
 
	`LETIMER_COMP1
(
LETIMER0
)

	)

154 
	#LETIMER0_REP0
 
	`LETIMER_REP0
(
LETIMER0
)

	)

155 
	#LETIMER0_REP1
 
	`LETIMER_REP1
(
LETIMER0
)

	)

156 
	#LETIMER0_IF
 
	`LETIMER_IF
(
LETIMER0
)

	)

157 
	#LETIMER0_IFS
 
	`LETIMER_IFS
(
LETIMER0
)

	)

158 
	#LETIMER0_IFC
 
	`LETIMER_IFC
(
LETIMER0
)

	)

159 
	#LETIMER0_IEN
 
	`LETIMER_IEN
(
LETIMER0
)

	)

160 
	#LETIMER0_FREEZE
 
	`LETIMER_FREEZE
(
LETIMER0
)

	)

161 
	#LETIMER0_SYNCBUSY
 
	`LETIMER_SYNCBUSY
(
LETIMER0
)

	)

162 
	#LETIMER0_ROUTE
 
	`LETIMER_ROUTE
(
LETIMER0
)

	)

	@libopencm3/include/libopencm3/efm32/common/msc_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_MSC_H


21 
	#LIBOPENCM3_EFM32_MSC_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#MSC_CTRL
 
	`MMIO32
(
MSC_BASE
 + 0x000)

	)

27 
	#MSC_READCTRL
 
	`MMIO32
(
MSC_BASE
 + 0x004)

	)

28 
	#MSC_WRITECTRL
 
	`MMIO32
(
MSC_BASE
 + 0x008)

	)

29 
	#MSC_WRITECMD
 
	`MMIO32
(
MSC_BASE
 + 0x00C)

	)

30 
	#MSC_ADDRB
 
	`MMIO32
(
MSC_BASE
 + 0x010)

	)

31 
	#MSC_WDATA
 
	`MMIO32
(
MSC_BASE
 + 0x018)

	)

32 
	#MSC_STATUS
 
	`MMIO32
(
MSC_BASE
 + 0x01C)

	)

33 
	#MSC_IF
 
	`MMIO32
(
MSC_BASE
 + 0x02C)

	)

34 
	#MSC_IFS
 
	`MMIO32
(
MSC_BASE
 + 0x030)

	)

35 
	#MSC_IFC
 
	`MMIO32
(
MSC_BASE
 + 0x034)

	)

36 
	#MSC_IEN
 
	`MMIO32
(
MSC_BASE
 + 0x038)

	)

37 
	#MSC_LOCK
 
	`MMIO32
(
MSC_BASE
 + 0x03C)

	)

38 
	#MSC_CMD
 
	`MMIO32
(
MSC_BASE
 + 0x040)

	)

39 
	#MSC_CACHEHITS
 
	`MMIO32
(
MSC_BASE
 + 0x044)

	)

40 
	#MSC_CACHEMISSES
 
	`MMIO32
(
MSC_BASE
 + 0x048)

	)

41 
	#MSC_TIMEBASE
 
	`MMIO32
(
MSC_BASE
 + 0x050)

	)

42 
	#MSC_MASSLOCK
 
	`MMIO32
(
MSC_BASE
 + 0x054)

	)

45 
	#MSC_CTRL_BUSFAULT
 (1 << 0)

	)

48 
	#MSC_READCTRL_BUSSTRATEGY_SHIFT
 (16)

	)

49 
	#MSC_READCTRL_BUSSTRATEGY_MASK
 \

50 (0x3 << 
MSC_READCTRL_BUSSTRATEGY_SHIFT
)

	)

51 
	#MSC_READCTRL_BUSSTRATEGY
(
v
) \

52 (((
v
Ë<< 
MSC_READCTRL_BUSSTRATEGY_SHIFT
) & \

53 
MSC_READCTRL_BUSSTRATEGY_MASK
)

	)

55 
	#MSC_READCTRL_BUSSTRATEGY_CPU
 
	`MSC_READCTRL_BUSSTRATEGY
(0)

	)

56 
	#MSC_READCTRL_BUSSTRATEGY_DMA
 
	`MSC_READCTRL_BUSSTRATEGY
(1)

	)

57 
	#MSC_READCTRL_BUSSTRATEGY_DMAEM1
 
	`MSC_READCTRL_BUSSTRATEGY
(2)

	)

58 
	#MSC_READCTRL_BUSSTRATEGY_NONE
 
	`MSC_READCTRL_BUSSTRATEGY
(3)

	)

60 
	#MSC_READCTRL_RAMCEN
 (1 << 7)

	)

61 
	#MSC_READCTRL_EBICDIS
 (1 << 6)

	)

62 
	#MSC_READCTRL_ICCDIS
 (1 << 5)

	)

63 
	#MSC_READCTRL_AIDIS
 (1 << 4)

	)

64 
	#MSC_READCTRL_IFCDIS
 (1 << 3)

	)

66 
	#MSC_READCTRL_MODE_SHIFT
 (0)

	)

67 
	#MSC_READCTRL_MODE_MASK
 (0x7 << 
MSC_READCTRL_MODE_SHIFT
)

	)

68 
	#MSC_READCTRL_MODE
(
v
) \

69 (((
v
Ë<< 
MSC_READCTRL_MODE_SHIFT
Ë& 
MSC_READCTRL_MODE_MASK
)

	)

70 
	#MSC_READCTRL_MODE_WS0
 0

	)

71 
	#MSC_READCTRL_MODE_WS1
 1

	)

72 
	#MSC_READCTRL_MODE_WS0SCBTP
 2

	)

73 
	#MSC_READCTRL_MODE_WS1SCBTP
 3

	)

74 
	#MSC_READCTRL_MODE_WS2
 4

	)

75 
	#MSC_READCTRL_MODE_WS2SCBTP
 5

	)

78 
	#MSC_WRITECTRL_IRQERASEABORT
 (1 << 1)

	)

79 
	#MSC_WRITECTRL_WREN
 (1 << 0)

	)

82 
	#MSC_WRITECMD_CLEARWDATA
 (1 << 12)

	)

83 
	#MSC_WRITECMD_ERASEMAIN0
 (1 << 8)

	)

84 
	#MSC_WRITECMD_ERASEABORT
 (1 << 5)

	)

85 
	#MSC_WRITECMD_WRITETRIG
 (1 << 4)

	)

86 
	#MSC_WRITECMD_WRITEONCE
 (1 << 3)

	)

87 
	#MSC_WRITECMD_WRITEEND
 (1 << 2)

	)

88 
	#MSC_WRITECMD_ERASEPAGE
 (1 << 1)

	)

89 
	#MSC_WRITECMD_LADDRIM
 (1 << 0)

	)

92 
	#MSC_STATUS_PCRUNNING
 (1 << 6)

	)

93 
	#MSC_STATUS_ERASEABORTED
 (1 << 5)

	)

94 
	#MSC_STATUS_WORDTIMEOUT
 (1 << 4)

	)

95 
	#MSC_STATUS_WDATAREADY
 (1 << 3)

	)

96 
	#MSC_STATUS_INVADDR
 (1 << 2)

	)

97 
	#MSC_STATUS_LOCKED
 (1 << 1)

	)

98 
	#MSC_STATUS_BUSY
 (1 << 0)

	)

101 
	#MSC_IF_CMOF
 (1 << 3)

	)

102 
	#MSC_IF_CHOF
 (1 << 2)

	)

103 
	#MSC_IF_WRITE
 (1 << 1)

	)

104 
	#MSC_IF_ERASE
 (1 << 0)

	)

107 
	#MSC_IFS_CMOF
 (1 << 3)

	)

108 
	#MSC_IFS_CHOF
 (1 << 2)

	)

109 
	#MSC_IFS_WRITE
 (1 << 1)

	)

110 
	#MSC_IFS_ERASE
 (1 << 0)

	)

113 
	#MSC_IFC_CMOF
 (1 << 3)

	)

114 
	#MSC_IFC_CHOF
 (1 << 2)

	)

115 
	#MSC_IFC_WRITE
 (1 << 1)

	)

116 
	#MSC_IFC_ERASE
 (1 << 0)

	)

119 
	#MSC_IEN_CMOF
 (1 << 3)

	)

120 
	#MSC_IEN_CHOF
 (1 << 2)

	)

121 
	#MSC_IEN_WRITE
 (1 << 1)

	)

122 
	#MSC_IEN_ERASE
 (1 << 0)

	)

125 
	#MSC_LOCK_LOCKKEY_SHIFT
 (0)

	)

126 
	#MSC_LOCK_LOCKKEY
(
v
Ë((vË<< 
MSC_LOCK_LOCKKEY_SHIFT
)

	)

127 
	#MSC_LOCK_LOCKKEY_UNLOCKED
 
	`MSC_LOCK_LOCKKEY
(0)

	)

128 
	#MSC_LOCK_LOCKKEY_LOCKED
 
	`MSC_LOCK_LOCKKEY
(1)

	)

129 
	#MSC_LOCK_LOCKKEY_LOCK
 
	`MSC_LOCK_LOCKKEY
(0)

	)

130 
	#MSC_LOCK_LOCKKEY_UNLOCK
 
	`MSC_LOCK_LOCKKEY
(0x1B71)

	)

133 
	#MSC_CMD_STOPPC
 (1 << 2)

	)

134 
	#MSC_CMD_STARTPC
 (1 << 1)

	)

135 
	#MSC_CMD_INVCACHE
 (1 << 0)

	)

138 
	#MSC_TIMEBASE_PERIOD
 (1 << 16)

	)

140 
	#MSC_TIMEBASE_BASE_SHIFT
 (0)

	)

141 
	#MSC_TIMEBASE_BASE_MASK
 (0x3F << 
MSC_TIMEBASE_BASE_SHIFT
)

	)

142 
	#MSC_TIMEBASE_BASE
(
v
) \

143 (((
v
Ë<< 
MSC_TIMEBASE_BASE_SHIFT
Ë& 
MSC_TIMEBASE_BASE_MASK
)

	)

146 
	#MSC_MASSLOCK_LOCKKEY_SHIFT
 (0)

	)

147 
	#MSC_MASSLOCK_LOCKKEY
(
v
Ë((vË<< 
MSC_MASSLOCK_LOCKKEY_SHIFT
)

	)

148 
	#MSC_MASSLOCK_LOCKKEY_UNLOCKED
 
	`MSC_MASSLOCK_LOCKKEY
(0)

	)

149 
	#MSC_MASSLOCK_LOCKKEY_LOCKED
 
	`MSC_MASSLOCK_LOCKKEY
(1)

	)

150 
	#MSC_MASSLOCK_LOCKKEY_LOCK
 
	`MSC_MASSLOCK_LOCKKEY
(0)

	)

151 
	#MSC_MASSLOCK_LOCKKEY_UNLOCK
 
	`MSC_MASSLOCK_LOCKKEY
(0x631A)

	)

	@libopencm3/include/libopencm3/efm32/common/opamp_common.h

21 
	~<lib›ícm3/efm32/dac.h
>

	@libopencm3/include/libopencm3/efm32/common/prs_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_PRS_H


21 
	#LIBOPENCM3_EFM32_PRS_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

26 
	#PRS_SWPULSE
 
	`MMIO32
(
PRS_BASE
 + 0x000)

	)

27 
	#PRS_SWLEVEL
 
	`MMIO32
(
PRS_BASE
 + 0x004)

	)

28 
	#PRS_ROUTE
 
	`MMIO32
(
PRS_BASE
 + 0x008)

	)

29 
	#PRS_CHx_CTRL
(
x
Ë
	`MMIO32
(
PRS_BASE
 + 0x010 + (0x004 * (x)))

	)

30 
	#PRS_CH0_CTRL
 
	`PRS_CHx_CTRL
(0)

	)

31 
	#PRS_CH1_CTRL
 
	`PRS_CHx_CTRL
(1)

	)

32 
	#PRS_CH2_CTRL
 
	`PRS_CHx_CTRL
(2)

	)

33 
	#PRS_CH3_CTRL
 
	`PRS_CHx_CTRL
(3)

	)

34 
	#PRS_CH4_CTRL
 
	`PRS_CHx_CTRL
(4)

	)

35 
	#PRS_CH5_CTRL
 
	`PRS_CHx_CTRL
(5)

	)

36 
	#PRS_CH6_CTRL
 
	`PRS_CHx_CTRL
(6)

	)

37 
	#PRS_CH7_CTRL
 
	`PRS_CHx_CTRL
(71)

	)

38 
	#PRS_CH8_CTRL
 
	`PRS_CHx_CTRL
(8)

	)

39 
	#PRS_CH9_CTRL
 
	`PRS_CHx_CTRL
(9)

	)

40 
	#PRS_CH10_CTRL
 
	`PRS_CHx_CTRL
(10)

	)

41 
	#PRS_CH11_CTRL
 
	`PRS_CHx_CTRL
(11)

	)

44 
	#PRS_SWPULSE_CHxPULSE
(
x
Ë(1 << (x))

	)

45 
	#PRS_SWPULSE_CH0PULSE
 
	`PRS_SWPULSE_CHxPULSE
(0)

	)

46 
	#PRS_SWPULSE_CH1PULSE
 
	`PRS_SWPULSE_CHxPULSE
(1)

	)

47 
	#PRS_SWPULSE_CH2PULSE
 
	`PRS_SWPULSE_CHxPULSE
(2)

	)

48 
	#PRS_SWPULSE_CH3PULSE
 
	`PRS_SWPULSE_CHxPULSE
(3)

	)

49 
	#PRS_SWPULSE_CH4PULSE
 
	`PRS_SWPULSE_CHxPULSE
(4)

	)

50 
	#PRS_SWPULSE_CH5PULSE
 
	`PRS_SWPULSE_CHxPULSE
(5)

	)

51 
	#PRS_SWPULSE_CH6PULSE
 
	`PRS_SWPULSE_CHxPULSE
(6)

	)

52 
	#PRS_SWPULSE_CH7PULSE
 
	`PRS_SWPULSE_CHxPULSE
(7)

	)

53 
	#PRS_SWPULSE_CH8PULSE
 
	`PRS_SWPULSE_CHxPULSE
(8)

	)

54 
	#PRS_SWPULSE_CH9PULSE
 
	`PRS_SWPULSE_CHxPULSE
(9)

	)

55 
	#PRS_SWPULSE_CH10PULSE
 
	`PRS_SWPULSE_CHxPULSE
(10)

	)

56 
	#PRS_SWPULSE_CH11PULSE
 
	`PRS_SWPULSE_CHxPULSE
(11)

	)

59 
	#PRS_SWLEVEL_CHxLEVEL
(
x
Ë(1 << (x))

	)

60 
	#PRS_SWLEVEL_CH0LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(0)

	)

61 
	#PRS_SWLEVEL_CH1LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(1)

	)

62 
	#PRS_SWLEVEL_CH2LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(2)

	)

63 
	#PRS_SWLEVEL_CH3LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(3)

	)

64 
	#PRS_SWLEVEL_CH4LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(4)

	)

65 
	#PRS_SWLEVEL_CH5LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(5)

	)

66 
	#PRS_SWLEVEL_CH6LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(6)

	)

67 
	#PRS_SWLEVEL_CH7LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(7)

	)

68 
	#PRS_SWLEVEL_CH8LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(8)

	)

69 
	#PRS_SWLEVEL_CH9LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(9)

	)

70 
	#PRS_SWLEVEL_CH10LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(10)

	)

71 
	#PRS_SWLEVEL_CH11LEVEL
 
	`PRS_SWLEVEL_CHxLEVEL
(11)

	)

74 
	#PRS_ROUTE_LOCATION_SHIFT
 (8)

	)

75 
	#PRS_ROUTE_LOCATION_MASK
 (0x7 << 
PRS_ROUTE_LOCATION_SHIFT
)

	)

76 
	#PRS_ROUTE_LOCATION
(
v
) \

77 (((
v
Ë<< 
PRS_ROUTE_LOCATION_SHIFT
Ë& 
PRS_ROUTE_LOCATION_MASK
)

	)

78 
	#PRS_ROUTE_LOCATION_LOCx
(
x
Ë
	`PRS_ROUTE_LOCATION
(x)

	)

79 
	#PRS_ROUTE_LOCATION_LOC0
 0

	)

80 
	#PRS_ROUTE_LOCATION_LOC1
 1

	)

82 
	#PRS_ROUTE_CHxPEN
(
x
Ë(1 << (x))

	)

83 
	#PRS_ROUTE_CH3PEN
 
	`PRS_ROUTE_CHxPEN
(3)

	)

84 
	#PRS_ROUTE_CH2PEN
 
	`PRS_ROUTE_CHxPEN
(2)

	)

85 
	#PRS_ROUTE_CH1PEN
 
	`PRS_ROUTE_CHxPEN
(1)

	)

86 
	#PRS_ROUTE_CH0PEN
 
	`PRS_ROUTE_CHxPEN
(0)

	)

89 
	#PRS_CH_CTRL_ASYNC
 (1 << 28)

	)

91 
	#PRS_CH_CTRL_EDSEL_SHIFT
 (24)

	)

92 
	#PRS_CH_CTRL_EDSEL_MASK
 (0x3 << 
PRS_CH_CTRL_EDSEL_SHIFT
)

	)

93 
	#PRS_CH_CTRL_EDSEL_OFF
 (0 << 
PRS_CH_CTRL_EDSEL_SHIFT
)

	)

94 
	#PRS_CH_CTRL_EDSEL_POSEDGE
 (1 << 
PRS_CH_CTRL_EDSEL_SHIFT
)

	)

95 
	#PRS_CH_CTRL_EDSEL_NEGEDGE
 (2 << 
PRS_CH_CTRL_EDSEL_SHIFT
)

	)

96 
	#PRS_CH_CTRL_EDSEL_BOTHEDGES
 (3 << 
PRS_CH_CTRL_EDSEL_SHIFT
)

	)

98 
	#PRS_CH_CTRL_SOURCESEL_SHIFT
 (16)

	)

99 
	#PRS_CH_CTRL_SOURCESEL_MASK
 (0x3F << 
PRS_CH_CTRL_SOURCESEL_SHIFT
)

	)

100 
	#PRS_CH_CTRL_SOURCESEL
(
v
) \

101 (((
v
Ë<< 
PRS_CH_CTRL_SOURCESEL_SHIFT
Ë& 
PRS_CH_CTRL_SOURCESEL_MASK
)

	)

102 
	#PRS_CH_CTRL_SOURCESEL_NONE
 0b000000

	)

103 
	#PRS_CH_CTRL_SOURCESEL_VCMP
 0b000001

	)

104 
	#PRS_CH_CTRL_SOURCESEL_ACMP0
 0b000010

	)

105 
	#PRS_CH_CTRL_SOURCESEL_ACMP1
 0b000011

	)

106 
	#PRS_CH_CTRL_SOURCESEL_DAC0
 0b000110

	)

107 
	#PRS_CH_CTRL_SOURCESEL_ADC0
 0b001000

	)

108 
	#PRS_CH_CTRL_SOURCESEL_USART0
 0b010000

	)

109 
	#PRS_CH_CTRL_SOURCESEL_USART1
 0b010001

	)

110 
	#PRS_CH_CTRL_SOURCESEL_USART2
 0b010010

	)

111 
	#PRS_CH_CTRL_SOURCESEL_TIMER0
 0b011100

	)

112 
	#PRS_CH_CTRL_SOURCESEL_TIMER1
 0b011101

	)

113 
	#PRS_CH_CTRL_SOURCESEL_TIMER2
 0b011110

	)

114 
	#PRS_CH_CTRL_SOURCESEL_TIMER3
 0b011111

	)

115 
	#PRS_CH_CTRL_SOURCESEL_USB
 0b100100

	)

116 
	#PRS_CH_CTRL_SOURCESEL_RTC
 0b101000

	)

117 
	#PRS_CH_CTRL_SOURCESEL_UART0
 0b101001

	)

118 
	#PRS_CH_CTRL_SOURCESEL_UART1
 0b101010

	)

119 
	#PRS_CH_CTRL_SOURCESEL_GPIOL
 0b110000

	)

120 
	#PRS_CH_CTRL_SOURCESEL_GPIOH
 0b110001

	)

121 
	#PRS_CH_CTRL_SOURCESEL_LETIMER0
 0b110100

	)

122 
	#PRS_CH_CTRL_SOURCESEL_BURTC
 0b110111

	)

123 
	#PRS_CH_CTRL_SOURCESEL_LESENSEL
 0b111001

	)

124 
	#PRS_CH_CTRL_SOURCESEL_LESENSEH
 0b111010

	)

125 
	#PRS_CH_CTRL_SOURCESEL_LESENSED
 0b111011

	)

127 
	#PRS_CH_CTRL_SIGSEL_SHIFT
 (0)

	)

128 
	#PRS_CH_CTRL_SIGSEL_MASK
 (0x7 << 
PRS_CH_CTRL_SIGSEL_SHIFT
)

	)

129 
	#PRS_CH_CTRL_SIGSEL
(
v
) \

130 (((
v
Ë<< 
PRS_CH_CTRL_SIGSEL_SHIFT
Ë& 
PRS_CH_CTRL_SIGSEL_MASK
)

	)

131 
	#PRS_CH_CTRL_SIGSEL_OFF
 0

	)

132 
	#PRS_CH_CTRL_SIGSEL_VCMPOUT
 0

	)

133 
	#PRS_CH_CTRL_SIGSEL_ACMP0OUT
 0

	)

134 
	#PRS_CH_CTRL_SIGSEL_ACMP1OUT
 0

	)

135 
	#PRS_CH_CTRL_SIGSEL_DAC0CH0
 0

	)

136 
	#PRS_CH_CTRL_SIGSEL_DAC0CH1
 1

	)

137 
	#PRS_CH_CTRL_SIGSEL_ADCSINGLE
 0

	)

138 
	#PRS_CH_CTRL_SIGSEL_ADCSCAN
 1

	)

139 
	#PRS_CH_CTRL_SIGSEL_USART0IRTX
 0

	)

140 
	#PRS_CH_CTRL_SIGSEL_USART0TXC
 1

	)

141 
	#PRS_CH_CTRL_SIGSEL_USART0RXDATA
 2

	)

142 
	#PRS_CH_CTRL_SIGSEL_USART1TXC
 1

	)

143 
	#PRS_CH_CTRL_SIGSEL_USART1RXDATAV
 2

	)

144 
	#PRS_CH_CTRL_SIGSEL_USART2TXC
 1

	)

145 
	#PRS_CH_CTRL_SIGSEL_USART2RXDATAV
 2

	)

146 
	#PRS_CH_CTRL_SIGSEL_TIMER0UF
 0

	)

147 
	#PRS_CH_CTRL_SIGSEL_TIMER0OF
 1

	)

148 
	#PRS_CH_CTRL_SIGSEL_TIMER0CC0
 2

	)

149 
	#PRS_CH_CTRL_SIGSEL_TIMER0CC1
 3

	)

150 
	#PRS_CH_CTRL_SIGSEL_TIMER0CC2
 4

	)

151 
	#PRS_CH_CTRL_SIGSEL_TIMER1UF
 0

	)

152 
	#PRS_CH_CTRL_SIGSEL_TIMER1OF
 1

	)

153 
	#PRS_CH_CTRL_SIGSEL_TIMER1CC0
 2

	)

154 
	#PRS_CH_CTRL_SIGSEL_TIMER1CC1
 3

	)

155 
	#PRS_CH_CTRL_SIGSEL_TIMER1CC2
 4

	)

156 
	#PRS_CH_CTRL_SIGSEL_TIMER2UF
 0

	)

157 
	#PRS_CH_CTRL_SIGSEL_TIMER2OF
 1

	)

158 
	#PRS_CH_CTRL_SIGSEL_TIMER2CC0
 2

	)

159 
	#PRS_CH_CTRL_SIGSEL_TIMER2CC1
 3

	)

160 
	#PRS_CH_CTRL_SIGSEL_TIMER2CC2
 4

	)

161 
	#PRS_CH_CTRL_SIGSEL_TIMER3UF
 0

	)

162 
	#PRS_CH_CTRL_SIGSEL_TIMER3OF
 1

	)

163 
	#PRS_CH_CTRL_SIGSEL_TIMER3CC0
 2

	)

164 
	#PRS_CH_CTRL_SIGSEL_TIMER3CC1
 3

	)

165 
	#PRS_CH_CTRL_SIGSEL_TIMER3CC2
 4

	)

166 
	#PRS_CH_CTRL_SIGSEL_USBSOF
 0

	)

167 
	#PRS_CH_CTRL_SIGSEL_USBSOFSR
 1

	)

168 
	#PRS_CH_CTRL_SIGSEL_RTCOF
 0

	)

169 
	#PRS_CH_CTRL_SIGSEL_RTCCOMP0
 1

	)

170 
	#PRS_CH_CTRL_SIGSEL_RTCCOMP1
 2

	)

171 
	#PRS_CH_CTRL_SIGSEL_UART0TXC
 1

	)

172 
	#PRS_CH_CTRL_SIGSEL_UART0RXDATAV
 2

	)

173 
	#PRS_CH_CTRL_SIGSEL_UART1TXC
 1

	)

174 
	#PRS_CH_CTRL_SIGSEL_UART1RXDATAV
 2

	)

175 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN0
 0

	)

176 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN1
 1

	)

177 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN2
 2

	)

178 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN3
 3

	)

179 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN4
 4

	)

180 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN5
 5

	)

181 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN6
 6

	)

182 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN7
 7

	)

183 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN8
 0

	)

184 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN9
 1

	)

185 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN10
 2

	)

186 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN11
 3

	)

187 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN12
 4

	)

188 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN13
 5

	)

189 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN14
 6

	)

190 
	#PRS_CH_CTRL_SIGSEL_GPIOPIN15
 7

	)

191 
	#PRS_CH_CTRL_SIGSEL_LETIMER0CH0
 0

	)

192 
	#PRS_CH_CTRL_SIGSEL_LETIMER0CH1
 1

	)

193 
	#PRS_CH_CTRL_SIGSEL_BURTCOF
 0

	)

194 
	#PRS_CH_CTRL_SIGSEL_BURTCCOMP0
 1

	)

195 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES0
 0

	)

196 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES1
 1

	)

197 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES2
 2

	)

198 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES3
 3

	)

199 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES4
 4

	)

200 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES5
 5

	)

201 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES6
 6

	)

202 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES7
 7

	)

203 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES8
 0

	)

204 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES9
 1

	)

205 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES10
 2

	)

206 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES11
 3

	)

207 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES12
 4

	)

208 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES13
 5

	)

209 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES14
 6

	)

210 
	#PRS_CH_CTRL_SIGSEL_LESENSESCANRES15
 7

	)

211 
	#PRS_CH_CTRL_SIGSEL_LESENSEDEC0
 0

	)

212 
	#PRS_CH_CTRL_SIGSEL_LESENSEDEC1
 1

	)

213 
	#PRS_CH_CTRL_SIGSEL_LESENSEDEC2
 2

	)

216 
	#PRS_CH_CTRL_SIGSEL_VCMP_OUT
 0

	)

217 
	#PRS_CH_CTRL_SIGSEL_ACMP_OUT
 0

	)

218 
	#PRS_CH_CTRL_SIGSEL_DAC_CHx
(
x
Ë
	`PRS_CH_CTRL_SIGSEL
(x)

	)

219 
	#PRS_CH_CTRL_SIGSEL_DAC_CH0
 0

	)

220 
	#PRS_CH_CTRL_SIGSEL_DAC_CH1
 1

	)

221 
	#PRS_CH_CTRL_SIGSEL_ADC_SINGLE
 0

	)

222 
	#PRS_CH_CTRL_SIGSEL_ADC_SCAN
 1

	)

223 
	#PRS_CH_CTRL_SIGSEL_USART_IRTX
 0

	)

224 
	#PRS_CH_CTRL_SIGSEL_USART_TXC
 1

	)

225 
	#PRS_CH_CTRL_SIGSEL_USART_RXDATAV
 2

	)

226 
	#PRS_CH_CTRL_SIGSEL_TIMER_UF
 0

	)

227 
	#PRS_CH_CTRL_SIGSEL_TIMER_OF
 1

	)

228 
	#PRS_CH_CTRL_SIGSEL_TIMER_CCx
(
x
Ë
	`PRS_CH_CTRL_SIGSEL
((xË+ 2)

	)

229 
	#PRS_CH_CTRL_SIGSEL_TIMER_CC0
 
	`PRS_CH_CTRL_SIGSEL_TIMER_CCx
(0)

	)

230 
	#PRS_CH_CTRL_SIGSEL_TIMER_CC1
 
	`PRS_CH_CTRL_SIGSEL_TIMER_CCx
(1)

	)

231 
	#PRS_CH_CTRL_SIGSEL_TIMER_CC2
 
	`PRS_CH_CTRL_SIGSEL_TIMER_CCx
(2)

	)

232 
	#PRS_CH_CTRL_SIGSEL_USB_SOF
 0

	)

233 
	#PRS_CH_CTRL_SIGSEL_USB_SOFSR
 1

	)

234 
	#PRS_CH_CTRL_SIGSEL_RTC_OF
 0

	)

235 
	#PRS_CH_CTRL_SIGSEL_RTC_COMPx
(
x
Ë
	`PRS_CH_CTRL_SIGSEL
((xË+ 1)

	)

236 
	#PRS_CH_CTRL_SIGSEL_RTC_COMP0
 
	`PRS_CH_CTRL_SIGSEL_RTC_COMPx
(0)

	)

237 
	#PRS_CH_CTRL_SIGSEL_RTC_COMP1
 
	`PRS_CH_CTRL_SIGSEL_RTC_COMPx
(1)

	)

238 
	#PRS_CH_CTRL_SIGSEL_UART_TXC
 1

	)

239 
	#PRS_CH_CTRL_SIGSEL_UART_RXDATAV
 2

	)

240 
	#PRS_CH_CTRL_SIGSEL_GPIOL_PINx
(
x
Ë
	`PRS_CH_CTRL_SIGSEL
(x)

	)

241 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN0
 \

242 0

	)

243 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN1
 \

244 1

	)

245 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN2
 \

246 2

	)

247 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN3
 \

248 3

	)

249 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN4
 \

250 4

	)

251 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN5
 \

252 5

	)

253 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN6
 \

254 6

	)

255 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN7
 \

256 7

	)

257 
	#PRS_CH_CTRL_SIGSEL_GPIOH_PINx
(
x
Ë
	`PRS_CH_CTRL_SIGSEL
((xË- 8)

	)

258 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN8
 \

259 
	`PRS_CH_CTRL_SIGSEL_GPIOH_PINx
(8)

	)

260 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN9
 \

261 
	`PRS_CH_CTRL_SIGSEL_GPIOH_PINx
(9)

	)

262 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN10
 \

263 
	`PRS_CH_CTRL_SIGSEL_GPIOH_PINx
(10)

	)

264 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN11
 \

265 
	`PRS_CH_CTRL_SIGSEL_GPIOH_PINx
(11)

	)

266 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN12
 \

267 
	`PRS_CH_CTRL_SIGSEL_GPIOH_PINx
(12)

	)

268 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN13
 \

269 
	`PRS_CH_CTRL_SIGSEL_GPIOH_PINx
(13)

	)

270 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN14
 \

271 
	`PRS_CH_CTRL_SIGSEL_GPIOH_PINx
(14)

	)

272 
	#PRS_CH_CTRL_SIGSEL_GPIO_PIN15
 \

273 
	`PRS_CH_CTRL_SIGSEL_GPIOH_PINx
(15)

	)

274 
	#PRS_CH_CTRL_SIGSEL_LETIMER_CHx
(
x
Ë
	`PRS_CH_CTRL_SIGSEL
(x)

	)

275 
	#PRS_CH_CTRL_SIGSEL_LETIMER_CH0
 \

276 0

	)

277 
	#PRS_CH_CTRL_SIGSEL_LETIMER_CH1
 \

278 1

	)

279 
	#PRS_CH_CTRL_SIGSEL_BURTC_OF
 0

	)

280 
	#PRS_CH_CTRL_SIGSEL_BURTC_COMP0
 1

	)

281 
	#PRS_CH_CTRL_SIGSEL_LESENSEL_SCANRESx
(
x
Ë
	`PRS_CH_CTRL_SIGSEL
(x)

	)

282 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES0
 \

283 0

	)

284 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES1
 \

285 1

	)

286 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES2
 \

287 2

	)

288 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES3
 \

289 3

	)

290 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES4
 \

291 4

	)

292 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES5
 \

293 5

	)

294 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES6
 \

295 6

	)

296 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES7
 \

297 7

	)

298 
	#PRS_CH_CTRL_SIGSEL_LESENSEH_SCANRESx
(
x
) \

299 
	`PRS_CH_CTRL_SIGSEL
((
x
Ë- 8)

	)

300 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES8
 \

301 
	`PRS_CH_CTRL_SIGSEL_LESENSEH_SCANRESx
(8)

	)

302 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES9
 \

303 
	`PRS_CH_CTRL_SIGSEL_LESENSEH_SCANRESx
(9)

	)

304 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES10
 \

305 
	`PRS_CH_CTRL_SIGSEL_LESENSEH_SCANRESx
(10)

	)

306 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES11
 \

307 
	`PRS_CH_CTRL_SIGSEL_LESENSEH_SCANRESx
(11)

	)

308 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES12
 \

309 
	`PRS_CH_CTRL_SIGSEL_LESENSEH_SCANRESx
(12)

	)

310 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES13
 \

311 
	`PRS_CH_CTRL_SIGSEL_LESENSEH_SCANRESx
(13)

	)

312 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES14
 \

313 
	`PRS_CH_CTRL_SIGSEL_LESENSEH_SCANRESx
(14)

	)

314 
	#PRS_CH_CTRL_SIGSEL_LESENSE_SCANRES15
 \

315 
	`PRS_CH_CTRL_SIGSEL_LESENSEH_SCANRESx
(15)

	)

316 
	#PRS_CH_CTRL_SIGSEL_LESENSED_DECx
(
x
Ë
	`PRS_CH_CTRL_SIGSEL
(x)

	)

317 
	#PRS_CH_CTRL_SIGSEL_LESENSE_DEC0
 \

318 0

	)

319 
	#PRS_CH_CTRL_SIGSEL_LESENSE_DEC1
 \

320 1

	)

321 
	#PRS_CH_CTRL_SIGSEL_LESENSE_DEC2
 \

322 2

	)

328 
	e¥s_ch
 {

329 
	mPRS_CH0
 = 0,

330 
	mPRS_CH1
,

331 
	mPRS_CH2
,

332 
	mPRS_CH3
,

333 
	mPRS_CH4
,

334 
	mPRS_CH5
,

335 
	mPRS_CH6
,

336 
	mPRS_CH7
,

337 
	mPRS_CH8
,

338 
	mPRS_CH9
,

339 
	mPRS_CH10
,

340 
	mPRS_CH11


344 
BEGIN_DECLS


346 
¥s_íabÀ_gpio_ouçut
(
¥s_ch
 
ch
);

347 
¥s_dißbÀ_gpio_ouçut
(
¥s_ch
 
ch
);

348 
¥s_£t_ouçut_loc
(
uöt32_t
 
loc
);

350 
¥s_so·w¨e_pul£
(
¥s_ch
 
ch
);

351 
¥s_so·w¨e_Àvñ_high
(
¥s_ch
 
ch
);

352 
¥s_so·w¨e_Àvñ_low
(
¥s_ch
 
ch
);

354 
¥s_íabÀ_async
(
¥s_ch
 
ch
);

355 
¥s_dißbÀ_async
(
¥s_ch
 
ch
);

356 
¥s_£t_edge
(
¥s_ch
 
ch
, 
uöt32_t
 
edge
);

357 
¥s_£t_sour˚
(
¥s_ch
 
ch
, 
uöt32_t
 
sour˚
);

358 
¥s_£t_sig«l
(
¥s_ch
 
ch
, 
uöt32_t
 
sig
);

360 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/common/rmu_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_RMU_H


21 
	#LIBOPENCM3_EFM32_RMU_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#RMU_CTRL
 
	`MMIO32
(
RMU_BASE
 + 0x00)

	)

27 
	#RMU_RSTCAUSE
 
	`MMIO32
(
RMU_BASE
 + 0x04)

	)

28 
	#RMU_CMD
 
	`MMIO32
(
RMU_BASE
 + 0x08)

	)

31 
	#RMU_CTRL_BURSTEN
 (1 << 1)

	)

32 
	#RMU_CTRL_LOCKUPRDIS
 (1 << 0)

	)

35 
	#RMU_RSTCAUSE_BUMODERST
 (1 << 15)

	)

36 
	#RMU_RSTCAUSE_BUBODREG
 (1 << 14)

	)

37 
	#RMU_RSTCAUSE_BUBODUNREG
 (1 << 13)

	)

38 
	#RMU_RSTCAUSE_BUBODBUVIN
 (1 << 12)

	)

39 
	#RMU_RSTCAUSE_BUBODVDDDREG
 (1 << 11)

	)

40 
	#RMU_RSTCAUSE_BODAVDD1
 (1 << 10)

	)

41 
	#RMU_RSTCAUSE_BODAVDD0
 (1 << 9)

	)

42 
	#RMU_RSTCAUSE_EM4WURST
 (1 << 8)

	)

43 
	#RMU_RSTCAUSE_EM4RST
 (1 << 7)

	)

44 
	#RMU_RSTCAUSE_SYSREQRST
 (1 << 6)

	)

45 
	#RMU_RSTCAUSE_LOCKUPRST
 (1 << 5)

	)

46 
	#RMU_RSTCAUSE_WDOGRST
 (1 << 4)

	)

47 
	#RMU_RSTCAUSE_EXTRST
 (1 << 3)

	)

48 
	#RMU_RSTCAUSE_BODREGRST
 (1 << 2)

	)

49 
	#RMU_RSTCAUSE_BODUNREGRST
 (1 << 1)

	)

50 
	#RMU_RSTCAUSE_PORST
 (1 << 0)

	)

53 
	#RMU_CMD_RCCLR
 (1 << 0)

	)

	@libopencm3/include/libopencm3/efm32/common/rtc_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_RTC_H


21 
	#LIBOPENCM3_EFM32_RTC_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#RTC_CTRL
 (
RTC_BASE
 + 0x000)

	)

27 
	#RTC_CNT
 (
RTC_BASE
 + 0x004)

	)

28 
	#RTC_COMP0
 (
RTC_BASE
 + 0x008)

	)

29 
	#RTC_COMP1
 (
RTC_BASE
 + 0x00C)

	)

30 
	#RTC_IF
 (
RTC_BASE
 + 0x010)

	)

31 
	#RTC_IFS
 (
RTC_BASE
 + 0x014)

	)

32 
	#RTC_IFC
 (
RTC_BASE
 + 0x018)

	)

33 
	#RTC_IEN
 (
RTC_BASE
 + 0x01C)

	)

34 
	#RTC_FREEZE
 (
RTC_BASE
 + 0x020)

	)

35 
	#RTC_SYNCBUSY
 (
RTC_BASE
 + 0x024)

	)

38 
	#RTC_CTRL_COMP0TOP
 (1 << 2)

	)

39 
	#RTC_CTRL_DEBUGRUN
 (1 << 1)

	)

40 
	#RTC_CTRL_EN
 (1 << 0)

	)

43 
	#RTC_IF_COMP1
 (1 << 2)

	)

44 
	#RTC_IF_COMP0
 (1 << 1)

	)

45 
	#RTC_IF_OF
 (1 << 0)

	)

48 
	#RTC_IFS_COMP1
 (1 << 2)

	)

49 
	#RTC_IFS_COMP0
 (1 << 1)

	)

50 
	#RTC_IFS_OF
 (1 << 0)

	)

53 
	#RTC_IFC_COMP1
 (1 << 2)

	)

54 
	#RTC_IFC_COMP0
 (1 << 1)

	)

55 
	#RTC_IFC_OF
 (1 << 0)

	)

58 
	#RTC_IFE_COMP1
 (1 << 2)

	)

59 
	#RTC_IFE_COMP0
 (1 << 1)

	)

60 
	#RTC_IFE_OF
 (1 << 0)

	)

63 
	#RTC_FREEZE_REGFREEZE
 (1 << 0)

	)

66 
	#RTC_SYNCBUSY_COMP1
 (1 << 2)

	)

67 
	#RTC_SYNCBUSY_COMP0
 (1 << 1)

	)

68 
	#RTC_SYNCBUSY_CTRL
 (1 << 0)

	)

	@libopencm3/include/libopencm3/efm32/common/timer_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_TIMER_H


21 
	#LIBOPENCM3_EFM32_TIMER_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#TIMER_CTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x000)

	)

27 
	#TIMER_CMD
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x004)

	)

28 
	#TIMER_STATUS
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x008)

	)

29 
	#TIMER_IEN
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x00C)

	)

30 
	#TIMER_IF
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x010)

	)

31 
	#TIMER_IFS
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x014)

	)

32 
	#TIMER_IFC
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x018)

	)

33 
	#TIMER_TOP
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x01C)

	)

34 
	#TIMER_TOPB
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x020)

	)

35 
	#TIMER_CNT
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x024)

	)

36 
	#TIMER_ROUTE
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x028)

	)

38 
	#TIMER_CCx_CTRL
(
ba£
, 
x
Ë
	`MMIO32
((ba£Ë+ 0x030 + (0x10 * (x)))

	)

39 
	#TIMER_CCx_CCV
(
ba£
, 
x
Ë
	`MMIO32
((ba£Ë+ 0x034 + (0x10 * (x)))

	)

40 
	#TIMER_CCx_CCVP
(
ba£
, 
x
Ë
	`MMIO32
((ba£Ë+ 0x038 + (0x10 * (x)))

	)

41 
	#TIMER_CCx_CCVB
(
ba£
, 
x
Ë
	`MMIO32
((ba£Ë+ 0x03C + (0x10 * (x)))

	)

43 
	#TIMER_CC0_CTRL
(
ba£
Ë
	`TIMER_CCx_CTRL
(ba£, 0)

	)

44 
	#TIMER_CC0_CCV
(
ba£
Ë
	`TIMER_CCx_CCV
(ba£, 0)

	)

45 
	#TIMER_CC0_CCVP
(
ba£
Ë
	`TIMER_CCx_CCVP
(ba£, 0)

	)

46 
	#TIMER_CC0_CCVB
(
ba£
Ë
	`TIMER_CCx_CCVB
(ba£, 0)

	)

48 
	#TIMER_CC1_CTRL
(
ba£
Ë
	`TIMER_CCx_CTRL
(ba£, 1)

	)

49 
	#TIMER_CC1_CCV
(
ba£
Ë
	`TIMER_CCx_CCV
(ba£, 1)

	)

50 
	#TIMER_CC1_CCVP
(
ba£
Ë
	`TIMER_CCx_CCVP
(ba£, 1)

	)

51 
	#TIMER_CC1_CCVB
(
ba£
Ë
	`TIMER_CCx_CCVB
(ba£, 1)

	)

53 
	#TIMER_CC2_CTRL
(
ba£
Ë
	`TIMER_CCx_CTRL
(ba£, 2)

	)

54 
	#TIMER_CC2_CCV
(
ba£
Ë
	`TIMER_CCx_CCV
(ba£, 2)

	)

55 
	#TIMER_CC2_CCVP
(
ba£
Ë
	`TIMER_CCx_CCVP
(ba£, 2)

	)

56 
	#TIMER_CC2_CCVB
(
ba£
Ë
	`TIMER_CCx_CCVB
(ba£, 2)

	)

58 
	#TIMER_DTCTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x070)

	)

59 
	#TIMER_DTTIME
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x074)

	)

60 
	#TIMER_DTFC
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x078)

	)

61 
	#TIMER_DTOGEN
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x07C)

	)

62 
	#TIMER_DTFAULT
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x080)

	)

63 
	#TIMER_DTFAULTC
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x084)

	)

64 
	#TIMER_DTLOCK
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x088)

	)

67 
	#TIMER_CTRL_RSSCOIST
 (1 << 29)

	)

68 
	#TIMER_CTRL_ATI
 (1 << 28)

	)

70 
	#TIMER_CTRL_PRESC_SHIFT
 (24)

	)

71 
	#TIMER_CTRL_PRESC_MASK
 (0xF << 
TIMER_CTRL_PRESC_SHIFT
)

	)

72 
	#TIMER_CTRL_PRESC
(
v
) \

73 (((
v
Ë<< 
TIMER_CTRL_PRESC_SHIFT
Ë& 
TIMER_CTRL_PRESC_MASK
)

	)

74 
	#TIMER_CTRL_PRESC_DIV1
 0

	)

75 
	#TIMER_CTRL_PRESC_DIV2
 1

	)

76 
	#TIMER_CTRL_PRESC_DIV4
 2

	)

77 
	#TIMER_CTRL_PRESC_DIV8
 3

	)

78 
	#TIMER_CTRL_PRESC_DIV16
 4

	)

79 
	#TIMER_CTRL_PRESC_DIV32
 5

	)

80 
	#TIMER_CTRL_PRESC_DIV64
 6

	)

81 
	#TIMER_CTRL_PRESC_DIV128
 7

	)

82 
	#TIMER_CTRL_PRESC_DIV256
 8

	)

83 
	#TIMER_CTRL_PRESC_DIV512
 9

	)

84 
	#TIMER_CTRL_PRESC_DIV1024
 10

	)

85 
	#TIMER_CTRL_PRESC_NODIV
 
TIMER_CTRL_PRESC_DIV1


	)

87 
	#TIMER_CTRL_CLKSEL_SHIFT
 (16)

	)

88 
	#TIMER_CTRL_CLKSEL_MASK
 (0x3 << 
TIMER_CTRL_CLKSEL_SHIFT
)

	)

89 
	#TIMER_CTRL_CLKSEL
(
v
) \

90 (((
v
Ë<< 
TIMER_CTRL_CLKSEL_SHIFT
Ë& 
TIMER_CTRL_CLKSEL_MASK
)

	)

91 
	#TIMER_CTRL_CLKSEL_PRESCHFPERCLK
 0

	)

92 
	#TIMER_CTRL_CLKSEL_CC1
 1

	)

93 
	#TIMER_CTRL_CLKSEL_TIMEROUF
 2

	)

95 
	#TIMER_CTRL_X2CNT
 (1 << 13)

	)

97 
	#TIMER_CTRL_FALLA_SHIFT
 (10)

	)

98 
	#TIMER_CTRL_FALLA_MASK
 (0x3 << 
TIMER_CTRL_FALLA_SHIFT
)

	)

99 
	#TIMER_CTRL_FALLA
(
v
) \

100 (((
v
Ë<< 
TIMER_CTRL_FALLA_SHIFT
Ë& 
TIMER_CTRL_FALLA_MASK
)

	)

101 
	#TIMER_CTRL_FALLA_NONE
 0

	)

102 
	#TIMER_CTRL_FALLA_START
 1

	)

103 
	#TIMER_CTRL_FALLA_STOP
 2

	)

104 
	#TIMER_CTRL_FALLA_RELOADSTART
 3

	)

106 
	#TIMER_CTRL_RISEA_SHIFT
 (8)

	)

107 
	#TIMER_CTRL_RISEA_MASK
 (0x3 << 
TIMER_CTRL_RISEA_SHIFT
)

	)

108 
	#TIMER_CTRL_RISEA
(
v
) \

109 (((
v
Ë<< 
TIMER_CTRL_RISEA_SHIFT
Ë& 
TIMER_CTRL_RISEA_MASK
)

	)

110 
	#TIMER_CTRL_RISEA_NONE
 0

	)

111 
	#TIMER_CTRL_RISEA_START
 1

	)

112 
	#TIMER_CTRL_RISEA_STOP
 2

	)

113 
	#TIMER_CTRL_RISEA_RELOADSTART
 3

	)

121 
	#TIMER_CTRL_DMACLRACT
 (1 << 7)

	)

122 
	#TIMER_CTRL_DEBUGRUN
 (1 << 6)

	)

123 
	#TIMER_CTRL_QDM
 (1 << 5)

	)

124 
	#TIMER_CTRL_OSMEN
 (1 << 4)

	)

125 
	#TIMER_CTRL_SYNC
 (1 << 3)

	)

127 
	#TIMER_CTRL_MODE_SHIFT
 (0)

	)

128 
	#TIMER_CTRL_MODE_MASK
 (0x3 << 
TIMER_CTRL_MODE_SHIFT
)

	)

129 
	#TIMER_CTRL_MODE
(
v
) \

130 (((
v
Ë<< 
TIMER_CTRL_MODE_SHIFT
Ë& 
TIMER_CTRL_MODE_MASK
)

	)

131 
	#TIMER_CTRL_MODE_UP
 0

	)

132 
	#TIMER_CTRL_MODE_DOWN
 1

	)

133 
	#TIMER_CTRL_MODE_UPDOWN
 2

	)

134 
	#TIMER_CTRL_MODE_QDEC
 3

	)

137 
	#TIMER_CMD_STOP
 (1 << 1)

	)

138 
	#TIMER_CMD_START
 (1 << 0)

	)

141 
	#TIMER_STATUS_CCPOLx
(
x
Ë(1 << ((xË+ 24))

	)

142 
	#TIMER_STATUS_CCPOL2
 
	`TIMER_STATUS_CCPOLx
(2)

	)

143 
	#TIMER_STATUS_CCPOL1
 
	`TIMER_STATUS_CCPOLx
(1)

	)

144 
	#TIMER_STATUS_CCPOL0
 
	`TIMER_STATUS_CCPOLx
(0)

	)

146 
	#TIMER_STATUS_ICVx
(
x
Ë(1 << ((xË+ 16))

	)

147 
	#TIMER_STATUS_ICV2
 
	`TIMER_STATUS_ICVx
(2)

	)

148 
	#TIMER_STATUS_ICV1
 
	`TIMER_STATUS_ICVx
(1)

	)

149 
	#TIMER_STATUS_ICV0
 
	`TIMER_STATUS_ICVx
(0)

	)

151 
	#TIMER_STATUS_CCVBVx
(
x
Ë(1 << ((xË+ 8))

	)

152 
	#TIMER_STATUS_CCVBV2
 
	`TIMER_STATUS_CCVBVx
(2)

	)

153 
	#TIMER_STATUS_CCVBV1
 
	`TIMER_STATUS_CCVBVx
(1)

	)

154 
	#TIMER_STATUS_CCVBV0
 
	`TIMER_STATUS_CCVBVx
(0)

	)

156 
	#TIMER_STATUS_TOPBV
 (1 << 2)

	)

157 
	#TIMER_STATUS_DIR
 (1 << 1)

	)

158 
	#TIMER_STATUS_RUNNING
 (1 << 0)

	)

161 
	#TIMER_IEN_ICBOFx
(
x
Ë(1 << ((xË+ 8))

	)

162 
	#TIMER_IEN_ICBOF0
 
	`TIMER_IEN_ICBOFx
(0)

	)

163 
	#TIMER_IEN_ICBOF1
 
	`TIMER_IEN_ICBOFx
(1)

	)

164 
	#TIMER_IEN_ICBOF2
 
	`TIMER_IEN_ICBOFx
(2)

	)

166 
	#TIMER_IEN_CCx
(
x
Ë(1 << ((xË+ 4))

	)

167 
	#TIMER_IEN_CC0
 
	`TIMER_IEN_CCx
(0)

	)

168 
	#TIMER_IEN_CC1
 
	`TIMER_IEN_CCx
(1)

	)

169 
	#TIMER_IEN_CC2
 
	`TIMER_IEN_CCx
(2)

	)

171 
	#TIMER_IEN_UF
 (1 << 1)

	)

172 
	#TIMER_IEN_OF
 (1 << 0)

	)

176 
	#TIMER_IF_ICBOFx
(
x
Ë(1 << ((xË+ 8))

	)

177 
	#TIMER_IF_ICBOF0
 
	`TIMER_IF_ICBOFx
(0)

	)

178 
	#TIMER_IF_ICBOF1
 
	`TIMER_IF_ICBOFx
(1)

	)

179 
	#TIMER_IF_ICBOF2
 
	`TIMER_IF_ICBOFx
(2)

	)

181 
	#TIMER_IF_CCx
(
x
Ë(1 << ((xË+ 4))

	)

182 
	#TIMER_IF_CC0
 
	`TIMER_IF_CCx
(0)

	)

183 
	#TIMER_IF_CC1
 
	`TIMER_IF_CCx
(1)

	)

184 
	#TIMER_IF_CC2
 
	`TIMER_IF_CCx
(2)

	)

186 
	#TIMER_IF_UF
 (1 << 1)

	)

187 
	#TIMER_IF_OF
 (1 << 0)

	)

190 
	#TIMER_IFS_ICBOFx
(
x
Ë(1 << ((xË+ 8))

	)

191 
	#TIMER_IFS_ICBOF0
 
	`TIMER_IFS_ICBOFx
(0)

	)

192 
	#TIMER_IFS_ICBOF1
 
	`TIMER_IFS_ICBOFx
(1)

	)

193 
	#TIMER_IFS_ICBOF2
 
	`TIMER_IFS_ICBOFx
(2)

	)

195 
	#TIMER_IFS_CCx
(
x
Ë(1 << ((xË+ 4))

	)

196 
	#TIMER_IFS_CC0
 
	`TIMER_IFS_CCx
(0)

	)

197 
	#TIMER_IFS_CC1
 
	`TIMER_IFS_CCx
(1)

	)

198 
	#TIMER_IFS_CC2
 
	`TIMER_IFS_CCx
(2)

	)

200 
	#TIMER_IFS_UF
 (1 << 1)

	)

201 
	#TIMER_IFS_OF
 (1 << 0)

	)

205 
	#TIMER_IFC_ICBOFx
(
x
Ë(1 << ((xË+ 8))

	)

206 
	#TIMER_IFC_ICBOF0
 
	`TIMER_IFC_ICBOFx
(0)

	)

207 
	#TIMER_IFC_ICBOF1
 
	`TIMER_IFC_ICBOFx
(1)

	)

208 
	#TIMER_IFC_ICBOF2
 
	`TIMER_IFC_ICBOFx
(2)

	)

210 
	#TIMER_IFC_CCx
(
x
Ë(1 << ((xË+ 4))

	)

211 
	#TIMER_IFC_CC0
 
	`TIMER_IFC_CCx
(0)

	)

212 
	#TIMER_IFC_CC1
 
	`TIMER_IFC_CCx
(1)

	)

213 
	#TIMER_IFC_CC2
 
	`TIMER_IFC_CCx
(2)

	)

215 
	#TIMER_IFC_UF
 (1 << 1)

	)

216 
	#TIMER_IFC_OF
 (1 << 0)

	)

219 
	#TIMER_ROUTE_LOCATION_SHIFT
 (16)

	)

220 
	#TIMER_ROUTE_LOCATION_MASK
 (0x7 << 
TIMER_ROUTE_LOCATION_SHIFT
)

	)

221 
	#TIMER_ROUTE_LOCATION
(
v
) \

222 (((
v
Ë<< 
TIMER_ROUTE_LOCATION_SHIFT
Ë& 
TIMER_ROUTE_LOCATION_MASK
)

	)

223 
	#TIMER_ROUTE_LOCATION_LOCx
(
x
Ë
	`TIMER_ROUTE_LOCATION
(x)

	)

224 
	#TIMER_ROUTE_LOCATION_LOC0
 0

	)

225 
	#TIMER_ROUTE_LOCATION_LOC1
 1

	)

226 
	#TIMER_ROUTE_LOCATION_LOC2
 2

	)

227 
	#TIMER_ROUTE_LOCATION_LOC3
 3

	)

228 
	#TIMER_ROUTE_LOCATION_LOC4
 4

	)

229 
	#TIMER_ROUTE_LOCATION_LOC5
 5

	)

231 
	#TIMER_ROUTE_CDTIxPEN
(
x
Ë(1 << (8 + (x)))

	)

232 
	#TIMER_ROUTE_CDTI0PEN
 
	`TIMER_ROUTE_CDTIxPEN
(0)

	)

233 
	#TIMER_ROUTE_CDTI1PEN
 
	`TIMER_ROUTE_CDTIxPEN
(1)

	)

234 
	#TIMER_ROUTE_CDTI2PEN
 
	`TIMER_ROUTE_CDTIxPEN
(2)

	)

236 
	#TIMER_ROUTE_CCxPEN
(
x
Ë(1 << (0 + (x)))

	)

237 
	#TIMER_ROUTE_CC0PEN
 
	`TIMER_ROUTE_CCxPEN
(0)

	)

238 
	#TIMER_ROUTE_CC1PEN
 
	`TIMER_ROUTE_CCxPEN
(1)

	)

239 
	#TIMER_ROUTE_CC2PEN
 
	`TIMER_ROUTE_CCxPEN
(2)

	)

242 
	#TIMER_CC_CTRL_ICEVCTRL_SHIFT
 (26)

	)

243 
	#TIMER_CC_CTRL_ICEVCTRL_MASK
 (0x3 << 
TIMER_CC_CTRL_ICEVCTRL_SHIFT
)

	)

244 
	#TIMER_CC_CTRL_ICEVCTRL
(
v
) \

245 (((
v
Ë<< 
TIMER_CC_CTRL_ICEVCTRL_SHIFT
Ë& 
TIMER_CC_CTRL_ICEVCTRL_MASK
)

	)

246 
	#TIMER_CC_CTRL_ICEVCTRL_EVERYEDGE
 0

	)

247 
	#TIMER_CC_CTRL_ICEVCTRL_EVERYSECONDEDGE
 1

	)

248 
	#TIMER_CC_CTRL_ICEVCTRL_RISING
 2

	)

249 
	#TIMER_CC_CTRL_ICEVCTRL_FALLING
 3

	)

251 
	#TIMER_CC_CTRL_ICEVCTRL_EVERY_EDGE
 \

252 
TIMER_CC_CTRL_ICEVCTRL_EVERYEDGE


	)

253 
	#TIMER_CC_CTRL_ICEVCTRL_EVERY_SECOND_EDGE
 \

254 
TIMER_CC_CTRL_ICEVCTRL_EVERYSECONDEDGE


	)

256 
	#TIMER_CC_CTRL_ICEDGE_SHIFT
 (24)

	)

257 
	#TIMER_CC_CTRL_ICEDGE_MASK
 (0x3 << 
TIMER_CC_CTRL_ICEDGE_SHIFT
)

	)

258 
	#TIMER_CC_CTRL_ICEDGE
(
v
) \

259 (((
v
Ë<< 
TIMER_CC_CTRL_ICEDGE_SHIFT
Ë& 
TIMER_CC_CTRL_ICEDGE_MASK
)

	)

260 
	#TIMER_CC_CTRL_ICEDGE_RISING
 0

	)

261 
	#TIMER_CC_CTRL_ICEDGE_FALLING
 1

	)

262 
	#TIMER_CC_CTRL_ICEDGE_BOTH
 2

	)

263 
	#TIMER_CC_CTRL_ICEDGE_NONE
 3

	)

265 
	#TIMER_CC_CTRL_FILT
 (1 << 21)

	)

266 
	#TIMER_CC_CTRL_INSEL
 (1 << 21)

	)

269 
	#TIMER_CC_CTRL_PRSSEL_SHIFT
 (16)

	)

270 
	#TIMER_CC_CTRL_PRSSEL_MASK
 (0xF << 
TIMER_CC_CTRL_PRSSEL_SHIFT
)

	)

271 
	#TIMER_CC_CTRL_PRSSEL
(
v
) \

272 (((
v
Ë<< 
TIMER_CC_CTRL_PRSSEL_SHIFT
Ë& 
TIMER_CC_CTRL_PRSSEL_MASK
)

	)

273 
	#TIMER_CC_CTRL_PRSSEL_PRSCHx
(
x
Ë
	`TIMER_CC_CTRL_PRSSEL
(x)

	)

274 
	#TIMER_CC_CTRL_PRSSEL_PRSCH0
 0

	)

275 
	#TIMER_CC_CTRL_PRSSEL_PRSCH1
 1

	)

276 
	#TIMER_CC_CTRL_PRSSEL_PRSCH2
 2

	)

277 
	#TIMER_CC_CTRL_PRSSEL_PRSCH3
 3

	)

278 
	#TIMER_CC_CTRL_PRSSEL_PRSCH4
 4

	)

279 
	#TIMER_CC_CTRL_PRSSEL_PRSCH5
 5

	)

280 
	#TIMER_CC_CTRL_PRSSEL_PRSCH6
 6

	)

281 
	#TIMER_CC_CTRL_PRSSEL_PRSCH7
 7

	)

282 
	#TIMER_CC_CTRL_PRSSEL_PRSCH8
 8

	)

283 
	#TIMER_CC_CTRL_PRSSEL_PRSCH9
 9

	)

284 
	#TIMER_CC_CTRL_PRSSEL_PRSCH10
 10

	)

285 
	#TIMER_CC_CTRL_PRSSEL_PRSCH11
 11

	)

287 
	#TIMER_CC_CTRL_CUFOA_SHIFT
 (12)

	)

288 
	#TIMER_CC_CTRL_CUFOA_MASK
 (0x3 << 
TIMER_CC_CTRL_CUFOA_SHIFT
)

	)

289 
	#TIMER_CC_CTRL_CUFOA
(
v
) \

290 (((
v
Ë<< 
TIMER_CC_CTRL_CUFOA_SHIFT
Ë& 
TIMER_CC_CTRL_CUFOA_MASK
)

	)

291 
	#TIMER_CC_CTRL_CUFOA_NONE
 0

	)

292 
	#TIMER_CC_CTRL_CUFOA_TOGGLE
 1

	)

293 
	#TIMER_CC_CTRL_CUFOA_CLEAR
 2

	)

294 
	#TIMER_CC_CTRL_CUFOA_SET
 3

	)

296 
	#TIMER_CC_CTRL_COFOA_SHIFT
 (10)

	)

297 
	#TIMER_CC_CTRL_COFOA_MASK
 (0x3 << 
TIMER_CC_CTRL_COFOA_SHIFT
)

	)

298 
	#TIMER_CC_CTRL_COFOA
(
v
) \

299 (((
v
Ë<< 
TIMER_CC_CTRL_COFOA_SHIFT
Ë& 
TIMER_CC_CTRL_COFOA_MASK
)

	)

300 
	#TIMER_CC_CTRL_COFOA_NONE
 0

	)

301 
	#TIMER_CC_CTRL_COFOA_TOGGLE
 1

	)

302 
	#TIMER_CC_CTRL_COFOA_CLEAR
 2

	)

303 
	#TIMER_CC_CTRL_COFOA_SET
 3

	)

305 
	#TIMER_CC_CTRL_CMOA_SHIFT
 (8)

	)

306 
	#TIMER_CC_CTRL_CMOA_MASK
 (0x3 << 
TIMER_CC_CTRL_CMOA_SHIFT
)

	)

307 
	#TIMER_CC_CTRL_CMOA
(
v
) \

308 (((
v
Ë<< 
TIMER_CC_CTRL_CMOA_SHIFT
Ë& 
TIMER_CC_CTRL_CMOA_MASK
)

	)

309 
	#TIMER_CC_CTRL_CMOA_NONE
 0

	)

310 
	#TIMER_CC_CTRL_CMOA_TOGGLE
 1

	)

311 
	#TIMER_CC_CTRL_CMOA_CLEAR
 2

	)

312 
	#TIMER_CC_CTRL_CMOA_SET
 3

	)

314 
	#TIMER_CC_CTRL_COIST
 (1 << 4)

	)

315 
	#TIMER_CC_CTRL_OUTINV
 (1 << 2)

	)

317 
	#TIMER_CC_CTRL_MODE_SHIFT
 (0)

	)

318 
	#TIMER_CC_CTRL_MODE_MASK
 (0x3 << 
TIMER_CC_CTRL_MODE_SHIFT
)

	)

319 
	#TIMER_CC_CTRL_MODE
(
v
) \

320 (((
v
Ë<< 
TIMER_CC_CTRL_MODE_SHIFT
Ë& 
TIMER_CC_CTRL_MODE_MASK
)

	)

321 
	#TIMER_CC_CTRL_MODE_OFF
 0

	)

322 
	#TIMER_CC_CTRL_MODE_INPUTCAPTURE
 1

	)

323 
	#TIMER_CC_CTRL_MODE_OUTPUTCOMPARE
 2

	)

324 
	#TIMER_CC_CTRL_MODE_PWM
 3

	)

326 
	#TIMER_CC_CTRL_MODE_INPUT_CAPTURE
 \

327 
TIMER_CC_CTRL_MODE_INPUTCAPTURE


	)

328 
	#TIMER_CC_CTRL_MODE_OUTPUT_CAPTURE
 \

329 
TIMER_CC_CTRL_MODE_OUTPUTCAPTURE


	)

332 
	#TIMER_DTCTRL_DTPRSEN
 (1 << 24)

	)

334 
	#TIMER_DTCTRL_DTPRSSEL_SHIFT
 (4)

	)

335 
	#TIMER_DTCTRL_DTPRSSEL_MASK
 (0xF << 
TIMER_DTCTRL_DTPRSSEL_SHIFT
)

	)

336 
	#TIMER_DTCTRL_DTPRSSEL
(
v
) \

337 (((
v
Ë<< 
TIMER_DTCTRL_DTPRSSEL_SHIFT
Ë& 
TIMER_DTCTRL_DTPRSSEL_MASK
)

	)

338 
	#TIMER_DTCTRL_DTPRSSEL_PRSCHx
(
x
Ë
	`TIMER_DTCTRL_DTPRSSEL
(x)

	)

339 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH0
 0

	)

340 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH1
 1

	)

341 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH2
 2

	)

342 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH3
 3

	)

343 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH4
 4

	)

344 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH5
 5

	)

345 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH6
 6

	)

346 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH7
 7

	)

347 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH8
 8

	)

348 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH9
 9

	)

349 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH10
 10

	)

350 
	#TIMER_DTCTRL_DTPRSSEL_PRSCH11
 11

	)

352 
	#TIMER_DTCTRL_DTCINV
 (1 << 3)

	)

353 
	#TIMER_DTCTRL_DTIPOL
 (1 << 2)

	)

354 
	#TIMER_DTCTRL_DTDAS
 (1 << 1)

	)

355 
	#TIMER_DTCTRL_DTEN
 (1 << 0)

	)

358 
	#TIMER_DTTIME_DTFALLT_SHIFT
 (16)

	)

359 
	#TIMER_DTTIME_DTFALLT_MASK
 (0x3F << 
TIMER_DTTIME_DTFALLT_SHIFT
)

	)

360 
	#TIMER_DTTIME_DTFALLT
(
v
) \

361 (((
v
Ë<< 
TIMER_DTTIME_DTFALLT_SHIFT
Ë& 
TIMER_DTTIME_DTFALLT_MASK
)

	)

363 
	#TIMER_DTTIME_DTRISET_SHIFT
 (8)

	)

364 
	#TIMER_DTTIME_DTRISET_MASK
 (0x3F << 
TIMER_DTTIME_DTRISET_SHIFT
)

	)

365 
	#TIMER_DTTIME_DTRISET
(
v
) \

366 (((
v
Ë<< 
TIMER_DTTIME_DTRISET_SHIFT
Ë& 
TIMER_DTTIME_DTRISET_MASK
)

	)

369 
	#TIMER_DTTIME_DTPRESC_SHIFT
 (0)

	)

370 
	#TIMER_DTTIME_DTPRESC_MASK
 (0xF << 
TIMER_DTTIME_DTPRESC_SHIFT
)

	)

371 
	#TIMER_DTTIME_DTPRESC
(
v
) \

372 (((
v
Ë<< 
TIMER_DTTIME_DTPRESC_SHIFT
Ë& 
TIMER_DTTIME_DTPRESC_MASK
)

	)

373 
	#TIMER_DTTIME_DTPRESC_DIV1
 0

	)

374 
	#TIMER_DTTIME_DTPRESC_DIV2
 1

	)

375 
	#TIMER_DTTIME_DTPRESC_DIV4
 2

	)

376 
	#TIMER_DTTIME_DTPRESC_DIV8
 3

	)

377 
	#TIMER_DTTIME_DTPRESC_DIV16
 4

	)

378 
	#TIMER_DTTIME_DTPRESC_DIV32
 5

	)

379 
	#TIMER_DTTIME_DTPRESC_DIV64
 6

	)

380 
	#TIMER_DTTIME_DTPRESC_DIV128
 7

	)

381 
	#TIMER_DTTIME_DTPRESC_DIV256
 8

	)

382 
	#TIMER_DTTIME_DTPRESC_DIV512
 8

	)

383 
	#TIMER_DTTIME_DTPRESC_DIV1024
 10

	)

384 
	#TIMER_DTTIME_DTPRESC_NODIV
 
TIMER_DTTIME_DTPRESC_DIV1


	)

387 
	#TIMER_DTFC_DTLOCKUPFEN
 (1 << 27)

	)

388 
	#TIMER_DTFC_DTDBGFEN
 (1 << 26)

	)

389 
	#TIMER_DTFC_DTPRS1FEN
 (1 << 25)

	)

390 
	#TIMER_DTFC_DTPRS0FEN
 (1 << 24)

	)

392 
	#TIMER_DTFC_DTFA_SHIFT
 (16)

	)

393 
	#TIMER_DTFC_DTFA_MASK
 (0x3 << 
TIMER_DTFC_DTFA_SHIFT
)

	)

394 
	#TIMER_DTFC_DTFA
(
v
) \

395 (((
v
Ë<< 
TIMER_DTFC_DTFA_SHIFT
Ë& 
TIMER_DTFC_DTFA_MASK
)

	)

396 
	#TIMER_DTFC_DTFA_NONE
 0

	)

397 
	#TIMER_DTFC_DTFA_INACTIVE
 1

	)

398 
	#TIMER_DTFC_DTFA_CLEAR
 2

	)

399 
	#TIMER_DTFC_DTFA_TRISTATE
 3

	)

401 
	#TIMER_DTFC_DTPRS1FSEL_SHIFT
 (8)

	)

402 
	#TIMER_DTFC_DTPRS1FSEL_MASK
 (0x3 << 
TIMER_DTFC_DTPRS1FSEL_SHIFT
)

	)

403 
	#TIMER_DTFC_DTPRS1FSEL
(
v
) \

404 (((
v
Ë<< 
TIMER_DTFC_DTPRS1FSEL_SHIFT
Ë& 
TIMER_DTFC_DTPRS1FSEL_MASK
)

	)

405 
	#TIMER_DTFC_DTPRS1FSEL_PRSCHx
(
x
Ë
	`TIMER_DTFC_DTPRS1FSEL
(x)

	)

406 
	#TIMER_DTFC_DTPRS1FSEL_PRSCH0
 0

	)

407 
	#TIMER_DTFC_DTPRS1FSEL_PRSCH1
 1

	)

408 
	#TIMER_DTFC_DTPRS1FSEL_PRSCH2
 2

	)

409 
	#TIMER_DTFC_DTPRS1FSEL_PRSCH3
 3

	)

410 
	#TIMER_DTFC_DTPRS1FSEL_PRSCH4
 4

	)

411 
	#TIMER_DTFC_DTPRS1FSEL_PRSCH5
 5

	)

412 
	#TIMER_DTFC_DTPRS1FSEL_PRSCH6
 6

	)

413 
	#TIMER_DTFC_DTPRS1FSEL_PRSCH7
 7

	)

415 
	#TIMER_DTFC_DTPRS0FSEL_SHIFT
 (8)

	)

416 
	#TIMER_DTFC_DTPRS0FSEL_MASK
 (0x3 << 
TIMER_DTFC_DTPRS0FSEL_SHIFT
)

	)

417 
	#TIMER_DTFC_DTPRS0FSEL
(
v
) \

418 (((
v
Ë<< 
TIMER_DTFC_DTPRS0FSEL_SHIFT
Ë& 
TIMER_DTFC_DTPRS0FSEL_MASK
)

	)

419 
	#TIMER_DTFC_DTPRS0FSEL_PRSCHx
(
x
Ë
	`TIMER_DTFC_DTPRS0FSEL
(x)

	)

420 
	#TIMER_DTFC_DTPRS0FSEL_PRSCH0
 0

	)

421 
	#TIMER_DTFC_DTPRS0FSEL_PRSCH1
 1

	)

422 
	#TIMER_DTFC_DTPRS0FSEL_PRSCH2
 2

	)

423 
	#TIMER_DTFC_DTPRS0FSEL_PRSCH3
 3

	)

424 
	#TIMER_DTFC_DTPRS0FSEL_PRSCH4
 4

	)

425 
	#TIMER_DTFC_DTPRS0FSEL_PRSCH5
 5

	)

426 
	#TIMER_DTFC_DTPRS0FSEL_PRSCH6
 6

	)

427 
	#TIMER_DTFC_DTPRS0FSEL_PRSCH7
 7

	)

430 
	#TIMER_DTOGEN_DTOGCDTI2EN
 (1 << 5)

	)

431 
	#TIMER_DTOGEN_DTOGCDTI1EN
 (1 << 4)

	)

432 
	#TIMER_DTOGEN_DTOGCDTI0EN
 (1 << 3)

	)

433 
	#TIMER_DTOGEN_DTOGCC2EN
 (1 << 2)

	)

434 
	#TIMER_DTOGEN_DTOGCC1EN
 (1 << 1)

	)

435 
	#TIMER_DTOGEN_DTOGCC0EN
 (1 << 0)

	)

438 
	#TIMER_DTFAULT_DTLOCKUPF
 (1 << 3)

	)

439 
	#TIMER_DTFAULT_DTDBGF
 (1 << 2)

	)

440 
	#TIMER_DTFAULT_DTPRS1F
 (1 << 1)

	)

441 
	#TIMER_DTFAULT_DTPRS0F
 (1 << 0)

	)

444 
	#TIMER_DTFAULTC_TLOCKUPFC
 (1 << 3)

	)

445 
	#TIMER_DTFAULTC_DTDBGFC
 (1 << 2)

	)

446 
	#TIMER_DTFAULTC_DTPRS1FC
 (1 << 1)

	)

447 
	#TIMER_DTFAULTC_DTPRS0FC
 (1 << 0)

	)

450 
	#TIMER_DTLOCK_LOCKKEY_SHIFT
 (0)

	)

451 
	#TIMER_DTLOCK_LOCKKEY_MASK
 (0xFFFF << 
TIMER_DTLOCK_LOCKKEY_SHIFT
)

	)

452 
	#TIMER_DTLOCK_LOCKKEY_UNLOCKED
 (0x0000 << 
TIMER_DTLOCK_LOCKKEY_SHIFT
)

	)

453 
	#TIMER_DTLOCK_LOCKKEY_LOCKED
 (0x0001 << 
TIMER_DTLOCK_LOCKKEY_SHIFT
)

	)

454 
	#TIMER_DTLOCK_LOCKKEY_LOCK
 (0x0000 << 
TIMER_DTLOCK_LOCKKEY_SHIFT
)

	)

455 
	#TIMER_DTLOCK_LOCKKEY_UNLOCK
 (0xCE80 << 
TIMER_DTLOCK_LOCKKEY_SHIFT
)

	)

458 
	#TIMER0
 
TIMER0_BASE


	)

459 
	#TIMER0_CTRL
 
	`TIMER_CTRL
(
TIMER0
)

	)

460 
	#TIMER0_CMD
 
	`TIMER_CMD
(
TIMER0
)

	)

461 
	#TIMER0_STATUS
 
	`TIMER_STATUS
(
TIMER0
)

	)

462 
	#TIMER0_IEN
 
	`TIMER_IEN
(
TIMER0
)

	)

463 
	#TIMER0_IF
 
	`TIMER_IF
(
TIMER0
)

	)

464 
	#TIMER0_IFS
 
	`TIMER_IFS
(
TIMER0
)

	)

465 
	#TIMER0_IFC
 
	`TIMER_IFC
(
TIMER0
)

	)

466 
	#TIMER0_TOP
 
	`TIMER_TOP
(
TIMER0
)

	)

467 
	#TIMER0_TOPB
 
	`TIMER_TOPB
(
TIMER0
)

	)

468 
	#TIMER0_CNT
 
	`TIMER_CNT
(
TIMER0
)

	)

469 
	#TIMER0_ROUTE
 
	`TIMER_ROUTE
(
TIMER0
)

	)

471 
	#TIMER0_CC0_CTRL
 
	`TIMER_CC0_CTRL
(
TIMER0
)

	)

472 
	#TIMER0_CC0_CCV
 
	`TIMER_CC0_CCV
(
TIMER0
)

	)

473 
	#TIMER0_CC0_CCVP
 
	`TIMER_CC0_CCVP
(
TIMER0
)

	)

474 
	#TIMER0_CC0_CCVB
 
	`TIMER_CC0_CCVB
(
TIMER0
)

	)

476 
	#TIMER0_CC1_CTRL
 
	`TIMER_CC1_CTRL
(
TIMER0
)

	)

477 
	#TIMER0_CC1_CCV
 
	`TIMER_CC1_CCV
(
TIMER0
)

	)

478 
	#TIMER0_CC1_CCVP
 
	`TIMER_CC1_CCVP
(
TIMER0
)

	)

479 
	#TIMER0_CC1_CCVB
 
	`TIMER_CC1_CCVB
(
TIMER0
)

	)

481 
	#TIMER0_CC2_CTRL
 
	`TIMER_CC2_CTRL
(
TIMER0
)

	)

482 
	#TIMER0_CC2_CCV
 
	`TIMER_CC2_CCV
(
TIMER0
)

	)

483 
	#TIMER0_CC2_CCVP
 
	`TIMER_CC2_CCVP
(
TIMER0
)

	)

484 
	#TIMER0_CC2_CCVB
 
	`TIMER_CC2_CCVB
(
TIMER0
)

	)

486 
	#TIMER0_DTCTRL
 
	`TIMER_DTCTRL
(
TIMER0
)

	)

487 
	#TIMER0_DTTIME
 
	`TIMER_DTTIME
(
TIMER0
)

	)

488 
	#TIMER0_DTFC
 
	`TIMER_DTFC
(
TIMER0
)

	)

489 
	#TIMER0_DTOGEN
 
	`TIMER_DTOGEN
(
TIMER0
)

	)

490 
	#TIMER0_DTFAULT
 
	`TIMER_DTFAULT
(
TIMER0
)

	)

491 
	#TIMER0_DTFAULTC
 
	`TIMER_DTFAULTC
(
TIMER0
)

	)

492 
	#TIMER0_DTLOCK
 
	`TIMER_DTLOCK
(
TIMER0
)

	)

495 
	#TIMER1
 
TIMER1_BASE


	)

496 
	#TIMER1_CTRL
 
	`TIMER_CTRL
(
TIMER1
)

	)

497 
	#TIMER1_CMD
 
	`TIMER_CMD
(
TIMER1
)

	)

498 
	#TIMER1_STATUS
 
	`TIMER_STATUS
(
TIMER1
)

	)

499 
	#TIMER1_IEN
 
	`TIMER_IEN
(
TIMER1
)

	)

500 
	#TIMER1_IF
 
	`TIMER_IF
(
TIMER1
)

	)

501 
	#TIMER1_IFS
 
	`TIMER_IFS
(
TIMER1
)

	)

502 
	#TIMER1_IFC
 
	`TIMER_IFC
(
TIMER1
)

	)

503 
	#TIMER1_TOP
 
	`TIMER_TOP
(
TIMER1
)

	)

504 
	#TIMER1_TOPB
 
	`TIMER_TOPB
(
TIMER1
)

	)

505 
	#TIMER1_CNT
 
	`TIMER_CNT
(
TIMER1
)

	)

506 
	#TIMER1_ROUTE
 
	`TIMER_ROUTE
(
TIMER1
)

	)

508 
	#TIMER1_CC0_CTRL
 
	`TIMER_CC0_CTRL
(
TIMER1
)

	)

509 
	#TIMER1_CC0_CCV
 
	`TIMER_CC0_CCV
(
TIMER1
)

	)

510 
	#TIMER1_CC0_CCVP
 
	`TIMER_CC0_CCVP
(
TIMER1
)

	)

511 
	#TIMER1_CC0_CCVB
 
	`TIMER_CC0_CCVB
(
TIMER1
)

	)

513 
	#TIMER1_CC1_CTRL
 
	`TIMER_CC1_CTRL
(
TIMER1
)

	)

514 
	#TIMER1_CC1_CCV
 
	`TIMER_CC1_CCV
(
TIMER1
)

	)

515 
	#TIMER1_CC1_CCVP
 
	`TIMER_CC1_CCVP
(
TIMER1
)

	)

516 
	#TIMER1_CC1_CCVB
 
	`TIMER_CC1_CCVB
(
TIMER1
)

	)

518 
	#TIMER1_CC2_CTRL
 
	`TIMER_CC2_CTRL
(
TIMER1
)

	)

519 
	#TIMER1_CC2_CCV
 
	`TIMER_CC2_CCV
(
TIMER1
)

	)

520 
	#TIMER1_CC2_CCVP
 
	`TIMER_CC2_CCVP
(
TIMER1
)

	)

521 
	#TIMER1_CC2_CCVB
 
	`TIMER_CC2_CCVB
(
TIMER1
)

	)

524 
	#TIMER2
 
TIMER2_BASE


	)

525 
	#TIMER2_CTRL
 
	`TIMER_CTRL
(
TIMER2
)

	)

526 
	#TIMER2_CMD
 
	`TIMER_CMD
(
TIMER2
)

	)

527 
	#TIMER2_STATUS
 
	`TIMER_STATUS
(
TIMER2
)

	)

528 
	#TIMER2_IEN
 
	`TIMER_IEN
(
TIMER2
)

	)

529 
	#TIMER2_IF
 
	`TIMER_IF
(
TIMER2
)

	)

530 
	#TIMER2_IFS
 
	`TIMER_IFS
(
TIMER2
)

	)

531 
	#TIMER2_IFC
 
	`TIMER_IFC
(
TIMER2
)

	)

532 
	#TIMER2_TOP
 
	`TIMER_TOP
(
TIMER2
)

	)

533 
	#TIMER2_TOPB
 
	`TIMER_TOPB
(
TIMER2
)

	)

534 
	#TIMER2_CNT
 
	`TIMER_CNT
(
TIMER2
)

	)

535 
	#TIMER2_ROUTE
 
	`TIMER_ROUTE
(
TIMER2
)

	)

537 
	#TIMER2_CC0_CTRL
 
	`TIMER_CC0_CTRL
(
TIMER2
)

	)

538 
	#TIMER2_CC0_CCV
 
	`TIMER_CC0_CCV
(
TIMER2
)

	)

539 
	#TIMER2_CC0_CCVP
 
	`TIMER_CC0_CCVP
(
TIMER2
)

	)

540 
	#TIMER2_CC0_CCVB
 
	`TIMER_CC0_CCVB
(
TIMER2
)

	)

542 
	#TIMER2_CC1_CTRL
 
	`TIMER_CC1_CTRL
(
TIMER2
)

	)

543 
	#TIMER2_CC1_CCV
 
	`TIMER_CC1_CCV
(
TIMER2
)

	)

544 
	#TIMER2_CC1_CCVP
 
	`TIMER_CC1_CCVP
(
TIMER2
)

	)

545 
	#TIMER2_CC1_CCVB
 
	`TIMER_CC1_CCVB
(
TIMER2
)

	)

547 
	#TIMER2_CC2_CTRL
 
	`TIMER_CC2_CTRL
(
TIMER2
)

	)

548 
	#TIMER2_CC2_CCV
 
	`TIMER_CC2_CCV
(
TIMER2
)

	)

549 
	#TIMER2_CC2_CCVP
 
	`TIMER_CC2_CCVP
(
TIMER2
)

	)

550 
	#TIMER2_CC2_CCVB
 
	`TIMER_CC2_CCVB
(
TIMER2
)

	)

553 
	#TIMER3
 
TIMER3_BASE


	)

554 
	#TIMER3_CTRL
 
	`TIMER_CTRL
(
TIMER3
)

	)

555 
	#TIMER3_CMD
 
	`TIMER_CMD
(
TIMER3
)

	)

556 
	#TIMER3_STATUS
 
	`TIMER_STATUS
(
TIMER3
)

	)

557 
	#TIMER3_IEN
 
	`TIMER_IEN
(
TIMER3
)

	)

558 
	#TIMER3_IF
 
	`TIMER_IF
(
TIMER3
)

	)

559 
	#TIMER3_IFS
 
	`TIMER_IFS
(
TIMER3
)

	)

560 
	#TIMER3_IFC
 
	`TIMER_IFC
(
TIMER3
)

	)

561 
	#TIMER3_TOP
 
	`TIMER_TOP
(
TIMER3
)

	)

562 
	#TIMER3_TOPB
 
	`TIMER_TOPB
(
TIMER3
)

	)

563 
	#TIMER3_CNT
 
	`TIMER_CNT
(
TIMER3
)

	)

564 
	#TIMER3_ROUTE
 
	`TIMER_ROUTE
(
TIMER3
)

	)

566 
	#TIMER3_CC0_CTRL
 
	`TIMER_CC0_CTRL
(
TIMER3
)

	)

567 
	#TIMER3_CC0_CCV
 
	`TIMER_CC0_CCV
(
TIMER3
)

	)

568 
	#TIMER3_CC0_CCVP
 
	`TIMER_CC0_CCVP
(
TIMER3
)

	)

569 
	#TIMER3_CC0_CCVB
 
	`TIMER_CC0_CCVB
(
TIMER3
)

	)

571 
	#TIMER3_CC1_CTRL
 
	`TIMER_CC1_CTRL
(
TIMER3
)

	)

572 
	#TIMER3_CC1_CCV
 
	`TIMER_CC1_CCV
(
TIMER3
)

	)

573 
	#TIMER3_CC1_CCVP
 
	`TIMER_CC1_CCVP
(
TIMER3
)

	)

574 
	#TIMER3_CC1_CCVB
 
	`TIMER_CC1_CCVB
(
TIMER3
)

	)

576 
	#TIMER3_CC2_CTRL
 
	`TIMER_CC2_CTRL
(
TIMER3
)

	)

577 
	#TIMER3_CC2_CCV
 
	`TIMER_CC2_CCV
(
TIMER3
)

	)

578 
	#TIMER3_CC2_CCVP
 
	`TIMER_CC2_CCVP
(
TIMER3
)

	)

579 
	#TIMER3_CC2_CCVB
 
	`TIMER_CC2_CCVB
(
TIMER3
)

	)

585 
	etim_ch
 {

586 
	mTIM_CH0
 = 0,

587 
	mTIM_CH1
,

588 
	mTIM_CH2


592 
BEGIN_DECLS


594 
timî_°¨t
(
uöt32_t
 
timî
);

595 
timî_°›
(
uöt32_t
 
timî
);

597 
timî_£t_˛ock_¥esˇÀr
(
uöt32_t
 
timî
, uöt32_à
¥esˇÀr
);

599 
timî_£t_t›
(
uöt32_t
 
timî
, uöt32_à
t›
);

607 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/common/uart_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_UART_H


21 
	#LIBOPENCM3_EFM32_UART_H


	)

43 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

44 
	~<lib›ícm3/efm32/lg/ußπ.h
>

47 
	#UART0
 
UART0_BASE


	)

48 
	#UART0_CTRL
 
	`USART_CTRL
(
UART0
)

	)

49 
	#UART0_FRAME
 
	`USART_FRAME
(
UART0
)

	)

50 
	#UART0_TRIGCTRL
 
	`USART_TRIGCTRL
(
UART0
)

	)

51 
	#UART0_CMD
 
	`USART_CMD
(
UART0
)

	)

52 
	#UART0_STATUS
 
	`USART_STATUS
(
UART0
)

	)

53 
	#UART0_CLKDIV
 
	`USART_CLKDIV
(
UART0
)

	)

54 
	#UART0_RXDATAX
 
	`USART_RXDATAX
(
UART0
)

	)

55 
	#UART0_RXDATA
 
	`USART_RXDATA
(
UART0
)

	)

56 
	#UART0_RXDOUBLEX
 
	`USART_RXDOUBLEX
(
UART0
)

	)

57 
	#UART0_RXDOUBLE
 
	`USART_RXDOUBLE
(
UART0
)

	)

58 
	#UART0_RXDATAXP
 
	`USART_RXDATAXP
(
UART0
)

	)

59 
	#UART0_RXDOUBLEXP
 
	`USART_RXDOUBLEXP
(
UART0
)

	)

60 
	#UART0_TXDATAX
 
	`USART_TXDATAX
(
UART0
)

	)

61 
	#UART0_TXDATA
 
	`USART_TXDATA
(
UART0
)

	)

62 
	#UART0_TXDOUBLEX
 
	`USART_TXDOUBLEX
(
UART0
)

	)

63 
	#UART0_TXDOUBLE
 
	`USART_TXDOUBLE
(
UART0
)

	)

64 
	#UART0_IF
 
	`USART_IF
(
UART0
)

	)

65 
	#UART0_IFS
 
	`USART_IFS
(
UART0
)

	)

66 
	#UART0_IFC
 
	`USART_IFC
(
UART0
)

	)

67 
	#UART0_IEN
 
	`USART_IEN
(
UART0
)

	)

68 
	#UART0_IRCTRL
 
	`USART_IRCTRL
(
UART0
)

	)

69 
	#UART0_ROUTE
 
	`USART_ROUTE
(
UART0
)

	)

70 
	#UART0_INPUT
 
	`USART_INPUT
(
UART0
)

	)

71 
	#UART0_I2SCTRL
 
	`USART_I2SCTRL
(
UART0
)

	)

74 
	#UART1
 
UART1_BASE


	)

75 
	#UART1_CTRL
 
	`USART_CTRL
(
UART1
)

	)

76 
	#UART1_FRAME
 
	`USART_FRAME
(
UART1
)

	)

77 
	#UART1_TRIGCTRL
 
	`USART_TRIGCTRL
(
UART1
)

	)

78 
	#UART1_CMD
 
	`USART_CMD
(
UART1
)

	)

79 
	#UART1_STATUS
 
	`USART_STATUS
(
UART1
)

	)

80 
	#UART1_CLKDIV
 
	`USART_CLKDIV
(
UART1
)

	)

81 
	#UART1_RXDATAX
 
	`USART_RXDATAX
(
UART1
)

	)

82 
	#UART1_RXDATA
 
	`USART_RXDATA
(
UART1
)

	)

83 
	#UART1_RXDOUBLEX
 
	`USART_RXDOUBLEX
(
UART1
)

	)

84 
	#UART1_RXDOUBLE
 
	`USART_RXDOUBLE
(
UART1
)

	)

85 
	#UART1_RXDATAXP
 
	`USART_RXDATAXP
(
UART1
)

	)

86 
	#UART1_RXDOUBLEXP
 
	`USART_RXDOUBLEXP
(
UART1
)

	)

87 
	#UART1_TXDATAX
 
	`USART_TXDATAX
(
UART1
)

	)

88 
	#UART1_TXDATA
 
	`USART_TXDATA
(
UART1
)

	)

89 
	#UART1_TXDOUBLEX
 
	`USART_TXDOUBLEX
(
UART1
)

	)

90 
	#UART1_TXDOUBLE
 
	`USART_TXDOUBLE
(
UART1
)

	)

91 
	#UART1_IF
 
	`USART_IF
(
UART1
)

	)

92 
	#UART1_IFS
 
	`USART_IFS
(
UART1
)

	)

93 
	#UART1_IFC
 
	`USART_IFC
(
UART1
)

	)

94 
	#UART1_IEN
 
	`USART_IEN
(
UART1
)

	)

95 
	#UART1_IRCTRL
 
	`USART_IRCTRL
(
UART1
)

	)

96 
	#UART1_ROUTE
 
	`USART_ROUTE
(
UART1
)

	)

97 
	#UART1_INPUT
 
	`USART_INPUT
(
UART1
)

	)

98 
	#UART1_I2SCTRL
 
	`USART_I2SCTRL
(
UART1
)

	)

	@libopencm3/include/libopencm3/efm32/common/usart_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_USART_H


21 
	#LIBOPENCM3_EFM32_USART_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#USART_CTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x000)

	)

27 
	#USART_FRAME
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x004)

	)

28 
	#USART_TRIGCTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x008)

	)

29 
	#USART_CMD
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x00C)

	)

30 
	#USART_STATUS
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x010)

	)

31 
	#USART_CLKDIV
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x014)

	)

32 
	#USART_RXDATAX
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x018)

	)

33 
	#USART_RXDATA
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x01C)

	)

34 
	#USART_RXDOUBLEX
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x020)

	)

35 
	#USART_RXDOUBLE
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x024)

	)

36 
	#USART_RXDATAXP
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x028)

	)

37 
	#USART_RXDOUBLEXP
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x02C)

	)

38 
	#USART_TXDATAX
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x030)

	)

39 
	#USART_TXDATA
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x034)

	)

40 
	#USART_TXDOUBLEX
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x038)

	)

41 
	#USART_TXDOUBLE
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x03C)

	)

42 
	#USART_IF
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x040)

	)

43 
	#USART_IFS
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x044)

	)

44 
	#USART_IFC
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x048)

	)

45 
	#USART_IEN
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x04C)

	)

46 
	#USART_IRCTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x050)

	)

47 
	#USART_ROUTE
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x054)

	)

48 
	#USART_INPUT
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x058)

	)

49 
	#USART_I2SCTRL
(
ba£
Ë
	`MMIO32
((ba£Ë+ 0x05C)

	)

52 
	#USART_CTRL_SMSDELAY
 (1 << 31)

	)

53 
	#USART_CTRL_MVDIS
 (1 << 30)

	)

54 
	#USART_CTRL_AUTOTX
 (1 << 29)

	)

55 
	#USART_CTRL_BYTESWAP
 (1 << 28)

	)

57 
	#USART_CTRL_TXDELAY_SHIFT
 (26)

	)

58 
	#USART_CTRL_TXDELAY_MASK
 (0x3 << 
USART_CTRL_TXDELAY_SHIFT
)

	)

59 
	#USART_CTRL_TXDELAY
(
v
) \

60 (((
v
Ë<< 
USART_CTRL_TXDELAY_SHIFT
Ë& 
USART_CTRL_TXDELAY_MASK
)

	)

61 
	#USART_CTRL_TXDELAY_NONE
 0

	)

62 
	#USART_CTRL_TXDELAY_SINGLE
 1

	)

63 
	#USART_CTRL_TXDELAY_DOUBLE
 2

	)

64 
	#USART_CTRL_TXDELAY_TRIPLE
 3

	)

66 
	#USART_CTRL_SSSEARLY
 (1 << 25)

	)

67 
	#USART_CTRL_ERRSTX
 (1 << 24)

	)

68 
	#USART_CTRL_ERRSRX
 (1 << 23)

	)

69 
	#USART_CTRL_ERRSDMA
 (1 << 22)

	)

70 
	#USART_CTRL_BIT8DV
 (1 << 21)

	)

71 
	#USART_CTRL_SKIPPERRF
 (1 << 20)

	)

72 
	#USART_CTRL_SCRETRANS
 (1 << 19)

	)

73 
	#USART_CTRL_SCMODE
 (1 << 18)

	)

74 
	#USART_CTRL_AUTOTRI
 (1 << 17)

	)

75 
	#USART_CTRL_AUTOCS
 (1 << 16)

	)

76 
	#USART_CTRL_CSINV
 (1 << 15)

	)

77 
	#USART_CTRL_TXINV
 (1 << 14)

	)

78 
	#USART_CTRL_RXINV
 (1 << 13)

	)

79 
	#USART_CTRL_TXBIL
 (1 << 12)

	)

80 
	#USART_CTRL_CSMA
 (1 << 11)

	)

81 
	#USART_CTRL_MSBF
 (1 << 10)

	)

82 
	#USART_CTRL_CLKPHA
 (1 << 9)

	)

83 
	#USART_CTRL_CLKPOL
 (1 << 8)

	)

85 
	#USART_CTRL_OVS_SHIFT
 (5)

	)

86 
	#USART_CTRL_OVS_MASK
 (0x3 << 
USART_CTRL_OVS_SHIFT
)

	)

87 
	#USART_CTRL_OVS
(
v
) \

88 (((
v
Ë<< 
USART_CTRL_OVS_SHIFT
Ë& 
USART_CTRL_OVS_MASK
)

	)

89 
	#USART_CTRL_OVS_X16
 0

	)

90 
	#USART_CTRL_OVS_X8
 1

	)

91 
	#USART_CTRL_OVS_X6
 2

	)

92 
	#USART_CTRL_OVS_X4
 3

	)

94 
	#USART_CTRL_MPAB
 (1 << 4)

	)

95 
	#USART_CTRL_MPM
 (1 << 3)

	)

96 
	#USART_CTRL_CCEN
 (1 << 2)

	)

97 
	#USART_CTRL_LOOPBK
 (1 << 1)

	)

98 
	#USART_CTRL_SYNC
 (1 << 0)

	)

102 
	#USART_FRAME_STOPBITS_SHIFT
 (12)

	)

103 
	#USART_FRAME_STOPBITS_MASK
 (0x3 << 
USART_FRAME_STOPBITS_SHIFT
)

	)

104 
	#USART_FRAME_STOPBITS
(
v
) \

105 (((
v
Ë<< 
USART_FRAME_STOPBITS_SHIFT
Ë& 
USART_FRAME_STOPBITS_MASK
)

	)

106 
	#USART_FRAME_STOPBITS_HALF
 0

	)

107 
	#USART_FRAME_STOPBITS_ONE
 1

	)

108 
	#USART_FRAME_STOPBITS_ONEANDAHALF
 2

	)

109 
	#USART_FRAME_STOPBITS_ONE_AND_A_HALF
 \

110 
USART_FRAME_STOPBITS_ONEANDAHALF


	)

111 
	#USART_FRAME_STOPBITS_TWO
 3

	)

113 
	#USART_FRAME_PARITY_SHIFT
 (8)

	)

114 
	#USART_FRAME_PARITY_MASK
 (0x3 << 
USART_FRAME_PARITY_SHIFT
)

	)

115 
	#USART_FRAME_PARITY
(
v
) \

116 (((
v
Ë<< 
USART_FRAME_PARITY_SHIFT
Ë& 
USART_FRAME_PARITY_MASK
)

	)

117 
	#USART_FRAME_PARITY_NONE
 0

	)

118 
	#USART_FRAME_PARITY_EVEN
 2

	)

119 
	#USART_FRAME_PARITY_ODD
 3

	)

121 
	#USART_FRAME_DATABITS_SHIFT
 (0)

	)

122 
	#USART_FRAME_DATABITS_MASK
 (0xF << 
USART_FRAME_DATABITS_SHIFT
)

	)

123 
	#USART_FRAME_DATABITS
(
v
) \

124 (((
v
Ë<< 
USART_FRAME_DATABITS_SHIFT
Ë& 
USART_FRAME_DATABITS_MASK
)

	)

125 
	#USART_FRAME_DATABITS_FOUR
 1

	)

126 
	#USART_FRAME_DATABITS_FIVE
 2

	)

127 
	#USART_FRAME_DATABITS_SIX
 3

	)

128 
	#USART_FRAME_DATABITS_SEVEN
 4

	)

129 
	#USART_FRAME_DATABITS_EIGHT
 5

	)

130 
	#USART_FRAME_DATABITS_NINE
 6

	)

131 
	#USART_FRAME_DATABITS_TEN
 7

	)

132 
	#USART_FRAME_DATABITS_ELEVEN
 8

	)

133 
	#USART_FRAME_DATABITS_TWELVE
 9

	)

134 
	#USART_FRAME_DATABITS_THIRTEEN
 10

	)

135 
	#USART_FRAME_DATABITS_FOURTEEN
 11

	)

136 
	#USART_FRAME_DATABITS_FIFTEEN
 12

	)

137 
	#USART_FRAME_DATABITS_SIXTEEN
 13

	)

140 
	#USART_TRIGCTRL_AUTOTXTEN
 (1 << 6)

	)

141 
	#USART_TRIGCTRL_TXTEN
 (1 << 5)

	)

142 
	#USART_TRIGCTRL_RXTEN
 (1 << 4)

	)

144 
	#USART_TRIGCTRL_TSEL_SHIFT
 (8)

	)

145 
	#USART_TRIGCTRL_TSEL_MASK
 (0x3 << 
USART_TRIGCTRL_TSEL_SHIFT
)

	)

146 
	#USART_TRIGCTRL_TSEL_PRSCHx
(
v
) \

147 (((
v
Ë<< 
USART_TRIGCTRL_TSEL_SHIFT
Ë& 
USART_TRIGCTRL_TSEL_MASK
)

	)

148 
	#USART_TRIGCTRL_TSEL_PRSCH0
 0

	)

149 
	#USART_TRIGCTRL_TSEL_PRSCH1
 1

	)

150 
	#USART_TRIGCTRL_TSEL_PRSCH2
 2

	)

151 
	#USART_TRIGCTRL_TSEL_PRSCH3
 3

	)

152 
	#USART_TRIGCTRL_TSEL_PRSCH4
 4

	)

153 
	#USART_TRIGCTRL_TSEL_PRSCH5
 5

	)

154 
	#USART_TRIGCTRL_TSEL_PRSCH6
 6

	)

155 
	#USART_TRIGCTRL_TSEL_PRSCH7
 7

	)

158 
	#USART_CMD_CLEARRX
 (1 << 11)

	)

159 
	#USART_CMD_CLEARTX
 (1 << 10)

	)

160 
	#USART_CMD_TXTRIDIS
 (1 << 9)

	)

161 
	#USART_CMD_TXTRIEN
 (1 << 8)

	)

162 
	#USART_CMD_RXBLOCKDIS
 (1 << 7)

	)

163 
	#USART_CMD_RXBLOCKEN
 (1 << 6)

	)

164 
	#USART_CMD_MASTERDIS
 (1 << 5)

	)

165 
	#USART_CMD_MASTEREN
 (1 << 4)

	)

166 
	#USART_CMD_TXDIS
 (1 << 3)

	)

167 
	#USART_CMD_TXEN
 (1 << 2)

	)

168 
	#USART_CMD_RXDIS
 (1 << 1)

	)

169 
	#USART_CMD_RXEN
 (1 << 0)

	)

172 
	#USART_STATUS_RXFULLRIGHT
 (1 << 12)

	)

173 
	#USART_STATUS_RXDATAVRIGHT
 (1 << 11)

	)

174 
	#USART_STATUS_TXBSRIGHT
 (1 << 10)

	)

175 
	#USART_STATUS_TXBDRIGHT
 (1 << 9)

	)

176 
	#USART_STATUS_RXFULL
 (1 << 8)

	)

177 
	#USART_STATUS_RXDATAV
 (1 << 7)

	)

178 
	#USART_STATUS_TXBL
 (1 << 6)

	)

179 
	#USART_STATUS_TXC
 (1 << 5)

	)

180 
	#USART_STATUS_TXTRI
 (1 << 4)

	)

181 
	#USART_STATUS_RXBLOCK
 (1 << 3)

	)

182 
	#USART_STATUS_MASTER
 (1 << 2)

	)

183 
	#USART_STATUS_TXENS
 (1 << 1)

	)

184 
	#USART_STATUS_RXENS
 (1 << 0)

	)

187 
	#USART_CLKDIV_DIV_SHIFT
 (6)

	)

188 
	#USART_CLKDIV_DIV_MASK
 (0x7FFF << 
USART_CLKDIV_DIV_SHIFT
)

	)

189 
	#USART_CLKDIV_DIV
(
v
) \

190 (((
v
Ë<< 
USART_CLKDIV_DIV_SHIFT
Ë& 
USART_CLKDIV_DIV_MASK
)

	)

193 
	#USART_RXDATAX_FERR
 (1 << 15)

	)

194 
	#USART_RXDATAX_PERR
 (1 << 14)

	)

196 
	#USART_RXDATAX_RXDATA_SHIFT
 (0)

	)

197 
	#USART_RXDATAX_RXDATA_MASK
 (0x1FF << 
USART_RXDATAX_RXDATA_SHIFT
)

	)

200 
	#USART_RXDOUBLEX_FERR1
 (1 << 31)

	)

201 
	#USART_RXDOUBLEX_PERR1
 (1 << 30)

	)

203 
	#USART_RXDOUBLEX_RXDATA1_SHIFT
 (16)

	)

204 
	#USART_RXDOUBLEX_RXDATA1_MASK
 \

205 (0x1FF << 
USART_RXDOUBLEX_RXDATA1_SHIFT
)

	)

207 
	#USART_RXDOUBLEX_FERR0
 (1 << 15)

	)

208 
	#USART_RXDOUBLEX_PERR0
 (1 << 14)

	)

210 
	#USART_RXDOUBLEX_RXDATA0_SHIFT
 (0)

	)

211 
	#USART_RXDOUBLEX_RXDATA0_MASK
 \

212 (0x1FF << 
USART_RXDOUBLEX_RXDATA1_SHIFT
)

	)

215 
	#USART_RXDOUBLE_RXDATA1_SHIFT
 (8)

	)

216 
	#USART_RXDOUBLE_RXDATA1_MASK
 (0xFF << 
USART_RXDOUBLE_RXDATA1_SHIFT
)

	)

218 
	#USART_RXDOUBLE_RXDATA0_SHIFT
 (0)

	)

219 
	#USART_RXDOUBLE_RXDATA0_MASK
 (0xFF << 
USART_RXDOUBLE_RXDATA0_SHIFT
)

	)

222 
	#USART_RXDATAXP_FERRP
 (1 << 15)

	)

223 
	#USART_RXDATAXP_PERRP
 (1 << 14)

	)

225 
	#USART_RXDATAXP_RXDATAP_SHIFT
 (0)

	)

226 
	#USART_RXDATAXP_RXDATAP_MASK
 (0x1FF << 
USART_RXDATAXP_RXDATAP_SHIFT
)

	)

229 
	#USART_RXDOUBLEXP_FERR1
 (1 << 31)

	)

230 
	#USART_RXDOUBLEXP_PERR1
 (1 << 30)

	)

232 
	#USART_RXDOUBLEXP_RXDATA1_SHIFT
 (16)

	)

233 
	#USART_RXDOUBLEXP_RXDATA1_MASK
 \

234 (0x1FF << 
USART_RXDOUBLEXP_RXDATA1_SHIFT
)

	)

236 
	#USART_RXDOUBLEXP_FERR0
 (1 << 15)

	)

237 
	#USART_RXDOUBLEXP_PERR0
 (1 << 14)

	)

239 
	#USART_RXDOUBLEXP_RXDATA0_SHIFT
 (0)

	)

240 
	#USART_RXDOUBLEXP_RXDATA0_MASK
 \

241 (0x1FF << 
USART_RXDOUBLEXP_RXDATA1_SHIFT
)

	)

244 
	#USART_TXDATAX_RXENAT
 (1 << 15)

	)

245 
	#USART_TXDATAX_TXDISAT
 (1 << 14)

	)

246 
	#USART_TXDATAX_TXBREAK
 (1 << 13)

	)

247 
	#USART_TXDATAX_TXTRIAT
 (1 << 12)

	)

248 
	#USART_TXDATAX_UBRXAT
 (1 << 11)

	)

250 
	#USART_TXDATAX_TXDATAX_SHIFT
 (0)

	)

251 
	#USART_TXDATAX_TXDATAX_MASK
 (0x1FF << 
USART_TXDATAX_TXDATAX_SHIFT
)

	)

254 
	#USART_TXDOUBLEX_RXENAT1
 (1 << 31)

	)

255 
	#USART_TXDOUBLEX_TXDISAT1
 (1 << 30)

	)

256 
	#USART_TXDOUBLEX_TXBREAK1
 (1 << 29)

	)

257 
	#USART_TXDOUBLEX_TXTRIAT1
 (1 << 28)

	)

258 
	#USART_TXDOUBLEX_UBRXAT1
 (1 << 27)

	)

260 
	#USART_TXDOUBLEX_TXDATA1_SHIFT
 (16)

	)

261 
	#USART_TXDOUBLEX_TXDATA1_MASK
 \

262 (0x1FF << 
USART_TXDOUBLEX_TXDATA1_SHIFT
)

	)

264 
	#USART_TXDOUBLEX_RXENAT0
 (1 << 15)

	)

265 
	#USART_TXDOUBLEX_TXDISAT0
 (1 << 14)

	)

266 
	#USART_TXDOUBLEX_TXBREAK0
 (1 << 13)

	)

267 
	#USART_TXDOUBLEX_TXTRIAT0
 (1 << 12)

	)

268 
	#USART_TXDOUBLEX_UBRXAT0
 (1 << 11)

	)

270 
	#USART_TXDOUBLEX_TXDATA0_SHIFT
 (0)

	)

271 
	#USART_TXDOUBLEX_TXDATA0_MASK
 \

272 (0x1FF << 
USART_TXDOUBLEX_TXDATA0_SHIFT
)

	)

275 
	#USART_TXDOUBLE_TXDATA1_SHIFT
 (8)

	)

276 
	#USART_TXDOUBLE_TXDATA1_MASK
 (0xFF << 
USART_TXDOUBLE_TXDATA1_SHIFT
)

	)

278 
	#USART_TXDOUBLE_TXDATA0_SHIFT
 (0)

	)

279 
	#USART_TXDOUBLE_TXDATA0_MASK
 (0xFF << 
USART_TXDOUBLE_TXDATA0_SHIFT
)

	)

282 
	#USART_IF_CCF
 (1 << 12)

	)

283 
	#USART_IF_SSM
 (1 << 11)

	)

284 
	#USART_IF_MPAF
 (1 << 10)

	)

285 
	#USART_IF_FERR
 (1 << 9)

	)

286 
	#USART_IF_PERR
 (1 << 8)

	)

287 
	#USART_IF_TXUF
 (1 << 7)

	)

288 
	#USART_IF_TXOF
 (1 << 6)

	)

289 
	#USART_IF_RXUF
 (1 << 5)

	)

290 
	#USART_IF_RXOF
 (1 << 4)

	)

291 
	#USART_IF_RXFULL
 (1 << 3)

	)

292 
	#USART_IF_RXDATAV
 (1 << 2)

	)

293 
	#USART_IF_TXBL
 (1 << 1)

	)

294 
	#USART_IF_TXC
 (1 << 0)

	)

297 
	#USART_IFS_CCF
 (1 << 12)

	)

298 
	#USART_IFS_SSM
 (1 << 11)

	)

299 
	#USART_IFS_MPAF
 (1 << 10)

	)

300 
	#USART_IFS_FERR
 (1 << 9)

	)

301 
	#USART_IFS_PERR
 (1 << 8)

	)

302 
	#USART_IFS_TXUF
 (1 << 7)

	)

303 
	#USART_IFS_TXOF
 (1 << 6)

	)

304 
	#USART_IFS_RXUF
 (1 << 5)

	)

305 
	#USART_IFS_RXOF
 (1 << 4)

	)

306 
	#USART_IFS_RXFULL
 (1 << 3)

	)

307 
	#USART_IFS_RXDATAV
 (1 << 2)

	)

308 
	#USART_IFS_TXBL
 (1 << 1)

	)

309 
	#USART_IFS_TXC
 (1 << 0)

	)

312 
	#USART_IFC_CCF
 (1 << 12)

	)

313 
	#USART_IFC_SSM
 (1 << 11)

	)

314 
	#USART_IFC_MPAF
 (1 << 10)

	)

315 
	#USART_IFC_FERR
 (1 << 9)

	)

316 
	#USART_IFC_PERR
 (1 << 8)

	)

317 
	#USART_IFC_TXUF
 (1 << 7)

	)

318 
	#USART_IFC_TXOF
 (1 << 6)

	)

319 
	#USART_IFC_RXUF
 (1 << 5)

	)

320 
	#USART_IFC_RXOF
 (1 << 4)

	)

321 
	#USART_IFC_RXFULL
 (1 << 3)

	)

322 
	#USART_IFC_RXDATAV
 (1 << 2)

	)

323 
	#USART_IFC_TXBL
 (1 << 1)

	)

324 
	#USART_IFC_TXC
 (1 << 0)

	)

327 
	#USART_IEN_CCF
 (1 << 12)

	)

328 
	#USART_IEN_SSM
 (1 << 11)

	)

329 
	#USART_IEN_MPAF
 (1 << 10)

	)

330 
	#USART_IEN_FERR
 (1 << 9)

	)

331 
	#USART_IEN_PERR
 (1 << 8)

	)

332 
	#USART_IEN_TXUF
 (1 << 7)

	)

333 
	#USART_IEN_TXOF
 (1 << 6)

	)

334 
	#USART_IEN_RXUF
 (1 << 5)

	)

335 
	#USART_IEN_RXOF
 (1 << 4)

	)

336 
	#USART_IEN_RXFULL
 (1 << 3)

	)

337 
	#USART_IEN_RXDATAV
 (1 << 2)

	)

338 
	#USART_IEN_TXBL
 (1 << 1)

	)

339 
	#USART_IEN_TXC
 (1 << 0)

	)

342 
	#USART_IRCTRL_IRPRSEN
 (1 << 7)

	)

344 
	#USART_IRCTRL_IRPRSSEL_SHIFT
 (4)

	)

345 
	#USART_IRCTRL_IRPRSSEL_MASK
 (0x7 << 
USART_IRCTRL_IRPRSSEL_SHIFT
)

	)

346 
	#USART_IRCTRL_IRPRSSEL
(
v
) \

347 (((
v
Ë<< 
USART_IRCTRL_IRPRSSEL_SHIFT
Ë& 
USART_IRCTRL_IRPRSSEL_MASK
)

	)

348 
	#USART_IRCTRL_IRPRSSEL_PRSCHx
(
x
Ë
	`USART_IRCTRL_IRPRSSEL
(x)

	)

349 
	#USART_IRCTRL_IRPRSSEL_PRSCH0
 0

	)

350 
	#USART_IRCTRL_IRPRSSEL_PRSCH1
 1

	)

351 
	#USART_IRCTRL_IRPRSSEL_PRSCH2
 2

	)

352 
	#USART_IRCTRL_IRPRSSEL_PRSCH3
 3

	)

353 
	#USART_IRCTRL_IRPRSSEL_PRSCH4
 4

	)

354 
	#USART_IRCTRL_IRPRSSEL_PRSCH5
 5

	)

355 
	#USART_IRCTRL_IRPRSSEL_PRSCH6
 6

	)

356 
	#USART_IRCTRL_IRPRSSEL_PRSCH7
 7

	)

358 
	#USART_IRCTRL_IRFILT
 (1 << 3)

	)

360 
	#USART_IRCTRL_IRPW_SHIFT
 (1)

	)

361 
	#USART_IRCTRL_IRPW_MASK
 (0x3 << 
USART_IRCTRL_IRPW_SHIFT
)

	)

362 
	#USART_IRCTRL_IRPW
(
v
) \

363 (((
v
Ë<< 
USART_IRCTRL_IRPW_SHIFT
Ë& 
USART_IRCTRL_IRPW_MASK
)

	)

364 
	#USART_IRCTRL_IRPW_ONE
 0

	)

365 
	#USART_IRCTRL_IRPW_TWO
 1

	)

366 
	#USART_IRCTRL_IRPW_THREE
 2

	)

367 
	#USART_IRCTRL_IRPW_FOUR
 3

	)

369 
	#USART_IRCTRL_IREN
 (1 << 0)

	)

372 
	#USART_ROUTE_LOCATION_SHIFT
 (8)

	)

373 
	#USART_ROUTE_LOCATION_MASK
 (0x7 << 
USART_ROUTE_LOCATION_SHIFT
)

	)

374 
	#USART_ROUTE_LOCATION
(
v
) \

375 (((
v
Ë<< 
USART_ROUTE_LOCATION_SHIFT
Ë& 
USART_ROUTE_LOCATION_MASK
)

	)

376 
	#USART_ROUTE_LOCATION_LOCx
(
x
Ë
	`USART_ROUTE_LOCATION
(x)

	)

377 
	#USART_ROUTE_LOCATION_LOC0
 0

	)

378 
	#USART_ROUTE_LOCATION_LOC1
 1

	)

379 
	#USART_ROUTE_LOCATION_LOC2
 2

	)

380 
	#USART_ROUTE_LOCATION_LOC3
 3

	)

381 
	#USART_ROUTE_LOCATION_LOC4
 4

	)

382 
	#USART_ROUTE_LOCATION_LOC5
 5

	)

384 
	#USART_ROUTE_CLKPEN
 (1 << 3)

	)

385 
	#USART_ROUTE_CSPEN
 (1 << 2)

	)

386 
	#USART_ROUTE_TXPEN
 (1 << 1)

	)

387 
	#USART_ROUTE_RXPEN
 (1 << 0)

	)

390 
	#USART_INPUT_RXPRS
 (1 << 4)

	)

392 
	#USART_INPUT_RXPRSSEL_SHIFT
 (0)

	)

393 
	#USART_INPUT_RXPRSSEL_MASK
 (0xF << 
USART_INPUT_RXPRSSEL_SHIFT
)

	)

394 
	#USART_INPUT_RXPRSSEL
(
v
) \

395 (((
v
Ë<< 
USART_INPUT_RXPRSSEL_SHIFT
Ë& 
USART_INPUT_RXPRSSEL_MASK
)

	)

396 
	#USART_INPUT_RXPRSSEL_PRSCHx
(
x
Ë
	`USART_INPUT_RXPRSSEL
(x)

	)

397 
	#USART_INPUT_RXPRSSEL_PRSCH0
 0

	)

398 
	#USART_INPUT_RXPRSSEL_PRSCH1
 1

	)

399 
	#USART_INPUT_RXPRSSEL_PRSCH2
 2

	)

400 
	#USART_INPUT_RXPRSSEL_PRSCH3
 3

	)

401 
	#USART_INPUT_RXPRSSEL_PRSCH4
 4

	)

402 
	#USART_INPUT_RXPRSSEL_PRSCH5
 5

	)

403 
	#USART_INPUT_RXPRSSEL_PRSCH6
 6

	)

404 
	#USART_INPUT_RXPRSSEL_PRSCH7
 7

	)

405 
	#USART_INPUT_RXPRSSEL_PRSCH8
 8

	)

406 
	#USART_INPUT_RXPRSSEL_PRSCH9
 9

	)

407 
	#USART_INPUT_RXPRSSEL_PRSCH10
 10

	)

408 
	#USART_INPUT_RXPRSSEL_PRSCH11
 11

	)

411 
	#USART_I2SCTRL_FORMAT_SHIFT
 (8)

	)

412 
	#USART_I2SCTRL_FORMAT_MASK
 (0x7 << 
USART_I2SCTRL_FORMAT_SHIFT
)

	)

413 
	#USART_I2SCTRL_FORMAT
(
v
) \

414 (((
v
Ë<< 
USART_I2SCTRL_FORMAT_SHIFT
Ë& 
USART_I2SCTRL_FORMAT_MASK
)

	)

415 
	#USART_I2SCTRL_FORMAT_W32D32
 0

	)

416 
	#USART_I2SCTRL_FORMAT_W32D24M
 1

	)

417 
	#USART_I2SCTRL_FORMAT_W32D24
 2

	)

418 
	#USART_I2SCTRL_FORMAT_W32D16
 3

	)

419 
	#USART_I2SCTRL_FORMAT_W32D8
 4

	)

420 
	#USART_I2SCTRL_FORMAT_W16D16
 5

	)

421 
	#USART_I2SCTRL_FORMAT_W16D8
 6

	)

422 
	#USART_I2SCTRL_FORMAT_W8D8
 7

	)

424 
	#USART_I2SCTRL_DELAY
 (1 << 4)

	)

425 
	#USART_I2SCTRL_DMASPLIT
 (1 << 3)

	)

426 
	#USART_I2SCTRL_JUSTIFY
 (1 << 2)

	)

427 
	#USART_I2SCTRL_MONO
 (1 << 1)

	)

428 
	#USART_I2SCTRL_EN
 (1 << 0)

	)

431 
	#USART0
 
USART0_BASE


	)

432 
	#USART0_CTRL
 
	`USART_CTRL
(
USART0
)

	)

433 
	#USART0_FRAME
 
	`USART_FRAME
(
USART0
)

	)

434 
	#USART0_TRIGCTRL
 
	`USART_TRIGCTRL
(
USART0
)

	)

435 
	#USART0_CMD
 
	`USART_CMD
(
USART0
)

	)

436 
	#USART0_STATUS
 
	`USART_STATUS
(
USART0
)

	)

437 
	#USART0_CLKDIV
 
	`USART_CLKDIV
(
USART0
)

	)

438 
	#USART0_RXDATAX
 
	`USART_RXDATAX
(
USART0
)

	)

439 
	#USART0_RXDATA
 
	`USART_RXDATA
(
USART0
)

	)

440 
	#USART0_RXDOUBLEX
 
	`USART_RXDOUBLEX
(
USART0
)

	)

441 
	#USART0_RXDOUBLE
 
	`USART_RXDOUBLE
(
USART0
)

	)

442 
	#USART0_RXDATAXP
 
	`USART_RXDATAXP
(
USART0
)

	)

443 
	#USART0_RXDOUBLEXP
 
	`USART_RXDOUBLEXP
(
USART0
)

	)

444 
	#USART0_TXDATAX
 
	`USART_TXDATAX
(
USART0
)

	)

445 
	#USART0_TXDATA
 
	`USART_TXDATA
(
USART0
)

	)

446 
	#USART0_TXDOUBLEX
 
	`USART_TXDOUBLEX
(
USART0
)

	)

447 
	#USART0_TXDOUBLE
 
	`USART_TXDOUBLE
(
USART0
)

	)

448 
	#USART0_IF
 
	`USART_IF
(
USART0
)

	)

449 
	#USART0_IFS
 
	`USART_IFS
(
USART0
)

	)

450 
	#USART0_IFC
 
	`USART_IFC
(
USART0
)

	)

451 
	#USART0_IEN
 
	`USART_IEN
(
USART0
)

	)

452 
	#USART0_IRCTRL
 
	`USART_IRCTRL
(
USART0
)

	)

453 
	#USART0_ROUTE
 
	`USART_ROUTE
(
USART0
)

	)

454 
	#USART0_INPUT
 
	`USART_INPUT
(
USART0
)

	)

455 
	#USART0_I2SCTRL
 
	`USART_I2SCTRL
(
USART0
)

	)

458 
	#USART1
 
USART1_BASE


	)

459 
	#USART1_CTRL
 
	`USART_CTRL
(
USART1
)

	)

460 
	#USART1_FRAME
 
	`USART_FRAME
(
USART1
)

	)

461 
	#USART1_TRIGCTRL
 
	`USART_TRIGCTRL
(
USART1
)

	)

462 
	#USART1_CMD
 
	`USART_CMD
(
USART1
)

	)

463 
	#USART1_STATUS
 
	`USART_STATUS
(
USART1
)

	)

464 
	#USART1_CLKDIV
 
	`USART_CLKDIV
(
USART1
)

	)

465 
	#USART1_RXDATAX
 
	`USART_RXDATAX
(
USART1
)

	)

466 
	#USART1_RXDATA
 
	`USART_RXDATA
(
USART1
)

	)

467 
	#USART1_RXDOUBLEX
 
	`USART_RXDOUBLEX
(
USART1
)

	)

468 
	#USART1_RXDOUBLE
 
	`USART_RXDOUBLE
(
USART1
)

	)

469 
	#USART1_RXDATAXP
 
	`USART_RXDATAXP
(
USART1
)

	)

470 
	#USART1_RXDOUBLEXP
 
	`USART_RXDOUBLEXP
(
USART1
)

	)

471 
	#USART1_TXDATAX
 
	`USART_TXDATAX
(
USART1
)

	)

472 
	#USART1_TXDATA
 
	`USART_TXDATA
(
USART1
)

	)

473 
	#USART1_TXDOUBLEX
 
	`USART_TXDOUBLEX
(
USART1
)

	)

474 
	#USART1_TXDOUBLE
 
	`USART_TXDOUBLE
(
USART1
)

	)

475 
	#USART1_IF
 
	`USART_IF
(
USART1
)

	)

476 
	#USART1_IFS
 
	`USART_IFS
(
USART1
)

	)

477 
	#USART1_IFC
 
	`USART_IFC
(
USART1
)

	)

478 
	#USART1_IEN
 
	`USART_IEN
(
USART1
)

	)

479 
	#USART1_IRCTRL
 
	`USART_IRCTRL
(
USART1
)

	)

480 
	#USART1_ROUTE
 
	`USART_ROUTE
(
USART1
)

	)

481 
	#USART1_INPUT
 
	`USART_INPUT
(
USART1
)

	)

482 
	#USART1_I2SCTRL
 
	`USART_I2SCTRL
(
USART1
)

	)

485 
	#USART2
 
USART2_BASE


	)

486 
	#USART2_CTRL
 
	`USART_CTRL
(
USART2
)

	)

487 
	#USART2_FRAME
 
	`USART_FRAME
(
USART2
)

	)

488 
	#USART2_TRIGCTRL
 
	`USART_TRIGCTRL
(
USART2
)

	)

489 
	#USART2_CMD
 
	`USART_CMD
(
USART2
)

	)

490 
	#USART2_STATUS
 
	`USART_STATUS
(
USART2
)

	)

491 
	#USART2_CLKDIV
 
	`USART_CLKDIV
(
USART2
)

	)

492 
	#USART2_RXDATAX
 
	`USART_RXDATAX
(
USART2
)

	)

493 
	#USART2_RXDATA
 
	`USART_RXDATA
(
USART2
)

	)

494 
	#USART2_RXDOUBLEX
 
	`USART_RXDOUBLEX
(
USART2
)

	)

495 
	#USART2_RXDOUBLE
 
	`USART_RXDOUBLE
(
USART2
)

	)

496 
	#USART2_RXDATAXP
 
	`USART_RXDATAXP
(
USART2
)

	)

497 
	#USART2_RXDOUBLEXP
 
	`USART_RXDOUBLEXP
(
USART2
)

	)

498 
	#USART2_TXDATAX
 
	`USART_TXDATAX
(
USART2
)

	)

499 
	#USART2_TXDATA
 
	`USART_TXDATA
(
USART2
)

	)

500 
	#USART2_TXDOUBLEX
 
	`USART_TXDOUBLEX
(
USART2
)

	)

501 
	#USART2_TXDOUBLE
 
	`USART_TXDOUBLE
(
USART2
)

	)

502 
	#USART2_IF
 
	`USART_IF
(
USART2
)

	)

503 
	#USART2_IFS
 
	`USART_IFS
(
USART2
)

	)

504 
	#USART2_IFC
 
	`USART_IFC
(
USART2
)

	)

505 
	#USART2_IEN
 
	`USART_IEN
(
USART2
)

	)

506 
	#USART2_IRCTRL
 
	`USART_IRCTRL
(
USART2
)

	)

507 
	#USART2_ROUTE
 
	`USART_ROUTE
(
USART2
)

	)

508 
	#USART2_INPUT
 
	`USART_INPUT
(
USART2
)

	)

509 
	#USART2_I2SCTRL
 
	`USART_I2SCTRL
(
USART2
)

	)

	@libopencm3/include/libopencm3/efm32/common/usb_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_USB_H


21 
	#LIBOPENCM3_EFM32_USB_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/usb/usbd.h
>

26 
	#USB_CTRL
 
	`MMIO32
(
USB_BASE
 + 0x000)

	)

27 
	#USB_STATUS
 
	`MMIO32
(
USB_BASE
 + 0x004)

	)

28 
	#USB_IF
 
	`MMIO32
(
USB_BASE
 + 0x008)

	)

29 
	#USB_IFS
 
	`MMIO32
(
USB_BASE
 + 0x00C)

	)

30 
	#USB_IFC
 
	`MMIO32
(
USB_BASE
 + 0x010)

	)

31 
	#USB_IEN
 
	`MMIO32
(
USB_BASE
 + 0x014)

	)

32 
	#USB_ROUTE
 
	`MMIO32
(
USB_BASE
 + 0x018)

	)

35 
	#USB_CTRL_DMPUAP
 (1 << 1)

	)

38 
	#USB_ROUTE_DMPUPEN
 (1 << 2)

	)

39 
	#USB_ROUTE_VBUSENPEN
 (1 << 1)

	)

40 
	#USB_ROUTE_PHYPEN
 (1 << 0)

	)

43 
	#USB_OTG_BASE
 (
USB_BASE
 + 0x3C000)

	)

44 
	#USB_GOTGCTL
 
	`MMIO32
(
USB_OTG_BASE
 + 0x000)

	)

45 
	#USB_GOTGINT
 
	`MMIO32
(
USB_OTG_BASE
 + 0x004)

	)

46 
	#USB_GAHBCFG
 
	`MMIO32
(
USB_OTG_BASE
 + 0x008)

	)

47 
	#USB_GUSBCFG
 
	`MMIO32
(
USB_OTG_BASE
 + 0x00C)

	)

48 
	#USB_GRSTCTL
 
	`MMIO32
(
USB_OTG_BASE
 + 0x010)

	)

49 
	#USB_GINTSTS
 
	`MMIO32
(
USB_OTG_BASE
 + 0x014)

	)

50 
	#USB_GINTMSK
 
	`MMIO32
(
USB_OTG_BASE
 + 0x018)

	)

51 
	#USB_GRXSTSR
 
	`MMIO32
(
USB_OTG_BASE
 + 0x01C)

	)

52 
	#USB_GRXSTSP
 
	`MMIO32
(
USB_OTG_BASE
 + 0x020)

	)

53 
	#USB_GRXFSIZ
 
	`MMIO32
(
USB_OTG_BASE
 + 0x024)

	)

54 
	#USB_GNPTXFSIZ
 
	`MMIO32
(
USB_OTG_BASE
 + 0x028)

	)

55 
	#USB_GNPTXSTS
 
	`MMIO32
(
USB_OTG_BASE
 + 0x02C)

	)

56 
	#USB_GDFIFOCFG
 
	`MMIO32
(
USB_OTG_BASE
 + 0x05C)

	)

57 
	#USB_HPTXFSIZ
 
	`MMIO32
(
USB_OTG_BASE
 + 0x100)

	)

58 
	#USB_DIEPTXF
(
x
) \

59 
	`MMIO32
(
USB_OTG_BASE
 + 0x104 + (4 * ((
x
Ë- 1)))

	)

62 
	#USB_HCFG
 
	`MMIO32
(
USB_OTG_BASE
 + 0x400)

	)

63 
	#USB_HFIR
 
	`MMIO32
(
USB_OTG_BASE
 + 0x404)

	)

64 
	#USB_HFNUM
 
	`MMIO32
(
USB_OTG_BASE
 + 0x408)

	)

65 
	#USB_HPTXSTS
 
	`MMIO32
(
USB_OTG_BASE
 + 0x410)

	)

66 
	#USB_HAINT
 
	`MMIO32
(
USB_OTG_BASE
 + 0x414)

	)

67 
	#USB_HAINTMSK
 
	`MMIO32
(
USB_OTG_BASE
 + 0x418)

	)

68 
	#USB_HPRT
 
	`MMIO32
(
USB_OTG_BASE
 + 0x440)

	)

69 
	#USB_HCx_CHAR
(
x
) \

70 
	`MMIO32
(
USB_OTG_BASE
 + 0x500 + ((
x
Ë* 0x20))

	)

71 
	#USB_HCx_INT
(
x
) \

72 
	`MMIO32
(
USB_OTG_BASE
 + 0x508 + ((
x
Ë* 0x20))

	)

73 
	#USB_HCx_INTMSK
(
x
) \

74 
	`MMIO32
(
USB_OTG_BASE
 + 0x50C + ((
x
Ë* 0x20))

	)

75 
	#USB_HCx_TSIZ
(
x
) \

76 
	`MMIO32
(
USB_OTG_BASE
 + 0x510 + ((
x
Ë* 0x20))

	)

77 
	#USB_HCx_DMAADDR
(
x
) \

78 
	`MMIO32
(
USB_OTG_BASE
 + 0x514 + ((
x
Ë* 0x20))

	)

81 
	#USB_DCFG
 
	`MMIO32
(
USB_OTG_BASE
 + 0x800)

	)

82 
	#USB_DCTL
 
	`MMIO32
(
USB_OTG_BASE
 + 0x804)

	)

83 
	#USB_DSTS
 
	`MMIO32
(
USB_OTG_BASE
 + 0x808)

	)

84 
	#USB_DIEPMSK
 
	`MMIO32
(
USB_OTG_BASE
 + 0x810)

	)

85 
	#USB_DOEPMSK
 
	`MMIO32
(
USB_OTG_BASE
 + 0x814)

	)

86 
	#USB_DAINT
 
	`MMIO32
(
USB_OTG_BASE
 + 0x818)

	)

87 
	#USB_DAINTMSK
 
	`MMIO32
(
USB_OTG_BASE
 + 0x81C)

	)

88 
	#USB_DVBUSDIS
 
	`MMIO32
(
USB_OTG_BASE
 + 0x828)

	)

89 
	#USB_DVBUSPULSE
 
	`MMIO32
(
USB_OTG_BASE
 + 0x82C)

	)

90 
	#USB_DIEPEMPMSK
 
	`MMIO32
(
USB_OTG_BASE
 + 0x834)

	)

92 
	#USB_DIEPx_CTL
(
x
) \

93 
	`MMIO32
(
USB_OTG_BASE
 + 0x900 + ((
x
Ë* 0x20))

	)

94 
	#USB_DIEPx_INT
(
x
) \

95 
	`MMIO32
(
USB_OTG_BASE
 + 0x908 + ((
x
Ë* 0x20))

	)

96 
	#USB_DIEPx_TSIZ
(
x
) \

97 
	`MMIO32
(
USB_OTG_BASE
 + 0x910 + ((
x
Ë* 0x20))

	)

98 
	#USB_DIEP0CTL
 
	`USB_DIEPx_CTL
(0)

	)

99 
	#USB_DIEP0TSIZ
 
	`USB_DIEPx_TSIZ
(0)

	)

100 
	#USB_DIEP0INT
 
	`USB_DIEPx_INT
(0)

	)

102 
	#USB_DOEPx_CTL
(
x
) \

103 
	`MMIO32
(
USB_OTG_BASE
 + 0xB00 + ((
x
Ë* 0x20))

	)

104 
	#USB_DOEPx_INT
(
x
) \

105 
	`MMIO32
(
USB_OTG_BASE
 + 0xB08 + ((
x
Ë* 0x20))

	)

106 
	#USB_DOEPx_TSIZ
(
x
) \

107 
	`MMIO32
(
USB_OTG_BASE
 + 0xB10 + ((
x
Ë* 0x20))

	)

108 
	#USB_DOEP0CTL
 
	`USB_DOEPx_CTL
(0)

	)

109 
	#USB_DOEP0TSIZ
 
	`USB_DOEPx_TSIZ
(0)

	)

110 
	#USB_DOEP0INT
 
	`USB_DOEPx_INT
(0)

	)

113 
	#USB_PCGCCTL
 
	`MMIO32
(
USB_OTG_BASE
 + 0xE00)

	)

116 
	#USB_FIFOxD
(
x
) \

117 (&
	`MMIO32
(
USB_OTG_BASE
 + (((
x
Ë+ 1Ë<< 12)))

	)

121 
	#USB_GOTGCTL_BSVLD
 (1 << 19)

	)

122 
	#USB_GOTGCTL_ASVLD
 (1 << 18)

	)

123 
	#USB_GOTGCTL_DBCT
 (1 << 17)

	)

124 
	#USB_GOTGCTL_CIDSTS
 (1 << 16)

	)

125 
	#USB_GOTGCTL_DHNPEN
 (1 << 11)

	)

126 
	#USB_GOTGCTL_HSHNPEN
 (1 << 10)

	)

127 
	#USB_GOTGCTL_HNPRQ
 (1 << 9)

	)

128 
	#USB_GOTGCTL_HNGSCS
 (1 << 8)

	)

129 
	#USB_GOTGCTL_SRQ
 (1 << 1)

	)

130 
	#USB_GOTGCTL_SRQSCS
 (1 << 0)

	)

133 
	#USB_GAHBCFG_GLBLINTRMSK
 0x0001

	)

134 
	#USB_GAHBCFG_TXFELVL
 0x0080

	)

135 
	#USB_GAHBCFG_PTXFELVL
 0x0100

	)

138 
	#USB_GUSBCFG_TOCAL
 0x00000003

	)

139 
	#USB_GUSBCFG_SRPCAP
 0x00000100

	)

140 
	#USB_GUSBCFG_HNPCAP
 0x00000200

	)

141 
	#USB_GUSBCFG_TRDT_MASK
 (0x‡<< 10)

	)

142 
	#USB_GUSBCFG_TRDT_16BIT
 (0x5 << 10)

	)

143 
	#USB_GUSBCFG_TRDT_8BIT
 (0x9 << 10)

	)

144 
	#USB_GUSBCFG_NPTXRWEN
 0x00004000

	)

145 
	#USB_GUSBCFG_FHMOD
 0x20000000

	)

146 
	#USB_GUSBCFG_FDMOD
 0x40000000

	)

147 
	#USB_GUSBCFG_CTXPKT
 0x80000000

	)

148 
	#USB_GUSBCFG_PHYSEL
 (1 << 7)

	)

151 
	#USB_GRSTCTL_AHBIDL
 (1 << 31)

	)

153 
	#USB_GRSTCTL_TXFNUM_MASK
 (0x1‡<< 6)

	)

154 
	#USB_GRSTCTL_TXFFLSH
 (1 << 5)

	)

155 
	#USB_GRSTCTL_RXFFLSH
 (1 << 4)

	)

157 
	#USB_GRSTCTL_FCRST
 (1 << 2)

	)

158 
	#USB_GRSTCTL_HSRST
 (1 << 1)

	)

159 
	#USB_GRSTCTL_CSRST
 (1 << 0)

	)

162 
	#USB_GINTSTS_WKUPINT
 (1 << 31)

	)

163 
	#USB_GINTSTS_SRQINT
 (1 << 30)

	)

164 
	#USB_GINTSTS_DISCINT
 (1 << 29)

	)

165 
	#USB_GINTSTS_CIDSCHG
 (1 << 28)

	)

167 
	#USB_GINTSTS_PTXFE
 (1 << 26)

	)

168 
	#USB_GINTSTS_HCINT
 (1 << 25)

	)

169 
	#USB_GINTSTS_HPRTINT
 (1 << 24)

	)

171 
	#USB_GINTSTS_IPXFR
 (1 << 21)

	)

172 
	#USB_GINTSTS_INCOMPISOOUT
 (1 << 21)

	)

173 
	#USB_GINTSTS_IISOIXFR
 (1 << 20)

	)

174 
	#USB_GINTSTS_OEPINT
 (1 << 19)

	)

175 
	#USB_GINTSTS_IEPINT
 (1 << 18)

	)

177 
	#USB_GINTSTS_EOPF
 (1 << 15)

	)

178 
	#USB_GINTSTS_ISOODRP
 (1 << 14)

	)

179 
	#USB_GINTSTS_ENUMDNE
 (1 << 13)

	)

180 
	#USB_GINTSTS_USBRST
 (1 << 12)

	)

181 
	#USB_GINTSTS_USBSUSP
 (1 << 11)

	)

182 
	#USB_GINTSTS_ESUSP
 (1 << 10)

	)

184 
	#USB_GINTSTS_GONAKEFF
 (1 << 7)

	)

185 
	#USB_GINTSTS_GINAKEFF
 (1 << 6)

	)

186 
	#USB_GINTSTS_NPTXFE
 (1 << 5)

	)

187 
	#USB_GINTSTS_RXFLVL
 (1 << 4)

	)

188 
	#USB_GINTSTS_SOF
 (1 << 3)

	)

189 
	#USB_GINTSTS_OTGINT
 (1 << 2)

	)

190 
	#USB_GINTSTS_MMIS
 (1 << 1)

	)

191 
	#USB_GINTSTS_CMOD
 (1 << 0)

	)

194 
	#USB_GINTMSK_MMISM
 0x00000002

	)

195 
	#USB_GINTMSK_OTGINT
 0x00000004

	)

196 
	#USB_GINTMSK_SOFM
 0x00000008

	)

197 
	#USB_GINTMSK_RXFLVLM
 0x00000010

	)

198 
	#USB_GINTMSK_NPTXFEM
 0x00000020

	)

199 
	#USB_GINTMSK_GINAKEFFM
 0x00000040

	)

200 
	#USB_GINTMSK_GONAKEFFM
 0x00000080

	)

201 
	#USB_GINTMSK_ESUSPM
 0x00000400

	)

202 
	#USB_GINTMSK_USBSUSPM
 0x00000800

	)

203 
	#USB_GINTMSK_USBRST
 0x00001000

	)

204 
	#USB_GINTMSK_ENUMDNEM
 0x00002000

	)

205 
	#USB_GINTMSK_ISOODRPM
 0x00004000

	)

206 
	#USB_GINTMSK_EOPFM
 0x00008000

	)

207 
	#USB_GINTMSK_EPMISM
 0x00020000

	)

208 
	#USB_GINTMSK_IEPINT
 0x00040000

	)

209 
	#USB_GINTMSK_OEPINT
 0x00080000

	)

210 
	#USB_GINTMSK_IISOIXFRM
 0x00100000

	)

211 
	#USB_GINTMSK_IISOOXFRM
 0x00200000

	)

212 
	#USB_GINTMSK_IPXFRM
 0x00200000

	)

213 
	#USB_GINTMSK_PRTIM
 0x01000000

	)

214 
	#USB_GINTMSK_HCIM
 0x02000000

	)

215 
	#USB_GINTMSK_PTXFEM
 0x04000000

	)

216 
	#USB_GINTMSK_CIDSCHGM
 0x10000000

	)

217 
	#USB_GINTMSK_DISCINT
 0x20000000

	)

218 
	#USB_GINTMSK_SRQIM
 0x40000000

	)

219 
	#USB_GINTMSK_WUIM
 0x80000000

	)

223 
	#USB_GRXSTSP_FRMNUM_MASK
 (0x‡<< 21)

	)

224 
	#USB_GRXSTSP_PKTSTS_MASK
 (0x‡<< 17)

	)

225 
	#USB_GRXSTSP_PKTSTS_GOUTNAK
 (0x1 << 17)

	)

226 
	#USB_GRXSTSP_PKTSTS_OUT
 (0x2 << 17)

	)

227 
	#USB_GRXSTSP_PKTSTS_OUT_COMP
 (0x3 << 17)

	)

228 
	#USB_GRXSTSP_PKTSTS_SETUP_COMP
 (0x4 << 17)

	)

229 
	#USB_GRXSTSP_PKTSTS_SETUP
 (0x6 << 17)

	)

230 
	#USB_GRXSTSP_DPID_MASK
 (0x3 << 15)

	)

231 
	#USB_GRXSTSP_DPID_DATA0
 (0x0 << 15)

	)

232 
	#USB_GRXSTSP_DPID_DATA1
 (0x2 << 15)

	)

233 
	#USB_GRXSTSP_DPID_DATA2
 (0x1 << 15)

	)

234 
	#USB_GRXSTSP_DPID_MDATA
 (0x3 << 15)

	)

235 
	#USB_GRXSTSP_BCNT_MASK
 (0x7f‡<< 4)

	)

236 
	#USB_GRXSTSP_EPNUM_MASK
 (0x‡<< 0)

	)

240 
	#USB_GCCFG_NOVBUSSENS
 (1 << 21)

	)

241 
	#USB_GCCFG_SOFOUTEN
 (1 << 20)

	)

242 
	#USB_GCCFG_VBUSBSEN
 (1 << 19)

	)

243 
	#USB_GCCFG_VBUSASEN
 (1 << 18)

	)

245 
	#USB_GCCFG_PWRDWN
 (1 << 16)

	)

252 
	#USB_DCTL_POPRGDNE
 (1 << 11)

	)

253 
	#USB_DCTL_CGONAK
 (1 << 10)

	)

254 
	#USB_DCTL_SGONAK
 (1 << 9)

	)

255 
	#USB_DCTL_SGINAK
 (1 << 8)

	)

256 
	#USB_DCTL_TCTL_MASK
 (7 << 4)

	)

257 
	#USB_DCTL_GONSTS
 (1 << 3)

	)

258 
	#USB_DCTL_GINSTS
 (1 << 2)

	)

259 
	#USB_DCTL_SDIS
 (1 << 1)

	)

260 
	#USB_DCTL_RWUSIG
 (1 << 0)

	)

263 
	#USB_DCFG_DSPD
 0x0003

	)

264 
	#USB_DCFG_NZLSOHSK
 0x0004

	)

265 
	#USB_DCFG_DAD
 0x07F0

	)

266 
	#USB_DCFG_PFIVL
 0x1800

	)

270 
	#USB_DIEPMSK_BIM
 (1 << 9)

	)

271 
	#USB_DIEPMSK_TXFURM
 (1 << 8)

	)

273 
	#USB_DIEPMSK_INEPNEM
 (1 << 6)

	)

274 
	#USB_DIEPMSK_INEPNMM
 (1 << 5)

	)

275 
	#USB_DIEPMSK_ITTXFEMSK
 (1 << 4)

	)

276 
	#USB_DIEPMSK_TOM
 (1 << 3)

	)

278 
	#USB_DIEPMSK_EPDM
 (1 << 1)

	)

279 
	#USB_DIEPMSK_XFRCM
 (1 << 0)

	)

283 
	#USB_DOEPMSK_BOIM
 (1 << 9)

	)

284 
	#USB_DOEPMSK_OPEM
 (1 << 8)

	)

286 
	#USB_DOEPMSK_B2BSTUP
 (1 << 6)

	)

288 
	#USB_DOEPMSK_OTEPDM
 (1 << 4)

	)

289 
	#USB_DOEPMSK_STUPM
 (1 << 3)

	)

291 
	#USB_DOEPMSK_EPDM
 (1 << 1)

	)

292 
	#USB_DOEPMSK_XFRCM
 (1 << 0)

	)

295 
	#USB_DIEP0CTL_EPENA
 (1 << 31)

	)

296 
	#USB_DIEP0CTL_EPDIS
 (1 << 30)

	)

298 
	#USB_DIEP0CTL_SD0PID
 (1 << 28)

	)

299 
	#USB_DIEP0CTL_SNAK
 (1 << 27)

	)

300 
	#USB_DIEP0CTL_CNAK
 (1 << 26)

	)

301 
	#USB_DIEP0CTL_TXFNUM_MASK
 (0x‡<< 22)

	)

302 
	#USB_DIEP0CTL_STALL
 (1 << 21)

	)

304 
	#USB_DIEP0CTL_EPTYP_MASK
 (0x3 << 18)

	)

305 
	#USB_DIEP0CTL_NAKSTS
 (1 << 17)

	)

307 
	#USB_DIEP0CTL_USBAEP
 (1 << 15)

	)

309 
	#USB_DIEP0CTL_MPSIZ_MASK
 (0x3 << 0)

	)

310 
	#USB_DIEP0CTL_MPSIZ_64
 (0x0 << 0)

	)

311 
	#USB_DIEP0CTL_MPSIZ_32
 (0x1 << 0)

	)

312 
	#USB_DIEP0CTL_MPSIZ_16
 (0x2 << 0)

	)

313 
	#USB_DIEP0CTL_MPSIZ_8
 (0x3 << 0)

	)

316 
	#USB_DOEP0CTL_EPENA
 (1 << 31)

	)

317 
	#USB_DOEP0CTL_EPDIS
 (1 << 30)

	)

319 
	#USB_DOEP0CTL_SD0PID
 (1 << 28)

	)

320 
	#USB_DOEP0CTL_SNAK
 (1 << 27)

	)

321 
	#USB_DOEP0CTL_CNAK
 (1 << 26)

	)

323 
	#USB_DOEP0CTL_STALL
 (1 << 21)

	)

324 
	#USB_DOEP0CTL_SNPM
 (1 << 20)

	)

325 
	#USB_DOEP0CTL_EPTYP_MASK
 (0x3 << 18)

	)

326 
	#USB_DOEP0CTL_NAKSTS
 (1 << 17)

	)

328 
	#USB_DOEP0CTL_USBAEP
 (1 << 15)

	)

330 
	#USB_DOEP0CTL_MPSIZ_MASK
 (0x3 << 0)

	)

331 
	#USB_DOEP0CTL_MPSIZ_64
 (0x0 << 0)

	)

332 
	#USB_DOEP0CTL_MPSIZ_32
 (0x1 << 0)

	)

333 
	#USB_DOEP0CTL_MPSIZ_16
 (0x2 << 0)

	)

334 
	#USB_DOEP0CTL_MPSIZ_8
 (0x3 << 0)

	)

338 
	#USB_DIEP_INT_TXFE
 (1 << 7)

	)

339 
	#USB_DIEP_INT_INEPNE
 (1 << 6)

	)

341 
	#USB_DIEP_INT_ITTXFE
 (1 << 4)

	)

342 
	#USB_DIEP_INT_TOC
 (1 << 3)

	)

344 
	#USB_DIEP_INT_EPDISD
 (1 << 1)

	)

345 
	#USB_DIEP_INT_XFRC
 (1 << 0)

	)

349 
	#USB_DOEP_INT_B2BSTUP
 (1 << 6)

	)

351 
	#USB_DOEP_INT_OTEPDIS
 (1 << 4)

	)

352 
	#USB_DOEP_INT_SETUP
 (1 << 3)

	)

354 
	#USB_DOEP_INT_EPDISD
 (1 << 1)

	)

355 
	#USB_DOEP_INT_XFRC
 (1 << 0)

	)

359 
	#USB_DIEP0TSIZ_STUPCNT_1
 (0x1 << 29)

	)

360 
	#USB_DIEP0TSIZ_STUPCNT_2
 (0x2 << 29)

	)

361 
	#USB_DIEP0TSIZ_STUPCNT_3
 (0x3 << 29)

	)

362 
	#USB_DIEP0TSIZ_STUPCNT_MASK
 (0x3 << 29)

	)

364 
	#USB_DIEP0TSIZ_PKTCNT
 (1 << 19)

	)

366 
	#USB_DIEP0TSIZ_XFRSIZ_MASK
 (0x7‡<< 0)

	)

	@libopencm3/include/libopencm3/efm32/common/wdog_common.h

20 #i‚de‡
LIBOPENCM3_EFM32_WDOG_H


21 
	#LIBOPENCM3_EFM32_WDOG_H


	)

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#WDOG_CTRL
 
	`MMIO32
(
WDOG_BASE
 + 0x000)

	)

27 
	#WDOG_CMD
 
	`MMIO32
(
WDOG_BASE
 + 0x004)

	)

28 
	#WDOG_SYNCBUSY
 
	`MMIO32
(
WDOG_BASE
 + 0x008)

	)

31 
	#WDOG_CTRL_CLKSEL_SHIFT
 (12)

	)

32 
	#WDOG_CTRL_CLKSEL_MASK
 (0x3 << 
WDOG_CTRL_CLKSEL_SHIFT
)

	)

33 
	#WDOG_CTRL_CLKSEL
(
v
) \

34 (((
v
Ë<< 
WDOG_CTRL_CLKSEL_SHIFT
Ë& 
WDOG_CTRL_CLKSEL_MASK
)

	)

35 
	#WDOG_CTRL_CLKSEL_ULFRCO
 0

	)

36 
	#WDOG_CTRL_CLKSEL_LFRCO
 1

	)

37 
	#WDOG_CTRL_CLKSEL_LFXO
 2

	)

39 
	#WDOG_CTRL_PERSEL_SHIFT
 (8)

	)

40 
	#WDOG_CTRL_PERSEL_MASK
 (0xF << 
WDOG_CTRL_PERSEL_SHIFT
)

	)

41 
	#WDOG_CTRL_PERSEL
(
v
) \

42 (((
v
Ë<< 
WDOG_CTRL_PERSEL_SHIFT
Ë& 
WDOG_CTRL_PERSEL_MASK
)

	)

43 
	#WDOG_CTRL_PERSEL_9CYCLES
 0

	)

44 
	#WDOG_CTRL_PERSEL_17CYCLES
 1

	)

45 
	#WDOG_CTRL_PERSEL_33CYCLES
 2

	)

46 
	#WDOG_CTRL_PERSEL_65CYCLES
 3

	)

47 
	#WDOG_CTRL_PERSEL_129CYCLES
 4

	)

48 
	#WDOG_CTRL_PERSEL_257CYCLES
 5

	)

49 
	#WDOG_CTRL_PERSEL_513CYCLES
 6

	)

50 
	#WDOG_CTRL_PERSEL_1KCYCLES
 7

	)

51 
	#WDOG_CTRL_PERSEL_2KCYCLES
 8

	)

52 
	#WDOG_CTRL_PERSEL_4KCYCLES
 9

	)

53 
	#WDOG_CTRL_PERSEL_8KCYCLES
 10

	)

54 
	#WDOG_CTRL_PERSEL_16KCYCLES
 11

	)

55 
	#WDOG_CTRL_PERSEL_32KCYCLES
 12

	)

56 
	#WDOG_CTRL_PERSEL_64KCYCLES
 13

	)

57 
	#WDOG_CTRL_PERSEL_128KCYCLES
 14

	)

58 
	#WDOG_CTRL_PERSEL_256KCYCLES
 15

	)

60 
	#WDOG_CTRL_SWOSCBLOCK
 (1 << 6)

	)

61 
	#WDOG_CTRL_EM4BLOCK
 (1 << 5)

	)

62 
	#WDOG_CTRL_LOCK
 (1 << 4)

	)

63 
	#WDOG_CTRL_EM3RUN
 (1 << 3)

	)

64 
	#WDOG_CTRL_EM2RUN
 (1 << 2)

	)

65 
	#WDOG_CTRL_DEBUGRUN
 (1 << 1)

	)

66 
	#WDOG_CTRL_EN
 (1 << 0)

	)

69 
	#WDOG_CMD_CLEAR
 (1 << 0)

	)

72 
	#WDOG_SYNCBUSY_CMD
 (1 << 1)

	)

73 
	#WDOG_SYNCBUSY_CTRL
 (1 << 0)

	)

	@libopencm3/include/libopencm3/efm32/common/wdog_common_hglg.h

21 #i‡
deföed
(
LIBOPENCM3_WDOG_H
)

23 #i‚de‡
LIBOPENCM3_EFM32_WDOG_COMMON_HGLG_H


24 
	#LIBOPENCM3_EFM32_WDOG_COMMON_HGLG_H


	)

26 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

27 
	~<lib›ícm3/cm3/comm⁄.h
>

29 
	#WDOG_CTRL
 
	`MMIO32
(
WDOG_BASE
 + 0x000)

	)

30 
	#WDOG_CMD
 
	`MMIO32
(
WDOG_BASE
 + 0x004)

	)

31 
	#WDOG_SYNCBUSY
 
	`MMIO32
(
WDOG_BASE
 + 0x008)

	)

34 
	#WDOG_CTRL_CLKSEL_SHIFT
 (12)

	)

35 
	#WDOG_CTRL_CLKSEL_MASK
 (0x3 << 
WDOG_CTRL_CLKSEL_SHIFT
)

	)

36 
	#WDOG_CTRL_CLKSEL
(
v
) \

37 (((
v
Ë<< 
WDOG_CTRL_CLKSEL_SHIFT
Ë& 
WDOG_CTRL_CLKSEL_MASK
)

	)

38 
	#WDOG_CTRL_CLKSEL_ULFRCO
 
	`WDOG_CTRL_CLKSEL
(0)

	)

39 
	#WDOG_CTRL_CLKSEL_LFRCO
 
	`WDOG_CTRL_CLKSEL
(1)

	)

40 
	#WDOG_CTRL_CLKSEL_LFXO
 
	`WDOG_CTRL_CLKSEL
(2)

	)

42 
	#WDOG_CTRL_PERSEL_SHIFT
 (8)

	)

43 
	#WDOG_CTRL_PERSEL_MASK
 (0xF << 
WDOG_CTRL_PERSEL_SHIFT
)

	)

44 
	#WDOG_CTRL_PERSEL
(
v
) \

45 (((
v
Ë<< 
WDOG_CTRL_PERSEL_SHIFT
Ë& 
WDOG_CTRL_PERSEL_MASK
)

	)

46 
	#WDOG_CTRL_PERSEL_9CYCLES
 
	`WDOG_CTRL_PERSEL
(0)

	)

47 
	#WDOG_CTRL_PERSEL_17CYCLES
 
	`WDOG_CTRL_PERSEL
(1)

	)

48 
	#WDOG_CTRL_PERSEL_33CYCLES
 
	`WDOG_CTRL_PERSEL
(2)

	)

49 
	#WDOG_CTRL_PERSEL_65CYCLES
 
	`WDOG_CTRL_PERSEL
(3)

	)

50 
	#WDOG_CTRL_PERSEL_129CYCLES
 
	`WDOG_CTRL_PERSEL
(4)

	)

51 
	#WDOG_CTRL_PERSEL_257CYCLES
 
	`WDOG_CTRL_PERSEL
(5)

	)

52 
	#WDOG_CTRL_PERSEL_513CYCLES
 
	`WDOG_CTRL_PERSEL
(6)

	)

53 
	#WDOG_CTRL_PERSEL_1KCYCLES
 
	`WDOG_CTRL_PERSEL
(7)

	)

54 
	#WDOG_CTRL_PERSEL_2KCYCLES
 
	`WDOG_CTRL_PERSEL
(8)

	)

55 
	#WDOG_CTRL_PERSEL_4KCYCLES
 
	`WDOG_CTRL_PERSEL
(9)

	)

56 
	#WDOG_CTRL_PERSEL_8KCYCLES
 
	`WDOG_CTRL_PERSEL
(10)

	)

57 
	#WDOG_CTRL_PERSEL_16KCYCLES
 
	`WDOG_CTRL_PERSEL
(11)

	)

58 
	#WDOG_CTRL_PERSEL_32KCYCLES
 
	`WDOG_CTRL_PERSEL
(12)

	)

59 
	#WDOG_CTRL_PERSEL_64KCYCLES
 
	`WDOG_CTRL_PERSEL
(13)

	)

60 
	#WDOG_CTRL_PERSEL_128KCYCLES
 
	`WDOG_CTRL_PERSEL
(14)

	)

61 
	#WDOG_CTRL_PERSEL_256KCYCLES
 
	`WDOG_CTRL_PERSEL
(15)

	)

63 
	#WDOG_CTRL_SWOSCBLOCK
 (1 << 6)

	)

64 
	#WDOG_CTRL_EM4BLOCK
 (1 << 5)

	)

65 
	#WDOG_CTRL_LOCK
 (1 << 4)

	)

66 
	#WDOG_CTRL_EM3RUN
 (1 << 3)

	)

67 
	#WDOG_CTRL_EM2RUN
 (1 << 2)

	)

68 
	#WDOG_CTRL_DEBUGRUN
 (1 << 1)

	)

69 
	#WDOG_CTRL_EN
 (1 << 0)

	)

72 
	#WDOG_CMD_CLEAR
 (1 << 0)

	)

75 
	#WDOG_SYNCBUSY_CMD
 (1 << 1)

	)

76 
	#WDOG_SYNCBUSY_CTRL
 (1 << 0)

	)

	@libopencm3/include/libopencm3/efm32/dac.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/dac.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/dac.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/dac.h
>

	@libopencm3/include/libopencm3/efm32/dma.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/dma.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/dma.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/dma.h
>

	@libopencm3/include/libopencm3/efm32/emu.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/emu.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/emu.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/emu.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/acmp.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_ACMP_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_ACMP_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/acmp_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/adc.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_ADC_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_ADC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/adc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/burtc.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_BURTC_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_BURTC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/buπc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/cmu.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_CMU_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_CMU_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/cmu_comm⁄.h
>

29 
	#CMU_HFPERCLKEN0_USARTRF0
 
CMU_HFPERCLKEN0_USART0


	)

30 
	#CMU_USARTRF0
 
CMU_USART0


	)

	@libopencm3/include/libopencm3/efm32/ezr32wg/dac.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_DAC_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_DAC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/dac_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/dma.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_DMA_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_DMA_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/dma_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/doc-ezr32wg.h

	@libopencm3/include/libopencm3/efm32/ezr32wg/emu.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_EMU_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_EMU_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/emu_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/gpio.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_GPIO_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_GPIO_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/gpio_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/i2c.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_I2C_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_I2C_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/i2c_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/letimer.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_LETIMER_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_LETIMER_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/Àtimî_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/memorymap.h

20 #i‚de‡
LIBOPENCM3_EZR32WG_MEMORYMAP_H


21 
	#LIBOPENCM3_EZR32WG_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

25 
	#PERIPH_BASE
 (0x40000000U)

	)

28 
	#DI_BASE
 (0x0FE08000U)

	)

31 
	#DI_CMU_LFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x020)

	)

32 
	#DI_CMU_HFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x028)

	)

33 
	#DI_CMU_AUXHFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x030)

	)

34 
	#DI_ADC0_CAL
 
	`MMIO32
(
DI_BASE
 + 0x040)

	)

35 
	#DI_ADC0_BIASPROG
 
	`MMIO32
(
DI_BASE
 + 0x048)

	)

36 
	#DI_DAC0_CAL
 
	`MMIO32
(
DI_BASE
 + 0x050)

	)

37 
	#DI_DAC0_BIASPROG
 
	`MMIO32
(
DI_BASE
 + 0x058)

	)

38 
	#DI_ACMP0_CTRL
 
	`MMIO32
(
DI_BASE
 + 0x060)

	)

39 
	#DI_ACMP1_CTRL
 
	`MMIO32
(
DI_BASE
 + 0x068)

	)

40 
	#DI_CMU_LCDCTRL
 
	`MMIO32
(
DI_BASE
 + 0x078)

	)

41 
	#DI_DAC0_OPACTRL
 
	`MMIO32
(
DI_BASE
 + 0x0A0)

	)

42 
	#DI_DAC0_OPAOFFSET
 
	`MMIO32
(
DI_BASE
 + 0x0A8)

	)

43 
	#DI_EMU_BUINACT
 
	`MMIO32
(
DI_BASE
 + 0x0B0)

	)

44 
	#DI_EMU_BUACT
 
	`MMIO32
(
DI_BASE
 + 0x0B8)

	)

45 
	#DI_EMU_BUBODBUVINCAL
 
	`MMIO32
(
DI_BASE
 + 0x0C0)

	)

46 
	#DI_EMU_BUBODUNREGCAL
 
	`MMIO32
(
DI_BASE
 + 0x0C8)

	)

47 
	#DI_MCM_REV_MIN
 
	`MMIO8
(
DI_BASE
 + 0x1AA)

	)

48 
	#DI_MCM_REV_MAJ
 
	`MMIO8
(
DI_BASE
 + 0x1AB)

	)

49 
	#DI_RADIO_REV_MIN
 
	`MMIO8
(
DI_BASE
 + 0x1AC)

	)

50 
	#DI_RADIO_REV_MAJ
 
	`MMIO8
(
DI_BASE
 + 0x1AD)

	)

51 
	#DI_RADIO_OPN
 
	`MMIO8
(
DI_BASE
 + 0x1AE)

	)

52 
	#DI_DI_CRC
 
	`MMIO16
(
DI_BASE
 + 0x1B0)

	)

53 
	#DI_CAL_TEMP_0
 
	`MMIO8
(
DI_BASE
 + 0x1B2)

	)

54 
	#DI_ADC0_CAL_1V25
 
	`MMIO16
(
DI_BASE
 + 0x1B4)

	)

55 
	#DI_ADC0_CAL_2V5
 
	`MMIO16
(
DI_BASE
 + 0x1B6)

	)

56 
	#DI_ADC0_CAL_VDD
 
	`MMIO16
(
DI_BASE
 + 0x1B8)

	)

57 
	#DI_ADC0_CAL_5VDIFF
 
	`MMIO16
(
DI_BASE
 + 0x1BA)

	)

58 
	#DI_ADC0_CAL_2XVDD
 
	`MMIO16
(
DI_BASE
 + 0x1BC)

	)

59 
	#DI_ADC0_TEMP_0_READ_1V25
 
	`MMIO16
(
DI_BASE
 + 0x1BE)

	)

60 
	#DI_DAC0_CAL_1V25
 
	`MMIO32
(
DI_BASE
 + 0x1C8)

	)

61 
	#DI_DAC0_CAL_2V5
 
	`MMIO32
(
DI_BASE
 + 0x1CC)

	)

62 
	#DI_DAC0_CAL_VDD
 
	`MMIO32
(
DI_BASE
 + 0x1D0)

	)

63 
	#DI_AUXHFRCO_CALIB_BAND_1
 
	`MMIO8
(
DI_BASE
 + 0x1D4)

	)

64 
	#DI_AUXHFRCO_CALIB_BAND_7
 
	`MMIO8
(
DI_BASE
 + 0x1D5)

	)

65 
	#DI_AUXHFRCO_CALIB_BAND_11
 
	`MMIO8
(
DI_BASE
 + 0x1D6)

	)

66 
	#DI_AUXHFRCO_CALIB_BAND_14
 
	`MMIO8
(
DI_BASE
 + 0x1D7)

	)

67 
	#DI_AUXHFRCO_CALIB_BAND_21
 
	`MMIO8
(
DI_BASE
 + 0x1D8)

	)

68 
	#DI_AUXHFRCO_CALIB_BAND_28
 
	`MMIO8
(
DI_BASE
 + 0x1D9)

	)

69 
	#DI_HFRCO_CALIB_BAND_1
 
	`MMIO8
(
DI_BASE
 + 0x1DC)

	)

70 
	#DI_HFRCO_CALIB_BAND_7
 
	`MMIO8
(
DI_BASE
 + 0x1DD)

	)

71 
	#DI_HFRCO_CALIB_BAND_11
 
	`MMIO8
(
DI_BASE
 + 0x1DE)

	)

72 
	#DI_HFRCO_CALIB_BAND_14
 
	`MMIO8
(
DI_BASE
 + 0x1DF)

	)

73 
	#DI_HFRCO_CALIB_BAND_21
 
	`MMIO8
(
DI_BASE
 + 0x1E0)

	)

74 
	#DI_HFRCO_CALIB_BAND_28
 
	`MMIO8
(
DI_BASE
 + 0x1E1)

	)

75 
	#DI_MEM_INFO_PAGE_SIZE
 
	`MMIO8
(
DI_BASE
 + 0x1E7)

	)

76 
	#DI_RADIO_ID
 
	`MMIO16
(
DI_BASE
 + 0x1EE)

	)

77 
	#DI_UNIQUE_0
 
	`MMIO32
(
DI_BASE
 + 0x1F0)

	)

78 
	#DI_UNIQUE_1
 
	`MMIO32
(
DI_BASE
 + 0x1F4)

	)

79 
	#DI_MEM_INFO_FLASH
 
	`MMIO16
(
DI_BASE
 + 0x1F8)

	)

80 
	#DI_MEM_INFO_RAM
 
	`MMIO16
(
DI_BASE
 + 0x1FA)

	)

81 
	#DI_PART_NUMBER
 
	`MMIO16
(
DI_BASE
 + 0x1FC)

	)

82 
	#DI_PART_FAMILY
 
	`MMIO8
(
DI_BASE
 + 0x1FE)

	)

83 
	#DI_PROD_REV
 
	`MMIO8
(
DI_BASE
 + 0x1FF)

	)

85 
	#AES_BASE
 (
PERIPH_BASE
 + 0xE0000)

	)

86 
	#RMU_BASE
 (
PERIPH_BASE
 + 0xCA000)

	)

87 
	#CMU_BASE
 (
PERIPH_BASE
 + 0xC8000)

	)

88 
	#EMU_BASE
 (
PERIPH_BASE
 + 0xC6000)

	)

89 
	#USB_BASE
 (
PERIPH_BASE
 + 0xC4000)

	)

90 
	#DMA_BASE
 (
PERIPH_BASE
 + 0xC2000)

	)

91 
	#MSC_BASE
 (
PERIPH_BASE
 + 0xC0000)

	)

92 
	#LESENSE_BASE
 (
PERIPH_BASE
 + 0x8C000)

	)

93 
	#WDOG_BASE
 (
PERIPH_BASE
 + 0x88000)

	)

94 
	#PCNT2_BASE
 (
PERIPH_BASE
 + 0x86800)

	)

95 
	#PCNT1_BASE
 (
PERIPH_BASE
 + 0x86400)

	)

96 
	#PCNT0_BASE
 (
PERIPH_BASE
 + 0x86000)

	)

97 
	#LEUART1_BASE
 (
PERIPH_BASE
 + 0x84400)

	)

98 
	#LEUART0_BASE
 (
PERIPH_BASE
 + 0x84000)

	)

99 
	#LETIMER0_BASE
 (
PERIPH_BASE
 + 0x82000)

	)

100 
	#BURTC_BASE
 (
PERIPH_BASE
 + 0x81000)

	)

101 
	#RTC_BASE
 (
PERIPH_BASE
 + 0x80000)

	)

102 
	#PRS_BASE
 (
PERIPH_BASE
 + 0xCC000)

	)

103 
	#TIMER3_BASE
 (
PERIPH_BASE
 + 0x10C00)

	)

104 
	#TIMER2_BASE
 (
PERIPH_BASE
 + 0x10800)

	)

105 
	#TIMER1_BASE
 (
PERIPH_BASE
 + 0x10400)

	)

106 
	#TIMER0_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

107 
	#UART1_BASE
 (
PERIPH_BASE
 + 0x0E400)

	)

108 
	#UART0_BASE
 (
PERIPH_BASE
 + 0x0E000)

	)

109 
	#USART2_BASE
 (
PERIPH_BASE
 + 0x0C800)

	)

110 
	#USART1_BASE
 (
PERIPH_BASE
 + 0x0C400)

	)

111 
	#USARTRF0_BASE
 (
PERIPH_BASE
 + 0x0C000)

	)

112 
	#I2C1_BASE
 (
PERIPH_BASE
 + 0x0A400)

	)

113 
	#I2C0_BASE
 (
PERIPH_BASE
 + 0x0A000)

	)

114 
	#GPIO_BASE
 (
PERIPH_BASE
 + 0x06000)

	)

115 
	#DAC0_BASE
 (
PERIPH_BASE
 + 0x04000)

	)

116 
	#ADC0_BASE
 (
PERIPH_BASE
 + 0x02000)

	)

117 
	#ACMP1_BASE
 (
PERIPH_BASE
 + 0x01400)

	)

118 
	#ACMP0_BASE
 (
PERIPH_BASE
 + 0x01000)

	)

119 
	#VCMP_BASE
 (
PERIPH_BASE
 + 0x00000)

	)

	@libopencm3/include/libopencm3/efm32/ezr32wg/msc.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_MSC_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_MSC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/msc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/nvic.h

6 #i‚de‡
LIBOPENCM3_EZR32WG_NVIC_H


7 
	#LIBOPENCM3_EZR32WG_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_DMA_IRQ
 0

	)

17 
	#NVIC_GPIO_EVEN_IRQ
 1

	)

18 
	#NVIC_TIMER0_IRQ
 2

	)

19 
	#NVIC_USART0_RX_IRQ
 3

	)

20 
	#NVIC_USART0_TX_IRQ
 4

	)

21 
	#NVIC_USB_IRQ
 5

	)

22 
	#NVIC_ACMP01_IRQ
 6

	)

23 
	#NVIC_ADC0_IRQ
 7

	)

24 
	#NVIC_DAC0_IRQ
 8

	)

25 
	#NVIC_I2C0_IRQ
 9

	)

26 
	#NVIC_I2C1_IRQ
 10

	)

27 
	#NVIC_GPIO_ODD_IRQ
 11

	)

28 
	#NVIC_TIMER1_IRQ
 12

	)

29 
	#NVIC_TIMER2_IRQ
 13

	)

30 
	#NVIC_TIMER3_IRQ
 14

	)

31 
	#NVIC_USART1_RX_IRQ
 15

	)

32 
	#NVIC_USART1_TX_IRQ
 16

	)

33 
	#NVIC_LESENSE_IRQ
 17

	)

34 
	#NVIC_USART2_RX_IRQ
 18

	)

35 
	#NVIC_USART2_TX_IRQ
 19

	)

36 
	#NVIC_UART0_RX_IRQ
 20

	)

37 
	#NVIC_UART0_TX_IRQ
 21

	)

38 
	#NVIC_UART1_RX_IRQ
 22

	)

39 
	#NVIC_UART1_TX_IRQ
 23

	)

40 
	#NVIC_LEUART0_IRQ
 24

	)

41 
	#NVIC_LEUART1_IRQ
 25

	)

42 
	#NVIC_LETIMER0_IRQ
 26

	)

43 
	#NVIC_PCNT0_IRQ
 27

	)

44 
	#NVIC_PCNT1_IRQ
 28

	)

45 
	#NVIC_PCNT2_IRQ
 29

	)

46 
	#NVIC_RTC_IRQ
 30

	)

47 
	#NVIC_BURTC_IRQ
 31

	)

48 
	#NVIC_CMU_IRQ
 32

	)

49 
	#NVIC_VCMP_IRQ
 33

	)

50 
	#NVIC_LCD_IRQ
 34

	)

51 
	#NVIC_MSC_IRQ
 35

	)

52 
	#NVIC_AES_IRQ
 36

	)

53 
	#NVIC_EBI_IRQ
 37

	)

54 
	#NVIC_EMU_IRQ
 38

	)

56 
	#NVIC_IRQ_COUNT
 39

	)

65 
BEGIN_DECLS


67 
dma_i§
();

68 
gpio_eví_i§
();

69 
timî0_i§
();

70 
ußπ0_rx_i§
();

71 
ußπ0_tx_i§
();

72 
usb_i§
();

73 
acmp01_i§
();

74 
adc0_i§
();

75 
dac0_i§
();

76 
i2c0_i§
();

77 
i2c1_i§
();

78 
gpio_odd_i§
();

79 
timî1_i§
();

80 
timî2_i§
();

81 
timî3_i§
();

82 
ußπ1_rx_i§
();

83 
ußπ1_tx_i§
();

84 
À£n£_i§
();

85 
ußπ2_rx_i§
();

86 
ußπ2_tx_i§
();

87 
u¨t0_rx_i§
();

88 
u¨t0_tx_i§
();

89 
u¨t1_rx_i§
();

90 
u¨t1_tx_i§
();

91 
Àu¨t0_i§
();

92 
Àu¨t1_i§
();

93 
Àtimî0_i§
();

94 
p˙t0_i§
();

95 
p˙t1_i§
();

96 
p˙t2_i§
();

97 
πc_i§
();

98 
buπc_i§
();

99 
cmu_i§
();

100 
vcmp_i§
();

101 
lcd_i§
();

102 
msc_i§
();

103 
´s_i§
();

104 
ebi_i§
();

105 
emu_i§
();

107 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/ezr32wg/opamp.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_OPAMP_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_OPAMP_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/›amp_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/prs.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_PRS_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_PRS_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/¥s_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/rmu.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_RMU_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_RMU_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/rmu_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/rtc.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_RTC_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_RTC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/πc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/timer.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_TIMER_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_TIMER_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/timî_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/uart.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_UART_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_UART_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/u¨t_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/usart.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_USART_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_USART_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/ußπ_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/usb.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_USB_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_USB_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/usb_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/ezr32wg/wdog.h

20 #i‚de‡
LIBOPENCM3_EFM32_EZR32WG_WDOG_H


21 
	#LIBOPENCM3_EFM32_EZR32WG_WDOG_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/wdog_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/g/doc-efm32g.h

	@libopencm3/include/libopencm3/efm32/g/nvic.h

6 #i‚de‡
LIBOPENCM3_EFM32G_NVIC_H


7 
	#LIBOPENCM3_EFM32G_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_DMA_IRQ
 0

	)

17 
	#NVIC_GPIO_EVEN_IRQ
 1

	)

18 
	#NVIC_TIMER0_IRQ
 2

	)

19 
	#NVIC_USART0_RX_IRQ
 3

	)

20 
	#NVIC_USART0_TX_IRQ
 4

	)

21 
	#NVIC_ACMP01_IRQ
 5

	)

22 
	#NVIC_ADC0_IRQ
 6

	)

23 
	#NVIC_DAC0_IRQ
 7

	)

24 
	#NVIC_I2C0_IRQ
 8

	)

25 
	#NVIC_GPIO_ODD_IRQ
 9

	)

26 
	#NVIC_TIMER1_IRQ
 10

	)

27 
	#NVIC_TIMER2_IRQ
 11

	)

28 
	#NVIC_USART1_RX_IRQ
 12

	)

29 
	#NVIC_USART1_TX_IRQ
 13

	)

30 
	#NVIC_USART2_RX_IRQ
 14

	)

31 
	#NVIC_USART2_TX_IRQ
 15

	)

32 
	#NVIC_UART0_RX_IRQ
 16

	)

33 
	#NVIC_UART0_TX_IRQ
 17

	)

34 
	#NVIC_LEUART0_IRQ
 18

	)

35 
	#NVIC_LEUART1_IRQ
 19

	)

36 
	#NVIC_LETIMER0_IRQ
 20

	)

37 
	#NVIC_PCNT0_IRQ
 21

	)

38 
	#NVIC_PCNT1_IRQ
 22

	)

39 
	#NVIC_PCNT2_IRQ
 23

	)

40 
	#NVIC_RTC_IRQ
 24

	)

41 
	#NVIC_CMU_IRQ
 25

	)

42 
	#NVIC_VCMP_IRQ
 26

	)

43 
	#NVIC_LCD_IRQ
 27

	)

44 
	#NVIC_MSC_IRQ
 28

	)

45 
	#NVIC_AES_IRQ
 29

	)

47 
	#NVIC_IRQ_COUNT
 30

	)

56 
BEGIN_DECLS


58 
dma_i§
();

59 
gpio_eví_i§
();

60 
timî0_i§
();

61 
ußπ0_rx_i§
();

62 
ußπ0_tx_i§
();

63 
acmp01_i§
();

64 
adc0_i§
();

65 
dac0_i§
();

66 
i2c0_i§
();

67 
gpio_odd_i§
();

68 
timî1_i§
();

69 
timî2_i§
();

70 
ußπ1_rx_i§
();

71 
ußπ1_tx_i§
();

72 
ußπ2_rx_i§
();

73 
ußπ2_tx_i§
();

74 
u¨t0_rx_i§
();

75 
u¨t0_tx_i§
();

76 
Àu¨t0_i§
();

77 
Àu¨t1_i§
();

78 
Àtimî0_i§
();

79 
p˙t0_i§
();

80 
p˙t1_i§
();

81 
p˙t2_i§
();

82 
πc_i§
();

83 
cmu_i§
();

84 
vcmp_i§
();

85 
lcd_i§
();

86 
msc_i§
();

87 
´s_i§
();

89 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/gg/doc-efm32gg.h

	@libopencm3/include/libopencm3/efm32/gg/nvic.h

6 #i‚de‡
LIBOPENCM3_EFM32GG_NVIC_H


7 
	#LIBOPENCM3_EFM32GG_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_DMA_IRQ
 0

	)

17 
	#NVIC_GPIO_EVEN_IRQ
 1

	)

18 
	#NVIC_TIMER0_IRQ
 2

	)

19 
	#NVIC_USART0_RX_IRQ
 3

	)

20 
	#NVIC_USART0_TX_IRQ
 4

	)

21 
	#NVIC_USB_IRQ
 5

	)

22 
	#NVIC_ACMP01_IRQ
 6

	)

23 
	#NVIC_ADC0_IRQ
 7

	)

24 
	#NVIC_DAC0_IRQ
 8

	)

25 
	#NVIC_I2C0_IRQ
 9

	)

26 
	#NVIC_I2C1_IRQ
 10

	)

27 
	#NVIC_GPIO_ODD_IRQ
 11

	)

28 
	#NVIC_TIMER1_IRQ
 12

	)

29 
	#NVIC_TIMER2_IRQ
 13

	)

30 
	#NVIC_TIMER3_IRQ
 14

	)

31 
	#NVIC_USART1_RX_IRQ
 15

	)

32 
	#NVIC_USART1_TX_IRQ
 16

	)

33 
	#NVIC_LESENSE_IRQ
 17

	)

34 
	#NVIC_USART2_RX_IRQ
 18

	)

35 
	#NVIC_USART2_TX_IRQ
 19

	)

36 
	#NVIC_UART0_RX_IRQ
 20

	)

37 
	#NVIC_UART0_TX_IRQ
 21

	)

38 
	#NVIC_UART1_RX_IRQ
 22

	)

39 
	#NVIC_UART1_TX_IRQ
 23

	)

40 
	#NVIC_LEUART0_IRQ
 24

	)

41 
	#NVIC_LEUART1_IRQ
 25

	)

42 
	#NVIC_LETIMER0_IRQ
 26

	)

43 
	#NVIC_PCNT0_IRQ
 27

	)

44 
	#NVIC_PCNT1_IRQ
 28

	)

45 
	#NVIC_PCNT2_IRQ
 29

	)

46 
	#NVIC_RTC_IRQ
 30

	)

47 
	#NVIC_BURTC_IRQ
 31

	)

48 
	#NVIC_CMU_IRQ
 32

	)

49 
	#NVIC_VCMP_IRQ
 33

	)

50 
	#NVIC_LCD_IRQ
 34

	)

51 
	#NVIC_MSC_IRQ
 35

	)

52 
	#NVIC_AES_IRQ
 36

	)

53 
	#NVIC_EBI_IRQ
 37

	)

55 
	#NVIC_IRQ_COUNT
 38

	)

64 
BEGIN_DECLS


66 
dma_i§
();

67 
gpio_eví_i§
();

68 
timî0_i§
();

69 
ußπ0_rx_i§
();

70 
ußπ0_tx_i§
();

71 
usb_i§
();

72 
acmp01_i§
();

73 
adc0_i§
();

74 
dac0_i§
();

75 
i2c0_i§
();

76 
i2c1_i§
();

77 
gpio_odd_i§
();

78 
timî1_i§
();

79 
timî2_i§
();

80 
timî3_i§
();

81 
ußπ1_rx_i§
();

82 
ußπ1_tx_i§
();

83 
À£n£_i§
();

84 
ußπ2_rx_i§
();

85 
ußπ2_tx_i§
();

86 
u¨t0_rx_i§
();

87 
u¨t0_tx_i§
();

88 
u¨t1_rx_i§
();

89 
u¨t1_tx_i§
();

90 
Àu¨t0_i§
();

91 
Àu¨t1_i§
();

92 
Àtimî0_i§
();

93 
p˙t0_i§
();

94 
p˙t1_i§
();

95 
p˙t2_i§
();

96 
πc_i§
();

97 
buπc_i§
();

98 
cmu_i§
();

99 
vcmp_i§
();

100 
lcd_i§
();

101 
msc_i§
();

102 
´s_i§
();

103 
ebi_i§
();

105 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/gpio.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/gpio.h
>

22 #ñi‡
deföed
(
EFM32HG
)

23 
	~<lib›ícm3/efm32/hg/gpio.h
>

24 #ñi‡
deföed
(
EFM32WG
)

25 
	~<lib›ícm3/efm32/wg/gpio.h
>

26 #ñi‡
deföed
(
EZR32WG
)

27 
	~<lib›ícm3/efm32/ezr32wg/gpio.h
>

	@libopencm3/include/libopencm3/efm32/hg/cmu.h

21 #i‚de‡
LIBOPENCM3_EFM32_CMU_H


22 
	#LIBOPENCM3_EFM32_CMU_H


	)

24 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

25 
	~<lib›ícm3/cm3/comm⁄.h
>

27 
	#CMU_CTRL
 
	`MMIO32
(
CMU_BASE
 + 0x000)

	)

28 
	#CMU_HFCORECLKDIV
 
	`MMIO32
(
CMU_BASE
 + 0x004)

	)

29 
	#CMU_HFPERCLKDIV
 
	`MMIO32
(
CMU_BASE
 + 0x008)

	)

30 
	#CMU_HFRCOCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x00C)

	)

31 
	#CMU_LFRCOCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x010)

	)

32 
	#CMU_AUXHFRCOCTR
 
	`MMIO32
(
CMU_BASE
 + 0x014)

	)

33 
	#CMU_CALCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x018)

	)

34 
	#CMU_CALCNT
 
	`MMIO32
(
CMU_BASE
 + 0x01C)

	)

35 
	#CMU_OSCENCMD
 
	`MMIO32
(
CMU_BASE
 + 0x020)

	)

36 
	#CMU_CMD
 
	`MMIO32
(
CMU_BASE
 + 0x024)

	)

37 
	#CMU_LFCLKSEL
 
	`MMIO32
(
CMU_BASE
 + 0x028)

	)

38 
	#CMU_STATUS
 
	`MMIO32
(
CMU_BASE
 + 0x02C)

	)

39 
	#CMU_IF
 
	`MMIO32
(
CMU_BASE
 + 0x030)

	)

40 
	#CMU_IFS
 
	`MMIO32
(
CMU_BASE
 + 0x034)

	)

41 
	#CMU_IFC
 
	`MMIO32
(
CMU_BASE
 + 0x038)

	)

42 
	#CMU_IEN
 
	`MMIO32
(
CMU_BASE
 + 0x03C)

	)

43 
	#CMU_HFCORECLKEN0
 
	`MMIO32
(
CMU_BASE
 + 0x040)

	)

44 
	#CMU_HFPERCLKEN0
 
	`MMIO32
(
CMU_BASE
 + 0x044)

	)

45 
	#CMU_SYNCBUSY
 
	`MMIO32
(
CMU_BASE
 + 0x050)

	)

46 
	#CMU_FREEZE
 
	`MMIO32
(
CMU_BASE
 + 0x054)

	)

47 
	#CMU_LFACLKEN0
 
	`MMIO32
(
CMU_BASE
 + 0x058)

	)

48 
	#CMU_LFBCLKEN0
 
	`MMIO32
(
CMU_BASE
 + 0x060)

	)

49 
	#CMU_LFCCLKEN0
 
	`MMIO32
(
CMU_BASE
 + 0x064)

	)

50 
	#CMU_LFAPRESC0
 
	`MMIO32
(
CMU_BASE
 + 0x068)

	)

51 
	#CMU_LFBPRESC0
 
	`MMIO32
(
CMU_BASE
 + 0x070)

	)

52 
	#CMU_PCNTCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x078)

	)

53 
	#CMU_ROUTE
 
	`MMIO32
(
CMU_BASE
 + 0x080)

	)

54 
	#CMU_LOCK
 
	`MMIO32
(
CMU_BASE
 + 0x084)

	)

55 
	#CMU_USBCRCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x0D0)

	)

56 
	#CMU_USHFRCOCTRL
 
	`MMIO32
(
CMU_BASE
 + 0x0D4)

	)

57 
	#CMU_USHFRCOTUNE
 
	`MMIO32
(
CMU_BASE
 + 0x0D8)

	)

58 
	#CMU_USHFRCOCONF
 
	`MMIO32
(
CMU_BASE
 + 0x0DC)

	)

61 
	#CMU_CTRL_CLKOUTSEL1_SHIFT
 (23)

	)

62 
	#CMU_CTRL_CLKOUTSEL1_MASK
 (0x7 << 
CMU_CTRL_CLKOUTSEL1_SHIFT
)

	)

63 
	#CMU_CTRL_CLKOUTSEL1
(
v
) \

64 (((
v
Ë<< 
CMU_CTRL_CLKOUTSEL1_SHIFT
Ë& 
CMU_CTRL_CLKOUTSEL1_MASK
)

	)

65 
	#CMU_CTRL_CLKOUTSEL1_LFRCO
 
	`CMU_CTRL_CLKOUTSEL1
(0)

	)

66 
	#CMU_CTRL_CLKOUTSEL1_LFXO
 
	`CMU_CTRL_CLKOUTSEL1
(1)

	)

67 
	#CMU_CTRL_CLKOUTSEL1_HFCLK
 
	`CMU_CTRL_CLKOUTSEL1
(2)

	)

68 
	#CMU_CTRL_CLKOUTSEL1_LFXOQ
 
	`CMU_CTRL_CLKOUTSEL1
(3)

	)

69 
	#CMU_CTRL_CLKOUTSEL1_HFXOQ
 
	`CMU_CTRL_CLKOUTSEL1
(4)

	)

70 
	#CMU_CTRL_CLKOUTSEL1_LFRCOQ
 
	`CMU_CTRL_CLKOUTSEL1
(5)

	)

71 
	#CMU_CTRL_CLKOUTSEL1_HFRCOQ
 
	`CMU_CTRL_CLKOUTSEL1
(6)

	)

72 
	#CMU_CTRL_CLKOUTSEL1_AUXHFRCOQ
 
	`CMU_CTRL_CLKOUTSEL1
(7)

	)

73 
	#CMU_CTRL_CLKOUTSEL1_USHFRCO
 
	`CMU_CTRL_CLKOUTSEL1
(8)

	)

75 
	#CMU_CTRL_CLKOUTSEL0_SHIFT
 (20)

	)

76 
	#CMU_CTRL_CLKOUTSEL0_MASK
 (0x7 << 
CMU_CTRL_CLKOUTSEL0_SHIFT
)

	)

77 
	#CMU_CTRL_CLKOUTSEL0
(
v
) \

78 (((
v
Ë<< 
CMU_CTRL_CLKOUTSEL0_SHIFT
Ë& 
CMU_CTRL_CLKOUTSEL0_MASK
)

	)

79 
	#CMU_CTRL_CLKOUTSEL0_HFRCO
 
	`CMU_CTRL_CLKOUTSEL0
(0)

	)

80 
	#CMU_CTRL_CLKOUTSEL0_HFXO
 
	`CMU_CTRL_CLKOUTSEL0
(1)

	)

81 
	#CMU_CTRL_CLKOUTSEL0_HFCLK2
 
	`CMU_CTRL_CLKOUTSEL0
(2)

	)

82 
	#CMU_CTRL_CLKOUTSEL0_HFCLK4
 
	`CMU_CTRL_CLKOUTSEL0
(3)

	)

83 
	#CMU_CTRL_CLKOUTSEL0_HFCLK8
 
	`CMU_CTRL_CLKOUTSEL0
(4)

	)

84 
	#CMU_CTRL_CLKOUTSEL0_HFCLK16
 
	`CMU_CTRL_CLKOUTSEL0
(5)

	)

85 
	#CMU_CTRL_CLKOUTSEL0_ULFRCO
 
	`CMU_CTRL_CLKOUTSEL0
(6)

	)

86 
	#CMU_CTRL_CLKOUTSEL0_AUXHFRCO
 
	`CMU_CTRL_CLKOUTSEL0
(7)

	)

88 
	#CMU_CTRL_LFXOTIMEOUT_SHIFT
 (18)

	)

89 
	#CMU_CTRL_LFXOTIMEOUT_MASK
 (0x3 << 
CMU_CTRL_LFXOTIMEOUT_SHIFT
)

	)

90 
	#CMU_CTRL_LFXOTIMEOUT
(
v
) \

91 (((
v
Ë<< 
CMU_CTRL_LFXOTIMEOUT_SHIFT
Ë& 
CMU_CTRL_LFXOTIMEOUT_MASK
)

	)

92 
	#CMU_CTRL_LFXOTIMEOUT_8CYCLES
 
	`CMU_CTRL_LFXOTIMEOUT
(0)

	)

93 
	#CMU_CTRL_LFXOTIMEOUT_1KCYCLES
 
	`CMU_CTRL_LFXOTIMEOUT
(1)

	)

94 
	#CMU_CTRL_LFXOTIMEOUT_16KCYCLES
 
	`CMU_CTRL_LFXOTIMEOUT
(2)

	)

95 
	#CMU_CTRL_LFXOTIMEOUT_32KCYCLES
 
	`CMU_CTRL_LFXOTIMEOUT
(3)

	)

97 
	#CMU_CTRL_LFXOBUFCUR
 (1 << 17)

	)

99 
	#CMU_CTRL_HFCLKDIV_SHIFT
 (14)

	)

100 
	#CMU_CTRL_HFCLKDIV_MASK
 (0x7 << 
CMU_CTRL_HFCLKDIV_SHIFT
)

	)

101 
	#CMU_CTRL_HFCLKDIV
(
v
) \

102 (((
v
Ë<< 
CMU_CTRL_HFCLKDIV_SHIFT
Ë& 
CMU_CTRL_HFCLKDIV_MASK
)

	)

103 
	#CMU_CTRL_HFCLKDIV_NODIV
 
	`CMU_CTRL_HFCLKDIV
(0)

	)

104 
	#CMU_CTRL_HFCLKDIV_DIV2
 
	`CMU_CTRL_HFCLKDIV
(1)

	)

105 
	#CMU_CTRL_HFCLKDIV_DIV3
 
	`CMU_CTRL_HFCLKDIV
(2)

	)

106 
	#CMU_CTRL_HFCLKDIV_DIV4
 
	`CMU_CTRL_HFCLKDIV
(3)

	)

107 
	#CMU_CTRL_HFCLKDIV_DIV5
 
	`CMU_CTRL_HFCLKDIV
(4)

	)

108 
	#CMU_CTRL_HFCLKDIV_DIV6
 
	`CMU_CTRL_HFCLKDIV
(5)

	)

109 
	#CMU_CTRL_HFCLKDIV_DIV7
 
	`CMU_CTRL_HFCLKDIV
(6)

	)

110 
	#CMU_CTRL_HFCLKDIV_DIV8
 
	`CMU_CTRL_HFCLKDIV
(7)

	)

112 
	#CMU_CTRL_LFXOBOOST
 (1 << 13)

	)

114 
	#CMU_CTRL_LFXOMODE_SHIFT
 (11)

	)

115 
	#CMU_CTRL_LFXOMODE_MASK
 (0x3 << 
CMU_CTRL_LFXOMODE_SHIFT
)

	)

116 
	#CMU_CTRL_LFXOMODE
(
v
) \

117 (((
v
Ë<< 
CMU_CTRL_LFXOMODE_SHIFT
Ë& 
CMU_CTRL_LFXOMODE_MASK
)

	)

118 
	#CMU_CTRL_LFXOMODE_XTAL
 
	`CMU_CTRL_LFXOMODE
(0)

	)

119 
	#CMU_CTRL_LFXOMODE_BUFEXTCLK
 
	`CMU_CTRL_LFXOMODE
(1)

	)

120 
	#CMU_CTRL_LFXOMODE_DIGEXTCLK
 
	`CMU_CTRL_LFXOMODE
(2)

	)

122 
	#CMU_CTRL_HFXOTIMEOUT_SHIFT
 (9)

	)

123 
	#CMU_CTRL_HFXOTIMEOUT_MASK
 (0x3 << 
CMU_CTRL_HFXOTIMEOUT_SHIFT
)

	)

124 
	#CMU_CTRL_HFXOTIMEOUT
(
v
) \

125 (((
v
Ë<< 
CMU_CTRL_HFXOTIMEOUT_SHIFT
Ë& 
CMU_CTRL_HFXOTIMEOUT_MASK
)

	)

126 
	#CMU_CTRL_HFXOTIMEOUT_8CYCLES
 
	`CMU_CTRL_HFXOTIMEOUT
(0)

	)

127 
	#CMU_CTRL_HFXOTIMEOUT_256CYCLES
 
	`CMU_CTRL_HFXOTIMEOUT
(1)

	)

128 
	#CMU_CTRL_HFXOTIMEOUT_1KCYCLES
 
	`CMU_CTRL_HFXOTIMEOUT
(2)

	)

129 
	#CMU_CTRL_HFXOTIMEOUT_16KCYCLES
 
	`CMU_CTRL_HFXOTIMEOUT
(3)

	)

131 
	#CMU_CTRL_HFXOGLITCHDETEN
 (1 << 7)

	)

132 
	#CMU_CTRL_HFXOBUFCUR_MASK
 (0x3 << 5)

	)

134 
	#CMU_CTRL_HFXOBOOST_SHIFT
 (2)

	)

135 
	#CMU_CTRL_HFXOBOOST_MASK
 (0x3 << 
CMU_CTRL_HFXOBOOST_SHIFT
)

	)

136 
	#CMU_CTRL_HFXOBOOST
(
v
) \

137 (((
v
Ë<< 
CMU_CTRL_HFXOBOOST_SHIFT
Ë& 
CMU_CTRL_HFXOBOOST_MASK
)

	)

138 
	#CMU_CTRL_HFXOBOOST_50PCENT
 
	`CMU_CTRL_HFXOBOOST
(0)

	)

139 
	#CMU_CTRL_HFXOBOOST_70PCENT
 
	`CMU_CTRL_HFXOBOOST
(1)

	)

140 
	#CMU_CTRL_HFXOBOOST_80PCENT
 
	`CMU_CTRL_HFXOBOOST
(2)

	)

141 
	#CMU_CTRL_HFXOBOOST_100PCENT
 
	`CMU_CTRL_HFXOBOOST
(3)

	)

143 
	#CMU_CTRL_HFXOMODE_SHIFT
 (0)

	)

144 
	#CMU_CTRL_HFXOMODE_MASK
 (0x3 << 
CMU_CTRL_HFXOMODE_SHIFT
)

	)

145 
	#CMU_CTRL_HFXOMODE
(
v
) \

146 (((
v
Ë<< 
CMU_CTRL_HFXOMODE_SHIFT
Ë& 
CMU_CTRL_HFXOMODE_MASK
)

	)

147 
	#CMU_CTRL_HFXOMODE_XTAL
 
	`CMU_CTRL_HFXOMODE
(0)

	)

148 
	#CMU_CTRL_HFXOMODE_BUFEXTCLK
 
	`CMU_CTRL_HFXOMODE
(1)

	)

149 
	#CMU_CTRL_HFXOMODE_DIGEXTCLK
 
	`CMU_CTRL_HFXOMODE
(2)

	)

152 
	#CMU_HFCORECLKDIV_HFCORECLKLEDIV
 (1 << 8)

	)

154 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT
 (0)

	)

155 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_MASK
 \

156 (0xF << 
CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT
)

	)

157 
	#CMU_HFCORECLKDIV_HFCORECLKDIV
(
v
) \

158 (((
v
Ë<< 
CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT
) & \

159 
CMU_HFCORECLKDIV_HFCORECLKDIV_MASK
)

	)

160 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK
 \

161 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(0)

	)

162 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK2
 \

163 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(1)

	)

164 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK4
 \

165 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(2)

	)

166 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK8
 \

167 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(3)

	)

168 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK16
 \

169 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(4)

	)

170 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK32
 \

171 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(5)

	)

172 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK64
 \

173 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(6)

	)

174 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK128
 \

175 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(7)

	)

176 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK256
 \

177 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(8)

	)

178 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK512
 \

179 
	`CMU_HFCORECLKDIV_HFCORECLKDIV
(9)

	)

181 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_NODIV
 \

182 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK


	)

183 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV2
 \

184 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK2


	)

185 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV4
 \

186 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK4


	)

187 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV8
 \

188 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK8


	)

189 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV16
 \

190 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK16


	)

191 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV32
 \

192 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK32


	)

193 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV64
 \

194 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK64


	)

195 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV128
 \

196 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK128


	)

197 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV256
 \

198 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK256


	)

199 
	#CMU_HFCORECLKDIV_HFCORECLKDIV_DIV512
 \

200 
CMU_HFCORECLKDIV_HFCORECLKDIV_HFCLK512


	)

203 
	#CMU_HFPERCLKDIV_HFPERCLKEN
 (1 << 8)

	)

205 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT
 (0)

	)

206 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_MASK
 \

207 (0xF << 
CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT
)

	)

208 
	#CMU_HFPERCLKDIV_HFPERCLKDIV
(
v
) \

209 (((
v
Ë<< 
CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT
) & \

210 
CMU_HFPERCLKDIV_HFPERCLKDIV_MASK
)

	)

211 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(0)

	)

212 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK2
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(1)

	)

213 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK4
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(2)

	)

214 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK8
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(3)

	)

215 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK16
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(4)

	)

216 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK32
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(5)

	)

217 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK64
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(6)

	)

218 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK128
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(7)

	)

219 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK256
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(8)

	)

220 
	#CMU_HFPERCLKDIV_HFPERCLKHFCLK_HFCLK512
 
	`CMU_HFPERCLKDIV_HFPERCLKDIV
(9)

	)

223 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_NODIV
 \

224 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK


	)

225 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV2
 \

226 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK2


	)

227 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV4
 \

228 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK4


	)

229 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV8
 \

230 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK8


	)

231 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV16
 \

232 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK16


	)

233 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV32
 \

234 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK32


	)

235 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV64
 \

236 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK64


	)

237 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV128
 \

238 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK128


	)

239 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV256
 \

240 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK256


	)

241 
	#CMU_HFPERCLKDIV_HFPERCLKDIV_DIV512
 \

242 
CMU_HFPERCLKDIV_HFPERCLKDIV_HFCLK512


	)

245 
	#CMU_HFRCOCTRL_SUDELAY_SHIFT
 (12)

	)

246 
	#CMU_HFRCOCTRL_SUDELAY_MASK
 (0x1F << 
CMU_HFRCOCTRL_SUDELAY_SHIFT
)

	)

247 
	#CMU_HFRCOCTRL_SUDELAY
(
v
) \

248 ((((
v
Ë<< 
CMU_HFRCOCTRL_SUDELAY_SHIFT
Ë& 
CMU_HFRCOCTRL_SUDELAY_MASK
))

	)

250 
	#CMU_HFRCOCTRL_BAND_SHIFT
 (8)

	)

251 
	#CMU_HFRCOCTRL_BAND_MASK
 (0x7 << 
CMU_HFRCOCTRL_BAND_SHIFT
)

	)

252 
	#CMU_HFRCOCTRL_BAND
(
v
) \

253 (((
v
Ë<< 
CMU_HFRCOCTRL_BAND_SHIFT
Ë& 
CMU_HFRCOCTRL_BAND_MASK
)

	)

254 
	#CMU_HFRCOCTRL_BAND_1MHZ
 
	`CMU_HFRCOCTRL_BAND
(0)

	)

255 
	#CMU_HFRCOCTRL_BAND_7MHZ
 
	`CMU_HFRCOCTRL_BAND
(1)

	)

256 
	#CMU_HFRCOCTRL_BAND_11MHZ
 
	`CMU_HFRCOCTRL_BAND
(2)

	)

257 
	#CMU_HFRCOCTRL_BAND_14MHZ
 
	`CMU_HFRCOCTRL_BAND
(3)

	)

258 
	#CMU_HFRCOCTRL_BAND_21MHZ
 
	`CMU_HFRCOCTRL_BAND
(4)

	)

260 
	#CMU_HFRCOCTRL_TUNING_SHIFT
 (0)

	)

261 
	#CMU_HFRCOCTRL_TUNING_MASK
 (0xFF << 
CMU_HFRCOCTRL_TUNING_SHIFT
)

	)

262 
	#CMU_HFRCOCTRL_TUNING
(
v
) \

263 (((
v
Ë<< 
CMU_HFRCOCTRL_TUNING_SHIFT
Ë& 
CMU_HFRCOCTRL_TUNING_MASK
)

	)

266 
	#CMU_LFRCOCTRL_TUNING_SHIFT
 (0)

	)

267 
	#CMU_LFRCOCTRL_TUNING_MASK
 (0xFF << 
CMU_LFRCOCTRL_TUNING_SHIFT
)

	)

268 
	#CMU_LFRCOCTRL_TUNING
(
v
) \

269 (((
v
Ë<< 
CMU_LFRCOCTRL_TUNING_SHIFT
Ë& 
CMU_LFRCOCTRL_TUNING_MASK
)

	)

272 
	#CMU_AUXHFRCOCTRL_BAND_SHIFT
 (8)

	)

273 
	#CMU_AUXHFRCOCTRL_BAND_MASK
 (0x7 << 
CMU_AUXHFRCOCTRL_BAND_SHIFT
)

	)

274 
	#CMU_AUXHFRCOCTRL_BAND
(
v
) \

275 (((
v
Ë<< 
CMU_AUXHFRCOCTRL_BAND_SHIFT
Ë& 
CMU_AUXHFRCOCTRL_BAND_MASK
)

	)

276 
	#CMU_AUXHFRCOCTRL_BAND_14MHZ
 
	`CMU_AUXHFRCOCTRL_BAND
(0)

	)

277 
	#CMU_AUXHFRCOCTRL_BAND_11MHZ
 
	`CMU_AUXHFRCOCTRL_BAND
(1)

	)

278 
	#CMU_AUXHFRCOCTRL_BAND_7MHZ
 
	`CMU_AUXHFRCOCTRL_BAND
(2)

	)

279 
	#CMU_AUXHFRCOCTRL_BAND_1MHZ
 
	`CMU_AUXHFRCOCTRL_BAND
(3)

	)

280 
	#CMU_AUXHFRCOCTRL_BAND_28MHZ
 
	`CMU_AUXHFRCOCTRL_BAND
(6)

	)

281 
	#CMU_AUXHFRCOCTRL_BAND_21MHZ
 
	`CMU_AUXHFRCOCTRL_BAND
(7)

	)

283 
	#CMU_AUXHFRCOCTRL_TUNING_SHIFT
 (0)

	)

284 
	#CMU_AUXHFRCOCTRL_TUNING_MASK
 (0xFF << 
CMU_AUXHFRCOCTRL_TUNING_SHIFT
)

	)

285 
	#CMU_AUXHFRCOCTRL_TUNING
(
v
) \

286 (((
v
Ë<< 
CMU_AUXHFRCOCTRL_TUNING_SHIFT
Ë& 
CMU_AUXHFRCOCTRL_TUNING_MASK
)

	)

289 
	#CMU_CALCTRL_CONT
 (1 << 6)

	)

291 
	#CMU_CALCTRL_DOWNSEL_SHIFT
 (3)

	)

292 
	#CMU_CALCTRL_DOWNSEL_MASK
 (0x7 << 
CMU_CALCTRL_DOWNSEL_SHIFT
)

	)

293 
	#CMU_CALCTRL_DOWNSEL
(
v
) \

294 (((
v
Ë<< 
CMU_CALCTRL_DOWNSEL_SHIFT
Ë& 
CMU_CALCTRL_DOWNSEL_MASK
)

	)

295 
	#CMU_CALCTRL_DOWNSEL_HFCLK
 
	`CMU_CALCTRL_DOWNSEL
(0)

	)

296 
	#CMU_CALCTRL_DOWNSEL_HFXO
 
	`CMU_CALCTRL_DOWNSEL
(1)

	)

297 
	#CMU_CALCTRL_DOWNSEL_LFXO
 
	`CMU_CALCTRL_DOWNSEL
(2)

	)

298 
	#CMU_CALCTRL_DOWNSEL_HFRCO
 
	`CMU_CALCTRL_DOWNSEL
(3)

	)

299 
	#CMU_CALCTRL_DOWNSEL_LFRCO
 
	`CMU_CALCTRL_DOWNSEL
(4)

	)

300 
	#CMU_CALCTRL_DOWNSEL_AUXHFRCO
 
	`CMU_CALCTRL_DOWNSEL
(5)

	)

301 
	#CMU_CALCTRL_DOWNSEL_USHFRCO
 
	`CMU_CALCTRL_DOWNSEL
(6)

	)

303 
	#CMU_CALCTRL_UPSEL_SHIFT
 (3)

	)

304 
	#CMU_CALCTRL_UPSEL_MASK
 (0x7 << 
CMU_CALCTRL_UPSEL_SHIFT
)

	)

305 
	#CMU_CALCTRL_UPSEL
(
v
) \

306 (((
v
Ë<< 
CMU_CALCTRL_UPSEL_SHIFT
Ë& 
CMU_CALCTRL_UPSEL_MASK
)

	)

307 
	#CMU_CALCTRL_UPSEL_HFXO
 
	`CMU_CALCTRL_UPSEL
(0)

	)

308 
	#CMU_CALCTRL_UPSEL_LFXO
 
	`CMU_CALCTRL_UPSEL
(1)

	)

309 
	#CMU_CALCTRL_UPSEL_HFRCO
 
	`CMU_CALCTRL_UPSEL
(2)

	)

310 
	#CMU_CALCTRL_UPSEL_LFRCO
 
	`CMU_CALCTRL_UPSEL
(3)

	)

311 
	#CMU_CALCTRL_UPSEL_AUXHFRCO
 
	`CMU_CALCTRL_UPSEL
(4)

	)

312 
	#CMU_CALCTRL_UPSEL_USHFRCO
 
	`CMU_CALCTRL_UPSEL
(5)

	)

315 
	#CMU_CALCNT_CALCNT_SHIFT
 (0)

	)

316 
	#CMU_CALCNT_CALCNT_MASK
 (0xFFFFF << 
CMU_CALCNT_CALCNT_SHIFT
)

	)

317 
	#CMU_CALCNT_CALCNT
(
v
) \

318 (((
v
Ë<< 
CMU_CALCNT_CALCNT_SHIFT
Ë& 
CMU_CALCNT_CALCNT_MASK
)

	)

322 
	#CMU_OSCENCMD_USHFRCODIS
 (1 << 11)

	)

323 
	#CMU_OSCENCMD_USHFRCOEN
 (1 << 10)

	)

324 
	#CMU_OSCENCMD_LFXODIS
 (1 << 9)

	)

325 
	#CMU_OSCENCMD_LFXOEN
 (1 << 8)

	)

326 
	#CMU_OSCENCMD_LFRCODIS
 (1 << 7)

	)

327 
	#CMU_OSCENCMD_LFRCOEN
 (1 << 6)

	)

328 
	#CMU_OSCENCMD_AUXHFRCODIS
 (1 << 5)

	)

329 
	#CMU_OSCENCMD_AUXHFRCOEN
 (1 << 4)

	)

330 
	#CMU_OSCENCMD_HFXODIS
 (1 << 3)

	)

331 
	#CMU_OSCENCMD_HFXOEN
 (1 << 2)

	)

332 
	#CMU_OSCENCMD_HFRCODIS
 (1 << 1)

	)

333 
	#CMU_OSCENCMD_HFRCOEN
 (1 << 0)

	)

336 
	#CMU_CMD_USBCCLKSEL_SHIFT
 (5)

	)

337 
	#CMU_CMD_USBCCLKSEL_MASK
 (0x5 << 
CMU_CMD_USBCCLKSEL_SHIFT
)

	)

338 
	#CMU_CMD_USBCCLKSEL
(
v
) \

339 (((
v
Ë<< 
CMU_CMD_USBCCLKSEL_SHIFT
Ë& 
CMU_CMD_USBCCLKSEL_MASK
)

	)

340 
	#CMU_CMD_USBCCLKSEL_LFXO
 
	`CMU_CMD_USBCCLKSEL
(2)

	)

341 
	#CMU_CMD_USBCCLKSEL_LFRCO
 
	`CMU_CMD_USBCCLKSEL
(3)

	)

342 
	#CMU_CMD_USBCCLKSEL_USHFRCO
 
	`CMU_CMD_USBCCLKSEL
(4)

	)

344 
	#CMU_CMD_CALSTOP
 (1 << 4)

	)

345 
	#CMU_CMD_CALSTART
 (1 << 3)

	)

347 
	#CMU_CMD_HFCLKSEL_SHIFT
 (0)

	)

348 
	#CMU_CMD_HFCLKSEL_MASK
 (0x7 << 
CMU_CMD_HFCLKSEL_SHIFT
)

	)

349 
	#CMU_CMD_HFCLKSEL
(
v
) \

350 (((
v
Ë<< 
CMU_CMD_HFCLKSEL_SHIFT
Ë& 
CMU_CMD_HFCLKSEL_MASK
)

	)

351 
	#CMU_CMD_HFCLKSEL_HFRCO
 
	`CMU_CMD_HFCLKSEL
(1)

	)

352 
	#CMU_CMD_HFCLKSEL_HFXO
 
	`CMU_CMD_HFCLKSEL
(2)

	)

353 
	#CMU_CMD_HFCLKSEL_LFRCO
 
	`CMU_CMD_HFCLKSEL
(3)

	)

354 
	#CMU_CMD_HFCLKSEL_LFXO
 
	`CMU_CMD_HFCLKSEL
(4)

	)

358 
	#CMU_LFCLKSEL_LFBE
 (1 << 20)

	)

360 
	#CMU_LFCLKSEL_LFAE
 (1 << 16)

	)

363 
	#CMU_LFCLKSEL_LFC_SHIFT
 (4)

	)

364 
	#CMU_LFCLKSEL_LFC_MASK
 (0x3 << 
CMU_LFCLKSEL_LFC_SHIFT
)

	)

365 
	#CMU_LFCLKSEL_LFC
(
v
) \

366 (((
v
Ë<< 
CMU_LFCLKSEL_LFC_SHIFT
Ë& 
CMU_LFCLKSEL_LFC_MASK
)

	)

367 
	#CMU_LFCLKSEL_LFC_DISABLED
 
	`CMU_LFCLKSEL_LFC
(0)

	)

368 
	#CMU_LFCLKSEL_LFC_LFRCO
 
	`CMU_LFCLKSEL_LFC
(1)

	)

369 
	#CMU_LFCLKSEL_LFC_LFXO
 
	`CMU_LFCLKSEL_LFC
(2)

	)

371 
	#CMU_LFCLKSEL_LFB_SHIFT
 (2)

	)

372 
	#CMU_LFCLKSEL_LFB_MASK
 (0x3 << 
CMU_LFCLKSEL_LFB_SHIFT
)

	)

373 
	#CMU_LFCLKSEL_LFB
(
v
) \

374 (((
v
Ë<< 
CMU_LFCLKSEL_LFB_SHIFT
Ë& 
CMU_LFCLKSEL_LFB_MASK
)

	)

376 
	#CMU_LFCLKSEL_LFA_SHIFT
 (0)

	)

377 
	#CMU_LFCLKSEL_LFA_MASK
 (0x3 << 
CMU_LFCLKSEL_LFA_SHIFT
)

	)

378 
	#CMU_LFCLKSEL_LFA
(
v
) \

379 (((
v
Ë<< 
CMU_LFCLKSEL_LFA_SHIFT
Ë& 
CMU_LFCLKSEL_LFA_MASK
)

	)

383 
	#CMU_STATUS_USHFRCODIV2SEL
 (1 << 26)

	)

385 
	#CMU_STATUS_USHFRCOSUSPEND
 (1 << 23)

	)

386 
	#CMU_STATUS_USHFRCORDY
 (1 << 22)

	)

387 
	#CMU_STATUS_USHFRCOENS
 (1 << 21)

	)

388 
	#CMU_STATUS_USBCHFCLKSYNC
 (1 << 20)

	)

390 
	#CMU_STATUS_USBCUSHFRCOSEL
 (1 << 18)

	)

391 
	#CMU_STATUS_USBCLFRCOSEL
 (1 << 17)

	)

392 
	#CMU_STATUS_USBCLFXOSEL
 (1 << 16)

	)

394 
	#CMU_STATUS_CALBSY
 (1 << 14)

	)

395 
	#CMU_STATUS_LFXOSEL
 (1 << 13)

	)

396 
	#CMU_STATUS_LFRCOSEL
 (1 << 12)

	)

397 
	#CMU_STATUS_HFXOSEL
 (1 << 11)

	)

398 
	#CMU_STATUS_HFRCOSEL
 (1 << 10)

	)

399 
	#CMU_STATUS_LFXORDY
 (1 << 9)

	)

400 
	#CMU_STATUS_LFXOENS
 (1 << 8)

	)

401 
	#CMU_STATUS_LFRCORDY
 (1 << 7)

	)

402 
	#CMU_STATUS_LFRCOENS
 (1 << 6)

	)

403 
	#CMU_STATUS_AUXHFRCORDY
 (1 << 5)

	)

404 
	#CMU_STATUS_AUXHFRCOENS
 (1 << 4)

	)

405 
	#CMU_STATUS_HFXORDY
 (1 << 3)

	)

406 
	#CMU_STATUS_HFXOENS
 (1 << 2)

	)

407 
	#CMU_STATUS_HFRCORDY
 (1 << 1)

	)

408 
	#CMU_STATUS_HFRCOENS
 (1 << 0)

	)

412 
	#CMU_IF_USBCHFOSCSEL
 (1 << 9)

	)

413 
	#CMU_IF_USHFRCORDY
 (1 << 8)

	)

415 
	#CMU_IF_CALOF
 (1 << 6)

	)

416 
	#CMU_IF_CALRDY
 (1 << 5)

	)

417 
	#CMU_IF_AUXHFRCORDY
 (1 << 4)

	)

418 
	#CMU_IF_LFXORDY
 (1 << 3)

	)

419 
	#CMU_IF_LFRCORDY
 (1 << 2)

	)

420 
	#CMU_IF_HFXORDY
 (1 << 1)

	)

421 
	#CMU_IF_HFRCORDY
 (1 << 0)

	)

425 
	#CMU_IFS_USBCHFOSCSEL
 (1 << 9)

	)

426 
	#CMU_IFS_USHFRCORDY
 (1 << 8)

	)

428 
	#CMU_IFS_CALOF
 (1 << 6)

	)

429 
	#CMU_IFS_CALRDY
 (1 << 5)

	)

430 
	#CMU_IFS_AUXHFRCORDY
 (1 << 4)

	)

431 
	#CMU_IFS_LFXORDY
 (1 << 3)

	)

432 
	#CMU_IFS_LFRCORDY
 (1 << 2)

	)

433 
	#CMU_IFS_HFXORDY
 (1 << 1)

	)

434 
	#CMU_IFS_HFRCORDY
 (1 << 0)

	)

438 
	#CMU_IFC_USBCHFOSCSEL
 (1 << 9)

	)

439 
	#CMU_IFC_USHFRCORDY
 (1 << 8)

	)

441 
	#CMU_IFC_CALOF
 (1 << 6)

	)

442 
	#CMU_IFC_CALRDY
 (1 << 5)

	)

443 
	#CMU_IFC_AUXHFRCORDY
 (1 << 4)

	)

444 
	#CMU_IFC_LFXORDY
 (1 << 3)

	)

445 
	#CMU_IFC_LFRCORDY
 (1 << 2)

	)

446 
	#CMU_IFC_HFXORDY
 (1 << 1)

	)

447 
	#CMU_IFC_HFRCORDY
 (1 << 0)

	)

451 
	#CMU_IEN_USBCHFOSCSEL
 (1 << 9)

	)

452 
	#CMU_IEN_USHFRCORDY
 (1 << 8)

	)

454 
	#CMU_IEN_CALOF
 (1 << 6)

	)

455 
	#CMU_IEN_CALRDY
 (1 << 5)

	)

456 
	#CMU_IEN_AUXHFRCORDY
 (1 << 4)

	)

457 
	#CMU_IEN_LFXORDY
 (1 << 3)

	)

458 
	#CMU_IEN_LFRCORDY
 (1 << 2)

	)

459 
	#CMU_IEN_HFXORDY
 (1 << 1)

	)

460 
	#CMU_IEN_HFRCORDY
 (1 << 0)

	)

464 
	#CMU_HFCORECLKEN0_USB
 (1 << 4)

	)

465 
	#CMU_HFCORECLKEN0_USBC
 (1 << 3)

	)

466 
	#CMU_HFCORECLKEN0_LE
 (1 << 2)

	)

467 
	#CMU_HFCORECLKEN0_DMA
 (1 << 1)

	)

468 
	#CMU_HFCORECLKEN0_AES
 (1 << 0)

	)

472 
	#CMU_HFPERCLKEN0_I2C0
 (1 << 11)

	)

473 
	#CMU_HFPERCLKEN0_ADC0
 (1 << 10)

	)

474 
	#CMU_HFPERCLKEN0_VCMP
 (1 << 9)

	)

475 
	#CMU_HFPERCLKEN0_GPIO
 (1 << 8)

	)

476 
	#CMU_HFPERCLKEN0_IDAC0
 (1 << 7)

	)

477 
	#CMU_HFPERCLKEN0_PRS
 (1 << 6)

	)

478 
	#CMU_HFPERCLKEN0_ACMP0
 (1 << 5)

	)

479 
	#CMU_HFPERCLKEN0_USART1
 (1 << 4)

	)

480 
	#CMU_HFPERCLKEN0_USART0
 (1 << 3)

	)

481 
	#CMU_HFPERCLKEN0_TIMER2
 (1 << 2)

	)

482 
	#CMU_HFPERCLKEN0_TIMER1
 (1 << 1)

	)

483 
	#CMU_HFPERCLKEN0_TIMER0
 (1 << 0)

	)

487 
	#CMU_SYNCBUSY_LFCCLKEN0
 (1 << 8)

	)

489 
	#CMU_SYNCBUSY_LFBPRESC0
 (1 << 6)

	)

491 
	#CMU_SYNCBUSY_LFBCLKEN0
 (1 << 4)

	)

493 
	#CMU_SYNCBUSY_LFAPRESC0
 (1 << 2)

	)

495 
	#CMU_SYNCBUSY_LFACLKEN0
 (1 << 0)

	)

498 
	#CMU_FREEZE_REGFREEZE
 (1 << 0)

	)

501 
	#CMU_LFACLKEN0_RTC
 (1 << 0)

	)

504 
	#CMU_LFBCLKEN0_LEUART0
 (1 << 0)

	)

507 
	#CMU_LFCCLKEN0_USBLE
 (1 << 0)

	)

510 
	#CMU_LFAPRESC0_RTC_SHIFT
 (0)

	)

511 
	#CMU_LFAPRESC0_RTC_MASK
 (0xF << 
CMU_LFAPRESC0_RTC_SHIFT
)

	)

512 
	#CMU_LFAPRESC0_RTC
(
v
) \

513 (((
v
Ë<< 
CMU_LFAPRESC0_RTC_SHIFT
Ë& 
CMU_LFAPRESC0_RTC_MASK
)

	)

514 
	#CMU_LFAPRESC0_RTC_DIV1
 
	`CMU_LFAPRESC0_RTC
(0)

	)

515 
	#CMU_LFAPRESC0_RTC_DIV2
 
	`CMU_LFAPRESC0_RTC
(1)

	)

516 
	#CMU_LFAPRESC0_RTC_DIV4
 
	`CMU_LFAPRESC0_RTC
(2)

	)

517 
	#CMU_LFAPRESC0_RTC_DIV8
 
	`CMU_LFAPRESC0_RTC
(3)

	)

518 
	#CMU_LFAPRESC0_RTC_DIV16
 
	`CMU_LFAPRESC0_RTC
(4)

	)

519 
	#CMU_LFAPRESC0_RTC_DIV32
 
	`CMU_LFAPRESC0_RTC
(5)

	)

520 
	#CMU_LFAPRESC0_RTC_DIV64
 
	`CMU_LFAPRESC0_RTC
(6)

	)

521 
	#CMU_LFAPRESC0_RTC_DIV128
 
	`CMU_LFAPRESC0_RTC
(7)

	)

522 
	#CMU_LFAPRESC0_RTC_DIV256
 
	`CMU_LFAPRESC0_RTC
(8)

	)

523 
	#CMU_LFAPRESC0_RTC_DIV512
 
	`CMU_LFAPRESC0_RTC
(9)

	)

524 
	#CMU_LFAPRESC0_RTC_DIV1024
 
	`CMU_LFAPRESC0_RTC
(10)

	)

525 
	#CMU_LFAPRESC0_RTC_DIV2048
 
	`CMU_LFAPRESC0_RTC
(11)

	)

526 
	#CMU_LFAPRESC0_RTC_DIV4096
 
	`CMU_LFAPRESC0_RTC
(12)

	)

527 
	#CMU_LFAPRESC0_RTC_DIV8192
 
	`CMU_LFAPRESC0_RTC
(13)

	)

528 
	#CMU_LFAPRESC0_RTC_DIV16384
 
	`CMU_LFAPRESC0_RTC
(14)

	)

529 
	#CMU_LFAPRESC0_RTC_DIV32768
 
	`CMU_LFAPRESC0_RTC
(15)

	)

530 
	#CMU_LFAPRESC0_RTC_NODIV
 
CMU_LFAPRESC0_RTC_DIV1


	)

533 
	#CMU_LFBPRESC0_LEUART0_SHIFT
 (0)

	)

534 
	#CMU_LFBPRESC0_LEUART0_MASK
 (0x3 << 
CMU_LFBPRESC0_LEUART0_SHIFT
)

	)

535 
	#CMU_LFBPRESC0_LEUART0
(
v
) \

536 (((
v
Ë<< 
CMU_LFBPRESC0_LEUART0_SHIFT
Ë& 
CMU_LFBPRESC0_LEUART0_MASK
)

	)

537 
	#CMU_LFBPRESC0_LEUART0_DIV1
 
	`CMU_LFBPRESC0_LEUART0
(0)

	)

538 
	#CMU_LFBPRESC0_LEUART0_DIV2
 
	`CMU_LFBPRESC0_LEUART0
(1)

	)

539 
	#CMU_LFBPRESC0_LEUART0_DIV4
 
	`CMU_LFBPRESC0_LEUART0
(2)

	)

540 
	#CMU_LFBPRESC0_LEUART0_DIV8
 
	`CMU_LFBPRESC0_LEUART0
(3)

	)

541 
	#CMU_LFBPRESC0_LEUART0_NODIV
 
CMU_LFBPRESC0_LEUART0_DIV1


	)

544 
	#CMU_PCNTCTRL_PCNT0CLKSEL
 (1 << 1)

	)

545 
	#CMU_PCNTCTRL_PCNT0CLKEN
 (1 << 0)

	)

548 
	#CMU_ROUTE_LOCATION_SHIFT
 (2)

	)

549 
	#CMU_ROUTE_LOCATION_MASK
 (0x7 << 
CMU_ROUTE_LOCATION_SHIFT
)

	)

550 
	#CMU_ROUTE_LOCATION_LOCx
(
i
) \

551 (((
i
Ë<< 
CMU_ROUTE_LOCATION_SHIFT
Ë& 
CMU_ROUTE_LOCATION_MASK
)

	)

552 
	#CMU_ROUTE_LOCATION_LOC0
 
	`CMU_ROUTE_LOCATION_LOCx
(0)

	)

553 
	#CMU_ROUTE_LOCATION_LOC1
 
	`CMU_ROUTE_LOCATION_LOCx
(1)

	)

554 
	#CMU_ROUTE_LOCATION_LOC2
 
	`CMU_ROUTE_LOCATION_LOCx
(2)

	)

555 
	#CMU_ROUTE_LOCATION_LOC3
 
	`CMU_ROUTE_LOCATION_LOCx
(3)

	)

557 
	#CMU_ROUTE_CLKOUT1PEN
 (1 << 1)

	)

558 
	#CMU_ROUTE_CLKOUT0PEN
 (1 << 0)

	)

561 
	#CMU_LOCK_LOCKKEY_SHIFT
 (0)

	)

562 
	#CMU_LOCK_LOCKKEY_MASK
 (0xFFFF << 
CMU_LOCK_LOCKKEY_SHIFT
)

	)

563 
	#CMU_LOCK_LOCKKEY_UNLOCKED
 (0x0000 << 
CMU_LOCK_LOCKKEY_SHIFT
)

	)

564 
	#CMU_LOCK_LOCKKEY_LOCKED
 (0x0001 << 
CMU_LOCK_LOCKKEY_SHIFT
)

	)

565 
	#CMU_LOCK_LOCKKEY_LOCK
 (0x0000 << 
CMU_LOCK_LOCKKEY_SHIFT
)

	)

566 
	#CMU_LOCK_LOCKKEY_UNLOCK
 (0x580E << 
CMU_LOCK_LOCKKEY_SHIFT
)

	)

569 
	#CMU_USBCRCTRL_LSMODE
 (1 << 1)

	)

570 
	#CMU_USBCRCTRL_EN
 (1 << 0)

	)

574 
	#CMU_USHFRCOCTRL_TIMEOUT_MASK
 (0xf‡<< 12)

	)

576 
	#CMU_USHFRCOCTRL_SUSPEND
 (1 << 9)

	)

577 
	#CMU_USHFRCOCTRL_DITHEN
 (1 << 8)

	)

579 
	#CMU_USHFRCOCTRL_TUNING_MASK
 (0x7‡<< 0)

	)

583 
	#CMU_USHFRCOTUNE_FINETUNING_MASK
 (0x3‡<< 0)

	)

587 
	#CMU_USHFRCOTUNE_USHFRCODIV2DIS
 (1 << 4)

	)

589 
	#CMU_USHFRCOCONF_BAND_MASK
 (0x7 << 0)

	)

590 
	#CMU_USHFRCOCONF_BAND_48MHZ
 (0x1 << 0)

	)

591 
	#CMU_USHFRCOCONF_BAND_24MHZ
 (0x3 << 0)

	)

593 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

595 
	ecmu_≥rùh_˛kí
 {

597 
	mCMU_PCNT0
 = 
_REG_BIT
(0x078, 1),

600 
	mCMU_USBLE
 = 
_REG_BIT
(0x064, 0),

603 
	mCMU_LEUART0
 = 
_REG_BIT
(0x060, 0),

606 
	mCMU_RTC
 = 
_REG_BIT
(0x058, 0),

609 
	mCMU_I2C0
 = 
_REG_BIT
(0x044, 11),

610 
	mCMU_ADC0
 = 
_REG_BIT
(0x044, 10),

611 
	mCMU_VCMP
 = 
_REG_BIT
(0x044, 9),

612 
	mCMU_GPIO
 = 
_REG_BIT
(0x044, 8),

613 
	mCMU_IDAC0
 = 
_REG_BIT
(0x044, 7),

614 
	mCMU_PRS
 = 
_REG_BIT
(0x044, 6),

615 
	mCMU_ACMP0
 = 
_REG_BIT
(0x044, 5),

616 
	mCMU_USART1
 = 
_REG_BIT
(0x044, 4),

617 
	mCMU_USART0
 = 
_REG_BIT
(0x044, 3),

618 
	mCMU_TIMER2
 = 
_REG_BIT
(0x044, 2),

619 
	mCMU_TIMER1
 = 
_REG_BIT
(0x044, 1),

620 
	mCMU_TIMER0
 = 
_REG_BIT
(0x044, 0),

623 
	mCMU_USB
 = 
_REG_BIT
(0x040, 4),

624 
	mCMU_USBC
 = 
_REG_BIT
(0x040, 3),

625 
	mCMU_LE
 = 
_REG_BIT
(0x040, 2),

626 
	mCMU_DMA
 = 
_REG_BIT
(0x040, 1)

629 
	ecmu_osc
 {

630 
	mHFRCO
,

631 
	mLFRCO
,

632 
	mHFXO
,

633 
	mLFXO
,

634 
	mAUXHFRCO
,

635 
	mUSHFRCO
,

640 
BEGIN_DECLS


642 
cmu_íabÀ_lock
();

643 
cmu_dißbÀ_lock
();

644 
boﬁ
 
cmu_gë_lock_Êag
();

646 
cmu_≥rùh_˛ock_íabÀ
(
cmu_≥rùh_˛kí
 
≥rùh
);

647 
cmu_≥rùh_˛ock_dißbÀ
(
cmu_≥rùh_˛kí
 
≥rùh
);

652 
cmu_osc_⁄
(
cmu_osc
 
osc
);

653 
cmu_osc_off
(
cmu_osc
 
osc
);

658 
boﬁ
 
cmu_osc_ªady_Êag
(
cmu_osc
 
osc
);

659 
cmu_waô_f‹_osc_ªady
(
cmu_osc
 
osc
);

660 
cmu_£t_hf˛k_sour˚
(
cmu_osc
 
osc
);

661 
cmu_osc
 
cmu_gë_hf˛k_sour˚
();

663 
cmu_£t_usb˛k_sour˚
(
cmu_osc
 
osc
);

664 
cmu_waô_f‹_usb˛k_£À˘ed
(
cmu_osc
 
osc
);

672 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/hg/doc-efm32hg.h

	@libopencm3/include/libopencm3/efm32/hg/gpio.h

18 #i‚de‡
LIBOPENCM3_GPIO_H


19 
	#LIBOPENCM3_GPIO_H


	)

21 
	~<lib›ícm3/efm32/comm⁄/gpio_comm⁄_hglg.h
>

	@libopencm3/include/libopencm3/efm32/hg/memorymap.h

21 #i‚de‡
LIBOPENCM3_EFM32_MEMORYMAP_H


22 
	#LIBOPENCM3_EFM32_MEMORYMAP_H


	)

24 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

26 
	#PERIPH_BASE
 (0x40000000U)

	)

29 
	#DI_BASE
 (0x0FE08000U)

	)

32 
	#DI_CMU_LFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x020)

	)

33 
	#DI_CMU_HFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x028)

	)

34 
	#DI_CMU_AUXHFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x030)

	)

35 
	#DI_ADC0_CAL
 
	`MMIO32
(
DI_BASE
 + 0x040)

	)

36 
	#DI_ADC0_BIASPROG
 
	`MMIO32
(
DI_BASE
 + 0x048)

	)

37 
	#DI_ACMP0_CTRL
 
	`MMIO32
(
DI_BASE
 + 0x050)

	)

38 
	#DI_CMU_LCDCTRL
 
	`MMIO32
(
DI_BASE
 + 0x058)

	)

39 
	#DI_IDAC0_CAL
 
	`MMIO32
(
DI_BASE
 + 0x078)

	)

40 
	#DI_USHFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x098)

	)

41 
	#DI_DI_CRC
 
	`MMIO16
(
DI_BASE
 + 0x1B0)

	)

42 
	#DI_CAL_TEMP_0
 
	`MMIO8
(
DI_BASE
 + 0x1B2)

	)

43 
	#DI_ADC0_CAL_1V25
 
	`MMIO16
(
DI_BASE
 + 0x1B4)

	)

44 
	#DI_ADC0_CAL_2V5
 
	`MMIO16
(
DI_BASE
 + 0x1B6)

	)

45 
	#DI_ADC0_CAL_VDD
 
	`MMIO16
(
DI_BASE
 + 0x1B8)

	)

46 
	#DI_ADC0_CAL_5VDIFF
 
	`MMIO16
(
DI_BASE
 + 0x1BA)

	)

47 
	#DI_ADC0_CAL_2XVDD
 
	`MMIO16
(
DI_BASE
 + 0x1BC)

	)

48 
	#DI_ADC0_TEMP_0_READ_1V25
 
	`MMIO16
(
DI_BASE
 + 0x1BE)

	)

49 
	#DI_IDAC0_CAL_RANGE0
 
	`MMIO32
(
DI_BASE
 + 0x1C8)

	)

50 
	#DI_IDAC0_CAL_RANGE1
 
	`MMIO32
(
DI_BASE
 + 0x1C9)

	)

51 
	#DI_IDAC0_CAL_RANGE2
 
	`MMIO32
(
DI_BASE
 + 0x1CA)

	)

52 
	#DI_IDAC0_CAL_RANGE3
 
	`MMIO32
(
DI_BASE
 + 0x1CB)

	)

53 
	#DI_USHFRCO_COARSECAL_BAND_25
 
	`MMIO32
(
DI_BASE
 + 0x1CC)

	)

54 
	#DI_USHFRCO_FINECAL_BAND_25
 
	`MMIO32
(
DI_BASE
 + 0x1CD)

	)

55 
	#DI_USHFRCO_COARSECAL_BAND_48
 
	`MMIO32
(
DI_BASE
 + 0x1CE)

	)

56 
	#DI_USHFRCO_FINECAL_BAND_48
 
	`MMIO32
(
DI_BASE
 + 0x1CF)

	)

57 
	#DI_AUXHFRCO_CALIB_BAND_1
 
	`MMIO8
(
DI_BASE
 + 0x1D4)

	)

58 
	#DI_AUXHFRCO_CALIB_BAND_7
 
	`MMIO8
(
DI_BASE
 + 0x1D5)

	)

59 
	#DI_AUXHFRCO_CALIB_BAND_11
 
	`MMIO8
(
DI_BASE
 + 0x1D6)

	)

60 
	#DI_AUXHFRCO_CALIB_BAND_14
 
	`MMIO8
(
DI_BASE
 + 0x1D7)

	)

61 
	#DI_AUXHFRCO_CALIB_BAND_21
 
	`MMIO8
(
DI_BASE
 + 0x1D8)

	)

62 
	#DI_HFRCO_CALIB_BAND_1
 
	`MMIO8
(
DI_BASE
 + 0x1DC)

	)

63 
	#DI_HFRCO_CALIB_BAND_7
 
	`MMIO8
(
DI_BASE
 + 0x1DD)

	)

64 
	#DI_HFRCO_CALIB_BAND_11
 
	`MMIO8
(
DI_BASE
 + 0x1DE)

	)

65 
	#DI_HFRCO_CALIB_BAND_14
 
	`MMIO8
(
DI_BASE
 + 0x1DF)

	)

66 
	#DI_HFRCO_CALIB_BAND_21
 
	`MMIO8
(
DI_BASE
 + 0x1E0)

	)

67 
	#DI_UNIQUE_0
 
	`MMIO32
(
DI_BASE
 + 0x1F0)

	)

68 
	#DI_UNIQUE_1
 
	`MMIO32
(
DI_BASE
 + 0x1F4)

	)

69 
	#DI_MEM_INFO_FLASH
 
	`MMIO16
(
DI_BASE
 + 0x1F8)

	)

70 
	#DI_MEM_INFO_RAM
 
	`MMIO16
(
DI_BASE
 + 0x1FA)

	)

71 
	#DI_PART_NUMBER
 
	`MMIO16
(
DI_BASE
 + 0x1FC)

	)

72 
	#DI_PART_FAMILY
 
	`MMIO8
(
DI_BASE
 + 0x1FE)

	)

73 
	#DI_PROD_REV
 
	`MMIO8
(
DI_BASE
 + 0x1FF)

	)

75 
	#AES_BASE
 (
PERIPH_BASE
 + 0xE0000)

	)

76 
	#PRS_BASE
 (
PERIPH_BASE
 + 0xCC000)

	)

77 
	#RMU_BASE
 (
PERIPH_BASE
 + 0xCA000)

	)

78 
	#CMU_BASE
 (
PERIPH_BASE
 + 0xC8000)

	)

79 
	#EMU_BASE
 (
PERIPH_BASE
 + 0xC6000)

	)

80 
	#USB_BASE
 (
PERIPH_BASE
 + 0xC4000)

	)

81 
	#DMA_BASE
 (
PERIPH_BASE
 + 0xC2000)

	)

82 
	#MSC_BASE
 (
PERIPH_BASE
 + 0xC0000)

	)

83 
	#WDOG_BASE
 (
PERIPH_BASE
 + 0x88000)

	)

84 
	#PCNT0_BASE
 (
PERIPH_BASE
 + 0x86000)

	)

85 
	#LEUART0_BASE
 (
PERIPH_BASE
 + 0x84000)

	)

86 
	#RTC_BASE
 (
PERIPH_BASE
 + 0x80000)

	)

87 
	#TIMER2_BASE
 (
PERIPH_BASE
 + 0x10800)

	)

88 
	#TIMER1_BASE
 (
PERIPH_BASE
 + 0x10400)

	)

89 
	#TIMER0_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

90 
	#USART1_BASE
 (
PERIPH_BASE
 + 0x0C400)

	)

91 
	#USART0_BASE
 (
PERIPH_BASE
 + 0x0C000)

	)

92 
	#I2C0_BASE
 (
PERIPH_BASE
 + 0x0A000)

	)

93 
	#GPIO_BASE
 (
PERIPH_BASE
 + 0x06000)

	)

94 
	#IDAC0_BASE
 (
PERIPH_BASE
 + 0x04000)

	)

95 
	#ADC0_BASE
 (
PERIPH_BASE
 + 0x02000)

	)

96 
	#ACMP0_BASE
 (
PERIPH_BASE
 + 0x01000)

	)

97 
	#VCMP_BASE
 (
PERIPH_BASE
 + 0x00000)

	)

99 
	#USB_OTG_FS_BASE
 (
USB_BASE
 + 0x3C000)

	)

	@libopencm3/include/libopencm3/efm32/hg/nvic.h

6 #i‚de‡
LIBOPENCM3_EFM32HG_NVIC_H


7 
	#LIBOPENCM3_EFM32HG_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_DMA_IRQ
 0

	)

17 
	#NVIC_GPIO_EVEN_IRQ
 1

	)

18 
	#NVIC_TIMER0_IRQ
 2

	)

19 
	#NVIC_ACMP0_IRQ
 3

	)

20 
	#NVIC_ADC0_IRQ
 4

	)

21 
	#NVIC_I2C0_IRQ
 5

	)

22 
	#NVIC_GPIO_ODD_IRQ
 6

	)

23 
	#NVIC_TIMER1_IRQ
 7

	)

24 
	#NVIC_USART1_RX_IRQ
 8

	)

25 
	#NVIC_USART1_TX_IRQ
 9

	)

26 
	#NVIC_LEUART0_IRQ
 10

	)

27 
	#NVIC_PCNT0_IRQ
 11

	)

28 
	#NVIC_RTC_IRQ
 12

	)

29 
	#NVIC_CMU_IRQ
 13

	)

30 
	#NVIC_VCMP_IRQ
 14

	)

31 
	#NVIC_MSC_IRQ
 15

	)

32 
	#NVIC_AES_IRQ
 16

	)

33 
	#NVIC_USART0_RX_IRQ
 17

	)

34 
	#NVIC_USART0_TX_IRQ
 18

	)

35 
	#NVIC_USB_IRQ
 19

	)

36 
	#NVIC_TIMER2_IRQ
 20

	)

38 
	#NVIC_IRQ_COUNT
 21

	)

47 
BEGIN_DECLS


49 
dma_i§
();

50 
gpio_eví_i§
();

51 
timî0_i§
();

52 
acmp0_i§
();

53 
adc0_i§
();

54 
i2c0_i§
();

55 
gpio_odd_i§
();

56 
timî1_i§
();

57 
ußπ1_rx_i§
();

58 
ußπ1_tx_i§
();

59 
Àu¨t0_i§
();

60 
p˙t0_i§
();

61 
πc_i§
();

62 
cmu_i§
();

63 
vcmp_i§
();

64 
msc_i§
();

65 
´s_i§
();

66 
ußπ0_rx_i§
();

67 
ußπ0_tx_i§
();

68 
usb_i§
();

69 
timî2_i§
();

71 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/hg/timer.h

18 #i‚de‡
LIBOPENCM3_TIMER_H


19 
	#LIBOPENCM3_TIMER_H


	)

21 
	~<lib›ícm3/efm32/comm⁄/timî_comm⁄.h
>

26 
	#TIMER_ROUTE_LOCATION_LOC6
 
	`TIMER_ROUTE_LOCATION_LOCx
(6)

	)

29 
	#TIMER_CC_CTRL_PRSCONF
 (1 << 28)

	)

	@libopencm3/include/libopencm3/efm32/hg/usb.h

21 #i‚de‡
LIBOPENCM3_EFM32_USB_H


22 
	#LIBOPENCM3_EFM32_USB_H


	)

24 
	~<lib›ícm3/cm3/comm⁄.h
>

25 
	~<lib›ícm3/usb/dwc/Ÿg_fs.h
>

27 
	#USB_CTRL
 
	`MMIO32
(
USB_BASE
 + 0x000)

	)

28 
	#USB_STATUS
 
	`MMIO32
(
USB_BASE
 + 0x004)

	)

29 
	#USB_IF
 
	`MMIO32
(
USB_BASE
 + 0x008)

	)

30 
	#USB_IFS
 
	`MMIO32
(
USB_BASE
 + 0x00C)

	)

31 
	#USB_IFC
 
	`MMIO32
(
USB_BASE
 + 0x010)

	)

32 
	#USB_IEN
 
	`MMIO32
(
USB_BASE
 + 0x014)

	)

33 
	#USB_ROUTE
 
	`MMIO32
(
USB_BASE
 + 0x018)

	)

37 
	#USB_CTRL_BIASPROGEM23_MASK
 (0x3 << 24)

	)

39 
	#USB_CTRL_BIASPROGEM01_MASK
 (0x3 << 20)

	)

41 
	#USB_CTRL_VREGOSEN
 (1 << 17)

	)

42 
	#USB_CTRL_VREGDIS
 (1 << 16)

	)

44 
	#USB_CTRL_LEMIDLEEN
 (1 << 9)

	)

46 
	#USB_CTRL_LEMPHYCTRL
 (1 << 7)

	)

48 
	#USB_CTRL_LEMOSCCTRL_MASK
 (0x3 << 4)

	)

49 
	#USB_CTRL_LEMOSCCTRL_NONE
 (0x0 << 4)

	)

50 
	#USB_CTRL_LEMOSCCTRL_GATE
 (0x1 << 4)

	)

52 
	#USB_CTRL_DMPUAP
 (1 << 1)

	)

57 
	#USB_ROUTE_DMPUPEN
 (1 << 2)

	)

59 
	#USB_ROUTE_PHYPEN
 (1 << 0)

	)

	@libopencm3/include/libopencm3/efm32/hg/wdog.h

18 #i‚de‡
LIBOPENCM3_WDOG_H


19 
	#LIBOPENCM3_WDOG_H


	)

21 
	~<lib›ícm3/efm32/comm⁄/wdog_comm⁄_hglg.h
>

	@libopencm3/include/libopencm3/efm32/i2c.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/i2c.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/i2c.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/i2c.h
>

	@libopencm3/include/libopencm3/efm32/letimer.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/Àtimî.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/Àtimî.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/Àtimî.h
>

	@libopencm3/include/libopencm3/efm32/lg/acmp.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_ACMP_H


21 
	#LIBOPENCM3_EFM32_LG_ACMP_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/acmp_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/adc.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_ADC_H


21 
	#LIBOPENCM3_EFM32_LG_ADC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/adc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/burtc.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_BURTC_H


21 
	#LIBOPENCM3_EFM32_LG_BURTC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/buπc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/cmu.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_CMU_H


21 
	#LIBOPENCM3_EFM32_LG_CMU_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/cmu_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/dac.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_DAC_H


21 
	#LIBOPENCM3_EFM32_LG_DAC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/dac_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/dma.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_DMA_H


21 
	#LIBOPENCM3_EFM32_LG_DMA_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/dma_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/doc-efm32lg.h

	@libopencm3/include/libopencm3/efm32/lg/emu.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_EMU_H


21 
	#LIBOPENCM3_EFM32_LG_EMU_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/emu_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/gpio.h

18 #i‚de‡
LIBOPENCM3_GPIO_H


19 
	#LIBOPENCM3_GPIO_H


	)

21 
	~<lib›ícm3/efm32/comm⁄/gpio_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/i2c.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_I2C_H


21 
	#LIBOPENCM3_EFM32_LG_I2C_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/i2c_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/letimer.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_LETIMER_H


21 
	#LIBOPENCM3_EFM32_LG_LETIMER_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/Àtimî_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/memorymap.h

20 #i‚de‡
LIBOPENCM3_EFM32_MEMORYMAP_H


21 
	#LIBOPENCM3_EFM32_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

25 
	#PERIPH_BASE
 (0x40000000U)

	)

28 
	#DI_BASE
 (0x0FE08000U)

	)

31 
	#DI_CMU_LFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x020)

	)

32 
	#DI_CMU_HFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x028)

	)

33 
	#DI_CMU_AUXHFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x030)

	)

34 
	#DI_ADC0_CAL
 
	`MMIO32
(
DI_BASE
 + 0x040)

	)

35 
	#DI_ADC0_BIASPROG
 
	`MMIO32
(
DI_BASE
 + 0x048)

	)

36 
	#DI_DAC0_CAL
 
	`MMIO32
(
DI_BASE
 + 0x050)

	)

37 
	#DI_DAC0_BIASPROG
 
	`MMIO32
(
DI_BASE
 + 0x058)

	)

38 
	#DI_ACMP0_CTRL
 
	`MMIO32
(
DI_BASE
 + 0x060)

	)

39 
	#DI_ACMP1_CTRL
 
	`MMIO32
(
DI_BASE
 + 0x068)

	)

40 
	#DI_CMU_LCDCTRL
 
	`MMIO32
(
DI_BASE
 + 0x078)

	)

41 
	#DI_DAC0_OPACTRL
 
	`MMIO32
(
DI_BASE
 + 0x0A0)

	)

42 
	#DI_DAC0_OPAOFFSET
 
	`MMIO32
(
DI_BASE
 + 0x0A8)

	)

43 
	#DI_EMU_BUINACT
 
	`MMIO32
(
DI_BASE
 + 0x0B0)

	)

44 
	#DI_EMU_BUACT
 
	`MMIO32
(
DI_BASE
 + 0x0B8)

	)

45 
	#DI_EMU_BUBODBUVINCAL
 
	`MMIO32
(
DI_BASE
 + 0x0C0)

	)

46 
	#DI_EMU_BUBODUNREGCAL
 
	`MMIO32
(
DI_BASE
 + 0x0C8)

	)

47 
	#DI_DI_CRC
 
	`MMIO16
(
DI_BASE
 + 0x1B0)

	)

48 
	#DI_CAL_TEMP_0
 
	`MMIO8
(
DI_BASE
 + 0x1B2)

	)

49 
	#DI_ADC0_CAL_1V25
 
	`MMIO16
(
DI_BASE
 + 0x1B4)

	)

50 
	#DI_ADC0_CAL_2V5
 
	`MMIO16
(
DI_BASE
 + 0x1B6)

	)

51 
	#DI_ADC0_CAL_VDD
 
	`MMIO16
(
DI_BASE
 + 0x1B8)

	)

52 
	#DI_ADC0_CAL_5VDIFF
 
	`MMIO16
(
DI_BASE
 + 0x1BA)

	)

53 
	#DI_ADC0_CAL_2XVDD
 
	`MMIO16
(
DI_BASE
 + 0x1BC)

	)

54 
	#DI_ADC0_TEMP_0_READ_1V25
 
	`MMIO16
(
DI_BASE
 + 0x1BE)

	)

55 
	#DI_DAC0_CAL_1V25
 
	`MMIO32
(
DI_BASE
 + 0x1C8)

	)

56 
	#DI_DAC0_CAL_2V5
 
	`MMIO32
(
DI_BASE
 + 0x1CC)

	)

57 
	#DI_DAC0_CAL_VDD
 
	`MMIO32
(
DI_BASE
 + 0x1D0)

	)

58 
	#DI_AUXHFRCO_CALIB_BAND_1
 
	`MMIO8
(
DI_BASE
 + 0x1D4)

	)

59 
	#DI_AUXHFRCO_CALIB_BAND_7
 
	`MMIO8
(
DI_BASE
 + 0x1D5)

	)

60 
	#DI_AUXHFRCO_CALIB_BAND_11
 
	`MMIO8
(
DI_BASE
 + 0x1D6)

	)

61 
	#DI_AUXHFRCO_CALIB_BAND_14
 
	`MMIO8
(
DI_BASE
 + 0x1D7)

	)

62 
	#DI_AUXHFRCO_CALIB_BAND_21
 
	`MMIO8
(
DI_BASE
 + 0x1D8)

	)

63 
	#DI_AUXHFRCO_CALIB_BAND_28
 
	`MMIO8
(
DI_BASE
 + 0x1D9)

	)

64 
	#DI_HFRCO_CALIB_BAND_1
 
	`MMIO8
(
DI_BASE
 + 0x1DC)

	)

65 
	#DI_HFRCO_CALIB_BAND_7
 
	`MMIO8
(
DI_BASE
 + 0x1DD)

	)

66 
	#DI_HFRCO_CALIB_BAND_11
 
	`MMIO8
(
DI_BASE
 + 0x1DE)

	)

67 
	#DI_HFRCO_CALIB_BAND_14
 
	`MMIO8
(
DI_BASE
 + 0x1DF)

	)

68 
	#DI_HFRCO_CALIB_BAND_21
 
	`MMIO8
(
DI_BASE
 + 0x1E0)

	)

69 
	#DI_HFRCO_CALIB_BAND_28
 
	`MMIO8
(
DI_BASE
 + 0x1E1)

	)

70 
	#DI_MEM_INFO_PAGE_SIZE
 
	`MMIO8
(
DI_BASE
 + 0x1E7)

	)

71 
	#DI_UNIQUE_0
 
	`MMIO32
(
DI_BASE
 + 0x1F0)

	)

72 
	#DI_UNIQUE_1
 
	`MMIO32
(
DI_BASE
 + 0x1F4)

	)

73 
	#DI_MEM_INFO_FLASH
 
	`MMIO16
(
DI_BASE
 + 0x1F8)

	)

74 
	#DI_MEM_INFO_RAM
 
	`MMIO16
(
DI_BASE
 + 0x1FA)

	)

75 
	#DI_PART_NUMBER
 
	`MMIO16
(
DI_BASE
 + 0x1FC)

	)

76 
	#DI_PART_FAMILY
 
	`MMIO8
(
DI_BASE
 + 0x1FE)

	)

77 
	#DI_PROD_REV
 
	`MMIO8
(
DI_BASE
 + 0x1FF)

	)

79 
	#AES_BASE
 (
PERIPH_BASE
 + 0xE0000)

	)

80 
	#PRS_BASE
 (
PERIPH_BASE
 + 0xCC000)

	)

81 
	#RMU_BASE
 (
PERIPH_BASE
 + 0xCA000)

	)

82 
	#CMU_BASE
 (
PERIPH_BASE
 + 0xC8000)

	)

83 
	#EMU_BASE
 (
PERIPH_BASE
 + 0xC6000)

	)

84 
	#USB_BASE
 (
PERIPH_BASE
 + 0xC4000)

	)

85 
	#DMA_BASE
 (
PERIPH_BASE
 + 0xC2000)

	)

86 
	#MSC_BASE
 (
PERIPH_BASE
 + 0xC0000)

	)

87 
	#LESENSE_BASE
 (
PERIPH_BASE
 + 0x8C000)

	)

88 
	#LCD_BASE
 (
PERIPH_BASE
 + 0x8A000)

	)

89 
	#WDOG_BASE
 (
PERIPH_BASE
 + 0x88000)

	)

90 
	#PCNT2_BASE
 (
PERIPH_BASE
 + 0x86800)

	)

91 
	#PCNT1_BASE
 (
PERIPH_BASE
 + 0x86400)

	)

92 
	#PCNT0_BASE
 (
PERIPH_BASE
 + 0x86000)

	)

93 
	#LEUART1_BASE
 (
PERIPH_BASE
 + 0x84400)

	)

94 
	#LEUART0_BASE
 (
PERIPH_BASE
 + 0x84000)

	)

95 
	#LETIMER0_BASE
 (
PERIPH_BASE
 + 0x82000)

	)

96 
	#BURTC_BASE
 (
PERIPH_BASE
 + 0x81000)

	)

97 
	#RTC_BASE
 (
PERIPH_BASE
 + 0x80000)

	)

98 
	#TIMER3_BASE
 (
PERIPH_BASE
 + 0x10C00)

	)

99 
	#TIMER2_BASE
 (
PERIPH_BASE
 + 0x10800)

	)

100 
	#TIMER1_BASE
 (
PERIPH_BASE
 + 0x10400)

	)

101 
	#TIMER0_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

102 
	#UART1_BASE
 (
PERIPH_BASE
 + 0x0E400)

	)

103 
	#UART0_BASE
 (
PERIPH_BASE
 + 0x0E000)

	)

104 
	#USART2_BASE
 (
PERIPH_BASE
 + 0x0C800)

	)

105 
	#USART1_BASE
 (
PERIPH_BASE
 + 0x0C400)

	)

106 
	#USART0_BASE
 (
PERIPH_BASE
 + 0x0C000)

	)

107 
	#I2C1_BASE
 (
PERIPH_BASE
 + 0x0A400)

	)

108 
	#I2C0_BASE
 (
PERIPH_BASE
 + 0x0A000)

	)

109 
	#EBI_BASE
 (
PERIPH_BASE
 + 0x08000)

	)

110 
	#GPIO_BASE
 (
PERIPH_BASE
 + 0x06000)

	)

111 
	#DAC0_BASE
 (
PERIPH_BASE
 + 0x04000)

	)

112 
	#ADC0_BASE
 (
PERIPH_BASE
 + 0x02000)

	)

113 
	#ACMP1_BASE
 (
PERIPH_BASE
 + 0x01400)

	)

114 
	#ACMP0_BASE
 (
PERIPH_BASE
 + 0x01000)

	)

115 
	#VCMP_BASE
 (
PERIPH_BASE
 + 0x00000)

	)

	@libopencm3/include/libopencm3/efm32/lg/msc.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_MSC_H


21 
	#LIBOPENCM3_EFM32_LG_MSC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/msc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/nvic.h

6 #i‚de‡
LIBOPENCM3_EFM32LG_NVIC_H


7 
	#LIBOPENCM3_EFM32LG_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_DMA_IRQ
 0

	)

17 
	#NVIC_GPIO_EVEN_IRQ
 1

	)

18 
	#NVIC_TIMER0_IRQ
 2

	)

19 
	#NVIC_USART0_RX_IRQ
 3

	)

20 
	#NVIC_USART0_TX_IRQ
 4

	)

21 
	#NVIC_USB_IRQ
 5

	)

22 
	#NVIC_ACMP01_IRQ
 6

	)

23 
	#NVIC_ADC0_IRQ
 7

	)

24 
	#NVIC_DAC0_IRQ
 8

	)

25 
	#NVIC_I2C0_IRQ
 9

	)

26 
	#NVIC_I2C1_IRQ
 10

	)

27 
	#NVIC_GPIO_ODD_IRQ
 11

	)

28 
	#NVIC_TIMER1_IRQ
 12

	)

29 
	#NVIC_TIMER2_IRQ
 13

	)

30 
	#NVIC_TIMER3_IRQ
 14

	)

31 
	#NVIC_USART1_RX_IRQ
 15

	)

32 
	#NVIC_USART1_TX_IRQ
 16

	)

33 
	#NVIC_LESENSE_IRQ
 17

	)

34 
	#NVIC_USART2_RX_IRQ
 18

	)

35 
	#NVIC_USART2_TX_IRQ
 19

	)

36 
	#NVIC_UART0_RX_IRQ
 20

	)

37 
	#NVIC_UART0_TX_IRQ
 21

	)

38 
	#NVIC_UART1_RX_IRQ
 22

	)

39 
	#NVIC_UART1_TX_IRQ
 23

	)

40 
	#NVIC_LEUART0_IRQ
 24

	)

41 
	#NVIC_LEUART1_IRQ
 25

	)

42 
	#NVIC_LETIMER0_IRQ
 26

	)

43 
	#NVIC_PCNT0_IRQ
 27

	)

44 
	#NVIC_PCNT1_IRQ
 28

	)

45 
	#NVIC_PCNT2_IRQ
 29

	)

46 
	#NVIC_RTC_IRQ
 30

	)

47 
	#NVIC_BURTC_IRQ
 31

	)

48 
	#NVIC_CMU_IRQ
 32

	)

49 
	#NVIC_VCMP_IRQ
 33

	)

50 
	#NVIC_LCD_IRQ
 34

	)

51 
	#NVIC_MSC_IRQ
 35

	)

52 
	#NVIC_AES_IRQ
 36

	)

53 
	#NVIC_EBI_IRQ
 37

	)

54 
	#NVIC_EMU_IRQ
 38

	)

56 
	#NVIC_IRQ_COUNT
 39

	)

65 
BEGIN_DECLS


67 
dma_i§
();

68 
gpio_eví_i§
();

69 
timî0_i§
();

70 
ußπ0_rx_i§
();

71 
ußπ0_tx_i§
();

72 
usb_i§
();

73 
acmp01_i§
();

74 
adc0_i§
();

75 
dac0_i§
();

76 
i2c0_i§
();

77 
i2c1_i§
();

78 
gpio_odd_i§
();

79 
timî1_i§
();

80 
timî2_i§
();

81 
timî3_i§
();

82 
ußπ1_rx_i§
();

83 
ußπ1_tx_i§
();

84 
À£n£_i§
();

85 
ußπ2_rx_i§
();

86 
ußπ2_tx_i§
();

87 
u¨t0_rx_i§
();

88 
u¨t0_tx_i§
();

89 
u¨t1_rx_i§
();

90 
u¨t1_tx_i§
();

91 
Àu¨t0_i§
();

92 
Àu¨t1_i§
();

93 
Àtimî0_i§
();

94 
p˙t0_i§
();

95 
p˙t1_i§
();

96 
p˙t2_i§
();

97 
πc_i§
();

98 
buπc_i§
();

99 
cmu_i§
();

100 
vcmp_i§
();

101 
lcd_i§
();

102 
msc_i§
();

103 
´s_i§
();

104 
ebi_i§
();

105 
emu_i§
();

107 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/lg/opamp.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_OPAMP_H


21 
	#LIBOPENCM3_EFM32_LG_OPAMP_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/›amp_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/prs.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_PRS_H


21 
	#LIBOPENCM3_EFM32_LG_PRS_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/¥s_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/rmu.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_RMU_H


21 
	#LIBOPENCM3_EFM32_LG_RMU_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/rmu_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/rtc.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_RTC_H


21 
	#LIBOPENCM3_EFM32_LG_RTC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/πc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/timer.h

18 #i‚de‡
LIBOPENCM3_TIMER_H


19 
	#LIBOPENCM3_TIMER_H


	)

21 
	~<lib›ícm3/efm32/comm⁄/timî_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/uart.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_UART_H


21 
	#LIBOPENCM3_EFM32_LG_UART_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/u¨t_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/usart.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_USART_H


21 
	#LIBOPENCM3_EFM32_LG_USART_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/ußπ_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/usb.h

20 #i‚de‡
LIBOPENCM3_EFM32_LG_USB_H


21 
	#LIBOPENCM3_EFM32_LG_USB_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/usb_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/lg/wdog.h

18 #i‚de‡
LIBOPENCM3_WDOG_H


19 
	#LIBOPENCM3_WDOG_H


	)

21 
	~<lib›ícm3/efm32/comm⁄/wdog_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/memorymap.h

30 #i‡
deföed
(
EFM32TG
)

31 
	~<lib›ícm3/efm32/tg/mem‹ym≠.h
>

32 #ñi‡
deföed
(
EFM32LG
)

33 
	~<lib›ícm3/efm32/lg/mem‹ym≠.h
>

34 #ñi‡
deföed
(
EFM32HG
)

35 
	~<lib›ícm3/efm32/hg/mem‹ym≠.h
>

36 #ñi‡
deföed
(
EFM32WG
)

37 
	~<lib›ícm3/efm32/wg/mem‹ym≠.h
>

38 #ñi‡
deföed
(
EZR32WG
)

39 
	~<lib›ícm3/efm32/ezr32wg/mem‹ym≠.h
>

	@libopencm3/include/libopencm3/efm32/msc.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/msc.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/msc.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/msc.h
>

	@libopencm3/include/libopencm3/efm32/opamp.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/›amp.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/›amp.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/›amp.h
>

	@libopencm3/include/libopencm3/efm32/prs.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/¥s.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/¥s.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/¥s.h
>

	@libopencm3/include/libopencm3/efm32/rmu.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/rmu.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/rmu.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/rmu.h
>

	@libopencm3/include/libopencm3/efm32/rtc.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/πc.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/πc.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/πc.h
>

	@libopencm3/include/libopencm3/efm32/tg/doc-efm32tg.h

	@libopencm3/include/libopencm3/efm32/tg/memorymap.h

32 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

34 
	#CODE_BASE
 (0x00000000U)

	)

36 
	#SRAM_BASE
 (0x20000000U)

	)

37 
	#SRAM_BASE_BITBAND
 (0x22000000U)

	)

39 
	#PERIPH_BASE
 (0x40000000U)

	)

40 
	#PERIPH_BASE_BITBAND
 (0x42000000U)

	)

44 
	#FLASH_BASE
 (
CODE_BASE
 + 0x00000000)

	)

45 
	#USERDATA_BASE
 (
CODE_BASE
 + 0x0„00000)

	)

46 
	#LOCKBITS_BASE
 (
CODE_BASE
 + 0x0„04000)

	)

47 
	#CHIPCONFIG_BASE
 (
CODE_BASE
 + 0x0„08000)

	)

48 
	#CODESPACESRAM_BASE
 (
CODE_BASE
 + 0x10000000)

	)

52 
	#VCMP_BASE
 (
PERIPH_BASE
 + 0x00000000)

	)

53 
	#ACMP0_BASE
 (
PERIPH_BASE
 + 0x00001000)

	)

54 
	#ACMP1_BASE
 (
PERIPH_BASE
 + 0x00001400)

	)

55 
	#ADC_BASE
 (
PERIPH_BASE
 + 0x00002000)

	)

56 
	#DAC0_BASE
 (
PERIPH_BASE
 + 0x00004000)

	)

57 
	#GPIO_BASE
 (
PERIPH_BASE
 + 0x00006000Ë

	)

58 
	#I2C0_BASE
 (
PERIPH_BASE
 + 0x0000a000)

	)

59 
	#USART0_BASE
 (
PERIPH_BASE
 + 0x0000c000)

	)

60 
	#USART1_BASE
 (
PERIPH_BASE
 + 0x0000c400)

	)

61 
	#TIMER0_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

62 
	#TIMER1_BASE
 (
PERIPH_BASE
 + 0x00010400)

	)

63 
	#RTC_BASE
 (
PERIPH_BASE
 + 0x00080000)

	)

64 
	#LETIMER0_BASE
 (
PERIPH_BASE
 + 0x00082000)

	)

65 
	#LEUART0_BASE
 (
PERIPH_BASE
 + 0x00084000)

	)

66 
	#PCNT0_BASE
 (
PERIPH_BASE
 + 0x00086000)

	)

67 
	#WDOG_BASE
 (
PERIPH_BASE
 + 0x00088000)

	)

68 
	#LCD_BASE
 (
PERIPH_BASE
 + 0x0008a000)

	)

69 
	#LESENSE_BASE
 (
PERIPH_BASE
 + 0x0008c000)

	)

70 
	#MSC_BASE
 (
PERIPH_BASE
 + 0x000c0000)

	)

71 
	#DMA_BASE
 (
PERIPH_BASE
 + 0x000c2000)

	)

72 
	#EMU_BASE
 (
PERIPH_BASE
 + 0x000c6000)

	)

73 
	#CMU_BASE
 (
PERIPH_BASE
 + 0x000c8000Ë

	)

74 
	#RMU_BASE
 (
PERIPH_BASE
 + 0x000ˇ000)

	)

75 
	#PRS_BASE
 (
PERIPH_BASE
 + 0x000cc000)

	)

76 
	#AES_BASE
 (
PERIPH_BASE
 + 0x000e0000)

	)

	@libopencm3/include/libopencm3/efm32/tg/nvic.h

6 #i‚de‡
LIBOPENCM3_EFM32TG_NVIC_H


7 
	#LIBOPENCM3_EFM32TG_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_DMA_IRQ
 0

	)

17 
	#NVIC_GPIO_EVEN_IRQ
 1

	)

18 
	#NVIC_TIMER0_IRQ
 2

	)

19 
	#NVIC_USART0_RX_IRQ
 3

	)

20 
	#NVIC_USART0_TX_IRQ
 4

	)

21 
	#NVIC_ACMP01_IRQ
 5

	)

22 
	#NVIC_ADC0_IRQ
 6

	)

23 
	#NVIC_DAC0_IRQ
 7

	)

24 
	#NVIC_I2C0_IRQ
 8

	)

25 
	#NVIC_GPIO_ODD_IRQ
 9

	)

26 
	#NVIC_TIMER1_IRQ
 10

	)

27 
	#NVIC_USART1_RX_IRQ
 11

	)

28 
	#NVIC_USART1_TX_IRQ
 12

	)

29 
	#NVIC_LESENSE_IRQ
 13

	)

30 
	#NVIC_LEUART0_IRQ
 14

	)

31 
	#NVIC_LETIMER0_IRQ
 15

	)

32 
	#NVIC_PCNT0_IRQ
 16

	)

33 
	#NVIC_RTC_IRQ
 17

	)

34 
	#NVIC_CMU_IRQ
 18

	)

35 
	#NVIC_VCMP_IRQ
 19

	)

36 
	#NVIC_LCD_IRQ
 20

	)

37 
	#NVIC_MSC_IRQ
 21

	)

38 
	#NVIC_AES_IRQ
 22

	)

40 
	#NVIC_IRQ_COUNT
 23

	)

49 
BEGIN_DECLS


51 
dma_i§
();

52 
gpio_eví_i§
();

53 
timî0_i§
();

54 
ußπ0_rx_i§
();

55 
ußπ0_tx_i§
();

56 
acmp01_i§
();

57 
adc0_i§
();

58 
dac0_i§
();

59 
i2c0_i§
();

60 
gpio_odd_i§
();

61 
timî1_i§
();

62 
ußπ1_rx_i§
();

63 
ußπ1_tx_i§
();

64 
À£n£_i§
();

65 
Àu¨t0_i§
();

66 
Àtimî0_i§
();

67 
p˙t0_i§
();

68 
πc_i§
();

69 
cmu_i§
();

70 
vcmp_i§
();

71 
lcd_i§
();

72 
msc_i§
();

73 
´s_i§
();

75 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/timer.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/timî.h
>

22 #ñi‡
deföed
(
EFM32HG
)

23 
	~<lib›ícm3/efm32/hg/timî.h
>

24 #ñi‡
deföed
(
EFM32WG
)

25 
	~<lib›ícm3/efm32/wg/timî.h
>

26 #ñi‡
deföed
(
EZR32WG
)

27 
	~<lib›ícm3/efm32/ezr32wg/timî.h
>

	@libopencm3/include/libopencm3/efm32/uart.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/u¨t.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/u¨t.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/u¨t.h
>

	@libopencm3/include/libopencm3/efm32/usart.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/ußπ.h
>

22 #ñi‡
deföed
(
EFM32WG
)

23 
	~<lib›ícm3/efm32/wg/ußπ.h
>

24 #ñi‡
deföed
(
EZR32WG
)

25 
	~<lib›ícm3/efm32/ezr32wg/ußπ.h
>

	@libopencm3/include/libopencm3/efm32/usb.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/usb.h
>

22 #ñi‡
deföed
(
EFM32HG
)

23 
	~<lib›ícm3/efm32/hg/usb.h
>

24 #ñi‡
deföed
(
EFM32WG
)

25 
	~<lib›ícm3/efm32/wg/usb.h
>

26 #ñi‡
deföed
(
EZR32WG
)

27 
	~<lib›ícm3/efm32/ezr32wg/usb.h
>

	@libopencm3/include/libopencm3/efm32/wdog.h

20 #i‡
deföed
(
EFM32LG
)

21 
	~<lib›ícm3/efm32/lg/wdog.h
>

22 #ñi‡
deföed
(
EFM32HG
)

23 
	~<lib›ícm3/efm32/hg/wdog.h
>

24 #ñi‡
deföed
(
EFM32WG
)

25 
	~<lib›ícm3/efm32/wg/wdog.h
>

26 #ñi‡
deföed
(
EZR32WG
)

27 
	~<lib›ícm3/efm32/ezr32wg/wdog.h
>

	@libopencm3/include/libopencm3/efm32/wg/acmp.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_ACMP_H


21 
	#LIBOPENCM3_EFM32_WG_ACMP_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/acmp_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/adc.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_ADC_H


21 
	#LIBOPENCM3_EFM32_WG_ADC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/adc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/burtc.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_BURTC_H


21 
	#LIBOPENCM3_EFM32_WG_BURTC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/buπc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/cmu.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_CMU_H


21 
	#LIBOPENCM3_EFM32_WG_CMU_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/cmu_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/dac.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_DAC_H


21 
	#LIBOPENCM3_EFM32_WG_DAC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/dac_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/dma.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_DMA_H


21 
	#LIBOPENCM3_EFM32_WG_DMA_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/dma_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/doc-efm32wg.h

	@libopencm3/include/libopencm3/efm32/wg/emu.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_EMU_H


21 
	#LIBOPENCM3_EFM32_WG_EMU_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/emu_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/gpio.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_GPIO_H


21 
	#LIBOPENCM3_EFM32_WG_GPIO_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/gpio_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/i2c.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_I2C_H


21 
	#LIBOPENCM3_EFM32_WG_I2C_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/i2c_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/letimer.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_LETIMER_H


21 
	#LIBOPENCM3_EFM32_WG_LETIMER_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/Àtimî_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/memorymap.h

20 #i‚de‡
LIBOPENCM3_EFM32_MEMORYMAP_H


21 
	#LIBOPENCM3_EFM32_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

25 
	#PERIPH_BASE
 (0x40000000U)

	)

28 
	#DI_BASE
 (0x0FE08000U)

	)

31 
	#DI_CMU_LFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x020)

	)

32 
	#DI_CMU_HFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x028)

	)

33 
	#DI_CMU_AUXHFRCOCTRL
 
	`MMIO32
(
DI_BASE
 + 0x030)

	)

34 
	#DI_ADC0_CAL
 
	`MMIO32
(
DI_BASE
 + 0x040)

	)

35 
	#DI_ADC0_BIASPROG
 
	`MMIO32
(
DI_BASE
 + 0x048)

	)

36 
	#DI_DAC0_CAL
 
	`MMIO32
(
DI_BASE
 + 0x050)

	)

37 
	#DI_DAC0_BIASPROG
 
	`MMIO32
(
DI_BASE
 + 0x058)

	)

38 
	#DI_ACMP0_CTRL
 
	`MMIO32
(
DI_BASE
 + 0x060)

	)

39 
	#DI_ACMP1_CTRL
 
	`MMIO32
(
DI_BASE
 + 0x068)

	)

40 
	#DI_CMU_LCDCTRL
 
	`MMIO32
(
DI_BASE
 + 0x078)

	)

41 
	#DI_DAC0_OPACTRL
 
	`MMIO32
(
DI_BASE
 + 0x0A0)

	)

42 
	#DI_DAC0_OPAOFFSET
 
	`MMIO32
(
DI_BASE
 + 0x0A8)

	)

43 
	#DI_EMU_BUINACT
 
	`MMIO32
(
DI_BASE
 + 0x0B0)

	)

44 
	#DI_EMU_BUACT
 
	`MMIO32
(
DI_BASE
 + 0x0B8)

	)

45 
	#DI_EMU_BUBODBUVINCAL
 
	`MMIO32
(
DI_BASE
 + 0x0C0)

	)

46 
	#DI_EMU_BUBODUNREGCAL
 
	`MMIO32
(
DI_BASE
 + 0x0C8)

	)

47 
	#DI_DI_CRC
 
	`MMIO16
(
DI_BASE
 + 0x1B0)

	)

48 
	#DI_CAL_TEMP_0
 
	`MMIO8
(
DI_BASE
 + 0x1B2)

	)

49 
	#DI_ADC0_CAL_1V25
 
	`MMIO16
(
DI_BASE
 + 0x1B4)

	)

50 
	#DI_ADC0_CAL_2V5
 
	`MMIO16
(
DI_BASE
 + 0x1B6)

	)

51 
	#DI_ADC0_CAL_VDD
 
	`MMIO16
(
DI_BASE
 + 0x1B8)

	)

52 
	#DI_ADC0_CAL_5VDIFF
 
	`MMIO16
(
DI_BASE
 + 0x1BA)

	)

53 
	#DI_ADC0_CAL_2XVDD
 
	`MMIO16
(
DI_BASE
 + 0x1BC)

	)

54 
	#DI_ADC0_TEMP_0_READ_1V25
 
	`MMIO16
(
DI_BASE
 + 0x1BE)

	)

55 
	#DI_DAC0_CAL_1V25
 
	`MMIO32
(
DI_BASE
 + 0x1C8)

	)

56 
	#DI_DAC0_CAL_2V5
 
	`MMIO32
(
DI_BASE
 + 0x1CC)

	)

57 
	#DI_DAC0_CAL_VDD
 
	`MMIO32
(
DI_BASE
 + 0x1D0)

	)

58 
	#DI_AUXHFRCO_CALIB_BAND_1
 
	`MMIO8
(
DI_BASE
 + 0x1D4)

	)

59 
	#DI_AUXHFRCO_CALIB_BAND_7
 
	`MMIO8
(
DI_BASE
 + 0x1D5)

	)

60 
	#DI_AUXHFRCO_CALIB_BAND_11
 
	`MMIO8
(
DI_BASE
 + 0x1D6)

	)

61 
	#DI_AUXHFRCO_CALIB_BAND_14
 
	`MMIO8
(
DI_BASE
 + 0x1D7)

	)

62 
	#DI_AUXHFRCO_CALIB_BAND_21
 
	`MMIO8
(
DI_BASE
 + 0x1D8)

	)

63 
	#DI_AUXHFRCO_CALIB_BAND_28
 
	`MMIO8
(
DI_BASE
 + 0x1D9)

	)

64 
	#DI_HFRCO_CALIB_BAND_1
 
	`MMIO8
(
DI_BASE
 + 0x1DC)

	)

65 
	#DI_HFRCO_CALIB_BAND_7
 
	`MMIO8
(
DI_BASE
 + 0x1DD)

	)

66 
	#DI_HFRCO_CALIB_BAND_11
 
	`MMIO8
(
DI_BASE
 + 0x1DE)

	)

67 
	#DI_HFRCO_CALIB_BAND_14
 
	`MMIO8
(
DI_BASE
 + 0x1DF)

	)

68 
	#DI_HFRCO_CALIB_BAND_21
 
	`MMIO8
(
DI_BASE
 + 0x1E0)

	)

69 
	#DI_HFRCO_CALIB_BAND_28
 
	`MMIO8
(
DI_BASE
 + 0x1E1)

	)

70 
	#DI_MEM_INFO_PAGE_SIZE
 
	`MMIO8
(
DI_BASE
 + 0x1E7)

	)

71 
	#DI_UNIQUE_0
 
	`MMIO32
(
DI_BASE
 + 0x1F0)

	)

72 
	#DI_UNIQUE_1
 
	`MMIO32
(
DI_BASE
 + 0x1F4)

	)

73 
	#DI_MEM_INFO_FLASH
 
	`MMIO16
(
DI_BASE
 + 0x1F8)

	)

74 
	#DI_MEM_INFO_RAM
 
	`MMIO16
(
DI_BASE
 + 0x1FA)

	)

75 
	#DI_PART_NUMBER
 
	`MMIO16
(
DI_BASE
 + 0x1FC)

	)

76 
	#DI_PART_FAMILY
 
	`MMIO8
(
DI_BASE
 + 0x1FE)

	)

77 
	#DI_PROD_REV
 
	`MMIO8
(
DI_BASE
 + 0x1FF)

	)

79 
	#AES_BASE
 (
PERIPH_BASE
 + 0xE0000)

	)

80 
	#PRS_BASE
 (
PERIPH_BASE
 + 0xCC000)

	)

81 
	#RMU_BASE
 (
PERIPH_BASE
 + 0xCA000)

	)

82 
	#CMU_BASE
 (
PERIPH_BASE
 + 0xC8000)

	)

83 
	#EMU_BASE
 (
PERIPH_BASE
 + 0xC6000)

	)

84 
	#USB_BASE
 (
PERIPH_BASE
 + 0xC4000)

	)

85 
	#DMA_BASE
 (
PERIPH_BASE
 + 0xC2000)

	)

86 
	#MSC_BASE
 (
PERIPH_BASE
 + 0xC0000)

	)

87 
	#LESENSE_BASE
 (
PERIPH_BASE
 + 0x8C000)

	)

88 
	#LCD_BASE
 (
PERIPH_BASE
 + 0x8A000)

	)

89 
	#WDOG_BASE
 (
PERIPH_BASE
 + 0x88000)

	)

90 
	#PCNT2_BASE
 (
PERIPH_BASE
 + 0x86800)

	)

91 
	#PCNT1_BASE
 (
PERIPH_BASE
 + 0x86400)

	)

92 
	#PCNT0_BASE
 (
PERIPH_BASE
 + 0x86000)

	)

93 
	#LEUART1_BASE
 (
PERIPH_BASE
 + 0x84400)

	)

94 
	#LEUART0_BASE
 (
PERIPH_BASE
 + 0x84000)

	)

95 
	#LETIMER0_BASE
 (
PERIPH_BASE
 + 0x82000)

	)

96 
	#BURTC_BASE
 (
PERIPH_BASE
 + 0x81000)

	)

97 
	#RTC_BASE
 (
PERIPH_BASE
 + 0x80000)

	)

98 
	#TIMER3_BASE
 (
PERIPH_BASE
 + 0x10C00)

	)

99 
	#TIMER2_BASE
 (
PERIPH_BASE
 + 0x10800)

	)

100 
	#TIMER1_BASE
 (
PERIPH_BASE
 + 0x10400)

	)

101 
	#TIMER0_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

102 
	#UART1_BASE
 (
PERIPH_BASE
 + 0x0E400)

	)

103 
	#UART0_BASE
 (
PERIPH_BASE
 + 0x0E000)

	)

104 
	#USART2_BASE
 (
PERIPH_BASE
 + 0x0C800)

	)

105 
	#USART1_BASE
 (
PERIPH_BASE
 + 0x0C400)

	)

106 
	#USART0_BASE
 (
PERIPH_BASE
 + 0x0C000)

	)

107 
	#I2C1_BASE
 (
PERIPH_BASE
 + 0x0A400)

	)

108 
	#I2C0_BASE
 (
PERIPH_BASE
 + 0x0A000)

	)

109 
	#EBI_BASE
 (
PERIPH_BASE
 + 0x08000)

	)

110 
	#GPIO_BASE
 (
PERIPH_BASE
 + 0x06000)

	)

111 
	#DAC0_BASE
 (
PERIPH_BASE
 + 0x04000)

	)

112 
	#ADC0_BASE
 (
PERIPH_BASE
 + 0x02000)

	)

113 
	#ACMP1_BASE
 (
PERIPH_BASE
 + 0x01400)

	)

114 
	#ACMP0_BASE
 (
PERIPH_BASE
 + 0x01000)

	)

115 
	#VCMP_BASE
 (
PERIPH_BASE
 + 0x00000)

	)

	@libopencm3/include/libopencm3/efm32/wg/msc.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_MSC_H


21 
	#LIBOPENCM3_EFM32_WG_MSC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/msc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/nvic.h

6 #i‚de‡
LIBOPENCM3_EFM32WG_NVIC_H


7 
	#LIBOPENCM3_EFM32WG_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_DMA_IRQ
 0

	)

17 
	#NVIC_GPIO_EVEN_IRQ
 1

	)

18 
	#NVIC_TIMER0_IRQ
 2

	)

19 
	#NVIC_USART0_RX_IRQ
 3

	)

20 
	#NVIC_USART0_TX_IRQ
 4

	)

21 
	#NVIC_USB_IRQ
 5

	)

22 
	#NVIC_ACMP01_IRQ
 6

	)

23 
	#NVIC_ADC0_IRQ
 7

	)

24 
	#NVIC_DAC0_IRQ
 8

	)

25 
	#NVIC_I2C0_IRQ
 9

	)

26 
	#NVIC_I2C1_IRQ
 10

	)

27 
	#NVIC_GPIO_ODD_IRQ
 11

	)

28 
	#NVIC_TIMER1_IRQ
 12

	)

29 
	#NVIC_TIMER2_IRQ
 13

	)

30 
	#NVIC_TIMER3_IRQ
 14

	)

31 
	#NVIC_USART1_RX_IRQ
 15

	)

32 
	#NVIC_USART1_TX_IRQ
 16

	)

33 
	#NVIC_LESENSE_IRQ
 17

	)

34 
	#NVIC_USART2_RX_IRQ
 18

	)

35 
	#NVIC_USART2_TX_IRQ
 19

	)

36 
	#NVIC_UART0_RX_IRQ
 20

	)

37 
	#NVIC_UART0_TX_IRQ
 21

	)

38 
	#NVIC_UART1_RX_IRQ
 22

	)

39 
	#NVIC_UART1_TX_IRQ
 23

	)

40 
	#NVIC_LEUART0_IRQ
 24

	)

41 
	#NVIC_LEUART1_IRQ
 25

	)

42 
	#NVIC_LETIMER0_IRQ
 26

	)

43 
	#NVIC_PCNT0_IRQ
 27

	)

44 
	#NVIC_PCNT1_IRQ
 28

	)

45 
	#NVIC_PCNT2_IRQ
 29

	)

46 
	#NVIC_RTC_IRQ
 30

	)

47 
	#NVIC_BURTC_IRQ
 31

	)

48 
	#NVIC_CMU_IRQ
 32

	)

49 
	#NVIC_VCMP_IRQ
 33

	)

50 
	#NVIC_LCD_IRQ
 34

	)

51 
	#NVIC_MSC_IRQ
 35

	)

52 
	#NVIC_AES_IRQ
 36

	)

53 
	#NVIC_EBI_IRQ
 37

	)

54 
	#NVIC_EMU_IRQ
 38

	)

56 
	#NVIC_IRQ_COUNT
 39

	)

65 
BEGIN_DECLS


67 
dma_i§
();

68 
gpio_eví_i§
();

69 
timî0_i§
();

70 
ußπ0_rx_i§
();

71 
ußπ0_tx_i§
();

72 
usb_i§
();

73 
acmp01_i§
();

74 
adc0_i§
();

75 
dac0_i§
();

76 
i2c0_i§
();

77 
i2c1_i§
();

78 
gpio_odd_i§
();

79 
timî1_i§
();

80 
timî2_i§
();

81 
timî3_i§
();

82 
ußπ1_rx_i§
();

83 
ußπ1_tx_i§
();

84 
À£n£_i§
();

85 
ußπ2_rx_i§
();

86 
ußπ2_tx_i§
();

87 
u¨t0_rx_i§
();

88 
u¨t0_tx_i§
();

89 
u¨t1_rx_i§
();

90 
u¨t1_tx_i§
();

91 
Àu¨t0_i§
();

92 
Àu¨t1_i§
();

93 
Àtimî0_i§
();

94 
p˙t0_i§
();

95 
p˙t1_i§
();

96 
p˙t2_i§
();

97 
πc_i§
();

98 
buπc_i§
();

99 
cmu_i§
();

100 
vcmp_i§
();

101 
lcd_i§
();

102 
msc_i§
();

103 
´s_i§
();

104 
ebi_i§
();

105 
emu_i§
();

107 
	gEND_DECLS


	@libopencm3/include/libopencm3/efm32/wg/opamp.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_OPAMP_H


21 
	#LIBOPENCM3_EFM32_WG_OPAMP_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/›amp_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/prs.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_PRS_H


21 
	#LIBOPENCM3_EFM32_WG_PRS_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/¥s_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/rmu.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_RMU_H


21 
	#LIBOPENCM3_EFM32_WG_RMU_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/rmu_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/rtc.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_RTC_H


21 
	#LIBOPENCM3_EFM32_WG_RTC_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/πc_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/timer.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_TIMER_H


21 
	#LIBOPENCM3_EFM32_WG_TIMER_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/timî_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/uart.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_UART_H


21 
	#LIBOPENCM3_EFM32_WG_UART_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/u¨t_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/usart.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_USART_H


21 
	#LIBOPENCM3_EFM32_WG_USART_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/ußπ_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/usb.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_USB_H


21 
	#LIBOPENCM3_EFM32_WG_USB_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/usb_comm⁄.h
>

	@libopencm3/include/libopencm3/efm32/wg/wdog.h

20 #i‚de‡
LIBOPENCM3_EFM32_WG_WDOG_H


21 
	#LIBOPENCM3_EFM32_WG_WDOG_H


	)

23 
	~<lib›ícm3/efm32/comm⁄/wdog_comm⁄.h
>

	@libopencm3/include/libopencm3/ethernet/mac.h

36 #i‡
deföed
(
STM32F1
)

37 
	~<lib›ícm3/ëhî√t/mac_°m32fxx7.h
>

38 #ñi‡
deföed
(
STM32F4
)

39 
	~<lib›ícm3/ëhî√t/mac_°m32fxx7.h
>

	@libopencm3/include/libopencm3/ethernet/mac_stm32fxx7.h

35 #i‚de‡
LIBOPENCM3_ETHERNET_H


36 
	#LIBOPENCM3_ETHERNET_H


	)

38 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

39 
	~<lib›ícm3/cm3/comm⁄.h
>

51 
	#ETH_MACCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x00)

	)

52 
	#ETH_MACFFR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x04)

	)

53 
	#ETH_MACHTHR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x08)

	)

54 
	#ETH_MACHTLR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x0C)

	)

55 
	#ETH_MACMIIAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x10)

	)

56 
	#ETH_MACMIIDR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x14)

	)

57 
	#ETH_MACFCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x18)

	)

58 
	#ETH_MACVLANTR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1C)

	)

59 
	#ETH_MACRWUFFR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x28)

	)

60 
	#ETH_MACPMTCSR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x2C)

	)

62 
	#ETH_MACDBGR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x34)

	)

63 
	#ETH_MACSR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x38)

	)

64 
	#ETH_MACIMR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x3C)

	)

67 
	#ETH_MACAHR
(
i
Ë
	`MMIO32
(
ETHERNET_BASE
 + 0x40+(i)*8)

	)

69 
	#ETH_MACALR
(
i
Ë
	`MMIO32
(
ETHERNET_BASE
 + 0x44+(i)*8)

	)

72 
	#ETH_MMCCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x100)

	)

73 
	#ETH_MMCRIR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x104)

	)

74 
	#ETH_MMCTIR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x108)

	)

75 
	#ETH_MMCRIMR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x10C)

	)

76 
	#ETH_MMCTIMR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x110)

	)

77 
	#ETH_MMCTGFSCCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x14C)

	)

78 
	#ETH_MMCTGFMSCCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x150)

	)

79 
	#ETH_MMCTGFCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x168)

	)

80 
	#ETH_MMCRFCECR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x194)

	)

81 
	#ETH_MMCRFAECR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x198)

	)

82 
	#ETH_MMCRGUFCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1C4)

	)

85 
	#ETH_PTPTSCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x700)

	)

86 
	#ETH_PTPSSIR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x704)

	)

87 
	#ETH_PTPTSHR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x708)

	)

88 
	#ETH_PTPTSLR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x70C)

	)

89 
	#ETH_PTPTSHUR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x710)

	)

90 
	#ETH_PTPTSLUR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x714)

	)

91 
	#ETH_PTPTSAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x718)

	)

92 
	#ETH_PTPTTHR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x71C)

	)

93 
	#ETH_PTPTTLR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x720)

	)

95 
	#ETH_PTPTSSR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x728)

	)

98 
	#ETH_DMABMR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1000)

	)

99 
	#ETH_DMATPDR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1004)

	)

100 
	#ETH_DMARPDR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1008)

	)

101 
	#ETH_DMARDLAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x100C)

	)

102 
	#ETH_DMATDLAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1010)

	)

103 
	#ETH_DMASR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1014)

	)

104 
	#ETH_DMAOMR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1018)

	)

105 
	#ETH_DMAIER
 
	`MMIO32
(
ETHERNET_BASE
 + 0x101C)

	)

106 
	#ETH_DMAMFBOCR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1020)

	)

107 
	#ETH_DMACHTDR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1048)

	)

108 
	#ETH_DMACHRDR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x104C)

	)

109 
	#ETH_DMACHTBAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1050)

	)

110 
	#ETH_DMACHRBAR
 
	`MMIO32
(
ETHERNET_BASE
 + 0x1054)

	)

113 
	#ETH_DES
(
n
, 
ba£
Ë
	`MMIO32
((ba£Ë+ (n)*4)

	)

114 
	#ETH_DES0
(
ba£
Ë
	`ETH_DES
(0, ba£)

	)

115 
	#ETH_DES1
(
ba£
Ë
	`ETH_DES
(1, ba£)

	)

116 
	#ETH_DES2
(
ba£
Ë
	`ETH_DES
(2, ba£)

	)

117 
	#ETH_DES3
(
ba£
Ë
	`ETH_DES
(3, ba£)

	)

120 
	#ETH_DES4
(
ba£
Ë
	`ETH_DES
(4, ba£)

	)

121 
	#ETH_DES5
(
ba£
Ë
	`ETH_DES
(5, ba£)

	)

122 
	#ETH_DES6
(
ba£
Ë
	`ETH_DES
(6, ba£)

	)

123 
	#ETH_DES7
(
ba£
Ë
	`ETH_DES
(7, ba£)

	)

132 
	#ETH_MACCR_RE
 (1<<2)

	)

133 
	#ETH_MACCR_TE
 (1<<3)

	)

134 
	#ETH_MACCR_DC
 (1<<4)

	)

136 
	#ETH_MACCR_BL_SHIFT
 5

	)

137 
	#ETH_MACCR_BL
 (3 << 
ETH_MACCR_BL_SHIFT
)

	)

138 
	#ETH_MACCR_BL_MIN10
 (0 << 
ETH_MACCR_BL_SHIFT
)

	)

139 
	#ETH_MACCR_BL_MIN8
 (1 << 
ETH_MACCR_BL_SHIFT
)

	)

140 
	#ETH_MACCR_BL_MIN4
 (2 << 
ETH_MACCR_BL_SHIFT
)

	)

141 
	#ETH_MACCR_BL_MIN1
 (3 << 
ETH_MACCR_BL_SHIFT
)

	)

143 
	#ETH_MACCR_APCS
 (1<<7)

	)

144 
	#ETH_MACCR_RD
 (1<<9)

	)

145 
	#ETH_MACCR_IPCO
 (1<<10)

	)

146 
	#ETH_MACCR_DM
 (1<<11)

	)

147 
	#ETH_MACCR_LM
 (1<<12)

	)

148 
	#ETH_MACCR_ROD
 (1<<13)

	)

149 
	#ETH_MACCR_FES
 (1<<14)

	)

150 
	#ETH_MACCR_CSD
 (1<<16)

	)

152 
	#ETH_MACCR_IFG_SHIFT
 17

	)

153 
	#ETH_MACCR_IFG
 (7<<
ETH_MACCR_IFG_SHIFT
)

	)

155 
	#ETH_MACCR_JD
 (1<<22)

	)

156 
	#ETH_MACCR_WD
 (1<<23)

	)

157 
	#ETH_MACCR_CSTF
 (1<<25)

	)

161 
	#ETH_MACFFR_PM
 (1<<0)

	)

162 
	#ETH_MACFFR_HU
 (1<<1)

	)

163 
	#ETH_MACFFR_HM
 (1<<2)

	)

164 
	#ETH_MACFFR_DAIF
 (1<<3)

	)

165 
	#ETH_MACFFR_PAM
 (1<<4)

	)

166 
	#ETH_MACFFR_BFD
 (1<<5)

	)

168 
	#ETH_MACFFR_PCF_SHIFT
 6

	)

169 
	#ETH_MACFFR_PCF
 (3<<
ETH_MACFFR_PCF_SHIFT
)

	)

170 
	#ETH_MACFFR_PCF_DISABLE
 (0<<
ETH_MACFFR_PCF_SHIFT
)

	)

171 
	#ETH_MACFFR_PCF_NOPAUSE
 (1<<
ETH_MACFFR_PCF_SHIFT
)

	)

172 
	#ETH_MACFFR_PCF_ALL
 (2<<
ETH_MACFFR_PCF_SHIFT
)

	)

173 
	#ETH_MACFFR_PCF_PASS
 (3<<
ETH_MACFFR_PCF_SHIFT
)

	)

175 
	#ETH_MACFFR_SAIF
 (1<<8)

	)

176 
	#ETH_MACFFR_SAF
 (1<<9)

	)

177 
	#ETH_MACFFR_HPF
 (1<<10)

	)

178 
	#ETH_MACFFR_RA
 (1<<31)

	)

183 
	#ETH_MACMIIAR_MB
 (1<<0)

	)

184 
	#ETH_MACMIIAR_MW
 (1<<1)

	)

186 
	#ETH_MACMIIAR_CR_SHIFT
 2

	)

187 
	#ETH_MACMIIAR_CR
 (7<<
ETH_MACMIIAR_CR_SHIFT
)

	)

189 
	#ETH_MACMIIAR_CR_HCLK_DIV_42
 (0<<
ETH_MACMIIAR_CR_SHIFT
)

	)

191 
	#ETH_MACMIIAR_CR_HCLK_DIV_62
 (1<<
ETH_MACMIIAR_CR_SHIFT
)

	)

193 
	#ETH_MACMIIAR_CR_HCLK_DIV_16
 (2<<
ETH_MACMIIAR_CR_SHIFT
)

	)

195 
	#ETH_MACMIIAR_CR_HCLK_DIV_26
 (3<<
ETH_MACMIIAR_CR_SHIFT
)

	)

197 
	#ETH_MACMIIAR_CR_HCLK_DIV_102
 (4<<
ETH_MACMIIAR_CR_SHIFT
)

	)

199 
	#ETH_MACMIIAR_MR_SHIFT
 6

	)

200 
	#ETH_MACMIIAR_MR
 (0x1F << 
ETH_MACMIIAR_MR_SHIFT
)

	)

202 
	#ETH_MACMIIAR_PA_SHIFT
 11

	)

203 
	#ETH_MACMIIAR_PA
 (0x1F << 
ETH_MACMIIAR_MR_SHIFT
)

	)

208 
	#ETH_MACMIIDR_MD
 0xFFFF

	)

212 
	#ETH_MACFCR_FCB
 (1<<0)

	)

213 
	#ETH_MACFCR_BPA
 (1<<0)

	)

214 
	#ETH_MACFCR_TFCE
 (1<<1)

	)

215 
	#ETH_MACFCR_RFCE
 (1<<2)

	)

216 
	#ETH_MACFCR_UPFD
 (1<<3)

	)

218 
	#ETH_MACFCR_PLT_SHIFT
 4

	)

219 
	#ETH_MACFCR_PLT
 (0x03 << 
ETH_MACFCR_PLT_SHIFT
)

	)

220 
	#ETH_MACFCR_PLT_4
 (0 << 
ETH_MACFCR_PLT_SHIFT
)

	)

221 
	#ETH_MACFCR_PLT_28
 (1 << 
ETH_MACFCR_PLT_SHIFT
)

	)

222 
	#ETH_MACFCR_PLT_144
 (2 << 
ETH_MACFCR_PLT_SHIFT
)

	)

223 
	#ETH_MACFCR_PLT_256
 (3 << 
ETH_MACFCR_PLT_SHIFT
)

	)

225 
	#ETH_MACFCR_ZQPD
 (1<<7)

	)

227 
	#ETH_MACFCR_PT_SHIFT
 16

	)

228 
	#ETH_MACFCR_PT
 (0xFFFF << 
ETH_MACFCR_PT
)

	)

232 
	#ETH_MACVLANTR_VLANTI_SHIFT
 0

	)

233 
	#ETH_MACVLANTR_VLANTI
 (0xFFFF << 
ETH_MACVLANTR_VLANTI_SHIFT
)

	)

234 
	#ETH_MACVLANTR_VLANTC
 (1<<16)

	)

239 
	#ETH_MACPMTCSR_PD
 (1<<0)

	)

240 
	#ETH_MACPMTCSR_MPE
 (1<<1)

	)

241 
	#ETH_MACPMTCSR_WFE
 (1<<2)

	)

242 
	#ETH_MACPMTCSR_MPR
 (1<<5)

	)

243 
	#ETH_MACPMTCSR_WFR
 (1<<6)

	)

244 
	#ETH_MACPMTCSR_GU
 (1<<9)

	)

245 
	#ETH_MACPMTCSR_WFFRPR
 (1<<31)

	)

250 
	#ETH_MACDBGR_MMRPEA
 (1<<0)

	)

251 
	#ETH_MACDBGR_MSFRWCS
 (3<<1)

	)

252 
	#ETH_MACDBGR_RFWRA
 (1<<4)

	)

254 
	#ETH_MACDBGR_RFRCS_SHIFT
 5

	)

255 
	#ETH_MACDBGR_RFRCS
 (3<<
ETH_MACDBGR_RFRCS_SHIFT
)

	)

256 
	#ETH_MACDBGR_RFRCS_IDLE
 (0<<
ETH_MACDBGR_RFRCS_SHIFT
)

	)

257 
	#ETH_MACDBGR_RFRCS_RDATA
 (1<<
ETH_MACDBGR_RFRCS_SHIFT
)

	)

258 
	#ETH_MACDBGR_RFRCS_RSTAT
 (2<<
ETH_MACDBGR_RFRCS_SHIFT
)

	)

259 
	#ETH_MACDBGR_RFRCS_FLUSH
 (3<<
ETH_MACDBGR_RFRCS_SHIFT
)

	)

261 
	#ETH_MACDBGR_RFFL_SHIFT
 8

	)

262 
	#ETH_MACDBGR_RFFL
 (3<<
ETH_MACDBGR_RFFL_SHIFT
)

	)

263 
	#ETH_MACDBGR_RFFL_EMPTY
 (0<<
ETH_MACDBGR_RFFL_SHIFT
)

	)

264 
	#ETH_MACDBGR_RFFL_BELOW
 (1<<
ETH_MACDBGR_RFFL_SHIFT
)

	)

265 
	#ETH_MACDBGR_RFFL_ABOVE
 (2<<
ETH_MACDBGR_RFFL_SHIFT
)

	)

266 
	#ETH_MACDBGR_RFFL_FULL
 (3<<
ETH_MACDBGR_RFFL_SHIFT
)

	)

268 
	#ETH_MACDBGR_MMTEA
 (1<<16)

	)

270 
	#ETH_MACDBGR_MTFCS_SHIFT
 17

	)

271 
	#ETH_MACDBGR_MTFCS
 (3 << 
ETH_MACDBGR_MTFCS_SHIFT
)

	)

272 
	#ETH_MACDBGR_MTFCS_IDLE
 (0 << 
ETH_MACDBGR_MTFCS_SHIFT
)

	)

273 
	#ETH_MACDBGR_MTFCS_WAIT
 (1 << 
ETH_MACDBGR_MTFCS_SHIFT
)

	)

274 
	#ETH_MACDBGR_MTFCS_PAUSE
 (2 << 
ETH_MACDBGR_MTFCS_SHIFT
)

	)

275 
	#ETH_MACDBGR_MTFCS_TRANSFER
 (3 << 
ETH_MACDBGR_MTFCS_SHIFT
)

	)

277 
	#ETH_MACDBGR_MTP
 (1<<19)

	)

279 
	#ETH_MACDBGR_TFRS_SHIFT
 20

	)

280 
	#ETH_MACDBGR_TFRS
 (3<<
ETH_MACDBGR_TFRS_SHIFT
)

	)

281 
	#ETH_MACDBGR_TFRS_IDLE
 (0<<
ETH_MACDBGR_TFRS_SHIFT
)

	)

282 
	#ETH_MACDBGR_TFRS_READ
 (1<<
ETH_MACDBGR_TFRS_SHIFT
)

	)

283 
	#ETH_MACDBGR_TFRS_WAIT
 (2<<
ETH_MACDBGR_TFRS_SHIFT
)

	)

284 
	#ETH_MACDBGR_TFRS_FLUSH
 (3<<
ETH_MACDBGR_TFRS_SHIFT
)

	)

286 
	#ETH_MACDBGR_TFWA
 (1<<22)

	)

287 
	#ETH_MACDBGR_TFNE
 (1<<24)

	)

288 
	#ETH_MACDBGR_TFF
 (1<<25)

	)

294 
	#ETH_MACSR_PMTS
 (1<<3)

	)

295 
	#ETH_MACSR_MMCS
 (1<<4)

	)

296 
	#ETH_MACSR_MMCRS
 (1<<5)

	)

297 
	#ETH_MACSR_MMCTS
 (1<<6)

	)

298 
	#ETH_MACSR_TSTS
 (1<<9)

	)

304 
	#ETH_MACIMR_PMTIM
 (1<<3)

	)

305 
	#ETH_MACIMR_TSTIM
 (1<<9)

	)

310 
	#ETH_MACA0HR_MACA0H
 (0xFFFF<<0)

	)

311 
	#ETH_MACA0HR_MO
 (1<<31)

	)

316 
	#ETH_MACAHR_MACAH
 (0xFFFF<<0)

	)

317 
	#ETH_MACAHR_MBC_ALL
 (63<<24)

	)

318 
	#ETH_MACAHR_MBC_0
 (1<<24)

	)

319 
	#ETH_MACAHR_MBC_1
 (1<<25)

	)

320 
	#ETH_MACAHR_MBC_2
 (1<<26)

	)

321 
	#ETH_MACAHR_MBC_3
 (1<<27)

	)

322 
	#ETH_MACAHR_MBC_4
 (1<<28)

	)

323 
	#ETH_MACAHR_MBC_5
 (1<<29)

	)

324 
	#ETH_MACAHR_SA
 (1<<30)

	)

325 
	#ETH_MACAHR_AE
 (1<<31)

	)

330 
	#ETH_MMCCR_CR
 (1<<0)

	)

331 
	#ETH_MMCCR_CSR
 (1<<1)

	)

332 
	#ETH_MMCCR_ROR
 (1<<2)

	)

333 
	#ETH_MMCCR_MCF
 (1<<3)

	)

334 
	#ETH_MMCCR_MCP
 (1<<4)

	)

335 
	#ETH_MMCCR_MCFHP
 (1<<5)

	)

340 
	#ETH_MMCRIR_RFCES
 (1<<5)

	)

341 
	#ETH_MMCRIR_RFAES
 (1<<6)

	)

342 
	#ETH_MMCRIR_RGUFS
 (1<<17)

	)

347 
	#ETH_MMCTIR_TGFSCS
 (1<<14)

	)

348 
	#ETH_MMCTIR_TGFMSCS
 (1<<15)

	)

349 
	#ETH_MMCTIR_TGFS
 (1<<21)

	)

354 
	#ETH_MMCRIMR_RFCEM
 (1<<5)

	)

355 
	#ETH_MMCRIMR_RFAEM
 (1<<6)

	)

356 
	#ETH_MMCRIMR_RGUFM
 (1<<17)

	)

361 
	#ETH_MMCTIMR_TGFSCS
 (1<<14)

	)

362 
	#ETH_MMCTIMR_TGFMSCS
 (1<<15)

	)

363 
	#ETH_MMCTIMR_TGFS
 (1<<21)

	)

368 
	#ETH_PTPTSCR_TSE
 (1<<0)

	)

369 
	#ETH_PTPTSCR_TSFCU
 (1<<1)

	)

370 
	#ETH_PTPTSCR_TSSTI
 (1<<2)

	)

371 
	#ETH_PTPTSCR_TSSTU
 (1<<3)

	)

372 
	#ETH_PTPTSCR_TSITE
 (1<<4)

	)

373 
	#ETH_PTPTSCR_TTSARU
 (1<<5)

	)

374 
	#ETH_PTPTSCR_TSSARFE
 (1<<8)

	)

375 
	#ETH_PTPTSCR_TSSSR
 (1<<9)

	)

376 
	#ETH_PTPTSCR_TSPTPPSV2E
 (1<<10)

	)

377 
	#ETH_PTPTSCR_TSSPTPOEFE
 (1<<11)

	)

378 
	#ETH_PTPTSCR_TSSIPV6FE
 (1<<12)

	)

379 
	#ETH_PTPTSCR_TSSIPV4FE
 (1<<13)

	)

380 
	#ETH_PTPTSCR_TSSEME
 (1<<14)

	)

381 
	#ETH_PTPTSCR_TSSMRME
 (1<<15)

	)

383 
	#ETH_PTPTSCR_TSCNT_SHIFT
 16

	)

384 
	#ETH_PTPTSCR_TSCNT
 (3 << 
ETH_PTPTSCR_TSCNT_SHIFT
)

	)

385 
	#ETH_PTPTSCR_TSCNT_ORD
 (0 << 
ETH_PTPTSCR_TSCNT_SHIFT
)

	)

386 
	#ETH_PTPTSCR_TSCNT_BOUND
 (1 << 
ETH_PTPTSCR_TSCNT_SHIFT
)

	)

387 
	#ETH_PTPTSCR_TSCNT_ETETC
 (2 << 
ETH_PTPTSCR_TSCNT_SHIFT
)

	)

388 
	#ETH_PTPTSCR_TSCNT_PTPTC
 (3 << 
ETH_PTPTSCR_TSCNT_SHIFT
)

	)

390 
	#ETH_PTPTSCR_TSPFFMAE
 (1<<18)

	)

396 
	#ETH_PTPSSIR_STSSI
 0xFF

	)

401 
	#ETH_PTPTSLR_STSS
 0x7FFFFFFF

	)

402 
	#ETH_PTPTSLR_STPNS
 (1<<31)

	)

407 
	#ETH_PTPTSLUR_TSUSS
 0x7FFFFFFF

	)

408 
	#ETH_PTPTSLUR_TSUPNS
 (1<<31)

	)

413 
	#ETH_PTPTSSR_TSSO
 (1<<0)

	)

414 
	#ETH_PTPTSSR_TSTTR
 (1<<1)

	)

419 
	#ETH_PTPTSCR_PPSFREQ
 (0x0F<<0)

	)

420 
	#ETH_PTPTSCR_PPSFREQ_1HZ
 (0x00<<0)

	)

421 
	#ETH_PTPTSCR_PPSFREQ_2HZ
 (0x01<<0)

	)

422 
	#ETH_PTPTSCR_PPSFREQ_4HZ
 (0x02<<0)

	)

423 
	#ETH_PTPTSCR_PPSFREQ_8HZ
 (0x03<<0)

	)

424 
	#ETH_PTPTSCR_PPSFREQ_16HZ
 (0x04<<0)

	)

425 
	#ETH_PTPTSCR_PPSFREQ_32HZ
 (0x05<<0)

	)

426 
	#ETH_PTPTSCR_PPSFREQ_64HZ
 (0x06<<0)

	)

427 
	#ETH_PTPTSCR_PPSFREQ_128HZ
 (0x07<<0)

	)

428 
	#ETH_PTPTSCR_PPSFREQ_256HZ
 (0x08<<0)

	)

429 
	#ETH_PTPTSCR_PPSFREQ_512HZ
 (0x09<<0)

	)

430 
	#ETH_PTPTSCR_PPSFREQ_1024HZ
 (0x0A<<0)

	)

431 
	#ETH_PTPTSCR_PPSFREQ_2048HZ
 (0x0B<<0)

	)

432 
	#ETH_PTPTSCR_PPSFREQ_4096HZ
 (0x0C<<0)

	)

433 
	#ETH_PTPTSCR_PPSFREQ_8192HZ
 (0x0D<<0)

	)

434 
	#ETH_PTPTSCR_PPSFREQ_16384HZ
 (0x0E<<0)

	)

435 
	#ETH_PTPTSCR_PPSFREQ_32768HZ
 (0x0F<<0)

	)

440 
	#ETH_DMABMR_SR
 (1<<0)

	)

441 
	#ETH_DMABMR_DA
 (1<<1)

	)

443 
	#ETH_DMABMR_DSL_SHIFT
 2

	)

444 
	#ETH_DMABMR_DSL
 (0x1F << 
ETH_DMABR_DSL_SHIFT
)

	)

446 
	#ETH_DMABMR_EDFE
 (1<<7)

	)

448 
	#ETH_DMABMR_PBL_SHIFT
 8

	)

449 
	#ETH_DMABMR_PBL
 (0x3F << 
ETH_DMABR_PBL_SHIFT
)

	)

451 
	#ETH_DMABMR_PM_SHIFT
 14

	)

452 
	#ETH_DMABMR_PM
 (0x03 << 
ETH_DMABMR_PM_SHIFT
)

	)

453 
	#ETH_DMABMR_PM_1_1
 (0 << 
ETH_DMABMR_PM_SHIFT
)

	)

454 
	#ETH_DMABMR_PM_2_1
 (1 << 
ETH_DMABMR_PM_SHIFT
)

	)

455 
	#ETH_DMABMR_PM_3_1
 (2 << 
ETH_DMABMR_PM_SHIFT
)

	)

456 
	#ETH_DMABMR_PM_4_1
 (3 << 
ETH_DMABMR_PM_SHIFT
)

	)

458 
	#ETH_DMABMR_FB
 (1<<16)

	)

460 
	#ETH_DMABMR_RDP_SHIFT
 17

	)

461 
	#ETH_DMABMR_RDP
 (0x3F << 
ETH_DMABMR_RDP_SHIFT
)

	)

463 
	#ETH_DMABMR_USP
 (1<<23)

	)

464 
	#ETH_DMABMR_FPM
 (1<<24)

	)

465 
	#ETH_DMABMR_AAB
 (1<<25)

	)

466 
	#ETH_DMABMR_MB
 (1<<26)

	)

471 
	#ETH_DMASR_TS
 (1<<0)

	)

472 
	#ETH_DMASR_TPSS
 (1<<1)

	)

473 
	#ETH_DMASR_TBUS
 (1<<2)

	)

474 
	#ETH_DMASR_TJTS
 (1<<3)

	)

475 
	#ETH_DMASR_ROS
 (1<<4)

	)

476 
	#ETH_DMASR_TUS
 (1<<5)

	)

477 
	#ETH_DMASR_RS
 (1<<6)

	)

478 
	#ETH_DMASR_RBUS
 (1<<7)

	)

479 
	#ETH_DMASR_RPSS
 (1<<8)

	)

480 
	#ETH_DMASR_RWTS
 (1<<9)

	)

481 
	#ETH_DMASR_ETS
 (1<<10)

	)

482 
	#ETH_DMASR_FBES
 (1<<13)

	)

483 
	#ETH_DMASR_ERS
 (1<<14)

	)

484 
	#ETH_DMASR_AIS
 (1<<15)

	)

485 
	#ETH_DMASR_NIS
 (1<<16)

	)

487 
	#ETH_DMASR_RPS_SHIFT
 17

	)

488 
	#ETH_DMASR_RPS
 (7<<
ETH_DMASR_RPS_SHIFT
)

	)

489 
	#ETH_DMASR_RPS_STOP
 (0<<
ETH_DMASR_RPS_SHIFT
)

	)

490 
	#ETH_DMASR_RPS_FETCH
 (1<<
ETH_DMASR_RPS_SHIFT
)

	)

491 
	#ETH_DMASR_RPS_WAIT
 (3<<
ETH_DMASR_RPS_SHIFT
)

	)

492 
	#ETH_DMASR_RPS_SUSPEND
 (4<<
ETH_DMASR_RPS_SHIFT
)

	)

493 
	#ETH_DMASR_RPS_CLOSE
 (5<<
ETH_DMASR_RPS_SHIFT
)

	)

494 
	#ETH_DMASR_RPS_TRANSFER
 (7<<
ETH_DMASR_RPS_SHIFT
)

	)

496 
	#ETH_DMASR_TPS_SHIFT
 20

	)

497 
	#ETH_DMASR_TPS
 (7<<
ETH_DMASR_TPS_SHIFT
)

	)

498 
	#ETH_DMASR_TPS_STOP
 (0<<
ETH_DMASR_TPS_SHIFT
)

	)

499 
	#ETH_DMASR_TPS_FETCH
 (1<<
ETH_DMASR_TPS_SHIFT
)

	)

500 
	#ETH_DMASR_TPS_WAIT
 (2<<
ETH_DMASR_TPS_SHIFT
)

	)

501 
	#ETH_DMASR_TPS_TRANSFER
 (3<<
ETH_DMASR_TPS_SHIFT
)

	)

502 
	#ETH_DMASR_TPS_SUSPEND
 (6<<
ETH_DMASR_TPS_SHIFT
)

	)

503 
	#ETH_DMASR_TPS_CLOSE
 (7<<
ETH_DMASR_TPS_SHIFT
)

	)

505 
	#ETH_DMASR_EBS_SHIFT
 23

	)

506 
	#ETH_DMASR_EBS
 (7<<
ETH_DMASR_EBS_SHIFT
)

	)

508 
	#ETH_DMASR_MMCS
 (1<<27)

	)

509 
	#ETH_DMASR_PMTS
 (1<<28)

	)

510 
	#ETH_DMASR_TSTS
 (1<<29)

	)

515 
	#ETH_DMAOMR_SR
 (1<<1)

	)

516 
	#ETH_DMAOMR_OSF
 (1<<2)

	)

518 
	#ETH_DMAOMR_RTC_SHIFT
 3

	)

519 
	#ETH_DMAOMR_RTC
 (3 << 
ETH_DMAOMR_RTC_SHIFT
)

	)

520 
	#ETH_DMAOMR_RTC_64
 (0 << 
ETH_DMAOMR_RTC_SHIFT
)

	)

521 
	#ETH_DMAOMR_RTC_32
 (1 << 
ETH_DMAOMR_RTC_SHIFT
)

	)

522 
	#ETH_DMAOMR_RTC_96
 (2 << 
ETH_DMAOMR_RTC_SHIFT
)

	)

523 
	#ETH_DMAOMR_RTC_128
 (3 << 
ETH_DMAOMR_RTC_SHIFT
)

	)

525 
	#ETH_DMAOMR_FUGF
 (1<<6)

	)

526 
	#ETH_DMAOMR_FEF
 (1<<7)

	)

527 
	#ETH_DMAOMR_ST
 (1<<13)

	)

529 
	#ETH_DMAOMR_TTC_SHIFT
 14

	)

530 
	#ETH_DMAOMR_TTC
 (0x07 << 
ETH_DMAOMR_TTC_SHIFT
)

	)

531 
	#ETH_DMAOMR_TTC_64
 (0 << 
ETH_DMAOMR_TTC_SHIFT
)

	)

532 
	#ETH_DMAOMR_TTC_128
 (1 << 
ETH_DMAOMR_TTC_SHIFT
)

	)

533 
	#ETH_DMAOMR_TTC_192
 (2 << 
ETH_DMAOMR_TTC_SHIFT
)

	)

534 
	#ETH_DMAOMR_TTC_256
 (3 << 
ETH_DMAOMR_TTC_SHIFT
)

	)

535 
	#ETH_DMAOMR_TTC_40
 (4 << 
ETH_DMAOMR_TTC_SHIFT
)

	)

536 
	#ETH_DMAOMR_TTC_32
 (5 << 
ETH_DMAOMR_TTC_SHIFT
)

	)

537 
	#ETH_DMAOMR_TTC_24
 (6 << 
ETH_DMAOMR_TTC_SHIFT
)

	)

538 
	#ETH_DMAOMR_TTC_16
 (7 << 
ETH_DMAOMR_TTC_SHIFT
)

	)

540 
	#ETH_DMAOMR_FTF
 (1<<20)

	)

541 
	#ETH_DMAOMR_TSF
 (1<<21)

	)

542 
	#ETH_DMAOMR_DFRF
 (1<<24)

	)

543 
	#ETH_DMAOMR_RSF
 (1<<25)

	)

544 
	#ETH_DMAOMR_DTCEFD
 (1<<26)

	)

549 
	#ETH_DMAIER_TIE
 (1<<0)

	)

550 
	#ETH_DMAIER_TPSIE
 (1<<1)

	)

551 
	#ETH_DMAIER_TBUIE
 (1<<2)

	)

552 
	#ETH_DMAIER_TJTIE
 (1<<3)

	)

553 
	#ETH_DMAIER_ROIE
 (1<<4)

	)

554 
	#ETH_DMAIER_TUIE
 (1<<5)

	)

555 
	#ETH_DMAIER_RIE
 (1<<6)

	)

556 
	#ETH_DMAIER_RBUIE
 (1<<7)

	)

557 
	#ETH_DMAIER_RPSIE
 (1<<8)

	)

558 
	#ETH_DMAIER_RWTIE
 (1<<9)

	)

559 
	#ETH_DMAIER_ETIE
 (1<<10)

	)

560 
	#ETH_DMAIER_FBEIE
 (1<<13)

	)

561 
	#ETH_DMAIER_ERIE
 (1<<14)

	)

562 
	#ETH_DMAIER_AISE
 (1<<15)

	)

563 
	#ETH_DMAIER_NISE
 (1<<16)

	)

568 
	#ETH_DMAMFBOCR_MFC_SHIFT
 0

	)

569 
	#ETH_DMAMFBOCR_MFC
 (0xFFFF << 
ETH_DMAMFBOCR_MFC_SHIFT
)

	)

570 
	#ETH_DMAMFBOCR_OMFC
 (1<<16)

	)

571 
	#ETH_DMAMFBOCR_MFA
 (0x7FF << 
ETH_DMAMFBOCR_MFA_SHIFT
)

	)

572 
	#ETH_DMAMFBOCR_OFOC
 (1<<28)

	)

577 
	#ETH_DMARSWTR_RSWTC
 0xFF

	)

584 
	#ETH_DES_STD_SIZE
 16

	)

585 
	#ETH_DES_EXT_SIZE
 32

	)

589 
	#ETH_TDES0_DB
 (1<<0)

	)

590 
	#ETH_TDES0_UF
 (1<<1)

	)

591 
	#ETH_TDES0_ED
 (1<<2)

	)

593 
	#ETH_TDES0_CC_SHIFT
 3

	)

594 
	#ETH_TDES0_CC
 (0x0F << 
ETH_TDES0_CC_SHIFT
)

	)

596 
	#ETH_TDES0_VF
 (1<<7)

	)

597 
	#ETH_TDES0_EC
 (1<<8)

	)

598 
	#ETH_TDES0_LCO
 (1<<9)

	)

599 
	#ETH_TDES0_NC
 (1<<10)

	)

600 
	#ETH_TDES0_LCA
 (1<<11)

	)

601 
	#ETH_TDES0_IPE
 (1<<12)

	)

602 
	#ETH_TDES0_FF
 (1<<13)

	)

603 
	#ETH_TDES0_JT
 (1<<14)

	)

604 
	#ETH_TDES0_ES
 (1<<15)

	)

605 
	#ETH_TDES0_IHE
 (1<<16)

	)

606 
	#ETH_TDES0_TTSS
 (1<<17)

	)

607 
	#ETH_TDES0_TCH
 (1<<20)

	)

608 
	#ETH_TDES0_TER
 (1<<21)

	)

610 
	#ETH_TDES0_CIC_SHIFT
 22

	)

611 
	#ETH_TDES0_CIC
 (3<<
ETH_TDES0_CIC_SHIFT
)

	)

612 
	#ETH_TDES0_CIC_DISABLED
 (0<<
ETH_TDES0_CIC_SHIFT
)

	)

613 
	#ETH_TDES0_CIC_IP
 (1<<
ETH_TDES0_CIC_SHIFT
)

	)

614 
	#ETH_TDES0_CIC_IPPL
 (2<<
ETH_TDES0_CIC_SHIFT
)

	)

615 
	#ETH_TDES0_CIC_IPPLPH
 (3<<
ETH_TDES0_CIC_SHIFT
)

	)

617 
	#ETH_TDES0_TTSE
 (1<<25)

	)

618 
	#ETH_TDES0_DP
 (1<<26)

	)

619 
	#ETH_TDES0_DC
 (1<<27)

	)

620 
	#ETH_TDES0_FS
 (1<<28)

	)

621 
	#ETH_TDES0_LS
 (1<<29)

	)

622 
	#ETH_TDES0_IC
 (1<<30)

	)

623 
	#ETH_TDES0_OWN
 (1<<31)

	)

628 
	#ETH_TDES1_TBS1_SHIFT
 0

	)

629 
	#ETH_TDES1_TBS1
 (0x1FFF<<
ETH_TDES1_TBS1_SHIFT
)

	)

631 
	#ETH_TDES1_TBS2_SHIFT
 16

	)

632 
	#ETH_TDES1_TBS2
 (0x1FFF<<
ETH_TDES1_TBS1_SHIFT
)

	)

642 
	#ETH_RDES0_PCE
 (1<<0)

	)

643 
	#ETH_RDES0_ESA
 (1<<0)

	)

644 
	#ETH_RDES0_CE
 (1<<1)

	)

645 
	#ETH_RDES0_DE
 (1<<2)

	)

646 
	#ETH_RDES0_RE
 (1<<3)

	)

647 
	#ETH_RDES0_RWT
 (1<<4)

	)

648 
	#ETH_RDES0_FT
 (1<<5)

	)

649 
	#ETH_RDES0_LCO
 (1<<6)

	)

650 
	#ETH_RDES0_IPHCE
 (1<<7)

	)

651 
	#ETH_RDES0_TSV
 (1<<7)

	)

652 
	#ETH_RDES0_LS
 (1<<8)

	)

653 
	#ETH_RDES0_FS
 (1<<9)

	)

654 
	#ETH_RDES0_VLAN
 (1<<10)

	)

655 
	#ETH_RDES0_OE
 (1<<11)

	)

656 
	#ETH_RDES0_LE
 (1<<12)

	)

657 
	#ETH_RDES0_SAF
 (1<<13)

	)

658 
	#ETH_RDES0_DCE
 (1<<14)

	)

659 
	#ETH_RDES0_ES
 (1<<15)

	)

661 
	#ETH_RDES0_FL_SHIFT
 16

	)

662 
	#ETH_RDES0_FL
 (0x3FFF<<
ETH_RDES0_FL_SHIFT
)

	)

664 
	#ETH_RDES0_AFM
 (1<<30)

	)

665 
	#ETH_RDES0_OWN
 (1<<31)

	)

670 
	#ETH_RDES1_RBS1_SHIFT
 0

	)

671 
	#ETH_RDES1_RBS1
 (0x1FFF<<
ETH_RDES1_RBS1_SHIFT
)

	)

673 
	#ETH_RDES1_RCH
 (1<<14)

	)

674 
	#ETH_RDES1_RER
 (1<<15)

	)

676 
	#ETH_RDES1_RBS2_SHIFT
 16

	)

677 
	#ETH_RDES1_RBS2
 (0x1FFF<<
ETH_RDES1_RBS2_SHIFT
)

	)

679 
	#ETH_RDES1_DIC
 (1<<31)

	)

684 
	#ETH_RDES4_IPPT_SHIFT
 0

	)

685 
	#ETH_RDES4_IPPT
 (7<<
ETH_RDES4_IPPT_SHIFT
)

	)

686 
	#ETH_RDES4_IPPT_UNKNOWN
 (0<<
ETH_RDES4_IPPT_SHIFT
)

	)

687 
	#ETH_RDES4_IPPT_UDP
 (1<<
ETH_RDES4_IPPT_SHIFT
)

	)

688 
	#ETH_RDES4_IPPT_TCP
 (2<<
ETH_RDES4_IPPT_SHIFT
)

	)

689 
	#ETH_RDES4_IPPT_ICMP
 (3<<
ETH_RDES4_IPPT_SHIFT
)

	)

691 
	#ETH_RDES4_IPHE
 (1<<3)

	)

692 
	#ETH_RDES4_IPPE
 (1<<4)

	)

693 
	#ETH_RDES4_IPCB
 (1<<5)

	)

694 
	#ETH_RDES4_IPV4PR
 (1<<6)

	)

695 
	#ETH_RDES4_IPV6PR
 (1<<7)

	)

697 
	#ETH_RDES4_PMT_SHIFT
 8

	)

698 
	#ETH_RDES4_PMT
 (0x0F<<
ETH_RDES4_PMT_SHIFT
)

	)

699 
	#ETH_RDES4_PMT_NO
 (0x00<<
ETH_RDES4_PMT_SHIFT
)

	)

700 
	#ETH_RDES4_PMT_SYNC
 (0x01<<
ETH_RDES4_PMT_SHIFT
)

	)

701 
	#ETH_RDES4_PMT_FOLLOW
 (0x02<<
ETH_RDES4_PMT_SHIFT
)

	)

702 
	#ETH_RDES4_PMT_DLYRQ
 (0x03<<
ETH_RDES4_PMT_SHIFT
)

	)

703 
	#ETH_RDES4_PMT_DLYRSP
 (0x04<<
ETH_RDES4_PMT_SHIFT
)

	)

704 
	#ETH_RDES4_PMT_PDLYRQ
 (0x05<<
ETH_RDES4_PMT_SHIFT
)

	)

705 
	#ETH_RDES4_PMT_PDLYRSP
 (0x06<<
ETH_RDES4_PMT_SHIFT
)

	)

706 
	#ETH_RDES4_PMT_PDLYRSPFUP
 (0x07<<
ETH_RDES4_PMT_SHIFT
)

	)

708 
	#ETH_RDES4_PFT
 (1<<12)

	)

709 
	#ETH_RDES4_PV
 (1<<13)

	)

715 
	eëh_˛k
 {

716 
	mETH_CLK_025_035MHZ
 = 
ETH_MACMIIAR_CR_HCLK_DIV_16
,

717 
	mETH_CLK_035_060MHZ
 = 
ETH_MACMIIAR_CR_HCLK_DIV_26
,

718 
	mETH_CLK_060_100MHZ
 = 
ETH_MACMIIAR_CR_HCLK_DIV_42
,

719 
	mETH_CLK_100_150MHZ
 = 
ETH_MACMIIAR_CR_HCLK_DIV_62
,

720 
	mETH_CLK_150_168MHZ
 = 
ETH_MACMIIAR_CR_HCLK_DIV_102
,

727 
BEGIN_DECLS


729 
ëh_smi_wrôe
(
uöt8_t
 
phy
, uöt8_à
ªg
, 
uöt16_t
 
d©a
);

730 
uöt16_t
 
ëh_smi_ªad
(
uöt8_t
 
phy
, uöt8_à
ªg
);

731 
ëh_smi_bô_›
(
uöt8_t
 
phy
, uöt8_à
ªg
, 
uöt16_t
 
bôs
, uöt16_à
mask
);

732 
ëh_smi_bô_˛ór
(
uöt8_t
 
phy
, uöt8_à
ªg
, 
uöt16_t
 
˛órbôs
);

733 
ëh_smi_bô_£t
(
uöt8_t
 
phy
, uöt8_à
ªg
, 
uöt16_t
 
£tbôs
);

735 
ëh_£t_mac
(c⁄° 
uöt8_t
 *
mac
);

736 
ëh_desc_öô
(
uöt8_t
 *
buf
, 
uöt32_t
 
nTx
, uöt32_à
nRx
, uöt32_à
cTx
,

737 
uöt32_t
 
cRx
, 
boﬁ
 
i£xt
);

738 
boﬁ
 
ëh_tx
(
uöt8_t
 *
µkt
, 
uöt32_t
 
n
);

739 
boﬁ
 
ëh_rx
(
uöt8_t
 *
µkt
, 
uöt32_t
 *
Àn
, uöt32_à
maxÀn
);

741 
ëh_öô
(
uöt8_t
 
phy
, 
ëh_˛k
 
˛ock
);

742 
ëh_°¨t
();

744 
ëh_íabÀ_checksum_ofÊﬂd
();

746 
ëh_úq_íabÀ
(
uöt32_t
 
ªas⁄
);

747 
ëh_úq_dißbÀ
(
uöt32_t
 
ªas⁄
);

748 
boﬁ
 
ëh_úq_is_≥ndög
(
uöt32_t
 
ªas⁄
);

749 
boﬁ
 
ëh_úq_ack_≥ndög
(
uöt32_t
 
ªas⁄
);

752 
	gEND_DECLS


	@libopencm3/include/libopencm3/ethernet/phy.h

33 #i‚de‡
LIBOPENCM3_PHY_H


34 
	#LIBOPENCM3_PHY_H


	)

36 
	~<°dboﬁ.h
>

44 
	#PHY_REG_BCR
 0x00

	)

45 
	#PHY_REG_BSR
 0x01

	)

46 
	#PHY_REG_ID1
 0x02

	)

47 
	#PHY_REG_ID2
 0x03

	)

48 
	#PHY_REG_ANTX
 0x04

	)

49 
	#PHY_REG_ANRX
 0x05

	)

50 
	#PHY_REG_ANEXP
 0x06

	)

51 
	#PHY_REG_ANNPTX
 0x07

	)

52 
	#PHY_REG_ANNPRX
 0x08

	)

58 
	#PHY_REG_BCR_COLTEST
 (1 << 7)

	)

59 
	#PHY_REG_BCR_FD
 (1 << 8)

	)

60 
	#PHY_REG_BCR_ANRST
 (1 << 9)

	)

61 
	#PHY_REG_BCR_ISOLATE
 (1 << 10)

	)

62 
	#PHY_REG_BCR_POWERDN
 (1 << 11)

	)

63 
	#PHY_REG_BCR_AN
 (1 << 12)

	)

64 
	#PHY_REG_BCR_100M
 (1 << 13)

	)

65 
	#PHY_REG_BCR_LOOPBACK
 (1 << 14)

	)

66 
	#PHY_REG_BCR_RESET
 (1 << 15)

	)

68 
	#PHY_REG_BSR_JABBER
 (1 << 1)

	)

69 
	#PHY_REG_BSR_UP
 (1 << 2)

	)

70 
	#PHY_REG_BSR_FAULT
 (1 << 4)

	)

71 
	#PHY_REG_BSR_ANDONE
 (1 << 5)

	)

79 
	#PHY0
 0

	)

80 
	#PHY1
 1

	)

82 
	ephy_°©us
 {

83 
	mLINK_DOWN
,

84 
	mLINK_HD_10M
,

85 
	mLINK_HD_100M
,

86 
	mLINK_HD_1000M
,

87 
	mLINK_HD_10000M
,

88 
	mLINK_FD_10M
,

89 
	mLINK_FD_100M
,

90 
	mLINK_FD_1000M
,

91 
	mLINK_FD_10000M
,

98 
BEGIN_DECLS


100 
phy_ª£t
(
uöt8_t
 
phy
);

101 
boﬁ
 
phy_lök_isup
(
uöt8_t
 
phy
);

103 
phy_°©us
 
phy_lök_°©us
(
uöt8_t
 
phy
);

105 
phy_aut⁄eg_f‹˚
(
uöt8_t
 
phy
, 
phy_°©us
 
mode
);

106 
phy_aut⁄eg_íabÀ
(
uöt8_t
 
phy
);

108 
	gEND_DECLS


	@libopencm3/include/libopencm3/ethernet/phy_ksz80x1.h

35 #i‚de‡
LIBOPENCM3_PHY_KSZ80X1_H


36 
	#LIBOPENCM3_PHY_KSZ80X1_H


	)

38 
	~<lib›ícm3/ëhî√t/phy.h
>

65 
	#KSZ80X1_BCR
 0x00

	)

66 
	#KSZ80X1_BSR
 0x01

	)

67 
	#KSZ80X1_ID1
 0x02

	)

68 
	#KSZ80X1_ID2
 0x03

	)

69 
	#KSZ80X1_ANTX
 0x04

	)

70 
	#KSZ80X1_ANRX
 0x05

	)

71 
	#KSZ80X1_ANEXP
 0x06

	)

72 
	#KSZ80X1_ANNPTX
 0x07

	)

73 
	#KSZ80X1_ANNPRX
 0x08

	)

75 
	#KSZ80X1_MMDCR
 0x0D

	)

76 
	#KSZ80X1_MMDAR
 0x0E

	)

78 
	#KSZ80X1_DRCTRL
 0x10

	)

79 
	#KSZ80X1_AFECTRL
 0x11

	)

80 
	#KSZ80X1_AFECTRL4
 0x13

	)

81 
	#KSZ80X1_MIICTRL
 0x14

	)

82 
	#KSZ80X1_RXERCTR
 0x15

	)

83 
	#KSZ80X1_STRAPOVRD
 0x16

	)

84 
	#KSZ80X1_STRAPSTAT
 0x17

	)

85 
	#KSZ80X1_ECR
 0x18

	)

87 
	#KSZ80X1_ICSR
 0x1B

	)

89 
	#KSZ80X1_LINKMD
 0x1D

	)

90 
	#KSZ80X1_CR1
 0x1E

	)

91 
	#KSZ80X1_CR2
 0x1F

	)

109 
	#KSZ80X1_MMDCR_OPMODE
 (3 << 14Ë

	)

110 
	#KSZ80X1_MMDCR_OPMODE_REGISTER
 (0 << 14Ë

	)

111 
	#KSZ80X1_MMDCR_OPMODE_DATA
 (1 << 14Ë

	)

112 
	#KSZ80X1_MMDCR_OPMODE_DATA_POSTINC
 (2 << 14Ë

	)

113 
	#KSZ80X1_MMDCR_OPMODE_DATA_WPOSTINC
 (3 << 14Ë

	)

115 
	#KSZ80X1_MMDCR_DEVADDR
 (31 << 14Ë

	)

121 
	#KSZ80X1_DRCTRL_PLLOFF
 (1 << 4Ë

	)

125 
	#KSZ80X1_AFECTRL_SLOWOSC
 (1 << 5Ë

	)

129 
	#KSZ80X1_AFECTRL4_10TE
 (1 << 4Ë

	)

132 
	#KSZ8051_MIICTRL_PREAM_RESTORE_100M
 (1 << 7Ë

	)

133 
	#KSZ8051_MIICTRL_PREAM_RESTORE_10M
 (1 << 6Ë

	)

141 
	#KSZ80X1_STRAPOVRD_FACTORY
 (1 << 15Ë

	)

142 
	#KSZ80X1_STRAPOVRD_PMEWOL
 (1 << 15Ë

	)

143 
	#KSZ80X1_STRAPOVRD_BCASTOFF
 (1 << 9Ë

	)

144 
	#KSZ80X1_STRAPOVRD_MIIBTOB
 (1 << 7Ë

	)

145 
	#KSZ80X1_STRAPOVRD_RMIIBTOB
 (1 << 6Ë

	)

146 
	#KSZ80X1_STRAPOVRD_NANDTREE
 (1 << 5Ë

	)

147 
	#KSZ80X1_STRAPOVRD_RMIIOVRD
 (1 << 1Ë

	)

148 
	#KSZ80X1_STRAPOVRD_MIIOVRD
 (1 << 0Ë

	)

155 
	#KSZ80X1_STRAPSTAT_PHYAD_SHIFT
 13

	)

156 
	#KSZ80X1_STRAPSTAT_PHYAD
 (7 << 
KSZ8051_STRAPSTAT_PHYAD_SHIFT
)

	)

158 
	#KSZ80X1_STRAPSTAT_BCASTOFF
 (1 << 9Ë

	)

159 
	#KSZ80X1_STRAPSTAT_MIIBTOB
 (1 << 7Ë

	)

160 
	#KSZ80X1_STRAPSTAT_RMIIBTOB
 (1 << 6Ë

	)

161 
	#KSZ80X1_STRAPSTAT_NANDTREE
 (1 << 5Ë

	)

162 
	#KSZ80X1_STRAPSTAT_RMII
 (1 << 1Ë

	)

163 
	#KSZ80X1_STRAPSTAT_MII
 (1 << 0Ë

	)

167 
	#KSZ8051_ECR_EDPDDIS
 (1 << 11Ë

	)

168 
	#KSZ8051_ECR_100TXPREAMBLE
 (1 << 10Ë

	)

169 
	#KSZ8051_ECR_10TXPREAMBLE
 (1 << 6Ë

	)

173 
	#KSZ80X1_ICSR_JABIE
 (1 << 15Ë

	)

174 
	#KSZ80X1_ICSR_RERRIE
 (1 << 14Ë

	)

175 
	#KSZ80X1_ICSR_PRIE
 (1 << 13Ë

	)

176 
	#KSZ80X1_ICSR_PDFLTIE
 (1 << 12Ë

	)

177 
	#KSZ80X1_ICSR_LPACKIE
 (1 << 11Ë

	)

178 
	#KSZ80X1_ICSR_LDIE
 (1 << 10Ë

	)

179 
	#KSZ80X1_ICSR_RFAULTIE
 (1 << 9Ë

	)

180 
	#KSZ80X1_ICSR_LINKUPIE
 (1 << 8Ë

	)

182 
	#KSZ80X1_ICSR_JABIF
 (1 << 7Ë

	)

183 
	#KSZ80X1_ICSR_RERRIF
 (1 << 6Ë

	)

184 
	#KSZ80X1_ICSR_PRIF
 (1 << 5Ë

	)

185 
	#KSZ80X1_ICSR_PDFLTIF
 (1 << 4Ë

	)

186 
	#KSZ80X1_ICSR_LPACKIF
 (1 << 3Ë

	)

187 
	#KSZ80X1_ICSR_LDIF
 (1 << 2Ë

	)

188 
	#KSZ80X1_ICSR_RFAULTIF
 (1 << 1Ë

	)

189 
	#KSZ80X1_ICSR_LINKUPIF
 (1 << 0Ë

	)

193 
	#KSZ80X1_LINKMD_TESTEN
 (1 << 15Ë

	)

195 
	#KSZ80X1_LINKMD_TESTRES
 (3 << 13Ë

	)

196 
	#KSZ80X1_LINKMD_TESTRES_NORMAL
 (0 << 13Ë

	)

197 
	#KSZ80X1_LINKMD_TESTRES_OPEN
 (1 << 13Ë

	)

198 
	#KSZ80X1_LINKMD_TESTRES_SHORT
 (2 << 13Ë

	)

199 
	#KSZ80X1_LINKMD_TESTRES_FAILED
 (3 << 13Ë

	)

201 
	#KSZ80X1_LINKMD_SHORTCABLE
 (1 << 12Ë

	)

202 
	#KSZ80X1_LINKMD_DISTANCE
 (0x1FF << 0Ë

	)

208 
	#KSZ80X1_CR1_LEDMODE
 (3 << 14Ë

	)

209 
	#KSZ80X1_CR1_LEDMODE_COL_FD_SPD_LNK
 (0 << 14Ë

	)

210 
	#KSZ80X1_CR1_LEDMODE_ACT_FD_SPD_LNK
 (1 << 14Ë

	)

211 
	#KSZ80X1_CR1_LEDMODE_ACT_FD_100_10
 (2 << 14Ë

	)

212 
	#KSZ80X1_CR1_LEDMODE_SPD_LNK
 (0 << 14Ë

	)

213 
	#KSZ80X1_CR1_LEDMODE_ACT_LNK
 (1 << 14Ë

	)

214 
	#KSZ8041_CR1_POLARITY
 (1 << 13Ë

	)

215 
	#KSZ80X1_CR1_FEFAULT
 (1 << 12Ë

	)

216 
	#KSZ8041_CR1_MDIX
 (1 << 11Ë

	)

217 
	#KSZ80X1_CR1_LOOPBACK
 (1 << 7Ë

	)

221 
	#KSZ80X1_CR1_FLOWCTRL
 (1 << 9Ë

	)

222 
	#KSZ80X1_CR1_LINK
 (1 << 8Ë

	)

223 
	#KSZ80X1_CR1_POLARITY
 (1 << 7Ë

	)

224 
	#KSZ80X1_CR1_MDIX
 (1 << 5Ë

	)

225 
	#KSZ80X1_CR1_ENERGY
 (1 << 4Ë

	)

226 
	#KSZ80X1_CR1_ISOLATE
 (1 << 3Ë

	)

228 
	#KSZ80X1_CR1_MODE
 (7 << 0Ë

	)

229 
	#KSZ80X1_CR1_MODE_AUTONEG
 (0 << 0Ë

	)

230 
	#KSZ80X1_CR1_MODE_10HD
 (1 << 0Ë

	)

231 
	#KSZ80X1_CR1_MODE_100HD
 (2 << 0Ë

	)

232 
	#KSZ80X1_CR1_MODE_10FD
 (5 << 0Ë

	)

233 
	#KSZ80X1_CR1_MODE_100FD
 (6 << 0Ë

	)

239 
	#KSZ80X1_CR2_HPMDIX
 (1 << 15Ë

	)

240 
	#KSZ80X1_CR2_MDIXSEL
 (1 << 14Ë

	)

241 
	#KSZ80X1_CR2_MDIXEN
 (1 << 13Ë

	)

242 
	#KSZ80X1_CR2_ENERGY
 (1 << 12Ë

	)

243 
	#KSZ80X1_CR2_FORCE
 (1 << 11Ë

	)

244 
	#KSZ80X1_CR2_POWERSAVE
 (1 << 10Ë

	)

245 
	#KSZ80X1_CR2_IRQLVL
 (1 << 9Ë

	)

246 
	#KSZ80X1_CR2_JABEN
 (1 << 8Ë

	)

250 
	#KSZ80X1_CR2_ANDONE
 (1 << 7Ë

	)

251 
	#KSZ80X1_CR2_PAUSEEN
 (1 << 6Ë

	)

252 
	#KSZ80X1_CR2_ISOLATE
 (1 << 5Ë

	)

253 
	#KSZ80X1_CR2_MODE
 (7 << 2Ë

	)

254 
	#KSZ80X1_CR2_MODE_AN
 (0 << 2Ë

	)

255 
	#KSZ80X1_CR2_MODE_10HD
 (1 << 2Ë

	)

256 
	#KSZ80X1_CR2_MODE_100HD
 (2 << 2Ë

	)

257 
	#KSZ80X1_CR2_MODE_DEFAULT
 (3 << 2Ë

	)

258 
	#KSZ80X1_CR2_MODE_10FD
 (5 << 2Ë

	)

259 
	#KSZ80X1_CR2_MODE_100FD
 (6 << 2Ë

	)

260 
	#KSZ80X1_CR2_MODE_ISOLATE
 (7 << 2Ë

	)

264 
	#KSZ80X1_CR2_REFCLK
 (1 << 7Ë

	)

265 
	#KSZ80X1_CR2_REFCLK_25MHZ
 (0 << 7Ë

	)

266 
	#KSZ80X1_CR2_REFCLK_50MHZ
 (1 << 7Ë

	)

267 
	#KSZ80X1_CR2_LED
 (3 << 4Ë

	)

268 
	#KSZ80X1_CR2_LED_SPD_LNKACT
 (0 << 4Ë

	)

269 
	#KSZ80X1_CR2_LED_ACT_LNK
 (1 << 4Ë

	)

270 
	#KSZ80X1_CR2_TXDIS
 (1 << 3Ë

	)

271 
	#KSZ80X1_CR2_REMLPB
 (1 << 2Ë

	)

274 
	#KSZ80X1_CR2_SQEEN
 (1 << 1Ë

	)

275 
	#KSZ80X1_CR2_SCRAMBEN
 (1 << 0Ë

	)

	@libopencm3/include/libopencm3/ethernet/phy_lan87xx.h

34 #i‚de‡
LIBOPENCM3_PHY_LAN87XX_H


35 
	#LIBOPENCM3_PHY_LAN87XX_H


	)

37 
	~<lib›ícm3/ëhî√t/phy.h
>

56 
	#LAN87XX_BCR
 0x00

	)

57 
	#LAN87XX_BSR
 0x01

	)

58 
	#LAN87XX_PID1
 0x02

	)

59 
	#LAN87XX_PID2
 0x03

	)

60 
	#LAN87XX_ANA
 0x04

	)

61 
	#LAN87XX_ANLPA
 0x05

	)

62 
	#LAN87XX_ANE
 0x06

	)

63 
	#LAN87XX_ANNPTX
 0x07

	)

64 
	#LAN87XX_ANNPRX
 0x08

	)

66 
	#LAN87XX_MMDACR
 0x0D

	)

67 
	#LAN87XX_MMDADR
 0x0E

	)

69 
	#LAN87XX_REVISION
 0x10

	)

70 
	#LAN87XX_EDPDNLP
 0x10

	)

71 
	#LAN87XX_MCS
 0x11

	)

72 
	#LAN87XX_SM
 0x12

	)

74 
	#LAN87XX_TDRDCR
 0x18

	)

75 
	#LAN87XX_TDRCSR
 0x19

	)

76 
	#LAN87XX_ERRCNT
 0x1A

	)

77 
	#LAN87XX_CSR
 0x1B

	)

78 
	#LAN87XX_CBLN
 0x1C

	)

79 
	#LAN87XX_ISR
 0x1D

	)

80 
	#LAN87XX_IMR
 0x1E

	)

81 
	#LAN87XX_SCSR
 0x1F

	)

105 
	#LAN87XX_MMDACR_FUNC_SHIFT
 14

	)

106 
	#LAN87XX_MMDACR_FUNC
 (3 << 
LAN87XX_MMDACR_FUNC_SHIFT
)

	)

107 
	#LAN87XX_MMDACR_FUNC_ADDRESS
 (0 << 
LAN87XX_MMDACR_FUNC_SHIFT
)

	)

108 
	#LAN87XX_MMDACR_FUNC_DATA
 (1 << 
LAN87XX_MMDACR_FUNC_SHIFT
)

	)

110 
	#LAN87XX_MMDACR_DEVAD
 (31 << 0Ë

	)

111 
	#LAN87XX_MMDACR_DEVAD_PCS
 (3 << 0Ë

	)

112 
	#LAN87XX_MMDACR_DEVAD_ANN
 (7 << 0Ë

	)

113 
	#LAN87XX_MMDACR_DEVAD_VENDOR
 (30 << 0Ë

	)

123 
	#LAN87XX_EDPDNLP_TXEN
 (1 << 15Ë

	)

125 
	#LAN87XX_EDPDNLP_TXTIM_SHIFT
 13

	)

126 
	#LAN87XX_EDPDNLP_TXTIM
 (3<<
LAN87XX_EDPDNLP_TXTIM_SHIFT
)

	)

127 
	#LAN87XX_EDPDNLP_TXTIM_1024MS
 (0<<
LAN87XX_EDPDNLP_TXTIM_SHIFT
)

	)

128 
	#LAN87XX_EDPDNLP_TXTIM_0768MS
 (1<<
LAN87XX_EDPDNLP_TXTIM_SHIFT
)

	)

129 
	#LAN87XX_EDPDNLP_TXTIM_0512MS
 (2<<
LAN87XX_EDPDNLP_TXTIM_SHIFT
)

	)

130 
	#LAN87XX_EDPDNLP_TXTIM_0256MS
 (3<<
LAN87XX_EDPDNLP_TXTIM_SHIFT
)

	)

132 
	#LAN87XX_EDPDNLP_RXWAKEEN
 (1 << 12Ë

	)

134 
	#LAN87XX_EDPDNLP_RXTIM_SHIFT
 10

	)

135 
	#LAN87XX_EDPDNLP_RXTIM
 (3<<
LAN87XX_EDPDNLP_RXTIM_SHIFT
)

	)

136 
	#LAN87XX_EDPDNLP_RXTIM_0064MS
 (0<<
LAN87XX_EDPDNLP_RXTIM_SHIFT
)

	)

137 
	#LAN87XX_EDPDNLP_RXTIM_0256MS
 (1<<
LAN87XX_EDPDNLP_RXTIM_SHIFT
)

	)

138 
	#LAN87XX_EDPDNLP_RXTIM_0512MS
 (2<<
LAN87XX_EDPDNLP_RXTIM_SHIFT
)

	)

139 
	#LAN87XX_EDPDNLP_RXTIM_1024MS
 (3<<
LAN87XX_EDPDNLP_RXTIM_SHIFT
)

	)

141 
	#LAN87XX_EDPDNLP_EXTCROSSOVER
 (1 << 1Ë

	)

142 
	#LAN87XX_EDPDNLP_EXTMANCROSSOVER
 (1 << 0Ë

	)

146 
	#LAN87XX_MCS_EDPWRDOWN
 (1 << 13Ë

	)

147 
	#LAN87XX_MCS_LOWSQEN
 (1 << 11Ë

	)

148 
	#LAN87XX_MCS_MDPREBP
 (1 << 10Ë

	)

149 
	#LAN87XX_MCS_FARLOOPBACK
 (1 << 9Ë

	)

150 
	#LAN87XX_MCS_ALTINT
 (1 << 6Ë

	)

151 
	#LAN87XX_MCS_PHYADBP
 (1 << 3Ë

	)

152 
	#LAN87XX_MCS_FORCELINK
 (1 << 2Ë

	)

153 
	#LAN87XX_MCS_ENERGYON
 (1 << 1Ë

	)

159 
	#LAN87XX_SM_MIIMODE
 (1 << 14Ë

	)

160 
	#LAN87XX_SM_MIIMODE_MII
 (0 << 14Ë

	)

161 
	#LAN87XX_SM_MIIMODE_RMII
 (1 << 14Ë

	)

163 
	#LAN87XX_SM_MODE_SHIFT
 5

	)

164 
	#LAN87XX_SM_MODE
 (7 << 
LAN87XX_SM_MODE_SHIFT
)

	)

165 
	#LAN87XX_SM_MODE_10HD
 (0 << 
LAN87XX_SM_MODE_SHIFT
)

	)

166 
	#LAN87XX_SM_MODE_10FD
 (1 << 
LAN87XX_SM_MODE_SHIFT
)

	)

167 
	#LAN87XX_SM_MODE_100HD
 (2 << 
LAN87XX_SM_MODE_SHIFT
)

	)

168 
	#LAN87XX_SM_MODE_100FD
 (3 << 
LAN87XX_SM_MODE_SHIFT
)

	)

169 
	#LAN87XX_SM_MODE_100HD_AN
 (4 << 
LAN87XX_SM_MODE_SHIFT
)

	)

170 
	#LAN87XX_SM_MODE_REPEATER
 (5 << 
LAN87XX_SM_MODE_SHIFT
)

	)

171 
	#LAN87XX_SM_MODE_POWERDOWN
 (6 << 
LAN87XX_SM_MODE_SHIFT
)

	)

172 
	#LAN87XX_SM_MODE_ALL
 (7 << 
LAN87XX_SM_MODE_SHIFT
)

	)

174 
	#LAN87XX_SM_PHYAD
 (0x1F << 0Ë

	)

180 
	#LAN87XX_TDRDCR_DELAY
 (15 << 0Ë

	)

181 
	#LAN87XX_TDRDCR_DELAY
 (15 << 0Ë

	)

183 
	#LAN87XX_TDRDCR_LBCR_SHIFT
 12

	)

184 
	#LAN87XX_TDRDCR_LBCR
 (7 << 
LAN87XX_TDRDCR_LBCR_SHIFT
)

	)

186 
	#LAN87XX_TDRDCR_LPAT_SHIFT
 6

	)

187 
	#LAN87XX_TDRDCR_LPAT
 (7 << 
LAN87XX_TDRDCR_LPAT_SHIFT
)

	)

189 
	#LAN87XX_TDRDCR_HPAT_SHIFT
 0

	)

190 
	#LAN87XX_TDRDCR_HPAT
 (7 << 
LAN87XX_TDRDCR_HPAT_SHIFT
)

	)

196 
	#LAN87XX_TDRCSR_ENABLE
 (1 << 15Ë

	)

197 
	#LAN87XX_TDRCSR_ADFILTER
 (1 << 14Ë

	)

199 
	#LAN87XX_TDRCSR_COND_SHIFT
 9

	)

200 
	#LAN87XX_TDRCSR_COND_DEFAULT
 (0 << 
LAN87XX_TDRCSR_COND_SHIFT
)

	)

201 
	#LAN87XX_TDRCSR_COND_SHORTED
 (1 << 
LAN87XX_TDRCSR_COND_SHIFT
)

	)

202 
	#LAN87XX_TDRCSR_COND_OPEN
 (2 << 
LAN87XX_TDRCSR_COND_SHIFT
)

	)

203 
	#LAN87XX_TDRCSR_COND_MATCH
 (3 << 
LAN87XX_TDRCSR_COND_SHIFT
)

	)

205 
	#LAN87XX_TDRCSR_STATUS
 (1 << 8Ë

	)

209 
	#LAN87XX_TDRCSR_LENGTH
 (15 << 0Ë

	)

218 
	#LAN87XX_CSR_AMDIXCTRL
 (1 << 15Ë

	)

219 
	#LAN87XX_CSR_CH_SELECT
 (1 << 13Ë

	)

220 
	#LAN87XX_CSR_SQEOFF
 (1 << 11Ë

	)

221 
	#LAN87XX_CSR_XPOL
 (1 << 4Ë

	)

227 
	#LAN87XX_CBLN_CBLN_SHIFT
 12

	)

228 
	#LAN87XX_CBLN_CBLN
 (15 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

229 
	#LAN87XX_CBLN_CBLN_006M
 (4 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

230 
	#LAN87XX_CBLN_CBLN_017M
 (5 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

231 
	#LAN87XX_CBLN_CBLN_027M
 (6 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

232 
	#LAN87XX_CBLN_CBLN_038M
 (7 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

233 
	#LAN87XX_CBLN_CBLN_049M
 (8 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

234 
	#LAN87XX_CBLN_CBLN_059M
 (9 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

235 
	#LAN87XX_CBLN_CBLN_070M
 (10 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

236 
	#LAN87XX_CBLN_CBLN_081M
 (11 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

237 
	#LAN87XX_CBLN_CBLN_091M
 (12 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

238 
	#LAN87XX_CBLN_CBLN_102M
 (13 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

239 
	#LAN87XX_CBLN_CBLN_113M
 (14 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

240 
	#LAN87XX_CBLN_CBLN_123M
 (15 << 
LAN87XX_CBLN_CBLN_SHIFT
)

	)

245 
	#LAN87XX_ISR_WOLF
 (1 << 8Ë

	)

246 
	#LAN87XX_ISR_ENERGYONF
 (1 << 7Ë

	)

247 
	#LAN87XX_ISR_ANCOMPF
 (1 << 6Ë

	)

248 
	#LAN87XX_ISR_RFAULTF
 (1 << 5Ë

	)

249 
	#LAN87XX_ISR_LINKDOWNF
 (1 << 4Ë

	)

250 
	#LAN87XX_ISR_ANLPACKF
 (1 << 3Ë

	)

251 
	#LAN87XX_ISR_PDFAULTF
 (1 << 2Ë

	)

252 
	#LAN87XX_ISR_ANPAGEF
 (1 << 1Ë

	)

256 
	#LAN87XX_IMR_WOLE
 (1 << 8Ë

	)

257 
	#LAN87XX_IMR_ENERGYONE
 (1 << 7Ë

	)

258 
	#LAN87XX_IMR_ANCOMPE
 (1 << 6Ë

	)

259 
	#LAN87XX_IMR_RFAULTE
 (1 << 5Ë

	)

260 
	#LAN87XX_IMR_LINKDOWNE
 (1 << 4Ë

	)

261 
	#LAN87XX_IMR_ANLPACKE
 (1 << 3Ë

	)

262 
	#LAN87XX_IMR_PDFAULTE
 (1 << 2Ë

	)

263 
	#LAN87XX_IMR_ANPAGEE
 (1 << 1Ë

	)

267 
	#LAN87XX_SCSR_AUTODONE
 (1 << 12Ë

	)

269 
	#LAN87XX_SCSR_GPO2
 (1 << 9Ë

	)

270 
	#LAN87XX_SCSR_GPO1
 (1 << 8Ë

	)

271 
	#LAN87XX_SCSR_GPO0
 (1 << 7Ë

	)

275 
	#LAN87XX_SCSR_ENABLE4B5B
 (1 << 6Ë

	)

277 
	#LAN87XX_SCSR_SPEED_SHIFT
 2

	)

278 
	#LAN87XX_SCSR_SPEED
 (7 << 
LAN87XX_SCSR_SPEED_SHIFT
)

	)

279 
	#LAN87XX_SCSR_SPEED_10HD
 (1 << 
LAN87XX_SCSR_SPEED_SHIFT
)

	)

280 
	#LAN87XX_SCSR_SPEED_100HD
 (2 << 
LAN87XX_SCSR_SPEED_SHIFT
)

	)

281 
	#LAN87XX_SCSR_SPEED_10FD
 (5 << 
LAN87XX_SCSR_SPEED_SHIFT
)

	)

282 
	#LAN87XX_SCSR_SPEED_100FD
 (6 << 
LAN87XX_SCSR_SPEED_SHIFT
)

	)

284 
	#LAN87XX_SCSR_NOSCRAMBLE
 (1 << 0Ë

	)

	@libopencm3/include/libopencm3/ethernet/phy_ste100.h

34 #i‚de‡
LIBOPENCM3_PHY_STE100_H


35 
	#LIBOPENCM3_PHY_STE100_H


	)

37 
	~<lib›ícm3/ëhî√t/phy.h
>

50 
	#STE100_XCR
 0x00

	)

51 
	#STE100_XSR
 0x01

	)

52 
	#STE100_PID1
 0x02

	)

53 
	#STE100_PID2
 0x03

	)

54 
	#STE100_ANA
 0x04

	)

55 
	#STE100_ANLPA
 0x05

	)

56 
	#STE100_ANE
 0x06

	)

58 
	#STE100_XCIIS
 0x11

	)

59 
	#STE100_XIE
 0x12

	)

60 
	#STE100_100CTR
 0x13

	)

61 
	#STE100_XMC
 0x14

	)

78 
	#STE100_XCIIS_SPEED
 (1 << 9)

	)

79 
	#STE100_XCIIS_DUPLEX
 (1 << 8)

	)

80 
	#STE100_XCIIS_PAUSE
 (1 << 7)

	)

81 
	#STE100_XCIIS_ANC
 (1 << 6)

	)

82 
	#STE100_XCIIS_RFD
 (1 << 5)

	)

83 
	#STE100_XCIIS_LS
 (1 << 4)

	)

84 
	#STE100_XCIIS_ANAR
 (1 << 3)

	)

85 
	#STE100_XCIIS_PDF
 (1 << 2)

	)

86 
	#STE100_XCIIS_ANPR
 (1 << 1)

	)

87 
	#STE100_XCIIS_REF
 (1 << 0)

	)

91 
	#STE100_XCIE_ANCE
 (1 << 6)

	)

92 
	#STE100_XCIE_RFE
 (1 << 5)

	)

93 
	#STE100_XCIE_LDE
 (1 << 4)

	)

94 
	#STE100_XCIE_ANAE
 (1 << 3)

	)

95 
	#STE100_XCIE_PDFE
 (1 << 2)

	)

96 
	#STE100_XCIE_ANPE
 (1 << 1)

	)

97 
	#STE100_XCIE_REFE
 (1 << 0)

	)

101 
	#STE100_100CTR_DISRER
 (1 << 13)

	)

102 
	#STE100_100CTR_ANC
 (1 << 12)

	)

103 
	#STE100_100CTR_ENRLB
 (1 << 9)

	)

104 
	#STE100_100CTR_ENDCR
 (1 << 8)

	)

105 
	#STE100_100CTR_ENRZI
 (1 << 7)

	)

106 
	#STE100_100CTR_EN4B5B
 (1 << 6)

	)

107 
	#STE100_100CTR_ISOTX
 (1 << 5)

	)

109 
	#STE100_100CTR_CMODE_SHIFT
 2

	)

110 
	#STE100_100CTR_CMODE
 (7 << 
STE100_100CTR_CMODE_SHIFT
)

	)

111 
	#STE100_100CTR_CMODE_AN
 (0 << 
STE100_100CTR_CMODE_SHIFT
)

	)

112 
	#STE100_100CTR_CMODE_10HD
 (1 << 
STE100_100CTR_CMODE_SHIFT
)

	)

113 
	#STE100_100CTR_CMODE_100HD
 (2 << 
STE100_100CTR_CMODE_SHIFT
)

	)

114 
	#STE100_100CTR_CMODE_10FD
 (5 << 
STE100_100CTR_CMODE_SHIFT
)

	)

115 
	#STE100_100CTR_CMODE_100FD
 (6 << 
STE100_100CTR_CMODE_SHIFT
)

	)

116 
	#STE100_100CTR_CMODE_ISOLATE
 (7 << 
STE100_100CTR_CMODE_SHIFT
)

	)

118 
	#STE100_100CTR_DISMLT
 (1 << 1)

	)

119 
	#STE100_100CTR_DISCRM
 (1 << 0)

	)

123 
	#STE100_XMC_LD
 (1 << 11)

	)

124 
	#STE100_XMC_PAD_SHIFT
 3

	)

125 
	#STE100_XMC_PAD
 (31 << 
STE100_XMC_PAD_SHIFT
)

	)

127 
	#STE100_XMC_MFPSE
 (1 << 1)

	)

	@libopencm3/include/libopencm3/lm3s/doc-lm3s.h

	@libopencm3/include/libopencm3/lm3s/gpio.h

35 #i‚de‡
LM3S_GPIO_H


36 
	#LM3S_GPIO_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/lm3s/mem‹ym≠.h
>

46 
	#GPIOA
 
GPIOA_APB_BASE


	)

47 
	#GPIOB
 
GPIOB_APB_BASE


	)

48 
	#GPIOC
 
GPIOC_APB_BASE


	)

49 
	#GPIOD
 
GPIOD_APB_BASE


	)

50 
	#GPIOE
 
GPIOE_APB_BASE


	)

51 
	#GPIOF
 
GPIOF_APB_BASE


	)

52 
	#GPIOG
 
GPIOG_APB_BASE


	)

53 
	#GPIOH
 
GPIOH_APB_BASE


	)

56 
	#GPIO0
 (1 << 0)

	)

57 
	#GPIO1
 (1 << 1)

	)

58 
	#GPIO2
 (1 << 2)

	)

59 
	#GPIO3
 (1 << 3)

	)

60 
	#GPIO4
 (1 << 4)

	)

61 
	#GPIO5
 (1 << 5)

	)

62 
	#GPIO6
 (1 << 6)

	)

63 
	#GPIO7
 (1 << 7)

	)

67 
	#GPIO_DATA
(
p‹t
Ë(&
	`MMIO32
(’‹tË+ 0x000))

	)

68 
	#GPIO_DIR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x400)

	)

69 
	#GPIO_IS
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x404)

	)

70 
	#GPIO_IBE
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x408)

	)

71 
	#GPIO_IEV
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x40c)

	)

72 
	#GPIO_IM
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x410)

	)

73 
	#GPIO_RIS
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x414)

	)

74 
	#GPIO_MIS
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x418)

	)

75 
	#GPIO_ICR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x41c)

	)

76 
	#GPIO_AFSEL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x420)

	)

77 
	#GPIO_DR2R
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x500)

	)

78 
	#GPIO_DR4R
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x504)

	)

79 
	#GPIO_DR8R
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x508)

	)

80 
	#GPIO_ODR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x50c)

	)

81 
	#GPIO_PUR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x510)

	)

82 
	#GPIO_PDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x514)

	)

83 
	#GPIO_SLR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x518)

	)

84 
	#GPIO_DEN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x51c)

	)

85 
	#GPIO_LOCK
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x520)

	)

86 
	#GPIO_CR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x524)

	)

87 
	#GPIO_AMSEL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x528)

	)

89 
BEGIN_DECLS


91 
gpio_£t
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
);

92 
gpio_˛ór
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
);

94 
	gEND_DECLS


	@libopencm3/include/libopencm3/lm3s/memorymap.h

20 #i‚de‡
LM3S_MEMORYMAP_H


21 
	#LM3S_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

27 
	#GPIOA_APB_BASE
 (0x40004000U)

	)

28 
	#GPIOB_APB_BASE
 (0x40005000U)

	)

29 
	#GPIOC_APB_BASE
 (0x40006000U)

	)

30 
	#GPIOD_APB_BASE
 (0x40007000U)

	)

31 
	#GPIOE_APB_BASE
 (0x40024000U)

	)

32 
	#GPIOF_APB_BASE
 (0x40025000U)

	)

33 
	#GPIOG_APB_BASE
 (0x40026000U)

	)

34 
	#GPIOH_APB_BASE
 (0x40027000U)

	)

36 
	#GPIOA_BASE
 (0x40058000U)

	)

37 
	#GPIOB_BASE
 (0x40059000U)

	)

38 
	#GPIOC_BASE
 (0x4005A000U)

	)

39 
	#GPIOD_BASE
 (0x4005B000U)

	)

40 
	#GPIOE_BASE
 (0x4005C000U)

	)

41 
	#GPIOF_BASE
 (0x4005D000U)

	)

42 
	#GPIOG_BASE
 (0x4005E000U)

	)

43 
	#GPIOH_BASE
 (0x4005F000U)

	)

45 
	#SYSTEMCONTROL_BASE
 (0x400FE000U)

	)

	@libopencm3/include/libopencm3/lm3s/nvic.h

6 #i‚de‡
LIBOPENCM3_LM3S_NVIC_H


7 
	#LIBOPENCM3_LM3S_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_GPIOQ7_IRQ
 131

	)

17 
	#NVIC_GPIOQ6_IRQ
 130

	)

18 
	#NVIC_PWM1_3_IRQ
 137

	)

19 
	#NVIC_PWM1_2_IRQ
 136

	)

20 
	#NVIC_PWM1_1_IRQ
 135

	)

21 
	#NVIC_PWM1_0_IRQ
 134

	)

22 
	#NVIC_PWM1_FAULT_IRQ
 138

	)

23 
	#NVIC_TIMER2B_IRQ
 24

	)

24 
	#NVIC_COMP0_IRQ
 25

	)

25 
	#NVIC_COMP1_IRQ
 26

	)

26 
	#NVIC_COMP2_IRQ
 27

	)

27 
	#NVIC_TIMER0B_IRQ
 20

	)

28 
	#NVIC_TIMER1A_IRQ
 21

	)

29 
	#NVIC_TIMER1B_IRQ
 22

	)

30 
	#NVIC_TIMER2A_IRQ
 23

	)

31 
	#NVIC_SYSCTL_IRQ
 28

	)

32 
	#NVIC_FLASH_IRQ
 29

	)

33 
	#NVIC_GPIOA_IRQ
 0

	)

34 
	#NVIC_GPIOE_IRQ
 4

	)

35 
	#NVIC_I2C0_IRQ
 8

	)

36 
	#NVIC_GPIOP4_IRQ
 120

	)

37 
	#NVIC_GPIOP5_IRQ
 121

	)

38 
	#NVIC_GPIOP6_IRQ
 122

	)

39 
	#NVIC_GPIOP7_IRQ
 123

	)

40 
	#NVIC_GPIOQ0_IRQ
 124

	)

41 
	#NVIC_GPIOQ1_IRQ
 125

	)

42 
	#NVIC_GPIOQ2_IRQ
 126

	)

43 
	#NVIC_GPIOQ3_IRQ
 127

	)

44 
	#NVIC_GPIOQ4_IRQ
 128

	)

45 
	#NVIC_GPIOQ5_IRQ
 129

	)

46 
	#NVIC_UART3_IRQ
 59

	)

47 
	#NVIC_SSI3_IRQ
 58

	)

48 
	#NVIC_GPIOK_IRQ
 55

	)

49 
	#NVIC_GPIOJ_IRQ
 54

	)

50 
	#NVIC_SSI2_IRQ
 57

	)

51 
	#NVIC_GPIOL_IRQ
 56

	)

52 
	#NVIC_ADC1SS3_IRQ
 51

	)

53 
	#NVIC_ADC1SS2_IRQ
 50

	)

54 
	#NVIC_EPI0_IRQ
 53

	)

55 
	#NVIC_I2S0_IRQ
 52

	)

56 
	#NVIC_FAN0_IRQ
 114

	)

57 
	#NVIC_GPIOP1_IRQ
 117

	)

58 
	#NVIC_GPIOP0_IRQ
 116

	)

59 
	#NVIC_GPIOM_IRQ
 111

	)

60 
	#NVIC_I2C5_IRQ
 110

	)

61 
	#NVIC_GPION_IRQ
 112

	)

62 
	#NVIC_GPIOP3_IRQ
 119

	)

63 
	#NVIC_GPIOP2_IRQ
 118

	)

64 
	#NVIC_GPIOD_IRQ
 3

	)

65 
	#NVIC_SSI0_IRQ
 7

	)

66 
	#NVIC_LPC0_IRQ
 108

	)

67 
	#NVIC_I2C4_IRQ
 109

	)

68 
	#NVIC_WTIMER4A_IRQ
 102

	)

69 
	#NVIC_WTIMER4B_IRQ
 103

	)

70 
	#NVIC_WTIMER3A_IRQ
 100

	)

71 
	#NVIC_WTIMER3B_IRQ
 101

	)

72 
	#NVIC_SYSEXC_IRQ
 106

	)

73 
	#NVIC_PECI0_IRQ
 107

	)

74 
	#NVIC_WTIMER5A_IRQ
 104

	)

75 
	#NVIC_WTIMER5B_IRQ
 105

	)

76 
	#NVIC_CAN0_IRQ
 39

	)

77 
	#NVIC_QEI1_IRQ
 38

	)

78 
	#NVIC_UART2_IRQ
 33

	)

79 
	#NVIC_GPIOH_IRQ
 32

	)

80 
	#NVIC_GPIOG_IRQ
 31

	)

81 
	#NVIC_GPIOF_IRQ
 30

	)

82 
	#NVIC_I2C1_IRQ
 37

	)

83 
	#NVIC_TIMER3B_IRQ
 36

	)

84 
	#NVIC_TIMER3A_IRQ
 35

	)

85 
	#NVIC_SSI1_IRQ
 34

	)

86 
	#NVIC_UART4_IRQ
 60

	)

87 
	#NVIC_UART5_IRQ
 61

	)

88 
	#NVIC_UART6_IRQ
 62

	)

89 
	#NVIC_UART7_IRQ
 63

	)

90 
	#NVIC_I2C2_IRQ
 68

	)

91 
	#NVIC_I2C3_IRQ
 69

	)

92 
	#NVIC_GPIOC_IRQ
 2

	)

93 
	#NVIC_UART1_IRQ
 6

	)

94 
	#NVIC_WTIMER2B_IRQ
 99

	)

95 
	#NVIC_WTIMER2A_IRQ
 98

	)

96 
	#NVIC_TIMER5B_IRQ
 93

	)

97 
	#NVIC_TIMER5A_IRQ
 92

	)

98 
	#NVIC_WTIMER0B_IRQ
 95

	)

99 
	#NVIC_WTIMER0A_IRQ
 94

	)

100 
	#NVIC_WTIMER1B_IRQ
 97

	)

101 
	#NVIC_WTIMER1A_IRQ
 96

	)

102 
	#NVIC_PWM0_1_IRQ
 11

	)

103 
	#NVIC_PWM0_0_IRQ
 10

	)

104 
	#NVIC_QEI0_IRQ
 13

	)

105 
	#NVIC_PWM0_2_IRQ
 12

	)

106 
	#NVIC_ADC0SS1_IRQ
 15

	)

107 
	#NVIC_ADC0SS0_IRQ
 14

	)

108 
	#NVIC_ADC0SS3_IRQ
 17

	)

109 
	#NVIC_ADC0SS2_IRQ
 16

	)

110 
	#NVIC_TIMER0A_IRQ
 19

	)

111 
	#NVIC_WATCHDOG_IRQ
 18

	)

112 
	#NVIC_ADC1SS0_IRQ
 48

	)

113 
	#NVIC_ADC1SS1_IRQ
 49

	)

114 
	#NVIC_UDMA_IRQ
 46

	)

115 
	#NVIC_UDMAERR_IRQ
 47

	)

116 
	#NVIC_USB0_IRQ
 44

	)

117 
	#NVIC_PWM0_3_IRQ
 45

	)

118 
	#NVIC_ETH_IRQ
 42

	)

119 
	#NVIC_HIBERNATE_IRQ
 43

	)

120 
	#NVIC_CAN1_IRQ
 40

	)

121 
	#NVIC_CAN2_IRQ
 41

	)

122 
	#NVIC_GPIOB_IRQ
 1

	)

123 
	#NVIC_UART0_IRQ
 5

	)

124 
	#NVIC_PWM0_FAULT_IRQ
 9

	)

125 
	#NVIC_TIMER4B_IRQ
 71

	)

126 
	#NVIC_TIMER4A_IRQ
 70

	)

128 
	#NVIC_IRQ_COUNT
 139

	)

137 
BEGIN_DECLS


139 
gpioq7_i§
();

140 
gpioq6_i§
();

141 
pwm1_3_i§
();

142 
pwm1_2_i§
();

143 
pwm1_1_i§
();

144 
pwm1_0_i§
();

145 
pwm1_Áu…_i§
();

146 
timî2b_i§
();

147 
comp0_i§
();

148 
comp1_i§
();

149 
comp2_i§
();

150 
timî0b_i§
();

151 
timî1a_i§
();

152 
timî1b_i§
();

153 
timî2a_i§
();

154 
sys˘l_i§
();

155 
Êash_i§
();

156 
gpiﬂ_i§
();

157 
gpi€_i§
();

158 
i2c0_i§
();

159 
gpi›4_i§
();

160 
gpi›5_i§
();

161 
gpi›6_i§
();

162 
gpi›7_i§
();

163 
gpioq0_i§
();

164 
gpioq1_i§
();

165 
gpioq2_i§
();

166 
gpioq3_i§
();

167 
gpioq4_i§
();

168 
gpioq5_i§
();

169 
u¨t3_i§
();

170 
ssi3_i§
();

171 
gpiok_i§
();

172 
gpioj_i§
();

173 
ssi2_i§
();

174 
gpiﬁ_i§
();

175 
adc1ss3_i§
();

176 
adc1ss2_i§
();

177 
ïi0_i§
();

178 
i2s0_i§
();

179 
Án0_i§
();

180 
gpi›1_i§
();

181 
gpi›0_i§
();

182 
gpiom_i§
();

183 
i2c5_i§
();

184 
gpi⁄_i§
();

185 
gpi›3_i§
();

186 
gpi›2_i§
();

187 
gpiod_i§
();

188 
ssi0_i§
();

189 
Õc0_i§
();

190 
i2c4_i§
();

191 
wtimî4a_i§
();

192 
wtimî4b_i§
();

193 
wtimî3a_i§
();

194 
wtimî3b_i§
();

195 
sy£xc_i§
();

196 
≥ci0_i§
();

197 
wtimî5a_i§
();

198 
wtimî5b_i§
();

199 
ˇn0_i§
();

200 
qei1_i§
();

201 
u¨t2_i§
();

202 
gpioh_i§
();

203 
gpiog_i§
();

204 
gpiof_i§
();

205 
i2c1_i§
();

206 
timî3b_i§
();

207 
timî3a_i§
();

208 
ssi1_i§
();

209 
u¨t4_i§
();

210 
u¨t5_i§
();

211 
u¨t6_i§
();

212 
u¨t7_i§
();

213 
i2c2_i§
();

214 
i2c3_i§
();

215 
gpioc_i§
();

216 
u¨t1_i§
();

217 
wtimî2b_i§
();

218 
wtimî2a_i§
();

219 
timî5b_i§
();

220 
timî5a_i§
();

221 
wtimî0b_i§
();

222 
wtimî0a_i§
();

223 
wtimî1b_i§
();

224 
wtimî1a_i§
();

225 
pwm0_1_i§
();

226 
pwm0_0_i§
();

227 
qei0_i§
();

228 
pwm0_2_i§
();

229 
adc0ss1_i§
();

230 
adc0ss0_i§
();

231 
adc0ss3_i§
();

232 
adc0ss2_i§
();

233 
timî0a_i§
();

234 
w©chdog_i§
();

235 
adc1ss0_i§
();

236 
adc1ss1_i§
();

237 
udma_i§
();

238 
udm´º_i§
();

239 
usb0_i§
();

240 
pwm0_3_i§
();

241 
ëh_i§
();

242 
hibî«ã_i§
();

243 
ˇn1_i§
();

244 
ˇn2_i§
();

245 
gpiob_i§
();

246 
u¨t0_i§
();

247 
pwm0_Áu…_i§
();

248 
timî4b_i§
();

249 
timî4a_i§
();

251 
	gEND_DECLS


	@libopencm3/include/libopencm3/lm3s/rcc.h

36 #i‚de‡
LIBOPENCM3_RCC_H


37 
	#LIBOPENCM3_RCC_H


	)

38 
	~<lib›ícm3/cm3/comm⁄.h
>

42 
	#RCC_RIS
 
	`MMIO32
(0x400FE050)

	)

43 
	#RCC_CR
 
	`MMIO32
(0x400FE060)

	)

44 
	#RCC2_CR
 
	`MMIO32
(0x400FE070)

	)

47 
	#RCC_SYSDIV_MASK
 (0x0F << 23)

	)

48 
	#RCC_SYSDIV_12_5MHZ
 (0x0F << 23)

	)

49 
	#RCC_SYSDIV_50MHZ
 (0x03 << 23)

	)

51 
	#RCC_USESYSDIV
 (1 << 22)

	)

52 
	#RCC_USEPWMDIV
 (1 << 20)

	)

54 
	#RCC_PWMDIV_MASK
 (0x07 << 17)

	)

55 
	#RCC_PWMDIV_64
 (0x07 << 17)

	)

57 
	#RCC_OFF
 (1 << 13)

	)

58 
	#RCC_BYPASS
 (1 << 11)

	)

60 
	#RCC_XTAL_MASK
 (0x0F << 6)

	)

62 
	#RCC_XTAL_6MHZ_RESET
 (0x0B << 6)

	)

63 
	#RCC_XTAL_8MHZ_400MHZ
 (0x0D << 6)

	)

66 
	#RCC_OSCRC_MASK
 (0x03 << 4)

	)

67 
	#RCC_OSCRC_MOSC
 (0x00 << 4)

	)

68 
	#RCC_OSCRC_IOSC
 (0x01 << 4)

	)

69 
	#RCC_OSCRC_IOSC_Q
 (0x02 << 4)

	)

70 
	#RCC_OSCRC_30KHZ
 (0x03 << 4)

	)

72 
	#RCC_IOSCDIS
 (1 << 1)

	)

73 
	#RCC_MOSCDIS
 (1 << 0)

	)

76 
	#RCC2_USERRCC2
 (1 << 31)

	)

77 
	#RCC2_SYSDIV2_MASK
 0x7f

	)

78 
	#RCC2_SYSDIV2_SHIFT
 23

	)

80 
	#RCC2_OFF
 (1 << 13)

	)

81 
	#RCC2_BYPASS
 (1 << 11)

	)

84 
	#RIS_PLLLRIS
 (1 << 6)

	)

94 
	#RCC_RESET_VALUE
 (0x078E3AD1)

	)

99 
	#RCC2_RESET_VALUE
 (0x07802810)

	)

101 
BEGIN_DECLS


103 
rcc_˛ock_£tup_ö_xèl_8mhz_out_50mhz
();

105 
	gEND_DECLS


	@libopencm3/include/libopencm3/lm3s/systemcontrol.h

36 #i‚de‡
LM3S_SYSTEMCONTROL_H


37 
	#LM3S_SYSTEMCONTROL_H


	)

41 
	~<lib›ícm3/cm3/comm⁄.h
>

43 
	#SYSTEMCONTROL_DID0
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x000)

	)

44 
	#SYSTEMCONTROL_DID1
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x004)

	)

45 
	#SYSTEMCONTROL_DC0
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x008)

	)

46 
	#SYSTEMCONTROL_DC1
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x010)

	)

47 
	#SYSTEMCONTROL_DC2
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x014)

	)

48 
	#SYSTEMCONTROL_DC3
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x018)

	)

49 
	#SYSTEMCONTROL_DC4
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x01C)

	)

50 
	#SYSTEMCONTROL_DC5
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x020)

	)

51 
	#SYSTEMCONTROL_DC6
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x024)

	)

52 
	#SYSTEMCONTROL_DC7
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x028)

	)

53 
	#SYSTEMCONTROL_PBORCTL
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x030)

	)

54 
	#SYSTEMCONTROL_LDORCTL
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x034)

	)

55 
	#SYSTEMCONTROL_SRCR0
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x040)

	)

56 
	#SYSTEMCONTROL_SRCR1
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x044)

	)

57 
	#SYSTEMCONTROL_SRCR2
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x048)

	)

58 
	#SYSTEMCONTROL_RIS
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x050)

	)

59 
	#SYSTEMCONTROL_IMC
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x054)

	)

60 
	#SYSTEMCONTROL_MISC
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x058)

	)

61 
	#SYSTEMCONTROL_RESC
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x05C)

	)

62 
	#SYSTEMCONTROL_RCC
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x060)

	)

63 
	#SYSTEMCONTROL_PLLCFG
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x064)

	)

64 
	#SYSTEMCONTROL_GPIOHBCTL
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x06C)

	)

65 
	#SYSTEMCONTROL_RCC2
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x070)

	)

66 
	#SYSTEMCONTROL_MOSCCTL
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x07C)

	)

67 
	#SYSTEMCONTROL_RCGC0
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x100)

	)

68 
	#SYSTEMCONTROL_RCGC1
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x104)

	)

69 
	#SYSTEMCONTROL_RCGC2
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x108)

	)

70 
	#SYSTEMCONTROL_SCGC0
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x110)

	)

71 
	#SYSTEMCONTROL_SCGC1
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x114)

	)

72 
	#SYSTEMCONTROL_SCGC2
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x118)

	)

73 
	#SYSTEMCONTROL_DCGC0
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x120)

	)

74 
	#SYSTEMCONTROL_DCGC1
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x124)

	)

75 
	#SYSTEMCONTROL_DCGC2
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x128)

	)

76 
	#SYSTEMCONTROL_DSLPCLKCFG
 
	`MMIO32
(
SYSTEMCONTROL_BASE
 + 0x144)

	)

	@libopencm3/include/libopencm3/lm3s/usart.h

20 #i‚de‡
LM3S_USART_H


21 
	#LM3S_USART_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

27 
	#USART0_BASE
 0x4000C000

	)

28 
	#USART1_BASE
 0x4000D000

	)

29 
	#USART2_BASE
 0x4000E000

	)

32 
	#USART_DR
(
x
Ë
	`MMIO32
((xË+ 0x0000)

	)

33 
	#USART_IR
(
x
Ë
	`MMIO32
((xË+ 0x0004)

	)

34 
	#USART_FR
(
x
Ë
	`MMIO32
((xË+ 0x0018)

	)

35 
	#USART_ILPR
(
x
Ë
	`MMIO32
((xË+ 0x0020)

	)

36 
	#USART_IBRD
(
x
Ë
	`MMIO32
((xË+ 0x0024)

	)

37 
	#USART_FBRD
(
x
Ë
	`MMIO32
((xË+ 0x0028)

	)

38 
	#USART_LCRH
(
x
Ë
	`MMIO32
((xË+ 0x002c)

	)

39 
	#USART_CTL
(
x
Ë
	`MMIO32
((xË+ 0x0030)

	)

40 
	#USART_IFLS
(
x
Ë
	`MMIO32
((xË+ 0x0034)

	)

41 
	#USART_IM
(
x
Ë
	`MMIO32
((xË+ 0x0038)

	)

42 
	#USART_RIS
(
x
Ë
	`MMIO32
((xË+ 0x003c)

	)

43 
	#USART_MIS
(
x
Ë
	`MMIO32
((xË+ 0x0040)

	)

44 
	#USART_IC
(
x
Ë
	`MMIO32
((xË+ 0x0044)

	)

48 
	#USART_DR_OE
 (0x01 << 11)

	)

49 
	#USART_DR_BE
 (0x01 << 10)

	)

50 
	#USART_DR_PE
 (0x01 << 9)

	)

51 
	#USART_DR_FE
 (0x01 << 8)

	)

55 
	#USART_FR_TXFE
 (0x01 << 7)

	)

56 
	#USART_FR_RXFF
 (0x01 << 6)

	)

57 
	#USART_FR_TXFF
 (0x01 << 5)

	)

58 
	#USART_FR_RXFE
 (0x01 << 4)

	)

59 
	#USART_FR_BUSY
 (0x01 << 3)

	)

64 
	#USART_IM_OE
 (0x01 << 10)

	)

65 
	#USART_IM_BE
 (0x01 << 9)

	)

66 
	#USART_IM_PE
 (0x01 << 8)

	)

67 
	#USART_IM_FE
 (0x01 << 7)

	)

68 
	#USART_IM_RT
 (0x01 << 6)

	)

69 
	#USART_IM_TX
 (0x01 << 5)

	)

70 
	#USART_IM_RX
 (0x01 << 4)

	)

75 
	#USART_IC_OE
 (0x01 << 10)

	)

76 
	#USART_IC_BE
 (0x01 << 9)

	)

77 
	#USART_IC_PE
 (0x01 << 8)

	)

78 
	#USART_IC_FE
 (0x01 << 7)

	)

79 
	#USART_IC_RT
 (0x01 << 6)

	)

80 
	#USART_IC_TX
 (0x01 << 5)

	)

81 
	#USART_IC_RX
 (0x01 << 4)

	)

84 
	eußπ_°›bôs
 {

85 
	mUSART_STOPBITS_1
,

86 
	mUSART_STOPBITS_1_5
,

87 
	mUSART_STOPBITS_2
,

90 
	eußπ_∑rôy
 {

91 
	mUSART_PARITY_NONE
,

92 
	mUSART_PARITY_ODD
,

93 
	mUSART_PARITY_EVEN
,

96 
	eußπ_mode
 {

97 
	mUSART_MODE_DISABLED
,

98 
	mUSART_MODE_RX
,

99 
	mUSART_MODE_TX
,

100 
	mUSART_MODE_TX_RX
,

103 
	eußπ_Êowc⁄åﬁ
 {

104 
	mUSART_FLOWCONTROL_NONE
,

105 
	mUSART_FLOWCONTROL_RTS_CTS
,

108 
ußπ_£nd
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
);

109 
uöt16_t
 
ußπ_ªcv
(
uöt32_t
 
ußπ
);

110 
boﬁ
 
ußπ_is_£nd_ªady
(
uöt32_t
 
ußπ
);

111 
boﬁ
 
ußπ_is_ªcv_ªady
(
uöt32_t
 
ußπ
);

112 
ußπ_£nd_blockög
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
);

113 
uöt16_t
 
ußπ_ªcv_blockög
(
uöt32_t
 
ußπ
);

114 
ußπ_íabÀ_rx_öãºu±
(
uöt32_t
 
ußπ
);

115 
ußπ_dißbÀ_rx_öãºu±
(
uöt32_t
 
ußπ
);

116 
ußπ_˛ór_rx_öãºu±
(
uöt32_t
 
ußπ
);

117 
ußπ_íabÀ_tx_öãºu±
(
uöt32_t
 
ußπ
);

118 
ußπ_dißbÀ_tx_öãºu±
(
uöt32_t
 
ußπ
);

119 
ußπ_˛ór_tx_öãºu±
(
uöt32_t
 
ußπ
);

120 
boﬁ
 
ußπ_gë_öãºu±_sour˚
(
uöt32_t
 
ußπ
, uöt32_à
Êag
);

	@libopencm3/include/libopencm3/lm4f/doc-lm4f.h

	@libopencm3/include/libopencm3/lm4f/gpio.h

39 #i‚de‡
LM4F_GPIO_H


40 
	#LM4F_GPIO_H


	)

44 
	~<lib›ícm3/cm3/comm⁄.h
>

45 
	~<lib›ícm3/lm4f/mem‹ym≠.h
>

52 
	#GPIOA
 
GPIOA_BASE


	)

53 
	#GPIOB
 
GPIOB_BASE


	)

54 
	#GPIOC
 
GPIOC_BASE


	)

55 
	#GPIOD
 
GPIOD_BASE


	)

56 
	#GPIOE
 
GPIOE_BASE


	)

57 
	#GPIOF
 
GPIOF_BASE


	)

58 
	#GPIOG
 
GPIOG_BASE


	)

59 
	#GPIOH
 
GPIOH_BASE


	)

60 
	#GPIOJ
 
GPIOJ_BASE


	)

61 
	#GPIOK
 
GPIOK_BASE


	)

62 
	#GPIOL
 
GPIOL_BASE


	)

63 
	#GPIOM
 
GPIOM_BASE


	)

64 
	#GPION
 
GPION_BASE


	)

65 
	#GPIOP
 
GPIOP_BASE


	)

66 
	#GPIOQ
 
GPIOQ_BASE


	)

77 
	#GPIO0
 (1 << 0)

	)

78 
	#GPIO1
 (1 << 1)

	)

79 
	#GPIO2
 (1 << 2)

	)

80 
	#GPIO3
 (1 << 3)

	)

81 
	#GPIO4
 (1 << 4)

	)

82 
	#GPIO5
 (1 << 5)

	)

83 
	#GPIO6
 (1 << 6)

	)

84 
	#GPIO7
 (1 << 7)

	)

85 
	#GPIO_ALL
 0xff

	)

93 
	#GPIO_DATA
(
p‹t
Ë(&
	`MMIO32
(’‹tË+ 0x000))

	)

96 
	#GPIO_DIR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x400)

	)

99 
	#GPIO_IS
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x404)

	)

102 
	#GPIO_IBE
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x408)

	)

105 
	#GPIO_IEV
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x40c)

	)

108 
	#GPIO_IM
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x410)

	)

111 
	#GPIO_RIS
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x414)

	)

114 
	#GPIO_MIS
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x418)

	)

117 
	#GPIO_ICR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x41c)

	)

120 
	#GPIO_AFSEL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x420)

	)

123 
	#GPIO_DR2R
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x500)

	)

126 
	#GPIO_DR4R
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x504)

	)

129 
	#GPIO_DR8R
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x508)

	)

132 
	#GPIO_ODR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x50c)

	)

135 
	#GPIO_PUR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x510)

	)

138 
	#GPIO_PDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x514)

	)

141 
	#GPIO_SLR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x518)

	)

144 
	#GPIO_DEN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x51c)

	)

147 
	#GPIO_LOCK
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x520)

	)

150 
	#GPIO_CR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x524)

	)

153 
	#GPIO_AMSEL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x528)

	)

156 
	#GPIO_PCTL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x52C)

	)

159 
	#GPIO_ADCCTL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x530)

	)

162 
	#GPIO_DMACTL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x534)

	)

165 
	#GPIO_PERIPH_ID4
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFD0)

	)

166 
	#GPIO_PERIPH_ID5
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFD4)

	)

167 
	#GPIO_PERIPH_ID6
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFD8)

	)

168 
	#GPIO_PERIPH_ID7
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFDC)

	)

169 
	#GPIO_PERIPH_ID0
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFE0)

	)

170 
	#GPIO_PERIPH_ID1
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFE4)

	)

171 
	#GPIO_PERIPH_ID2
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFE8)

	)

172 
	#GPIO_PERIPH_ID3
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFEC)

	)

175 
	#GPIO_PCELL_ID0
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFF0)

	)

176 
	#GPIO_PCELL_ID1
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFF4)

	)

177 
	#GPIO_PCELL_ID2
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFF8)

	)

178 
	#GPIO_PCELL_ID3
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFFC)

	)

183 
	egpio_mode
 {

184 
	mGPIO_MODE_OUTPUT
,

185 
	mGPIO_MODE_INPUT
,

186 
	mGPIO_MODE_ANALOG
,

189 
	egpio_puŒup
 {

190 
	mGPIO_PUPD_NONE
,

191 
	mGPIO_PUPD_PULLUP
,

192 
	mGPIO_PUPD_PULLDOWN
,

195 
	egpio_ouçut_ty≥
 {

196 
	mGPIO_OTYPE_PP
,

197 
	mGPIO_OTYPE_OD
,

200 
	egpio_drive_°ªngth
 {

201 
	mGPIO_DRIVE_2MA
,

202 
	mGPIO_DRIVE_4MA
,

203 
	mGPIO_DRIVE_8MA
,

204 
	mGPIO_DRIVE_8MA_SLEW_CTL
,

207 
	egpio_åiggî
 {

208 
	mGPIO_TRIG_LVL_LOW
,

209 
	mGPIO_TRIG_LVL_HIGH
,

210 
	mGPIO_TRIG_EDGE_FALL
,

211 
	mGPIO_TRIG_EDGE_RISE
,

212 
	mGPIO_TRIG_EDGE_BOTH
,

217 
BEGIN_DECLS


219 
gpio_íabÀ_ahb_≠îtuª
();

220 
gpio_mode_£tup
(
uöt32_t
 
gpi›‹t
, 
gpio_mode
 
mode
,

221 
gpio_puŒup
 
puŒup
, 
uöt8_t
 
gpios
);

222 
gpio_£t_ouçut_c⁄fig
(
uöt32_t
 
gpi›‹t
, 
gpio_ouçut_ty≥
 
Ÿy≥
,

223 
gpio_drive_°ªngth
 
drive
, 
uöt8_t
 
gpios
);

224 
gpio_£t_af
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
Æt_func_num
, uöt8_à
gpios
);

226 
gpio_toggÀ
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
);

227 
gpio_u∆ock_commô
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
);

249 
ölöe
 
uöt8_t
 
	$gpio_ªad
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
)

251  
	`GPIO_DATA
(
gpi›‹t
)[
gpios
];

252 
	}
}

269 
ölöe
 
	$gpio_wrôe
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
, uöt8_à
d©a
)

272 
	`GPIO_DATA
(
gpi›‹t
)[
gpios
] = 
d©a
;

273 
	}
}

284 
ölöe
 
	$gpio_£t
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
)

286 
	`gpio_wrôe
(
gpi›‹t
, 
gpios
, 0xff);

287 
	}
}

298 
ölöe
 
	$gpio_˛ór
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
)

300 
	`gpio_wrôe
(
gpi›‹t
, 
gpios
, 0);

301 
	}
}

314 
ölöe
 
uöt8_t
 
	$gpio_p‹t_ªad
(
uöt32_t
 
gpi›‹t
)

316  
	`gpio_ªad
(
gpi›‹t
, 
GPIO_ALL
);

317 
	}
}

333 
ölöe
 
	$gpio_p‹t_wrôe
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
d©a
)

335 
	`gpio_wrôe
(
gpi›‹t
, 
GPIO_ALL
, 
d©a
);

336 
	}
}

339 
gpio_c⁄figuª_åiggî
(
uöt32_t
 
gpi›‹t
, 
gpio_åiggî
 
åiggî
,

340 
uöt8_t
 
gpios
);

341 
gpio_íabÀ_öãºu±s
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
);

342 
gpio_dißbÀ_öãºu±s
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
);

353 
ölöe
 
boﬁ
 
	$gpio_is_öãºu±_sour˚
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
§˝ös
)

355  
	`GPIO_MIS
(
gpi›‹t
Ë& 
§˝ös
;

356 
	}
}

369 
ölöe
 
	$gpio_˛ór_öãºu±_Êag
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
)

371 
	`GPIO_ICR
(
gpi›‹t
Ë|
gpios
;

372 
	}
}

375 
	gEND_DECLS


	@libopencm3/include/libopencm3/lm4f/memorymap.h

20 #i‚de‡
LM4F_MEMORYMAP_H


21 
	#LM4F_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

27 
	#GPIOA_APB_BASE
 (0x40004000U)

	)

28 
	#GPIOB_APB_BASE
 (0x40005000U)

	)

29 
	#GPIOC_APB_BASE
 (0x40006000U)

	)

30 
	#GPIOD_APB_BASE
 (0x40007000U)

	)

31 
	#GPIOE_APB_BASE
 (0x40024000U)

	)

32 
	#GPIOF_APB_BASE
 (0x40025000U)

	)

33 
	#GPIOG_APB_BASE
 (0x40026000U)

	)

34 
	#GPIOH_APB_BASE
 (0x40027000U)

	)

35 
	#GPIOJ_APB_BASE
 (0x4003D000U)

	)

37 
	#GPIOA_BASE
 (0x40058000U)

	)

38 
	#GPIOB_BASE
 (0x40059000U)

	)

39 
	#GPIOC_BASE
 (0x4005A000U)

	)

40 
	#GPIOD_BASE
 (0x4005B000U)

	)

41 
	#GPIOE_BASE
 (0x4005C000U)

	)

42 
	#GPIOF_BASE
 (0x4005D000U)

	)

43 
	#GPIOG_BASE
 (0x4005E000U)

	)

44 
	#GPIOH_BASE
 (0x4005F000U)

	)

45 
	#GPIOJ_BASE
 (0x40060000U)

	)

46 
	#GPIOK_BASE
 (0x40061000U)

	)

47 
	#GPIOL_BASE
 (0x40062000U)

	)

48 
	#GPIOM_BASE
 (0x40063000U)

	)

49 
	#GPION_BASE
 (0x40064000U)

	)

50 
	#GPIOP_BASE
 (0x40065000U)

	)

51 
	#GPIOQ_BASE
 (0x40066000U)

	)

53 
	#UART0_BASE
 (0x4000C000U)

	)

54 
	#UART1_BASE
 (0x4000D000U)

	)

55 
	#UART2_BASE
 (0x4000E000U)

	)

56 
	#UART3_BASE
 (0x4000F000U)

	)

57 
	#UART4_BASE
 (0x40010000U)

	)

58 
	#UART5_BASE
 (0x40011000U)

	)

59 
	#UART6_BASE
 (0x40012000U)

	)

60 
	#UART7_BASE
 (0x40013000U)

	)

62 
	#SSI0_BASE
 (0x40008000U)

	)

63 
	#SSI1_BASE
 (0x40009000U)

	)

64 
	#SSI2_BASE
 (0x4000A000U)

	)

65 
	#SSI3_BASE
 (0x4000B000U)

	)

67 
	#USB_BASE
 (0x40050000U)

	)

69 
	#SYSCTL_BASE
 (0x400FE000U)

	)

	@libopencm3/include/libopencm3/lm4f/nvic.h

37 #i‚de‡
LIBOPENCM3_LM4F_NVIC_H


38 
	#LIBOPENCM3_LM4F_NVIC_H


	)

42 
	~<lib›ícm3/cm3/nvic.h
>

51 
	~<lib›ícm3/lm3s/nvic.h
>

	@libopencm3/include/libopencm3/lm4f/rcc.h

36 #i‚de‡
LM4F_RCC_H


37 
	#LM4F_RCC_H


	)

41 
	~<lib›ícm3/lm4f/sy°emc⁄åﬁ.h
>

48 
	eosc_§c
 {

49 
	mOSCSRC_MOSC
 = 
SYSCTL_RCC2_OSCSRC2_MOSC
,

50 
	mOSCSRC_PIOSC
 = 
SYSCTL_RCC2_OSCSRC2_PIOSC
,

51 
	mOSCSRC_PIOSC_D4
 = 
SYSCTL_RCC2_OSCSRC2_PIOSC_D4
,

52 
	mOSCSRC_30K_INT
 = 
SYSCTL_RCC2_OSCSRC2_30K
,

53 
	mOSCSRC_32K_EXT
 = 
SYSCTL_RCC2_OSCSRC2_32K768
,

62 
	epwm_˛kdiv
 {

63 
	mPWMDIV_2
 = 
SYSCTL_RCC_PWMDIV_2
,

64 
	mPWMDIV_4
 = 
SYSCTL_RCC_PWMDIV_4
,

65 
	mPWMDIV_8
 = 
SYSCTL_RCC_PWMDIV_8
,

66 
	mPWMDIV_16
 = 
SYSCTL_RCC_PWMDIV_16
,

67 
	mPWMDIV_32
 = 
SYSCTL_RCC_PWMDIV_32
,

68 
	mPWMDIV_64
 = 
SYSCTL_RCC_PWMDIV_64
,

79 
	exèl_t
 {

80 
	mXTAL_4M
 = 
SYSCTL_RCC_XTAL_4M
,

81 
	mXTAL_4M_096
 = 
SYSCTL_RCC_XTAL_4M_096
,

82 
	mXTAL_4M_9152
 = 
SYSCTL_RCC_XTAL_4M_9152
,

83 
	mXTAL_5M
 = 
SYSCTL_RCC_XTAL_5M
,

84 
	mXTAL_5M_12
 = 
SYSCTL_RCC_XTAL_5M_12
,

85 
	mXTAL_6M
 = 
SYSCTL_RCC_XTAL_6M
,

86 
	mXTAL_6M_144
 = 
SYSCTL_RCC_XTAL_6M_144
,

87 
	mXTAL_7M_3728
 = 
SYSCTL_RCC_XTAL_7M_3728
,

88 
	mXTAL_8M
 = 
SYSCTL_RCC_XTAL_8M
,

89 
	mXTAL_8M_192
 = 
SYSCTL_RCC_XTAL_8M_192
,

90 
	mXTAL_10M
 = 
SYSCTL_RCC_XTAL_10M
,

91 
	mXTAL_12M
 = 
SYSCTL_RCC_XTAL_12M
,

92 
	mXTAL_12M_288
 = 
SYSCTL_RCC_XTAL_12M_288
,

93 
	mXTAL_13M_56
 = 
SYSCTL_RCC_XTAL_13M_56
,

94 
	mXTAL_14M_31818
 = 
SYSCTL_RCC_XTAL_14M_31818
,

95 
	mXTAL_16M
 = 
SYSCTL_RCC_XTAL_16M
,

96 
	mXTAL_16M_384
 = 
SYSCTL_RCC_XTAL_16M_384
,

97 
	mXTAL_18M
 = 
SYSCTL_RCC_XTAL_18M
,

98 
	mXTAL_20M
 = 
SYSCTL_RCC_XTAL_20M
,

99 
	mXTAL_24M
 = 
SYSCTL_RCC_XTAL_24M
,

100 
	mXTAL_25M
 = 
SYSCTL_RCC_XTAL_25M
,

106 
BEGIN_DECLS


108 
rcc_c⁄figuª_xèl
(
xèl_t
 
xèl
);

109 
rcc_dißbÀ_maö_osc
();

110 
rcc_dißbÀ_öãøl_osc
();

111 
rcc_íabÀ_maö_osc
();

112 
rcc_íabÀ_öãøl_osc
();

113 
rcc_íabÀ_rcc2
();

114 
rcc_∂l_off
();

115 
rcc_∂l_⁄
();

116 
rcc_£t_osc_sour˚
(
osc_§c
 
§c
);

117 
rcc_∂l_by∑ss_dißbÀ
();

118 
rcc_∂l_by∑ss_íabÀ
();

119 
rcc_£t_∂l_divis‹
(
uöt8_t
 
div400
);

120 
rcc_£t_pwm_divis‹
(
pwm_˛kdiv
 
div
);

121 
rcc_usb_∂l_off
();

122 
rcc_usb_∂l_⁄
();

123 
rcc_waô_f‹_∂l_ªady
();

125 
rcc_ch™ge_∂l_divis‹
(
uöt8_t
 
∂ldiv400
);

126 
uöt32_t
 
rcc_gë_sy°em_˛ock_‰equícy
();

127 
rcc_sys˛k_c⁄fig
(
osc_§c
 
§c
, 
xèl_t
 
xèl
, 
uöt8_t
 
∂l_div400
);

129 
	gEND_DECLS


	@libopencm3/include/libopencm3/lm4f/ssi.h

36 #i‚de‡
LM4F_SSI_H


37 
	#LM4F_SSI_H


	)

41 
	~<lib›ícm3/cm3/comm⁄.h
>

42 
	~<lib›ícm3/lm4f/mem‹ym≠.h
>

49 
	#SSI0
 
SSI0_BASE


	)

50 
	#SSI1
 
SSI1_BASE


	)

51 
	#SSI2
 
SSI2_BASE


	)

52 
	#SSI3
 
SSI3_BASE


	)

60 
	#SSI_CR0
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x000)

	)

63 
	#SSI_CR1
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x004)

	)

66 
	#SSI_DR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x008)

	)

69 
	#SSI_SR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00C)

	)

72 
	#SSI_CPSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x010)

	)

75 
	#SSI_IM
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x014)

	)

78 
	#SSI_RIS
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x018)

	)

81 
	#SSI_MIS
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x01C)

	)

84 
	#SSI_ICR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x020)

	)

87 
	#SSI_DMACTL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x024)

	)

90 
	#SSI_CC
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFC8)

	)

93 
	#SSI_PERIPH_ID4
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFD0)

	)

94 
	#SSI_PERIPH_ID5
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFD4)

	)

95 
	#SSI_PERIPH_ID6
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFD8)

	)

96 
	#SSI_PERIPH_ID7
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFDC)

	)

97 
	#SSI_PERIPH_ID0
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFE0)

	)

98 
	#SSI_PERIPH_ID1
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFE4)

	)

99 
	#SSI_PERIPH_ID2
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFE8)

	)

100 
	#SSI_PERIPH_ID3
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFEC)

	)

103 
	#SSI_PCELL_ID0
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFF0)

	)

104 
	#SSI_PCELL_ID1
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFF4)

	)

105 
	#SSI_PCELL_ID2
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFF8)

	)

106 
	#SSI_PCELL_ID3
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0xFFC)

	)

111 
BEGIN_DECLS


113 
	gEND_DECLS


	@libopencm3/include/libopencm3/lm4f/systemcontrol.h

35 #i‚de‡
LM4F_SYSTEMCONTROL_H


36 
	#LM4F_SYSTEMCONTROL_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/lm4f/mem‹ym≠.h
>

43 
	#SYSCTL_DID0
 
	`MMIO32
(
SYSCTL_BASE
 + 0x000)

	)

44 
	#SYSCTL_DID1
 
	`MMIO32
(
SYSCTL_BASE
 + 0x004)

	)

45 
	#SYSCTL_PBORCTL
 
	`MMIO32
(
SYSCTL_BASE
 + 0x030)

	)

46 
	#SYSCTL_LDORCTL
 
	`MMIO32
(
SYSCTL_BASE
 + 0x034)

	)

47 
	#SYSCTL_RIS
 
	`MMIO32
(
SYSCTL_BASE
 + 0x050)

	)

48 
	#SYSCTL_IMC
 
	`MMIO32
(
SYSCTL_BASE
 + 0x054)

	)

49 
	#SYSCTL_MISC
 
	`MMIO32
(
SYSCTL_BASE
 + 0x058)

	)

50 
	#SYSCTL_RESC
 
	`MMIO32
(
SYSCTL_BASE
 + 0x05C)

	)

51 
	#SYSCTL_RCC
 
	`MMIO32
(
SYSCTL_BASE
 + 0x060)

	)

52 
	#SYSCTL_PLLCFG
 
	`MMIO32
(
SYSCTL_BASE
 + 0x064)

	)

53 
	#SYSCTL_GPIOHBCTL
 
	`MMIO32
(
SYSCTL_BASE
 + 0x06C)

	)

54 
	#SYSCTL_RCC2
 
	`MMIO32
(
SYSCTL_BASE
 + 0x070)

	)

55 
	#SYSCTL_MOSCCTL
 
	`MMIO32
(
SYSCTL_BASE
 + 0x07C)

	)

56 
	#SYSCTL_DSLPCLKCFG
 
	`MMIO32
(
SYSCTL_BASE
 + 0x144)

	)

57 
	#SYSCTL_SYSPROP
 
	`MMIO32
(
SYSCTL_BASE
 + 0x14C)

	)

58 
	#SYSCTL_PIOSCCAL
 
	`MMIO32
(
SYSCTL_BASE
 + 0x150)

	)

59 
	#SYSCTL_PIOSCSTAT
 
	`MMIO32
(
SYSCTL_BASE
 + 0x154)

	)

60 
	#SYSCTL_PLLFREQ0
 
	`MMIO32
(
SYSCTL_BASE
 + 0x160)

	)

61 
	#SYSCTL_PLLFREQ1
 
	`MMIO32
(
SYSCTL_BASE
 + 0x164)

	)

62 
	#SYSCTL_PLLSTAT
 
	`MMIO32
(
SYSCTL_BASE
 + 0x168)

	)

64 
	#SYSCTL_PPWD
 
	`MMIO32
(
SYSCTL_BASE
 + 0x300)

	)

65 
	#SYSCTL_PPTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0x304)

	)

66 
	#SYSCTL_PPGPIO
 
	`MMIO32
(
SYSCTL_BASE
 + 0x308)

	)

67 
	#SYSCTL_PPDMA
 
	`MMIO32
(
SYSCTL_BASE
 + 0x30C)

	)

68 
	#SYSCTL_PPHIB
 
	`MMIO32
(
SYSCTL_BASE
 + 0x314)

	)

69 
	#SYSCTL_PPUART
 
	`MMIO32
(
SYSCTL_BASE
 + 0x318)

	)

70 
	#SYSCTL_PPSSI
 
	`MMIO32
(
SYSCTL_BASE
 + 0x31C)

	)

71 
	#SYSCTL_PPI2C
 
	`MMIO32
(
SYSCTL_BASE
 + 0x320)

	)

72 
	#SYSCTL_PPUSB
 
	`MMIO32
(
SYSCTL_BASE
 + 0x328)

	)

73 
	#SYSCTL_PPCAN
 
	`MMIO32
(
SYSCTL_BASE
 + 0x334)

	)

74 
	#SYSCTL_PPADC
 
	`MMIO32
(
SYSCTL_BASE
 + 0x338)

	)

75 
	#SYSCTL_PPACMP
 
	`MMIO32
(
SYSCTL_BASE
 + 0x33C)

	)

76 
	#SYSCTL_PPPWM
 
	`MMIO32
(
SYSCTL_BASE
 + 0x340)

	)

77 
	#SYSCTL_PPQEI
 
	`MMIO32
(
SYSCTL_BASE
 + 0x344)

	)

78 
	#SYSCTL_PPEEPROM
 
	`MMIO32
(
SYSCTL_BASE
 + 0x358)

	)

79 
	#SYSCTL_PPWTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0x35C)

	)

81 
	#SYSCTL_SRWD
 
	`MMIO32
(
SYSCTL_BASE
 + 0x500)

	)

82 
	#SYSCTL_SRTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0x504)

	)

83 
	#SYSCTL_SRGPIO
 
	`MMIO32
(
SYSCTL_BASE
 + 0x508)

	)

84 
	#SYSCTL_SRDMA
 
	`MMIO32
(
SYSCTL_BASE
 + 0x50C)

	)

85 
	#SYSCTL_SRHIB
 
	`MMIO32
(
SYSCTL_BASE
 + 0x514)

	)

86 
	#SYSCTL_SRUART
 
	`MMIO32
(
SYSCTL_BASE
 + 0x518)

	)

87 
	#SYSCTL_SRSSI
 
	`MMIO32
(
SYSCTL_BASE
 + 0x51C)

	)

88 
	#SYSCTL_SRI2C
 
	`MMIO32
(
SYSCTL_BASE
 + 0x520)

	)

89 
	#SYSCTL_SRUSB
 
	`MMIO32
(
SYSCTL_BASE
 + 0x528)

	)

90 
	#SYSCTL_SRCAN
 
	`MMIO32
(
SYSCTL_BASE
 + 0x534)

	)

91 
	#SYSCTL_SRADC
 
	`MMIO32
(
SYSCTL_BASE
 + 0x538)

	)

92 
	#SYSCTL_SRACMP
 
	`MMIO32
(
SYSCTL_BASE
 + 0x53C)

	)

93 
	#SYSCTL_SRPWM
 
	`MMIO32
(
SYSCTL_BASE
 + 0x540)

	)

94 
	#SYSCTL_SRQEI
 
	`MMIO32
(
SYSCTL_BASE
 + 0x544)

	)

95 
	#SYSCTL_SREEPROM
 
	`MMIO32
(
SYSCTL_BASE
 + 0x558)

	)

96 
	#SYSCTL_SRWTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0x55C)

	)

98 
	#SYSCTL_RCGCWD
 
	`MMIO32
(
SYSCTL_BASE
 + 0x600)

	)

99 
	#SYSCTL_RCGCTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0x604)

	)

100 
	#SYSCTL_RCGCGPIO
 
	`MMIO32
(
SYSCTL_BASE
 + 0x608)

	)

101 
	#SYSCTL_RCGCDMA
 
	`MMIO32
(
SYSCTL_BASE
 + 0x60C)

	)

102 
	#SYSCTL_RCGCHIB
 
	`MMIO32
(
SYSCTL_BASE
 + 0x614)

	)

103 
	#SYSCTL_RCGCUART
 
	`MMIO32
(
SYSCTL_BASE
 + 0x618)

	)

104 
	#SYSCTL_RCGCSSI
 
	`MMIO32
(
SYSCTL_BASE
 + 0x61C)

	)

105 
	#SYSCTL_RCGCI2C
 
	`MMIO32
(
SYSCTL_BASE
 + 0x620)

	)

106 
	#SYSCTL_RCGCUSB
 
	`MMIO32
(
SYSCTL_BASE
 + 0x628)

	)

107 
	#SYSCTL_RCGCCAN
 
	`MMIO32
(
SYSCTL_BASE
 + 0x634)

	)

108 
	#SYSCTL_RCGCADC
 
	`MMIO32
(
SYSCTL_BASE
 + 0x638)

	)

109 
	#SYSCTL_RCGCACMP
 
	`MMIO32
(
SYSCTL_BASE
 + 0x63C)

	)

110 
	#SYSCTL_RCGCPWM
 
	`MMIO32
(
SYSCTL_BASE
 + 0x640)

	)

111 
	#SYSCTL_RCGCQEI
 
	`MMIO32
(
SYSCTL_BASE
 + 0x644)

	)

112 
	#SYSCTL_RCGCEEPROM
 
	`MMIO32
(
SYSCTL_BASE
 + 0x658)

	)

113 
	#SYSCTL_RCGCWTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0x65C)

	)

115 
	#SYSCTL_SCGCWD
 
	`MMIO32
(
SYSCTL_BASE
 + 0x700)

	)

116 
	#SYSCTL_SCGCTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0x704)

	)

117 
	#SYSCTL_SCGCGPIO
 
	`MMIO32
(
SYSCTL_BASE
 + 0x708)

	)

118 
	#SYSCTL_SCGCDMA
 
	`MMIO32
(
SYSCTL_BASE
 + 0x70C)

	)

119 
	#SYSCTL_SCGCHIB
 
	`MMIO32
(
SYSCTL_BASE
 + 0x714)

	)

120 
	#SYSCTL_SCGCUART
 
	`MMIO32
(
SYSCTL_BASE
 + 0x718)

	)

121 
	#SYSCTL_SCGCSSI
 
	`MMIO32
(
SYSCTL_BASE
 + 0x71C)

	)

122 
	#SYSCTL_SCGCI2C
 
	`MMIO32
(
SYSCTL_BASE
 + 0x720)

	)

123 
	#SYSCTL_SCGCUSB
 
	`MMIO32
(
SYSCTL_BASE
 + 0x728)

	)

124 
	#SYSCTL_SCGCCAN
 
	`MMIO32
(
SYSCTL_BASE
 + 0x734)

	)

125 
	#SYSCTL_SCGCADC
 
	`MMIO32
(
SYSCTL_BASE
 + 0x738)

	)

126 
	#SYSCTL_SCGCACMP
 
	`MMIO32
(
SYSCTL_BASE
 + 0x73C)

	)

127 
	#SYSCTL_SCGCPWM
 
	`MMIO32
(
SYSCTL_BASE
 + 0x740)

	)

128 
	#SYSCTL_SCGCQEI
 
	`MMIO32
(
SYSCTL_BASE
 + 0x744)

	)

129 
	#SYSCTL_SCGCEEPROM
 
	`MMIO32
(
SYSCTL_BASE
 + 0x758)

	)

130 
	#SYSCTL_SCGCWTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0x75C)

	)

132 
	#SYSCTL_DCGCWD
 
	`MMIO32
(
SYSCTL_BASE
 + 0x800)

	)

133 
	#SYSCTL_DCGCTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0x804)

	)

134 
	#SYSCTL_DCGCGPIO
 
	`MMIO32
(
SYSCTL_BASE
 + 0x808)

	)

135 
	#SYSCTL_DCGCDMA
 
	`MMIO32
(
SYSCTL_BASE
 + 0x80C)

	)

136 
	#SYSCTL_DCGCHIB
 
	`MMIO32
(
SYSCTL_BASE
 + 0x814)

	)

137 
	#SYSCTL_DCGCUART
 
	`MMIO32
(
SYSCTL_BASE
 + 0x818)

	)

138 
	#SYSCTL_DCGCSSI
 
	`MMIO32
(
SYSCTL_BASE
 + 0x81C)

	)

139 
	#SYSCTL_DCGCI2C
 
	`MMIO32
(
SYSCTL_BASE
 + 0x820)

	)

140 
	#SYSCTL_DCGCUSB
 
	`MMIO32
(
SYSCTL_BASE
 + 0x828)

	)

141 
	#SYSCTL_DCGCCAN
 
	`MMIO32
(
SYSCTL_BASE
 + 0x834)

	)

142 
	#SYSCTL_DCGCADC
 
	`MMIO32
(
SYSCTL_BASE
 + 0x838)

	)

143 
	#SYSCTL_DCGCACMP
 
	`MMIO32
(
SYSCTL_BASE
 + 0x83C)

	)

144 
	#SYSCTL_DCGCPWM
 
	`MMIO32
(
SYSCTL_BASE
 + 0x840)

	)

145 
	#SYSCTL_DCGCQEI
 
	`MMIO32
(
SYSCTL_BASE
 + 0x844)

	)

146 
	#SYSCTL_DCGCEEPROM
 
	`MMIO32
(
SYSCTL_BASE
 + 0x858)

	)

147 
	#SYSCTL_DCGCWTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0x85C)

	)

149 
	#SYSCTL_PRWD
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA00)

	)

150 
	#SYSCTL_PRTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA04)

	)

151 
	#SYSCTL_PRGPIO
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA08)

	)

152 
	#SYSCTL_PRDMA
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA0C)

	)

153 
	#SYSCTL_PRHIB
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA14)

	)

154 
	#SYSCTL_PRUART
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA18)

	)

155 
	#SYSCTL_PRSSI
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA1C)

	)

156 
	#SYSCTL_PRI2C
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA20)

	)

157 
	#SYSCTL_PRUSB
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA28)

	)

158 
	#SYSCTL_PRCAN
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA34)

	)

159 
	#SYSCTL_PRADC
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA38)

	)

160 
	#SYSCTL_PRACMP
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA3C)

	)

161 
	#SYSCTL_PRPWM
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA40)

	)

162 
	#SYSCTL_PRQEI
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA44)

	)

163 
	#SYSCTL_PREEPROM
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA58)

	)

164 
	#SYSCTL_PRWTIMER
 
	`MMIO32
(
SYSCTL_BASE
 + 0xA5C)

	)

168 #ifde‡
LM4F_LEGACY_SYSCTL


169 
	#SYSCTL_DC0
 
	`MMIO32
(
SYSCTL_BASE
 + 0x008)

	)

170 
	#SYSCTL_DC1
 
	`MMIO32
(
SYSCTL_BASE
 + 0x010)

	)

171 
	#SYSCTL_DC2
 
	`MMIO32
(
SYSCTL_BASE
 + 0x014)

	)

172 
	#SYSCTL_DC3
 
	`MMIO32
(
SYSCTL_BASE
 + 0x018)

	)

173 
	#SYSCTL_DC4
 
	`MMIO32
(
SYSCTL_BASE
 + 0x01C)

	)

174 
	#SYSCTL_DC5
 
	`MMIO32
(
SYSCTL_BASE
 + 0x020)

	)

175 
	#SYSCTL_DC6
 
	`MMIO32
(
SYSCTL_BASE
 + 0x024)

	)

176 
	#SYSCTL_DC7
 
	`MMIO32
(
SYSCTL_BASE
 + 0x028)

	)

177 
	#SYSCTL_DC8
 
	`MMIO32
(
SYSCTL_BASE
 + 0x02C)

	)

178 
	#SYSCTL_SRCR0
 
	`MMIO32
(
SYSCTL_BASE
 + 0x040)

	)

179 
	#SYSCTL_SRCR1
 
	`MMIO32
(
SYSCTL_BASE
 + 0x044)

	)

180 
	#SYSCTL_SRCR2
 
	`MMIO32
(
SYSCTL_BASE
 + 0x048)

	)

181 
	#SYSCTL_RCGC0
 
	`MMIO32
(
SYSCTL_BASE
 + 0x100)

	)

182 
	#SYSCTL_RCGC1
 
	`MMIO32
(
SYSCTL_BASE
 + 0x104)

	)

183 
	#SYSCTL_RCGC2
 
	`MMIO32
(
SYSCTL_BASE
 + 0x108)

	)

184 
	#SYSCTL_SCGC0
 
	`MMIO32
(
SYSCTL_BASE
 + 0x110)

	)

185 
	#SYSCTL_SCGC1
 
	`MMIO32
(
SYSCTL_BASE
 + 0x114)

	)

186 
	#SYSCTL_SCGC2
 
	`MMIO32
(
SYSCTL_BASE
 + 0x118)

	)

187 
	#SYSCTL_DCGC0
 
	`MMIO32
(
SYSCTL_BASE
 + 0x120)

	)

188 
	#SYSCTL_DCGC1
 
	`MMIO32
(
SYSCTL_BASE
 + 0x124)

	)

189 
	#SYSCTL_DCGC2
 
	`MMIO32
(
SYSCTL_BASE
 + 0x128)

	)

190 
	#SYSCTL_DC9
 
	`MMIO32
(
SYSCTL_BASE
 + 0x190)

	)

191 
	#SYSCTL_NVMSTAT
 
	`MMIO32
(
SYSCTL_BASE
 + 0x1A0)

	)

198 
	#SYSCTL_DID0_VER_MASK
 (7 << 28)

	)

200 
	#SYSCTL_DID0_CLASS_MASK
 (0xFF << 16)

	)

202 
	#SYSCTL_DID0_MAJOR_MASK
 (0xFF << 8)

	)

204 
	#SYSCTL_DID0_MAJOR_MASK
 (0xFF << 8)

	)

210 
	#SYSCTL_DID1_VER_MASK
 (0xF << 28)

	)

212 
	#SYSCTL_DID1_FAM_MASK
 (0xF << 24)

	)

214 
	#SYSCTL_DID1_PARTNO_MASK
 (0xFF << 16)

	)

216 
	#SYSCTL_DID1_PINCOUNT_MASK
 (0x7 << 13)

	)

217 
	#SYSCTL_DID1_PINCOUNT_28P
 (0x0 << 13)

	)

218 
	#SYSCTL_DID1_PINCOUNT_48P
 (0x1 << 13)

	)

219 
	#SYSCTL_DID1_PINCOUNT_100P
 (0x2 << 13)

	)

220 
	#SYSCTL_DID1_PINCOUNT_64P
 (0x3 << 13)

	)

221 
	#SYSCTL_DID1_PINCOUNT_144P
 (0x4 << 13)

	)

222 
	#SYSCTL_DID1_PINCOUNT_157P
 (0x5 << 13)

	)

224 
	#SYSCTL_DID1_TEMP_MASK
 (0x7 << 5)

	)

225 
	#SYSCTL_DID1_TEMP_0_70
 (0x0 << 5)

	)

226 
	#SYSCTL_DID1_TEMP_M40_85
 (0x1 << 5)

	)

227 
	#SYSCTL_DID1_TEMP_M40_105
 (0x2 << 5)

	)

229 
	#SYSCTL_DID1_PKG_MASK
 (0x3 << 5)

	)

230 
	#SYSCTL_DID1_PKG_SOIC
 (0x0 << 5)

	)

231 
	#SYSCTL_DID1_PKG_LQFP
 (0x1 << 5)

	)

232 
	#SYSCTL_DID1_PKG_BGA
 (0x2 << 5)

	)

234 
	#SYSCTL_DID1_ROHS
 (1 << 2)

	)

236 
	#SYSCTL_DID1_QUAL_MASK
 (3 << 0)

	)

242 
	#SYSCTL_PBORCTL_BORIOR
 (1 << 1)

	)

248 
	#SYSCTL_RIS_MOSCPUPRIS
 (1 << 8)

	)

250 
	#SYSCTL_RIS_USBPLLLRIS
 (1 << 7)

	)

252 
	#SYSCTL_RIS_PLLLRIS
 (1 << 6)

	)

254 
	#SYSCTL_RIS_MOFRIS
 (1 << 3)

	)

256 
	#SYSCTL_RIS_BORRIS
 (1 << 1)

	)

262 
	#SYSCTL_IMC_MOSCPUPIM
 (1 << 8)

	)

264 
	#SYSCTL_IMC_USBPLLLIM
 (1 << 7)

	)

266 
	#SYSCTL_IMC_PLLLIM
 (1 << 6)

	)

268 
	#SYSCTL_IMC_MOFIM
 (1 << 3)

	)

270 
	#SYSCTL_IMC_BORIM
 (1 << 1)

	)

276 
	#SYSCTL_MISC_MOSCPUPMIS
 (1 << 8)

	)

278 
	#SYSCTL_MISC_USBPLLLMIS
 (1 << 7)

	)

280 
	#SYSCTL_MISC_PLLLMIS
 (1 << 6)

	)

282 
	#SYSCTL_MISC_MOFMIS
 (1 << 3)

	)

284 
	#SYSCTL_MISC_BORMIS
 (1 << 1)

	)

290 
	#SYSCTL_RESC_MOSCFAIL
 (1 << 18)

	)

292 
	#SYSCTL_RESC_WDT1
 (1 << 5)

	)

294 
	#SYSCTL_RESC_SW
 (1 << 4)

	)

296 
	#SYSCTL_RESC_WDT0
 (1 << 3)

	)

298 
	#SYSCTL_RESC_BOR
 (1 << 2)

	)

300 
	#SYSCTL_RESC_POR
 (1 << 1)

	)

302 
	#SYSCTL_RESC_EXT
 (1 << 0)

	)

308 
	#SYSCTL_RCC_ACG
 (1 << 27)

	)

310 
	#SYSCTL_RCC_SYSDIV_MASK
 (0xF << 23)

	)

312 
	#SYSCTL_RCC_USESYSDIV
 (1 << 22)

	)

314 
	#SYSCTL_RCC_USEPWMDIV
 (1 << 20)

	)

316 
	#SYSCTL_RCC_PWMDIV_MASK
 (0xF << 17)

	)

317 
	#SYSCTL_RCC_PWMDIV_2
 (0x0 << 17)

	)

318 
	#SYSCTL_RCC_PWMDIV_4
 (0x1 << 17)

	)

319 
	#SYSCTL_RCC_PWMDIV_8
 (0x2 << 17)

	)

320 
	#SYSCTL_RCC_PWMDIV_16
 (0x3 << 17)

	)

321 
	#SYSCTL_RCC_PWMDIV_32
 (0x4 << 17)

	)

322 
	#SYSCTL_RCC_PWMDIV_64
 (0x5 << 17)

	)

324 
	#SYSCTL_RCC_PWRDN
 (1 << 13)

	)

326 
	#SYSCTL_RCC_BYPASS
 (1 << 11)

	)

328 
	#SYSCTL_RCC_XTAL_MASK
 (0x1F << 6)

	)

329 
	#SYSCTL_RCC_XTAL_4M
 (0x06 << 6)

	)

330 
	#SYSCTL_RCC_XTAL_4M_096
 (0x07 << 6)

	)

331 
	#SYSCTL_RCC_XTAL_4M_9152
 (0x08 << 6)

	)

332 
	#SYSCTL_RCC_XTAL_5M
 (0x09 << 6)

	)

333 
	#SYSCTL_RCC_XTAL_5M_12
 (0x0A << 6)

	)

334 
	#SYSCTL_RCC_XTAL_6M
 (0x0B << 6)

	)

335 
	#SYSCTL_RCC_XTAL_6M_144
 (0x0C << 6)

	)

336 
	#SYSCTL_RCC_XTAL_7M_3728
 (0x0D << 6)

	)

337 
	#SYSCTL_RCC_XTAL_8M
 (0x0E << 6)

	)

338 
	#SYSCTL_RCC_XTAL_8M_192
 (0x0F << 6)

	)

339 
	#SYSCTL_RCC_XTAL_10M
 (0x10 << 6)

	)

340 
	#SYSCTL_RCC_XTAL_12M
 (0x11 << 6)

	)

341 
	#SYSCTL_RCC_XTAL_12M_288
 (0x12 << 6)

	)

342 
	#SYSCTL_RCC_XTAL_13M_56
 (0x13 << 6)

	)

343 
	#SYSCTL_RCC_XTAL_14M_31818
 (0x14 << 6)

	)

344 
	#SYSCTL_RCC_XTAL_16M
 (0x15 << 6)

	)

345 
	#SYSCTL_RCC_XTAL_16M_384
 (0x16 << 6)

	)

346 
	#SYSCTL_RCC_XTAL_18M
 (0x17 << 6)

	)

347 
	#SYSCTL_RCC_XTAL_20M
 (0x18 << 6)

	)

348 
	#SYSCTL_RCC_XTAL_24M
 (0x19 << 6)

	)

349 
	#SYSCTL_RCC_XTAL_25M
 (0x1A << 6)

	)

351 
	#SYSCTL_RCC_OSCSRC_MASK
 (0x3 << 4)

	)

352 
	#SYSCTL_RCC_OSCSRC_MOSC
 (0x0 << 4)

	)

353 
	#SYSCTL_RCC_OSCSRC_PIOSC
 (0x1 << 4)

	)

354 
	#SYSCTL_RCC_OSCSRC_PIOSC_D4
 (0x2 << 4)

	)

355 
	#SYSCTL_RCC_OSCSRC_30K
 (0x3 << 4)

	)

357 
	#SYSCTL_RCC_IOSCDIS
 (1 << 1)

	)

359 
	#SYSCTL_RCC_MOSCDIS
 (1 << 0)

	)

364 
	#SYSCTL_GPIOHBCTL_PORTQ
 (1 << 14)

	)

365 
	#SYSCTL_GPIOHBCTL_PORTP
 (1 << 13)

	)

366 
	#SYSCTL_GPIOHBCTL_PORTN
 (1 << 12)

	)

367 
	#SYSCTL_GPIOHBCTL_PORTM
 (1 << 11)

	)

368 
	#SYSCTL_GPIOHBCTL_PORTL
 (1 << 10)

	)

369 
	#SYSCTL_GPIOHBCTL_PORTK
 (1 << 9)

	)

370 
	#SYSCTL_GPIOHBCTL_PORTJ
 (1 << 8)

	)

371 
	#SYSCTL_GPIOHBCTL_PORTH
 (1 << 7)

	)

372 
	#SYSCTL_GPIOHBCTL_PORTG
 (1 << 6)

	)

373 
	#SYSCTL_GPIOHBCTL_PORTF
 (1 << 5)

	)

374 
	#SYSCTL_GPIOHBCTL_PORTE
 (1 << 4)

	)

375 
	#SYSCTL_GPIOHBCTL_PORTD
 (1 << 3)

	)

376 
	#SYSCTL_GPIOHBCTL_PORTC
 (1 << 2)

	)

377 
	#SYSCTL_GPIOHBCTL_PORTB
 (1 << 1)

	)

378 
	#SYSCTL_GPIOHBCTL_PORTA
 (1 << 0)

	)

384 
	#SYSCTL_RCC2_USERCC2
 (1 << 31)

	)

386 
	#SYSCTL_RCC2_DIV400
 (1 << 30)

	)

388 
	#SYSCTL_RCC2_ACG
 (1 << 27)

	)

390 
	#SYSCTL_RCC2_SYSDIV2_MASK
 (0x3F << 23)

	)

392 
	#SYSCTL_RCC2_SYSDIV2LSB
 (1 << 22)

	)

394 
	#SYSCTL_RCC2_SYSDIV400_MASK
 (0x7F << 22)

	)

396 
	#SYSCTL_RCC2_USBPWRDN
 (1 << 14)

	)

398 
	#SYSCTL_RCC2_PWRDN2
 (1 << 13)

	)

400 
	#SYSCTL_RCC2_BYPASS2
 (1 << 11)

	)

402 
	#SYSCTL_RCC2_OSCSRC2_MASK
 (0x7 << 4)

	)

403 
	#SYSCTL_RCC2_OSCSRC2_MOSC
 (0x0 << 4)

	)

404 
	#SYSCTL_RCC2_OSCSRC2_PIOSC
 (0x1 << 4)

	)

405 
	#SYSCTL_RCC2_OSCSRC2_PIOSC_D4
 (0x2 << 4)

	)

406 
	#SYSCTL_RCC2_OSCSRC2_30K
 (0x3 << 4)

	)

407 
	#SYSCTL_RCC2_OSCSRC2_32K768
 (0x7 << 4)

	)

413 
	#SYSCTL_MOSCCTL_NOXTAL
 (1 << 2)

	)

415 
	#SYSCTL_MOSCCTL_MOSCIM
 (1 << 1)

	)

417 
	#SYSCTL_MOSCCTL_CVAL
 (1 << 0)

	)

428 
	#SYSCTL_SYSPROP_FPU
 (1 << 0)

	)

434 
	#SYSCTL_PIOSCCAL_UTEN
 (1 << 31)

	)

436 
	#SYSCTL_PIOSCCAL_CAL
 (1 << 9)

	)

438 
	#SYSCTL_PIOSCCAL_UPDATE
 (1 << 8)

	)

440 
	#SYSCTL_PIOSCCAL_UT_MASK
 (0x7F << 0)

	)

446 
	#SYSCTL_PIOSCSTAT_DT_MASK
 (0x7F << 16)

	)

448 
	#SYSCTL_PIOSCSTAT_RESULT_MASK
 (0x3 << 8)

	)

450 
	#SYSCTL_PIOSCSTAT_CT_MASK
 (0x7F << 0)

	)

455 
	#SYSCTL_PLLFREQ0_MFRAC_MASK
 (0x3FF << 10)

	)

457 
	#SYSCTL_PLLFREQ0_MINT_MASK
 (0x3FF << 0)

	)

463 
	#SYSCTL_PLLFREQ1_Q_MASK
 (0x1F << 8)

	)

465 
	#SYSCTL_PLLFREQ1_N_MASK
 (0x1F << 0)

	)

471 
	#SYSCTL_PLLSTAT_LOCK
 (1 << 0)

	)

489 
	elm4f_˛kí
 {

493 
	mRCC_WD0
 = ((
uöt32_t
)&
SYSCTL_RCGCWD
 - 
SYSCTL_BASE
) << 5,

494 
	mRCC_WD1
,

496 
	mRCC_TIMER0
 = ((
uöt32_t
)&
SYSCTL_RCGCTIMER
 - 
SYSCTL_BASE
) << 5,

497 
	mRCC_TIMER1
,

498 
	mRCC_TIMER2
,

499 
	mRCC_TIMER3
,

500 
	mRCC_TIMER4
,

501 
	mRCC_TIMER5
,

503 
	mRCC_GPIOA
 = ((
uöt32_t
)&
SYSCTL_RCGCGPIO
 - 
SYSCTL_BASE
) << 5,

504 
	mRCC_GPIOB
,

505 
	mRCC_GPIOC
,

506 
	mRCC_GPIOD
,

507 
	mRCC_GPIOE
,

508 
	mRCC_GPIOF
,

509 
	mRCC_GPIOG
,

510 
	mRCC_GPIOH
,

511 
	mRCC_GPIOJ
,

512 
	mRCC_GPIOK
,

513 
	mRCC_GPIOL
,

514 
	mRCC_GPIOM
,

515 
	mRCC_GPION
,

516 
	mRCC_GPIOP
,

517 
	mRCC_GPIOQ
,

519 
	mRCC_DMA
 = ((
uöt32_t
)&
SYSCTL_RCGCDMA
 - 
SYSCTL_BASE
) << 5,

521 
	mRCC_HIB
 = ((
uöt32_t
)&
SYSCTL_RCGCGPIO
 - 
SYSCTL_BASE
) << 5,

523 
	mRCC_UART0
 = ((
uöt32_t
)&
SYSCTL_RCGCUART
 - 
SYSCTL_BASE
) << 5,

524 
	mRCC_UART1
,

525 
	mRCC_UART2
,

526 
	mRCC_UART3
,

527 
	mRCC_UART4
,

528 
	mRCC_UART5
,

529 
	mRCC_UART6
,

530 
	mRCC_UART7
,

532 
	mRCC_SSI0
 = ((
uöt32_t
)&
SYSCTL_RCGCSSI
 - 
SYSCTL_BASE
) << 5,

533 
	mRCC_SSI1
,

534 
	mRCC_SSI2
,

535 
	mRCC_SSI3
,

537 
	mRCC_I2C0
 = ((
uöt32_t
)&
SYSCTL_RCGCI2C
 - 
SYSCTL_BASE
) << 5,

538 
	mRCC_I2C1
,

539 
	mRCC_I2C2
,

540 
	mRCC_I2C3
,

541 
	mRCC_I2C4
,

542 
	mRCC_I2C5
,

544 
	mRCC_USB0
 = ((
uöt32_t
)&
SYSCTL_RCGCUSB
 - 
SYSCTL_BASE
) << 5,

546 
	mRCC_CAN0
 = ((
uöt32_t
)&
SYSCTL_RCGCCAN
 - 
SYSCTL_BASE
) << 5,

547 
	mRCC_CAN1
,

549 
	mRCC_ADC0
 = ((
uöt32_t
)&
SYSCTL_RCGCADC
 - 
SYSCTL_BASE
) << 5,

550 
	mRCC_ADC1
,

552 
	mRCC_ACMP0
 = ((
uöt32_t
)&
SYSCTL_RCGCACMP
 - 
SYSCTL_BASE
) << 5,

554 
	mRCC_PWM0
 = ((
uöt32_t
)&
SYSCTL_RCGCPWM
 - 
SYSCTL_BASE
) << 5,

555 
	mRCC_PWM1
,

557 
	mRCC_QEI0
 = ((
uöt32_t
)&
SYSCTL_RCGCQEI
 - 
SYSCTL_BASE
) << 5,

558 
	mRCC_QEI1
,

560 
	mRCC_EEPROM0
 = ((
uöt32_t
)&
SYSCTL_RCGCEEPROM
 - 
SYSCTL_BASE
) << 5,

562 
	mRCC_WTIMER0
 = ((
uöt32_t
)&
SYSCTL_RCGCWTIMER
 - 
SYSCTL_BASE
) << 5,

563 
	mRCC_WTIMER1
,

564 
	mRCC_WTIMER2
,

565 
	mRCC_WTIMER3
,

566 
	mRCC_WTIMER4
,

567 
	mRCC_WTIMER5
,

573 
	mSCC_WD0
 = ((
uöt32_t
)&
SYSCTL_SCGCWD
 - 
SYSCTL_BASE
) << 5,

574 
	mSCC_WD1
,

576 
	mSCC_TIMER0
 = ((
uöt32_t
)&
SYSCTL_SCGCTIMER
 - 
SYSCTL_BASE
) << 5,

577 
	mSCC_TIMER1
,

578 
	mSCC_TIMER2
,

579 
	mSCC_TIMER3
,

580 
	mSCC_TIMER4
,

581 
	mSCC_TIMER5
,

583 
	mSCC_GPIOA
 = ((
uöt32_t
)&
SYSCTL_SCGCGPIO
 - 
SYSCTL_BASE
) << 5,

584 
	mSCC_GPIOB
,

585 
	mSCC_GPIOC
,

586 
	mSCC_GPIOD
,

587 
	mSCC_GPIOE
,

588 
	mSCC_GPIOF
,

589 
	mSCC_GPIOG
,

590 
	mSCC_GPIOH
,

591 
	mSCC_GPIOJ
,

592 
	mSCC_GPIOK
,

593 
	mSCC_GPIOL
,

594 
	mSCC_GPIOM
,

595 
	mSCC_GPION
,

596 
	mSCC_GPIOP
,

597 
	mSCC_GPIOQ
,

599 
	mSCC_DMA
 = ((
uöt32_t
)&
SYSCTL_SCGCDMA
 - 
SYSCTL_BASE
) << 5,

601 
	mSCC_HIB
 = ((
uöt32_t
)&
SYSCTL_SCGCGPIO
 - 
SYSCTL_BASE
) << 5,

603 
	mSCC_UART0
 = ((
uöt32_t
)&
SYSCTL_SCGCUART
 - 
SYSCTL_BASE
) << 5,

604 
	mSCC_UART1
,

605 
	mSCC_UART2
,

606 
	mSCC_UART3
,

607 
	mSCC_UART4
,

608 
	mSCC_UART5
,

609 
	mSCC_UART6
,

610 
	mSCC_UART7
,

612 
	mSCC_SSI0
 = ((
uöt32_t
)&
SYSCTL_SCGCSSI
 - 
SYSCTL_BASE
) << 5,

613 
	mSCC_SSI1
,

614 
	mSCC_SSI2
,

615 
	mSCC_SSI3
,

617 
	mSCC_I2C0
 = ((
uöt32_t
)&
SYSCTL_SCGCI2C
 - 
SYSCTL_BASE
) << 5,

618 
	mSCC_I2C1
,

619 
	mSCC_I2C2
,

620 
	mSCC_I2C3
,

621 
	mSCC_I2C4
,

622 
	mSCC_I2C5
,

624 
	mSCC_USB0
 = ((
uöt32_t
)&
SYSCTL_SCGCUSB
 - 
SYSCTL_BASE
) << 5,

626 
	mSCC_CAN0
 = ((
uöt32_t
)&
SYSCTL_SCGCCAN
 - 
SYSCTL_BASE
) << 5,

627 
	mSCC_CAN1
,

629 
	mSCC_ADC0
 = ((
uöt32_t
)&
SYSCTL_SCGCADC
 - 
SYSCTL_BASE
) << 5,

630 
	mSCC_ADC1
,

632 
	mSCC_ACMP0
 = ((
uöt32_t
)&
SYSCTL_SCGCACMP
 - 
SYSCTL_BASE
) << 5,

634 
	mSCC_PWM0
 = ((
uöt32_t
)&
SYSCTL_SCGCPWM
 - 
SYSCTL_BASE
) << 5,

635 
	mSCC_PWM1
,

637 
	mSCC_QEI0
 = ((
uöt32_t
)&
SYSCTL_SCGCQEI
 - 
SYSCTL_BASE
) << 5,

638 
	mSCC_QEI1
,

640 
	mSCC_EEPROM0
 = ((
uöt32_t
)&
SYSCTL_SCGCEEPROM
 - 
SYSCTL_BASE
) << 5,

642 
	mSCC_WTIMER0
 = ((
uöt32_t
)&
SYSCTL_SCGCWTIMER
 - 
SYSCTL_BASE
) << 5,

643 
	mSCC_WTIMER1
,

644 
	mSCC_WTIMER2
,

645 
	mSCC_WTIMER3
,

646 
	mSCC_WTIMER4
,

647 
	mSCC_WTIMER5
,

652 
	mDCC_WD0
 = ((
uöt32_t
)&
SYSCTL_DCGCWD
 - 
SYSCTL_BASE
) << 5,

653 
	mDCC_WD1
,

655 
	mDCC_TIMER0
 = ((
uöt32_t
)&
SYSCTL_DCGCTIMER
 - 
SYSCTL_BASE
) << 5,

656 
	mDCC_TIMER1
,

657 
	mDCC_TIMER2
,

658 
	mDCC_TIMER3
,

659 
	mDCC_TIMER4
,

660 
	mDCC_TIMER5
,

662 
	mDCC_GPIOA
 = ((
uöt32_t
)&
SYSCTL_DCGCGPIO
 - 
SYSCTL_BASE
) << 5,

663 
	mDCC_GPIOB
,

664 
	mDCC_GPIOC
,

665 
	mDCC_GPIOD
,

666 
	mDCC_GPIOE
,

667 
	mDCC_GPIOF
,

668 
	mDCC_GPIOG
,

669 
	mDCC_GPIOH
,

670 
	mDCC_GPIOJ
,

671 
	mDCC_GPIOK
,

672 
	mDCC_GPIOL
,

673 
	mDCC_GPIOM
,

674 
	mDCC_GPION
,

675 
	mDCC_GPIOP
,

676 
	mDCC_GPIOQ
,

678 
	mDCC_DMA
 = ((
uöt32_t
)&
SYSCTL_DCGCDMA
 - 
SYSCTL_BASE
) << 5,

680 
	mDCC_HIB
 = ((
uöt32_t
)&
SYSCTL_DCGCGPIO
 - 
SYSCTL_BASE
) << 5,

682 
	mDCC_UART0
 = ((
uöt32_t
)&
SYSCTL_DCGCUART
 - 
SYSCTL_BASE
) << 5,

683 
	mDCC_UART1
,

684 
	mDCC_UART2
,

685 
	mDCC_UART3
,

686 
	mDCC_UART4
,

687 
	mDCC_UART5
,

688 
	mDCC_UART6
,

689 
	mDCC_UART7
,

691 
	mDCC_SSI0
 = ((
uöt32_t
)&
SYSCTL_DCGCSSI
 - 
SYSCTL_BASE
) << 5,

692 
	mDCC_SSI1
,

693 
	mDCC_SSI2
,

694 
	mDCC_SSI3
,

696 
	mDCC_I2C0
 = ((
uöt32_t
)&
SYSCTL_DCGCI2C
 - 
SYSCTL_BASE
) << 5,

697 
	mDCC_I2C1
,

698 
	mDCC_I2C2
,

699 
	mDCC_I2C3
,

700 
	mDCC_I2C4
,

701 
	mDCC_I2C5
,

703 
	mDCC_USB0
 = ((
uöt32_t
)&
SYSCTL_DCGCUSB
 - 
SYSCTL_BASE
) << 5,

705 
	mDCC_CAN0
 = ((
uöt32_t
)&
SYSCTL_DCGCCAN
 - 
SYSCTL_BASE
) << 5,

706 
	mDCC_CAN1
,

708 
	mDCC_ADC0
 = ((
uöt32_t
)&
SYSCTL_DCGCADC
 - 
SYSCTL_BASE
) << 5,

709 
	mDCC_ADC1
,

711 
	mDCC_ACMP0
 = ((
uöt32_t
)&
SYSCTL_DCGCACMP
 - 
SYSCTL_BASE
) << 5,

713 
	mDCC_PWM0
 = ((
uöt32_t
)&
SYSCTL_DCGCPWM
 - 
SYSCTL_BASE
) << 5,

714 
	mDCC_PWM1
,

716 
	mDCC_QEI0
 = ((
uöt32_t
)&
SYSCTL_DCGCQEI
 - 
SYSCTL_BASE
) << 5,

717 
	mDCC_QEI1
,

719 
	mDCC_EEPROM0
 = ((
uöt32_t
)&
SYSCTL_DCGCEEPROM
 - 
SYSCTL_BASE
) << 5,

721 
	mDCC_WTIMER0
 = ((
uöt32_t
)&
SYSCTL_DCGCWTIMER
 - 
SYSCTL_BASE
) << 5,

722 
	mDCC_WTIMER1
,

723 
	mDCC_WTIMER2
,

724 
	mDCC_WTIMER3
,

725 
	mDCC_WTIMER4
,

726 
	mDCC_WTIMER5
,

733 
BEGIN_DECLS


735 
≥rùh_˛ock_íabÀ
(
lm4f_˛kí
 
≥rùh
);

736 
≥rùh_˛ock_dißbÀ
(
lm4f_˛kí
 
≥rùh
);

738 
	gEND_DECLS


	@libopencm3/include/libopencm3/lm4f/uart.h

36 #i‚de‡
LIBOPENCM3_LM4F_UART_H


37 
	#LIBOPENCM3_LM4F_UART_H


	)

41 
	~<lib›ícm3/lm4f/mem‹ym≠.h
>

42 
	~<lib›ícm3/cm3/comm⁄.h
>

49 
	#UART0
 
UART0_BASE


	)

50 
	#UART1
 
UART1_BASE


	)

51 
	#UART2
 
UART2_BASE


	)

52 
	#UART3
 
UART3_BASE


	)

53 
	#UART4
 
UART4_BASE


	)

54 
	#UART5
 
UART5_BASE


	)

55 
	#UART6
 
UART6_BASE


	)

56 
	#UART7
 
UART7_BASE


	)

64 
	#UART_DR
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x00)

	)

67 
	#UART_RSR
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x04)

	)

68 
	#UART_ECR
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x04)

	)

71 
	#UART_FR
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x18)

	)

74 
	#UART_ILPR
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x20)

	)

77 
	#UART_IBRD
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x24)

	)

80 
	#UART_FBRD
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x28)

	)

83 
	#UART_LCRH
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x2C)

	)

86 
	#UART_CTL
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x30)

	)

89 
	#UART_IFLS
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x34)

	)

92 
	#UART_IM
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x38)

	)

95 
	#UART_RIS
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x3C)

	)

98 
	#UART_MIS
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x40)

	)

101 
	#UART_ICR
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x44)

	)

104 
	#UART_DMACTL
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x48)

	)

107 
	#UART_LCTL
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x90)

	)

110 
	#UART_LSS
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x94)

	)

113 
	#UART_LTIM
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0x98)

	)

116 
	#UART_9BITADDR
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xA4)

	)

119 
	#UART_9BITAMASK
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xA8)

	)

122 
	#UART_PP
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFC0)

	)

125 
	#UART_CC
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFC8)

	)

128 
	#UART_PERIPH_ID4
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFD0)

	)

131 
	#UART_PERIPH_ID5
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFD4)

	)

134 
	#UART_PERIPH_ID6
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFD8)

	)

137 
	#UART_PERIPH_ID7
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFDC)

	)

140 
	#UART_PERIPH_ID0
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFE0)

	)

143 
	#UART_PERIPH_ID1
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFE4)

	)

146 
	#UART_PERIPH_ID2
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFE8)

	)

149 
	#UART_PERIPH_ID3
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFEC)

	)

152 
	#UART_PCELL_ID0
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFF0)

	)

155 
	#UART_PCELL_ID1
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFF4)

	)

158 
	#UART_PCELL_ID2
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFF8)

	)

161 
	#UART_PCELL_ID3
(
u¨t_ba£
Ë
	`MMIO32
((u¨t_ba£Ë+ 0xFFC)

	)

168 
	#UART_DR_OE
 (1 << 11)

	)

170 
	#UART_DR_BE
 (1 << 10)

	)

172 
	#UART_DR_PE
 (1 << 9)

	)

174 
	#UART_DR_FE
 (1 << 8)

	)

176 
	#UART_DR_DATA_MASK
 (0xFF << 0)

	)

182 
	#UART_RSR_OE
 (1 << 3)

	)

184 
	#UART_RSR_BE
 (1 << 2)

	)

186 
	#UART_RSR_PE
 (1 << 1)

	)

188 
	#UART_RSR_FE
 (1 << 0)

	)

194 
	#UART_FR_TXFE
 (1 << 7)

	)

196 
	#UART_FR_RXFF
 (1 << 6)

	)

198 
	#UART_FR_TXFF
 (1 << 5)

	)

200 
	#UART_FR_RXFE
 (1 << 4)

	)

202 
	#UART_FR_BUSY
 (1 << 3)

	)

204 
	#UART_FR_CTS
 (1 << 0)

	)

210 
	#UART_LCRH_SPS
 (1 << 7)

	)

212 
	#UART_LCRH_WLEN_MASK
 (3 << 5)

	)

213 
	#UART_LCRH_WLEN_5
 (0 << 5)

	)

214 
	#UART_LCRH_WLEN_6
 (1 << 5)

	)

215 
	#UART_LCRH_WLEN_7
 (2 << 5)

	)

216 
	#UART_LCRH_WLEN_8
 (3 << 5)

	)

218 
	#UART_LCRH_FEN
 (1 << 4)

	)

220 
	#UART_LCRH_STP2
 (1 << 3)

	)

222 
	#UART_LCRH_EPS
 (1 << 2)

	)

224 
	#UART_LCRH_PEN
 (1 << 1)

	)

226 
	#UART_LCRH_BRK
 (1 << 0)

	)

232 
	#UART_CTL_CTSEN
 (1 << 15)

	)

234 
	#UART_CTL_RTSEN
 (1 << 14)

	)

236 
	#UART_CTL_RTS
 (1 << 11)

	)

238 
	#UART_CTL_DTR
 (1 << 10)

	)

240 
	#UART_CTL_RXE
 (1 << 9)

	)

242 
	#UART_CTL_TXE
 (1 << 8)

	)

244 
	#UART_CTL_LBE
 (1 << 7)

	)

246 
	#UART_CTL_LIN
 (1 << 6)

	)

248 
	#UART_CTL_HSE
 (1 << 5)

	)

250 
	#UART_CTL_EOT
 (1 << 4)

	)

252 
	#UART_CTL_SMART
 (1 << 3)

	)

254 
	#UART_CTL_SIRLIP
 (1 << 2)

	)

256 
	#UART_CTL_SIREN
 (1 << 1)

	)

258 
	#UART_CTL_UARTEN
 (1 << 0)

	)

264 
	#UART_IFLS_RXIFLSEL_MASK
 (7 << 3)

	)

265 
	#UART_IFLS_RXIFLSEL_1_8
 (0 << 3)

	)

266 
	#UART_IFLS_RXIFLSEL_1_4
 (1 << 3)

	)

267 
	#UART_IFLS_RXIFLSEL_1_2
 (2 << 3)

	)

268 
	#UART_IFLS_RXIFLSEL_3_4
 (3 << 3)

	)

269 
	#UART_IFLS_RXIFLSEL_7_8
 (4 << 3)

	)

271 
	#UART_IFLS_TXIFLSEL_MASK
 (7 << 0)

	)

272 
	#UART_IFLS_TXIFLSEL_7_8
 (0 << 0)

	)

273 
	#UART_IFLS_TXIFLSEL_3_4
 (1 << 0)

	)

274 
	#UART_IFLS_TXIFLSEL_1_2
 (2 << 0)

	)

275 
	#UART_IFLS_TXIFLSEL_1_4
 (3 << 0)

	)

276 
	#UART_IFLS_TXIFLSEL_1_8
 (4 << 0)

	)

285 
	#UART_IM_LME5IM
 (1 << 15)

	)

287 
	#UART_IM_LME1IM
 (1 << 14)

	)

289 
	#UART_IM_LMSBIM
 (1 << 13)

	)

291 
	#UART_IM_9BITIM
 (1 << 12)

	)

293 
	#UART_IM_OEIM
 (1 << 10)

	)

295 
	#UART_IM_BEIM
 (1 << 9)

	)

297 
	#UART_IM_PEIM
 (1 << 8)

	)

299 
	#UART_IM_FEIM
 (1 << 7)

	)

301 
	#UART_IM_RTIM
 (1 << 6)

	)

303 
	#UART_IM_TXIM
 (1 << 5)

	)

305 
	#UART_IM_RXIM
 (1 << 4)

	)

307 
	#UART_IM_DSRIM
 (1 << 3)

	)

309 
	#UART_IM_DCDIM
 (1 << 2)

	)

311 
	#UART_IM_CTSIM
 (1 << 1)

	)

313 
	#UART_IM_RIIM
 (1 << 0)

	)

319 
	#UART_DMACTL_DMAERR
 (1 << 2)

	)

321 
	#UART_DMACTL_TXDMAE
 (1 << 1)

	)

323 
	#UART_DMACTL_RXDMAE
 (1 << 0)

	)

329 
	#UART_LCTL_BLEN_MASK
 (3 << 4)

	)

330 
	#UART_LCTL_BLEN_16T
 (3 << 4)

	)

331 
	#UART_LCTL_BLEN_15T
 (2 << 4)

	)

332 
	#UART_LCTL_BLEN_14T
 (1 << 4)

	)

333 
	#UART_LCTL_BLEN_13T
 (0 << 4)

	)

335 
	#UART_LCTL_MASTER
 (1 << 0)

	)

341 
	#UART_UART_9BITADDR_9BITEN
 (1 << 15)

	)

343 
	#UART_UART_9BITADDR_ADDR_MASK
 (0xFF << 0)

	)

349 
	#UART_UART_PP_NB
 (1 << 1)

	)

351 
	#UART_UART_PP_SC
 (1 << 0)

	)

357 
	#UART_CC_CS_MASK
 (0xF << 0)

	)

358 
	#UART_CC_CS_SYSCLK
 (0x0 << 0)

	)

359 
	#UART_CC_CS_PIOSC
 (0x5 << 0)

	)

364 
	eu¨t_∑rôy
 {

365 
	mUART_PARITY_NONE
,

366 
	mUART_PARITY_ODD
,

367 
	mUART_PARITY_EVEN
,

368 
	mUART_PARITY_STICK_0
,

369 
	mUART_PARITY_STICK_1
,

372 
	eu¨t_Êow˘l
 {

373 
	mUART_FLOWCTL_NONE
,

374 
	mUART_FLOWCTL_RTS
,

375 
	mUART_FLOWCTL_CTS
,

376 
	mUART_FLOWCTL_RTS_CTS
,

385 
	eu¨t_öãºu±_Êag
 {

387 
	mUART_INT_LME5
 = 
UART_IM_LME5IM
,

388 
	mUART_INT_LME1
 = 
UART_IM_LME1IM
,

389 
	mUART_INT_LMSB
 = 
UART_IM_LMSBIM
,

390 
	mUART_INT_9BIT
 = 
UART_IM_9BITIM
,

391 
	mUART_INT_OE
 = 
UART_IM_OEIM
,

392 
	mUART_INT_BE
 = 
UART_IM_BEIM
,

393 
	mUART_INT_PE
 = 
UART_IM_PEIM
,

394 
	mUART_INT_FE
 = 
UART_IM_FEIM
,

395 
	mUART_INT_RT
 = 
UART_IM_RTIM
,

396 
	mUART_INT_TX
 = 
UART_IM_TXIM
,

397 
	mUART_INT_RX
 = 
UART_IM_RXIM
,

398 
	mUART_INT_DSR
 = 
UART_IM_DSRIM
,

399 
	mUART_INT_DCD
 = 
UART_IM_DCDIM
,

400 
	mUART_INT_CTS
 = 
UART_IM_CTSIM
,

401 
	mUART_INT_RI
 = 
UART_IM_RIIM
,

412 
	eu¨t_fifo_rx_åiggî_Àvñ
 {

413 
	mUART_FIFO_RX_TRIG_1_8
 = 
UART_IFLS_RXIFLSEL_1_8
,

414 
	mUART_FIFO_RX_TRIG_1_4
 = 
UART_IFLS_RXIFLSEL_1_4
,

415 
	mUART_FIFO_RX_TRIG_1_2
 = 
UART_IFLS_RXIFLSEL_1_2
,

416 
	mUART_FIFO_RX_TRIG_3_4
 = 
UART_IFLS_RXIFLSEL_3_4
,

417 
	mUART_FIFO_RX_TRIG_7_8
 = 
UART_IFLS_RXIFLSEL_7_8


432 
	eu¨t_fifo_tx_åiggî_Àvñ
 {

433 
	mUART_FIFO_TX_TRIG_7_8
 = 
UART_IFLS_TXIFLSEL_7_8
,

434 
	mUART_FIFO_TX_TRIG_3_4
 = 
UART_IFLS_TXIFLSEL_3_4
,

435 
	mUART_FIFO_TX_TRIG_1_2
 = 
UART_IFLS_TXIFLSEL_1_2
,

436 
	mUART_FIFO_TX_TRIG_1_4
 = 
UART_IFLS_TXIFLSEL_1_4
,

437 
	mUART_FIFO_TX_TRIG_1_8
 = 
UART_IFLS_TXIFLSEL_1_8


443 
BEGIN_DECLS


445 
u¨t_£t_baudøã
(
uöt32_t
 
u¨t
, uöt32_à
baud
);

446 
u¨t_£t_d©abôs
(
uöt32_t
 
u¨t
, 
uöt8_t
 
d©abôs
);

447 
u¨t_£t_°›bôs
(
uöt32_t
 
u¨t
, 
uöt8_t
 
°›bôs
);

448 
u¨t_£t_∑rôy
(
uöt32_t
 
u¨t
, 
u¨t_∑rôy
 
∑rôy
);

449 
u¨t_£t_mode
(
uöt32_t
 
u¨t
, uöt32_à
mode
);

450 
u¨t_£t_Êow_c⁄åﬁ
(
uöt32_t
 
u¨t
, 
u¨t_Êow˘l
 
Êow
);

451 
u¨t_íabÀ
(
uöt32_t
 
u¨t
);

452 
u¨t_dißbÀ
(
uöt32_t
 
u¨t
);

453 
u¨t_˛ock_‰om_piosc
(
uöt32_t
 
u¨t
);

454 
u¨t_˛ock_‰om_sys˛k
(
uöt32_t
 
u¨t
);

456 
u¨t_£nd
(
uöt32_t
 
u¨t
, 
uöt16_t
 
d©a
);

457 
uöt16_t
 
u¨t_ªcv
(
uöt32_t
 
u¨t
);

458 
u¨t_waô_£nd_ªady
(
uöt32_t
 
u¨t
);

459 
u¨t_waô_ªcv_ªady
(
uöt32_t
 
u¨t
);

460 
u¨t_£nd_blockög
(
uöt32_t
 
u¨t
, 
uöt16_t
 
d©a
);

461 
uöt16_t
 
u¨t_ªcv_blockög
(
uöt32_t
 
u¨t
);

463 
u¨t_íabÀ_rx_dma
(
uöt32_t
 
u¨t
);

464 
u¨t_dißbÀ_rx_dma
(
uöt32_t
 
u¨t
);

465 
u¨t_íabÀ_tx_dma
(
uöt32_t
 
u¨t
);

466 
u¨t_dißbÀ_tx_dma
(
uöt32_t
 
u¨t
);

468 
u¨t_íabÀ_fifo
(
uöt32_t
 
u¨t
);

469 
u¨t_dißbÀ_fifo
(
uöt32_t
 
u¨t
);

470 
u¨t_£t_fifo_åiggî_Àvñs
(
uöt32_t
 
u¨t
,

471 
u¨t_fifo_rx_åiggî_Àvñ
 
rx_Àvñ
,

472 
u¨t_fifo_tx_åiggî_Àvñ
 
tx_Àvñ
);

482 
ölöe


483 
boﬁ
 
	$u¨t_is_tx_fifo_fuŒ
(
uöt32_t
 
u¨t
)

485  
	`UART_FR
(
u¨t
Ë& 
UART_FR_TXFF
;

486 
	}
}

494 
ölöe


495 
boﬁ
 
	$u¨t_is_tx_fifo_em±y
(
uöt32_t
 
u¨t
)

497  
	`UART_FR
(
u¨t
Ë& 
UART_FR_TXFE
;

498 
	}
}

505 
ölöe


506 
boﬁ
 
	$u¨t_is_rx_fifo_fuŒ
(
uöt32_t
 
u¨t
)

508  
	`UART_FR
(
u¨t
Ë& 
UART_FR_RXFF
;

509 
	}
}

516 
ölöe


517 
boﬁ
 
	$u¨t_is_rx_fifo_em±y
(
uöt32_t
 
u¨t
)

519  
	`UART_FR
(
u¨t
Ë& 
UART_FR_RXFE
;

520 
	}
}

523 
u¨t_íabÀ_öãºu±s
(
uöt32_t
 
u¨t
, 
u¨t_öãºu±_Êag
 
öts
);

524 
u¨t_dißbÀ_öãºu±s
(
uöt32_t
 
u¨t
, 
u¨t_öãºu±_Êag
 
öts
);

525 
u¨t_íabÀ_rx_öãºu±
(
uöt32_t
 
u¨t
);

526 
u¨t_dißbÀ_rx_öãºu±
(
uöt32_t
 
u¨t
);

527 
u¨t_íabÀ_tx_öãºu±
(
uöt32_t
 
u¨t
);

528 
u¨t_dißbÀ_tx_öãºu±
(
uöt32_t
 
u¨t
);

529 
u¨t_˛ór_öãºu±_Êag
(
uöt32_t
 
u¨t
, 
u¨t_öãºu±_Êag
 
öts
);

539 
ölöe


540 
boﬁ
 
	$u¨t_is_öãºu±_sour˚
(
uöt32_t
 
u¨t
, 
u¨t_öãºu±_Êag
 
sour˚
)

542  
	`UART_MIS
(
u¨t
Ë& 
sour˚
;

543 
	}
}

546 
	gEND_DECLS


	@libopencm3/include/libopencm3/lm4f/usb.h

36 #i‚de‡
LIBOPENCM3_LM4F_USB_H


37 
	#LIBOPENCM3_LM4F_USB_H


	)

41 
	~<lib›ícm3/lm4f/mem‹ym≠.h
>

42 
	~<lib›ícm3/cm3/comm⁄.h
>

49 
	#USB_FADDR
 
	`MMIO8
(
USB_BASE
 + 0x00)

	)

52 
	#USB_POWER
 
	`MMIO8
(
USB_BASE
 + 0x01)

	)

55 
	#USB_TXIS
 
	`MMIO16
(
USB_BASE
 + 0x02)

	)

58 
	#USB_RXIS
 
	`MMIO16
(
USB_BASE
 + 0x04)

	)

61 
	#USB_TXIE
 
	`MMIO16
(
USB_BASE
 + 0x06)

	)

64 
	#USB_RXIE
 
	`MMIO16
(
USB_BASE
 + 0x08)

	)

67 
	#USB_IS
 
	`MMIO8
(
USB_BASE
 + 0x0A)

	)

70 
	#USB_IE
 
	`MMIO8
(
USB_BASE
 + 0x0B)

	)

73 
	#USB_FRAME
 
	`MMIO16
(
USB_BASE
 + 0x0C)

	)

76 
	#USB_EPIDX
 
	`MMIO8
(
USB_BASE
 + 0x0E)

	)

79 
	#USB_TEST
 
	`MMIO8
(
USB_BASE
 + 0x0F)

	)

82 
	#USB_FIFO8
(
n
Ë
	`MMIO8
(
USB_BASE
 + 0x20 + (n)*0x04)

	)

83 
	#USB_FIFO16
(
n
Ë
	`MMIO16
(
USB_BASE
 + 0x20 + (n)*0x04)

	)

84 
	#USB_FIFO32
(
n
Ë
	`MMIO32
(
USB_BASE
 + 0x20 + (n)*0x04)

	)

87 
	#USB_TXFIFOSZ
 
	`MMIO8
(
USB_BASE
 + 0x62)

	)

90 
	#USB_RXFIFOSZ
 
	`MMIO8
(
USB_BASE
 + 0x63)

	)

93 
	#USB_TXFIFOADD
 
	`MMIO16
(
USB_BASE
 + 0x64)

	)

96 
	#USB_RXFIFOADD
 
	`MMIO16
(
USB_BASE
 + 0x66)

	)

99 
	#USB_CONTIM
 
	`MMIO8
(
USB_BASE
 + 0x7A)

	)

102 
	#USB_FSEOF
 
	`MMIO8
(
USB_BASE
 + 0x7D)

	)

105 
	#USB_LSEOF
 
	`MMIO8
(
USB_BASE
 + 0x7E)

	)

108 
	#USB_CSRL0
 
	`MMIO8
(
USB_BASE
 + 0x102)

	)

111 
	#USB_CSRH0
 
	`MMIO8
(
USB_BASE
 + 0x103)

	)

114 
	#USB_COUNT0
 
	`MMIO8
(
USB_BASE
 + 0x108)

	)

117 
	#USB_TXMAXP
(
n
Ë
	`MMIO16
(
USB_BASE
 + 0x100 + (n)*0x10)

	)

120 
	#USB_TXCSRL
(
n
Ë
	`MMIO8
(
USB_BASE
 + 0x102 + (n)*0x10)

	)

123 
	#USB_TXCSRH
(
n
Ë
	`MMIO8
(
USB_BASE
 + 0x103 + (n)*0x10)

	)

126 
	#USB_RXMAXP
(
n
Ë
	`MMIO16
(
USB_BASE
 + 0x104 + (n)*0x10)

	)

129 
	#USB_RXCSRL
(
n
Ë
	`MMIO8
(
USB_BASE
 + 0x106 + (n)*0x10)

	)

132 
	#USB_RXCSRH
(
n
Ë
	`MMIO8
(
USB_BASE
 + 0x107 + (n)*0x10)

	)

135 
	#USB_RXCOUNT
(
n
Ë
	`MMIO16
(
USB_BASE
 + 0x108 + (n)*0x10)

	)

138 
	#USB_RXDPKTBUFDIS
 
	`MMIO16
(
USB_BASE
 + 0x340)

	)

141 
	#USB_TXDPKTBUFDIS
 
	`MMIO16
(
USB_BASE
 + 0x342)

	)

144 
	#USB_DRRIS
 
	`MMIO32
(
USB_BASE
 + 0x410)

	)

147 
	#USB_DRIM
 
	`MMIO32
(
USB_BASE
 + 0x414)

	)

150 
	#USB_DRISC
 
	`MMIO32
(
USB_BASE
 + 0x418)

	)

153 
	#USB_DMASEL
 
	`MMIO32
(
USB_BASE
 + 0x450)

	)

156 
	#USB_PP
 
	`MMIO32
(
USB_BASE
 + 0xFC0)

	)

163 
	#USB_FADDR_FUNCADDR_MASK
 (0x3‡<< 0)

	)

169 
	#USB_POWER_ISOUP
 (1 << 7)

	)

171 
	#USB_POWER_SOFTCONN
 (1 << 6)

	)

173 
	#USB_POWER_RESET
 (1 << 3)

	)

175 
	#USB_POWER_RESUME
 (1 << 2)

	)

177 
	#USB_POWER_SUSPEND
 (1 << 1)

	)

179 
	#USB_POWER_PWRDNPHY
 (1 << 0)

	)

186 
	#USB_EP7
 (1 << 7)

	)

187 
	#USB_EP6
 (1 << 6)

	)

188 
	#USB_EP5
 (1 << 5)

	)

189 
	#USB_EP4
 (1 << 4)

	)

190 
	#USB_EP3
 (1 << 3)

	)

191 
	#USB_EP2
 (1 << 2)

	)

192 
	#USB_EP1
 (1 << 1)

	)

193 
	#USB_EP0
 (1 << 0)

	)

201 
	#USB_IM_DISCON
 (1 << 5)

	)

203 
	#USB_IM_SOF
 (1 << 3)

	)

205 
	#USB_IM_RESET
 (1 << 2)

	)

207 
	#USB_IM_RESUME
 (1 << 1)

	)

209 
	#USB_IM_SUSPEND
 (1 << 0)

	)

215 
	#USB_FRAME_MASK
 (0x03FF)

	)

221 
	#USB_EPIDX_MASK
 (0x0F)

	)

227 
	#USB_TEST_FIFOACC
 (1 << 6)

	)

229 
	#USB_TEST_FORCEFS
 (1 << 5)

	)

235 
	#USB_FIFOSZ_DPB
 (1 << 4)

	)

237 
	#USB_FIFOSZ_SIZE_MASK
 (0x0F << 0)

	)

238 
	#USB_FIFOSZ_SIZE_8
 (0x00 << 0)

	)

239 
	#USB_FIFOSZ_SIZE_16
 (0x01 << 0)

	)

240 
	#USB_FIFOSZ_SIZE_32
 (0x02 << 0)

	)

241 
	#USB_FIFOSZ_SIZE_64
 (0x03 << 0)

	)

242 
	#USB_FIFOSZ_SIZE_128
 (0x04 << 0)

	)

243 
	#USB_FIFOSZ_SIZE_256
 (0x05 << 0)

	)

244 
	#USB_FIFOSZ_SIZE_512
 (0x06 << 0)

	)

245 
	#USB_FIFOSZ_SIZE_1024
 (0x07 << 0)

	)

246 
	#USB_FIFOSZ_SIZE_2048
 (0x08 << 0)

	)

253 
	#USB_CONTIM_WTCON_MASK
 (0x0F << 4)

	)

255 
	#USB_CONTIM_WTID_MASK
 (0x0F << 0)

	)

261 
	#USB_CSRL0_SETENDC
 (1 << 7)

	)

263 
	#USB_CSRL0_RXRDYC
 (1 << 6)

	)

265 
	#USB_CSRL0_STALL
 (1 << 5)

	)

267 
	#USB_CSRL0_SETEND
 (1 << 4)

	)

269 
	#USB_CSRL0_DATAEND
 (1 << 3)

	)

271 
	#USB_CSRL0_STALLED
 (1 << 2)

	)

273 
	#USB_CSRL0_TXRDY
 (1 << 1)

	)

275 
	#USB_CSRL0_RXRDY
 (1 << 0)

	)

281 
	#USB_CSRH0_FLUSH
 (1 << 0)

	)

287 
	#USB_TXCSRL_CLRDT
 (1 << 6)

	)

289 
	#USB_TXCSRL_STALLED
 (1 << 5)

	)

291 
	#USB_TXCSRL_STALL
 (1 << 4)

	)

293 
	#USB_TXCSRL_FLUSH
 (1 << 3)

	)

295 
	#USB_TXCSRL_UNDRN
 (1 << 2)

	)

297 
	#USB_TXCSRL_FIFONE
 (1 << 1)

	)

299 
	#USB_TXCSRL_TXRDY
 (1 << 0)

	)

305 
	#USB_TXCSRH_AUTOSET
 (1 << 7)

	)

307 
	#USB_TXCSRH_ISO
 (1 << 6)

	)

309 
	#USB_TXCSRH_MODE
 (1 << 5)

	)

311 
	#USB_TXCSRH_DMAEN
 (1 << 4)

	)

313 
	#USB_TXCSRH_FDT
 (1 << 3)

	)

315 
	#USB_TXCSRH_DMAMOD
 (1 << 2)

	)

321 
	#USB_RXCSRL_CLRDT
 (1 << 7)

	)

323 
	#USB_RXCSRL_STALLED
 (1 << 6)

	)

325 
	#USB_RXCSRL_STALL
 (1 << 5)

	)

327 
	#USB_RXCSRL_FLUSH
 (1 << 4)

	)

329 
	#USB_RXCSRL_DATAERR
 (1 << 2)

	)

331 
	#USB_RXCSRL_OVER
 (1 << 2)

	)

333 
	#USB_RXCSRL_FULL
 (1 << 1)

	)

335 
	#USB_RXCSRL_RXRDY
 (1 << 0)

	)

341 
	#USB_RXCSRH_AUTOCL
 (1 << 7)

	)

343 
	#USB_RXCSRH_ISO
 (1 << 6)

	)

345 
	#USB_RXCSRH_DMAEN
 (1 << 5)

	)

347 
	#USB_RXCSRH_PIDERR
 (1 << 4)

	)

349 
	#USB_RXCSRH_DMAMOD
 (1 << 3)

	)

355 
	#USB_DRRIS_RESUME
 (1 << 0)

	)

361 
	#USB_DRIM_RESUME
 (1 << 0)

	)

367 
	#USB_DRISC_RESUME
 (1 << 0)

	)

373 
	#USB_PP_ECNT_MASK
 (0xFF << 8)

	)

375 
	#USB_PP_USB_MASK
 (0x03 << 6)

	)

376 
	#USB_PP_USB_NA
 (0x00 << 6)

	)

377 
	#USB_PP_USB_DEVICE
 (0x01 << 6)

	)

378 
	#USB_PP_USB_HOST
 (0x02 << 6)

	)

379 
	#USB_PP_USB_OTG
 (0x03 << 6)

	)

381 
	#USB_PP_PHY
 (1 << 4)

	)

383 
	#USB_PP_TYPE_MASK
 (0x0F << 0)

	)

388 
	eusb_öãºu±
 {

389 
	mUSB_INT_DISCON
 = 
USB_IM_DISCON
,

390 
	mUSB_INT_SOF
 = 
USB_IM_SOF
,

391 
	mUSB_INT_RESET
 = 
USB_IM_RESET
,

392 
	mUSB_INT_RESUME
 = 
USB_IM_RESUME
,

393 
	mUSB_INT_SUSPEND
 = 
USB_IM_SUSPEND
,

396 
	eusb_ï_öãºu±
 {

397 
	mUSB_EP0_INT
 = 
USB_EP0
,

398 
	mUSB_EP1_INT
 = 
USB_EP1
,

399 
	mUSB_EP2_INT
 = 
USB_EP2
,

400 
	mUSB_EP3_INT
 = 
USB_EP3
,

401 
	mUSB_EP4_INT
 = 
USB_EP4
,

402 
	mUSB_EP5_INT
 = 
USB_EP5
,

403 
	mUSB_EP6_INT
 = 
USB_EP6
,

404 
	mUSB_EP7_INT
 = 
USB_EP7
,

409 
BEGIN_DECLS


411 
usb_íabÀ_öãºu±s
(
usb_öãºu±
 
öts
,

412 
usb_ï_öãºu±
 
rx_öts
,

413 
usb_ï_öãºu±
 
tx_öts
);

414 
usb_dißbÀ_öãºu±s
(
usb_öãºu±
 
öts
,

415 
usb_ï_öãºu±
 
rx_öts
,

416 
usb_ï_öãºu±
 
tx_öts
);

418 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc13xx/doc-lpc13xx.h

	@libopencm3/include/libopencm3/lpc13xx/gpio.h

36 #i‚de‡
LPC13XX_GPIO_H


37 
	#LPC13XX_GPIO_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc13xx/mem‹ym≠.h
>

45 
	#GPIO0
 
GPIO_PIO0_BASE


	)

46 
	#GPIO1
 
GPIO_PIO1_BASE


	)

47 
	#GPIO2
 
GPIO_PIO2_BASE


	)

48 
	#GPIO3
 
GPIO_PIO3_BASE


	)

53 
	#GPIO_DATA
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x3ffc)

	)

54 
	#GPIO0_DATA
 
	`GPIO_DATA
(
GPIO0
)

	)

55 
	#GPIO1_DATA
 
	`GPIO_DATA
(
GPIO1
)

	)

56 
	#GPIO2_DATA
 
	`GPIO_DATA
(
GPIO2
)

	)

57 
	#GPIO3_DATA
 
	`GPIO_DATA
(
GPIO3
)

	)

60 
	#GPIO_DIR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00)

	)

61 
	#GPIO0_DIR
 
	`GPIO_DIR
(
GPIO0
)

	)

62 
	#GPIO1_DIR
 
	`GPIO_DIR
(
GPIO1
)

	)

63 
	#GPIO2_DIR
 
	`GPIO_DIR
(
GPIO2
)

	)

64 
	#GPIO3_DIR
 
	`GPIO_DIR
(
GPIO3
)

	)

67 
	#GPIO_IS
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x04)

	)

68 
	#GPIO0_IS
 
	`GPIO_IS
(
GPIO0
)

	)

69 
	#GPIO1_IS
 
	`GPIO_IS
(
GPIO1
)

	)

70 
	#GPIO2_IS
 
	`GPIO_IS
(
GPIO2
)

	)

71 
	#GPIO3_IS
 
	`GPIO_IS
(
GPIO3
)

	)

74 
	#GPIO_IBE
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x08)

	)

75 
	#GPIO0_IBE
 
	`GPIO_IBE
(
GPIO0
)

	)

76 
	#GPIO1_IBE
 
	`GPIO_IBE
(
GPIO1
)

	)

77 
	#GPIO2_IBE
 
	`GPIO_IBE
(
GPIO2
)

	)

78 
	#GPIO3_IBE
 
	`GPIO_IBE
(
GPIO3
)

	)

81 
	#GPIO_IEV
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0c)

	)

82 
	#GPIO0_IEV
 
	`GPIO_IEV
(
GPIO0
)

	)

83 
	#GPIO1_IEV
 
	`GPIO_IEV
(
GPIO1
)

	)

84 
	#GPIO2_IEV
 
	`GPIO_IEV
(
GPIO2
)

	)

85 
	#GPIO3_IEV
 
	`GPIO_IEV
(
GPIO3
)

	)

88 
	#GPIO_IE
(
p‹t
Ë
	`MMIO16
(’‹tË+ 0x10)

	)

89 
	#GPIO0_IE
 
	`GPIO_IE
(
GPIO0
)

	)

90 
	#GPIO1_IE
 
	`GPIO_IE
(
GPIO1
)

	)

91 
	#GPIO2_IE
 
	`GPIO_IE
(
GPIO2
)

	)

92 
	#GPIO3_IE
 
	`GPIO_IE
(
GPIO3
)

	)

96 
	#GPIO_IRS
(
p‹t
Ë
	`MMIO16
(’‹tË+ 0x14)

	)

97 
	#GPIO0_IRS
 
	`GPIO_IRS
(
GPIO0
)

	)

98 
	#GPIO1_IRS
 
	`GPIO_IRS
(
GPIO1
)

	)

99 
	#GPIO2_IRS
 
	`GPIO_IRS
(
GPIO2
)

	)

100 
	#GPIO3_IRS
 
	`GPIO_IRS
(
GPIO3
)

	)

103 
	#GPIO_MIS
(
p‹t
Ë
	`MMIO16
(’‹tË+ 0x18)

	)

104 
	#GPIO0_MIS
 
	`GPIO_MIS
(
GPIO0
)

	)

105 
	#GPIO1_MIS
 
	`GPIO_MIS
(
GPIO1
)

	)

106 
	#GPIO2_MIS
 
	`GPIO_MIS
(
GPIO2
)

	)

107 
	#GPIO3_MIS
 
	`GPIO_MIS
(
GPIO3
)

	)

110 
	#GPIO_IC
(
p‹t
Ë
	`MMIO16
(’‹tË+ 0x1c)

	)

111 
	#GPIO0_IC
 
	`GPIO_IC
(
GPIO0
)

	)

112 
	#GPIO1_IC
 
	`GPIO_IC
(
GPIO1
)

	)

113 
	#GPIO2_IC
 
	`GPIO_IC
(
GPIO2
)

	)

114 
	#GPIO3_IC
 
	`GPIO_IC
(
GPIO3
)

	)

116 
BEGIN_DECLS


118 
gpio_£t
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
);

120 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc13xx/memorymap.h

20 #i‚de‡
LPC13XX_MEMORYMAP_H


21 
	#LPC13XX_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

28 
	#PERIPH_BASE_APB
 (0x40000000U)

	)

29 
	#PERIPH_BASE_AHB
 (0x50000000U)

	)

34 
	#I2C_BASE
 (
PERIPH_BASE_APB
 + 0x00000)

	)

35 
	#WDT_BASE
 (
PERIPH_BASE_APB
 + 0x04000)

	)

36 
	#UART_BASE
 (
PERIPH_BASE_APB
 + 0x08000)

	)

37 
	#TIMER0_16BIT_BASE
 (
PERIPH_BASE_APB
 + 0x0c000)

	)

38 
	#TIMER1_16BIT_BASE
 (
PERIPH_BASE_APB
 + 0x10000)

	)

39 
	#TIMER0_32BIT_BASE
 (
PERIPH_BASE_APB
 + 0x14000)

	)

40 
	#TIMER1_32BIT_BASE
 (
PERIPH_BASE_APB
 + 0x18000)

	)

41 
	#ADC_BASE
 (
PERIPH_BASE_APB
 + 0x1c000)

	)

42 
	#USB_BASE
 (
PERIPH_BASE_APB
 + 0x20000)

	)

44 
	#PMU_BASE
 (
PERIPH_BASE_APB
 + 0x38000)

	)

45 
	#FLASH_BASE
 (
PERIPH_BASE_APB
 + 0x3c000)

	)

46 
	#SSP_BASE
 (
PERIPH_BASE_APB
 + 0x40000)

	)

47 
	#IOCONFIG_BASE
 (
PERIPH_BASE_APB
 + 0x44000)

	)

48 
	#SYSCTRL_BASE
 (
PERIPH_BASE_APB
 + 0x48000)

	)

52 
	#GPIO_PIO0_BASE
 (
PERIPH_BASE_AHB
 + 0x00000)

	)

53 
	#GPIO_PIO1_BASE
 (
PERIPH_BASE_AHB
 + 0x10000)

	)

54 
	#GPIO_PIO2_BASE
 (
PERIPH_BASE_AHB
 + 0x20000)

	)

55 
	#GPIO_PIO3_BASE
 (
PERIPH_BASE_AHB
 + 0x30000)

	)

	@libopencm3/include/libopencm3/lpc13xx/nvic.h

6 #i‚de‡
LIBOPENCM3_LPC13xx_NVIC_H


7 
	#LIBOPENCM3_LPC13xx_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_SSP1_IRQ
 56

	)

17 
	#NVIC_PIO2_IRQ
 54

	)

18 
	#NVIC_CT16B1_IRQ
 42

	)

19 
	#NVIC_USB_FIQ_IRQ
 48

	)

20 
	#NVIC_CT32B0_IRQ
 43

	)

21 
	#NVIC_ADC_IRQ
 49

	)

22 
	#NVIC_PIO3_IRQ
 53

	)

23 
	#NVIC_PIO2_0_IRQ
 24

	)

24 
	#NVIC_PIO2_1_IRQ
 25

	)

25 
	#NVIC_PIO2_2_IRQ
 26

	)

26 
	#NVIC_PIO2_3_IRQ
 27

	)

27 
	#NVIC_PIO1_8_IRQ
 20

	)

28 
	#NVIC_PIO1_9_IRQ
 21

	)

29 
	#NVIC_PIO1_10_IRQ
 22

	)

30 
	#NVIC_PIO1_11_IRQ
 23

	)

31 
	#NVIC_UART_IRQ
 46

	)

32 
	#NVIC_USB_IRQ
 47

	)

33 
	#NVIC_CT32B1_IRQ
 44

	)

34 
	#NVIC_SSP0_IRQ
 45

	)

35 
	#NVIC_PIO2_4_IRQ
 28

	)

36 
	#NVIC_PIO2_5_IRQ
 29

	)

37 
	#NVIC_I2C0_IRQ
 40

	)

38 
	#NVIC_CT16B0_IRQ
 41

	)

39 
	#NVIC_PIO0_1_IRQ
 1

	)

40 
	#NVIC_PIO0_0_IRQ
 0

	)

41 
	#NVIC_PIO0_3_IRQ
 3

	)

42 
	#NVIC_PIO0_2_IRQ
 2

	)

43 
	#NVIC_PIO0_5_IRQ
 5

	)

44 
	#NVIC_PIO0_4_IRQ
 4

	)

45 
	#NVIC_PIO0_7_IRQ
 7

	)

46 
	#NVIC_PIO0_6_IRQ
 6

	)

47 
	#NVIC_PIO0_9_IRQ
 9

	)

48 
	#NVIC_PIO0_8_IRQ
 8

	)

49 
	#NVIC_BOD_IRQ
 51

	)

50 
	#NVIC_PIO3_3_IRQ
 39

	)

51 
	#NVIC_PIO3_2_IRQ
 38

	)

52 
	#NVIC_PIO0_11_IRQ
 11

	)

53 
	#NVIC_PIO0_10_IRQ
 10

	)

54 
	#NVIC_PIO1_1_IRQ
 13

	)

55 
	#NVIC_PIO1_0_IRQ
 12

	)

56 
	#NVIC_PIO1_3_IRQ
 15

	)

57 
	#NVIC_PIO1_2_IRQ
 14

	)

58 
	#NVIC_PIO1_5_IRQ
 17

	)

59 
	#NVIC_PIO1_4_IRQ
 16

	)

60 
	#NVIC_PIO1_7_IRQ
 19

	)

61 
	#NVIC_PIO1_6_IRQ
 18

	)

62 
	#NVIC_PIO2_7_IRQ
 31

	)

63 
	#NVIC_PIO2_6_IRQ
 30

	)

64 
	#NVIC_PIO3_1_IRQ
 37

	)

65 
	#NVIC_PIO3_0_IRQ
 36

	)

66 
	#NVIC_PIO2_11_IRQ
 35

	)

67 
	#NVIC_PIO2_10_IRQ
 34

	)

68 
	#NVIC_PIO2_9_IRQ
 33

	)

69 
	#NVIC_PIO1_IRQ
 55

	)

70 
	#NVIC_PIO2_8_IRQ
 32

	)

71 
	#NVIC_WDT_IRQ
 50

	)

73 
	#NVIC_IRQ_COUNT
 57

	)

82 
BEGIN_DECLS


84 
s•1_i§
();

85 
pio2_i§
();

86 
˘16b1_i§
();

87 
usb_fiq_i§
();

88 
˘32b0_i§
();

89 
adc_i§
();

90 
pio3_i§
();

91 
pio2_0_i§
();

92 
pio2_1_i§
();

93 
pio2_2_i§
();

94 
pio2_3_i§
();

95 
pio1_8_i§
();

96 
pio1_9_i§
();

97 
pio1_10_i§
();

98 
pio1_11_i§
();

99 
u¨t_i§
();

100 
usb_i§
();

101 
˘32b1_i§
();

102 
s•0_i§
();

103 
pio2_4_i§
();

104 
pio2_5_i§
();

105 
i2c0_i§
();

106 
˘16b0_i§
();

107 
pio0_1_i§
();

108 
pio0_0_i§
();

109 
pio0_3_i§
();

110 
pio0_2_i§
();

111 
pio0_5_i§
();

112 
pio0_4_i§
();

113 
pio0_7_i§
();

114 
pio0_6_i§
();

115 
pio0_9_i§
();

116 
pio0_8_i§
();

117 
bod_i§
();

118 
pio3_3_i§
();

119 
pio3_2_i§
();

120 
pio0_11_i§
();

121 
pio0_10_i§
();

122 
pio1_1_i§
();

123 
pio1_0_i§
();

124 
pio1_3_i§
();

125 
pio1_2_i§
();

126 
pio1_5_i§
();

127 
pio1_4_i§
();

128 
pio1_7_i§
();

129 
pio1_6_i§
();

130 
pio2_7_i§
();

131 
pio2_6_i§
();

132 
pio3_1_i§
();

133 
pio3_0_i§
();

134 
pio2_11_i§
();

135 
pio2_10_i§
();

136 
pio2_9_i§
();

137 
pio1_i§
();

138 
pio2_8_i§
();

139 
wdt_i§
();

141 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc17xx/clock.h

34 #i‚de‡
LPC17XX_CLOCK_H


35 
	#LPC17XX_CLOCK_H


	)

37 
	~<lib›ícm3/Õc17xx/mem‹ym≠.h
>

38 
	~<lib›ícm3/cm3/comm⁄.h
>

42 
	#CLK_SCS
 
	`MMIO32
(
SYSCON_BASE
 + 0x1a0)

	)

44 
	#CLK_CLKSRCSEL
 
	`MMIO32
(
SYSCON_BASE
 + 0x10c)

	)

46 
	#CLK_PLL0CON
 
	`MMIO32
(
SYSCON_BASE
 + 0x080)

	)

47 
	#CLK_PLL0CFG
 
	`MMIO32
(
SYSCON_BASE
 + 0x084)

	)

48 
	#CLK_PLL0STAT
 
	`MMIO32
(
SYSCON_BASE
 + 0x088)

	)

49 
	#CLK_PLL0FEED
 
	`MMIO32
(
SYSCON_BASE
 + 0x08c)

	)

51 
	#CLK_PLL1CON
 
	`MMIO32
(
SYSCON_BASE
 + 0x0a0)

	)

52 
	#CLK_PLL1CFG
 
	`MMIO32
(
SYSCON_BASE
 + 0x0a4)

	)

53 
	#CLK_PLL1STAT
 
	`MMIO32
(
SYSCON_BASE
 + 0x0a8)

	)

54 
	#CLK_PLL1FEED
 
	`MMIO32
(
SYSCON_BASE
 + 0x0ac)

	)

56 
	#CLK_CCLKCFG
 
	`MMIO32
(
SYSCON_BASE
 + 0x104)

	)

57 
	#CLK_USBCLKCFG
 
	`MMIO32
(
SYSCON_BASE
 + 0x108)

	)

58 
	#CLK_PCLKSEL0
 
	`MMIO32
(
SYSCON_BASE
 + 0x1a8)

	)

59 
	#CLK_PCLKSEL1
 
	`MMIO32
(
SYSCON_BASE
 + 0x1ac)

	)

61 
	#CLK_CLKOUTCFG
 
	`MMIO32
(
SYSCON_BASE
 + 0x1c8)

	)

65 
	#CLK_SCS_OSCRANGE_01_TO_20MHZ
 (0)

	)

66 
	#CLK_SCS_OSCRANGE_15_TO_25MHZ
 (1 << 4)

	)

67 
	#CLK_SCS_OSCEN
 (1 << 5)

	)

68 
	#CLK_SCS_OSCSTAT
 (1 << 6)

	)

72 
	#CLK_CLKSRCSEL_IRC
 (0)

	)

73 
	#CLK_CLKSRCSEL_MAIN
 (1 << 0)

	)

74 
	#CLK_CLKSRCSEL_RTC
 (1 << 1)

	)

79 
	#CLK_PLLCON_ENABLE
 (1 << 0)

	)

80 
	#CLK_PLLCON_CONNECT
 (1 << 1)

	)

84 
	#CLK_PLL0_MSEL_SHIFT
 0

	)

85 
	#CLK_PLL0_MSEL_MASK
 0x7fff

	)

87 
	#CLK_PLL0_NSEL_SHIFT
 16

	)

88 
	#CLK_PLL0_NSEL_MASK
 0xff

	)

90 
	#CLK_PLL0STAT_ENABLE
 (1 << 24)

	)

91 
	#CLK_PLL0STAT_CONNECT
 (1 << 25)

	)

92 
	#CLK_PLL0STAT_PLOCK
 (1 << 26)

	)

96 
	#CLK_PLL1_MSEL_SHIFT
 0

	)

97 
	#CLK_PLL1_MSEL_MASK
 0x1f

	)

98 
	#CLK_PLL1_PSEL_SHIFT
 5

	)

99 
	#CLK_PLL1_PSEL_MASK
 0x3

	)

101 
	#CLK_PLL1STAT_ENABLE
 (1 << 8)

	)

102 
	#CLK_PLL1STAT_CONNECT
 (1 << 9)

	)

103 
	#CLK_PLL1STAT_PLOCK
 (1 << 10)

	)

107 
	#CLK_USBCLKCFG_DIV6
 0x5

	)

108 
	#CLK_USBCLKCFG_DIV8
 0x7

	)

109 
	#CLK_USBCLKCFG_DIV10
 0x9

	)

112 
	#CLK_PCLKSEL_DIV4
 0x00

	)

113 
	#CLK_PCLKSEL_DIV1
 0x01

	)

114 
	#CLK_PCLKSEL_DIV2
 0x02

	)

115 
	#CLK_PCLKSEL_DIV8
 0x03

	)

116 
	#CLK_PCLKSEL0_WDT_SHIFT
 0

	)

117 
	#CLK_PCLKSEL0_TIMER0_SHIFT
 2

	)

118 
	#CLK_PCLKSEL0_TIMER1_SHIFT
 4

	)

119 
	#CLK_PCLKSEL0_UART0_SHIFT
 6

	)

120 
	#CLK_PCLKSEL0_UART1_SHIFT
 8

	)

122 
	#CLK_PCLKSEL0_PWM1_SHIFT
 12

	)

123 
	#CLK_PCLKSEL0_I2C0_SHIFT
 14

	)

124 
	#CLK_PCLKSEL0_SPI_SHIFT
 16

	)

126 
	#CLK_PCLKSEL0_SSP1_SHIFT
 20

	)

127 
	#CLK_PCLKSEL0_DAC_SHIFT
 22

	)

128 
	#CLK_PCLKSEL0_ADC_SHIFT
 24

	)

129 
	#CLK_PCLKSEL0_CAN1_SHIFT
 26

	)

130 
	#CLK_PCLKSEL0_CAN2_SHIFT
 28

	)

131 
	#CLK_PCLKSEL0_ACF_SHIFT
 30

	)

132 
	#CLK_PCLKSEL1_QEI_SHIFT
 0

	)

133 
	#CLK_PCLKSEL1_GPIOINT_SHIFT
 2

	)

134 
	#CLK_PCLKSEL1_PCB_SHIFT
 4

	)

135 
	#CLK_PCLKSEL1_I2C1_SHIFT
 6

	)

137 
	#CLK_PCLKSEL1_SSP0_SHIFT
 10

	)

138 
	#CLK_PCLKSEL1_TIMER2_SHIFT
 12

	)

139 
	#CLK_PCLKSEL1_TIMER3_SHIFT
 14

	)

140 
	#CLK_PCLKSEL1_UART2_SHIFT
 16

	)

141 
	#CLK_PCLKSEL1_UART3_SHIFT
 18

	)

142 
	#CLK_PCLKSEL1_I2C2_SHIFT
 20

	)

143 
	#CLK_PCLKSEL1_I2S_SHIFT
 22

	)

145 
	#CLK_PCLKSEL1_RIT_SHIFT
 26

	)

146 
	#CLK_PCLKSEL1_SYSCON_SHIFT
 28

	)

147 
	#CLK_PCLKSEL1_MCPWM_SHIFT
 30

	)

150 
	#CLK_CLKOUTCFG_SEL_CPU
 0x00

	)

151 
	#CLK_CLKOUTCFG_SEL_MAIN
 0x01

	)

152 
	#CLK_CLKOUTCFG_SEL_IRC
 0x02

	)

153 
	#CLK_CLKOUTCFG_SEL_USB
 0x03

	)

154 
	#CLK_CLKOUTCFG_SEL_RTC
 0x04

	)

155 
	#CLK_CLKOUTCFG_DIV_SHIFT
 4

	)

156 
	#CLK_CLKOUTCFG_ENABLE
 (1 << 8)

	)

157 
	#CLK_CLKOUTCFG_ACTIVITY
 (1 << 9)

	)

	@libopencm3/include/libopencm3/lpc17xx/doc-lpc17xx.h

	@libopencm3/include/libopencm3/lpc17xx/gpio.h

34 #i‚de‡
LPC17XX_GPIO_H


35 
	#LPC17XX_GPIO_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc17xx/mem‹ym≠.h
>

45 
	#GPIO0
 
GPIO_PIO0_BASE


	)

46 
	#GPIO1
 
GPIO_PIO1_BASE


	)

47 
	#GPIO2
 
GPIO_PIO2_BASE


	)

48 
	#GPIO3
 
GPIO_PIO3_BASE


	)

49 
	#GPIO4
 
GPIO_PIO4_BASE


	)

52 
	#GPIOPIN0
 (1 << 0)

	)

53 
	#GPIOPIN1
 (1 << 1)

	)

54 
	#GPIOPIN2
 (1 << 2)

	)

55 
	#GPIOPIN3
 (1 << 3)

	)

56 
	#GPIOPIN4
 (1 << 4)

	)

57 
	#GPIOPIN5
 (1 << 5)

	)

58 
	#GPIOPIN6
 (1 << 6)

	)

59 
	#GPIOPIN7
 (1 << 7)

	)

60 
	#GPIOPIN8
 (1 << 8)

	)

61 
	#GPIOPIN9
 (1 << 9)

	)

62 
	#GPIOPIN10
 (1 << 10)

	)

63 
	#GPIOPIN11
 (1 << 11)

	)

64 
	#GPIOPIN12
 (1 << 12)

	)

65 
	#GPIOPIN13
 (1 << 13)

	)

66 
	#GPIOPIN14
 (1 << 14)

	)

67 
	#GPIOPIN15
 (1 << 15)

	)

68 
	#GPIOPIN16
 (1 << 16)

	)

69 
	#GPIOPIN17
 (1 << 17)

	)

70 
	#GPIOPIN18
 (1 << 18)

	)

71 
	#GPIOPIN19
 (1 << 19)

	)

72 
	#GPIOPIN20
 (1 << 20)

	)

73 
	#GPIOPIN21
 (1 << 21)

	)

74 
	#GPIOPIN22
 (1 << 22)

	)

75 
	#GPIOPIN23
 (1 << 23)

	)

76 
	#GPIOPIN24
 (1 << 24)

	)

77 
	#GPIOPIN25
 (1 << 25)

	)

78 
	#GPIOPIN26
 (1 << 26)

	)

79 
	#GPIOPIN27
 (1 << 27)

	)

80 
	#GPIOPIN28
 (1 << 28)

	)

81 
	#GPIOPIN29
 (1 << 29)

	)

82 
	#GPIOPIN30
 (1 << 30)

	)

83 
	#GPIOPIN31
 (1 << 31)

	)

88 
	#GPIO_DIR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00)

	)

89 
	#GPIO0_DIR
 
	`GPIO_DIR
(
GPIO0
)

	)

90 
	#GPIO1_DIR
 
	`GPIO_DIR
(
GPIO1
)

	)

91 
	#GPIO2_DIR
 
	`GPIO_DIR
(
GPIO2
)

	)

92 
	#GPIO3_DIR
 
	`GPIO_DIR
(
GPIO3
)

	)

93 
	#GPIO4_DIR
 
	`GPIO_DIR
(
GPIO4
)

	)

96 
	#GPIO_MASK
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x10)

	)

97 
	#GPIO0_MASK
 
	`GPIO_MASK
(
GPIO0
)

	)

98 
	#GPIO1_MASK
 
	`GPIO_MASK
(
GPIO1
)

	)

99 
	#GPIO2_MASK
 
	`GPIO_MASK
(
GPIO2
)

	)

100 
	#GPIO3_MASK
 
	`GPIO_MASK
(
GPIO3
)

	)

101 
	#GPIO4_MASK
 
	`GPIO_MASK
(
GPIO4
)

	)

104 
	#GPIO_PIN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x14)

	)

105 
	#GPIO0_PIN
 
	`GPIO_PIN
(
GPIO0
)

	)

106 
	#GPIO1_PIN
 
	`GPIO_PIN
(
GPIO1
)

	)

107 
	#GPIO2_PIN
 
	`GPIO_PIN
(
GPIO2
)

	)

108 
	#GPIO3_PIN
 
	`GPIO_PIN
(
GPIO3
)

	)

109 
	#GPIO4_PIN
 
	`GPIO_PIN
(
GPIO4
)

	)

112 
	#GPIO_SET
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x18)

	)

113 
	#GPIO0_SET
 
	`GPIO_SET
(
GPIO0
)

	)

114 
	#GPIO1_SET
 
	`GPIO_SET
(
GPIO1
)

	)

115 
	#GPIO2_SET
 
	`GPIO_SET
(
GPIO2
)

	)

116 
	#GPIO3_SET
 
	`GPIO_SET
(
GPIO3
)

	)

117 
	#GPIO4_SET
 
	`GPIO_SET
(
GPIO4
)

	)

120 
	#GPIO_CLR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x1C)

	)

121 
	#GPIO0_CLR
 
	`GPIO_CLR
(
GPIO0
)

	)

122 
	#GPIO1_CLR
 
	`GPIO_CLR
(
GPIO1
)

	)

123 
	#GPIO2_CLR
 
	`GPIO_CLR
(
GPIO2
)

	)

124 
	#GPIO3_CLR
 
	`GPIO_CLR
(
GPIO3
)

	)

125 
	#GPIO4_CLR
 
	`GPIO_CLR
(
GPIO4
)

	)

129 
	#GPIO0_IER
 
	`MMIO32
(
GPIOINTERRUPT_BASE
 + 0x90)

	)

130 
	#GPIO2_IER
 
	`MMIO32
(
GPIOINTERRUPT_BASE
 + 0xB0)

	)

133 
	#GPIO0_IEF
 
	`MMIO32
(
GPIOINTERRUPT_BASE
 + 0x94)

	)

134 
	#GPIO2_IEF
 
	`MMIO32
(
GPIOINTERRUPT_BASE
 + 0xB4)

	)

137 
	#GPIO0_ISR
 
	`MMIO32
(
GPIOINTERRUPT_BASE
 + 0x84)

	)

138 
	#GPIO2_ISR
 
	`MMIO32
(
GPIOINTERRUPT_BASE
 + 0xA4)

	)

141 
	#GPIO0_ISF
 
	`MMIO32
(
GPIOINTERRUPT_BASE
 + 0x88)

	)

142 
	#GPIO2_ISF
 
	`MMIO32
(
GPIOINTERRUPT_BASE
 + 0xA8)

	)

145 
	#GPIO0_IC
 
	`MMIO32
(
GPIOINTERRUPT_BASE
 + 0x8C)

	)

146 
	#GPIO1_IC
 
	`MMIO32
(
GPIOINTERRUPT_BASE
 + 0xAC)

	)

149 
	#GPIO_IS
 
	`MMIO32
(
GPIOINTERRUPT_BASE
 + 0x80)

	)

151 
BEGIN_DECLS


153 
gpio_£t
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
);

154 
gpio_˛ór
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
);

156 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc17xx/memorymap.h

21 #i‚de‡
LPC17XX_MEMORYMAP_H


22 
	#LPC17XX_MEMORYMAP_H


	)

24 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

29 
	#PERIPH_BASE_GPIO
 (0x2009C000U)

	)

30 
	#PERIPH_BASE_APB0
 (0x40000000U)

	)

31 
	#PERIPH_BASE_APB1
 (0x40080000U)

	)

32 
	#PERIPH_BASE_AHB
 (0x50000000U)

	)

37 
	#GPIO_PIO0_BASE
 (
PERIPH_BASE_GPIO
 + 0x00)

	)

38 
	#GPIO_PIO1_BASE
 (
PERIPH_BASE_GPIO
 + 0x20)

	)

39 
	#GPIO_PIO2_BASE
 (
PERIPH_BASE_GPIO
 + 0x40)

	)

40 
	#GPIO_PIO3_BASE
 (
PERIPH_BASE_GPIO
 + 0x60)

	)

41 
	#GPIO_PIO4_BASE
 (
PERIPH_BASE_GPIO
 + 0x80)

	)

44 
	#WDT_BASE
 (
PERIPH_BASE_APB0
 + 0x00000)

	)

45 
	#TIMER0_BASE
 (
PERIPH_BASE_APB0
 + 0x04000)

	)

46 
	#TIMER1_BASE
 (
PERIPH_BASE_APB0
 + 0x08000)

	)

47 
	#UART0_BASE
 (
PERIPH_BASE_APB0
 + 0x0c000)

	)

48 
	#UART1_BASE
 (
PERIPH_BASE_APB0
 + 0x10000)

	)

50 
	#PWM1_BASE
 (
PERIPH_BASE_APB0
 + 0x18000)

	)

51 
	#I2C0_BASE
 (
PERIPH_BASE_APB0
 + 0x1c000)

	)

52 
	#SPI_BASE
 (
PERIPH_BASE_APB0
 + 0x20000)

	)

53 
	#RTC_BASE
 (
PERIPH_BASE_APB0
 + 0x24000)

	)

54 
	#GPIOINTERRUPT_BASE
 (
PERIPH_BASE_APB0
 + 0x28000)

	)

55 
	#PINCONNECT_BASE
 (
PERIPH_BASE_APB0
 + 0x2c000)

	)

56 
	#SSP1_BASE
 (
PERIPH_BASE_APB0
 + 0x30000)

	)

57 
	#ADC_BASE
 (
PERIPH_BASE_APB0
 + 0x34000)

	)

58 
	#CANAFRAM_BASE
 (
PERIPH_BASE_APB0
 + 0x38000)

	)

59 
	#CANAFREG_BASE
 (
PERIPH_BASE_APB0
 + 0x3C000)

	)

60 
	#CANCOMMONREG_BASE
 (
PERIPH_BASE_APB0
 + 0x40000)

	)

61 
	#CAN1_BASE
 (
PERIPH_BASE_APB0
 + 0x44000)

	)

62 
	#CAN2_BASE
 (
PERIPH_BASE_APB0
 + 0x48000)

	)

64 
	#I2C1_BASE
 (
PERIPH_BASE_APB0
 + 0x5C000)

	)

69 
	#SSP0_BASE
 (
PERIPH_BASE_APB1
 + 0x08000)

	)

70 
	#DAC_BASE
 (
PERIPH_BASE_APB1
 + 0x0c000)

	)

71 
	#TIMER2_BASE
 (
PERIPH_BASE_APB1
 + 0x10000)

	)

72 
	#TIMER3_BASE
 (
PERIPH_BASE_APB1
 + 0x14000)

	)

73 
	#UART2_BASE
 (
PERIPH_BASE_APB1
 + 0x18000)

	)

74 
	#UART3_BASE
 (
PERIPH_BASE_APB1
 + 0x1c000)

	)

75 
	#I2C2_BASE
 (
PERIPH_BASE_APB1
 + 0x20000)

	)

77 
	#I2S_BASE
 (
PERIPH_BASE_APB1
 + 0x28000)

	)

79 
	#RIT_BASE
 (
PERIPH_BASE_APB1
 + 0x30000)

	)

81 
	#MCPWM_BASE
 (
PERIPH_BASE_APB1
 + 0x38000)

	)

82 
	#QEI_BASE
 (
PERIPH_BASE_APB1
 + 0x3c000)

	)

84 
	#SYSCON_BASE
 (
PERIPH_BASE_APB1
 + 0x7c000)

	)

87 
	#ETHERNET_BASE
 (
PERIPH_BASE_AHB
 + 0x00000)

	)

88 
	#GPDMA_BASE
 (
PERIPH_BASE_AHB
 + 0x04000)

	)

90 
	#USB_BASE
 (
PERIPH_BASE_AHB
 + 0x0c000)

	)

	@libopencm3/include/libopencm3/lpc17xx/nvic.h

6 #i‚de‡
LIBOPENCM3_LPC17xx_NVIC_H


7 
	#LIBOPENCM3_LPC17xx_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_USB_IRQ
 24

	)

17 
	#NVIC_CAN_IRQ
 25

	)

18 
	#NVIC_GPDMA_IRQ
 26

	)

19 
	#NVIC_I2S_IRQ
 27

	)

20 
	#NVIC_EINT2_IRQ
 20

	)

21 
	#NVIC_EINT3_IRQ
 21

	)

22 
	#NVIC_ADC_IRQ
 22

	)

23 
	#NVIC_BOD_IRQ
 23

	)

24 
	#NVIC_ETHERNET_IRQ
 28

	)

25 
	#NVIC_RIT_IRQ
 29

	)

26 
	#NVIC_TIMER0_IRQ
 1

	)

27 
	#NVIC_WDT_IRQ
 0

	)

28 
	#NVIC_TIMER2_IRQ
 3

	)

29 
	#NVIC_TIMER1_IRQ
 2

	)

30 
	#NVIC_UART0_IRQ
 5

	)

31 
	#NVIC_TIMER3_IRQ
 4

	)

32 
	#NVIC_UART2_IRQ
 7

	)

33 
	#NVIC_UART1_IRQ
 6

	)

34 
	#NVIC_PWM_IRQ
 9

	)

35 
	#NVIC_UART3_IRQ
 8

	)

36 
	#NVIC_I2C1_IRQ
 11

	)

37 
	#NVIC_I2C0_IRQ
 10

	)

38 
	#NVIC_SPI_IRQ
 13

	)

39 
	#NVIC_I2C2_IRQ
 12

	)

40 
	#NVIC_SSP1_IRQ
 15

	)

41 
	#NVIC_SSP0_IRQ
 14

	)

42 
	#NVIC_RTC_IRQ
 17

	)

43 
	#NVIC_PLL0_IRQ
 16

	)

44 
	#NVIC_EINT1_IRQ
 19

	)

45 
	#NVIC_EINT0_IRQ
 18

	)

46 
	#NVIC_QEI_IRQ
 31

	)

47 
	#NVIC_MOTOR_PWM_IRQ
 30

	)

48 
	#NVIC_CAN_ACT_IRQ
 34

	)

49 
	#NVIC_USB_ACT_IRQ
 33

	)

50 
	#NVIC_PLL1_IRQ
 32

	)

52 
	#NVIC_IRQ_COUNT
 35

	)

61 
BEGIN_DECLS


63 
usb_i§
();

64 
ˇn_i§
();

65 
gpdma_i§
();

66 
i2s_i§
();

67 
eöt2_i§
();

68 
eöt3_i§
();

69 
adc_i§
();

70 
bod_i§
();

71 
ëhî√t_i§
();

72 
rô_i§
();

73 
timî0_i§
();

74 
wdt_i§
();

75 
timî2_i§
();

76 
timî1_i§
();

77 
u¨t0_i§
();

78 
timî3_i§
();

79 
u¨t2_i§
();

80 
u¨t1_i§
();

81 
pwm_i§
();

82 
u¨t3_i§
();

83 
i2c1_i§
();

84 
i2c0_i§
();

85 
•i_i§
();

86 
i2c2_i§
();

87 
s•1_i§
();

88 
s•0_i§
();

89 
πc_i§
();

90 
∂l0_i§
();

91 
eöt1_i§
();

92 
eöt0_i§
();

93 
qei_i§
();

94 
mŸ‹_pwm_i§
();

95 
ˇn_a˘_i§
();

96 
usb_a˘_i§
();

97 
∂l1_i§
();

99 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc17xx/pwr.h

34 #i‚de‡
LPC17XX_POWER_H


35 
	#LPC17XX_POWER_H


	)

37 
	~<lib›ícm3/Õc17xx/mem‹ym≠.h
>

38 
	~<lib›ícm3/cm3/comm⁄.h
>

42 
	#PWR_PCON
 
	`MMIO32
(
SYSCON_BASE
 + 0x0c0)

	)

43 
	#PWR_PCONP
 
	`MMIO32
(
SYSCON_BASE
 + 0x0c4)

	)

46 
	#PWR_PCON_MODE_SLEEP
 0x00

	)

47 
	#PWR_PCON_MODE_POWER_DOWN
 0x01

	)

49 
	#PWR_PCON_MODE_DEEPSLEEP
 0x03

	)

50 
	#PWR_PCON_BODRPM
 (1 << 2)

	)

51 
	#PWR_PCON_BOGD
 (1 << 3)

	)

52 
	#PWR_PCON_BORD
 (1 << 4)

	)

54 
	#PWR_PCON_SMFLAG
 (1 << 8)

	)

55 
	#PWR_PCON_DSFLAG
 (1 << 9)

	)

56 
	#PWR_PCON_PDFLAG
 (1 << 10)

	)

57 
	#PWR_PCON_DPDFLAG
 (1 << 11)

	)

62 
	#PWR_PCONP_TIMER0
 (1 << 1)

	)

63 
	#PWR_PCONP_TIMER1
 (1 << 2)

	)

64 
	#PWR_PCONP_UART0
 (1 << 3)

	)

65 
	#PWR_PCONP_UART1
 (1 << 4)

	)

67 
	#PWR_PCONP_PWM1
 (1 << 6)

	)

68 
	#PWR_PCONP_I2C0
 (1 << 7)

	)

69 
	#PWR_PCONP_SPI
 (1 << 8)

	)

70 
	#PWR_PCONP_RTC
 (1 << 9)

	)

71 
	#PWR_PCONP_SSP1
 (1 << 10)

	)

73 
	#PWR_PCONP_ADC
 (1 << 12)

	)

74 
	#PWR_PCONP_CAN1
 (1 << 13)

	)

75 
	#PWR_PCONP_CAN2
 (1 << 14)

	)

76 
	#PWR_PCONP_GPIO
 (1 << 15)

	)

77 
	#PWR_PCONP_RIT
 (1 << 16)

	)

78 
	#PWR_PCONP_MCPWM
 (1 << 17)

	)

79 
	#PWR_PCONP_QEI
 (1 << 18)

	)

80 
	#PWR_PCONP_I2C1
 (1 << 19)

	)

82 
	#PWR_PCONP_SSP0
 (1 << 21)

	)

83 
	#PWR_PCONP_TIMER2
 (1 << 22)

	)

84 
	#PWR_PCONP_TIMER3
 (1 << 23)

	)

85 
	#PWR_PCONP_UART2
 (1 << 24)

	)

86 
	#PWR_PCONP_UART3
 (1 << 25)

	)

87 
	#PWR_PCONP_I2C2
 (1 << 26)

	)

88 
	#PWR_PCONP_I2S
 (1 << 27)

	)

90 
	#PWR_PCONP_GPDMA
 (1 << 29)

	)

91 
	#PWR_PCONP_ETHERNET
 (1 << 30)

	)

92 
	#PWR_PCONP_USB
 (1 << 31)

	)

94 
BEGIN_DECLS


96 
pwr_íabÀ_≥rùhîÆs
(
uöt32_t
 
≥rùhîÆs
);

97 
pwr_dißbÀ_≥rùhîÆs
(
uöt32_t
 
≥rùhîÆs
);

100 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc43xx/adc.h

34 #i‚de‡
LPC43XX_ADC_H


35 
	#LPC43XX_ADC_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

45 
	#ADC0
 
ADC0_BASE


	)

46 
	#ADC1
 
ADC1_BASE


	)

52 
	#ADC_CR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x000)

	)

53 
	#ADC0_CR
 
	`ADC_CR
(
ADC0
)

	)

54 
	#ADC1_CR
 
	`ADC_CR
(
ADC1
)

	)

57 
	#ADC_GDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x004)

	)

58 
	#ADC0_GDR
 
	`ADC_GDR
(
ADC0
)

	)

59 
	#ADC1_GDR
 
	`ADC_GDR
(
ADC1
)

	)

62 
	#ADC_INTEN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00C)

	)

63 
	#ADC0_INTEN
 
	`ADC_INTEN
(
ADC0
)

	)

64 
	#ADC1_INTEN
 
	`ADC_INTEN
(
ADC1
)

	)

67 
	#ADC_DR0
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x010)

	)

68 
	#ADC0_DR0
 
	`ADC_DR0
(
ADC0
)

	)

69 
	#ADC1_DR0
 
	`ADC_DR0
(
ADC1
)

	)

72 
	#ADC_DR1
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x014)

	)

73 
	#ADC0_DR1
 
	`ADC_DR1
(
ADC0
)

	)

74 
	#ADC1_DR1
 
	`ADC_DR1
(
ADC1
)

	)

77 
	#ADC_DR2
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x018)

	)

78 
	#ADC0_DR2
 
	`ADC_DR2
(
ADC0
)

	)

79 
	#ADC1_DR2
 
	`ADC_DR2
(
ADC1
)

	)

82 
	#ADC_DR3
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x01C)

	)

83 
	#ADC0_DR3
 
	`ADC_DR3
(
ADC0
)

	)

84 
	#ADC1_DR3
 
	`ADC_DR3
(
ADC1
)

	)

87 
	#ADC_DR4
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x020)

	)

88 
	#ADC0_DR4
 
	`ADC_DR4
(
ADC0
)

	)

89 
	#ADC1_DR4
 
	`ADC_DR4
(
ADC1
)

	)

92 
	#ADC_DR5
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x024)

	)

93 
	#ADC0_DR5
 
	`ADC_DR5
(
ADC0
)

	)

94 
	#ADC1_DR5
 
	`ADC_DR5
(
ADC1
)

	)

97 
	#ADC_DR6
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x028)

	)

98 
	#ADC0_DR6
 
	`ADC_DR6
(
ADC0
)

	)

99 
	#ADC1_DR6
 
	`ADC_DR6
(
ADC1
)

	)

102 
	#ADC_DR7
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x02C)

	)

103 
	#ADC0_DR7
 
	`ADC_DR7
(
ADC0
)

	)

104 
	#ADC1_DR7
 
	`ADC_DR7
(
ADC1
)

	)

107 
	#ADC_STAT
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x030)

	)

108 
	#ADC0_STAT
 
	`ADC_STAT
(
ADC0
)

	)

109 
	#ADC1_STAT
 
	`ADC_STAT
(
ADC1
)

	)

	@libopencm3/include/libopencm3/lpc43xx/atimer.h

34 #i‚de‡
LPC43XX_ATIMER_H


35 
	#LPC43XX_ATIMER_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

45 
	#ATIMER_DOWNCOUNTER
 
	`MMIO32
(
ATIMER_BASE
 + 0x000)

	)

48 
	#ATIMER_PRESET
 
	`MMIO32
(
ATIMER_BASE
 + 0x004)

	)

51 
	#ATIMER_CLR_EN
 
	`MMIO32
(
ATIMER_BASE
 + 0xFD8)

	)

54 
	#ATIMER_SET_EN
 
	`MMIO32
(
ATIMER_BASE
 + 0xFDC)

	)

57 
	#ATIMER_STATUS
 
	`MMIO32
(
ATIMER_BASE
 + 0xFE0)

	)

60 
	#ATIMER_ENABLE
 
	`MMIO32
(
ATIMER_BASE
 + 0xFE4)

	)

63 
	#ATIMER_CLR_STAT
 
	`MMIO32
(
ATIMER_BASE
 + 0xFE8)

	)

66 
	#ATIMER_SET_STAT
 
	`MMIO32
(
ATIMER_BASE
 + 0xFEC)

	)

	@libopencm3/include/libopencm3/lpc43xx/ccu.h

34 #i‚de‡
LPC43XX_CCU_H


35 
	#LPC43XX_CCU_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

45 
	#CCU1_PM
 
	`MMIO32
(
CCU1_BASE
 + 0x000)

	)

48 
	#CCU1_BASE_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x004)

	)

51 
	#CCU1_CLK_APB3_BUS_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x100)

	)

54 
	#CCU1_CLK_APB3_BUS_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x104)

	)

57 
	#CCU1_CLK_APB3_I2C1_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x108)

	)

60 
	#CCU1_CLK_APB3_I2C1_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x10C)

	)

63 
	#CCU1_CLK_APB3_DAC_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x110)

	)

66 
	#CCU1_CLK_APB3_DAC_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x114)

	)

69 
	#CCU1_CLK_APB3_ADC0_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x118)

	)

72 
	#CCU1_CLK_APB3_ADC0_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x11C)

	)

75 
	#CCU1_CLK_APB3_ADC1_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x120)

	)

78 
	#CCU1_CLK_APB3_ADC1_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x124)

	)

81 
	#CCU1_CLK_APB3_CAN0_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x128)

	)

84 
	#CCU1_CLK_APB3_CAN0_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x12C)

	)

87 
	#CCU1_CLK_APB1_BUS_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x200)

	)

90 
	#CCU1_CLK_APB1_BUS_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x204)

	)

93 
	#CCU1_CLK_APB1_MOTOCONPWM_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x208)

	)

96 
	#CCU1_CLK_APB1_MOTOCONPWM_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x20C)

	)

99 
	#CCU1_CLK_APB1_I2C0_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x210)

	)

102 
	#CCU1_CLK_APB1_I2C0_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x214)

	)

105 
	#CCU1_CLK_APB1_I2S_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x218)

	)

108 
	#CCU1_CLK_APB1_I2S_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x21C)

	)

111 
	#CCU1_CLK_APB1_CAN1_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x220)

	)

114 
	#CCU1_CLK_APB1_CAN1_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x224)

	)

117 
	#CCU1_CLK_SPIFI_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x300)

	)

120 
	#CCU1_CLK_SPIFI_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x304)

	)

123 
	#CCU1_CLK_M4_BUS_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x400)

	)

126 
	#CCU1_CLK_M4_BUS_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x404)

	)

129 
	#CCU1_CLK_M4_SPIFI_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x408)

	)

132 
	#CCU1_CLK_M4_SPIFI_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x40C)

	)

135 
	#CCU1_CLK_M4_GPIO_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x410)

	)

138 
	#CCU1_CLK_M4_GPIO_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x414)

	)

141 
	#CCU1_CLK_M4_LCD_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x418)

	)

144 
	#CCU1_CLK_M4_LCD_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x41C)

	)

147 
	#CCU1_CLK_M4_ETHERNET_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x420)

	)

150 
	#CCU1_CLK_M4_ETHERNET_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x424)

	)

153 
	#CCU1_CLK_M4_USB0_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x428)

	)

156 
	#CCU1_CLK_M4_USB0_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x42C)

	)

159 
	#CCU1_CLK_M4_EMC_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x430)

	)

162 
	#CCU1_CLK_M4_EMC_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x434)

	)

165 
	#CCU1_CLK_M4_SDIO_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x438)

	)

168 
	#CCU1_CLK_M4_SDIO_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x43C)

	)

171 
	#CCU1_CLK_M4_DMA_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x440)

	)

174 
	#CCU1_CLK_M4_DMA_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x444)

	)

177 
	#CCU1_CLK_M4_M4CORE_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x448)

	)

180 
	#CCU1_CLK_M4_M4CORE_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x44C)

	)

183 
	#CCU1_CLK_M4_SCT_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x468)

	)

186 
	#CCU1_CLK_M4_SCT_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x46C)

	)

189 
	#CCU1_CLK_M4_USB1_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x470)

	)

192 
	#CCU1_CLK_M4_USB1_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x474)

	)

195 
	#CCU1_CLK_M4_EMCDIV_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x478)

	)

198 
	#CCU1_CLK_M4_EMCDIV_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x47C)

	)

201 
	#CCU1_CLK_M4_M0APP_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x490)

	)

204 
	#CCU1_CLK_M4_M0APP_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x494)

	)

207 
	#CCU1_CLK_M4_VADC_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x498)

	)

210 
	#CCU1_CLK_M4_VADC_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x49C)

	)

213 
	#CCU1_CLK_M4_WWDT_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x500)

	)

216 
	#CCU1_CLK_M4_WWDT_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x504)

	)

219 
	#CCU1_CLK_M4_USART0_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x508)

	)

222 
	#CCU1_CLK_M4_USART0_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x50C)

	)

225 
	#CCU1_CLK_M4_UART1_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x510)

	)

228 
	#CCU1_CLK_M4_UART1_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x514)

	)

231 
	#CCU1_CLK_M4_SSP0_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x518)

	)

234 
	#CCU1_CLK_M4_SSP0_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x51C)

	)

237 
	#CCU1_CLK_M4_TIMER0_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x520)

	)

240 
	#CCU1_CLK_M4_TIMER0_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x524)

	)

243 
	#CCU1_CLK_M4_TIMER1_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x528)

	)

246 
	#CCU1_CLK_M4_TIMER1_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x52C)

	)

249 
	#CCU1_CLK_M4_SCU_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x530)

	)

252 
	#CCU1_CLK_M4_SCU_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x534)

	)

255 
	#CCU1_CLK_M4_CREG_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x538)

	)

258 
	#CCU1_CLK_M4_CREG_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x53C)

	)

261 
	#CCU1_CLK_M4_RITIMER_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x600)

	)

264 
	#CCU1_CLK_M4_RITIMER_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x604)

	)

267 
	#CCU1_CLK_M4_USART2_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x608)

	)

270 
	#CCU1_CLK_M4_USART2_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x60C)

	)

273 
	#CCU1_CLK_M4_USART3_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x610)

	)

276 
	#CCU1_CLK_M4_USART3_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x614)

	)

279 
	#CCU1_CLK_M4_TIMER2_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x618)

	)

282 
	#CCU1_CLK_M4_TIMER2_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x61C)

	)

285 
	#CCU1_CLK_M4_TIMER3_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x620)

	)

288 
	#CCU1_CLK_M4_TIMER3_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x624)

	)

291 
	#CCU1_CLK_M4_SSP1_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x628)

	)

294 
	#CCU1_CLK_M4_SSP1_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x62C)

	)

297 
	#CCU1_CLK_M4_QEI_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x630)

	)

300 
	#CCU1_CLK_M4_QEI_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x634)

	)

303 
	#CCU1_CLK_PERIPH_BUS_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x700)

	)

306 
	#CCU1_CLK_PERIPH_BUS_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x704)

	)

309 
	#CCU1_CLK_PERIPH_CORE_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x710)

	)

312 
	#CCU1_CLK_PERIPH_CORE_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x714)

	)

315 
	#CCU1_CLK_PERIPH_SGPIO_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x718)

	)

318 
	#CCU1_CLK_PERIPH_SGPIO_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x71C)

	)

321 
	#CCU1_CLK_USB0_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x800)

	)

324 
	#CCU1_CLK_USB0_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x804)

	)

327 
	#CCU1_CLK_USB1_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0x900)

	)

330 
	#CCU1_CLK_USB1_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0x904)

	)

333 
	#CCU1_CLK_SPI_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0xA00)

	)

336 
	#CCU1_CLK_SPI_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0xA04)

	)

339 
	#CCU1_CLK_VADC_CFG
 
	`MMIO32
(
CCU1_BASE
 + 0xB00)

	)

342 
	#CCU1_CLK_VADC_STAT
 
	`MMIO32
(
CCU1_BASE
 + 0xB04)

	)

347 
	#CCU2_PM
 
	`MMIO32
(
CCU2_BASE
 + 0x000)

	)

350 
	#CCU2_BASE_STAT
 
	`MMIO32
(
CCU2_BASE
 + 0x004)

	)

353 
	#CCU2_CLK_APLL_CFG
 
	`MMIO32
(
CCU2_BASE
 + 0x100)

	)

356 
	#CCU2_CLK_APLL_STAT
 
	`MMIO32
(
CCU2_BASE
 + 0x104)

	)

359 
	#CCU2_CLK_APB2_USART3_CFG
 
	`MMIO32
(
CCU2_BASE
 + 0x200)

	)

362 
	#CCU2_CLK_APB2_USART3_STAT
 
	`MMIO32
(
CCU2_BASE
 + 0x204)

	)

365 
	#CCU2_CLK_APB2_USART2_CFG
 
	`MMIO32
(
CCU2_BASE
 + 0x300)

	)

368 
	#CCU2_CLK_APB2_USART2_STAT
 
	`MMIO32
(
CCU2_BASE
 + 0x304)

	)

371 
	#CCU2_CLK_APB0_UART1_CFG
 
	`MMIO32
(
CCU2_BASE
 + 0x400)

	)

374 
	#CCU2_CLK_APB0_UART1_STAT
 
	`MMIO32
(
CCU2_BASE
 + 0x404)

	)

377 
	#CCU2_CLK_APB0_USART0_CFG
 
	`MMIO32
(
CCU2_BASE
 + 0x500)

	)

380 
	#CCU2_CLK_APB0_USART0_STAT
 
	`MMIO32
(
CCU2_BASE
 + 0x504)

	)

383 
	#CCU2_CLK_APB2_SSP1_CFG
 
	`MMIO32
(
CCU2_BASE
 + 0x600)

	)

386 
	#CCU2_CLK_APB2_SSP1_STAT
 
	`MMIO32
(
CCU2_BASE
 + 0x604)

	)

389 
	#CCU2_CLK_APB0_SSP0_CFG
 
	`MMIO32
(
CCU2_BASE
 + 0x700)

	)

392 
	#CCU2_CLK_APB0_SSP0_STAT
 
	`MMIO32
(
CCU2_BASE
 + 0x704)

	)

395 
	#CCU2_CLK_SDIO_CFG
 
	`MMIO32
(
CCU2_BASE
 + 0x800)

	)

398 
	#CCU2_CLK_SDIO_STAT
 
	`MMIO32
(
CCU2_BASE
 + 0x804)

	)

	@libopencm3/include/libopencm3/lpc43xx/cgu.h

36 #i‚de‡
LPC43XX_CGU_H


37 
	#CGU_LPC43XX_CGU_H


	)

41 
	~<lib›ícm3/cm3/comm⁄.h
>

42 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

47 
	#CGU_FREQ_MON
 
	`MMIO32
(
CGU_BASE
 + 0x014)

	)

50 
	#CGU_XTAL_OSC_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x018)

	)

53 
	#CGU_PLL0USB_STAT
 
	`MMIO32
(
CGU_BASE
 + 0x01C)

	)

56 
	#CGU_PLL0USB_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x020)

	)

59 
	#CGU_PLL0USB_MDIV
 
	`MMIO32
(
CGU_BASE
 + 0x024)

	)

62 
	#CGU_PLL0USB_NP_DIV
 
	`MMIO32
(
CGU_BASE
 + 0x028)

	)

65 
	#CGU_PLL0AUDIO_STAT
 
	`MMIO32
(
CGU_BASE
 + 0x02C)

	)

68 
	#CGU_PLL0AUDIO_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x030)

	)

71 
	#CGU_PLL0AUDIO_MDIV
 
	`MMIO32
(
CGU_BASE
 + 0x034)

	)

74 
	#CGU_PLL0AUDIO_NP_DIV
 
	`MMIO32
(
CGU_BASE
 + 0x038)

	)

77 
	#CGU_PLLAUDIO_FRAC
 
	`MMIO32
(
CGU_BASE
 + 0x03C)

	)

80 
	#CGU_PLL1_STAT
 
	`MMIO32
(
CGU_BASE
 + 0x040)

	)

83 
	#CGU_PLL1_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x044)

	)

86 
	#CGU_IDIVA_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x048)

	)

89 
	#CGU_IDIVB_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x04C)

	)

92 
	#CGU_IDIVC_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x050)

	)

95 
	#CGU_IDIVD_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x054)

	)

98 
	#CGU_IDIVE_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x058)

	)

101 
	#CGU_BASE_SAFE_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x05C)

	)

104 
	#CGU_BASE_USB0_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x060)

	)

107 
	#CGU_BASE_PERIPH_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x064)

	)

110 
	#CGU_BASE_USB1_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x068)

	)

113 
	#CGU_BASE_M4_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x06C)

	)

116 
	#CGU_BASE_SPIFI_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x070)

	)

119 
	#CGU_BASE_SPI_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x074)

	)

122 
	#CGU_BASE_PHY_RX_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x078)

	)

125 
	#CGU_BASE_PHY_TX_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x07C)

	)

128 
	#CGU_BASE_APB1_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x080)

	)

131 
	#CGU_BASE_APB3_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x084)

	)

134 
	#CGU_BASE_LCD_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x088)

	)

137 
	#CGU_BASE_VADC_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x08C)

	)

140 
	#CGU_BASE_SDIO_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x090)

	)

143 
	#CGU_BASE_SSP0_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x094)

	)

146 
	#CGU_BASE_SSP1_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x098)

	)

149 
	#CGU_BASE_UART0_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x09C)

	)

152 
	#CGU_BASE_UART1_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x0A0)

	)

155 
	#CGU_BASE_UART2_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x0A4)

	)

158 
	#CGU_BASE_UART3_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x0A8)

	)

161 
	#CGU_BASE_OUT_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x0AC)

	)

164 
	#CGU_OUTCLK_21_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x0B0)

	)

167 
	#CGU_OUTCLK_22_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x0B4)

	)

170 
	#CGU_OUTCLK_23_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x0B8)

	)

173 
	#CGU_OUTCLK_24_CTRL
 
	`MMIO32
(
CGU_BASE
 + 0x0BC)

	)

176 
	#CGU_BASE_APLL_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x0C0)

	)

179 
	#CGU_BASE_CGU_OUT0_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x0C4)

	)

182 
	#CGU_BASE_CGU_OUT1_CLK
 
	`MMIO32
(
CGU_BASE
 + 0x0C8)

	)

187 
	#CGU_FREQ_MON_RCNT_SHIFT
 (0)

	)

188 
	#CGU_FREQ_MON_RCNT_MASK
 (0x1f‡<< 
CGU_FREQ_MON_RCNT_SHIFT
)

	)

189 
	#CGU_FREQ_MON_RCNT
(
x
Ë((xË<< 
CGU_FREQ_MON_RCNT_SHIFT
)

	)

192 
	#CGU_FREQ_MON_FCNT_SHIFT
 (9)

	)

193 
	#CGU_FREQ_MON_FCNT_MASK
 (0x3ff‡<< 
CGU_FREQ_MON_FCNT_SHIFT
)

	)

194 
	#CGU_FREQ_MON_FCNT
(
x
Ë((xË<< 
CGU_FREQ_MON_FCNT_SHIFT
)

	)

197 
	#CGU_FREQ_MON_MEAS_SHIFT
 (23)

	)

198 
	#CGU_FREQ_MON_MEAS
 (1 << 
CGU_FREQ_MON_MEAS_SHIFT
)

	)

201 
	#CGU_FREQ_MON_CLK_SEL_SHIFT
 (24)

	)

202 
	#CGU_FREQ_MON_CLK_SEL_MASK
 (0x1‡<< 
CGU_FREQ_MON_CLK_SEL_SHIFT
)

	)

203 
	#CGU_FREQ_MON_CLK_SEL
(
x
Ë((xË<< 
CGU_FREQ_MON_CLK_SEL_SHIFT
)

	)

208 
	#CGU_XTAL_OSC_CTRL_ENABLE_SHIFT
 (0)

	)

209 
	#CGU_XTAL_OSC_CTRL_ENABLE
 (1 << 
CGU_XTAL_OSC_CTRL_ENABLE_SHIFT
)

	)

212 
	#CGU_XTAL_OSC_CTRL_BYPASS_SHIFT
 (1)

	)

213 
	#CGU_XTAL_OSC_CTRL_BYPASS
 (1 << 
CGU_XTAL_OSC_CTRL_BYPASS_SHIFT
)

	)

216 
	#CGU_XTAL_OSC_CTRL_HF_SHIFT
 (2)

	)

217 
	#CGU_XTAL_OSC_CTRL_HF
 (1 << 
CGU_XTAL_OSC_CTRL_HF_SHIFT
)

	)

222 
	#CGU_PLL0USB_STAT_LOCK_SHIFT
 (0)

	)

223 
	#CGU_PLL0USB_STAT_LOCK
 (1 << 
CGU_PLL0USB_STAT_LOCK_SHIFT
)

	)

226 
	#CGU_PLL0USB_STAT_FR_SHIFT
 (1)

	)

227 
	#CGU_PLL0USB_STAT_FR
 (1 << 
CGU_PLL0USB_STAT_FR_SHIFT
)

	)

232 
	#CGU_PLL0USB_CTRL_PD_SHIFT
 (0)

	)

233 
	#CGU_PLL0USB_CTRL_PD
 (1 << 
CGU_PLL0USB_CTRL_PD_SHIFT
)

	)

236 
	#CGU_PLL0USB_CTRL_BYPASS_SHIFT
 (1)

	)

237 
	#CGU_PLL0USB_CTRL_BYPASS
 (1 << 
CGU_PLL0USB_CTRL_BYPASS_SHIFT
)

	)

240 
	#CGU_PLL0USB_CTRL_DIRECTI_SHIFT
 (2)

	)

241 
	#CGU_PLL0USB_CTRL_DIRECTI
 (1 << 
CGU_PLL0USB_CTRL_DIRECTI_SHIFT
)

	)

244 
	#CGU_PLL0USB_CTRL_DIRECTO_SHIFT
 (3)

	)

245 
	#CGU_PLL0USB_CTRL_DIRECTO
 (1 << 
CGU_PLL0USB_CTRL_DIRECTO_SHIFT
)

	)

248 
	#CGU_PLL0USB_CTRL_CLKEN_SHIFT
 (4)

	)

249 
	#CGU_PLL0USB_CTRL_CLKEN
 (1 << 
CGU_PLL0USB_CTRL_CLKEN_SHIFT
)

	)

252 
	#CGU_PLL0USB_CTRL_FRM_SHIFT
 (6)

	)

253 
	#CGU_PLL0USB_CTRL_FRM
 (1 << 
CGU_PLL0USB_CTRL_FRM_SHIFT
)

	)

256 
	#CGU_PLL0USB_CTRL_AUTOBLOCK_SHIFT
 (11)

	)

257 
	#CGU_PLL0USB_CTRL_AUTOBLOCK
 (1 << 
CGU_PLL0USB_CTRL_AUTOBLOCK_SHIFT
)

	)

260 
	#CGU_PLL0USB_CTRL_CLK_SEL_SHIFT
 (24)

	)

261 
	#CGU_PLL0USB_CTRL_CLK_SEL_MASK
 (0x1‡<< 
CGU_PLL0USB_CTRL_CLK_SEL_SHIFT
)

	)

262 
	#CGU_PLL0USB_CTRL_CLK_SEL
(
x
Ë((xË<< 
CGU_PLL0USB_CTRL_CLK_SEL_SHIFT
)

	)

267 
	#CGU_PLL0USB_MDIV_MDEC_SHIFT
 (0)

	)

268 
	#CGU_PLL0USB_MDIV_MDEC_MASK
 (0x1fff‡<< 
CGU_PLL0USB_MDIV_MDEC_SHIFT
)

	)

269 
	#CGU_PLL0USB_MDIV_MDEC
(
x
Ë((xË<< 
CGU_PLL0USB_MDIV_MDEC_SHIFT
)

	)

272 
	#CGU_PLL0USB_MDIV_SELP_SHIFT
 (17)

	)

273 
	#CGU_PLL0USB_MDIV_SELP_MASK
 (0x1‡<< 
CGU_PLL0USB_MDIV_SELP_SHIFT
)

	)

274 
	#CGU_PLL0USB_MDIV_SELP
(
x
Ë((xË<< 
CGU_PLL0USB_MDIV_SELP_SHIFT
)

	)

277 
	#CGU_PLL0USB_MDIV_SELI_SHIFT
 (22)

	)

278 
	#CGU_PLL0USB_MDIV_SELI_MASK
 (0x3‡<< 
CGU_PLL0USB_MDIV_SELI_SHIFT
)

	)

279 
	#CGU_PLL0USB_MDIV_SELI
(
x
Ë((xË<< 
CGU_PLL0USB_MDIV_SELI_SHIFT
)

	)

282 
	#CGU_PLL0USB_MDIV_SELR_SHIFT
 (28)

	)

283 
	#CGU_PLL0USB_MDIV_SELR_MASK
 (0x‡<< 
CGU_PLL0USB_MDIV_SELR_SHIFT
)

	)

284 
	#CGU_PLL0USB_MDIV_SELR
(
x
Ë((xË<< 
CGU_PLL0USB_MDIV_SELR_SHIFT
)

	)

289 
	#CGU_PLL0USB_NP_DIV_PDEC_SHIFT
 (0)

	)

290 
	#CGU_PLL0USB_NP_DIV_PDEC_MASK
 (0x7‡<< 
CGU_PLL0USB_NP_DIV_PDEC_SHIFT
)

	)

291 
	#CGU_PLL0USB_NP_DIV_PDEC
(
x
Ë((xË<< 
CGU_PLL0USB_NP_DIV_PDEC_SHIFT
)

	)

294 
	#CGU_PLL0USB_NP_DIV_NDEC_SHIFT
 (12)

	)

295 
	#CGU_PLL0USB_NP_DIV_NDEC_MASK
 (0x3f‡<< 
CGU_PLL0USB_NP_DIV_NDEC_SHIFT
)

	)

296 
	#CGU_PLL0USB_NP_DIV_NDEC
(
x
Ë((xË<< 
CGU_PLL0USB_NP_DIV_NDEC_SHIFT
)

	)

301 
	#CGU_PLL0AUDIO_STAT_LOCK_SHIFT
 (0)

	)

302 
	#CGU_PLL0AUDIO_STAT_LOCK
 (1 << 
CGU_PLL0AUDIO_STAT_LOCK_SHIFT
)

	)

305 
	#CGU_PLL0AUDIO_STAT_FR_SHIFT
 (1)

	)

306 
	#CGU_PLL0AUDIO_STAT_FR
 (1 << 
CGU_PLL0AUDIO_STAT_FR_SHIFT
)

	)

311 
	#CGU_PLL0AUDIO_CTRL_PD_SHIFT
 (0)

	)

312 
	#CGU_PLL0AUDIO_CTRL_PD
 (1 << 
CGU_PLL0AUDIO_CTRL_PD_SHIFT
)

	)

315 
	#CGU_PLL0AUDIO_CTRL_BYPASS_SHIFT
 (1)

	)

316 
	#CGU_PLL0AUDIO_CTRL_BYPASS
 (1 << 
CGU_PLL0AUDIO_CTRL_BYPASS_SHIFT
)

	)

319 
	#CGU_PLL0AUDIO_CTRL_DIRECTI_SHIFT
 (2)

	)

320 
	#CGU_PLL0AUDIO_CTRL_DIRECTI
 (1 << 
CGU_PLL0AUDIO_CTRL_DIRECTI_SHIFT
)

	)

323 
	#CGU_PLL0AUDIO_CTRL_DIRECTO_SHIFT
 (3)

	)

324 
	#CGU_PLL0AUDIO_CTRL_DIRECTO
 (1 << 
CGU_PLL0AUDIO_CTRL_DIRECTO_SHIFT
)

	)

327 
	#CGU_PLL0AUDIO_CTRL_CLKEN_SHIFT
 (4)

	)

328 
	#CGU_PLL0AUDIO_CTRL_CLKEN
 (1 << 
CGU_PLL0AUDIO_CTRL_CLKEN_SHIFT
)

	)

331 
	#CGU_PLL0AUDIO_CTRL_FRM_SHIFT
 (6)

	)

332 
	#CGU_PLL0AUDIO_CTRL_FRM
 (1 << 
CGU_PLL0AUDIO_CTRL_FRM_SHIFT
)

	)

335 
	#CGU_PLL0AUDIO_CTRL_AUTOBLOCK_SHIFT
 (11)

	)

336 
	#CGU_PLL0AUDIO_CTRL_AUTOBLOCK
 \

337 (1 << 
CGU_PLL0AUDIO_CTRL_AUTOBLOCK_SHIFT
)

	)

340 
	#CGU_PLL0AUDIO_CTRL_PLLFRACT_REQ_SHIFT
 (12)

	)

341 
	#CGU_PLL0AUDIO_CTRL_PLLFRACT_REQ
 \

342 (1 << 
CGU_PLL0AUDIO_CTRL_PLLFRACT_REQ_SHIFT
)

	)

345 
	#CGU_PLL0AUDIO_CTRL_SEL_EXT_SHIFT
 (13)

	)

346 
	#CGU_PLL0AUDIO_CTRL_SEL_EXT
 (1 << 
CGU_PLL0AUDIO_CTRL_SEL_EXT_SHIFT
)

	)

349 
	#CGU_PLL0AUDIO_CTRL_MOD_PD_SHIFT
 (14)

	)

350 
	#CGU_PLL0AUDIO_CTRL_MOD_PD
 (1 << 
CGU_PLL0AUDIO_CTRL_MOD_PD_SHIFT
)

	)

353 
	#CGU_PLL0AUDIO_CTRL_CLK_SEL_SHIFT
 (24)

	)

354 
	#CGU_PLL0AUDIO_CTRL_CLK_SEL_MASK
 \

355 (0x1‡<< 
CGU_PLL0AUDIO_CTRL_CLK_SEL_SHIFT
)

	)

356 
	#CGU_PLL0AUDIO_CTRL_CLK_SEL
(
x
) \

357 ((
x
Ë<< 
CGU_PLL0AUDIO_CTRL_CLK_SEL_SHIFT
)

	)

362 
	#CGU_PLL0AUDIO_MDIV_MDEC_SHIFT
 (0)

	)

363 
	#CGU_PLL0AUDIO_MDIV_MDEC_MASK
 \

364 (0x1fff‡<< 
CGU_PLL0AUDIO_MDIV_MDEC_SHIFT
)

	)

365 
	#CGU_PLL0AUDIO_MDIV_MDEC
(
x
) \

366 ((
x
Ë<< 
CGU_PLL0AUDIO_MDIV_MDEC_SHIFT
)

	)

371 
	#CGU_PLL0AUDIO_NP_DIV_PDEC_SHIFT
 (0)

	)

372 
	#CGU_PLL0AUDIO_NP_DIV_PDEC_MASK
 \

373 (0x7‡<< 
CGU_PLL0AUDIO_NP_DIV_PDEC_SHIFT
)

	)

374 
	#CGU_PLL0AUDIO_NP_DIV_PDEC
(
x
) \

375 ((
x
Ë<< 
CGU_PLL0AUDIO_NP_DIV_PDEC_SHIFT
)

	)

378 
	#CGU_PLL0AUDIO_NP_DIV_NDEC_SHIFT
 (12)

	)

379 
	#CGU_PLL0AUDIO_NP_DIV_NDEC_MASK
 \

380 (0x3f‡<< 
CGU_PLL0AUDIO_NP_DIV_NDEC_SHIFT
)

	)

381 
	#CGU_PLL0AUDIO_NP_DIV_NDEC
(
x
) \

382 ((
x
Ë<< 
CGU_PLL0AUDIO_NP_DIV_NDEC_SHIFT
)

	)

387 
	#CGU_PLLAUDIO_FRAC_PLLFRACT_CTRL_SHIFT
 (0)

	)

388 
	#CGU_PLLAUDIO_FRAC_PLLFRACT_CTRL_MASK
 \

389 (0x3ffff‡<< 
CGU_PLLAUDIO_FRAC_PLLFRACT_CTRL_SHIFT
)

	)

390 
	#CGU_PLLAUDIO_FRAC_PLLFRACT_CTRL
(
x
) \

391 ((
x
Ë<< 
CGU_PLLAUDIO_FRAC_PLLFRACT_CTRL_SHIFT
)

	)

396 
	#CGU_PLL1_STAT_LOCK_SHIFT
 (0)

	)

397 
	#CGU_PLL1_STAT_LOCK
 (1 << 
CGU_PLL1_STAT_LOCK_SHIFT
)

	)

402 
	#CGU_PLL1_CTRL_PD_SHIFT
 (0)

	)

403 
	#CGU_PLL1_CTRL_PD
 (1 << 
CGU_PLL1_CTRL_PD_SHIFT
)

	)

406 
	#CGU_PLL1_CTRL_BYPASS_SHIFT
 (1)

	)

407 
	#CGU_PLL1_CTRL_BYPASS
 (1 << 
CGU_PLL1_CTRL_BYPASS_SHIFT
)

	)

410 
	#CGU_PLL1_CTRL_FBSEL_SHIFT
 (6)

	)

411 
	#CGU_PLL1_CTRL_FBSEL
 (1 << 
CGU_PLL1_CTRL_FBSEL_SHIFT
)

	)

414 
	#CGU_PLL1_CTRL_DIRECT_SHIFT
 (7)

	)

415 
	#CGU_PLL1_CTRL_DIRECT
 (1 << 
CGU_PLL1_CTRL_DIRECT_SHIFT
)

	)

418 
	#CGU_PLL1_CTRL_PSEL_SHIFT
 (8)

	)

419 
	#CGU_PLL1_CTRL_PSEL_MASK
 (0x3 << 
CGU_PLL1_CTRL_PSEL_SHIFT
)

	)

420 
	#CGU_PLL1_CTRL_PSEL
(
x
Ë((xË<< 
CGU_PLL1_CTRL_PSEL_SHIFT
)

	)

423 
	#CGU_PLL1_CTRL_AUTOBLOCK_SHIFT
 (11)

	)

424 
	#CGU_PLL1_CTRL_AUTOBLOCK
 (1 << 
CGU_PLL1_CTRL_AUTOBLOCK_SHIFT
)

	)

427 
	#CGU_PLL1_CTRL_NSEL_SHIFT
 (12)

	)

428 
	#CGU_PLL1_CTRL_NSEL_MASK
 (0x3 << 
CGU_PLL1_CTRL_NSEL_SHIFT
)

	)

429 
	#CGU_PLL1_CTRL_NSEL
(
x
Ë((xË<< 
CGU_PLL1_CTRL_NSEL_SHIFT
)

	)

432 
	#CGU_PLL1_CTRL_MSEL_SHIFT
 (16)

	)

433 
	#CGU_PLL1_CTRL_MSEL_MASK
 (0xf‡<< 
CGU_PLL1_CTRL_MSEL_SHIFT
)

	)

434 
	#CGU_PLL1_CTRL_MSEL
(
x
Ë((xË<< 
CGU_PLL1_CTRL_MSEL_SHIFT
)

	)

437 
	#CGU_PLL1_CTRL_CLK_SEL_SHIFT
 (24)

	)

438 
	#CGU_PLL1_CTRL_CLK_SEL_MASK
 (0x1‡<< 
CGU_PLL1_CTRL_CLK_SEL_SHIFT
)

	)

439 
	#CGU_PLL1_CTRL_CLK_SEL
(
x
Ë((xË<< 
CGU_PLL1_CTRL_CLK_SEL_SHIFT
)

	)

444 
	#CGU_IDIVA_CTRL_PD_SHIFT
 (0)

	)

445 
	#CGU_IDIVA_CTRL_PD
 (1 << 
CGU_IDIVA_CTRL_PD_SHIFT
)

	)

448 
	#CGU_IDIVA_CTRL_IDIV_SHIFT
 (2)

	)

449 
	#CGU_IDIVA_CTRL_IDIV_MASK
 (0x3 << 
CGU_IDIVA_CTRL_IDIV_SHIFT
)

	)

450 
	#CGU_IDIVA_CTRL_IDIV
(
x
Ë((xË<< 
CGU_IDIVA_CTRL_IDIV_SHIFT
)

	)

453 
	#CGU_IDIVA_CTRL_AUTOBLOCK_SHIFT
 (11)

	)

454 
	#CGU_IDIVA_CTRL_AUTOBLOCK
 (1 << 
CGU_IDIVA_CTRL_AUTOBLOCK_SHIFT
)

	)

457 
	#CGU_IDIVA_CTRL_CLK_SEL_SHIFT
 (24)

	)

458 
	#CGU_IDIVA_CTRL_CLK_SEL_MASK
 (0x1‡<< 
CGU_IDIVA_CTRL_CLK_SEL_SHIFT
)

	)

459 
	#CGU_IDIVA_CTRL_CLK_SEL
(
x
Ë((xË<< 
CGU_IDIVA_CTRL_CLK_SEL_SHIFT
)

	)

464 
	#CGU_IDIVB_CTRL_PD_SHIFT
 (0)

	)

465 
	#CGU_IDIVB_CTRL_PD
 (1 << 
CGU_IDIVB_CTRL_PD_SHIFT
)

	)

468 
	#CGU_IDIVB_CTRL_IDIV_SHIFT
 (2)

	)

469 
	#CGU_IDIVB_CTRL_IDIV_MASK
 (0x‡<< 
CGU_IDIVB_CTRL_IDIV_SHIFT
)

	)

470 
	#CGU_IDIVB_CTRL_IDIV
(
x
Ë((xË<< 
CGU_IDIVB_CTRL_IDIV_SHIFT
)

	)

473 
	#CGU_IDIVB_CTRL_AUTOBLOCK_SHIFT
 (11)

	)

474 
	#CGU_IDIVB_CTRL_AUTOBLOCK
 (1 << 
CGU_IDIVB_CTRL_AUTOBLOCK_SHIFT
)

	)

477 
	#CGU_IDIVB_CTRL_CLK_SEL_SHIFT
 (24)

	)

478 
	#CGU_IDIVB_CTRL_CLK_SEL_MASK
 (0x1‡<< 
CGU_IDIVB_CTRL_CLK_SEL_SHIFT
)

	)

479 
	#CGU_IDIVB_CTRL_CLK_SEL
(
x
Ë((xË<< 
CGU_IDIVB_CTRL_CLK_SEL_SHIFT
)

	)

484 
	#CGU_IDIVC_CTRL_PD_SHIFT
 (0)

	)

485 
	#CGU_IDIVC_CTRL_PD
 (1 << 
CGU_IDIVC_CTRL_PD_SHIFT
)

	)

488 
	#CGU_IDIVC_CTRL_IDIV_SHIFT
 (2)

	)

489 
	#CGU_IDIVC_CTRL_IDIV_MASK
 (0x‡<< 
CGU_IDIVC_CTRL_IDIV_SHIFT
)

	)

490 
	#CGU_IDIVC_CTRL_IDIV
(
x
Ë((xË<< 
CGU_IDIVC_CTRL_IDIV_SHIFT
)

	)

493 
	#CGU_IDIVC_CTRL_AUTOBLOCK_SHIFT
 (11)

	)

494 
	#CGU_IDIVC_CTRL_AUTOBLOCK
 (1 << 
CGU_IDIVC_CTRL_AUTOBLOCK_SHIFT
)

	)

497 
	#CGU_IDIVC_CTRL_CLK_SEL_SHIFT
 (24)

	)

498 
	#CGU_IDIVC_CTRL_CLK_SEL_MASK
 (0x1‡<< 
CGU_IDIVC_CTRL_CLK_SEL_SHIFT
)

	)

499 
	#CGU_IDIVC_CTRL_CLK_SEL
(
x
Ë((xË<< 
CGU_IDIVC_CTRL_CLK_SEL_SHIFT
)

	)

504 
	#CGU_IDIVD_CTRL_PD_SHIFT
 (0)

	)

505 
	#CGU_IDIVD_CTRL_PD
 (1 << 
CGU_IDIVD_CTRL_PD_SHIFT
)

	)

508 
	#CGU_IDIVD_CTRL_IDIV_SHIFT
 (2)

	)

509 
	#CGU_IDIVD_CTRL_IDIV_MASK
 (0x‡<< 
CGU_IDIVD_CTRL_IDIV_SHIFT
)

	)

510 
	#CGU_IDIVD_CTRL_IDIV
(
x
Ë((xË<< 
CGU_IDIVD_CTRL_IDIV_SHIFT
)

	)

513 
	#CGU_IDIVD_CTRL_AUTOBLOCK_SHIFT
 (11)

	)

514 
	#CGU_IDIVD_CTRL_AUTOBLOCK
 (1 << 
CGU_IDIVD_CTRL_AUTOBLOCK_SHIFT
)

	)

517 
	#CGU_IDIVD_CTRL_CLK_SEL_SHIFT
 (24)

	)

518 
	#CGU_IDIVD_CTRL_CLK_SEL_MASK
 (0x1‡<< 
CGU_IDIVD_CTRL_CLK_SEL_SHIFT
)

	)

519 
	#CGU_IDIVD_CTRL_CLK_SEL
(
x
Ë((xË<< 
CGU_IDIVD_CTRL_CLK_SEL_SHIFT
)

	)

524 
	#CGU_IDIVE_CTRL_PD_SHIFT
 (0)

	)

525 
	#CGU_IDIVE_CTRL_PD
 (1 << 
CGU_IDIVE_CTRL_PD_SHIFT
)

	)

528 
	#CGU_IDIVE_CTRL_IDIV_SHIFT
 (2)

	)

529 
	#CGU_IDIVE_CTRL_IDIV_MASK
 (0xf‡<< 
CGU_IDIVE_CTRL_IDIV_SHIFT
)

	)

530 
	#CGU_IDIVE_CTRL_IDIV
(
x
Ë((xË<< 
CGU_IDIVE_CTRL_IDIV_SHIFT
)

	)

533 
	#CGU_IDIVE_CTRL_AUTOBLOCK_SHIFT
 (11)

	)

534 
	#CGU_IDIVE_CTRL_AUTOBLOCK
 (1 << 
CGU_IDIVE_CTRL_AUTOBLOCK_SHIFT
)

	)

537 
	#CGU_IDIVE_CTRL_CLK_SEL_SHIFT
 (24)

	)

538 
	#CGU_IDIVE_CTRL_CLK_SEL_MASK
 (0x1‡<< 
CGU_IDIVE_CTRL_CLK_SEL_SHIFT
)

	)

539 
	#CGU_IDIVE_CTRL_CLK_SEL
(
x
Ë((xË<< 
CGU_IDIVE_CTRL_CLK_SEL_SHIFT
)

	)

544 
	#CGU_BASE_SAFE_CLK_PD_SHIFT
 (0)

	)

545 
	#CGU_BASE_SAFE_CLK_PD
 (1 << 
CGU_BASE_SAFE_CLK_PD_SHIFT
)

	)

548 
	#CGU_BASE_SAFE_CLK_AUTOBLOCK_SHIFT
 (11)

	)

549 
	#CGU_BASE_SAFE_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_SAFE_CLK_AUTOBLOCK_SHIFT
)

	)

552 
	#CGU_BASE_SAFE_CLK_CLK_SEL_SHIFT
 (24)

	)

553 
	#CGU_BASE_SAFE_CLK_CLK_SEL_MASK
 \

554 (0x1‡<< 
CGU_BASE_SAFE_CLK_CLK_SEL_SHIFT
)

	)

555 
	#CGU_BASE_SAFE_CLK_CLK_SEL
(
x
) \

556 ((
x
Ë<< 
CGU_BASE_SAFE_CLK_CLK_SEL_SHIFT
)

	)

561 
	#CGU_BASE_USB0_CLK_PD_SHIFT
 (0)

	)

562 
	#CGU_BASE_USB0_CLK_PD
 (1 << 
CGU_BASE_USB0_CLK_PD_SHIFT
)

	)

565 
	#CGU_BASE_USB0_CLK_AUTOBLOCK_SHIFT
 (11)

	)

566 
	#CGU_BASE_USB0_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_USB0_CLK_AUTOBLOCK_SHIFT
)

	)

569 
	#CGU_BASE_USB0_CLK_CLK_SEL_SHIFT
 (24)

	)

570 
	#CGU_BASE_USB0_CLK_CLK_SEL_MASK
 \

571 (0x1‡<< 
CGU_BASE_USB0_CLK_CLK_SEL_SHIFT
)

	)

572 
	#CGU_BASE_USB0_CLK_CLK_SEL
(
x
) \

573 ((
x
Ë<< 
CGU_BASE_USB0_CLK_CLK_SEL_SHIFT
)

	)

578 
	#CGU_BASE_PERIPH_CLK_PD_SHIFT
 (0)

	)

579 
	#CGU_BASE_PERIPH_CLK_PD
 (1 << 
CGU_BASE_PERIPH_CLK_PD_SHIFT
)

	)

582 
	#CGU_BASE_PERIPH_CLK_AUTOBLOCK_SHIFT
 (11)

	)

583 
	#CGU_BASE_PERIPH_CLK_AUTOBLOCK
 \

584 (1 << 
CGU_BASE_PERIPH_CLK_AUTOBLOCK_SHIFT
)

	)

587 
	#CGU_BASE_PERIPH_CLK_CLK_SEL_SHIFT
 (24)

	)

588 
	#CGU_BASE_PERIPH_CLK_CLK_SEL_MASK
 \

589 (0x1‡<< 
CGU_BASE_PERIPH_CLK_CLK_SEL_SHIFT
)

	)

590 
	#CGU_BASE_PERIPH_CLK_CLK_SEL
(
x
) \

591 ((
x
Ë<< 
CGU_BASE_PERIPH_CLK_CLK_SEL_SHIFT
)

	)

596 
	#CGU_BASE_USB1_CLK_PD_SHIFT
 (0)

	)

597 
	#CGU_BASE_USB1_CLK_PD
 (1 << 
CGU_BASE_USB1_CLK_PD_SHIFT
)

	)

600 
	#CGU_BASE_USB1_CLK_AUTOBLOCK_SHIFT
 (11)

	)

601 
	#CGU_BASE_USB1_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_USB1_CLK_AUTOBLOCK_SHIFT
)

	)

604 
	#CGU_BASE_USB1_CLK_CLK_SEL_SHIFT
 (24)

	)

605 
	#CGU_BASE_USB1_CLK_CLK_SEL_MASK
 \

606 (0x1‡<< 
CGU_BASE_USB1_CLK_CLK_SEL_SHIFT
)

	)

607 
	#CGU_BASE_USB1_CLK_CLK_SEL
(
x
) \

608 ((
x
Ë<< 
CGU_BASE_USB1_CLK_CLK_SEL_SHIFT
)

	)

613 
	#CGU_BASE_M4_CLK_PD_SHIFT
 (0)

	)

614 
	#CGU_BASE_M4_CLK_PD
 (1 << 
CGU_BASE_M4_CLK_PD_SHIFT
)

	)

617 
	#CGU_BASE_M4_CLK_AUTOBLOCK_SHIFT
 (11)

	)

618 
	#CGU_BASE_M4_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_M4_CLK_AUTOBLOCK_SHIFT
)

	)

621 
	#CGU_BASE_M4_CLK_CLK_SEL_SHIFT
 (24)

	)

622 
	#CGU_BASE_M4_CLK_CLK_SEL_MASK
 (0x1‡<< 
CGU_BASE_M4_CLK_CLK_SEL_SHIFT
)

	)

623 
	#CGU_BASE_M4_CLK_CLK_SEL
(
x
Ë((xË<< 
CGU_BASE_M4_CLK_CLK_SEL_SHIFT
)

	)

628 
	#CGU_BASE_SPIFI_CLK_PD_SHIFT
 (0)

	)

629 
	#CGU_BASE_SPIFI_CLK_PD
 (1 << 
CGU_BASE_SPIFI_CLK_PD_SHIFT
)

	)

632 
	#CGU_BASE_SPIFI_CLK_AUTOBLOCK_SHIFT
 (11)

	)

633 
	#CGU_BASE_SPIFI_CLK_AUTOBLOCK
 \

634 (1 << 
CGU_BASE_SPIFI_CLK_AUTOBLOCK_SHIFT
)

	)

637 
	#CGU_BASE_SPIFI_CLK_CLK_SEL_SHIFT
 (24)

	)

638 
	#CGU_BASE_SPIFI_CLK_CLK_SEL_MASK
 \

639 (0x1‡<< 
CGU_BASE_SPIFI_CLK_CLK_SEL_SHIFT
)

	)

640 
	#CGU_BASE_SPIFI_CLK_CLK_SEL
(
x
) \

641 ((
x
Ë<< 
CGU_BASE_SPIFI_CLK_CLK_SEL_SHIFT
)

	)

646 
	#CGU_BASE_SPI_CLK_PD_SHIFT
 (0)

	)

647 
	#CGU_BASE_SPI_CLK_PD
 (1 << 
CGU_BASE_SPI_CLK_PD_SHIFT
)

	)

650 
	#CGU_BASE_SPI_CLK_AUTOBLOCK_SHIFT
 (11)

	)

651 
	#CGU_BASE_SPI_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_SPI_CLK_AUTOBLOCK_SHIFT
)

	)

654 
	#CGU_BASE_SPI_CLK_CLK_SEL_SHIFT
 (24)

	)

655 
	#CGU_BASE_SPI_CLK_CLK_SEL_MASK
 (0x1‡<< 
CGU_BASE_SPI_CLK_CLK_SEL_SHIFT
)

	)

656 
	#CGU_BASE_SPI_CLK_CLK_SEL
(
x
Ë((xË<< 
CGU_BASE_SPI_CLK_CLK_SEL_SHIFT
)

	)

661 
	#CGU_BASE_PHY_RX_CLK_PD_SHIFT
 (0)

	)

662 
	#CGU_BASE_PHY_RX_CLK_PD
 (1 << 
CGU_BASE_PHY_RX_CLK_PD_SHIFT
)

	)

665 
	#CGU_BASE_PHY_RX_CLK_AUTOBLOCK_SHIFT
 (11)

	)

666 
	#CGU_BASE_PHY_RX_CLK_AUTOBLOCK
 \

667 (1 << 
CGU_BASE_PHY_RX_CLK_AUTOBLOCK_SHIFT
)

	)

670 
	#CGU_BASE_PHY_RX_CLK_CLK_SEL_SHIFT
 (24)

	)

671 
	#CGU_BASE_PHY_RX_CLK_CLK_SEL_MASK
 \

672 (0x1‡<< 
CGU_BASE_PHY_RX_CLK_CLK_SEL_SHIFT
)

	)

673 
	#CGU_BASE_PHY_RX_CLK_CLK_SEL
(
x
) \

674 ((
x
Ë<< 
CGU_BASE_PHY_RX_CLK_CLK_SEL_SHIFT
)

	)

679 
	#CGU_BASE_PHY_TX_CLK_PD_SHIFT
 (0)

	)

680 
	#CGU_BASE_PHY_TX_CLK_PD
 (1 << 
CGU_BASE_PHY_TX_CLK_PD_SHIFT
)

	)

683 
	#CGU_BASE_PHY_TX_CLK_AUTOBLOCK_SHIFT
 (11)

	)

684 
	#CGU_BASE_PHY_TX_CLK_AUTOBLOCK
 \

685 (1 << 
CGU_BASE_PHY_TX_CLK_AUTOBLOCK_SHIFT
)

	)

688 
	#CGU_BASE_PHY_TX_CLK_CLK_SEL_SHIFT
 (24)

	)

689 
	#CGU_BASE_PHY_TX_CLK_CLK_SEL_MASK
 \

690 (0x1‡<< 
CGU_BASE_PHY_TX_CLK_CLK_SEL_SHIFT
)

	)

691 
	#CGU_BASE_PHY_TX_CLK_CLK_SEL
(
x
) \

692 ((
x
Ë<< 
CGU_BASE_PHY_TX_CLK_CLK_SEL_SHIFT
)

	)

697 
	#CGU_BASE_APB1_CLK_PD_SHIFT
 (0)

	)

698 
	#CGU_BASE_APB1_CLK_PD
 (1 << 
CGU_BASE_APB1_CLK_PD_SHIFT
)

	)

701 
	#CGU_BASE_APB1_CLK_AUTOBLOCK_SHIFT
 (11)

	)

702 
	#CGU_BASE_APB1_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_APB1_CLK_AUTOBLOCK_SHIFT
)

	)

705 
	#CGU_BASE_APB1_CLK_CLK_SEL_SHIFT
 (24)

	)

706 
	#CGU_BASE_APB1_CLK_CLK_SEL_MASK
 \

707 (0x1‡<< 
CGU_BASE_APB1_CLK_CLK_SEL_SHIFT
)

	)

708 
	#CGU_BASE_APB1_CLK_CLK_SEL
(
x
Ë((xË<< 
CGU_BASE_APB1_CLK_CLK_SEL_SHIFT
)

	)

713 
	#CGU_BASE_APB3_CLK_PD_SHIFT
 (0)

	)

714 
	#CGU_BASE_APB3_CLK_PD
 (1 << 
CGU_BASE_APB3_CLK_PD_SHIFT
)

	)

717 
	#CGU_BASE_APB3_CLK_AUTOBLOCK_SHIFT
 (11)

	)

718 
	#CGU_BASE_APB3_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_APB3_CLK_AUTOBLOCK_SHIFT
)

	)

721 
	#CGU_BASE_APB3_CLK_CLK_SEL_SHIFT
 (24)

	)

722 
	#CGU_BASE_APB3_CLK_CLK_SEL_MASK
 \

723 (0x1‡<< 
CGU_BASE_APB3_CLK_CLK_SEL_SHIFT
)

	)

724 
	#CGU_BASE_APB3_CLK_CLK_SEL
(
x
Ë((xË<< 
CGU_BASE_APB3_CLK_CLK_SEL_SHIFT
)

	)

729 
	#CGU_BASE_LCD_CLK_PD_SHIFT
 (0)

	)

730 
	#CGU_BASE_LCD_CLK_PD
 (1 << 
CGU_BASE_LCD_CLK_PD_SHIFT
)

	)

733 
	#CGU_BASE_LCD_CLK_AUTOBLOCK_SHIFT
 (11)

	)

734 
	#CGU_BASE_LCD_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_LCD_CLK_AUTOBLOCK_SHIFT
)

	)

737 
	#CGU_BASE_LCD_CLK_CLK_SEL_SHIFT
 (24)

	)

738 
	#CGU_BASE_LCD_CLK_CLK_SEL_MASK
 (0x1‡<< 
CGU_BASE_LCD_CLK_CLK_SEL_SHIFT
)

	)

739 
	#CGU_BASE_LCD_CLK_CLK_SEL
(
x
Ë((xË<< 
CGU_BASE_LCD_CLK_CLK_SEL_SHIFT
)

	)

744 
	#CGU_BASE_VADC_CLK_PD_SHIFT
 (0)

	)

745 
	#CGU_BASE_VADC_CLK_PD
 (1 << 
CGU_BASE_VADC_CLK_PD_SHIFT
)

	)

748 
	#CGU_BASE_VADC_CLK_AUTOBLOCK_SHIFT
 (11)

	)

749 
	#CGU_BASE_VADC_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_VADC_CLK_AUTOBLOCK_SHIFT
)

	)

752 
	#CGU_BASE_VADC_CLK_CLK_SEL_SHIFT
 (24)

	)

753 
	#CGU_BASE_VADC_CLK_CLK_SEL_MASK
 \

754 (0x1‡<< 
CGU_BASE_VADC_CLK_CLK_SEL_SHIFT
)

	)

755 
	#CGU_BASE_VADC_CLK_CLK_SEL
(
x
Ë((xË<< 
CGU_BASE_VADC_CLK_CLK_SEL_SHIFT
)

	)

760 
	#CGU_BASE_SDIO_CLK_PD_SHIFT
 (0)

	)

761 
	#CGU_BASE_SDIO_CLK_PD
 (1 << 
CGU_BASE_SDIO_CLK_PD_SHIFT
)

	)

764 
	#CGU_BASE_SDIO_CLK_AUTOBLOCK_SHIFT
 (11)

	)

765 
	#CGU_BASE_SDIO_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_SDIO_CLK_AUTOBLOCK_SHIFT
)

	)

768 
	#CGU_BASE_SDIO_CLK_CLK_SEL_SHIFT
 (24)

	)

769 
	#CGU_BASE_SDIO_CLK_CLK_SEL_MASK
 \

770 (0x1‡<< 
CGU_BASE_SDIO_CLK_CLK_SEL_SHIFT
)

	)

771 
	#CGU_BASE_SDIO_CLK_CLK_SEL
(
x
Ë((xË<< 
CGU_BASE_SDIO_CLK_CLK_SEL_SHIFT
)

	)

776 
	#CGU_BASE_SSP0_CLK_PD_SHIFT
 (0)

	)

777 
	#CGU_BASE_SSP0_CLK_PD
 (1 << 
CGU_BASE_SSP0_CLK_PD_SHIFT
)

	)

780 
	#CGU_BASE_SSP0_CLK_AUTOBLOCK_SHIFT
 (11)

	)

781 
	#CGU_BASE_SSP0_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_SSP0_CLK_AUTOBLOCK_SHIFT
)

	)

784 
	#CGU_BASE_SSP0_CLK_CLK_SEL_SHIFT
 (24)

	)

785 
	#CGU_BASE_SSP0_CLK_CLK_SEL_MASK
 \

786 (0x1‡<< 
CGU_BASE_SSP0_CLK_CLK_SEL_SHIFT
)

	)

787 
	#CGU_BASE_SSP0_CLK_CLK_SEL
(
x
Ë((xË<< 
CGU_BASE_SSP0_CLK_CLK_SEL_SHIFT
)

	)

792 
	#CGU_BASE_SSP1_CLK_PD_SHIFT
 (0)

	)

793 
	#CGU_BASE_SSP1_CLK_PD
 (1 << 
CGU_BASE_SSP1_CLK_PD_SHIFT
)

	)

796 
	#CGU_BASE_SSP1_CLK_AUTOBLOCK_SHIFT
 (11)

	)

797 
	#CGU_BASE_SSP1_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_SSP1_CLK_AUTOBLOCK_SHIFT
)

	)

800 
	#CGU_BASE_SSP1_CLK_CLK_SEL_SHIFT
 (24)

	)

801 
	#CGU_BASE_SSP1_CLK_CLK_SEL_MASK
 \

802 (0x1‡<< 
CGU_BASE_SSP1_CLK_CLK_SEL_SHIFT
)

	)

803 
	#CGU_BASE_SSP1_CLK_CLK_SEL
(
x
) \

804 ((
x
Ë<< 
CGU_BASE_SSP1_CLK_CLK_SEL_SHIFT
)

	)

809 
	#CGU_BASE_UART0_CLK_PD_SHIFT
 (0)

	)

810 
	#CGU_BASE_UART0_CLK_PD
 (1 << 
CGU_BASE_UART0_CLK_PD_SHIFT
)

	)

813 
	#CGU_BASE_UART0_CLK_AUTOBLOCK_SHIFT
 (11)

	)

814 
	#CGU_BASE_UART0_CLK_AUTOBLOCK
 \

815 (1 << 
CGU_BASE_UART0_CLK_AUTOBLOCK_SHIFT
)

	)

818 
	#CGU_BASE_UART0_CLK_CLK_SEL_SHIFT
 (24)

	)

819 
	#CGU_BASE_UART0_CLK_CLK_SEL_MASK
 \

820 (0x1‡<< 
CGU_BASE_UART0_CLK_CLK_SEL_SHIFT
)

	)

821 
	#CGU_BASE_UART0_CLK_CLK_SEL
(
x
) \

822 ((
x
Ë<< 
CGU_BASE_UART0_CLK_CLK_SEL_SHIFT
)

	)

827 
	#CGU_BASE_UART1_CLK_PD_SHIFT
 (0)

	)

828 
	#CGU_BASE_UART1_CLK_PD
 (1 << 
CGU_BASE_UART1_CLK_PD_SHIFT
)

	)

831 
	#CGU_BASE_UART1_CLK_AUTOBLOCK_SHIFT
 (11)

	)

832 
	#CGU_BASE_UART1_CLK_AUTOBLOCK
 \

833 (1 << 
CGU_BASE_UART1_CLK_AUTOBLOCK_SHIFT
)

	)

836 
	#CGU_BASE_UART1_CLK_CLK_SEL_SHIFT
 (24)

	)

837 
	#CGU_BASE_UART1_CLK_CLK_SEL_MASK
 \

838 (0x1‡<< 
CGU_BASE_UART1_CLK_CLK_SEL_SHIFT
)

	)

839 
	#CGU_BASE_UART1_CLK_CLK_SEL
(
x
) \

840 ((
x
Ë<< 
CGU_BASE_UART1_CLK_CLK_SEL_SHIFT
)

	)

845 
	#CGU_BASE_UART2_CLK_PD_SHIFT
 (0)

	)

846 
	#CGU_BASE_UART2_CLK_PD
 (1 << 
CGU_BASE_UART2_CLK_PD_SHIFT
)

	)

849 
	#CGU_BASE_UART2_CLK_AUTOBLOCK_SHIFT
 (11)

	)

850 
	#CGU_BASE_UART2_CLK_AUTOBLOCK
 \

851 (1 << 
CGU_BASE_UART2_CLK_AUTOBLOCK_SHIFT
)

	)

854 
	#CGU_BASE_UART2_CLK_CLK_SEL_SHIFT
 (24)

	)

855 
	#CGU_BASE_UART2_CLK_CLK_SEL_MASK
 \

856 (0x1‡<< 
CGU_BASE_UART2_CLK_CLK_SEL_SHIFT
)

	)

857 
	#CGU_BASE_UART2_CLK_CLK_SEL
(
x
) \

858 ((
x
Ë<< 
CGU_BASE_UART2_CLK_CLK_SEL_SHIFT
)

	)

863 
	#CGU_BASE_UART3_CLK_PD_SHIFT
 (0)

	)

864 
	#CGU_BASE_UART3_CLK_PD
 (1 << 
CGU_BASE_UART3_CLK_PD_SHIFT
)

	)

867 
	#CGU_BASE_UART3_CLK_AUTOBLOCK_SHIFT
 (11)

	)

868 
	#CGU_BASE_UART3_CLK_AUTOBLOCK
 \

869 (1 << 
CGU_BASE_UART3_CLK_AUTOBLOCK_SHIFT
)

	)

872 
	#CGU_BASE_UART3_CLK_CLK_SEL_SHIFT
 (24)

	)

873 
	#CGU_BASE_UART3_CLK_CLK_SEL_MASK
 \

874 (0x1‡<< 
CGU_BASE_UART3_CLK_CLK_SEL_SHIFT
)

	)

875 
	#CGU_BASE_UART3_CLK_CLK_SEL
(
x
) \

876 ((
x
Ë<< 
CGU_BASE_UART3_CLK_CLK_SEL_SHIFT
)

	)

881 
	#CGU_BASE_OUT_CLK_PD_SHIFT
 (0)

	)

882 
	#CGU_BASE_OUT_CLK_PD
 (1 << 
CGU_BASE_OUT_CLK_PD_SHIFT
)

	)

885 
	#CGU_BASE_OUT_CLK_AUTOBLOCK_SHIFT
 (11)

	)

886 
	#CGU_BASE_OUT_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_OUT_CLK_AUTOBLOCK_SHIFT
)

	)

889 
	#CGU_BASE_OUT_CLK_CLK_SEL_SHIFT
 (24)

	)

890 
	#CGU_BASE_OUT_CLK_CLK_SEL_MASK
 (0x1‡<< 
CGU_BASE_OUT_CLK_CLK_SEL_SHIFT
)

	)

891 
	#CGU_BASE_OUT_CLK_CLK_SEL
(
x
Ë((xË<< 
CGU_BASE_OUT_CLK_CLK_SEL_SHIFT
)

	)

896 
	#CGU_BASE_APLL_CLK_PD_SHIFT
 (0)

	)

897 
	#CGU_BASE_APLL_CLK_PD
 (1 << 
CGU_BASE_APLL_CLK_PD_SHIFT
)

	)

900 
	#CGU_BASE_APLL_CLK_AUTOBLOCK_SHIFT
 (11)

	)

901 
	#CGU_BASE_APLL_CLK_AUTOBLOCK
 (1 << 
CGU_BASE_APLL_CLK_AUTOBLOCK_SHIFT
)

	)

904 
	#CGU_BASE_APLL_CLK_CLK_SEL_SHIFT
 (24)

	)

905 
	#CGU_BASE_APLL_CLK_CLK_SEL_MASK
 \

906 (0x1‡<< 
CGU_BASE_APLL_CLK_CLK_SEL_SHIFT
)

	)

907 
	#CGU_BASE_APLL_CLK_CLK_SEL
(
x
Ë((xË<< 
CGU_BASE_APLL_CLK_CLK_SEL_SHIFT
)

	)

912 
	#CGU_BASE_CGU_OUT0_CLK_PD_SHIFT
 (0)

	)

913 
	#CGU_BASE_CGU_OUT0_CLK_PD
 (1 << 
CGU_BASE_CGU_OUT0_CLK_PD_SHIFT
)

	)

916 
	#CGU_BASE_CGU_OUT0_CLK_AUTOBLOCK_SHIFT
 (11)

	)

917 
	#CGU_BASE_CGU_OUT0_CLK_AUTOBLOCK
 \

918 (1 << 
CGU_BASE_CGU_OUT0_CLK_AUTOBLOCK_SHIFT
)

	)

921 
	#CGU_BASE_CGU_OUT0_CLK_CLK_SEL_SHIFT
 (24)

	)

922 
	#CGU_BASE_CGU_OUT0_CLK_CLK_SEL_MASK
 \

923 (0x1‡<< 
CGU_BASE_CGU_OUT0_CLK_CLK_SEL_SHIFT
)

	)

924 
	#CGU_BASE_CGU_OUT0_CLK_CLK_SEL
(
x
) \

925 ((
x
Ë<< 
CGU_BASE_CGU_OUT0_CLK_CLK_SEL_SHIFT
)

	)

930 
	#CGU_BASE_CGU_OUT1_CLK_PD_SHIFT
 (0)

	)

931 
	#CGU_BASE_CGU_OUT1_CLK_PD
 (1 << 
CGU_BASE_CGU_OUT1_CLK_PD_SHIFT
)

	)

934 
	#CGU_BASE_CGU_OUT1_CLK_AUTOBLOCK_SHIFT
 (11)

	)

935 
	#CGU_BASE_CGU_OUT1_CLK_AUTOBLOCK
 \

936 (1 << 
CGU_BASE_CGU_OUT1_CLK_AUTOBLOCK_SHIFT
)

	)

939 
	#CGU_BASE_CGU_OUT1_CLK_CLK_SEL_SHIFT
 (24)

	)

940 
	#CGU_BASE_CGU_OUT1_CLK_CLK_SEL_MASK
 \

941 (0x1‡<< 
CGU_BASE_CGU_OUT1_CLK_CLK_SEL_SHIFT
)

	)

942 
	#CGU_BASE_CGU_OUT1_CLK_CLK_SEL
(
x
) \

943 ((
x
Ë<< 
CGU_BASE_CGU_OUT1_CLK_CLK_SEL_SHIFT
)

	)

947 
	#CGU_SRC_32K
 0x00

	)

948 
	#CGU_SRC_IRC
 0x01

	)

949 
	#CGU_SRC_ENET_RX
 0x02

	)

950 
	#CGU_SRC_ENET_TX
 0x03

	)

951 
	#CGU_SRC_GP_CLKIN
 0x04

	)

952 
	#CGU_SRC_XTAL
 0x06

	)

953 
	#CGU_SRC_PLL0USB
 0x07

	)

954 
	#CGU_SRC_PLL0AUDIO
 0x08

	)

955 
	#CGU_SRC_PLL1
 0x09

	)

956 
	#CGU_SRC_IDIVA
 0x0C

	)

957 
	#CGU_SRC_IDIVB
 0x0D

	)

958 
	#CGU_SRC_IDIVC
 0x0E

	)

959 
	#CGU_SRC_IDIVD
 0x0F

	)

960 
	#CGU_SRC_IDIVE
 0x10

	)

	@libopencm3/include/libopencm3/lpc43xx/creg.h

35 #i‚de‡
LPC43XX_CREG_H


36 
	#LPC43XX_CREG_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

49 
	#CREG_CREG0
 
	`MMIO32
(
CREG_BASE
 + 0x004)

	)

52 
	#CREG_M4MEMMAP
 
	`MMIO32
(
CREG_BASE
 + 0x100)

	)

55 
	#CREG_CREG1
 
	`MMIO32
(
CREG_BASE
 + 0x108)

	)

58 
	#CREG_CREG2
 
	`MMIO32
(
CREG_BASE
 + 0x10C)

	)

61 
	#CREG_CREG3
 
	`MMIO32
(
CREG_BASE
 + 0x110)

	)

64 
	#CREG_CREG4
 
	`MMIO32
(
CREG_BASE
 + 0x114)

	)

67 
	#CREG_CREG5
 
	`MMIO32
(
CREG_BASE
 + 0x118)

	)

70 
	#CREG_DMAMUX
 
	`MMIO32
(
CREG_BASE
 + 0x11C)

	)

73 
	#CREG_FLASHCFGA
 
	`MMIO32
(
CREG_BASE
 + 0x120)

	)

76 
	#CREG_FLASHCFGB
 
	`MMIO32
(
CREG_BASE
 + 0x124)

	)

79 
	#CREG_ETBCFG
 
	`MMIO32
(
CREG_BASE
 + 0x128)

	)

85 
	#CREG_CREG6
 
	`MMIO32
(
CREG_BASE
 + 0x12C)

	)

88 
	#CREG_M4TXEVENT
 
	`MMIO32
(
CREG_BASE
 + 0x130)

	)

91 
	#CREG_CHIPID
 
	`MMIO32
(
CREG_BASE
 + 0x200)

	)

94 
	#CREG_M0TXEVENT
 
	`MMIO32
(
CREG_BASE
 + 0x400)

	)

97 
	#CREG_M0APPMEMMAP
 
	`MMIO32
(
CREG_BASE
 + 0x404)

	)

100 
	#CREG_USB0FLADJ
 
	`MMIO32
(
CREG_BASE
 + 0x500)

	)

103 
	#CREG_USB1FLADJ
 
	`MMIO32
(
CREG_BASE
 + 0x600)

	)

108 
	#CREG_CREG0_EN1KHZ_SHIFT
 (0)

	)

109 
	#CREG_CREG0_EN1KHZ
 (1 << 
CREG_CREG0_EN1KHZ_SHIFT
)

	)

112 
	#CREG_CREG0_EN32KHZ_SHIFT
 (1)

	)

113 
	#CREG_CREG0_EN32KHZ
 (1 << 
CREG_CREG0_EN32KHZ_SHIFT
)

	)

116 
	#CREG_CREG0_RESET32KHZ_SHIFT
 (2)

	)

117 
	#CREG_CREG0_RESET32KHZ
 (1 << 
CREG_CREG0_RESET32KHZ_SHIFT
)

	)

120 
	#CREG_CREG0_PD32KHZ_SHIFT
 (3)

	)

121 
	#CREG_CREG0_PD32KHZ
 (1 << 
CREG_CREG0_PD32KHZ_SHIFT
)

	)

124 
	#CREG_CREG0_USB0PHY_SHIFT
 (5)

	)

125 
	#CREG_CREG0_USB0PHY
 (1 << 
CREG_CREG0_USB0PHY_SHIFT
)

	)

128 
	#CREG_CREG0_ALARMCTRL_SHIFT
 (6)

	)

129 
	#CREG_CREG0_ALARMCTRL_MASK
 (0x3 << 
CREG_CREG0_ALARMCTRL_SHIFT
)

	)

130 
	#CREG_CREG0_ALARMCTRL
(
x
Ë((xË<< 
CREG_CREG0_ALARMCTRL_SHIFT
)

	)

133 
	#CREG_CREG0_BODLVL1_SHIFT
 (8)

	)

134 
	#CREG_CREG0_BODLVL1_MASK
 (0x3 << 
CREG_CREG0_BODLVL1_SHIFT
)

	)

135 
	#CREG_CREG0_BODLVL1
(
x
Ë((xË<< 
CREG_CREG0_BODLVL1_SHIFT
)

	)

138 
	#CREG_CREG0_BODLVL2_SHIFT
 (10)

	)

139 
	#CREG_CREG0_BODLVL2_MASK
 (0x3 << 
CREG_CREG0_BODLVL2_SHIFT
)

	)

140 
	#CREG_CREG0_BODLVL2
(
x
Ë((xË<< 
CREG_CREG0_BODLVL2_SHIFT
)

	)

143 
	#CREG_CREG0_SAMPLECTRL_SHIFT
 (12)

	)

144 
	#CREG_CREG0_SAMPLECTRL_MASK
 (0x3 << 
CREG_CREG0_SAMPLECTRL_SHIFT
)

	)

145 
	#CREG_CREG0_SAMPLECTRL
(
x
Ë((xË<< 
CREG_CREG0_SAMPLECTRL_SHIFT
)

	)

148 
	#CREG_CREG0_WAKEUP0CTRL_SHIFT
 (14)

	)

149 
	#CREG_CREG0_WAKEUP0CTRL_MASK
 (0x3 << 
CREG_CREG0_WAKEUP0CTRL_SHIFT
)

	)

150 
	#CREG_CREG0_WAKEUP0CTRL
(
x
Ë((xË<< 
CREG_CREG0_WAKEUP0CTRL_SHIFT
)

	)

153 
	#CREG_CREG0_WAKEUP1CTRL_SHIFT
 (16)

	)

154 
	#CREG_CREG0_WAKEUP1CTRL_MASK
 (0x3 << 
CREG_CREG0_WAKEUP1CTRL_SHIFT
)

	)

155 
	#CREG_CREG0_WAKEUP1CTRL
(
x
Ë((xË<< 
CREG_CREG0_WAKEUP1CTRL_SHIFT
)

	)

160 
	#CREG_M4MEMMAP_M4MAP_SHIFT
 (12)

	)

161 
	#CREG_M4MEMMAP_M4MAP_MASK
 (0xffff‡<< 
CREG_M4MEMMAP_M4MAP_SHIFT
)

	)

162 
	#CREG_M4MEMMAP_M4MAP
(
x
Ë((xË<< 
CREG_M4MEMMAP_M4MAP_SHIFT
)

	)

167 
	#CREG_CREG5_M4TAPSEL_SHIFT
 (6)

	)

168 
	#CREG_CREG5_M4TAPSEL
 (1 << 
CREG_CREG5_M4TAPSEL_SHIFT
)

	)

171 
	#CREG_CREG5_M0APPTAPSEL_SHIFT
 (9)

	)

172 
	#CREG_CREG5_M0APPTAPSEL
 (1 << 
CREG_CREG5_M0APPTAPSEL_SHIFT
)

	)

177 
	#CREG_DMAMUX_DMAMUXPER0_SHIFT
 (0)

	)

178 
	#CREG_DMAMUX_DMAMUXPER0_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER0_SHIFT
)

	)

179 
	#CREG_DMAMUX_DMAMUXPER0
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER0_SHIFT
)

	)

182 
	#CREG_DMAMUX_DMAMUXPER1_SHIFT
 (2)

	)

183 
	#CREG_DMAMUX_DMAMUXPER1_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER1_SHIFT
)

	)

184 
	#CREG_DMAMUX_DMAMUXPER1
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER1_SHIFT
)

	)

187 
	#CREG_DMAMUX_DMAMUXPER2_SHIFT
 (4)

	)

188 
	#CREG_DMAMUX_DMAMUXPER2_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER2_SHIFT
)

	)

189 
	#CREG_DMAMUX_DMAMUXPER2
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER2_SHIFT
)

	)

192 
	#CREG_DMAMUX_DMAMUXPER3_SHIFT
 (6)

	)

193 
	#CREG_DMAMUX_DMAMUXPER3_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER3_SHIFT
)

	)

194 
	#CREG_DMAMUX_DMAMUXPER3
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER3_SHIFT
)

	)

197 
	#CREG_DMAMUX_DMAMUXPER4_SHIFT
 (8)

	)

198 
	#CREG_DMAMUX_DMAMUXPER4_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER4_SHIFT
)

	)

199 
	#CREG_DMAMUX_DMAMUXPER4
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER4_SHIFT
)

	)

202 
	#CREG_DMAMUX_DMAMUXPER5_SHIFT
 (10)

	)

203 
	#CREG_DMAMUX_DMAMUXPER5_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER5_SHIFT
)

	)

204 
	#CREG_DMAMUX_DMAMUXPER5
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER5_SHIFT
)

	)

207 
	#CREG_DMAMUX_DMAMUXPER6_SHIFT
 (12)

	)

208 
	#CREG_DMAMUX_DMAMUXPER6_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER6_SHIFT
)

	)

209 
	#CREG_DMAMUX_DMAMUXPER6
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER6_SHIFT
)

	)

212 
	#CREG_DMAMUX_DMAMUXPER7_SHIFT
 (14)

	)

213 
	#CREG_DMAMUX_DMAMUXPER7_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER7_SHIFT
)

	)

214 
	#CREG_DMAMUX_DMAMUXPER7
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER7_SHIFT
)

	)

217 
	#CREG_DMAMUX_DMAMUXPER8_SHIFT
 (16)

	)

218 
	#CREG_DMAMUX_DMAMUXPER8_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER8_SHIFT
)

	)

219 
	#CREG_DMAMUX_DMAMUXPER8
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER8_SHIFT
)

	)

222 
	#CREG_DMAMUX_DMAMUXPER9_SHIFT
 (18)

	)

223 
	#CREG_DMAMUX_DMAMUXPER9_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER9_SHIFT
)

	)

224 
	#CREG_DMAMUX_DMAMUXPER9
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER9_SHIFT
)

	)

227 
	#CREG_DMAMUX_DMAMUXPER10_SHIFT
 (20)

	)

228 
	#CREG_DMAMUX_DMAMUXPER10_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER10_SHIFT
)

	)

229 
	#CREG_DMAMUX_DMAMUXPER10
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER10_SHIFT
)

	)

232 
	#CREG_DMAMUX_DMAMUXPER11_SHIFT
 (22)

	)

233 
	#CREG_DMAMUX_DMAMUXPER11_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER11_SHIFT
)

	)

234 
	#CREG_DMAMUX_DMAMUXPER11
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER11_SHIFT
)

	)

237 
	#CREG_DMAMUX_DMAMUXPER12_SHIFT
 (24)

	)

238 
	#CREG_DMAMUX_DMAMUXPER12_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER12_SHIFT
)

	)

239 
	#CREG_DMAMUX_DMAMUXPER12
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER12_SHIFT
)

	)

242 
	#CREG_DMAMUX_DMAMUXPER13_SHIFT
 (26)

	)

243 
	#CREG_DMAMUX_DMAMUXPER13_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER13_SHIFT
)

	)

244 
	#CREG_DMAMUX_DMAMUXPER13
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER13_SHIFT
)

	)

247 
	#CREG_DMAMUX_DMAMUXPER14_SHIFT
 (28)

	)

248 
	#CREG_DMAMUX_DMAMUXPER14_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER14_SHIFT
)

	)

249 
	#CREG_DMAMUX_DMAMUXPER14
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER14_SHIFT
)

	)

252 
	#CREG_DMAMUX_DMAMUXPER15_SHIFT
 (30)

	)

253 
	#CREG_DMAMUX_DMAMUXPER15_MASK
 (0x3 << 
CREG_DMAMUX_DMAMUXPER15_SHIFT
)

	)

254 
	#CREG_DMAMUX_DMAMUXPER15
(
x
Ë((xË<< 
CREG_DMAMUX_DMAMUXPER15_SHIFT
)

	)

260 
	#CREG_FLASHCFGA_FLASHTIM_SHIFT
 (12)

	)

261 
	#CREG_FLASHCFGA_FLASHTIM_MASK
 (0x‡<< 
CREG_FLASHCFGA_FLASHTIM_SHIFT
)

	)

262 
	#CREG_FLASHCFGA_FLASHTIM
(
x
Ë((xË<< 
CREG_FLASHCFGA_FLASHTIM_SHIFT
)

	)

265 
	#CREG_FLASHCFGA_POW_SHIFT
 (31)

	)

266 
	#CREG_FLASHCFGA_POW
 (1 << 
CREG_FLASHCFGA_POW_SHIFT
)

	)

272 
	#CREG_FLASHCFGB_FLASHTIM_SHIFT
 (12)

	)

273 
	#CREG_FLASHCFGB_FLASHTIM_MASK
 (0x‡<< 
CREG_FLASHCFGB_FLASHTIM_SHIFT
)

	)

274 
	#CREG_FLASHCFGB_FLASHTIM
(
x
Ë((xË<< 
CREG_FLASHCFGB_FLASHTIM_SHIFT
)

	)

277 
	#CREG_FLASHCFGB_POW_SHIFT
 (31)

	)

278 
	#CREG_FLASHCFGB_POW
 (1 << 
CREG_FLASHCFGB_POW_SHIFT
)

	)

283 
	#CREG_ETBCFG_ETB_SHIFT
 (0)

	)

284 
	#CREG_ETBCFG_ETB
 (1 << 
CREG_ETBCFG_ETB_SHIFT
)

	)

290 
	#CREG_CREG6_ETHMODE_SHIFT
 (0)

	)

291 
	#CREG_CREG6_ETHMODE_MASK
 (0x7 << 
CREG_CREG6_ETHMODE_SHIFT
)

	)

292 
	#CREG_CREG6_ETHMODE
(
x
Ë((xË<< 
CREG_CREG6_ETHMODE_SHIFT
)

	)

295 
	#CREG_CREG6_CTOUTCTRL_SHIFT
 (4)

	)

296 
	#CREG_CREG6_CTOUTCTRL
 (1 << 
CREG_CREG6_CTOUTCTRL_SHIFT
)

	)

299 
	#CREG_CREG6_I2S0_TX_SCK_IN_SEL_SHIFT
 (12)

	)

300 
	#CREG_CREG6_I2S0_TX_SCK_IN_SEL
 (1 << 
CREG_CREG6_I2S0_TX_SCK_IN_SEL_SHIFT
)

	)

303 
	#CREG_CREG6_I2S0_RX_SCK_IN_SEL_SHIFT
 (13)

	)

304 
	#CREG_CREG6_I2S0_RX_SCK_IN_SEL
 (1 << 
CREG_CREG6_I2S0_RX_SCK_IN_SEL_SHIFT
)

	)

307 
	#CREG_CREG6_I2S1_TX_SCK_IN_SEL_SHIFT
 (14)

	)

308 
	#CREG_CREG6_I2S1_TX_SCK_IN_SEL
 (1 << 
CREG_CREG6_I2S1_TX_SCK_IN_SEL_SHIFT
)

	)

311 
	#CREG_CREG6_I2S1_RX_SCK_IN_SEL_SHIFT
 (15)

	)

312 
	#CREG_CREG6_I2S1_RX_SCK_IN_SEL
 (1 << 
CREG_CREG6_I2S1_RX_SCK_IN_SEL_SHIFT
)

	)

315 
	#CREG_CREG6_EMC_CLK_SEL_SHIFT
 (16)

	)

316 
	#CREG_CREG6_EMC_CLK_SEL
 (1 << 
CREG_CREG6_EMC_CLK_SEL_SHIFT
)

	)

321 
	#CREG_M4TXEVENT_TXEVCLR_SHIFT
 (0)

	)

322 
	#CREG_M4TXEVENT_TXEVCLR
 (1 << 
CREG_M4TXEVENT_TXEVCLR_SHIFT
)

	)

327 
	#CREG_M0TXEVENT_TXEVCLR_SHIFT
 (0)

	)

328 
	#CREG_M0TXEVENT_TXEVCLR
 (1 << 
CREG_M0TXEVENT_TXEVCLR_SHIFT
)

	)

333 
	#CREG_M0APPMEMMAP_M0APPMAP_SHIFT
 (12)

	)

334 
	#CREG_M0APPMEMMAP_M0APPMAP_MASK
 \

335 (0xffff‡<< 
CREG_M0APPMEMMAP_M0APPMAP_SHIFT
)

	)

336 
	#CREG_M0APPMEMMAP_M0APPMAP
(
x
Ë((xË<< 
CREG_M0APPMEMMAP_M0APPMAP_SHIFT
)

	)

341 
	#CREG_USB0FLADJ_FLTV_SHIFT
 (0)

	)

342 
	#CREG_USB0FLADJ_FLTV_MASK
 (0x3‡<< 
CREG_USB0FLADJ_FLTV_SHIFT
)

	)

343 
	#CREG_USB0FLADJ_FLTV
(
x
Ë((xË<< 
CREG_USB0FLADJ_FLTV_SHIFT
)

	)

348 
	#CREG_USB1FLADJ_FLTV_SHIFT
 (0)

	)

349 
	#CREG_USB1FLADJ_FLTV_MASK
 (0x3‡<< 
CREG_USB1FLADJ_FLTV_SHIFT
)

	)

350 
	#CREG_USB1FLADJ_FLTV
(
x
Ë((xË<< 
CREG_USB1FLADJ_FLTV_SHIFT
)

	)

	@libopencm3/include/libopencm3/lpc43xx/doc-lpc43xx.h

	@libopencm3/include/libopencm3/lpc43xx/eventrouter.h

34 #i‚de‡
LPC43XX_EVENTROUTER_H


35 
	#LPC43XX_EVENTROUTER_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

45 
	#EVENTROUTER_HILO
 
	`MMIO32
(
EVENTROUTER_BASE
 + 0x000)

	)

48 
	#EVENTROUTER_EDGE
 
	`MMIO32
(
EVENTROUTER_BASE
 + 0x004)

	)

51 
	#EVENTROUTER_CLR_EN
 
	`MMIO32
(
EVENTROUTER_BASE
 + 0xFD8)

	)

54 
	#EVENTROUTER_SET_EN
 
	`MMIO32
(
EVENTROUTER_BASE
 + 0xFDC)

	)

57 
	#EVENTROUTER_STATUS
 
	`MMIO32
(
EVENTROUTER_BASE
 + 0xFE0)

	)

60 
	#EVENTROUTER_ENABLE
 
	`MMIO32
(
EVENTROUTER_BASE
 + 0xFE4)

	)

63 
	#EVENTROUTER_CLR_STAT
 
	`MMIO32
(
EVENTROUTER_BASE
 + 0xFE8)

	)

66 
	#EVENTROUTER_SET_STAT
 
	`MMIO32
(
EVENTROUTER_BASE
 + 0xFEC)

	)

	@libopencm3/include/libopencm3/lpc43xx/gima.h

35 #i‚de‡
LPC43XX_GIMA_H


36 
	#LPC43XX_GIMA_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

46 
	#GIMA_CAP0_0_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x000)

	)

49 
	#GIMA_CAP0_1_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x004)

	)

52 
	#GIMA_CAP0_2_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x008)

	)

55 
	#GIMA_CAP0_3_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x00C)

	)

58 
	#GIMA_CAP1_0_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x010)

	)

61 
	#GIMA_CAP1_1_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x014)

	)

64 
	#GIMA_CAP1_2_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x018)

	)

67 
	#GIMA_CAP1_3_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x01C)

	)

70 
	#GIMA_CAP2_0_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x020)

	)

73 
	#GIMA_CAP2_1_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x024)

	)

76 
	#GIMA_CAP2_2_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x028)

	)

79 
	#GIMA_CAP2_3_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x02C)

	)

82 
	#GIMA_CAP3_0_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x030)

	)

85 
	#GIMA_CAP3_1_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x034)

	)

88 
	#GIMA_CAP3_2_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x038)

	)

91 
	#GIMA_CAP3_3_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x03C)

	)

94 
	#GIMA_CTIN_0_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x040)

	)

97 
	#GIMA_CTIN_1_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x044)

	)

100 
	#GIMA_CTIN_2_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x048)

	)

103 
	#GIMA_CTIN_3_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x04C)

	)

106 
	#GIMA_CTIN_4_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x050)

	)

109 
	#GIMA_CTIN_5_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x054)

	)

112 
	#GIMA_CTIN_6_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x058)

	)

115 
	#GIMA_CTIN_7_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x05C)

	)

118 
	#GIMA_VADC_TRIGGER_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x060)

	)

121 
	#GIMA_EVENTROUTER_13_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x064)

	)

124 
	#GIMA_EVENTROUTER_14_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x068)

	)

127 
	#GIMA_EVENTROUTER_16_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x06C)

	)

130 
	#GIMA_ADCSTART0_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x070)

	)

133 
	#GIMA_ADCSTART1_IN
 
	`MMIO32
(
GIMA_BASE
 + 0x074)

	)

	@libopencm3/include/libopencm3/lpc43xx/gpdma.h

34 #i‚de‡
LPC43XX_GPDMA_H


35 
	#LPC43XX_GPDMA_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

47 
	#GPDMA_INTSTAT
 
	`MMIO32
(
GPDMA_BASE
 + 0x000)

	)

50 
	#GPDMA_INTTCSTAT
 
	`MMIO32
(
GPDMA_BASE
 + 0x004)

	)

53 
	#GPDMA_INTTCCLEAR
 
	`MMIO32
(
GPDMA_BASE
 + 0x008)

	)

56 
	#GPDMA_INTERRSTAT
 
	`MMIO32
(
GPDMA_BASE
 + 0x00C)

	)

59 
	#GPDMA_INTERRCLR
 
	`MMIO32
(
GPDMA_BASE
 + 0x010)

	)

62 
	#GPDMA_RAWINTTCSTAT
 
	`MMIO32
(
GPDMA_BASE
 + 0x014)

	)

65 
	#GPDMA_RAWINTERRSTAT
 
	`MMIO32
(
GPDMA_BASE
 + 0x018)

	)

68 
	#GPDMA_ENBLDCHNS
 
	`MMIO32
(
GPDMA_BASE
 + 0x01C)

	)

71 
	#GPDMA_SOFTBREQ
 
	`MMIO32
(
GPDMA_BASE
 + 0x020)

	)

74 
	#GPDMA_SOFTSREQ
 
	`MMIO32
(
GPDMA_BASE
 + 0x024)

	)

77 
	#GPDMA_SOFTLBREQ
 
	`MMIO32
(
GPDMA_BASE
 + 0x028)

	)

80 
	#GPDMA_SOFTLSREQ
 
	`MMIO32
(
GPDMA_BASE
 + 0x02C)

	)

83 
	#GPDMA_CONFIG
 
	`MMIO32
(
GPDMA_BASE
 + 0x030)

	)

86 
	#GPDMA_SYNC
 
	`MMIO32
(
GPDMA_BASE
 + 0x034)

	)

92 
	#GPDMA_CSRCADDR
(
ch™√l
Ë
	`MMIO32
(
GPDMA_BASE
 + 0x100 + \

93 (
ch™√l
 * 0x20))

	)

94 
	#GPDMA_C0SRCADDR
 
	`GPDMA_CSRCADDR
(0)

	)

95 
	#GPDMA_C1SRCADDR
 
	`GPDMA_CSRCADDR
(1)

	)

96 
	#GPDMA_C2SRCADDR
 
	`GPDMA_CSRCADDR
(2)

	)

97 
	#GPDMA_C3SRCADDR
 
	`GPDMA_CSRCADDR
(3)

	)

98 
	#GPDMA_C4SRCADDR
 
	`GPDMA_CSRCADDR
(4)

	)

99 
	#GPDMA_C5SRCADDR
 
	`GPDMA_CSRCADDR
(5)

	)

100 
	#GPDMA_C6SRCADDR
 
	`GPDMA_CSRCADDR
(6)

	)

101 
	#GPDMA_C7SRCADDR
 
	`GPDMA_CSRCADDR
(7)

	)

104 
	#GPDMA_CDESTADDR
(
ch™√l
Ë
	`MMIO32
(
GPDMA_BASE
 + 0x104 + \

105 (
ch™√l
 * 0x20))

	)

106 
	#GPDMA_C0DESTADDR
 
	`GPDMA_CDESTADDR
(0)

	)

107 
	#GPDMA_C1DESTADDR
 
	`GPDMA_CDESTADDR
(1)

	)

108 
	#GPDMA_C2DESTADDR
 
	`GPDMA_CDESTADDR
(2)

	)

109 
	#GPDMA_C3DESTADDR
 
	`GPDMA_CDESTADDR
(3)

	)

110 
	#GPDMA_C4DESTADDR
 
	`GPDMA_CDESTADDR
(4)

	)

111 
	#GPDMA_C5DESTADDR
 
	`GPDMA_CDESTADDR
(5)

	)

112 
	#GPDMA_C6DESTADDR
 
	`GPDMA_CDESTADDR
(6)

	)

113 
	#GPDMA_C7DESTADDR
 
	`GPDMA_CDESTADDR
(7)

	)

116 
	#GPDMA_CLLI
(
ch™√l
Ë
	`MMIO32
(
GPDMA_BASE
 + 0x108 + \

117 (
ch™√l
 * 0x20))

	)

118 
	#GPDMA_C0LLI
 
	`GPDMA_CLLI
(0)

	)

119 
	#GPDMA_C1LLI
 
	`GPDMA_CLLI
(1)

	)

120 
	#GPDMA_C2LLI
 
	`GPDMA_CLLI
(2)

	)

121 
	#GPDMA_C3LLI
 
	`GPDMA_CLLI
(3)

	)

122 
	#GPDMA_C4LLI
 
	`GPDMA_CLLI
(4)

	)

123 
	#GPDMA_C5LLI
 
	`GPDMA_CLLI
(5)

	)

124 
	#GPDMA_C6LLI
 
	`GPDMA_CLLI
(6)

	)

125 
	#GPDMA_C7LLI
 
	`GPDMA_CLLI
(7)

	)

128 
	#GPDMA_CCONTROL
(
ch™√l
Ë
	`MMIO32
(
GPDMA_BASE
 + 0x10C + \

129 (
ch™√l
 * 0x20))

	)

130 
	#GPDMA_C0CONTROL
 
	`GPDMA_CCONTROL
(0)

	)

131 
	#GPDMA_C1CONTROL
 
	`GPDMA_CCONTROL
(1)

	)

132 
	#GPDMA_C2CONTROL
 
	`GPDMA_CCONTROL
(2)

	)

133 
	#GPDMA_C3CONTROL
 
	`GPDMA_CCONTROL
(3)

	)

134 
	#GPDMA_C4CONTROL
 
	`GPDMA_CCONTROL
(4)

	)

135 
	#GPDMA_C5CONTROL
 
	`GPDMA_CCONTROL
(5)

	)

136 
	#GPDMA_C6CONTROL
 
	`GPDMA_CCONTROL
(6)

	)

137 
	#GPDMA_C7CONTROL
 
	`GPDMA_CCONTROL
(7)

	)

140 
	#GPDMA_CCONFIG
(
ch™√l
Ë
	`MMIO32
(
GPDMA_BASE
 + 0x110 + \

141 (
ch™√l
 * 0x20))

	)

142 
	#GPDMA_C0CONFIG
 
	`GPDMA_CCONFIG
(0)

	)

143 
	#GPDMA_C1CONFIG
 
	`GPDMA_CCONFIG
(1)

	)

144 
	#GPDMA_C2CONFIG
 
	`GPDMA_CCONFIG
(2)

	)

145 
	#GPDMA_C3CONFIG
 
	`GPDMA_CCONFIG
(3)

	)

146 
	#GPDMA_C4CONFIG
 
	`GPDMA_CCONFIG
(4)

	)

147 
	#GPDMA_C5CONFIG
 
	`GPDMA_CCONFIG
(5)

	)

148 
	#GPDMA_C6CONFIG
 
	`GPDMA_CCONFIG
(6)

	)

149 
	#GPDMA_C7CONFIG
 
	`GPDMA_CCONFIG
(7)

	)

153 
	#GPDMA_CSRCADDR_SRCADDR_SHIFT
 (0)

	)

154 
	#GPDMA_CSRCADDR_SRCADDR_MASK
 (0xfffffff‡<< 
GPDMA_CSRCADDR_SRCADDR_SHIFT
)

	)

155 
	#GPDMA_CSRCADDR_SRCADDR
(
x
Ë((xË<< 
GPDMA_CSRCADDR_SRCADDR_SHIFT
)

	)

157 
	#GPDMA_CDESTADDR_DESTADDR_SHIFT
 (0)

	)

158 
	#GPDMA_CDESTADDR_DESTADDR_MASK
 \

159 (0xfffffff‡<< 
GPDMA_CDESTADDR_DESTADDR_SHIFT
)

	)

160 
	#GPDMA_CDESTADDR_DESTADDR
(
x
Ë((xË<< 
GPDMA_CDESTADDR_DESTADDR_SHIFT
)

	)

162 
	#GPDMA_CLLI_LM_SHIFT
 (0)

	)

163 
	#GPDMA_CLLI_LM_MASK
 (0x1 << 
GPDMA_CLLI_LM_SHIFT
)

	)

164 
	#GPDMA_CLLI_LM
(
x
Ë((xË<< 
GPDMA_CLLI_LM_SHIFT
)

	)

166 
	#GPDMA_CLLI_LLI_SHIFT
 (2)

	)

167 
	#GPDMA_CLLI_LLI_MASK
 (0x3ffffff‡<< 
GPDMA_CLLI_LLI_SHIFT
)

	)

168 
	#GPDMA_CLLI_LLI
(
x
Ë((xË<< 
GPDMA_CLLI_LLI_SHIFT
)

	)

170 
	#GPDMA_CCONTROL_TRANSFERSIZE_SHIFT
 (0)

	)

171 
	#GPDMA_CCONTROL_TRANSFERSIZE_MASK
 \

172 (0xff‡<< 
GPDMA_CCONTROL_TRANSFERSIZE_SHIFT
)

	)

173 
	#GPDMA_CCONTROL_TRANSFERSIZE
(
x
) \

174 ((
x
Ë<< 
GPDMA_CCONTROL_TRANSFERSIZE_SHIFT
)

	)

176 
	#GPDMA_CCONTROL_SBSIZE_SHIFT
 (12)

	)

177 
	#GPDMA_CCONTROL_SBSIZE_MASK
 (0x7 << 
GPDMA_CCONTROL_SBSIZE_SHIFT
)

	)

178 
	#GPDMA_CCONTROL_SBSIZE
(
x
Ë((xË<< 
GPDMA_CCONTROL_SBSIZE_SHIFT
)

	)

180 
	#GPDMA_CCONTROL_DBSIZE_SHIFT
 (15)

	)

181 
	#GPDMA_CCONTROL_DBSIZE_MASK
 (0x7 << 
GPDMA_CCONTROL_DBSIZE_SHIFT
)

	)

182 
	#GPDMA_CCONTROL_DBSIZE
(
x
Ë((xË<< 
GPDMA_CCONTROL_DBSIZE_SHIFT
)

	)

184 
	#GPDMA_CCONTROL_SWIDTH_SHIFT
 (18)

	)

185 
	#GPDMA_CCONTROL_SWIDTH_MASK
 (0x7 << 
GPDMA_CCONTROL_SWIDTH_SHIFT
)

	)

186 
	#GPDMA_CCONTROL_SWIDTH
(
x
Ë((xË<< 
GPDMA_CCONTROL_SWIDTH_SHIFT
)

	)

188 
	#GPDMA_CCONTROL_DWIDTH_SHIFT
 (21)

	)

189 
	#GPDMA_CCONTROL_DWIDTH_MASK
 (0x7 << 
GPDMA_CCONTROL_DWIDTH_SHIFT
)

	)

190 
	#GPDMA_CCONTROL_DWIDTH
(
x
Ë((xË<< 
GPDMA_CCONTROL_DWIDTH_SHIFT
)

	)

192 
	#GPDMA_CCONTROL_S_SHIFT
 (24)

	)

193 
	#GPDMA_CCONTROL_S_MASK
 (0x1 << 
GPDMA_CCONTROL_S_SHIFT
)

	)

194 
	#GPDMA_CCONTROL_S
(
x
Ë((xË<< 
GPDMA_CCONTROL_S_SHIFT
)

	)

196 
	#GPDMA_CCONTROL_D_SHIFT
 (25)

	)

197 
	#GPDMA_CCONTROL_D_MASK
 (0x1 << 
GPDMA_CCONTROL_D_SHIFT
)

	)

198 
	#GPDMA_CCONTROL_D
(
x
Ë((xË<< 
GPDMA_CCONTROL_D_SHIFT
)

	)

200 
	#GPDMA_CCONTROL_SI_SHIFT
 (26)

	)

201 
	#GPDMA_CCONTROL_SI_MASK
 (0x1 << 
GPDMA_CCONTROL_SI_SHIFT
)

	)

202 
	#GPDMA_CCONTROL_SI
(
x
Ë((xË<< 
GPDMA_CCONTROL_SI_SHIFT
)

	)

204 
	#GPDMA_CCONTROL_DI_SHIFT
 (27)

	)

205 
	#GPDMA_CCONTROL_DI_MASK
 (0x1 << 
GPDMA_CCONTROL_DI_SHIFT
)

	)

206 
	#GPDMA_CCONTROL_DI
(
x
Ë((xË<< 
GPDMA_CCONTROL_DI_SHIFT
)

	)

208 
	#GPDMA_CCONTROL_PROT1_SHIFT
 (28)

	)

209 
	#GPDMA_CCONTROL_PROT1_MASK
 (0x1 << 
GPDMA_CCONTROL_PROT1_SHIFT
)

	)

210 
	#GPDMA_CCONTROL_PROT1
(
x
Ë((xË<< 
GPDMA_CCONTROL_PROT1_SHIFT
)

	)

212 
	#GPDMA_CCONTROL_PROT2_SHIFT
 (29)

	)

213 
	#GPDMA_CCONTROL_PROT2_MASK
 (0x1 << 
GPDMA_CCONTROL_PROT2_SHIFT
)

	)

214 
	#GPDMA_CCONTROL_PROT2
(
x
Ë((xË<< 
GPDMA_CCONTROL_PROT2_SHIFT
)

	)

216 
	#GPDMA_CCONTROL_PROT3_SHIFT
 (30)

	)

217 
	#GPDMA_CCONTROL_PROT3_MASK
 (0x1 << 
GPDMA_CCONTROL_PROT3_SHIFT
)

	)

218 
	#GPDMA_CCONTROL_PROT3
(
x
Ë((xË<< 
GPDMA_CCONTROL_PROT3_SHIFT
)

	)

220 
	#GPDMA_CCONTROL_I_SHIFT
 (31)

	)

221 
	#GPDMA_CCONTROL_I_MASK
 (0x1 << 
GPDMA_CCONTROL_I_SHIFT
)

	)

222 
	#GPDMA_CCONTROL_I
(
x
Ë((xË<< 
GPDMA_CCONTROL_I_SHIFT
)

	)

224 
	#GPDMA_CCONFIG_E_SHIFT
 (0)

	)

225 
	#GPDMA_CCONFIG_E_MASK
 (0x1 << 
GPDMA_CCONFIG_E_SHIFT
)

	)

226 
	#GPDMA_CCONFIG_E
(
x
Ë((xË<< 
GPDMA_CCONFIG_E_SHIFT
)

	)

228 
	#GPDMA_CCONFIG_SRCPERIPHERAL_SHIFT
 (1)

	)

229 
	#GPDMA_CCONFIG_SRCPERIPHERAL_MASK
 \

230 (0x1‡<< 
GPDMA_CCONFIG_SRCPERIPHERAL_SHIFT
)

	)

231 
	#GPDMA_CCONFIG_SRCPERIPHERAL
(
x
) \

232 ((
x
Ë<< 
GPDMA_CCONFIG_SRCPERIPHERAL_SHIFT
)

	)

234 
	#GPDMA_CCONFIG_DESTPERIPHERAL_SHIFT
 (6)

	)

235 
	#GPDMA_CCONFIG_DESTPERIPHERAL_MASK
 \

236 (0x1‡<< 
GPDMA_CCONFIG_DESTPERIPHERAL_SHIFT
)

	)

237 
	#GPDMA_CCONFIG_DESTPERIPHERAL
(
x
) \

238 ((
x
Ë<< 
GPDMA_CCONFIG_DESTPERIPHERAL_SHIFT
)

	)

240 
	#GPDMA_CCONFIG_FLOWCNTRL_SHIFT
 (11)

	)

241 
	#GPDMA_CCONFIG_FLOWCNTRL_MASK
 (0x7 << 
GPDMA_CCONFIG_FLOWCNTRL_SHIFT
)

	)

242 
	#GPDMA_CCONFIG_FLOWCNTRL
(
x
Ë((xË<< 
GPDMA_CCONFIG_FLOWCNTRL_SHIFT
)

	)

244 
	#GPDMA_CCONFIG_IE_SHIFT
 (14)

	)

245 
	#GPDMA_CCONFIG_IE_MASK
 (0x1 << 
GPDMA_CCONFIG_IE_SHIFT
)

	)

246 
	#GPDMA_CCONFIG_IE
(
x
Ë((xË<< 
GPDMA_CCONFIG_IE_SHIFT
)

	)

248 
	#GPDMA_CCONFIG_ITC_SHIFT
 (15)

	)

249 
	#GPDMA_CCONFIG_ITC_MASK
 (0x1 << 
GPDMA_CCONFIG_ITC_SHIFT
)

	)

250 
	#GPDMA_CCONFIG_ITC
(
x
Ë((xË<< 
GPDMA_CCONFIG_ITC_SHIFT
)

	)

252 
	#GPDMA_CCONFIG_L_SHIFT
 (16)

	)

253 
	#GPDMA_CCONFIG_L_MASK
 (0x1 << 
GPDMA_CCONFIG_L_SHIFT
)

	)

254 
	#GPDMA_CCONFIG_L
(
x
Ë((xË<< 
GPDMA_CCONFIG_L_SHIFT
)

	)

256 
	#GPDMA_CCONFIG_A_SHIFT
 (17)

	)

257 
	#GPDMA_CCONFIG_A_MASK
 (0x1 << 
GPDMA_CCONFIG_A_SHIFT
)

	)

258 
	#GPDMA_CCONFIG_A
(
x
Ë((xË<< 
GPDMA_CCONFIG_A_SHIFT
)

	)

260 
	#GPDMA_CCONFIG_H_SHIFT
 (18)

	)

261 
	#GPDMA_CCONFIG_H_MASK
 (0x1 << 
GPDMA_CCONFIG_H_SHIFT
)

	)

262 
	#GPDMA_CCONFIG_H
(
x
Ë((xË<< 
GPDMA_CCONFIG_H_SHIFT
)

	)

269 
	#GPDMA_NTSTAT_INTSTAT_SHIFT
 (0)

	)

270 
	#GPDMA_NTSTAT_INTSTAT_MASK
 (0xf‡<< 
GPDMA_NTSTAT_INTSTAT_SHIFT
)

	)

271 
	#GPDMA_NTSTAT_INTSTAT
(
x
Ë((xË<< 
GPDMA_NTSTAT_INTSTAT_SHIFT
)

	)

276 
	#GPDMA_INTTCSTAT_INTTCSTAT_SHIFT
 (0)

	)

277 
	#GPDMA_INTTCSTAT_INTTCSTAT_MASK
 (0xf‡<< 
GPDMA_INTTCSTAT_INTTCSTAT_SHIFT
)

	)

278 
	#GPDMA_INTTCSTAT_INTTCSTAT
(
x
Ë((xË<< 
GPDMA_INTTCSTAT_INTTCSTAT_SHIFT
)

	)

284 
	#GPDMA_INTTCCLEAR_INTTCCLEAR_SHIFT
 (0)

	)

285 
	#GPDMA_INTTCCLEAR_INTTCCLEAR_MASK
 \

286 (0xf‡<< 
GPDMA_INTTCCLEAR_INTTCCLEAR_SHIFT
)

	)

287 
	#GPDMA_INTTCCLEAR_INTTCCLEAR
(
x
) \

288 ((
x
Ë<< 
GPDMA_INTTCCLEAR_INTTCCLEAR_SHIFT
)

	)

293 
	#GPDMA_INTERRSTAT_INTERRSTAT_SHIFT
 (0)

	)

294 
	#GPDMA_INTERRSTAT_INTERRSTAT_MASK
 \

295 (0xf‡<< 
GPDMA_INTERRSTAT_INTERRSTAT_SHIFT
)

	)

296 
	#GPDMA_INTERRSTAT_INTERRSTAT
(
x
) \

297 ((
x
Ë<< 
GPDMA_INTERRSTAT_INTERRSTAT_SHIFT
)

	)

303 
	#GPDMA_INTERRCLR_INTERRCLR_SHIFT
 (0)

	)

304 
	#GPDMA_INTERRCLR_INTERRCLR_MASK
 \

305 (0xf‡<< 
GPDMA_INTERRCLR_INTERRCLR_SHIFT
)

	)

306 
	#GPDMA_INTERRCLR_INTERRCLR
(
x
) \

307 ((
x
Ë<< 
GPDMA_INTERRCLR_INTERRCLR_SHIFT
)

	)

313 
	#GPDMA_RAWINTTCSTAT_RAWINTTCSTAT_SHIFT
 (0)

	)

314 
	#GPDMA_RAWINTTCSTAT_RAWINTTCSTAT_MASK
 \

315 (0xf‡<< 
GPDMA_RAWINTTCSTAT_RAWINTTCSTAT_SHIFT
)

	)

316 
	#GPDMA_RAWINTTCSTAT_RAWINTTCSTAT
(
x
) \

317 ((
x
Ë<< 
GPDMA_RAWINTTCSTAT_RAWINTTCSTAT_SHIFT
)

	)

323 
	#GPDMA_RAWINTERRSTAT_RAWINTERRSTAT_SHIFT
 (0)

	)

324 
	#GPDMA_RAWINTERRSTAT_RAWINTERRSTAT_MASK
 \

325 (0xf‡<< 
GPDMA_RAWINTERRSTAT_RAWINTERRSTAT_SHIFT
)

	)

326 
	#GPDMA_RAWINTERRSTAT_RAWINTERRSTAT
(
x
) \

327 ((
x
Ë<< 
GPDMA_RAWINTERRSTAT_RAWINTERRSTAT_SHIFT
)

	)

332 
	#GPDMA_ENBLDCHNS_ENABLEDCHANNELS_SHIFT
 (0)

	)

333 
	#GPDMA_ENBLDCHNS_ENABLEDCHANNELS_MASK
 \

334 (0xf‡<< 
GPDMA_ENBLDCHNS_ENABLEDCHANNELS_SHIFT
)

	)

335 
	#GPDMA_ENBLDCHNS_ENABLEDCHANNELS
(
x
) \

336 ((
x
Ë<< 
GPDMA_ENBLDCHNS_ENABLEDCHANNELS_SHIFT
)

	)

341 
	#GPDMA_SOFTBREQ_SOFTBREQ_SHIFT
 (0)

	)

342 
	#GPDMA_SOFTBREQ_SOFTBREQ_MASK
 (0xfff‡<< 
GPDMA_SOFTBREQ_SOFTBREQ_SHIFT
)

	)

343 
	#GPDMA_SOFTBREQ_SOFTBREQ
(
x
Ë((xË<< 
GPDMA_SOFTBREQ_SOFTBREQ_SHIFT
)

	)

349 
	#GPDMA_SOFTSREQ_SOFTSREQ_SHIFT
 (0)

	)

350 
	#GPDMA_SOFTSREQ_SOFTSREQ_MASK
 (0xfff‡<< 
GPDMA_SOFTSREQ_SOFTSREQ_SHIFT
)

	)

351 
	#GPDMA_SOFTSREQ_SOFTSREQ
(
x
Ë((xË<< 
GPDMA_SOFTSREQ_SOFTSREQ_SHIFT
)

	)

357 
	#GPDMA_SOFTLBREQ_SOFTLBREQ_SHIFT
 (0)

	)

358 
	#GPDMA_SOFTLBREQ_SOFTLBREQ_MASK
 \

359 (0xfff‡<< 
GPDMA_SOFTLBREQ_SOFTLBREQ_SHIFT
)

	)

360 
	#GPDMA_SOFTLBREQ_SOFTLBREQ
(
x
) \

361 ((
x
Ë<< 
GPDMA_SOFTLBREQ_SOFTLBREQ_SHIFT
)

	)

367 
	#GPDMA_SOFTLSREQ_SOFTLSREQ_SHIFT
 (0)

	)

368 
	#GPDMA_SOFTLSREQ_SOFTLSREQ_MASK
 \

369 (0xfff‡<< 
GPDMA_SOFTLSREQ_SOFTLSREQ_SHIFT
)

	)

370 
	#GPDMA_SOFTLSREQ_SOFTLSREQ
(
x
) \

371 ((
x
Ë<< 
GPDMA_SOFTLSREQ_SOFTLSREQ_SHIFT
)

	)

376 
	#GPDMA_CONFIG_E_SHIFT
 (0)

	)

377 
	#GPDMA_CONFIG_E_MASK
 (0x1 << 
GPDMA_CONFIG_E_SHIFT
)

	)

378 
	#GPDMA_CONFIG_E
(
x
Ë((xË<< 
GPDMA_CONFIG_E_SHIFT
)

	)

381 
	#GPDMA_CONFIG_M0_SHIFT
 (1)

	)

382 
	#GPDMA_CONFIG_M0_MASK
 (0x1 << 
GPDMA_CONFIG_M0_SHIFT
)

	)

383 
	#GPDMA_CONFIG_M0
(
x
Ë((xË<< 
GPDMA_CONFIG_M0_SHIFT
)

	)

386 
	#GPDMA_CONFIG_M1_SHIFT
 (2)

	)

387 
	#GPDMA_CONFIG_M1_MASK
 (0x1 << 
GPDMA_CONFIG_M1_SHIFT
)

	)

388 
	#GPDMA_CONFIG_M1
(
x
Ë((xË<< 
GPDMA_CONFIG_M1_SHIFT
)

	)

393 
	#GPDMA_SYNC_DMACSYNC_SHIFT
 (0)

	)

394 
	#GPDMA_SYNC_DMACSYNC_MASK
 (0xfff‡<< 
GPDMA_SYNC_DMACSYNC_SHIFT
)

	)

395 
	#GPDMA_SYNC_DMACSYNC
(
x
Ë((xË<< 
GPDMA_SYNC_DMACSYNC_SHIFT
)

	)

400 
	#GPDMA_CxSRCADDR_SRCADDR_SHIFT
 (0)

	)

401 
	#GPDMA_CxSRCADDR_SRCADDR_MASK
 \

402 (0xfffffff‡<< 
GPDMA_CxSRCADDR_SRCADDR_SHIFT
)

	)

403 
	#GPDMA_CxSRCADDR_SRCADDR
(
x
Ë((xË<< 
GPDMA_CxSRCADDR_SRCADDR_SHIFT
)

	)

408 
	#GPDMA_CxDESTADDR_DESTADDR_SHIFT
 (0)

	)

409 
	#GPDMA_CxDESTADDR_DESTADDR_MASK
 \

410 (0xfffffff‡<< 
GPDMA_CxDESTADDR_DESTADDR_SHIFT
)

	)

411 
	#GPDMA_CxDESTADDR_DESTADDR
(
x
Ë((xË<< 
GPDMA_CxDESTADDR_DESTADDR_SHIFT
)

	)

416 
	#GPDMA_CxLLI_LM_SHIFT
 (0)

	)

417 
	#GPDMA_CxLLI_LM_MASK
 (0x1 << 
GPDMA_CxLLI_LM_SHIFT
)

	)

418 
	#GPDMA_CxLLI_LM
(
x
Ë((xË<< 
GPDMA_CxLLI_LM_SHIFT
)

	)

421 
	#GPDMA_CxLLI_LLI_SHIFT
 (2)

	)

422 
	#GPDMA_CxLLI_LLI_MASK
 (0x3ffffff‡<< 
GPDMA_CxLLI_LLI_SHIFT
)

	)

423 
	#GPDMA_CxLLI_LLI
(
x
Ë((xË<< 
GPDMA_CxLLI_LLI_SHIFT
)

	)

428 
	#GPDMA_CxCONTROL_TRANSFERSIZE_SHIFT
 (0)

	)

429 
	#GPDMA_CxCONTROL_TRANSFERSIZE_MASK
 \

430 (0xff‡<< 
GPDMA_CxCONTROL_TRANSFERSIZE_SHIFT
)

	)

431 
	#GPDMA_CxCONTROL_TRANSFERSIZE
(
x
) \

432 ((
x
Ë<< 
GPDMA_CxCONTROL_TRANSFERSIZE_SHIFT
)

	)

435 
	#GPDMA_CxCONTROL_SBSIZE_SHIFT
 (12)

	)

436 
	#GPDMA_CxCONTROL_SBSIZE_MASK
 (0x7 << 
GPDMA_CxCONTROL_SBSIZE_SHIFT
)

	)

437 
	#GPDMA_CxCONTROL_SBSIZE
(
x
Ë((xË<< 
GPDMA_CxCONTROL_SBSIZE_SHIFT
)

	)

440 
	#GPDMA_CxCONTROL_DBSIZE_SHIFT
 (15)

	)

441 
	#GPDMA_CxCONTROL_DBSIZE_MASK
 (0x7 << 
GPDMA_CxCONTROL_DBSIZE_SHIFT
)

	)

442 
	#GPDMA_CxCONTROL_DBSIZE
(
x
Ë((xË<< 
GPDMA_CxCONTROL_DBSIZE_SHIFT
)

	)

445 
	#GPDMA_CxCONTROL_SWIDTH_SHIFT
 (18)

	)

446 
	#GPDMA_CxCONTROL_SWIDTH_MASK
 (0x7 << 
GPDMA_CxCONTROL_SWIDTH_SHIFT
)

	)

447 
	#GPDMA_CxCONTROL_SWIDTH
(
x
Ë((xË<< 
GPDMA_CxCONTROL_SWIDTH_SHIFT
)

	)

450 
	#GPDMA_CxCONTROL_DWIDTH_SHIFT
 (21)

	)

451 
	#GPDMA_CxCONTROL_DWIDTH_MASK
 (0x7 << 
GPDMA_CxCONTROL_DWIDTH_SHIFT
)

	)

452 
	#GPDMA_CxCONTROL_DWIDTH
(
x
Ë((xË<< 
GPDMA_CxCONTROL_DWIDTH_SHIFT
)

	)

455 
	#GPDMA_CxCONTROL_S_SHIFT
 (24)

	)

456 
	#GPDMA_CxCONTROL_S_MASK
 (0x1 << 
GPDMA_CxCONTROL_S_SHIFT
)

	)

457 
	#GPDMA_CxCONTROL_S
(
x
Ë((xË<< 
GPDMA_CxCONTROL_S_SHIFT
)

	)

460 
	#GPDMA_CxCONTROL_D_SHIFT
 (25)

	)

461 
	#GPDMA_CxCONTROL_D_MASK
 (0x1 << 
GPDMA_CxCONTROL_D_SHIFT
)

	)

462 
	#GPDMA_CxCONTROL_D
(
x
Ë((xË<< 
GPDMA_CxCONTROL_D_SHIFT
)

	)

465 
	#GPDMA_CxCONTROL_SI_SHIFT
 (26)

	)

466 
	#GPDMA_CxCONTROL_SI_MASK
 (0x1 << 
GPDMA_CxCONTROL_SI_SHIFT
)

	)

467 
	#GPDMA_Cx0CONTROL_SI
(
x
Ë((xË<< 
GPDMA_CxCONTROL_SI_SHIFT
)

	)

470 
	#GPDMA_CxCONTROL_DI_SHIFT
 (27)

	)

471 
	#GPDMA_CxCONTROL_DI_MASK
 (0x1 << 
GPDMA_CxCONTROL_DI_SHIFT
)

	)

472 
	#GPDMA_CxCONTROL_DI
(
x
Ë((xË<< 
GPDMA_CxCONTROL_DI_SHIFT
)

	)

476 
	#GPDMA_CxCONTROL_PROT1_SHIFT
 (28)

	)

477 
	#GPDMA_CxCONTROL_PROT1_MASK
 (0x1 << 
GPDMA_CxCONTROL_PROT1_SHIFT
)

	)

478 
	#GPDMA_CxCONTROL_PROT1
(
x
Ë((xË<< 
GPDMA_CxCONTROL_PROT1_SHIFT
)

	)

483 
	#GPDMA_CxCONTROL_PROT2_SHIFT
 (29)

	)

484 
	#GPDMA_CxCONTROL_PROT2_MASK
 (0x1 << 
GPDMA_CxCONTROL_PROT2_SHIFT
)

	)

485 
	#GPDMA_CxCONTROL_PROT2
(
x
Ë((xË<< 
GPDMA_CxCONTROL_PROT2_SHIFT
)

	)

490 
	#GPDMA_CxCONTROL_PROT3_SHIFT
 (30)

	)

491 
	#GPDMA_CxCONTROL_PROT3_MASK
 (0x1 << 
GPDMA_CxCONTROL_PROT3_SHIFT
)

	)

492 
	#GPDMA_CxCONTROL_PROT3
(
x
Ë((xË<< 
GPDMA_CxCONTROL_PROT3_SHIFT
)

	)

495 
	#GPDMA_CxCONTROL_I_SHIFT
 (31)

	)

496 
	#GPDMA_CxCONTROL_I_MASK
 (0x1 << 
GPDMA_CxCONTROL_I_SHIFT
)

	)

497 
	#GPDMA_CxCONTROL_I
(
x
Ë((xË<< 
GPDMA_CxCONTROL_I_SHIFT
)

	)

502 
	#GPDMA_CxCONFIG_E_SHIFT
 (0)

	)

503 
	#GPDMA_CxCONFIG_E_MASK
 (0x1 << 
GPDMA_CxCONFIG_E_SHIFT
)

	)

504 
	#GPDMA_CxCONFIG_E
(
x
Ë((xË<< 
GPDMA_CxCONFIG_E_SHIFT
)

	)

507 
	#GPDMA_CxCONFIG_SRCPERIPHERAL_SHIFT
 (1)

	)

508 
	#GPDMA_CxCONFIG_SRCPERIPHERAL_MASK
 \

509 (0x1‡<< 
GPDMA_CxCONFIG_SRCPERIPHERAL_SHIFT
)

	)

510 
	#GPDMA_CxCONFIG_SRCPERIPHERAL
(
x
) \

511 ((
x
Ë<< 
GPDMA_CxCONFIG_SRCPERIPHERAL_SHIFT
)

	)

514 
	#GPDMA_CxCONFIG_DESTPERIPHERAL_SHIFT
 (6)

	)

515 
	#GPDMA_CxCONFIG_DESTPERIPHERAL_MASK
 \

516 (0x1‡<< 
GPDMA_CxCONFIG_DESTPERIPHERAL_SHIFT
)

	)

517 
	#GPDMA_CxCONFIG_DESTPERIPHERAL
(
x
) \

518 ((
x
Ë<< 
GPDMA_CxCONFIG_DESTPERIPHERAL_SHIFT
)

	)

521 
	#GPDMA_CxCONFIG_FLOWCNTRL_SHIFT
 (11)

	)

522 
	#GPDMA_CxCONFIG_FLOWCNTRL_MASK
 (0x7 << 
GPDMA_CxCONFIG_FLOWCNTRL_SHIFT
)

	)

523 
	#GPDMA_CxCONFIG_FLOWCNTRL
(
x
Ë((xË<< 
GPDMA_CxCONFIG_FLOWCNTRL_SHIFT
)

	)

526 
	#GPDMA_CxCONFIG_IE_SHIFT
 (14)

	)

527 
	#GPDMA_CxCONFIG_IE_MASK
 (0x1 << 
GPDMA_CxCONFIG_IE_SHIFT
)

	)

528 
	#GPDMA_CxCONFIG_IE
(
x
Ë((xË<< 
GPDMA_CxCONFIG_IE_SHIFT
)

	)

531 
	#GPDMA_CxCONFIG_ITC_SHIFT
 (15)

	)

532 
	#GPDMA_CxCONFIG_ITC_MASK
 (0x1 << 
GPDMA_CxCONFIG_ITC_SHIFT
)

	)

533 
	#GPDMA_CxCONFIG_ITC
(
x
Ë((xË<< 
GPDMA_CxCONFIG_ITC_SHIFT
)

	)

536 
	#GPDMA_CxCONFIG_L_SHIFT
 (16)

	)

537 
	#GPDMA_CxCONFIG_L_MASK
 (0x1 << 
GPDMA_CxCONFIG_L_SHIFT
)

	)

538 
	#GPDMA_CxCONFIG_L
(
x
Ë((xË<< 
GPDMA_CxCONFIG_L_SHIFT
)

	)

541 
	#GPDMA_CxCONFIG_A_SHIFT
 (17)

	)

542 
	#GPDMA_CxCONFIG_A_MASK
 (0x1 << 
GPDMA_CxCONFIG_A_SHIFT
)

	)

543 
	#GPDMA_CxCONFIG_A
(
x
Ë((xË<< 
GPDMA_CxCONFIG_A_SHIFT
)

	)

546 
	#GPDMA_CxCONFIG_H_SHIFT
 (18)

	)

547 
	#GPDMA_CxCONFIG_H_MASK
 (0x1 << 
GPDMA_CxCONFIG_H_SHIFT
)

	)

548 
	#GPDMA_CxCONFIG_H
(
x
Ë((xË<< 
GPDMA_CxCONFIG_H_SHIFT
)

	)

	@libopencm3/include/libopencm3/lpc43xx/gpio.h

35 #i‚de‡
LPC43XX_GPIO_H


36 
	#LPC43XX_GPIO_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

46 
	#GPIO0
 (
GPIO_PORT_BASE
 + 0x2000)

	)

47 
	#GPIO1
 (
GPIO_PORT_BASE
 + 0x2004)

	)

48 
	#GPIO2
 (
GPIO_PORT_BASE
 + 0x2008)

	)

49 
	#GPIO3
 (
GPIO_PORT_BASE
 + 0x200C)

	)

50 
	#GPIO4
 (
GPIO_PORT_BASE
 + 0x2010)

	)

51 
	#GPIO5
 (
GPIO_PORT_BASE
 + 0x2014)

	)

52 
	#GPIO6
 (
GPIO_PORT_BASE
 + 0x2018)

	)

53 
	#GPIO7
 (
GPIO_PORT_BASE
 + 0x201C)

	)

56 
	#GPIOPIN0
 (1 << 0)

	)

57 
	#GPIOPIN1
 (1 << 1)

	)

58 
	#GPIOPIN2
 (1 << 2)

	)

59 
	#GPIOPIN3
 (1 << 3)

	)

60 
	#GPIOPIN4
 (1 << 4)

	)

61 
	#GPIOPIN5
 (1 << 5)

	)

62 
	#GPIOPIN6
 (1 << 6)

	)

63 
	#GPIOPIN7
 (1 << 7)

	)

64 
	#GPIOPIN8
 (1 << 8)

	)

65 
	#GPIOPIN9
 (1 << 9)

	)

66 
	#GPIOPIN10
 (1 << 10)

	)

67 
	#GPIOPIN11
 (1 << 11)

	)

68 
	#GPIOPIN12
 (1 << 12)

	)

69 
	#GPIOPIN13
 (1 << 13)

	)

70 
	#GPIOPIN14
 (1 << 14)

	)

71 
	#GPIOPIN15
 (1 << 15)

	)

72 
	#GPIOPIN16
 (1 << 16)

	)

73 
	#GPIOPIN17
 (1 << 17)

	)

74 
	#GPIOPIN18
 (1 << 18)

	)

75 
	#GPIOPIN19
 (1 << 19)

	)

76 
	#GPIOPIN20
 (1 << 20)

	)

77 
	#GPIOPIN21
 (1 << 21)

	)

78 
	#GPIOPIN22
 (1 << 22)

	)

79 
	#GPIOPIN23
 (1 << 23)

	)

80 
	#GPIOPIN24
 (1 << 24)

	)

81 
	#GPIOPIN25
 (1 << 25)

	)

82 
	#GPIOPIN26
 (1 << 26)

	)

83 
	#GPIOPIN27
 (1 << 27)

	)

84 
	#GPIOPIN28
 (1 << 28)

	)

85 
	#GPIOPIN29
 (1 << 29)

	)

86 
	#GPIOPIN30
 (1 << 30)

	)

87 
	#GPIOPIN31
 (1 << 31)

	)

94 
	#GPIO_PIN_INTERRUPT_ISEL
 
	`MMIO32
(
GPIO_PIN_INTERRUPT_BASE
 + 0x000)

	)

97 
	#GPIO_PIN_INTERRUPT_IENR
 
	`MMIO32
(
GPIO_PIN_INTERRUPT_BASE
 + 0x004)

	)

100 
	#GPIO_PIN_INTERRUPT_SIENR
 
	`MMIO32
(
GPIO_PIN_INTERRUPT_BASE
 + 0x008)

	)

103 
	#GPIO_PIN_INTERRUPT_CIENR
 
	`MMIO32
(
GPIO_PIN_INTERRUPT_BASE
 + 0x00C)

	)

106 
	#GPIO_PIN_INTERRUPT_IENF
 
	`MMIO32
(
GPIO_PIN_INTERRUPT_BASE
 + 0x010)

	)

109 
	#GPIO_PIN_INTERRUPT_SIENF
 
	`MMIO32
(
GPIO_PIN_INTERRUPT_BASE
 + 0x014)

	)

112 
	#GPIO_PIN_INTERRUPT_CIENF
 
	`MMIO32
(
GPIO_PIN_INTERRUPT_BASE
 + 0x018)

	)

115 
	#GPIO_PIN_INTERRUPT_RISE
 
	`MMIO32
(
GPIO_PIN_INTERRUPT_BASE
 + 0x01C)

	)

118 
	#GPIO_PIN_INTERRUPT_FALL
 
	`MMIO32
(
GPIO_PIN_INTERRUPT_BASE
 + 0x020)

	)

121 
	#GPIO_PIN_INTERRUPT_IST
 
	`MMIO32
(
GPIO_PIN_INTERRUPT_BASE
 + 0x024)

	)

126 
	#GPIO_GROUP0_INTERRUPT_CTRL
 \

127 
	`MMIO32
(
GPIO_GROUP0_INTERRUPT_BASE
 + 0x000)

	)

130 
	#GPIO_GROUP0_INTERRUPT_PORT_POL
(
x
) \

131 
	`MMIO32
(
GPIO_GROUP0_INTERRUPT_BASE
 + 0x020 + ((
x
)*4))

	)

134 
	#GPIO_GROUP0_INTERRUPT_PORT_ENA
(
x
) \

135 
	`MMIO32
(
GPIO_GROUP0_INTERRUPT_BASE
 + 0x040 + ((
x
)*4))

	)

140 
	#GPIO_GROUP1_INTERRUPT_CTRL
 \

141 
	`MMIO32
(
GPIO_GROUP1_INTERRUPT_BASE
 + 0x000)

	)

144 
	#GPIO_GROUP1_INTERRUPT_PORT_POL
(
x
) \

145 
	`MMIO32
(
GPIO_GROUP1_INTERRUPT_BASE
 + 0x020 + ((
x
)*4))

	)

148 
	#GPIO_GROUP1_INTERRUPT_PORT_ENA
(
x
) \

149 
	`MMIO32
(
GPIO_GROUP1_INTERRUPT_BASE
 + 0x040 + ((
x
)*4))

	)

152 
	#GPIO_B0
 (
GPIO_PORT_BASE
 + 0x0000)

	)

153 
	#GPIO_B1
 (
GPIO_PORT_BASE
 + 0x0001)

	)

154 
	#GPIO_B2
 (
GPIO_PORT_BASE
 + 0x0002)

	)

155 
	#GPIO_B3
 (
GPIO_PORT_BASE
 + 0x0003)

	)

156 
	#GPIO_B4
 (
GPIO_PORT_BASE
 + 0x0004)

	)

157 
	#GPIO_B5
 (
GPIO_PORT_BASE
 + 0x0005)

	)

158 
	#GPIO_B6
 (
GPIO_PORT_BASE
 + 0x0006)

	)

159 
	#GPIO_B7
 (
GPIO_PORT_BASE
 + 0x0007)

	)

160 
	#GPIO_B8
 (
GPIO_PORT_BASE
 + 0x0008)

	)

161 
	#GPIO_B9
 (
GPIO_PORT_BASE
 + 0x0009)

	)

162 
	#GPIO_B10
 (
GPIO_PORT_BASE
 + 0x000A)

	)

163 
	#GPIO_B11
 (
GPIO_PORT_BASE
 + 0x000B)

	)

164 
	#GPIO_B12
 (
GPIO_PORT_BASE
 + 0x000C)

	)

165 
	#GPIO_B13
 (
GPIO_PORT_BASE
 + 0x000D)

	)

166 
	#GPIO_B14
 (
GPIO_PORT_BASE
 + 0x000E)

	)

167 
	#GPIO_B15
 (
GPIO_PORT_BASE
 + 0x000F)

	)

168 
	#GPIO_B16
 (
GPIO_PORT_BASE
 + 0x0010)

	)

169 
	#GPIO_B17
 (
GPIO_PORT_BASE
 + 0x0011)

	)

170 
	#GPIO_B18
 (
GPIO_PORT_BASE
 + 0x0012)

	)

171 
	#GPIO_B19
 (
GPIO_PORT_BASE
 + 0x0013)

	)

172 
	#GPIO_B20
 (
GPIO_PORT_BASE
 + 0x0014)

	)

173 
	#GPIO_B21
 (
GPIO_PORT_BASE
 + 0x0015)

	)

174 
	#GPIO_B22
 (
GPIO_PORT_BASE
 + 0x0016)

	)

175 
	#GPIO_B23
 (
GPIO_PORT_BASE
 + 0x0017)

	)

176 
	#GPIO_B24
 (
GPIO_PORT_BASE
 + 0x0018)

	)

177 
	#GPIO_B25
 (
GPIO_PORT_BASE
 + 0x0019)

	)

178 
	#GPIO_B26
 (
GPIO_PORT_BASE
 + 0x001A)

	)

179 
	#GPIO_B27
 (
GPIO_PORT_BASE
 + 0x001B)

	)

180 
	#GPIO_B28
 (
GPIO_PORT_BASE
 + 0x001C)

	)

181 
	#GPIO_B29
 (
GPIO_PORT_BASE
 + 0x001D)

	)

182 
	#GPIO_B30
 (
GPIO_PORT_BASE
 + 0x001E)

	)

183 
	#GPIO_B31
 (
GPIO_PORT_BASE
 + 0x001F)

	)

186 
	#GPIO_B32
 (
GPIO_PORT_BASE
 + 0x0020)

	)

187 
	#GPIO_B33
 (
GPIO_PORT_BASE
 + 0x0021)

	)

188 
	#GPIO_B34
 (
GPIO_PORT_BASE
 + 0x0022)

	)

189 
	#GPIO_B35
 (
GPIO_PORT_BASE
 + 0x0023)

	)

190 
	#GPIO_B36
 (
GPIO_PORT_BASE
 + 0x0024)

	)

191 
	#GPIO_B37
 (
GPIO_PORT_BASE
 + 0x0025)

	)

192 
	#GPIO_B38
 (
GPIO_PORT_BASE
 + 0x0026)

	)

193 
	#GPIO_B39
 (
GPIO_PORT_BASE
 + 0x0027)

	)

194 
	#GPIO_B40
 (
GPIO_PORT_BASE
 + 0x0028)

	)

195 
	#GPIO_B41
 (
GPIO_PORT_BASE
 + 0x0029)

	)

196 
	#GPIO_B42
 (
GPIO_PORT_BASE
 + 0x002A)

	)

197 
	#GPIO_B43
 (
GPIO_PORT_BASE
 + 0x002B)

	)

198 
	#GPIO_B44
 (
GPIO_PORT_BASE
 + 0x002C)

	)

199 
	#GPIO_B45
 (
GPIO_PORT_BASE
 + 0x002D)

	)

200 
	#GPIO_B46
 (
GPIO_PORT_BASE
 + 0x002E)

	)

201 
	#GPIO_B47
 (
GPIO_PORT_BASE
 + 0x002F)

	)

202 
	#GPIO_B48
 (
GPIO_PORT_BASE
 + 0x0030)

	)

203 
	#GPIO_B49
 (
GPIO_PORT_BASE
 + 0x0031)

	)

204 
	#GPIO_B50
 (
GPIO_PORT_BASE
 + 0x0032)

	)

205 
	#GPIO_B51
 (
GPIO_PORT_BASE
 + 0x0033)

	)

206 
	#GPIO_B52
 (
GPIO_PORT_BASE
 + 0x0034)

	)

207 
	#GPIO_B53
 (
GPIO_PORT_BASE
 + 0x0035)

	)

208 
	#GPIO_B54
 (
GPIO_PORT_BASE
 + 0x0036)

	)

209 
	#GPIO_B55
 (
GPIO_PORT_BASE
 + 0x0037)

	)

210 
	#GPIO_B56
 (
GPIO_PORT_BASE
 + 0x0038)

	)

211 
	#GPIO_B57
 (
GPIO_PORT_BASE
 + 0x0039)

	)

212 
	#GPIO_B58
 (
GPIO_PORT_BASE
 + 0x003A)

	)

213 
	#GPIO_B59
 (
GPIO_PORT_BASE
 + 0x003B)

	)

214 
	#GPIO_B60
 (
GPIO_PORT_BASE
 + 0x003C)

	)

215 
	#GPIO_B61
 (
GPIO_PORT_BASE
 + 0x003D)

	)

216 
	#GPIO_B62
 (
GPIO_PORT_BASE
 + 0x003E)

	)

217 
	#GPIO_B63
 (
GPIO_PORT_BASE
 + 0x003F)

	)

220 
	#GPIO_B64
 (
GPIO_PORT_BASE
 + 0x0040)

	)

221 
	#GPIO_B65
 (
GPIO_PORT_BASE
 + 0x0041)

	)

222 
	#GPIO_B66
 (
GPIO_PORT_BASE
 + 0x0042)

	)

223 
	#GPIO_B67
 (
GPIO_PORT_BASE
 + 0x0043)

	)

224 
	#GPIO_B68
 (
GPIO_PORT_BASE
 + 0x0044)

	)

225 
	#GPIO_B69
 (
GPIO_PORT_BASE
 + 0x0045)

	)

226 
	#GPIO_B70
 (
GPIO_PORT_BASE
 + 0x0046)

	)

227 
	#GPIO_B71
 (
GPIO_PORT_BASE
 + 0x0047)

	)

228 
	#GPIO_B72
 (
GPIO_PORT_BASE
 + 0x0048)

	)

229 
	#GPIO_B73
 (
GPIO_PORT_BASE
 + 0x0049)

	)

230 
	#GPIO_B74
 (
GPIO_PORT_BASE
 + 0x004A)

	)

231 
	#GPIO_B75
 (
GPIO_PORT_BASE
 + 0x004B)

	)

232 
	#GPIO_B76
 (
GPIO_PORT_BASE
 + 0x004C)

	)

233 
	#GPIO_B77
 (
GPIO_PORT_BASE
 + 0x004D)

	)

234 
	#GPIO_B78
 (
GPIO_PORT_BASE
 + 0x004E)

	)

235 
	#GPIO_B79
 (
GPIO_PORT_BASE
 + 0x004F)

	)

236 
	#GPIO_B80
 (
GPIO_PORT_BASE
 + 0x0050)

	)

237 
	#GPIO_B81
 (
GPIO_PORT_BASE
 + 0x0051)

	)

238 
	#GPIO_B82
 (
GPIO_PORT_BASE
 + 0x0052)

	)

239 
	#GPIO_B83
 (
GPIO_PORT_BASE
 + 0x0053)

	)

240 
	#GPIO_B84
 (
GPIO_PORT_BASE
 + 0x0054)

	)

241 
	#GPIO_B85
 (
GPIO_PORT_BASE
 + 0x0055)

	)

242 
	#GPIO_B86
 (
GPIO_PORT_BASE
 + 0x0056)

	)

243 
	#GPIO_B87
 (
GPIO_PORT_BASE
 + 0x0057)

	)

244 
	#GPIO_B88
 (
GPIO_PORT_BASE
 + 0x0058)

	)

245 
	#GPIO_B89
 (
GPIO_PORT_BASE
 + 0x0059)

	)

246 
	#GPIO_B90
 (
GPIO_PORT_BASE
 + 0x005A)

	)

247 
	#GPIO_B91
 (
GPIO_PORT_BASE
 + 0x005B)

	)

248 
	#GPIO_B92
 (
GPIO_PORT_BASE
 + 0x005C)

	)

249 
	#GPIO_B93
 (
GPIO_PORT_BASE
 + 0x005D)

	)

250 
	#GPIO_B94
 (
GPIO_PORT_BASE
 + 0x005E)

	)

251 
	#GPIO_B95
 (
GPIO_PORT_BASE
 + 0x005F)

	)

254 
	#GPIO_B96
 (
GPIO_PORT_BASE
 + 0x0060)

	)

255 
	#GPIO_B97
 (
GPIO_PORT_BASE
 + 0x0061)

	)

256 
	#GPIO_B98
 (
GPIO_PORT_BASE
 + 0x0062)

	)

257 
	#GPIO_B99
 (
GPIO_PORT_BASE
 + 0x0063)

	)

258 
	#GPIO_B100
 (
GPIO_PORT_BASE
 + 0x0064)

	)

259 
	#GPIO_B101
 (
GPIO_PORT_BASE
 + 0x0065)

	)

260 
	#GPIO_B102
 (
GPIO_PORT_BASE
 + 0x0066)

	)

261 
	#GPIO_B103
 (
GPIO_PORT_BASE
 + 0x0067)

	)

262 
	#GPIO_B104
 (
GPIO_PORT_BASE
 + 0x0068)

	)

263 
	#GPIO_B105
 (
GPIO_PORT_BASE
 + 0x0069)

	)

264 
	#GPIO_B106
 (
GPIO_PORT_BASE
 + 0x006A)

	)

265 
	#GPIO_B107
 (
GPIO_PORT_BASE
 + 0x006B)

	)

266 
	#GPIO_B108
 (
GPIO_PORT_BASE
 + 0x006C)

	)

267 
	#GPIO_B109
 (
GPIO_PORT_BASE
 + 0x006D)

	)

268 
	#GPIO_B110
 (
GPIO_PORT_BASE
 + 0x006E)

	)

269 
	#GPIO_B111
 (
GPIO_PORT_BASE
 + 0x006F)

	)

270 
	#GPIO_B112
 (
GPIO_PORT_BASE
 + 0x0070)

	)

271 
	#GPIO_B113
 (
GPIO_PORT_BASE
 + 0x0071)

	)

272 
	#GPIO_B114
 (
GPIO_PORT_BASE
 + 0x0072)

	)

273 
	#GPIO_B115
 (
GPIO_PORT_BASE
 + 0x0073)

	)

274 
	#GPIO_B116
 (
GPIO_PORT_BASE
 + 0x0074)

	)

275 
	#GPIO_B117
 (
GPIO_PORT_BASE
 + 0x0075)

	)

276 
	#GPIO_B118
 (
GPIO_PORT_BASE
 + 0x0076)

	)

277 
	#GPIO_B119
 (
GPIO_PORT_BASE
 + 0x0077)

	)

278 
	#GPIO_B120
 (
GPIO_PORT_BASE
 + 0x0078)

	)

279 
	#GPIO_B121
 (
GPIO_PORT_BASE
 + 0x0079)

	)

280 
	#GPIO_B122
 (
GPIO_PORT_BASE
 + 0x007A)

	)

281 
	#GPIO_B123
 (
GPIO_PORT_BASE
 + 0x007B)

	)

282 
	#GPIO_B124
 (
GPIO_PORT_BASE
 + 0x007C)

	)

283 
	#GPIO_B125
 (
GPIO_PORT_BASE
 + 0x007D)

	)

284 
	#GPIO_B126
 (
GPIO_PORT_BASE
 + 0x007E)

	)

285 
	#GPIO_B127
 (
GPIO_PORT_BASE
 + 0x007F)

	)

288 
	#GPIO_B128
 (
GPIO_PORT_BASE
 + 0x0080)

	)

289 
	#GPIO_B129
 (
GPIO_PORT_BASE
 + 0x0081)

	)

290 
	#GPIO_B130
 (
GPIO_PORT_BASE
 + 0x0082)

	)

291 
	#GPIO_B131
 (
GPIO_PORT_BASE
 + 0x0083)

	)

292 
	#GPIO_B132
 (
GPIO_PORT_BASE
 + 0x0084)

	)

293 
	#GPIO_B133
 (
GPIO_PORT_BASE
 + 0x0085)

	)

294 
	#GPIO_B134
 (
GPIO_PORT_BASE
 + 0x0086)

	)

295 
	#GPIO_B135
 (
GPIO_PORT_BASE
 + 0x0087)

	)

296 
	#GPIO_B136
 (
GPIO_PORT_BASE
 + 0x0088)

	)

297 
	#GPIO_B137
 (
GPIO_PORT_BASE
 + 0x0089)

	)

298 
	#GPIO_B138
 (
GPIO_PORT_BASE
 + 0x008A)

	)

299 
	#GPIO_B139
 (
GPIO_PORT_BASE
 + 0x008B)

	)

300 
	#GPIO_B140
 (
GPIO_PORT_BASE
 + 0x008C)

	)

301 
	#GPIO_B141
 (
GPIO_PORT_BASE
 + 0x008D)

	)

302 
	#GPIO_B142
 (
GPIO_PORT_BASE
 + 0x008E)

	)

303 
	#GPIO_B143
 (
GPIO_PORT_BASE
 + 0x008F)

	)

304 
	#GPIO_B144
 (
GPIO_PORT_BASE
 + 0x0090)

	)

305 
	#GPIO_B145
 (
GPIO_PORT_BASE
 + 0x0091)

	)

306 
	#GPIO_B146
 (
GPIO_PORT_BASE
 + 0x0092)

	)

307 
	#GPIO_B147
 (
GPIO_PORT_BASE
 + 0x0093)

	)

308 
	#GPIO_B148
 (
GPIO_PORT_BASE
 + 0x0094)

	)

309 
	#GPIO_B149
 (
GPIO_PORT_BASE
 + 0x0095)

	)

310 
	#GPIO_B150
 (
GPIO_PORT_BASE
 + 0x0096)

	)

311 
	#GPIO_B151
 (
GPIO_PORT_BASE
 + 0x0097)

	)

312 
	#GPIO_B152
 (
GPIO_PORT_BASE
 + 0x0098)

	)

313 
	#GPIO_B153
 (
GPIO_PORT_BASE
 + 0x0099)

	)

314 
	#GPIO_B154
 (
GPIO_PORT_BASE
 + 0x009A)

	)

315 
	#GPIO_B155
 (
GPIO_PORT_BASE
 + 0x009B)

	)

316 
	#GPIO_B156
 (
GPIO_PORT_BASE
 + 0x009C)

	)

317 
	#GPIO_B157
 (
GPIO_PORT_BASE
 + 0x009D)

	)

318 
	#GPIO_B158
 (
GPIO_PORT_BASE
 + 0x009E)

	)

319 
	#GPIO_B159
 (
GPIO_PORT_BASE
 + 0x009F)

	)

322 
	#GPIO_B160
 (
GPIO_PORT_BASE
 + 0x00A0)

	)

323 
	#GPIO_B161
 (
GPIO_PORT_BASE
 + 0x00A1)

	)

324 
	#GPIO_B162
 (
GPIO_PORT_BASE
 + 0x00A2)

	)

325 
	#GPIO_B163
 (
GPIO_PORT_BASE
 + 0x00A3)

	)

326 
	#GPIO_B164
 (
GPIO_PORT_BASE
 + 0x00A4)

	)

327 
	#GPIO_B165
 (
GPIO_PORT_BASE
 + 0x00A5)

	)

328 
	#GPIO_B166
 (
GPIO_PORT_BASE
 + 0x00A6)

	)

329 
	#GPIO_B167
 (
GPIO_PORT_BASE
 + 0x00A7)

	)

330 
	#GPIO_B168
 (
GPIO_PORT_BASE
 + 0x00A8)

	)

331 
	#GPIO_B169
 (
GPIO_PORT_BASE
 + 0x00A9)

	)

332 
	#GPIO_B170
 (
GPIO_PORT_BASE
 + 0x00AA)

	)

333 
	#GPIO_B171
 (
GPIO_PORT_BASE
 + 0x00AB)

	)

334 
	#GPIO_B172
 (
GPIO_PORT_BASE
 + 0x00AC)

	)

335 
	#GPIO_B173
 (
GPIO_PORT_BASE
 + 0x00AD)

	)

336 
	#GPIO_B174
 (
GPIO_PORT_BASE
 + 0x00AE)

	)

337 
	#GPIO_B175
 (
GPIO_PORT_BASE
 + 0x00AF)

	)

338 
	#GPIO_B176
 (
GPIO_PORT_BASE
 + 0x00B0)

	)

339 
	#GPIO_B177
 (
GPIO_PORT_BASE
 + 0x00B1)

	)

340 
	#GPIO_B178
 (
GPIO_PORT_BASE
 + 0x00B2)

	)

341 
	#GPIO_B179
 (
GPIO_PORT_BASE
 + 0x00B3)

	)

342 
	#GPIO_B180
 (
GPIO_PORT_BASE
 + 0x00B4)

	)

343 
	#GPIO_B181
 (
GPIO_PORT_BASE
 + 0x00B5)

	)

344 
	#GPIO_B182
 (
GPIO_PORT_BASE
 + 0x00B6)

	)

345 
	#GPIO_B183
 (
GPIO_PORT_BASE
 + 0x00B7)

	)

346 
	#GPIO_B184
 (
GPIO_PORT_BASE
 + 0x00B8)

	)

347 
	#GPIO_B185
 (
GPIO_PORT_BASE
 + 0x00B9)

	)

348 
	#GPIO_B186
 (
GPIO_PORT_BASE
 + 0x00BA)

	)

349 
	#GPIO_B187
 (
GPIO_PORT_BASE
 + 0x00BB)

	)

350 
	#GPIO_B188
 (
GPIO_PORT_BASE
 + 0x00BC)

	)

351 
	#GPIO_B189
 (
GPIO_PORT_BASE
 + 0x00BD)

	)

352 
	#GPIO_B190
 (
GPIO_PORT_BASE
 + 0x00BE)

	)

353 
	#GPIO_B191
 (
GPIO_PORT_BASE
 + 0x00BF)

	)

356 
	#GPIO_B192
 (
GPIO_PORT_BASE
 + 0x00C0)

	)

357 
	#GPIO_B193
 (
GPIO_PORT_BASE
 + 0x00C1)

	)

358 
	#GPIO_B194
 (
GPIO_PORT_BASE
 + 0x00C2)

	)

359 
	#GPIO_B195
 (
GPIO_PORT_BASE
 + 0x00C3)

	)

360 
	#GPIO_B196
 (
GPIO_PORT_BASE
 + 0x00C4)

	)

361 
	#GPIO_B197
 (
GPIO_PORT_BASE
 + 0x00C5)

	)

362 
	#GPIO_B198
 (
GPIO_PORT_BASE
 + 0x00C6)

	)

363 
	#GPIO_B199
 (
GPIO_PORT_BASE
 + 0x00C7)

	)

364 
	#GPIO_B200
 (
GPIO_PORT_BASE
 + 0x00C8)

	)

365 
	#GPIO_B201
 (
GPIO_PORT_BASE
 + 0x00C9)

	)

366 
	#GPIO_B202
 (
GPIO_PORT_BASE
 + 0x00CA)

	)

367 
	#GPIO_B203
 (
GPIO_PORT_BASE
 + 0x00CB)

	)

368 
	#GPIO_B204
 (
GPIO_PORT_BASE
 + 0x00CC)

	)

369 
	#GPIO_B205
 (
GPIO_PORT_BASE
 + 0x00CD)

	)

370 
	#GPIO_B206
 (
GPIO_PORT_BASE
 + 0x00CE)

	)

371 
	#GPIO_B207
 (
GPIO_PORT_BASE
 + 0x00CF)

	)

372 
	#GPIO_B208
 (
GPIO_PORT_BASE
 + 0x00D0)

	)

373 
	#GPIO_B209
 (
GPIO_PORT_BASE
 + 0x00D1)

	)

374 
	#GPIO_B210
 (
GPIO_PORT_BASE
 + 0x00D2)

	)

375 
	#GPIO_B211
 (
GPIO_PORT_BASE
 + 0x00D3)

	)

376 
	#GPIO_B212
 (
GPIO_PORT_BASE
 + 0x00D4)

	)

377 
	#GPIO_B213
 (
GPIO_PORT_BASE
 + 0x00D5)

	)

378 
	#GPIO_B214
 (
GPIO_PORT_BASE
 + 0x00D6)

	)

379 
	#GPIO_B215
 (
GPIO_PORT_BASE
 + 0x00D7)

	)

380 
	#GPIO_B216
 (
GPIO_PORT_BASE
 + 0x00D8)

	)

381 
	#GPIO_B217
 (
GPIO_PORT_BASE
 + 0x00D9)

	)

382 
	#GPIO_B218
 (
GPIO_PORT_BASE
 + 0x00DA)

	)

383 
	#GPIO_B219
 (
GPIO_PORT_BASE
 + 0x00DB)

	)

384 
	#GPIO_B220
 (
GPIO_PORT_BASE
 + 0x00DC)

	)

385 
	#GPIO_B221
 (
GPIO_PORT_BASE
 + 0x00DD)

	)

386 
	#GPIO_B222
 (
GPIO_PORT_BASE
 + 0x00DE)

	)

387 
	#GPIO_B223
 (
GPIO_PORT_BASE
 + 0x00DF)

	)

390 
	#GPIO_B224
 (
GPIO_PORT_BASE
 + 0x00E0)

	)

391 
	#GPIO_B225
 (
GPIO_PORT_BASE
 + 0x00E1)

	)

392 
	#GPIO_B226
 (
GPIO_PORT_BASE
 + 0x00E2)

	)

393 
	#GPIO_B227
 (
GPIO_PORT_BASE
 + 0x00E3)

	)

394 
	#GPIO_B228
 (
GPIO_PORT_BASE
 + 0x00E4)

	)

395 
	#GPIO_B229
 (
GPIO_PORT_BASE
 + 0x00E5)

	)

396 
	#GPIO_B230
 (
GPIO_PORT_BASE
 + 0x00E6)

	)

397 
	#GPIO_B231
 (
GPIO_PORT_BASE
 + 0x00E7)

	)

398 
	#GPIO_B232
 (
GPIO_PORT_BASE
 + 0x00E8)

	)

399 
	#GPIO_B233
 (
GPIO_PORT_BASE
 + 0x00E9)

	)

400 
	#GPIO_B234
 (
GPIO_PORT_BASE
 + 0x00EA)

	)

401 
	#GPIO_B235
 (
GPIO_PORT_BASE
 + 0x00EB)

	)

402 
	#GPIO_B236
 (
GPIO_PORT_BASE
 + 0x00EC)

	)

403 
	#GPIO_B237
 (
GPIO_PORT_BASE
 + 0x00ED)

	)

404 
	#GPIO_B238
 (
GPIO_PORT_BASE
 + 0x00EE)

	)

405 
	#GPIO_B239
 (
GPIO_PORT_BASE
 + 0x00EF)

	)

406 
	#GPIO_B240
 (
GPIO_PORT_BASE
 + 0x00F0)

	)

407 
	#GPIO_B241
 (
GPIO_PORT_BASE
 + 0x00F1)

	)

408 
	#GPIO_B242
 (
GPIO_PORT_BASE
 + 0x00F2)

	)

409 
	#GPIO_B243
 (
GPIO_PORT_BASE
 + 0x00F3)

	)

410 
	#GPIO_B244
 (
GPIO_PORT_BASE
 + 0x00F4)

	)

411 
	#GPIO_B245
 (
GPIO_PORT_BASE
 + 0x00F5)

	)

412 
	#GPIO_B246
 (
GPIO_PORT_BASE
 + 0x00F6)

	)

413 
	#GPIO_B247
 (
GPIO_PORT_BASE
 + 0x00F7)

	)

414 
	#GPIO_B248
 (
GPIO_PORT_BASE
 + 0x00F8)

	)

415 
	#GPIO_B249
 (
GPIO_PORT_BASE
 + 0x00F9)

	)

416 
	#GPIO_B250
 (
GPIO_PORT_BASE
 + 0x00FA)

	)

417 
	#GPIO_B251
 (
GPIO_PORT_BASE
 + 0x00FB)

	)

418 
	#GPIO_B252
 (
GPIO_PORT_BASE
 + 0x00FC)

	)

419 
	#GPIO_B253
 (
GPIO_PORT_BASE
 + 0x00FD)

	)

420 
	#GPIO_B254
 (
GPIO_PORT_BASE
 + 0x00FE)

	)

421 
	#GPIO_B255
 (
GPIO_PORT_BASE
 + 0x00FF)

	)

424 
	#GPIO_W0
 (
GPIO_PORT_BASE
 + 0x1000)

	)

425 
	#GPIO_W1
 (
GPIO_PORT_BASE
 + 0x1004)

	)

426 
	#GPIO_W2
 (
GPIO_PORT_BASE
 + 0x1008)

	)

427 
	#GPIO_W3
 (
GPIO_PORT_BASE
 + 0x100C)

	)

428 
	#GPIO_W4
 (
GPIO_PORT_BASE
 + 0x1010)

	)

429 
	#GPIO_W5
 (
GPIO_PORT_BASE
 + 0x1014)

	)

430 
	#GPIO_W6
 (
GPIO_PORT_BASE
 + 0x1018)

	)

431 
	#GPIO_W7
 (
GPIO_PORT_BASE
 + 0x101C)

	)

432 
	#GPIO_W8
 (
GPIO_PORT_BASE
 + 0x1020)

	)

433 
	#GPIO_W9
 (
GPIO_PORT_BASE
 + 0x1024)

	)

434 
	#GPIO_W10
 (
GPIO_PORT_BASE
 + 0x1028)

	)

435 
	#GPIO_W11
 (
GPIO_PORT_BASE
 + 0x102C)

	)

436 
	#GPIO_W12
 (
GPIO_PORT_BASE
 + 0x1030)

	)

437 
	#GPIO_W13
 (
GPIO_PORT_BASE
 + 0x1034)

	)

438 
	#GPIO_W14
 (
GPIO_PORT_BASE
 + 0x1038)

	)

439 
	#GPIO_W15
 (
GPIO_PORT_BASE
 + 0x103C)

	)

440 
	#GPIO_W16
 (
GPIO_PORT_BASE
 + 0x1040)

	)

441 
	#GPIO_W17
 (
GPIO_PORT_BASE
 + 0x1044)

	)

442 
	#GPIO_W18
 (
GPIO_PORT_BASE
 + 0x1048)

	)

443 
	#GPIO_W19
 (
GPIO_PORT_BASE
 + 0x104C)

	)

444 
	#GPIO_W20
 (
GPIO_PORT_BASE
 + 0x1050)

	)

445 
	#GPIO_W21
 (
GPIO_PORT_BASE
 + 0x1054)

	)

446 
	#GPIO_W22
 (
GPIO_PORT_BASE
 + 0x1058)

	)

447 
	#GPIO_W23
 (
GPIO_PORT_BASE
 + 0x105C)

	)

448 
	#GPIO_W24
 (
GPIO_PORT_BASE
 + 0x1060)

	)

449 
	#GPIO_W25
 (
GPIO_PORT_BASE
 + 0x1064)

	)

450 
	#GPIO_W26
 (
GPIO_PORT_BASE
 + 0x1068)

	)

451 
	#GPIO_W27
 (
GPIO_PORT_BASE
 + 0x106C)

	)

452 
	#GPIO_W28
 (
GPIO_PORT_BASE
 + 0x1070)

	)

453 
	#GPIO_W29
 (
GPIO_PORT_BASE
 + 0x1074)

	)

454 
	#GPIO_W30
 (
GPIO_PORT_BASE
 + 0x1078)

	)

455 
	#GPIO_W31
 (
GPIO_PORT_BASE
 + 0x107C)

	)

458 
	#GPIO_W32
 (
GPIO_PORT_BASE
 + 0x1080)

	)

459 
	#GPIO_W33
 (
GPIO_PORT_BASE
 + 0x1084)

	)

460 
	#GPIO_W34
 (
GPIO_PORT_BASE
 + 0x1088)

	)

461 
	#GPIO_W35
 (
GPIO_PORT_BASE
 + 0x108C)

	)

462 
	#GPIO_W36
 (
GPIO_PORT_BASE
 + 0x1090)

	)

463 
	#GPIO_W37
 (
GPIO_PORT_BASE
 + 0x1094)

	)

464 
	#GPIO_W38
 (
GPIO_PORT_BASE
 + 0x1098)

	)

465 
	#GPIO_W39
 (
GPIO_PORT_BASE
 + 0x109C)

	)

466 
	#GPIO_W40
 (
GPIO_PORT_BASE
 + 0x10A0)

	)

467 
	#GPIO_W41
 (
GPIO_PORT_BASE
 + 0x10A4)

	)

468 
	#GPIO_W42
 (
GPIO_PORT_BASE
 + 0x10A8)

	)

469 
	#GPIO_W43
 (
GPIO_PORT_BASE
 + 0x10AC)

	)

470 
	#GPIO_W44
 (
GPIO_PORT_BASE
 + 0x10B0)

	)

471 
	#GPIO_W45
 (
GPIO_PORT_BASE
 + 0x10B4)

	)

472 
	#GPIO_W46
 (
GPIO_PORT_BASE
 + 0x10B8)

	)

473 
	#GPIO_W47
 (
GPIO_PORT_BASE
 + 0x10BC)

	)

474 
	#GPIO_W48
 (
GPIO_PORT_BASE
 + 0x10C0)

	)

475 
	#GPIO_W49
 (
GPIO_PORT_BASE
 + 0x10C4)

	)

476 
	#GPIO_W50
 (
GPIO_PORT_BASE
 + 0x10C8)

	)

477 
	#GPIO_W51
 (
GPIO_PORT_BASE
 + 0x10CC)

	)

478 
	#GPIO_W52
 (
GPIO_PORT_BASE
 + 0x10D0)

	)

479 
	#GPIO_W53
 (
GPIO_PORT_BASE
 + 0x10D4)

	)

480 
	#GPIO_W54
 (
GPIO_PORT_BASE
 + 0x10D8)

	)

481 
	#GPIO_W55
 (
GPIO_PORT_BASE
 + 0x10DC)

	)

482 
	#GPIO_W56
 (
GPIO_PORT_BASE
 + 0x10E0)

	)

483 
	#GPIO_W57
 (
GPIO_PORT_BASE
 + 0x10E4)

	)

484 
	#GPIO_W58
 (
GPIO_PORT_BASE
 + 0x10E8)

	)

485 
	#GPIO_W59
 (
GPIO_PORT_BASE
 + 0x10EC)

	)

486 
	#GPIO_W60
 (
GPIO_PORT_BASE
 + 0x10F0)

	)

487 
	#GPIO_W61
 (
GPIO_PORT_BASE
 + 0x10F4)

	)

488 
	#GPIO_W62
 (
GPIO_PORT_BASE
 + 0x10F8)

	)

489 
	#GPIO_W63
 (
GPIO_PORT_BASE
 + 0x10FC)

	)

492 
	#GPIO_W64
 (
GPIO_PORT_BASE
 + 0x1100)

	)

493 
	#GPIO_W65
 (
GPIO_PORT_BASE
 + 0x1104)

	)

494 
	#GPIO_W66
 (
GPIO_PORT_BASE
 + 0x1108)

	)

495 
	#GPIO_W67
 (
GPIO_PORT_BASE
 + 0x110C)

	)

496 
	#GPIO_W68
 (
GPIO_PORT_BASE
 + 0x1110)

	)

497 
	#GPIO_W69
 (
GPIO_PORT_BASE
 + 0x1114)

	)

498 
	#GPIO_W70
 (
GPIO_PORT_BASE
 + 0x1118)

	)

499 
	#GPIO_W71
 (
GPIO_PORT_BASE
 + 0x111C)

	)

500 
	#GPIO_W72
 (
GPIO_PORT_BASE
 + 0x1120)

	)

501 
	#GPIO_W73
 (
GPIO_PORT_BASE
 + 0x1124)

	)

502 
	#GPIO_W74
 (
GPIO_PORT_BASE
 + 0x1128)

	)

503 
	#GPIO_W75
 (
GPIO_PORT_BASE
 + 0x112C)

	)

504 
	#GPIO_W76
 (
GPIO_PORT_BASE
 + 0x1130)

	)

505 
	#GPIO_W77
 (
GPIO_PORT_BASE
 + 0x1134)

	)

506 
	#GPIO_W78
 (
GPIO_PORT_BASE
 + 0x1138)

	)

507 
	#GPIO_W79
 (
GPIO_PORT_BASE
 + 0x113C)

	)

508 
	#GPIO_W80
 (
GPIO_PORT_BASE
 + 0x1140)

	)

509 
	#GPIO_W81
 (
GPIO_PORT_BASE
 + 0x1144)

	)

510 
	#GPIO_W82
 (
GPIO_PORT_BASE
 + 0x1148)

	)

511 
	#GPIO_W83
 (
GPIO_PORT_BASE
 + 0x114C)

	)

512 
	#GPIO_W84
 (
GPIO_PORT_BASE
 + 0x1150)

	)

513 
	#GPIO_W85
 (
GPIO_PORT_BASE
 + 0x1154)

	)

514 
	#GPIO_W86
 (
GPIO_PORT_BASE
 + 0x1158)

	)

515 
	#GPIO_W87
 (
GPIO_PORT_BASE
 + 0x115C)

	)

516 
	#GPIO_W88
 (
GPIO_PORT_BASE
 + 0x1160)

	)

517 
	#GPIO_W89
 (
GPIO_PORT_BASE
 + 0x1164)

	)

518 
	#GPIO_W90
 (
GPIO_PORT_BASE
 + 0x1168)

	)

519 
	#GPIO_W91
 (
GPIO_PORT_BASE
 + 0x116C)

	)

520 
	#GPIO_W92
 (
GPIO_PORT_BASE
 + 0x1170)

	)

521 
	#GPIO_W93
 (
GPIO_PORT_BASE
 + 0x1174)

	)

522 
	#GPIO_W94
 (
GPIO_PORT_BASE
 + 0x1178)

	)

523 
	#GPIO_W95
 (
GPIO_PORT_BASE
 + 0x117C)

	)

526 
	#GPIO_W96
 (
GPIO_PORT_BASE
 + 0x1180)

	)

527 
	#GPIO_W97
 (
GPIO_PORT_BASE
 + 0x1184)

	)

528 
	#GPIO_W98
 (
GPIO_PORT_BASE
 + 0x1188)

	)

529 
	#GPIO_W99
 (
GPIO_PORT_BASE
 + 0x118C)

	)

530 
	#GPIO_W100
 (
GPIO_PORT_BASE
 + 0x1190)

	)

531 
	#GPIO_W101
 (
GPIO_PORT_BASE
 + 0x1194)

	)

532 
	#GPIO_W102
 (
GPIO_PORT_BASE
 + 0x1198)

	)

533 
	#GPIO_W103
 (
GPIO_PORT_BASE
 + 0x119C)

	)

534 
	#GPIO_W104
 (
GPIO_PORT_BASE
 + 0x11A0)

	)

535 
	#GPIO_W105
 (
GPIO_PORT_BASE
 + 0x11A4)

	)

536 
	#GPIO_W106
 (
GPIO_PORT_BASE
 + 0x11A8)

	)

537 
	#GPIO_W107
 (
GPIO_PORT_BASE
 + 0x11AC)

	)

538 
	#GPIO_W108
 (
GPIO_PORT_BASE
 + 0x11B0)

	)

539 
	#GPIO_W109
 (
GPIO_PORT_BASE
 + 0x11B4)

	)

540 
	#GPIO_W110
 (
GPIO_PORT_BASE
 + 0x11B8)

	)

541 
	#GPIO_W111
 (
GPIO_PORT_BASE
 + 0x11BC)

	)

542 
	#GPIO_W112
 (
GPIO_PORT_BASE
 + 0x11C0)

	)

543 
	#GPIO_W113
 (
GPIO_PORT_BASE
 + 0x11C4)

	)

544 
	#GPIO_W114
 (
GPIO_PORT_BASE
 + 0x11C8)

	)

545 
	#GPIO_W115
 (
GPIO_PORT_BASE
 + 0x11CC)

	)

546 
	#GPIO_W116
 (
GPIO_PORT_BASE
 + 0x11D0)

	)

547 
	#GPIO_W117
 (
GPIO_PORT_BASE
 + 0x11D4)

	)

548 
	#GPIO_W118
 (
GPIO_PORT_BASE
 + 0x11D8)

	)

549 
	#GPIO_W119
 (
GPIO_PORT_BASE
 + 0x11DC)

	)

550 
	#GPIO_W120
 (
GPIO_PORT_BASE
 + 0x11E0)

	)

551 
	#GPIO_W121
 (
GPIO_PORT_BASE
 + 0x11E4)

	)

552 
	#GPIO_W122
 (
GPIO_PORT_BASE
 + 0x11E8)

	)

553 
	#GPIO_W123
 (
GPIO_PORT_BASE
 + 0x11EC)

	)

554 
	#GPIO_W124
 (
GPIO_PORT_BASE
 + 0x11F0)

	)

555 
	#GPIO_W125
 (
GPIO_PORT_BASE
 + 0x11F4)

	)

556 
	#GPIO_W126
 (
GPIO_PORT_BASE
 + 0x11F8)

	)

557 
	#GPIO_W127
 (
GPIO_PORT_BASE
 + 0x11FC)

	)

560 
	#GPIO_W128
 (
GPIO_PORT_BASE
 + 0x1200)

	)

561 
	#GPIO_W129
 (
GPIO_PORT_BASE
 + 0x1204)

	)

562 
	#GPIO_W130
 (
GPIO_PORT_BASE
 + 0x1208)

	)

563 
	#GPIO_W131
 (
GPIO_PORT_BASE
 + 0x120C)

	)

564 
	#GPIO_W132
 (
GPIO_PORT_BASE
 + 0x1210)

	)

565 
	#GPIO_W133
 (
GPIO_PORT_BASE
 + 0x1214)

	)

566 
	#GPIO_W134
 (
GPIO_PORT_BASE
 + 0x1218)

	)

567 
	#GPIO_W135
 (
GPIO_PORT_BASE
 + 0x121C)

	)

568 
	#GPIO_W136
 (
GPIO_PORT_BASE
 + 0x1220)

	)

569 
	#GPIO_W137
 (
GPIO_PORT_BASE
 + 0x1224)

	)

570 
	#GPIO_W138
 (
GPIO_PORT_BASE
 + 0x1228)

	)

571 
	#GPIO_W139
 (
GPIO_PORT_BASE
 + 0x122C)

	)

572 
	#GPIO_W140
 (
GPIO_PORT_BASE
 + 0x1230)

	)

573 
	#GPIO_W141
 (
GPIO_PORT_BASE
 + 0x1234)

	)

574 
	#GPIO_W142
 (
GPIO_PORT_BASE
 + 0x1238)

	)

575 
	#GPIO_W143
 (
GPIO_PORT_BASE
 + 0x123C)

	)

576 
	#GPIO_W144
 (
GPIO_PORT_BASE
 + 0x1240)

	)

577 
	#GPIO_W145
 (
GPIO_PORT_BASE
 + 0x1244)

	)

578 
	#GPIO_W146
 (
GPIO_PORT_BASE
 + 0x1248)

	)

579 
	#GPIO_W147
 (
GPIO_PORT_BASE
 + 0x124C)

	)

580 
	#GPIO_W148
 (
GPIO_PORT_BASE
 + 0x1250)

	)

581 
	#GPIO_W149
 (
GPIO_PORT_BASE
 + 0x1254)

	)

582 
	#GPIO_W150
 (
GPIO_PORT_BASE
 + 0x1258)

	)

583 
	#GPIO_W151
 (
GPIO_PORT_BASE
 + 0x125C)

	)

584 
	#GPIO_W152
 (
GPIO_PORT_BASE
 + 0x1260)

	)

585 
	#GPIO_W153
 (
GPIO_PORT_BASE
 + 0x1264)

	)

586 
	#GPIO_W154
 (
GPIO_PORT_BASE
 + 0x1268)

	)

587 
	#GPIO_W155
 (
GPIO_PORT_BASE
 + 0x126C)

	)

588 
	#GPIO_W156
 (
GPIO_PORT_BASE
 + 0x1270)

	)

589 
	#GPIO_W157
 (
GPIO_PORT_BASE
 + 0x1274)

	)

590 
	#GPIO_W158
 (
GPIO_PORT_BASE
 + 0x1278)

	)

591 
	#GPIO_W159
 (
GPIO_PORT_BASE
 + 0x127C)

	)

594 
	#GPIO_W160
 (
GPIO_PORT_BASE
 + 0x1280)

	)

595 
	#GPIO_W161
 (
GPIO_PORT_BASE
 + 0x1284)

	)

596 
	#GPIO_W162
 (
GPIO_PORT_BASE
 + 0x1288)

	)

597 
	#GPIO_W163
 (
GPIO_PORT_BASE
 + 0x128C)

	)

598 
	#GPIO_W164
 (
GPIO_PORT_BASE
 + 0x1290)

	)

599 
	#GPIO_W165
 (
GPIO_PORT_BASE
 + 0x1294)

	)

600 
	#GPIO_W166
 (
GPIO_PORT_BASE
 + 0x1298)

	)

601 
	#GPIO_W167
 (
GPIO_PORT_BASE
 + 0x129C)

	)

602 
	#GPIO_W168
 (
GPIO_PORT_BASE
 + 0x12A0)

	)

603 
	#GPIO_W169
 (
GPIO_PORT_BASE
 + 0x12A4)

	)

604 
	#GPIO_W170
 (
GPIO_PORT_BASE
 + 0x12A8)

	)

605 
	#GPIO_W171
 (
GPIO_PORT_BASE
 + 0x12AC)

	)

606 
	#GPIO_W172
 (
GPIO_PORT_BASE
 + 0x12B0)

	)

607 
	#GPIO_W173
 (
GPIO_PORT_BASE
 + 0x12B4)

	)

608 
	#GPIO_W174
 (
GPIO_PORT_BASE
 + 0x12B8)

	)

609 
	#GPIO_W175
 (
GPIO_PORT_BASE
 + 0x12BC)

	)

610 
	#GPIO_W176
 (
GPIO_PORT_BASE
 + 0x12C0)

	)

611 
	#GPIO_W177
 (
GPIO_PORT_BASE
 + 0x12C4)

	)

612 
	#GPIO_W178
 (
GPIO_PORT_BASE
 + 0x12C8)

	)

613 
	#GPIO_W179
 (
GPIO_PORT_BASE
 + 0x12CC)

	)

614 
	#GPIO_W180
 (
GPIO_PORT_BASE
 + 0x12D0)

	)

615 
	#GPIO_W181
 (
GPIO_PORT_BASE
 + 0x12D4)

	)

616 
	#GPIO_W182
 (
GPIO_PORT_BASE
 + 0x12D8)

	)

617 
	#GPIO_W183
 (
GPIO_PORT_BASE
 + 0x12DC)

	)

618 
	#GPIO_W184
 (
GPIO_PORT_BASE
 + 0x12E0)

	)

619 
	#GPIO_W185
 (
GPIO_PORT_BASE
 + 0x12E4)

	)

620 
	#GPIO_W186
 (
GPIO_PORT_BASE
 + 0x12E8)

	)

621 
	#GPIO_W187
 (
GPIO_PORT_BASE
 + 0x12EC)

	)

622 
	#GPIO_W188
 (
GPIO_PORT_BASE
 + 0x12F0)

	)

623 
	#GPIO_W189
 (
GPIO_PORT_BASE
 + 0x12F4)

	)

624 
	#GPIO_W190
 (
GPIO_PORT_BASE
 + 0x12F8)

	)

625 
	#GPIO_W191
 (
GPIO_PORT_BASE
 + 0x12FC)

	)

628 
	#GPIO_W192
 (
GPIO_PORT_BASE
 + 0x1300)

	)

629 
	#GPIO_W193
 (
GPIO_PORT_BASE
 + 0x1304)

	)

630 
	#GPIO_W194
 (
GPIO_PORT_BASE
 + 0x1308)

	)

631 
	#GPIO_W195
 (
GPIO_PORT_BASE
 + 0x130C)

	)

632 
	#GPIO_W196
 (
GPIO_PORT_BASE
 + 0x1310)

	)

633 
	#GPIO_W197
 (
GPIO_PORT_BASE
 + 0x1314)

	)

634 
	#GPIO_W198
 (
GPIO_PORT_BASE
 + 0x1318)

	)

635 
	#GPIO_W199
 (
GPIO_PORT_BASE
 + 0x131C)

	)

636 
	#GPIO_W200
 (
GPIO_PORT_BASE
 + 0x1320)

	)

637 
	#GPIO_W201
 (
GPIO_PORT_BASE
 + 0x1324)

	)

638 
	#GPIO_W202
 (
GPIO_PORT_BASE
 + 0x1328)

	)

639 
	#GPIO_W203
 (
GPIO_PORT_BASE
 + 0x132C)

	)

640 
	#GPIO_W204
 (
GPIO_PORT_BASE
 + 0x1330)

	)

641 
	#GPIO_W205
 (
GPIO_PORT_BASE
 + 0x1334)

	)

642 
	#GPIO_W206
 (
GPIO_PORT_BASE
 + 0x1338)

	)

643 
	#GPIO_W207
 (
GPIO_PORT_BASE
 + 0x133C)

	)

644 
	#GPIO_W208
 (
GPIO_PORT_BASE
 + 0x1340)

	)

645 
	#GPIO_W209
 (
GPIO_PORT_BASE
 + 0x1344)

	)

646 
	#GPIO_W210
 (
GPIO_PORT_BASE
 + 0x1348)

	)

647 
	#GPIO_W211
 (
GPIO_PORT_BASE
 + 0x134C)

	)

648 
	#GPIO_W212
 (
GPIO_PORT_BASE
 + 0x1350)

	)

649 
	#GPIO_W213
 (
GPIO_PORT_BASE
 + 0x1354)

	)

650 
	#GPIO_W214
 (
GPIO_PORT_BASE
 + 0x1358)

	)

651 
	#GPIO_W215
 (
GPIO_PORT_BASE
 + 0x135C)

	)

652 
	#GPIO_W216
 (
GPIO_PORT_BASE
 + 0x1360)

	)

653 
	#GPIO_W217
 (
GPIO_PORT_BASE
 + 0x1364)

	)

654 
	#GPIO_W218
 (
GPIO_PORT_BASE
 + 0x1368)

	)

655 
	#GPIO_W219
 (
GPIO_PORT_BASE
 + 0x136C)

	)

656 
	#GPIO_W220
 (
GPIO_PORT_BASE
 + 0x1370)

	)

657 
	#GPIO_W221
 (
GPIO_PORT_BASE
 + 0x1374)

	)

658 
	#GPIO_W222
 (
GPIO_PORT_BASE
 + 0x1378)

	)

659 
	#GPIO_W223
 (
GPIO_PORT_BASE
 + 0x137C)

	)

662 
	#GPIO_W224
 (
GPIO_PORT_BASE
 + 0x1380)

	)

663 
	#GPIO_W225
 (
GPIO_PORT_BASE
 + 0x1384)

	)

664 
	#GPIO_W226
 (
GPIO_PORT_BASE
 + 0x1388)

	)

665 
	#GPIO_W227
 (
GPIO_PORT_BASE
 + 0x138C)

	)

666 
	#GPIO_W228
 (
GPIO_PORT_BASE
 + 0x1390)

	)

667 
	#GPIO_W229
 (
GPIO_PORT_BASE
 + 0x1394)

	)

668 
	#GPIO_W230
 (
GPIO_PORT_BASE
 + 0x1398)

	)

669 
	#GPIO_W231
 (
GPIO_PORT_BASE
 + 0x139C)

	)

670 
	#GPIO_W232
 (
GPIO_PORT_BASE
 + 0x13A0)

	)

671 
	#GPIO_W233
 (
GPIO_PORT_BASE
 + 0x13A4)

	)

672 
	#GPIO_W234
 (
GPIO_PORT_BASE
 + 0x13A8)

	)

673 
	#GPIO_W235
 (
GPIO_PORT_BASE
 + 0x13AC)

	)

674 
	#GPIO_W236
 (
GPIO_PORT_BASE
 + 0x13B0)

	)

675 
	#GPIO_W237
 (
GPIO_PORT_BASE
 + 0x13B4)

	)

676 
	#GPIO_W238
 (
GPIO_PORT_BASE
 + 0x13B8)

	)

677 
	#GPIO_W239
 (
GPIO_PORT_BASE
 + 0x13BC)

	)

678 
	#GPIO_W240
 (
GPIO_PORT_BASE
 + 0x13C0)

	)

679 
	#GPIO_W241
 (
GPIO_PORT_BASE
 + 0x13C4)

	)

680 
	#GPIO_W242
 (
GPIO_PORT_BASE
 + 0x13C8)

	)

681 
	#GPIO_W243
 (
GPIO_PORT_BASE
 + 0x13CC)

	)

682 
	#GPIO_W244
 (
GPIO_PORT_BASE
 + 0x13D0)

	)

683 
	#GPIO_W245
 (
GPIO_PORT_BASE
 + 0x13D4)

	)

684 
	#GPIO_W246
 (
GPIO_PORT_BASE
 + 0x13D8)

	)

685 
	#GPIO_W247
 (
GPIO_PORT_BASE
 + 0x13DC)

	)

686 
	#GPIO_W248
 (
GPIO_PORT_BASE
 + 0x13E0)

	)

687 
	#GPIO_W249
 (
GPIO_PORT_BASE
 + 0x13E4)

	)

688 
	#GPIO_W250
 (
GPIO_PORT_BASE
 + 0x13E8)

	)

689 
	#GPIO_W251
 (
GPIO_PORT_BASE
 + 0x13EC)

	)

690 
	#GPIO_W252
 (
GPIO_PORT_BASE
 + 0x13F0)

	)

691 
	#GPIO_W253
 (
GPIO_PORT_BASE
 + 0x13F4)

	)

692 
	#GPIO_W254
 (
GPIO_PORT_BASE
 + 0x13F8)

	)

693 
	#GPIO_W255
 (
GPIO_PORT_BASE
 + 0x13FC)

	)

696 
	#GPIO_DIR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00)

	)

697 
	#GPIO0_DIR
 
	`GPIO_DIR
(
GPIO0
)

	)

698 
	#GPIO1_DIR
 
	`GPIO_DIR
(
GPIO1
)

	)

699 
	#GPIO2_DIR
 
	`GPIO_DIR
(
GPIO2
)

	)

700 
	#GPIO3_DIR
 
	`GPIO_DIR
(
GPIO3
)

	)

701 
	#GPIO4_DIR
 
	`GPIO_DIR
(
GPIO4
)

	)

702 
	#GPIO5_DIR
 
	`GPIO_DIR
(
GPIO5
)

	)

703 
	#GPIO6_DIR
 
	`GPIO_DIR
(
GPIO6
)

	)

704 
	#GPIO7_DIR
 
	`GPIO_DIR
(
GPIO7
)

	)

707 
	#GPIO_MASK
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x80)

	)

708 
	#GPIO0_MASK
 
	`GPIO_MASK
(
GPIO0
)

	)

709 
	#GPIO1_MASK
 
	`GPIO_MASK
(
GPIO1
)

	)

710 
	#GPIO2_MASK
 
	`GPIO_MASK
(
GPIO2
)

	)

711 
	#GPIO3_MASK
 
	`GPIO_MASK
(
GPIO3
)

	)

712 
	#GPIO4_MASK
 
	`GPIO_MASK
(
GPIO4
)

	)

713 
	#GPIO5_MASK
 
	`GPIO_MASK
(
GPIO5
)

	)

714 
	#GPIO6_MASK
 
	`GPIO_MASK
(
GPIO6
)

	)

715 
	#GPIO7_MASK
 
	`GPIO_MASK
(
GPIO7
)

	)

718 
	#GPIO_PIN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x100)

	)

719 
	#GPIO0_PIN
 
	`GPIO_PIN
(
GPIO0
)

	)

720 
	#GPIO1_PIN
 
	`GPIO_PIN
(
GPIO1
)

	)

721 
	#GPIO2_PIN
 
	`GPIO_PIN
(
GPIO2
)

	)

722 
	#GPIO3_PIN
 
	`GPIO_PIN
(
GPIO3
)

	)

723 
	#GPIO4_PIN
 
	`GPIO_PIN
(
GPIO4
)

	)

724 
	#GPIO5_PIN
 
	`GPIO_PIN
(
GPIO5
)

	)

725 
	#GPIO6_PIN
 
	`GPIO_PIN
(
GPIO6
)

	)

726 
	#GPIO7_PIN
 
	`GPIO_PIN
(
GPIO7
)

	)

729 
	#GPIO_MPIN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x180)

	)

730 
	#GPIO0_MPIN
 
	`GPIO_MPIN
(
GPIO0
)

	)

731 
	#GPIO1_MPIN
 
	`GPIO_MPIN
(
GPIO1
)

	)

732 
	#GPIO2_MPIN
 
	`GPIO_MPIN
(
GPIO2
)

	)

733 
	#GPIO3_MPIN
 
	`GPIO_MPIN
(
GPIO3
)

	)

734 
	#GPIO4_MPIN
 
	`GPIO_MPIN
(
GPIO4
)

	)

735 
	#GPIO5_MPIN
 
	`GPIO_MPIN
(
GPIO5
)

	)

736 
	#GPIO6_MPIN
 
	`GPIO_MPIN
(
GPIO6
)

	)

737 
	#GPIO7_MPIN
 
	`GPIO_MPIN
(
GPIO7
)

	)

740 
	#GPIO_SET
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x200)

	)

741 
	#GPIO0_SET
 
	`GPIO_SET
(
GPIO0
)

	)

742 
	#GPIO1_SET
 
	`GPIO_SET
(
GPIO1
)

	)

743 
	#GPIO2_SET
 
	`GPIO_SET
(
GPIO2
)

	)

744 
	#GPIO3_SET
 
	`GPIO_SET
(
GPIO3
)

	)

745 
	#GPIO4_SET
 
	`GPIO_SET
(
GPIO4
)

	)

746 
	#GPIO5_SET
 
	`GPIO_SET
(
GPIO5
)

	)

747 
	#GPIO6_SET
 
	`GPIO_SET
(
GPIO6
)

	)

748 
	#GPIO7_SET
 
	`GPIO_SET
(
GPIO7
)

	)

751 
	#GPIO_CLR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x280)

	)

752 
	#GPIO0_CLR
 
	`GPIO_CLR
(
GPIO0
)

	)

753 
	#GPIO1_CLR
 
	`GPIO_CLR
(
GPIO1
)

	)

754 
	#GPIO2_CLR
 
	`GPIO_CLR
(
GPIO2
)

	)

755 
	#GPIO3_CLR
 
	`GPIO_CLR
(
GPIO3
)

	)

756 
	#GPIO4_CLR
 
	`GPIO_CLR
(
GPIO4
)

	)

757 
	#GPIO5_CLR
 
	`GPIO_CLR
(
GPIO5
)

	)

758 
	#GPIO6_CLR
 
	`GPIO_CLR
(
GPIO6
)

	)

759 
	#GPIO7_CLR
 
	`GPIO_CLR
(
GPIO7
)

	)

762 
	#GPIO_NOT
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x300)

	)

763 
	#GPIO0_NOT
 
	`GPIO_NOT
(
GPIO0
)

	)

764 
	#GPIO1_NOT
 
	`GPIO_NOT
(
GPIO1
)

	)

765 
	#GPIO2_NOT
 
	`GPIO_NOT
(
GPIO2
)

	)

766 
	#GPIO3_NOT
 
	`GPIO_NOT
(
GPIO3
)

	)

767 
	#GPIO4_NOT
 
	`GPIO_NOT
(
GPIO4
)

	)

768 
	#GPIO5_NOT
 
	`GPIO_NOT
(
GPIO5
)

	)

769 
	#GPIO6_NOT
 
	`GPIO_NOT
(
GPIO6
)

	)

770 
	#GPIO7_NOT
 
	`GPIO_NOT
(
GPIO7
)

	)

774 
BEGIN_DECLS


776 
gpio_£t
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
);

777 
gpio_˛ór
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
);

778 
gpio_toggÀ
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
);

780 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc43xx/i2c.h

34 #i‚de‡
LPC43XX_I2C_H


35 
	#LPC43XX_I2C_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

45 
	#I2C0
 
I2C0_BASE


	)

46 
	#I2C1
 
I2C1_BASE


	)

51 
	#I2C_CONSET
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x000)

	)

52 
	#I2C0_CONSET
 
	`I2C_CONSET
(
I2C0
)

	)

53 
	#I2C1_CONSET
 
	`I2C_CONSET
(
I2C1
)

	)

56 
	#I2C_STAT
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x004)

	)

57 
	#I2C0_STAT
 
	`I2C_STAT
(
I2C0
)

	)

58 
	#I2C1_STAT
 
	`I2C_STAT
(
I2C1
)

	)

61 
	#I2C_DAT
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x008)

	)

62 
	#I2C0_DAT
 
	`I2C_DAT
(
I2C0
)

	)

63 
	#I2C1_DAT
 
	`I2C_DAT
(
I2C1
)

	)

66 
	#I2C_ADR0
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00C)

	)

67 
	#I2C0_ADR0
 
	`I2C_ADR0
(
I2C0
)

	)

68 
	#I2C1_ADR0
 
	`I2C_ADR0
(
I2C1
)

	)

71 
	#I2C_SCLH
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x010)

	)

72 
	#I2C0_SCLH
 
	`I2C_SCLH
(
I2C0
)

	)

73 
	#I2C1_SCLH
 
	`I2C_SCLH
(
I2C1
)

	)

76 
	#I2C_SCLL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x014)

	)

77 
	#I2C0_SCLL
 
	`I2C_SCLL
(
I2C0
)

	)

78 
	#I2C1_SCLL
 
	`I2C_SCLL
(
I2C1
)

	)

81 
	#I2C_CONCLR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x018)

	)

82 
	#I2C0_CONCLR
 
	`I2C_CONCLR
(
I2C0
)

	)

83 
	#I2C1_CONCLR
 
	`I2C_CONCLR
(
I2C1
)

	)

86 
	#I2C_MMCTRL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x01C)

	)

87 
	#I2C0_MMCTRL
 
	`I2C_MMCTRL
(
I2C0
)

	)

88 
	#I2C1_MMCTRL
 
	`I2C_MMCTRL
(
I2C1
)

	)

91 
	#I2C_ADR1
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x020)

	)

92 
	#I2C0_ADR1
 
	`I2C_ADR1
(
I2C0
)

	)

93 
	#I2C1_ADR1
 
	`I2C_ADR1
(
I2C1
)

	)

96 
	#I2C_ADR2
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x024)

	)

97 
	#I2C0_ADR2
 
	`I2C_ADR2
(
I2C0
)

	)

98 
	#I2C1_ADR2
 
	`I2C_ADR2
(
I2C1
)

	)

101 
	#I2C_ADR3
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x028)

	)

102 
	#I2C0_ADR3
 
	`I2C_ADR3
(
I2C0
)

	)

103 
	#I2C1_ADR3
 
	`I2C_ADR3
(
I2C1
)

	)

106 
	#I2C_DATA_BUFFER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x02C)

	)

107 
	#I2C0_DATA_BUFFER
 
	`I2C_DATA_BUFFER
(
I2C0
)

	)

108 
	#I2C1_DATA_BUFFER
 
	`I2C_DATA_BUFFER
(
I2C1
)

	)

111 
	#I2C_MASK0
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x030)

	)

112 
	#I2C0_MASK0
 
	`I2C_MASK0
(
I2C0
)

	)

113 
	#I2C1_MASK0
 
	`I2C_MASK0
(
I2C1
)

	)

116 
	#I2C_MASK1
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x034)

	)

117 
	#I2C0_MASK1
 
	`I2C_MASK1
(
I2C0
)

	)

118 
	#I2C1_MASK1
 
	`I2C_MASK1
(
I2C1
)

	)

121 
	#I2C_MASK2
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x038)

	)

122 
	#I2C0_MASK2
 
	`I2C_MASK2
(
I2C0
)

	)

123 
	#I2C1_MASK2
 
	`I2C_MASK2
(
I2C1
)

	)

126 
	#I2C_MASK3
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x03C)

	)

127 
	#I2C0_MASK3
 
	`I2C_MASK3
(
I2C0
)

	)

128 
	#I2C1_MASK3
 
	`I2C_MASK3
(
I2C1
)

	)

132 
	#I2C_CONCLR_AAC
 (1 << 2Ë

	)

133 
	#I2C_CONCLR_SIC
 (1 << 3Ë

	)

134 
	#I2C_CONCLR_STAC
 (1 << 5Ë

	)

135 
	#I2C_CONCLR_I2ENC
 (1 << 6Ë

	)

139 
	#I2C_CONSET_AA
 (1 << 2Ë

	)

140 
	#I2C_CONSET_SI
 (1 << 3Ë

	)

141 
	#I2C_CONSET_STO
 (1 << 4Ë

	)

142 
	#I2C_CONSET_STA
 (1 << 5Ë

	)

143 
	#I2C_CONSET_I2EN
 (1 << 6Ë

	)

147 
	#I2C_WRITE
 0

	)

148 
	#I2C_READ
 1

	)

152 
BEGIN_DECLS


154 
i2c0_öô
(c⁄° 
uöt16_t
 
duty_cy˛e_cou¡
);

155 
i2c0_tx_°¨t
();

156 
i2c0_tx_byã
(
uöt8_t
 
byã
);

157 
uöt8_t
 
i2c0_rx_byã
();

158 
i2c0_°›
();

160 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc43xx/i2s.h

34 #i‚de‡
LPC43XX_I2S_H


35 
	#LPC43XX_I2S_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

45 
	#I2S0
 
I2S0_BASE


	)

46 
	#I2S1
 
I2S1_BASE


	)

51 
	#I2S_DAO
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x000)

	)

52 
	#I2S0_DAO
 
	`I2S_DAO
(
I2S0
)

	)

53 
	#I2S1_DAO
 
	`I2S_DAO
(
I2S1
)

	)

56 
	#I2S_DAI
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x004)

	)

57 
	#I2S0_DAI
 
	`I2S_DAI
(
I2S0
)

	)

58 
	#I2S1_DAI
 
	`I2S_DAI
(
I2S1
)

	)

61 
	#I2S_TXFIFO
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x008)

	)

62 
	#I2S0_TXFIFO
 
	`I2S_TXFIFO
(
I2S0
)

	)

63 
	#I2S1_TXFIFO
 
	`I2S_TXFIFO
(
I2S1
)

	)

66 
	#I2S_RXFIFO
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00C)

	)

67 
	#I2S0_RXFIFO
 
	`I2S_RXFIFO
(
I2S0
)

	)

68 
	#I2S1_RXFIFO
 
	`I2S_RXFIFO
(
I2S1
)

	)

71 
	#I2S_STATE
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x010)

	)

72 
	#I2S0_STATE
 
	`I2S_STATE
(
I2S0
)

	)

73 
	#I2S1_STATE
 
	`I2S_STATE
(
I2S1
)

	)

76 
	#I2S_DMA1
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x014)

	)

77 
	#I2S0_DMA1
 
	`I2S_DMA1
(
I2S0
)

	)

78 
	#I2S1_DMA1
 
	`I2S_DMA1
(
I2S1
)

	)

81 
	#I2S_DMA2
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x018)

	)

82 
	#I2S0_DMA2
 
	`I2S_DMA2
(
I2S0
)

	)

83 
	#I2S1_DMA2
 
	`I2S_DMA2
(
I2S1
)

	)

86 
	#I2S_IRQ
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x01C)

	)

87 
	#I2S0_IRQ
 
	`I2S_IRQ
(
I2S0
)

	)

88 
	#I2S1_IRQ
 
	`I2S_IRQ
(
I2S1
)

	)

91 
	#I2S_TXRATE
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x020)

	)

92 
	#I2S0_TXRATE
 
	`I2S_TXRATE
(
I2S0
)

	)

93 
	#I2S1_TXRATE
 
	`I2S_TXRATE
(
I2S1
)

	)

96 
	#I2S_RXRATE
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x024)

	)

97 
	#I2S0_RXRATE
 
	`I2S_RXRATE
(
I2S0
)

	)

98 
	#I2S1_RXRATE
 
	`I2S_RXRATE
(
I2S1
)

	)

101 
	#I2S_TXBITRATE
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x028)

	)

102 
	#I2S0_TXBITRATE
 
	`I2S_TXBITRATE
(
I2S0
)

	)

103 
	#I2S1_TXBITRATE
 
	`I2S_TXBITRATE
(
I2S1
)

	)

106 
	#I2S_RXBITRATE
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x02C)

	)

107 
	#I2S0_RXBITRATE
 
	`I2S_RXBITRATE
(
I2S0
)

	)

108 
	#I2S1_RXBITRATE
 
	`I2S_RXBITRATE
(
I2S1
)

	)

111 
	#I2S_TXMODE
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x030)

	)

112 
	#I2S0_TXMODE
 
	`I2S_TXMODE
(
I2S0
)

	)

113 
	#I2S1_TXMODE
 
	`I2S_TXMODE
(
I2S1
)

	)

116 
	#I2S_RXMODE
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x034)

	)

117 
	#I2S0_RXMODE
 
	`I2S_RXMODE
(
I2S0
)

	)

118 
	#I2S1_RXMODE
 
	`I2S_RXMODE
(
I2S1
)

	)

	@libopencm3/include/libopencm3/lpc43xx/ipc.h

20 #i‚de‡
LPC43XX_IPC_H


21 
	#LPC43XX_IPC_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

26 
ùc_hÆt_m0
();

28 
ùc_°¨t_m0
(
uöt32_t
 
cm0_ba£addr
);

	@libopencm3/include/libopencm3/lpc43xx/m0/nvic.h

6 #i‚de‡
LIBOPENCM3_LPC43xx_M0_NVIC_H


7 
	#LIBOPENCM3_LPC43xx_M0_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_USART0_IRQ
 24

	)

17 
	#NVIC_UART1_IRQ
 25

	)

18 
	#NVIC_USART2_OR_C_CAN1_IRQ
 26

	)

19 
	#NVIC_USART3_IRQ
 27

	)

20 
	#NVIC_SPI_OR_DAC_IRQ
 20

	)

21 
	#NVIC_ADC1_IRQ
 21

	)

22 
	#NVIC_SSP0_OR_SSP1_IRQ
 22

	)

23 
	#NVIC_EVENTROUTER_IRQ
 23

	)

24 
	#NVIC_I2S0_OR_I2S1_IRQ
 28

	)

25 
	#NVIC_C_CAN0_IRQ
 29

	)

26 
	#NVIC_M4CORE_IRQ
 1

	)

27 
	#NVIC_RTC_IRQ
 0

	)

28 
	#NVIC_DMA_IRQ
 2

	)

29 
	#NVIC_ETHERNET_IRQ
 5

	)

30 
	#NVIC_FLASHEEPROMAT_IRQ
 4

	)

31 
	#NVIC_LCD_IRQ
 7

	)

32 
	#NVIC_SDIO_IRQ
 6

	)

33 
	#NVIC_USB1_IRQ
 9

	)

34 
	#NVIC_USB0_IRQ
 8

	)

35 
	#NVIC_RITIMER_OR_WWDT_IRQ
 11

	)

36 
	#NVIC_SCT_IRQ
 10

	)

37 
	#NVIC_GINT1_IRQ
 13

	)

38 
	#NVIC_TIMER0_IRQ
 12

	)

39 
	#NVIC_TIMER3_IRQ
 15

	)

40 
	#NVIC_PIN_INT4_IRQ
 14

	)

41 
	#NVIC_ADC0_IRQ
 17

	)

42 
	#NVIC_MCPWM_IRQ
 16

	)

43 
	#NVIC_SGPIO_IRQ
 19

	)

44 
	#NVIC_I2C0_OR_IRC1_IRQ
 18

	)

46 
	#NVIC_IRQ_COUNT
 30

	)

55 
BEGIN_DECLS


57 
ußπ0_i§
();

58 
u¨t1_i§
();

59 
ußπ2_‹_c_ˇn1_i§
();

60 
ußπ3_i§
();

61 
•i_‹_dac_i§
();

62 
adc1_i§
();

63 
s•0_‹_s•1_i§
();

64 
evíåouãr_i§
();

65 
i2s0_‹_i2s1_i§
();

66 
c_ˇn0_i§
();

67 
m4c‹e_i§
();

68 
πc_i§
();

69 
dma_i§
();

70 
ëhî√t_i§
();

71 
Êashì¥om©_i§
();

72 
lcd_i§
();

73 
sdio_i§
();

74 
usb1_i§
();

75 
usb0_i§
();

76 
rôimî_‹_wwdt_i§
();

77 
s˘_i§
();

78 
göt1_i§
();

79 
timî0_i§
();

80 
timî3_i§
();

81 
pö_öt4_i§
();

82 
adc0_i§
();

83 
m˝wm_i§
();

84 
sgpio_i§
();

85 
i2c0_‹_úc1_i§
();

87 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc43xx/m4/nvic.h

6 #i‚de‡
LIBOPENCM3_LPC43xx_M4_NVIC_H


7 
	#LIBOPENCM3_LPC43xx_M4_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_EVENTROUTER_IRQ
 42

	)

17 
	#NVIC_C_CAN1_IRQ
 43

	)

18 
	#NVIC_WWDT_IRQ
 49

	)

19 
	#NVIC_QEI_IRQ
 52

	)

20 
	#NVIC_USART0_IRQ
 24

	)

21 
	#NVIC_UART1_IRQ
 25

	)

22 
	#NVIC_USART2_IRQ
 26

	)

23 
	#NVIC_USART3_IRQ
 27

	)

24 
	#NVIC_SPI_IRQ
 20

	)

25 
	#NVIC_ADC1_IRQ
 21

	)

26 
	#NVIC_SSP0_IRQ
 22

	)

27 
	#NVIC_SSP1_IRQ
 23

	)

28 
	#NVIC_ATIMER_IRQ
 46

	)

29 
	#NVIC_RTC_IRQ
 47

	)

30 
	#NVIC_I2S0_IRQ
 28

	)

31 
	#NVIC_I2S1_IRQ
 29

	)

32 
	#NVIC_GINT0_IRQ
 40

	)

33 
	#NVIC_GINT1_IRQ
 41

	)

34 
	#NVIC_M0CORE_IRQ
 1

	)

35 
	#NVIC_DAC_IRQ
 0

	)

36 
	#NVIC_DMA_IRQ
 2

	)

37 
	#NVIC_ETHERNET_IRQ
 5

	)

38 
	#NVIC_LCD_IRQ
 7

	)

39 
	#NVIC_SDIO_IRQ
 6

	)

40 
	#NVIC_USB1_IRQ
 9

	)

41 
	#NVIC_USB0_IRQ
 8

	)

42 
	#NVIC_C_CAN0_IRQ
 51

	)

43 
	#NVIC_PIN_INT7_IRQ
 39

	)

44 
	#NVIC_PIN_INT6_IRQ
 38

	)

45 
	#NVIC_RITIMER_IRQ
 11

	)

46 
	#NVIC_SCT_IRQ
 10

	)

47 
	#NVIC_TIMER1_IRQ
 13

	)

48 
	#NVIC_TIMER0_IRQ
 12

	)

49 
	#NVIC_TIMER3_IRQ
 15

	)

50 
	#NVIC_TIMER2_IRQ
 14

	)

51 
	#NVIC_ADC0_IRQ
 17

	)

52 
	#NVIC_MCPWM_IRQ
 16

	)

53 
	#NVIC_I2C1_IRQ
 19

	)

54 
	#NVIC_I2C0_IRQ
 18

	)

55 
	#NVIC_SGPIO_IRQ
 31

	)

56 
	#NVIC_SPIFI_IRQ
 30

	)

57 
	#NVIC_PIN_INT5_IRQ
 37

	)

58 
	#NVIC_PIN_INT4_IRQ
 36

	)

59 
	#NVIC_PIN_INT3_IRQ
 35

	)

60 
	#NVIC_PIN_INT2_IRQ
 34

	)

61 
	#NVIC_PIN_INT1_IRQ
 33

	)

62 
	#NVIC_PIN_INT0_IRQ
 32

	)

64 
	#NVIC_IRQ_COUNT
 53

	)

73 
BEGIN_DECLS


75 
evíåouãr_i§
();

76 
c_ˇn1_i§
();

77 
wwdt_i§
();

78 
qei_i§
();

79 
ußπ0_i§
();

80 
u¨t1_i§
();

81 
ußπ2_i§
();

82 
ußπ3_i§
();

83 
•i_i§
();

84 
adc1_i§
();

85 
s•0_i§
();

86 
s•1_i§
();

87 
©imî_i§
();

88 
πc_i§
();

89 
i2s0_i§
();

90 
i2s1_i§
();

91 
göt0_i§
();

92 
göt1_i§
();

93 
m0c‹e_i§
();

94 
dac_i§
();

95 
dma_i§
();

96 
ëhî√t_i§
();

97 
lcd_i§
();

98 
sdio_i§
();

99 
usb1_i§
();

100 
usb0_i§
();

101 
c_ˇn0_i§
();

102 
pö_öt7_i§
();

103 
pö_öt6_i§
();

104 
rôimî_i§
();

105 
s˘_i§
();

106 
timî1_i§
();

107 
timî0_i§
();

108 
timî3_i§
();

109 
timî2_i§
();

110 
adc0_i§
();

111 
m˝wm_i§
();

112 
i2c1_i§
();

113 
i2c0_i§
();

114 
sgpio_i§
();

115 
•ifi_i§
();

116 
pö_öt5_i§
();

117 
pö_öt4_i§
();

118 
pö_öt3_i§
();

119 
pö_öt2_i§
();

120 
pö_öt1_i§
();

121 
pö_öt0_i§
();

123 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc43xx/memorymap.h

21 #i‚de‡
LPC43XX_MEMORYMAP_H


22 
	#LPC43XX_MEMORYMAP_H


	)

24 
	~<lib›ícm3/cm3/comm⁄.h
>

29 
	#PERIPH_BASE_AHB
 (0x40000000U)

	)

30 
	#PERIPH_BASE_APB0
 (0x40080000U)

	)

31 
	#PERIPH_BASE_APB1
 (0x400A0000U)

	)

32 
	#PERIPH_BASE_APB2
 (0x400C0000U)

	)

33 
	#PERIPH_BASE_APB3
 (0x400E0000U)

	)

38 
	#SCT_BASE
 (
PERIPH_BASE_AHB
 + 0x00000)

	)

40 
	#GPDMA_BASE
 (
PERIPH_BASE_AHB
 + 0x02000)

	)

41 
	#SPIFI_BASE
 (
PERIPH_BASE_AHB
 + 0x03000)

	)

42 
	#SDIO_BASE
 (
PERIPH_BASE_AHB
 + 0x04000)

	)

43 
	#EMC_BASE
 (
PERIPH_BASE_AHB
 + 0x05000)

	)

44 
	#USB0_BASE
 (
PERIPH_BASE_AHB
 + 0x06000)

	)

45 
	#USB1_BASE
 (
PERIPH_BASE_AHB
 + 0x07000)

	)

46 
	#LCD_BASE
 (
PERIPH_BASE_AHB
 + 0x08000)

	)

48 
	#ETHERNET_BASE
 (
PERIPH_BASE_AHB
 + 0x10000)

	)

53 
	#ATIMER_BASE
 (0x40040000U)

	)

54 
	#BACKUP_REG_BASE
 (0x40041000U)

	)

55 
	#PMC_BASE
 (0x40042000U)

	)

56 
	#CREG_BASE
 (0x40043000U)

	)

57 
	#EVENTROUTER_BASE
 (0x40044000U)

	)

58 
	#OTP_BASE
 (0x40045000U)

	)

59 
	#RTC_BASE
 (0x40046000U)

	)

63 
	#CGU_BASE
 (0x40050000U)

	)

64 
	#CCU1_BASE
 (0x40051000U)

	)

65 
	#CCU2_BASE
 (0x40052000U)

	)

66 
	#RGU_BASE
 (0x40053000U)

	)

72 
	#WWDT_BASE
 (
PERIPH_BASE_APB0
 + 0x00000)

	)

73 
	#USART0_BASE
 (
PERIPH_BASE_APB0
 + 0x01000)

	)

74 
	#UART1_BASE
 (
PERIPH_BASE_APB0
 + 0x02000)

	)

75 
	#SSP0_BASE
 (
PERIPH_BASE_APB0
 + 0x03000)

	)

76 
	#TIMER0_BASE
 (
PERIPH_BASE_APB0
 + 0x04000)

	)

77 
	#TIMER1_BASE
 (
PERIPH_BASE_APB0
 + 0x05000)

	)

78 
	#SCU_BASE
 (
PERIPH_BASE_APB0
 + 0x06000)

	)

79 
	#GPIO_PIN_INTERRUPT_BASE
 (
PERIPH_BASE_APB0
 + 0x07000)

	)

80 
	#GPIO_GROUP0_INTERRUPT_BASE
 (
PERIPH_BASE_APB0
 + 0x08000)

	)

81 
	#GPIO_GROUP1_INTERRUPT_BASE
 (
PERIPH_BASE_APB0
 + 0x09000)

	)

87 
	#MCPWM_BASE
 (
PERIPH_BASE_APB1
 + 0x00000)

	)

88 
	#I2C0_BASE
 (
PERIPH_BASE_APB1
 + 0x01000)

	)

89 
	#I2S0_BASE
 (
PERIPH_BASE_APB1
 + 0x02000)

	)

90 
	#I2S1_BASE
 (
PERIPH_BASE_APB1
 + 0x03000)

	)

91 
	#C_CCAN1_BASE
 (
PERIPH_BASE_APB1
 + 0x04000)

	)

97 
	#RITIMER_BASE
 (
PERIPH_BASE_APB2
 + 0x00000)

	)

98 
	#USART2_BASE
 (
PERIPH_BASE_APB2
 + 0x01000)

	)

99 
	#USART3_BASE
 (
PERIPH_BASE_APB2
 + 0x02000)

	)

100 
	#TIMER2_BASE
 (
PERIPH_BASE_APB2
 + 0x03000)

	)

101 
	#TIMER3_BASE
 (
PERIPH_BASE_APB2
 + 0x04000)

	)

102 
	#SSP1_BASE
 (
PERIPH_BASE_APB2
 + 0x05000)

	)

103 
	#QEI_BASE
 (
PERIPH_BASE_APB2
 + 0x06000)

	)

104 
	#GIMA_BASE
 (
PERIPH_BASE_APB2
 + 0x07000)

	)

110 
	#I2C1_BASE
 (
PERIPH_BASE_APB3
 + 0x00000)

	)

111 
	#DAC_BASE
 (
PERIPH_BASE_APB3
 + 0x01000)

	)

112 
	#C_CAN0_BASE
 (
PERIPH_BASE_APB3
 + 0x02000)

	)

113 
	#ADC0_BASE
 (
PERIPH_BASE_APB3
 + 0x03000)

	)

114 
	#ADC1_BASE
 (
PERIPH_BASE_APB3
 + 0x04000)

	)

119 
	#AES_BASE
 (0x400F1000U)

	)

123 
	#GPIO_PORT_BASE
 (0x400F4000U)

	)

127 
	#SPI_PORT_BASE
 (0x40100000U)

	)

128 
	#SGPIO_PORT_BASE
 (0x40101000U)

	)

	@libopencm3/include/libopencm3/lpc43xx/rgu.h

34 #i‚de‡
LPC43XX_RGU_H


35 
	#LPC43XX_RGU_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

45 
	#RESET_CTRL0
 
	`MMIO32
(
RGU_BASE
 + 0x100)

	)

48 
	#RESET_CTRL1
 
	`MMIO32
(
RGU_BASE
 + 0x104)

	)

51 
	#RESET_STATUS0
 
	`MMIO32
(
RGU_BASE
 + 0x110)

	)

54 
	#RESET_STATUS1
 
	`MMIO32
(
RGU_BASE
 + 0x114)

	)

57 
	#RESET_STATUS2
 
	`MMIO32
(
RGU_BASE
 + 0x118)

	)

60 
	#RESET_STATUS3
 
	`MMIO32
(
RGU_BASE
 + 0x11C)

	)

63 
	#RESET_ACTIVE_STATUS0
 
	`MMIO32
(
RGU_BASE
 + 0x150)

	)

66 
	#RESET_ACTIVE_STATUS1
 
	`MMIO32
(
RGU_BASE
 + 0x154)

	)

69 
	#RESET_EXT_STAT0
 
	`MMIO32
(
RGU_BASE
 + 0x400)

	)

72 
	#RESET_EXT_STAT1
 
	`MMIO32
(
RGU_BASE
 + 0x404)

	)

75 
	#RESET_EXT_STAT2
 
	`MMIO32
(
RGU_BASE
 + 0x408)

	)

78 
	#RESET_EXT_STAT3
 
	`MMIO32
(
RGU_BASE
 + 0x40C)

	)

81 
	#RESET_EXT_STAT4
 
	`MMIO32
(
RGU_BASE
 + 0x410)

	)

84 
	#RESET_EXT_STAT5
 
	`MMIO32
(
RGU_BASE
 + 0x414)

	)

87 
	#RESET_EXT_STAT6
 
	`MMIO32
(
RGU_BASE
 + 0x418)

	)

90 
	#RESET_EXT_STAT7
 
	`MMIO32
(
RGU_BASE
 + 0x41C)

	)

93 
	#RESET_EXT_STAT8
 
	`MMIO32
(
RGU_BASE
 + 0x420)

	)

96 
	#RESET_EXT_STAT9
 
	`MMIO32
(
RGU_BASE
 + 0x424)

	)

99 
	#RESET_EXT_STAT10
 
	`MMIO32
(
RGU_BASE
 + 0x428)

	)

102 
	#RESET_EXT_STAT11
 
	`MMIO32
(
RGU_BASE
 + 0x42C)

	)

105 
	#RESET_EXT_STAT12
 
	`MMIO32
(
RGU_BASE
 + 0x430)

	)

108 
	#RESET_EXT_STAT13
 
	`MMIO32
(
RGU_BASE
 + 0x434)

	)

111 
	#RESET_EXT_STAT14
 
	`MMIO32
(
RGU_BASE
 + 0x438)

	)

114 
	#RESET_EXT_STAT15
 
	`MMIO32
(
RGU_BASE
 + 0x43C)

	)

117 
	#RESET_EXT_STAT16
 
	`MMIO32
(
RGU_BASE
 + 0x440)

	)

120 
	#RESET_EXT_STAT17
 
	`MMIO32
(
RGU_BASE
 + 0x444)

	)

123 
	#RESET_EXT_STAT18
 
	`MMIO32
(
RGU_BASE
 + 0x448)

	)

126 
	#RESET_EXT_STAT19
 
	`MMIO32
(
RGU_BASE
 + 0x44C)

	)

129 
	#RESET_EXT_STAT20
 
	`MMIO32
(
RGU_BASE
 + 0x450)

	)

132 
	#RESET_EXT_STAT21
 
	`MMIO32
(
RGU_BASE
 + 0x454)

	)

135 
	#RESET_EXT_STAT22
 
	`MMIO32
(
RGU_BASE
 + 0x458)

	)

138 
	#RESET_EXT_STAT23
 
	`MMIO32
(
RGU_BASE
 + 0x45C)

	)

141 
	#RESET_EXT_STAT24
 
	`MMIO32
(
RGU_BASE
 + 0x460)

	)

144 
	#RESET_EXT_STAT25
 
	`MMIO32
(
RGU_BASE
 + 0x464)

	)

147 
	#RESET_EXT_STAT26
 
	`MMIO32
(
RGU_BASE
 + 0x468)

	)

150 
	#RESET_EXT_STAT27
 
	`MMIO32
(
RGU_BASE
 + 0x46C)

	)

153 
	#RESET_EXT_STAT28
 
	`MMIO32
(
RGU_BASE
 + 0x470)

	)

156 
	#RESET_EXT_STAT29
 
	`MMIO32
(
RGU_BASE
 + 0x474)

	)

159 
	#RESET_EXT_STAT30
 
	`MMIO32
(
RGU_BASE
 + 0x478)

	)

162 
	#RESET_EXT_STAT31
 
	`MMIO32
(
RGU_BASE
 + 0x47C)

	)

165 
	#RESET_EXT_STAT32
 
	`MMIO32
(
RGU_BASE
 + 0x480)

	)

168 
	#RESET_EXT_STAT33
 
	`MMIO32
(
RGU_BASE
 + 0x484)

	)

171 
	#RESET_EXT_STAT34
 
	`MMIO32
(
RGU_BASE
 + 0x488)

	)

174 
	#RESET_EXT_STAT35
 
	`MMIO32
(
RGU_BASE
 + 0x48C)

	)

177 
	#RESET_EXT_STAT36
 
	`MMIO32
(
RGU_BASE
 + 0x490)

	)

180 
	#RESET_EXT_STAT37
 
	`MMIO32
(
RGU_BASE
 + 0x494)

	)

183 
	#RESET_EXT_STAT38
 
	`MMIO32
(
RGU_BASE
 + 0x498)

	)

186 
	#RESET_EXT_STAT39
 
	`MMIO32
(
RGU_BASE
 + 0x49C)

	)

189 
	#RESET_EXT_STAT40
 
	`MMIO32
(
RGU_BASE
 + 0x4A0)

	)

192 
	#RESET_EXT_STAT41
 
	`MMIO32
(
RGU_BASE
 + 0x4A4)

	)

195 
	#RESET_EXT_STAT42
 
	`MMIO32
(
RGU_BASE
 + 0x4A8)

	)

198 
	#RESET_EXT_STAT43
 
	`MMIO32
(
RGU_BASE
 + 0x4AC)

	)

201 
	#RESET_EXT_STAT44
 
	`MMIO32
(
RGU_BASE
 + 0x4B0)

	)

204 
	#RESET_EXT_STAT45
 
	`MMIO32
(
RGU_BASE
 + 0x4B4)

	)

207 
	#RESET_EXT_STAT46
 
	`MMIO32
(
RGU_BASE
 + 0x4B8)

	)

210 
	#RESET_EXT_STAT47
 
	`MMIO32
(
RGU_BASE
 + 0x4BC)

	)

213 
	#RESET_EXT_STAT48
 
	`MMIO32
(
RGU_BASE
 + 0x4C0)

	)

216 
	#RESET_EXT_STAT49
 
	`MMIO32
(
RGU_BASE
 + 0x4C4)

	)

219 
	#RESET_EXT_STAT50
 
	`MMIO32
(
RGU_BASE
 + 0x4C8)

	)

222 
	#RESET_EXT_STAT51
 
	`MMIO32
(
RGU_BASE
 + 0x4CC)

	)

225 
	#RESET_EXT_STAT52
 
	`MMIO32
(
RGU_BASE
 + 0x4D0)

	)

228 
	#RESET_EXT_STAT53
 
	`MMIO32
(
RGU_BASE
 + 0x4D4)

	)

231 
	#RESET_EXT_STAT54
 
	`MMIO32
(
RGU_BASE
 + 0x4D8)

	)

234 
	#RESET_EXT_STAT55
 
	`MMIO32
(
RGU_BASE
 + 0x4DC)

	)

237 
	#RESET_EXT_STAT56
 
	`MMIO32
(
RGU_BASE
 + 0x4E0)

	)

240 
	#RESET_EXT_STAT57
 
	`MMIO32
(
RGU_BASE
 + 0x4E4)

	)

243 
	#RESET_EXT_STAT58
 
	`MMIO32
(
RGU_BASE
 + 0x4E8)

	)

246 
	#RESET_EXT_STAT59
 
	`MMIO32
(
RGU_BASE
 + 0x4EC)

	)

249 
	#RESET_EXT_STAT60
 
	`MMIO32
(
RGU_BASE
 + 0x4F0)

	)

252 
	#RESET_EXT_STAT61
 
	`MMIO32
(
RGU_BASE
 + 0x4F4)

	)

255 
	#RESET_EXT_STAT62
 
	`MMIO32
(
RGU_BASE
 + 0x4F8)

	)

258 
	#RESET_EXT_STAT63
 
	`MMIO32
(
RGU_BASE
 + 0x4FC)

	)

263 
	#RESET_CTRL0_CORE_RST_SHIFT
 (0)

	)

264 
	#RESET_CTRL0_CORE_RST
 (1 << 
RESET_CTRL0_CORE_RST_SHIFT
)

	)

267 
	#RESET_CTRL0_PERIPH_RST_SHIFT
 (1)

	)

268 
	#RESET_CTRL0_PERIPH_RST
 (1 << 
RESET_CTRL0_PERIPH_RST_SHIFT
)

	)

271 
	#RESET_CTRL0_MASTER_RST_SHIFT
 (2)

	)

272 
	#RESET_CTRL0_MASTER_RST
 (1 << 
RESET_CTRL0_MASTER_RST_SHIFT
)

	)

275 
	#RESET_CTRL0_WWDT_RST_SHIFT
 (4)

	)

276 
	#RESET_CTRL0_WWDT_RST
 (1 << 
RESET_CTRL0_WWDT_RST_SHIFT
)

	)

279 
	#RESET_CTRL0_CREG_RST_SHIFT
 (5)

	)

280 
	#RESET_CTRL0_CREG_RST
 (1 << 
RESET_CTRL0_CREG_RST_SHIFT
)

	)

283 
	#RESET_CTRL0_BUS_RST_SHIFT
 (8)

	)

284 
	#RESET_CTRL0_BUS_RST
 (1 << 
RESET_CTRL0_BUS_RST_SHIFT
)

	)

287 
	#RESET_CTRL0_SCU_RST_SHIFT
 (9)

	)

288 
	#RESET_CTRL0_SCU_RST
 (1 << 
RESET_CTRL0_SCU_RST_SHIFT
)

	)

291 
	#RESET_CTRL0_M4_RST_SHIFT
 (13)

	)

292 
	#RESET_CTRL0_M4_RST
 (1 << 
RESET_CTRL0_M4_RST_SHIFT
)

	)

295 
	#RESET_CTRL0_LCD_RST_SHIFT
 (16)

	)

296 
	#RESET_CTRL0_LCD_RST
 (1 << 
RESET_CTRL0_LCD_RST_SHIFT
)

	)

299 
	#RESET_CTRL0_USB0_RST_SHIFT
 (17)

	)

300 
	#RESET_CTRL0_USB0_RST
 (1 << 
RESET_CTRL0_USB0_RST_SHIFT
)

	)

303 
	#RESET_CTRL0_USB1_RST_SHIFT
 (18)

	)

304 
	#RESET_CTRL0_USB1_RST
 (1 << 
RESET_CTRL0_USB1_RST_SHIFT
)

	)

307 
	#RESET_CTRL0_DMA_RST_SHIFT
 (19)

	)

308 
	#RESET_CTRL0_DMA_RST
 (1 << 
RESET_CTRL0_DMA_RST_SHIFT
)

	)

311 
	#RESET_CTRL0_SDIO_RST_SHIFT
 (20)

	)

312 
	#RESET_CTRL0_SDIO_RST
 (1 << 
RESET_CTRL0_SDIO_RST_SHIFT
)

	)

315 
	#RESET_CTRL0_EMC_RST_SHIFT
 (21)

	)

316 
	#RESET_CTRL0_EMC_RST
 (1 << 
RESET_CTRL0_EMC_RST_SHIFT
)

	)

319 
	#RESET_CTRL0_ETHERNET_RST_SHIFT
 (22)

	)

320 
	#RESET_CTRL0_ETHERNET_RST
 (1 << 
RESET_CTRL0_ETHERNET_RST_SHIFT
)

	)

323 
	#RESET_CTRL0_FLASHA_RST_SHIFT
 (25)

	)

324 
	#RESET_CTRL0_FLASHA_RST
 (1 << 
RESET_CTRL0_FLASHA_RST_SHIFT
)

	)

327 
	#RESET_CTRL0_EEPROM_RST_SHIFT
 (27)

	)

328 
	#RESET_CTRL0_EEPROM_RST
 (1 << 
RESET_CTRL0_EEPROM_RST_SHIFT
)

	)

331 
	#RESET_CTRL0_GPIO_RST_SHIFT
 (28)

	)

332 
	#RESET_CTRL0_GPIO_RST
 (1 << 
RESET_CTRL0_GPIO_RST_SHIFT
)

	)

335 
	#RESET_CTRL0_FLASHB_RST_SHIFT
 (29)

	)

336 
	#RESET_CTRL0_FLASHB_RST
 (1 << 
RESET_CTRL0_FLASHB_RST_SHIFT
)

	)

341 
	#RESET_CTRL1_TIMER0_RST_SHIFT
 (0)

	)

342 
	#RESET_CTRL1_TIMER0_RST
 (1 << 
RESET_CTRL1_TIMER0_RST_SHIFT
)

	)

345 
	#RESET_CTRL1_TIMER1_RST_SHIFT
 (1)

	)

346 
	#RESET_CTRL1_TIMER1_RST
 (1 << 
RESET_CTRL1_TIMER1_RST_SHIFT
)

	)

349 
	#RESET_CTRL1_TIMER2_RST_SHIFT
 (2)

	)

350 
	#RESET_CTRL1_TIMER2_RST
 (1 << 
RESET_CTRL1_TIMER2_RST_SHIFT
)

	)

353 
	#RESET_CTRL1_TIMER3_RST_SHIFT
 (3)

	)

354 
	#RESET_CTRL1_TIMER3_RST
 (1 << 
RESET_CTRL1_TIMER3_RST_SHIFT
)

	)

357 
	#RESET_CTRL1_RTIMER_RST_SHIFT
 (4)

	)

358 
	#RESET_CTRL1_RTIMER_RST
 (1 << 
RESET_CTRL1_RTIMER_RST_SHIFT
)

	)

361 
	#RESET_CTRL1_SCT_RST_SHIFT
 (5)

	)

362 
	#RESET_CTRL1_SCT_RST
 (1 << 
RESET_CTRL1_SCT_RST_SHIFT
)

	)

365 
	#RESET_CTRL1_MOTOCONPWM_RST_SHIFT
 (6)

	)

366 
	#RESET_CTRL1_MOTOCONPWM_RST
 (1 << 
RESET_CTRL1_MOTOCONPWM_RST_SHIFT
)

	)

369 
	#RESET_CTRL1_QEI_RST_SHIFT
 (7)

	)

370 
	#RESET_CTRL1_QEI_RST
 (1 << 
RESET_CTRL1_QEI_RST_SHIFT
)

	)

373 
	#RESET_CTRL1_ADC0_RST_SHIFT
 (8)

	)

374 
	#RESET_CTRL1_ADC0_RST
 (1 << 
RESET_CTRL1_ADC0_RST_SHIFT
)

	)

377 
	#RESET_CTRL1_ADC1_RST_SHIFT
 (9)

	)

378 
	#RESET_CTRL1_ADC1_RST
 (1 << 
RESET_CTRL1_ADC1_RST_SHIFT
)

	)

381 
	#RESET_CTRL1_DAC_RST_SHIFT
 (10)

	)

382 
	#RESET_CTRL1_DAC_RST
 (1 << 
RESET_CTRL1_DAC_RST_SHIFT
)

	)

385 
	#RESET_CTRL1_UART0_RST_SHIFT
 (12)

	)

386 
	#RESET_CTRL1_UART0_RST
 (1 << 
RESET_CTRL1_UART0_RST_SHIFT
)

	)

389 
	#RESET_CTRL1_UART1_RST_SHIFT
 (13)

	)

390 
	#RESET_CTRL1_UART1_RST
 (1 << 
RESET_CTRL1_UART1_RST_SHIFT
)

	)

393 
	#RESET_CTRL1_UART2_RST_SHIFT
 (14)

	)

394 
	#RESET_CTRL1_UART2_RST
 (1 << 
RESET_CTRL1_UART2_RST_SHIFT
)

	)

397 
	#RESET_CTRL1_UART3_RST_SHIFT
 (15)

	)

398 
	#RESET_CTRL1_UART3_RST
 (1 << 
RESET_CTRL1_UART3_RST_SHIFT
)

	)

401 
	#RESET_CTRL1_I2C0_RST_SHIFT
 (16)

	)

402 
	#RESET_CTRL1_I2C0_RST
 (1 << 
RESET_CTRL1_I2C0_RST_SHIFT
)

	)

405 
	#RESET_CTRL1_I2C1_RST_SHIFT
 (17)

	)

406 
	#RESET_CTRL1_I2C1_RST
 (1 << 
RESET_CTRL1_I2C1_RST_SHIFT
)

	)

409 
	#RESET_CTRL1_SSP0_RST_SHIFT
 (18)

	)

410 
	#RESET_CTRL1_SSP0_RST
 (1 << 
RESET_CTRL1_SSP0_RST_SHIFT
)

	)

413 
	#RESET_CTRL1_SSP1_RST_SHIFT
 (19)

	)

414 
	#RESET_CTRL1_SSP1_RST
 (1 << 
RESET_CTRL1_SSP1_RST_SHIFT
)

	)

417 
	#RESET_CTRL1_I2S_RST_SHIFT
 (20)

	)

418 
	#RESET_CTRL1_I2S_RST
 (1 << 
RESET_CTRL1_I2S_RST_SHIFT
)

	)

421 
	#RESET_CTRL1_SPIFI_RST_SHIFT
 (21)

	)

422 
	#RESET_CTRL1_SPIFI_RST
 (1 << 
RESET_CTRL1_SPIFI_RST_SHIFT
)

	)

425 
	#RESET_CTRL1_CAN1_RST_SHIFT
 (22)

	)

426 
	#RESET_CTRL1_CAN1_RST
 (1 << 
RESET_CTRL1_CAN1_RST_SHIFT
)

	)

429 
	#RESET_CTRL1_CAN0_RST_SHIFT
 (23)

	)

430 
	#RESET_CTRL1_CAN0_RST
 (1 << 
RESET_CTRL1_CAN0_RST_SHIFT
)

	)

433 
	#RESET_CTRL1_M0APP_RST_SHIFT
 (24)

	)

434 
	#RESET_CTRL1_M0APP_RST
 (1 << 
RESET_CTRL1_M0APP_RST_SHIFT
)

	)

437 
	#RESET_CTRL1_SGPIO_RST_SHIFT
 (25)

	)

438 
	#RESET_CTRL1_SGPIO_RST
 (1 << 
RESET_CTRL1_SGPIO_RST_SHIFT
)

	)

441 
	#RESET_CTRL1_SPI_RST_SHIFT
 (26)

	)

442 
	#RESET_CTRL1_SPI_RST
 (1 << 
RESET_CTRL1_SPI_RST_SHIFT
)

	)

447 
	#RESET_STATUS0_CORE_RST_SHIFT
 (0)

	)

448 
	#RESET_STATUS0_CORE_RST_MASK
 (0x3 << 
RESET_STATUS0_CORE_RST_SHIFT
)

	)

449 
	#RESET_STATUS0_CORE_RST
(
x
Ë((xË<< 
RESET_STATUS0_CORE_RST_SHIFT
)

	)

452 
	#RESET_STATUS0_PERIPH_RST_SHIFT
 (2)

	)

453 
	#RESET_STATUS0_PERIPH_RST_MASK
 (0x3 << 
RESET_STATUS0_PERIPH_RST_SHIFT
)

	)

454 
	#RESET_STATUS0_PERIPH_RST
(
x
Ë((xË<< 
RESET_STATUS0_PERIPH_RST_SHIFT
)

	)

457 
	#RESET_STATUS0_MASTER_RST_SHIFT
 (4)

	)

458 
	#RESET_STATUS0_MASTER_RST_MASK
 (0x3 << 
RESET_STATUS0_MASTER_RST_SHIFT
)

	)

459 
	#RESET_STATUS0_MASTER_RST
(
x
Ë((xË<< 
RESET_STATUS0_MASTER_RST_SHIFT
)

	)

462 
	#RESET_STATUS0_WWDT_RST_SHIFT
 (8)

	)

463 
	#RESET_STATUS0_WWDT_RST_MASK
 (0x3 << 
RESET_STATUS0_WWDT_RST_SHIFT
)

	)

464 
	#RESET_STATUS0_WWDT_RST
(
x
Ë((xË<< 
RESET_STATUS0_WWDT_RST_SHIFT
)

	)

467 
	#RESET_STATUS0_CREG_RST_SHIFT
 (10)

	)

468 
	#RESET_STATUS0_CREG_RST_MASK
 (0x3 << 
RESET_STATUS0_CREG_RST_SHIFT
)

	)

469 
	#RESET_STATUS0_CREG_RST
(
x
Ë((xË<< 
RESET_STATUS0_CREG_RST_SHIFT
)

	)

472 
	#RESET_STATUS0_BUS_RST_SHIFT
 (16)

	)

473 
	#RESET_STATUS0_BUS_RST_MASK
 (0x3 << 
RESET_STATUS0_BUS_RST_SHIFT
)

	)

474 
	#RESET_STATUS0_BUS_RST
(
x
Ë((xË<< 
RESET_STATUS0_BUS_RST_SHIFT
)

	)

477 
	#RESET_STATUS0_SCU_RST_SHIFT
 (18)

	)

478 
	#RESET_STATUS0_SCU_RST_MASK
 (0x3 << 
RESET_STATUS0_SCU_RST_SHIFT
)

	)

479 
	#RESET_STATUS0_SCU_RST
(
x
Ë((xË<< 
RESET_STATUS0_SCU_RST_SHIFT
)

	)

482 
	#RESET_STATUS0_M4_RST_SHIFT
 (26)

	)

483 
	#RESET_STATUS0_M4_RST_MASK
 (0x3 << 
RESET_STATUS0_M4_RST_SHIFT
)

	)

484 
	#RESET_STATUS0_M4_RST
(
x
Ë((xË<< 
RESET_STATUS0_M4_RST_SHIFT
)

	)

489 
	#RESET_STATUS1_LCD_RST_SHIFT
 (0)

	)

490 
	#RESET_STATUS1_LCD_RST_MASK
 (0x3 << 
RESET_STATUS1_LCD_RST_SHIFT
)

	)

491 
	#RESET_STATUS1_LCD_RST
(
x
Ë((xË<< 
RESET_STATUS1_LCD_RST_SHIFT
)

	)

494 
	#RESET_STATUS1_USB0_RST_SHIFT
 (2)

	)

495 
	#RESET_STATUS1_USB0_RST_MASK
 (0x3 << 
RESET_STATUS1_USB0_RST_SHIFT
)

	)

496 
	#RESET_STATUS1_USB0_RST
(
x
Ë((xË<< 
RESET_STATUS1_USB0_RST_SHIFT
)

	)

499 
	#RESET_STATUS1_USB1_RST_SHIFT
 (4)

	)

500 
	#RESET_STATUS1_USB1_RST_MASK
 (0x3 << 
RESET_STATUS1_USB1_RST_SHIFT
)

	)

501 
	#RESET_STATUS1_USB1_RST
(
x
Ë((xË<< 
RESET_STATUS1_USB1_RST_SHIFT
)

	)

504 
	#RESET_STATUS1_DMA_RST_SHIFT
 (6)

	)

505 
	#RESET_STATUS1_DMA_RST_MASK
 (0x3 << 
RESET_STATUS1_DMA_RST_SHIFT
)

	)

506 
	#RESET_STATUS1_DMA_RST
(
x
Ë((xË<< 
RESET_STATUS1_DMA_RST_SHIFT
)

	)

509 
	#RESET_STATUS1_SDIO_RST_SHIFT
 (8)

	)

510 
	#RESET_STATUS1_SDIO_RST_MASK
 (0x3 << 
RESET_STATUS1_SDIO_RST_SHIFT
)

	)

511 
	#RESET_STATUS1_SDIO_RST
(
x
Ë((xË<< 
RESET_STATUS1_SDIO_RST_SHIFT
)

	)

514 
	#RESET_STATUS1_EMC_RST_SHIFT
 (10)

	)

515 
	#RESET_STATUS1_EMC_RST_MASK
 (0x3 << 
RESET_STATUS1_EMC_RST_SHIFT
)

	)

516 
	#RESET_STATUS1_EMC_RST
(
x
Ë((xË<< 
RESET_STATUS1_EMC_RST_SHIFT
)

	)

519 
	#RESET_STATUS1_ETHERNET_RST_SHIFT
 (12)

	)

520 
	#RESET_STATUS1_ETHERNET_RST_MASK
 \

521 (0x3 << 
RESET_STATUS1_ETHERNET_RST_SHIFT
)

	)

522 
	#RESET_STATUS1_ETHERNET_RST
(
x
Ë((xË<< 
RESET_STATUS1_ETHERNET_RST_SHIFT
)

	)

525 
	#RESET_STATUS1_FLASHA_RST_SHIFT
 (18)

	)

526 
	#RESET_STATUS1_FLASHA_RST_MASK
 (0x3 << 
RESET_STATUS1_FLASHA_RST_SHIFT
)

	)

527 
	#RESET_STATUS1_FLASHA_RST
(
x
Ë((xË<< 
RESET_STATUS1_FLASHA_RST_SHIFT
)

	)

530 
	#RESET_STATUS1_EEPROM_RST_SHIFT
 (22)

	)

531 
	#RESET_STATUS1_EEPROM_RST_MASK
 (0x3 << 
RESET_STATUS1_EEPROM_RST_SHIFT
)

	)

532 
	#RESET_STATUS1_EEPROM_RST
(
x
Ë((xË<< 
RESET_STATUS1_EEPROM_RST_SHIFT
)

	)

535 
	#RESET_STATUS1_GPIO_RST_SHIFT
 (24)

	)

536 
	#RESET_STATUS1_GPIO_RST_MASK
 (0x3 << 
RESET_STATUS1_GPIO_RST_SHIFT
)

	)

537 
	#RESET_STATUS1_GPIO_RST
(
x
Ë((xË<< 
RESET_STATUS1_GPIO_RST_SHIFT
)

	)

540 
	#RESET_STATUS1_FLASHB_RST_SHIFT
 (26)

	)

541 
	#RESET_STATUS1_FLASHB_RST_MASK
 (0x3 << 
RESET_STATUS1_FLASHB_RST_SHIFT
)

	)

542 
	#RESET_STATUS1_FLASHB_RST
(
x
Ë((xË<< 
RESET_STATUS1_FLASHB_RST_SHIFT
)

	)

547 
	#RESET_STATUS2_TIMER0_RST_SHIFT
 (0)

	)

548 
	#RESET_STATUS2_TIMER0_RST_MASK
 (0x3 << 
RESET_STATUS2_TIMER0_RST_SHIFT
)

	)

549 
	#RESET_STATUS2_TIMER0_RST
(
x
Ë((xË<< 
RESET_STATUS2_TIMER0_RST_SHIFT
)

	)

552 
	#RESET_STATUS2_TIMER1_RST_SHIFT
 (2)

	)

553 
	#RESET_STATUS2_TIMER1_RST_MASK
 (0x3 << 
RESET_STATUS2_TIMER1_RST_SHIFT
)

	)

554 
	#RESET_STATUS2_TIMER1_RST
(
x
Ë((xË<< 
RESET_STATUS2_TIMER1_RST_SHIFT
)

	)

557 
	#RESET_STATUS2_TIMER2_RST_SHIFT
 (4)

	)

558 
	#RESET_STATUS2_TIMER2_RST_MASK
 (0x3 << 
RESET_STATUS2_TIMER2_RST_SHIFT
)

	)

559 
	#RESET_STATUS2_TIMER2_RST
(
x
Ë((xË<< 
RESET_STATUS2_TIMER2_RST_SHIFT
)

	)

562 
	#RESET_STATUS2_TIMER3_RST_SHIFT
 (6)

	)

563 
	#RESET_STATUS2_TIMER3_RST_MASK
 (0x3 << 
RESET_STATUS2_TIMER3_RST_SHIFT
)

	)

564 
	#RESET_STATUS2_TIMER3_RST
(
x
Ë((xË<< 
RESET_STATUS2_TIMER3_RST_SHIFT
)

	)

567 
	#RESET_STATUS2_RITIMER_RST_SHIFT
 (8)

	)

568 
	#RESET_STATUS2_RITIMER_RST_MASK
 (0x3 << 
RESET_STATUS2_RITIMER_RST_SHIFT
)

	)

569 
	#RESET_STATUS2_RITIMER_RST
(
x
Ë((xË<< 
RESET_STATUS2_RITIMER_RST_SHIFT
)

	)

572 
	#RESET_STATUS2_SCT_RST_SHIFT
 (10)

	)

573 
	#RESET_STATUS2_SCT_RST_MASK
 (0x3 << 
RESET_STATUS2_SCT_RST_SHIFT
)

	)

574 
	#RESET_STATUS2_SCT_RST
(
x
Ë((xË<< 
RESET_STATUS2_SCT_RST_SHIFT
)

	)

577 
	#RESET_STATUS2_MOTOCONPWM_RST_SHIFT
 (12)

	)

578 
	#RESET_STATUS2_MOTOCONPWM_RST_MASK
 \

579 (0x3 << 
RESET_STATUS2_MOTOCONPWM_RST_SHIFT
)

	)

580 
	#RESET_STATUS2_MOTOCONPWM_RST
(
x
) \

581 ((
x
Ë<< 
RESET_STATUS2_MOTOCONPWM_RST_SHIFT
)

	)

584 
	#RESET_STATUS2_QEI_RST_SHIFT
 (14)

	)

585 
	#RESET_STATUS2_QEI_RST_MASK
 (0x3 << 
RESET_STATUS2_QEI_RST_SHIFT
)

	)

586 
	#RESET_STATUS2_QEI_RST
(
x
Ë((xË<< 
RESET_STATUS2_QEI_RST_SHIFT
)

	)

589 
	#RESET_STATUS2_ADC0_RST_SHIFT
 (16)

	)

590 
	#RESET_STATUS2_ADC0_RST_MASK
 (0x3 << 
RESET_STATUS2_ADC0_RST_SHIFT
)

	)

591 
	#RESET_STATUS2_ADC0_RST
(
x
Ë((xË<< 
RESET_STATUS2_ADC0_RST_SHIFT
)

	)

594 
	#RESET_STATUS2_ADC1_RST_SHIFT
 (18)

	)

595 
	#RESET_STATUS2_ADC1_RST_MASK
 (0x3 << 
RESET_STATUS2_ADC1_RST_SHIFT
)

	)

596 
	#RESET_STATUS2_ADC1_RST
(
x
Ë((xË<< 
RESET_STATUS2_ADC1_RST_SHIFT
)

	)

599 
	#RESET_STATUS2_DAC_RST_SHIFT
 (20)

	)

600 
	#RESET_STATUS2_DAC_RST_MASK
 (0x3 << 
RESET_STATUS2_DAC_RST_SHIFT
)

	)

601 
	#RESET_STATUS2_DAC_RST
(
x
Ë((xË<< 
RESET_STATUS2_DAC_RST_SHIFT
)

	)

604 
	#RESET_STATUS2_UART0_RST_SHIFT
 (24)

	)

605 
	#RESET_STATUS2_UART0_RST_MASK
 (0x3 << 
RESET_STATUS2_UART0_RST_SHIFT
)

	)

606 
	#RESET_STATUS2_UART0_RST
(
x
Ë((xË<< 
RESET_STATUS2_UART0_RST_SHIFT
)

	)

609 
	#RESET_STATUS2_UART1_RST_SHIFT
 (26)

	)

610 
	#RESET_STATUS2_UART1_RST_MASK
 (0x3 << 
RESET_STATUS2_UART1_RST_SHIFT
)

	)

611 
	#RESET_STATUS2_UART1_RST
(
x
Ë((xË<< 
RESET_STATUS2_UART1_RST_SHIFT
)

	)

614 
	#RESET_STATUS2_UART2_RST_SHIFT
 (28)

	)

615 
	#RESET_STATUS2_UART2_RST_MASK
 (0x3 << 
RESET_STATUS2_UART2_RST_SHIFT
)

	)

616 
	#RESET_STATUS2_UART2_RST
(
x
Ë((xË<< 
RESET_STATUS2_UART2_RST_SHIFT
)

	)

619 
	#RESET_STATUS2_UART3_RST_SHIFT
 (30)

	)

620 
	#RESET_STATUS2_UART3_RST_MASK
 (0x3 << 
RESET_STATUS2_UART3_RST_SHIFT
)

	)

621 
	#RESET_STATUS2_UART3_RST
(
x
Ë((xË<< 
RESET_STATUS2_UART3_RST_SHIFT
)

	)

626 
	#RESET_STATUS3_I2C0_RST_SHIFT
 (0)

	)

627 
	#RESET_STATUS3_I2C0_RST_MASK
 (0x3 << 
RESET_STATUS3_I2C0_RST_SHIFT
)

	)

628 
	#RESET_STATUS3_I2C0_RST
(
x
Ë((xË<< 
RESET_STATUS3_I2C0_RST_SHIFT
)

	)

631 
	#RESET_STATUS3_I2C1_RST_SHIFT
 (2)

	)

632 
	#RESET_STATUS3_I2C1_RST_MASK
 (0x3 << 
RESET_STATUS3_I2C1_RST_SHIFT
)

	)

633 
	#RESET_STATUS3_I2C1_RST
(
x
Ë((xË<< 
RESET_STATUS3_I2C1_RST_SHIFT
)

	)

636 
	#RESET_STATUS3_SSP0_RST_SHIFT
 (4)

	)

637 
	#RESET_STATUS3_SSP0_RST_MASK
 (0x3 << 
RESET_STATUS3_SSP0_RST_SHIFT
)

	)

638 
	#RESET_STATUS3_SSP0_RST
(
x
Ë((xË<< 
RESET_STATUS3_SSP0_RST_SHIFT
)

	)

641 
	#RESET_STATUS3_SSP1_RST_SHIFT
 (6)

	)

642 
	#RESET_STATUS3_SSP1_RST_MASK
 (0x3 << 
RESET_STATUS3_SSP1_RST_SHIFT
)

	)

643 
	#RESET_STATUS3_SSP1_RST
(
x
Ë((xË<< 
RESET_STATUS3_SSP1_RST_SHIFT
)

	)

646 
	#RESET_STATUS3_I2S_RST_SHIFT
 (8)

	)

647 
	#RESET_STATUS3_I2S_RST_MASK
 (0x3 << 
RESET_STATUS3_I2S_RST_SHIFT
)

	)

648 
	#RESET_STATUS3_I2S_RST
(
x
Ë((xË<< 
RESET_STATUS3_I2S_RST_SHIFT
)

	)

651 
	#RESET_STATUS3_SPIFI_RST_SHIFT
 (10)

	)

652 
	#RESET_STATUS3_SPIFI_RST_MASK
 (0x3 << 
RESET_STATUS3_SPIFI_RST_SHIFT
)

	)

653 
	#RESET_STATUS3_SPIFI_RST
(
x
Ë((xË<< 
RESET_STATUS3_SPIFI_RST_SHIFT
)

	)

656 
	#RESET_STATUS3_CAN1_RST_SHIFT
 (12)

	)

657 
	#RESET_STATUS3_CAN1_RST_MASK
 (0x3 << 
RESET_STATUS3_CAN1_RST_SHIFT
)

	)

658 
	#RESET_STATUS3_CAN1_RST
(
x
Ë((xË<< 
RESET_STATUS3_CAN1_RST_SHIFT
)

	)

661 
	#RESET_STATUS3_CAN0_RST_SHIFT
 (14)

	)

662 
	#RESET_STATUS3_CAN0_RST_MASK
 (0x3 << 
RESET_STATUS3_CAN0_RST_SHIFT
)

	)

663 
	#RESET_STATUS3_CAN0_RST
(
x
Ë((xË<< 
RESET_STATUS3_CAN0_RST_SHIFT
)

	)

666 
	#RESET_STATUS3_M0APP_RST_SHIFT
 (16)

	)

667 
	#RESET_STATUS3_M0APP_RST_MASK
 (0x3 << 
RESET_STATUS3_M0APP_RST_SHIFT
)

	)

668 
	#RESET_STATUS3_M0APP_RST
(
x
Ë((xË<< 
RESET_STATUS3_M0APP_RST_SHIFT
)

	)

671 
	#RESET_STATUS3_SGPIO_RST_SHIFT
 (18)

	)

672 
	#RESET_STATUS3_SGPIO_RST_MASK
 (0x3 << 
RESET_STATUS3_SGPIO_RST_SHIFT
)

	)

673 
	#RESET_STATUS3_SGPIO_RST
(
x
Ë((xË<< 
RESET_STATUS3_SGPIO_RST_SHIFT
)

	)

676 
	#RESET_STATUS3_SPI_RST_SHIFT
 (20)

	)

677 
	#RESET_STATUS3_SPI_RST_MASK
 (0x3 << 
RESET_STATUS3_SPI_RST_SHIFT
)

	)

678 
	#RESET_STATUS3_SPI_RST
(
x
Ë((xË<< 
RESET_STATUS3_SPI_RST_SHIFT
)

	)

683 
	#RESET_ACTIVE_STATUS0_CORE_RST_SHIFT
 (0)

	)

684 
	#RESET_ACTIVE_STATUS0_CORE_RST
 (1 << 
RESET_ACTIVE_STATUS0_CORE_RST_SHIFT
)

	)

687 
	#RESET_ACTIVE_STATUS0_PERIPH_RST_SHIFT
 (1)

	)

688 
	#RESET_ACTIVE_STATUS0_PERIPH_RST
 \

689 (1 << 
RESET_ACTIVE_STATUS0_PERIPH_RST_SHIFT
)

	)

692 
	#RESET_ACTIVE_STATUS0_MASTER_RST_SHIFT
 (2)

	)

693 
	#RESET_ACTIVE_STATUS0_MASTER_RST
 \

694 (1 << 
RESET_ACTIVE_STATUS0_MASTER_RST_SHIFT
)

	)

697 
	#RESET_ACTIVE_STATUS0_WWDT_RST_SHIFT
 (4)

	)

698 
	#RESET_ACTIVE_STATUS0_WWDT_RST
 (1 << 
RESET_ACTIVE_STATUS0_WWDT_RST_SHIFT
)

	)

701 
	#RESET_ACTIVE_STATUS0_CREG_RST_SHIFT
 (5)

	)

702 
	#RESET_ACTIVE_STATUS0_CREG_RST
 (1 << 
RESET_ACTIVE_STATUS0_CREG_RST_SHIFT
)

	)

705 
	#RESET_ACTIVE_STATUS0_BUS_RST_SHIFT
 (8)

	)

706 
	#RESET_ACTIVE_STATUS0_BUS_RST
 (1 << 
RESET_ACTIVE_STATUS0_BUS_RST_SHIFT
)

	)

709 
	#RESET_ACTIVE_STATUS0_SCU_RST_SHIFT
 (9)

	)

710 
	#RESET_ACTIVE_STATUS0_SCU_RST
 (1 << 
RESET_ACTIVE_STATUS0_SCU_RST_SHIFT
)

	)

713 
	#RESET_ACTIVE_STATUS0_M4_RST_SHIFT
 (13)

	)

714 
	#RESET_ACTIVE_STATUS0_M4_RST
 (1 << 
RESET_ACTIVE_STATUS0_M4_RST_SHIFT
)

	)

717 
	#RESET_ACTIVE_STATUS0_LCD_RST_SHIFT
 (16)

	)

718 
	#RESET_ACTIVE_STATUS0_LCD_RST
 (1 << 
RESET_ACTIVE_STATUS0_LCD_RST_SHIFT
)

	)

721 
	#RESET_ACTIVE_STATUS0_USB0_RST_SHIFT
 (17)

	)

722 
	#RESET_ACTIVE_STATUS0_USB0_RST
 (1 << 
RESET_ACTIVE_STATUS0_USB0_RST_SHIFT
)

	)

725 
	#RESET_ACTIVE_STATUS0_USB1_RST_SHIFT
 (18)

	)

726 
	#RESET_ACTIVE_STATUS0_USB1_RST
 (1 << 
RESET_ACTIVE_STATUS0_USB1_RST_SHIFT
)

	)

729 
	#RESET_ACTIVE_STATUS0_DMA_RST_SHIFT
 (19)

	)

730 
	#RESET_ACTIVE_STATUS0_DMA_RST
 (1 << 
RESET_ACTIVE_STATUS0_DMA_RST_SHIFT
)

	)

733 
	#RESET_ACTIVE_STATUS0_SDIO_RST_SHIFT
 (20)

	)

734 
	#RESET_ACTIVE_STATUS0_SDIO_RST
 (1 << 
RESET_ACTIVE_STATUS0_SDIO_RST_SHIFT
)

	)

737 
	#RESET_ACTIVE_STATUS0_EMC_RST_SHIFT
 (21)

	)

738 
	#RESET_ACTIVE_STATUS0_EMC_RST
 (1 << 
RESET_ACTIVE_STATUS0_EMC_RST_SHIFT
)

	)

741 
	#RESET_ACTIVE_STATUS0_ETHERNET_RST_SHIFT
 (22)

	)

742 
	#RESET_ACTIVE_STATUS0_ETHERNET_RST
 \

743 (1 << 
RESET_ACTIVE_STATUS0_ETHERNET_RST_SHIFT
)

	)

746 
	#RESET_ACTIVE_STATUS0_FLASHA_RST_SHIFT
 (25)

	)

747 
	#RESET_ACTIVE_STATUS0_FLASHA_RST
 \

748 (1 << 
RESET_ACTIVE_STATUS0_FLASHA_RST_SHIFT
)

	)

751 
	#RESET_ACTIVE_STATUS0_EEPROM_RST_SHIFT
 (27)

	)

752 
	#RESET_ACTIVE_STATUS0_EEPROM_RST
 \

753 (1 << 
RESET_ACTIVE_STATUS0_EEPROM_RST_SHIFT
)

	)

756 
	#RESET_ACTIVE_STATUS0_GPIO_RST_SHIFT
 (28)

	)

757 
	#RESET_ACTIVE_STATUS0_GPIO_RST
 (1 << 
RESET_ACTIVE_STATUS0_GPIO_RST_SHIFT
)

	)

760 
	#RESET_ACTIVE_STATUS0_FLASHB_RST_SHIFT
 (29)

	)

761 
	#RESET_ACTIVE_STATUS0_FLASHB_RST
 \

762 (1 << 
RESET_ACTIVE_STATUS0_FLASHB_RST_SHIFT
)

	)

767 
	#RESET_ACTIVE_STATUS1_TIMER0_RST_SHIFT
 (0)

	)

768 
	#RESET_ACTIVE_STATUS1_TIMER0_RST
 \

769 (1 << 
RESET_ACTIVE_STATUS1_TIMER0_RST_SHIFT
)

	)

772 
	#RESET_ACTIVE_STATUS1_TIMER1_RST_SHIFT
 (1)

	)

773 
	#RESET_ACTIVE_STATUS1_TIMER1_RST
 \

774 (1 << 
RESET_ACTIVE_STATUS1_TIMER1_RST_SHIFT
)

	)

777 
	#RESET_ACTIVE_STATUS1_TIMER2_RST_SHIFT
 (2)

	)

778 
	#RESET_ACTIVE_STATUS1_TIMER2_RST
 \

779 (1 << 
RESET_ACTIVE_STATUS1_TIMER2_RST_SHIFT
)

	)

782 
	#RESET_ACTIVE_STATUS1_TIMER3_RST_SHIFT
 (3)

	)

783 
	#RESET_ACTIVE_STATUS1_TIMER3_RST
 \

784 (1 << 
RESET_ACTIVE_STATUS1_TIMER3_RST_SHIFT
)

	)

787 
	#RESET_ACTIVE_STATUS1_RITIMER_RST_SHIFT
 (4)

	)

788 
	#RESET_ACTIVE_STATUS1_RITIMER_RST
 \

789 (1 << 
RESET_ACTIVE_STATUS1_RITIMER_RST_SHIFT
)

	)

792 
	#RESET_ACTIVE_STATUS1_SCT_RST_SHIFT
 (5)

	)

793 
	#RESET_ACTIVE_STATUS1_SCT_RST
 \

794 (1 << 
RESET_ACTIVE_STATUS1_SCT_RST_SHIFT
)

	)

797 
	#RESET_ACTIVE_STATUS1_MOTOCONPWM_RST_SHIFT
 (6)

	)

798 
	#RESET_ACTIVE_STATUS1_MOTOCONPWM_RST
 \

799 (1 << 
RESET_ACTIVE_STATUS1_MOTOCONPWM_RST_SHIFT
)

	)

802 
	#RESET_ACTIVE_STATUS1_QEI_RST_SHIFT
 (7)

	)

803 
	#RESET_ACTIVE_STATUS1_QEI_RST
 \

804 (1 << 
RESET_ACTIVE_STATUS1_QEI_RST_SHIFT
)

	)

807 
	#RESET_ACTIVE_STATUS1_ADC0_RST_SHIFT
 (8)

	)

808 
	#RESET_ACTIVE_STATUS1_ADC0_RST
 \

809 (1 << 
RESET_ACTIVE_STATUS1_ADC0_RST_SHIFT
)

	)

812 
	#RESET_ACTIVE_STATUS1_ADC1_RST_SHIFT
 (9)

	)

813 
	#RESET_ACTIVE_STATUS1_ADC1_RST
 \

814 (1 << 
RESET_ACTIVE_STATUS1_ADC1_RST_SHIFT
)

	)

817 
	#RESET_ACTIVE_STATUS1_DAC_RST_SHIFT
 (10)

	)

818 
	#RESET_ACTIVE_STATUS1_DAC_RST
 (1 << 
RESET_ACTIVE_STATUS1_DAC_RST_SHIFT
)

	)

821 
	#RESET_ACTIVE_STATUS1_UART0_RST_SHIFT
 (12)

	)

822 
	#RESET_ACTIVE_STATUS1_UART0_RST
 \

823 (1 << 
RESET_ACTIVE_STATUS1_UART0_RST_SHIFT
)

	)

826 
	#RESET_ACTIVE_STATUS1_UART1_RST_SHIFT
 (13)

	)

827 
	#RESET_ACTIVE_STATUS1_UART1_RST
 \

828 (1 << 
RESET_ACTIVE_STATUS1_UART1_RST_SHIFT
)

	)

831 
	#RESET_ACTIVE_STATUS1_UART2_RST_SHIFT
 (14)

	)

832 
	#RESET_ACTIVE_STATUS1_UART2_RST
 \

833 (1 << 
RESET_ACTIVE_STATUS1_UART2_RST_SHIFT
)

	)

836 
	#RESET_ACTIVE_STATUS1_UART3_RST_SHIFT
 (15)

	)

837 
	#RESET_ACTIVE_STATUS1_UART3_RST
 \

838 (1 << 
RESET_ACTIVE_STATUS1_UART3_RST_SHIFT
)

	)

841 
	#RESET_ACTIVE_STATUS1_I2C0_RST_SHIFT
 (16)

	)

842 
	#RESET_ACTIVE_STATUS1_I2C0_RST
 \

843 (1 << 
RESET_ACTIVE_STATUS1_I2C0_RST_SHIFT
)

	)

846 
	#RESET_ACTIVE_STATUS1_I2C1_RST_SHIFT
 (17)

	)

847 
	#RESET_ACTIVE_STATUS1_I2C1_RST
 \

848 (1 << 
RESET_ACTIVE_STATUS1_I2C1_RST_SHIFT
)

	)

851 
	#RESET_ACTIVE_STATUS1_SSP0_RST_SHIFT
 (18)

	)

852 
	#RESET_ACTIVE_STATUS1_SSP0_RST
 \

853 (1 << 
RESET_ACTIVE_STATUS1_SSP0_RST_SHIFT
)

	)

856 
	#RESET_ACTIVE_STATUS1_SSP1_RST_SHIFT
 (19)

	)

857 
	#RESET_ACTIVE_STATUS1_SSP1_RST
 \

858 (1 << 
RESET_ACTIVE_STATUS1_SSP1_RST_SHIFT
)

	)

861 
	#RESET_ACTIVE_STATUS1_I2S_RST_SHIFT
 (20)

	)

862 
	#RESET_ACTIVE_STATUS1_I2S_RST
 (1 << 
RESET_ACTIVE_STATUS1_I2S_RST_SHIFT
)

	)

865 
	#RESET_ACTIVE_STATUS1_SPIFI_RST_SHIFT
 (21)

	)

866 
	#RESET_ACTIVE_STATUS1_SPIFI_RST
 \

867 (1 << 
RESET_ACTIVE_STATUS1_SPIFI_RST_SHIFT
)

	)

870 
	#RESET_ACTIVE_STATUS1_CAN1_RST_SHIFT
 (22)

	)

871 
	#RESET_ACTIVE_STATUS1_CAN1_RST
 \

872 (1 << 
RESET_ACTIVE_STATUS1_CAN1_RST_SHIFT
)

	)

875 
	#RESET_ACTIVE_STATUS1_CAN0_RST_SHIFT
 (23)

	)

876 
	#RESET_ACTIVE_STATUS1_CAN0_RST
 \

877 (1 << 
RESET_ACTIVE_STATUS1_CAN0_RST_SHIFT
)

	)

880 
	#RESET_ACTIVE_STATUS1_M0APP_RST_SHIFT
 (24)

	)

881 
	#RESET_ACTIVE_STATUS1_M0APP_RST
 \

882 (1 << 
RESET_ACTIVE_STATUS1_M0APP_RST_SHIFT
)

	)

885 
	#RESET_ACTIVE_STATUS1_SGPIO_RST_SHIFT
 (25)

	)

886 
	#RESET_ACTIVE_STATUS1_SGPIO_RST
 \

887 (1 << 
RESET_ACTIVE_STATUS1_SGPIO_RST_SHIFT
)

	)

890 
	#RESET_ACTIVE_STATUS1_SPI_RST_SHIFT
 (26)

	)

891 
	#RESET_ACTIVE_STATUS1_SPI_RST
 (1 << 
RESET_ACTIVE_STATUS1_SPI_RST_SHIFT
)

	)

896 
	#RESET_EXT_STAT0_EXT_RESET_SHIFT
 (0)

	)

897 
	#RESET_EXT_STAT0_EXT_RESET
 (1 << 
RESET_EXT_STAT0_EXT_RESET_SHIFT
)

	)

900 
	#RESET_EXT_STAT0_BOD_RESET_SHIFT
 (4)

	)

901 
	#RESET_EXT_STAT0_BOD_RESET
 (1 << 
RESET_EXT_STAT0_BOD_RESET_SHIFT
)

	)

904 
	#RESET_EXT_STAT0_WWDT_RESET_SHIFT
 (5)

	)

905 
	#RESET_EXT_STAT0_WWDT_RESET
 (1 << 
RESET_EXT_STAT0_WWDT_RESET_SHIFT
)

	)

910 
	#RESET_EXT_STAT1_CORE_RESET_SHIFT
 (1)

	)

911 
	#RESET_EXT_STAT1_CORE_RESET
 (1 << 
RESET_EXT_STAT1_CORE_RESET_SHIFT
)

	)

916 
	#RESET_EXT_STAT2_PERIPHERAL_RESET_SHIFT
 (2)

	)

917 
	#RESET_EXT_STAT2_PERIPHERAL_RESET
 \

918 (1 << 
RESET_EXT_STAT2_PERIPHERAL_RESET_SHIFT
)

	)

923 
	#RESET_EXT_STAT4_CORE_RESET_SHIFT
 (1)

	)

924 
	#RESET_EXT_STAT4_CORE_RESET
 (1 << 
RESET_EXT_STAT4_CORE_RESET_SHIFT
)

	)

929 
	#RESET_EXT_STAT5_CORE_RESET_SHIFT
 (1)

	)

930 
	#RESET_EXT_STAT5_CORE_RESET
 (1 << 
RESET_EXT_STAT5_CORE_RESET_SHIFT
)

	)

935 
	#RESET_EXT_STAT8_PERIPHERAL_RESET_SHIFT
 (2)

	)

936 
	#RESET_EXT_STAT8_PERIPHERAL_RESET
 \

937 (1 << 
RESET_EXT_STAT8_PERIPHERAL_RESET_SHIFT
)

	)

942 
	#RESET_EXT_STAT9_PERIPHERAL_RESET_SHIFT
 (2)

	)

943 
	#RESET_EXT_STAT9_PERIPHERAL_RESET
 \

944 (1 << 
RESET_EXT_STAT9_PERIPHERAL_RESET_SHIFT
)

	)

949 
	#RESET_EXT_STAT13_MASTER_RESET_SHIFT
 (3)

	)

950 
	#RESET_EXT_STAT13_MASTER_RESET
 (1 << 
RESET_EXT_STAT13_MASTER_RESET_SHIFT
)

	)

955 
	#RESET_EXT_STAT16_MASTER_RESET_SHIFT
 (3)

	)

956 
	#RESET_EXT_STAT16_MASTER_RESET
 (1 << 
RESET_EXT_STAT16_MASTER_RESET_SHIFT
)

	)

961 
	#RESET_EXT_STAT17_MASTER_RESET_SHIFT
 (3)

	)

962 
	#RESET_EXT_STAT17_MASTER_RESET
 (1 << 
RESET_EXT_STAT17_MASTER_RESET_SHIFT
)

	)

967 
	#RESET_EXT_STAT18_MASTER_RESET_SHIFT
 (3)

	)

968 
	#RESET_EXT_STAT18_MASTER_RESET
 (1 << 
RESET_EXT_STAT18_MASTER_RESET_SHIFT
)

	)

973 
	#RESET_EXT_STAT19_MASTER_RESET_SHIFT
 (3)

	)

974 
	#RESET_EXT_STAT19_MASTER_RESET
 (1 << 
RESET_EXT_STAT19_MASTER_RESET_SHIFT
)

	)

979 
	#RESET_EXT_STAT20_MASTER_RESET_SHIFT
 (3)

	)

980 
	#RESET_EXT_STAT20_MASTER_RESET
 (1 << 
RESET_EXT_STAT20_MASTER_RESET_SHIFT
)

	)

985 
	#RESET_EXT_STAT21_MASTER_RESET_SHIFT
 (3)

	)

986 
	#RESET_EXT_STAT21_MASTER_RESET
 (1 << 
RESET_EXT_STAT21_MASTER_RESET_SHIFT
)

	)

991 
	#RESET_EXT_STAT22_MASTER_RESET_SHIFT
 (3)

	)

992 
	#RESET_EXT_STAT22_MASTER_RESET
 (1 << 
RESET_EXT_STAT22_MASTER_RESET_SHIFT
)

	)

997 
	#RESET_EXT_STAT25_PERIPHERAL_RESET_SHIFT
 (2)

	)

998 
	#RESET_EXT_STAT25_PERIPHERAL_RESET
 \

999 (1 << 
RESET_EXT_STAT25_PERIPHERAL_RESET_SHIFT
)

	)

1004 
	#RESET_EXT_STAT27_PERIPHERAL_RESET_SHIFT
 (2)

	)

1005 
	#RESET_EXT_STAT27_PERIPHERAL_RESET
 \

1006 (1 << 
RESET_EXT_STAT27_PERIPHERAL_RESET_SHIFT
)

	)

1011 
	#RESET_EXT_STAT28_PERIPHERAL_RESET_SHIFT
 (2)

	)

1012 
	#RESET_EXT_STAT28_PERIPHERAL_RESET
 \

1013 (1 << 
RESET_EXT_STAT28_PERIPHERAL_RESET_SHIFT
)

	)

1018 
	#RESET_EXT_STAT29_PERIPHERAL_RESET_SHIFT
 (2)

	)

1019 
	#RESET_EXT_STAT29_PERIPHERAL_RESET
 \

1020 (1 << 
RESET_EXT_STAT29_PERIPHERAL_RESET_SHIFT
)

	)

1025 
	#RESET_EXT_STAT32_PERIPHERAL_RESET_SHIFT
 (2)

	)

1026 
	#RESET_EXT_STAT32_PERIPHERAL_RESET
 \

1027 (1 << 
RESET_EXT_STAT32_PERIPHERAL_RESET_SHIFT
)

	)

1032 
	#RESET_EXT_STAT33_PERIPHERAL_RESET_SHIFT
 (2)

	)

1033 
	#RESET_EXT_STAT33_PERIPHERAL_RESET
 \

1034 (1 << 
RESET_EXT_STAT33_PERIPHERAL_RESET_SHIFT
)

	)

1039 
	#RESET_EXT_STAT34_PERIPHERAL_RESET_SHIFT
 (2)

	)

1040 
	#RESET_EXT_STAT34_PERIPHERAL_RESET
 \

1041 (1 << 
RESET_EXT_STAT34_PERIPHERAL_RESET_SHIFT
)

	)

1046 
	#RESET_EXT_STAT35_PERIPHERAL_RESET_SHIFT
 (2)

	)

1047 
	#RESET_EXT_STAT35_PERIPHERAL_RESET
 \

1048 (1 << 
RESET_EXT_STAT35_PERIPHERAL_RESET_SHIFT
)

	)

1053 
	#RESET_EXT_STAT36_PERIPHERAL_RESET_SHIFT
 (2)

	)

1054 
	#RESET_EXT_STAT36_PERIPHERAL_RESET
 \

1055 (1 << 
RESET_EXT_STAT36_PERIPHERAL_RESET_SHIFT
)

	)

1060 
	#RESET_EXT_STAT37_PERIPHERAL_RESET_SHIFT
 (2)

	)

1061 
	#RESET_EXT_STAT37_PERIPHERAL_RESET
 \

1062 (1 << 
RESET_EXT_STAT37_PERIPHERAL_RESET_SHIFT
)

	)

1067 
	#RESET_EXT_STAT38_PERIPHERAL_RESET_SHIFT
 (2)

	)

1068 
	#RESET_EXT_STAT38_PERIPHERAL_RESET
 \

1069 (1 << 
RESET_EXT_STAT38_PERIPHERAL_RESET_SHIFT
)

	)

1074 
	#RESET_EXT_STAT39_PERIPHERAL_RESET_SHIFT
 (2)

	)

1075 
	#RESET_EXT_STAT39_PERIPHERAL_RESET
 \

1076 (1 << 
RESET_EXT_STAT39_PERIPHERAL_RESET_SHIFT
)

	)

1081 
	#RESET_EXT_STAT40_PERIPHERAL_RESET_SHIFT
 (2)

	)

1082 
	#RESET_EXT_STAT40_PERIPHERAL_RESET
 \

1083 (1 << 
RESET_EXT_STAT40_PERIPHERAL_RESET_SHIFT
)

	)

1088 
	#RESET_EXT_STAT41_PERIPHERAL_RESET_SHIFT
 (2)

	)

1089 
	#RESET_EXT_STAT41_PERIPHERAL_RESET
 \

1090 (1 << 
RESET_EXT_STAT41_PERIPHERAL_RESET_SHIFT
)

	)

1095 
	#RESET_EXT_STAT42_PERIPHERAL_RESET_SHIFT
 (2)

	)

1096 
	#RESET_EXT_STAT42_PERIPHERAL_RESET
 \

1097 (1 << 
RESET_EXT_STAT42_PERIPHERAL_RESET_SHIFT
)

	)

1102 
	#RESET_EXT_STAT44_PERIPHERAL_RESET_SHIFT
 (2)

	)

1103 
	#RESET_EXT_STAT44_PERIPHERAL_RESET
 \

1104 (1 << 
RESET_EXT_STAT44_PERIPHERAL_RESET_SHIFT
)

	)

1109 
	#RESET_EXT_STAT45_PERIPHERAL_RESET_SHIFT
 (2)

	)

1110 
	#RESET_EXT_STAT45_PERIPHERAL_RESET
 \

1111 (1 << 
RESET_EXT_STAT45_PERIPHERAL_RESET_SHIFT
)

	)

1116 
	#RESET_EXT_STAT46_PERIPHERAL_RESET_SHIFT
 (2)

	)

1117 
	#RESET_EXT_STAT46_PERIPHERAL_RESET
 \

1118 (1 << 
RESET_EXT_STAT46_PERIPHERAL_RESET_SHIFT
)

	)

1123 
	#RESET_EXT_STAT47_PERIPHERAL_RESET_SHIFT
 (2)

	)

1124 
	#RESET_EXT_STAT47_PERIPHERAL_RESET
 \

1125 (1 << 
RESET_EXT_STAT47_PERIPHERAL_RESET_SHIFT
)

	)

1130 
	#RESET_EXT_STAT48_PERIPHERAL_RESET_SHIFT
 (2)

	)

1131 
	#RESET_EXT_STAT48_PERIPHERAL_RESET
 \

1132 (1 << 
RESET_EXT_STAT48_PERIPHERAL_RESET_SHIFT
)

	)

1137 
	#RESET_EXT_STAT49_PERIPHERAL_RESET_SHIFT
 (2)

	)

1138 
	#RESET_EXT_STAT49_PERIPHERAL_RESET
 \

1139 (1 << 
RESET_EXT_STAT49_PERIPHERAL_RESET_SHIFT
)

	)

1144 
	#RESET_EXT_STAT50_PERIPHERAL_RESET_SHIFT
 (2)

	)

1145 
	#RESET_EXT_STAT50_PERIPHERAL_RESET
 \

1146 (1 << 
RESET_EXT_STAT50_PERIPHERAL_RESET_SHIFT
)

	)

1151 
	#RESET_EXT_STAT51_PERIPHERAL_RESET_SHIFT
 (2)

	)

1152 
	#RESET_EXT_STAT51_PERIPHERAL_RESET
 \

1153 (1 << 
RESET_EXT_STAT51_PERIPHERAL_RESET_SHIFT
)

	)

1158 
	#RESET_EXT_STAT52_PERIPHERAL_RESET_SHIFT
 (2)

	)

1159 
	#RESET_EXT_STAT52_PERIPHERAL_RESET
 \

1160 (1 << 
RESET_EXT_STAT52_PERIPHERAL_RESET_SHIFT
)

	)

1165 
	#RESET_EXT_STAT53_PERIPHERAL_RESET_SHIFT
 (2)

	)

1166 
	#RESET_EXT_STAT53_PERIPHERAL_RESET
 \

1167 (1 << 
RESET_EXT_STAT53_PERIPHERAL_RESET_SHIFT
)

	)

1172 
	#RESET_EXT_STAT54_PERIPHERAL_RESET_SHIFT
 (2)

	)

1173 
	#RESET_EXT_STAT54_PERIPHERAL_RESET
 \

1174 (1 << 
RESET_EXT_STAT54_PERIPHERAL_RESET_SHIFT
)

	)

1179 
	#RESET_EXT_STAT55_PERIPHERAL_RESET_SHIFT
 (2)

	)

1180 
	#RESET_EXT_STAT55_PERIPHERAL_RESET
 \

1181 (1 << 
RESET_EXT_STAT55_PERIPHERAL_RESET_SHIFT
)

	)

1186 
	#RESET_EXT_STAT56_PERIPHERAL_RESET_SHIFT
 (2)

	)

1187 
	#RESET_EXT_STAT56_PERIPHERAL_RESET
 \

1188 (1 << 
RESET_EXT_STAT56_PERIPHERAL_RESET_SHIFT
)

	)

1193 
	#RESET_EXT_STAT57_PERIPHERAL_RESET_SHIFT
 (2)

	)

1194 
	#RESET_EXT_STAT57_PERIPHERAL_RESET
 \

1195 (1 << 
RESET_EXT_STAT57_PERIPHERAL_RESET_SHIFT
)

	)

1200 
	#RESET_EXT_STAT58_PERIPHERAL_RESET_SHIFT
 (2)

	)

1201 
	#RESET_EXT_STAT58_PERIPHERAL_RESET
 \

1202 (1 << 
RESET_EXT_STAT58_PERIPHERAL_RESET_SHIFT
)

	)

	@libopencm3/include/libopencm3/lpc43xx/ritimer.h

35 #i‚de‡
LPC43XX_RITIMER_H


36 
	#LPC43XX_RITIMER_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

46 
	#RITIMER_COMPVAL
 
	`MMIO32
(
RITIMER_BASE
 + 0x000)

	)

49 
	#RITIMER_MASK
 
	`MMIO32
(
RITIMER_BASE
 + 0x004)

	)

52 
	#RITIMER_CTRL
 
	`MMIO32
(
RITIMER_BASE
 + 0x008)

	)

55 
	#RITIMER_COUNTER
 
	`MMIO32
(
RITIMER_BASE
 + 0x00C)

	)

	@libopencm3/include/libopencm3/lpc43xx/scu.h

35 #i‚de‡
LPC43XX_SCU_H


36 
	#LPC43XX_SCU_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

46 
	#PIN_GROUP0
 (
SCU_BASE
 + 0x000)

	)

47 
	#PIN_GROUP1
 (
SCU_BASE
 + 0x080)

	)

48 
	#PIN_GROUP2
 (
SCU_BASE
 + 0x100)

	)

49 
	#PIN_GROUP3
 (
SCU_BASE
 + 0x180)

	)

50 
	#PIN_GROUP4
 (
SCU_BASE
 + 0x200)

	)

51 
	#PIN_GROUP5
 (
SCU_BASE
 + 0x280)

	)

52 
	#PIN_GROUP6
 (
SCU_BASE
 + 0x300)

	)

53 
	#PIN_GROUP7
 (
SCU_BASE
 + 0x380)

	)

54 
	#PIN_GROUP8
 (
SCU_BASE
 + 0x400)

	)

55 
	#PIN_GROUP9
 (
SCU_BASE
 + 0x480)

	)

56 
	#PIN_GROUPA
 (
SCU_BASE
 + 0x500)

	)

57 
	#PIN_GROUPB
 (
SCU_BASE
 + 0x580)

	)

58 
	#PIN_GROUPC
 (
SCU_BASE
 + 0x600)

	)

59 
	#PIN_GROUPD
 (
SCU_BASE
 + 0x680)

	)

60 
	#PIN_GROUPE
 (
SCU_BASE
 + 0x700)

	)

61 
	#PIN_GROUPF
 (
SCU_BASE
 + 0x780)

	)

63 
	#PIN0
 0x000

	)

64 
	#PIN1
 0x004

	)

65 
	#PIN2
 0x008

	)

66 
	#PIN3
 0x00C

	)

67 
	#PIN4
 0x010

	)

68 
	#PIN5
 0x014

	)

69 
	#PIN6
 0x018

	)

70 
	#PIN7
 0x01C

	)

71 
	#PIN8
 0x020

	)

72 
	#PIN9
 0x024

	)

73 
	#PIN10
 0x028

	)

74 
	#PIN11
 0x02C

	)

75 
	#PIN12
 0x030

	)

76 
	#PIN13
 0x034

	)

77 
	#PIN14
 0x038

	)

78 
	#PIN15
 0x03C

	)

79 
	#PIN16
 0x040

	)

80 
	#PIN17
 0x044

	)

81 
	#PIN18
 0x048

	)

82 
	#PIN19
 0x04C

	)

83 
	#PIN20
 0x050

	)

90 
	#SCU_SFS
(
group
, 
pö
Ë
	`MMIO32
((groupË+ (pö))

	)

93 
	#SCU_SFSP0_0
 
	`SCU_SFS
(
PIN_GROUP0
, 
PIN0
)

	)

94 
	#SCU_SFSP0_1
 
	`SCU_SFS
(
PIN_GROUP0
, 
PIN1
)

	)

97 
	#SCU_SFSP1_0
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN0
)

	)

98 
	#SCU_SFSP1_1
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN1
)

	)

99 
	#SCU_SFSP1_2
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN2
)

	)

100 
	#SCU_SFSP1_3
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN3
)

	)

101 
	#SCU_SFSP1_4
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN4
)

	)

102 
	#SCU_SFSP1_5
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN5
)

	)

103 
	#SCU_SFSP1_6
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN6
)

	)

104 
	#SCU_SFSP1_7
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN7
)

	)

105 
	#SCU_SFSP1_8
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN8
)

	)

106 
	#SCU_SFSP1_9
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN9
)

	)

107 
	#SCU_SFSP1_10
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN10
)

	)

108 
	#SCU_SFSP1_11
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN11
)

	)

109 
	#SCU_SFSP1_12
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN12
)

	)

110 
	#SCU_SFSP1_13
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN13
)

	)

111 
	#SCU_SFSP1_14
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN14
)

	)

112 
	#SCU_SFSP1_15
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN15
)

	)

113 
	#SCU_SFSP1_16
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN16
)

	)

114 
	#SCU_SFSP1_17
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN17
)

	)

115 
	#SCU_SFSP1_18
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN18
)

	)

116 
	#SCU_SFSP1_19
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN19
)

	)

117 
	#SCU_SFSP1_20
 
	`SCU_SFS
(
PIN_GROUP1
, 
PIN20
)

	)

120 
	#SCU_SFSP2_0
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN0
)

	)

121 
	#SCU_SFSP2_1
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN1
)

	)

122 
	#SCU_SFSP2_2
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN2
)

	)

123 
	#SCU_SFSP2_3
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN3
)

	)

124 
	#SCU_SFSP2_4
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN4
)

	)

125 
	#SCU_SFSP2_5
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN5
)

	)

126 
	#SCU_SFSP2_6
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN6
)

	)

127 
	#SCU_SFSP2_7
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN7
)

	)

128 
	#SCU_SFSP2_8
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN8
)

	)

129 
	#SCU_SFSP2_9
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN9
)

	)

130 
	#SCU_SFSP2_10
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN10
)

	)

131 
	#SCU_SFSP2_11
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN11
)

	)

132 
	#SCU_SFSP2_12
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN12
)

	)

133 
	#SCU_SFSP2_13
 
	`SCU_SFS
(
PIN_GROUP2
, 
PIN13
)

	)

136 
	#SCU_SFSP3_0
 
	`SCU_SFS
(
PIN_GROUP3
, 
PIN0
)

	)

137 
	#SCU_SFSP3_1
 
	`SCU_SFS
(
PIN_GROUP3
, 
PIN1
)

	)

138 
	#SCU_SFSP3_2
 
	`SCU_SFS
(
PIN_GROUP3
, 
PIN2
)

	)

139 
	#SCU_SFSP3_3
 
	`SCU_SFS
(
PIN_GROUP3
, 
PIN3
)

	)

140 
	#SCU_SFSP3_4
 
	`SCU_SFS
(
PIN_GROUP3
, 
PIN4
)

	)

141 
	#SCU_SFSP3_5
 
	`SCU_SFS
(
PIN_GROUP3
, 
PIN5
)

	)

142 
	#SCU_SFSP3_6
 
	`SCU_SFS
(
PIN_GROUP3
, 
PIN6
)

	)

143 
	#SCU_SFSP3_7
 
	`SCU_SFS
(
PIN_GROUP3
, 
PIN7
)

	)

144 
	#SCU_SFSP3_8
 
	`SCU_SFS
(
PIN_GROUP3
, 
PIN8
)

	)

147 
	#SCU_SFSP4_0
 
	`SCU_SFS
(
PIN_GROUP4
, 
PIN0
)

	)

148 
	#SCU_SFSP4_1
 
	`SCU_SFS
(
PIN_GROUP4
, 
PIN1
)

	)

149 
	#SCU_SFSP4_2
 
	`SCU_SFS
(
PIN_GROUP4
, 
PIN2
)

	)

150 
	#SCU_SFSP4_3
 
	`SCU_SFS
(
PIN_GROUP4
, 
PIN3
)

	)

151 
	#SCU_SFSP4_4
 
	`SCU_SFS
(
PIN_GROUP4
, 
PIN4
)

	)

152 
	#SCU_SFSP4_5
 
	`SCU_SFS
(
PIN_GROUP4
, 
PIN5
)

	)

153 
	#SCU_SFSP4_6
 
	`SCU_SFS
(
PIN_GROUP4
, 
PIN6
)

	)

154 
	#SCU_SFSP4_7
 
	`SCU_SFS
(
PIN_GROUP4
, 
PIN7
)

	)

155 
	#SCU_SFSP4_8
 
	`SCU_SFS
(
PIN_GROUP4
, 
PIN8
)

	)

156 
	#SCU_SFSP4_9
 
	`SCU_SFS
(
PIN_GROUP4
, 
PIN9
)

	)

157 
	#SCU_SFSP4_10
 
	`SCU_SFS
(
PIN_GROUP4
, 
PIN10
)

	)

160 
	#SCU_SFSP5_0
 
	`SCU_SFS
(
PIN_GROUP5
, 
PIN0
)

	)

161 
	#SCU_SFSP5_1
 
	`SCU_SFS
(
PIN_GROUP5
, 
PIN1
)

	)

162 
	#SCU_SFSP5_2
 
	`SCU_SFS
(
PIN_GROUP5
, 
PIN2
)

	)

163 
	#SCU_SFSP5_3
 
	`SCU_SFS
(
PIN_GROUP5
, 
PIN3
)

	)

164 
	#SCU_SFSP5_4
 
	`SCU_SFS
(
PIN_GROUP5
, 
PIN4
)

	)

165 
	#SCU_SFSP5_5
 
	`SCU_SFS
(
PIN_GROUP5
, 
PIN5
)

	)

166 
	#SCU_SFSP5_6
 
	`SCU_SFS
(
PIN_GROUP5
, 
PIN6
)

	)

167 
	#SCU_SFSP5_7
 
	`SCU_SFS
(
PIN_GROUP5
, 
PIN7
)

	)

170 
	#SCU_SFSP6_0
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN0
)

	)

171 
	#SCU_SFSP6_1
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN1
)

	)

172 
	#SCU_SFSP6_2
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN2
)

	)

173 
	#SCU_SFSP6_3
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN3
)

	)

174 
	#SCU_SFSP6_4
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN4
)

	)

175 
	#SCU_SFSP6_5
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN5
)

	)

176 
	#SCU_SFSP6_6
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN6
)

	)

177 
	#SCU_SFSP6_7
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN7
)

	)

178 
	#SCU_SFSP6_8
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN8
)

	)

179 
	#SCU_SFSP6_9
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN9
)

	)

180 
	#SCU_SFSP6_10
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN10
)

	)

181 
	#SCU_SFSP6_11
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN11
)

	)

182 
	#SCU_SFSP6_12
 
	`SCU_SFS
(
PIN_GROUP6
, 
PIN12
)

	)

185 
	#SCU_SFSP7_0
 
	`SCU_SFS
(
PIN_GROUP7
, 
PIN0
)

	)

186 
	#SCU_SFSP7_1
 
	`SCU_SFS
(
PIN_GROUP7
, 
PIN1
)

	)

187 
	#SCU_SFSP7_2
 
	`SCU_SFS
(
PIN_GROUP7
, 
PIN2
)

	)

188 
	#SCU_SFSP7_3
 
	`SCU_SFS
(
PIN_GROUP7
, 
PIN3
)

	)

189 
	#SCU_SFSP7_4
 
	`SCU_SFS
(
PIN_GROUP7
, 
PIN4
)

	)

190 
	#SCU_SFSP7_5
 
	`SCU_SFS
(
PIN_GROUP7
, 
PIN5
)

	)

191 
	#SCU_SFSP7_6
 
	`SCU_SFS
(
PIN_GROUP7
, 
PIN6
)

	)

192 
	#SCU_SFSP7_7
 
	`SCU_SFS
(
PIN_GROUP7
, 
PIN7
)

	)

195 
	#SCU_SFSP8_0
 
	`SCU_SFS
(
PIN_GROUP8
, 
PIN0
)

	)

196 
	#SCU_SFSP8_1
 
	`SCU_SFS
(
PIN_GROUP8
, 
PIN1
)

	)

197 
	#SCU_SFSP8_2
 
	`SCU_SFS
(
PIN_GROUP8
, 
PIN2
)

	)

198 
	#SCU_SFSP8_3
 
	`SCU_SFS
(
PIN_GROUP8
, 
PIN3
)

	)

199 
	#SCU_SFSP8_4
 
	`SCU_SFS
(
PIN_GROUP8
, 
PIN4
)

	)

200 
	#SCU_SFSP8_5
 
	`SCU_SFS
(
PIN_GROUP8
, 
PIN5
)

	)

201 
	#SCU_SFSP8_6
 
	`SCU_SFS
(
PIN_GROUP8
, 
PIN6
)

	)

202 
	#SCU_SFSP8_7
 
	`SCU_SFS
(
PIN_GROUP8
, 
PIN7
)

	)

203 
	#SCU_SFSP8_8
 
	`SCU_SFS
(
PIN_GROUP8
, 
PIN8
)

	)

206 
	#SCU_SFSP9_0
 
	`SCU_SFS
(
PIN_GROUP9
, 
PIN0
)

	)

207 
	#SCU_SFSP9_1
 
	`SCU_SFS
(
PIN_GROUP9
, 
PIN1
)

	)

208 
	#SCU_SFSP9_2
 
	`SCU_SFS
(
PIN_GROUP9
, 
PIN2
)

	)

209 
	#SCU_SFSP9_3
 
	`SCU_SFS
(
PIN_GROUP9
, 
PIN3
)

	)

210 
	#SCU_SFSP9_4
 
	`SCU_SFS
(
PIN_GROUP9
, 
PIN4
)

	)

211 
	#SCU_SFSP9_5
 
	`SCU_SFS
(
PIN_GROUP9
, 
PIN5
)

	)

212 
	#SCU_SFSP9_6
 
	`SCU_SFS
(
PIN_GROUP9
, 
PIN6
)

	)

215 
	#SCU_SFSPA_0
 
	`SCU_SFS
(
PIN_GROUPA
, 
PIN0
)

	)

216 
	#SCU_SFSPA_1
 
	`SCU_SFS
(
PIN_GROUPA
, 
PIN1
)

	)

217 
	#SCU_SFSPA_2
 
	`SCU_SFS
(
PIN_GROUPA
, 
PIN2
)

	)

218 
	#SCU_SFSPA_3
 
	`SCU_SFS
(
PIN_GROUPA
, 
PIN3
)

	)

219 
	#SCU_SFSPA_4
 
	`SCU_SFS
(
PIN_GROUPA
, 
PIN4
)

	)

222 
	#SCU_SFSPB_0
 
	`SCU_SFS
(
PIN_GROUPB
, 
PIN0
)

	)

223 
	#SCU_SFSPB_1
 
	`SCU_SFS
(
PIN_GROUPB
, 
PIN1
)

	)

224 
	#SCU_SFSPB_2
 
	`SCU_SFS
(
PIN_GROUPB
, 
PIN2
)

	)

225 
	#SCU_SFSPB_3
 
	`SCU_SFS
(
PIN_GROUPB
, 
PIN3
)

	)

226 
	#SCU_SFSPB_4
 
	`SCU_SFS
(
PIN_GROUPB
, 
PIN4
)

	)

227 
	#SCU_SFSPB_5
 
	`SCU_SFS
(
PIN_GROUPB
, 
PIN5
)

	)

228 
	#SCU_SFSPB_6
 
	`SCU_SFS
(
PIN_GROUPB
, 
PIN6
)

	)

231 
	#SCU_SFSPC_0
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN0
)

	)

232 
	#SCU_SFSPC_1
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN1
)

	)

233 
	#SCU_SFSPC_2
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN2
)

	)

234 
	#SCU_SFSPC_3
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN3
)

	)

235 
	#SCU_SFSPC_4
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN4
)

	)

236 
	#SCU_SFSPC_5
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN5
)

	)

237 
	#SCU_SFSPC_6
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN6
)

	)

238 
	#SCU_SFSPC_7
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN7
)

	)

239 
	#SCU_SFSPC_8
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN8
)

	)

240 
	#SCU_SFSPC_9
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN9
)

	)

241 
	#SCU_SFSPC_10
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN10
)

	)

242 
	#SCU_SFSPC_11
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN11
)

	)

243 
	#SCU_SFSPC_12
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN12
)

	)

244 
	#SCU_SFSPC_13
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN13
)

	)

245 
	#SCU_SFSPC_14
 
	`SCU_SFS
(
PIN_GROUPC
, 
PIN14
)

	)

248 
	#SCU_SFSPD_0
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN0
)

	)

249 
	#SCU_SFSPD_1
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN1
)

	)

250 
	#SCU_SFSPD_2
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN2
)

	)

251 
	#SCU_SFSPD_3
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN3
)

	)

252 
	#SCU_SFSPD_4
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN4
)

	)

253 
	#SCU_SFSPD_5
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN5
)

	)

254 
	#SCU_SFSPD_6
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN6
)

	)

255 
	#SCU_SFSPD_7
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN7
)

	)

256 
	#SCU_SFSPD_8
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN8
)

	)

257 
	#SCU_SFSPD_9
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN9
)

	)

258 
	#SCU_SFSPD_10
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN10
)

	)

259 
	#SCU_SFSPD_11
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN11
)

	)

260 
	#SCU_SFSPD_12
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN12
)

	)

261 
	#SCU_SFSPD_13
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN13
)

	)

262 
	#SCU_SFSPD_14
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN14
)

	)

263 
	#SCU_SFSPD_15
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN15
)

	)

264 
	#SCU_SFSPD_16
 
	`SCU_SFS
(
PIN_GROUPD
, 
PIN16
)

	)

267 
	#SCU_SFSPE_0
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN0
)

	)

268 
	#SCU_SFSPE_1
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN1
)

	)

269 
	#SCU_SFSPE_2
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN2
)

	)

270 
	#SCU_SFSPE_3
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN3
)

	)

271 
	#SCU_SFSPE_4
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN4
)

	)

272 
	#SCU_SFSPE_5
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN5
)

	)

273 
	#SCU_SFSPE_6
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN6
)

	)

274 
	#SCU_SFSPE_7
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN7
)

	)

275 
	#SCU_SFSPE_8
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN8
)

	)

276 
	#SCU_SFSPE_9
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN9
)

	)

277 
	#SCU_SFSPE_10
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN10
)

	)

278 
	#SCU_SFSPE_11
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN11
)

	)

279 
	#SCU_SFSPE_12
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN12
)

	)

280 
	#SCU_SFSPE_13
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN13
)

	)

281 
	#SCU_SFSPE_14
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN14
)

	)

282 
	#SCU_SFSPE_15
 
	`SCU_SFS
(
PIN_GROUPE
, 
PIN15
)

	)

285 
	#SCU_SFSPF_0
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN0
)

	)

286 
	#SCU_SFSPF_1
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN1
)

	)

287 
	#SCU_SFSPF_2
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN2
)

	)

288 
	#SCU_SFSPF_3
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN3
)

	)

289 
	#SCU_SFSPF_4
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN4
)

	)

290 
	#SCU_SFSPF_5
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN5
)

	)

291 
	#SCU_SFSPF_6
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN6
)

	)

292 
	#SCU_SFSPF_7
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN7
)

	)

293 
	#SCU_SFSPF_8
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN8
)

	)

294 
	#SCU_SFSPF_9
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN9
)

	)

295 
	#SCU_SFSPF_10
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN10
)

	)

296 
	#SCU_SFSPF_11
 
	`SCU_SFS
(
PIN_GROUPF
, 
PIN11
)

	)

299 
	#SCU_SFSCLK0
 
	`MMIO32
(
SCU_BASE
 + 0xC00)

	)

300 
	#SCU_SFSCLK1
 
	`MMIO32
(
SCU_BASE
 + 0xC04)

	)

301 
	#SCU_SFSCLK2
 
	`MMIO32
(
SCU_BASE
 + 0xC08)

	)

302 
	#SCU_SFSCLK3
 
	`MMIO32
(
SCU_BASE
 + 0xC0C)

	)

305 
	#SCU_SFSUSB
 
	`MMIO32
(
SCU_BASE
 + 0xC80)

	)

306 
	#SCU_SFSI2C0
 
	`MMIO32
(
SCU_BASE
 + 0xC84)

	)

311 
	#SCU_ENAIO0
 
	`MMIO32
(
SCU_BASE
 + 0xC88)

	)

314 
	#SCU_ENAIO1
 
	`MMIO32
(
SCU_BASE
 + 0xC8C)

	)

317 
	#SCU_ENAIO2
 
	`MMIO32
(
SCU_BASE
 + 0xC90)

	)

320 
	#SCU_EMCDELAYCLK
 
	`MMIO32
(
SCU_BASE
 + 0xD00)

	)

325 
	#SCU_PINTSEL0
 
	`MMIO32
(
SCU_BASE
 + 0xE00)

	)

328 
	#SCU_PINTSEL1
 
	`MMIO32
(
SCU_BASE
 + 0xE04)

	)

338 
	#SCU_SCL_EFP
 (
BIT0
)

	)

347 
	#SCU_SCL_EHD
 (
BIT2
)

	)

356 
	#SCU_SCL_EZI_EN
 (
BIT3
)

	)

367 
	#SCU_SCL_ZIF_DIS
 (
BIT7
)

	)

374 
	#SCU_SDA_EFP
 (
BIT8
)

	)

383 
	#SCU_SDA_EHD
 (
BIT10
)

	)

392 
	#SCU_SDA_EZI_EN
 (
BIT11
)

	)

403 
	#SCU_SDA_ZIF_DIS
 (
BIT15
)

	)

406 
	#SCU_I2C0_NOMINAL
 (
SCU_SCL_EZI_EN
 | 
SCU_SDA_EZI_EN
)

	)

409 
	#SCU_I2C0_FAST
 (
SCU_SCL_EFP
 | 
SCU_SCL_EHD
 | 
SCU_SCL_EZI_EN
 | \

410 
SCU_SCL_ZIF_DIS
 | 
SCU_SDA_EFP
 | 
SCU_SDA_EHD
 | \

411 
SCU_SDA_EZI_EN
)

	)

445 
	mP0_0
 = (
PIN_GROUP0
+
PIN0
),

446 
	mP0_1
 = (
PIN_GROUP0
+
PIN1
),

449 
	mP1_0
 = (
PIN_GROUP1
+
PIN0
),

450 
	mP1_1
 = (
PIN_GROUP1
+
PIN1
),

451 
	mP1_2
 = (
PIN_GROUP1
+
PIN2
),

452 
	mP1_3
 = (
PIN_GROUP1
+
PIN3
),

453 
	mP1_4
 = (
PIN_GROUP1
+
PIN4
),

454 
	mP1_5
 = (
PIN_GROUP1
+
PIN5
),

455 
	mP1_6
 = (
PIN_GROUP1
+
PIN6
),

456 
	mP1_7
 = (
PIN_GROUP1
+
PIN7
),

457 
	mP1_8
 = (
PIN_GROUP1
+
PIN8
),

458 
	mP1_9
 = (
PIN_GROUP1
+
PIN9
),

459 
	mP1_10
 = (
PIN_GROUP1
+
PIN10
),

460 
	mP1_11
 = (
PIN_GROUP1
+
PIN11
),

461 
	mP1_12
 = (
PIN_GROUP1
+
PIN12
),

462 
	mP1_13
 = (
PIN_GROUP1
+
PIN13
),

463 
	mP1_14
 = (
PIN_GROUP1
+
PIN14
),

464 
	mP1_15
 = (
PIN_GROUP1
+
PIN15
),

465 
	mP1_16
 = (
PIN_GROUP1
+
PIN16
),

468 
	mP1_17
 = (
PIN_GROUP1
+
PIN17
),

470 
	mP1_18
 = (
PIN_GROUP1
+
PIN18
),

471 
	mP1_19
 = (
PIN_GROUP1
+
PIN19
),

472 
	mP1_20
 = (
PIN_GROUP1
+
PIN20
),

475 
	mP2_0
 = (
PIN_GROUP2
+
PIN0
),

476 
	mP2_1
 = (
PIN_GROUP2
+
PIN1
),

477 
	mP2_2
 = (
PIN_GROUP2
+
PIN2
),

480 
	mP2_3
 = (
PIN_GROUP2
+
PIN3
),

481 
	mP2_4
 = (
PIN_GROUP2
+
PIN4
),

482 
	mP2_5
 = (
PIN_GROUP2
+
PIN5
),

484 
	mP2_6
 = (
PIN_GROUP2
+
PIN6
),

485 
	mP2_7
 = (
PIN_GROUP2
+
PIN7
),

486 
	mP2_8
 = (
PIN_GROUP2
+
PIN8
),

487 
	mP2_9
 = (
PIN_GROUP2
+
PIN9
),

488 
	mP2_10
 = (
PIN_GROUP2
+
PIN10
),

489 
	mP2_11
 = (
PIN_GROUP2
+
PIN11
),

490 
	mP2_12
 = (
PIN_GROUP2
+
PIN12
),

491 
	mP2_13
 = (
PIN_GROUP2
+
PIN13
),

494 
	mP3_0
 = (
PIN_GROUP3
+
PIN0
),

495 
	mP3_1
 = (
PIN_GROUP3
+
PIN1
),

496 
	mP3_2
 = (
PIN_GROUP3
+
PIN2
),

499 
	mP3_3
 = (
PIN_GROUP3
+
PIN3
),

501 
	mP3_4
 = (
PIN_GROUP3
+
PIN4
),

502 
	mP3_5
 = (
PIN_GROUP3
+
PIN5
),

503 
	mP3_6
 = (
PIN_GROUP3
+
PIN6
),

504 
	mP3_7
 = (
PIN_GROUP3
+
PIN7
),

505 
	mP3_8
 = (
PIN_GROUP3
+
PIN8
),

508 
	mP4_0
 = (
PIN_GROUP4
+
PIN0
),

509 
	mP4_1
 = (
PIN_GROUP4
+
PIN1
),

510 
	mP4_2
 = (
PIN_GROUP4
+
PIN2
),

511 
	mP4_3
 = (
PIN_GROUP4
+
PIN3
),

512 
	mP4_4
 = (
PIN_GROUP4
+
PIN4
),

513 
	mP4_5
 = (
PIN_GROUP4
+
PIN5
),

514 
	mP4_6
 = (
PIN_GROUP4
+
PIN6
),

515 
	mP4_7
 = (
PIN_GROUP4
+
PIN7
),

516 
	mP4_8
 = (
PIN_GROUP4
+
PIN8
),

517 
	mP4_9
 = (
PIN_GROUP4
+
PIN9
),

518 
	mP4_10
 = (
PIN_GROUP4
+
PIN10
),

521 
	mP5_0
 = (
PIN_GROUP5
+
PIN0
),

522 
	mP5_1
 = (
PIN_GROUP5
+
PIN1
),

523 
	mP5_2
 = (
PIN_GROUP5
+
PIN2
),

524 
	mP5_3
 = (
PIN_GROUP5
+
PIN3
),

525 
	mP5_4
 = (
PIN_GROUP5
+
PIN4
),

526 
	mP5_5
 = (
PIN_GROUP5
+
PIN5
),

527 
	mP5_6
 = (
PIN_GROUP5
+
PIN6
),

528 
	mP5_7
 = (
PIN_GROUP5
+
PIN7
),

531 
	mP6_0
 = (
PIN_GROUP6
+
PIN0
),

532 
	mP6_1
 = (
PIN_GROUP6
+
PIN1
),

533 
	mP6_2
 = (
PIN_GROUP6
+
PIN2
),

534 
	mP6_3
 = (
PIN_GROUP6
+
PIN3
),

535 
	mP6_4
 = (
PIN_GROUP6
+
PIN4
),

536 
	mP6_5
 = (
PIN_GROUP6
+
PIN5
),

537 
	mP6_6
 = (
PIN_GROUP6
+
PIN6
),

538 
	mP6_7
 = (
PIN_GROUP6
+
PIN7
),

539 
	mP6_8
 = (
PIN_GROUP6
+
PIN8
),

540 
	mP6_9
 = (
PIN_GROUP6
+
PIN9
),

541 
	mP6_10
 = (
PIN_GROUP6
+
PIN10
),

542 
	mP6_11
 = (
PIN_GROUP6
+
PIN11
),

543 
	mP6_12
 = (
PIN_GROUP6
+
PIN12
),

546 
	mP7_0
 = (
PIN_GROUP7
+
PIN0
),

547 
	mP7_1
 = (
PIN_GROUP7
+
PIN1
),

548 
	mP7_2
 = (
PIN_GROUP7
+
PIN2
),

549 
	mP7_3
 = (
PIN_GROUP7
+
PIN3
),

550 
	mP7_4
 = (
PIN_GROUP7
+
PIN4
),

551 
	mP7_5
 = (
PIN_GROUP7
+
PIN5
),

552 
	mP7_6
 = (
PIN_GROUP7
+
PIN6
),

553 
	mP7_7
 = (
PIN_GROUP7
+
PIN7
),

557 
	mP8_0
 = (
PIN_GROUP8
+
PIN0
),

558 
	mP8_1
 = (
PIN_GROUP8
+
PIN1
),

559 
	mP8_2
 = (
PIN_GROUP8
+
PIN2
),

561 
	mP8_3
 = (
PIN_GROUP8
+
PIN3
),

562 
	mP8_4
 = (
PIN_GROUP8
+
PIN4
),

563 
	mP8_5
 = (
PIN_GROUP8
+
PIN5
),

564 
	mP8_6
 = (
PIN_GROUP8
+
PIN6
),

565 
	mP8_7
 = (
PIN_GROUP8
+
PIN7
),

566 
	mP8_8
 = (
PIN_GROUP8
+
PIN8
),

569 
	mP9_0
 = (
PIN_GROUP9
+
PIN0
),

570 
	mP9_1
 = (
PIN_GROUP9
+
PIN1
),

571 
	mP9_2
 = (
PIN_GROUP9
+
PIN2
),

572 
	mP9_3
 = (
PIN_GROUP9
+
PIN3
),

573 
	mP9_4
 = (
PIN_GROUP9
+
PIN4
),

574 
	mP9_5
 = (
PIN_GROUP9
+
PIN5
),

575 
	mP9_6
 = (
PIN_GROUP9
+
PIN6
),

578 
	mPA_0
 = (
PIN_GROUPA
+
PIN0
),

580 
	mPA_1
 = (
PIN_GROUPA
+
PIN1
),

581 
	mPA_2
 = (
PIN_GROUPA
+
PIN2
),

582 
	mPA_3
 = (
PIN_GROUPA
+
PIN3
),

583 
	mPA_4
 = (
PIN_GROUPA
+
PIN4
),

586 
	mPB_0
 = (
PIN_GROUPB
+
PIN0
),

587 
	mPB_1
 = (
PIN_GROUPB
+
PIN1
),

588 
	mPB_2
 = (
PIN_GROUPB
+
PIN2
),

589 
	mPB_3
 = (
PIN_GROUPB
+
PIN3
),

590 
	mPB_4
 = (
PIN_GROUPB
+
PIN4
),

591 
	mPB_5
 = (
PIN_GROUPB
+
PIN5
),

592 
	mPB_6
 = (
PIN_GROUPB
+
PIN6
),

595 
	mPC_0
 = (
PIN_GROUPC
+
PIN0
),

596 
	mPC_1
 = (
PIN_GROUPC
+
PIN1
),

597 
	mPC_2
 = (
PIN_GROUPC
+
PIN2
),

598 
	mPC_3
 = (
PIN_GROUPC
+
PIN3
),

599 
	mPC_4
 = (
PIN_GROUPC
+
PIN4
),

600 
	mPC_5
 = (
PIN_GROUPC
+
PIN5
),

601 
	mPC_6
 = (
PIN_GROUPC
+
PIN6
),

602 
	mPC_7
 = (
PIN_GROUPC
+
PIN7
),

603 
	mPC_8
 = (
PIN_GROUPC
+
PIN8
),

604 
	mPC_9
 = (
PIN_GROUPC
+
PIN9
),

605 
	mPC_10
 = (
PIN_GROUPC
+
PIN10
),

606 
	mPC_11
 = (
PIN_GROUPC
+
PIN11
),

607 
	mPC_12
 = (
PIN_GROUPC
+
PIN12
),

608 
	mPC_13
 = (
PIN_GROUPC
+
PIN13
),

609 
	mPC_14
 = (
PIN_GROUPC
+
PIN14
),

614 
	mPD_0
 = (
PIN_GROUPD
+
PIN0
),

615 
	mPD_1
 = (
PIN_GROUPD
+
PIN1
),

616 
	mPD_2
 = (
PIN_GROUPD
+
PIN2
),

617 
	mPD_3
 = (
PIN_GROUPD
+
PIN3
),

618 
	mPD_4
 = (
PIN_GROUPD
+
PIN4
),

619 
	mPD_5
 = (
PIN_GROUPD
+
PIN5
),

620 
	mPD_6
 = (
PIN_GROUPD
+
PIN6
),

621 
	mPD_7
 = (
PIN_GROUPD
+
PIN7
),

622 
	mPD_8
 = (
PIN_GROUPD
+
PIN8
),

623 
	mPD_9
 = (
PIN_GROUPD
+
PIN9
),

624 
	mPD_10
 = (
PIN_GROUPD
+
PIN10
),

625 
	mPD_11
 = (
PIN_GROUPD
+
PIN11
),

626 
	mPD_12
 = (
PIN_GROUPD
+
PIN12
),

627 
	mPD_13
 = (
PIN_GROUPD
+
PIN13
),

628 
	mPD_14
 = (
PIN_GROUPD
+
PIN14
),

629 
	mPD_15
 = (
PIN_GROUPD
+
PIN15
),

630 
	mPD_16
 = (
PIN_GROUPD
+
PIN16
),

633 
	mPE_0
 = (
PIN_GROUPE
+
PIN0
),

634 
	mPE_1
 = (
PIN_GROUPE
+
PIN1
),

635 
	mPE_2
 = (
PIN_GROUPE
+
PIN2
),

636 
	mPE_3
 = (
PIN_GROUPE
+
PIN3
),

637 
	mPE_4
 = (
PIN_GROUPE
+
PIN4
),

638 
	mPE_5
 = (
PIN_GROUPE
+
PIN5
),

639 
	mPE_6
 = (
PIN_GROUPE
+
PIN6
),

640 
	mPE_7
 = (
PIN_GROUPE
+
PIN7
),

641 
	mPE_8
 = (
PIN_GROUPE
+
PIN8
),

642 
	mPE_9
 = (
PIN_GROUPE
+
PIN9
),

643 
	mPE_10
 = (
PIN_GROUPE
+
PIN10
),

644 
	mPE_11
 = (
PIN_GROUPE
+
PIN11
),

645 
	mPE_12
 = (
PIN_GROUPE
+
PIN12
),

646 
	mPE_13
 = (
PIN_GROUPE
+
PIN13
),

647 
	mPE_14
 = (
PIN_GROUPE
+
PIN14
),

648 
	mPE_15
 = (
PIN_GROUPE
+
PIN15
),

651 
	mPF_0
 = (
PIN_GROUPF
+
PIN0
),

652 
	mPF_1
 = (
PIN_GROUPF
+
PIN1
),

653 
	mPF_2
 = (
PIN_GROUPF
+
PIN2
),

654 
	mPF_3
 = (
PIN_GROUPF
+
PIN3
),

655 
	mPF_4
 = (
PIN_GROUPF
+
PIN4
),

656 
	mPF_5
 = (
PIN_GROUPF
+
PIN5
),

657 
	mPF_6
 = (
PIN_GROUPF
+
PIN6
),

658 
	mPF_7
 = (
PIN_GROUPF
+
PIN7
),

659 
	mPF_8
 = (
PIN_GROUPF
+
PIN8
),

660 
	mPF_9
 = (
PIN_GROUPF
+
PIN9
),

661 
	mPF_10
 = (
PIN_GROUPF
+
PIN10
),

662 
	mPF_11
 = (
PIN_GROUPF
+
PIN11
),

665 
	mCLK0
 = (
SCU_BASE
 + 0xC00),

666 
	mCLK1
 = (
SCU_BASE
 + 0xC04),

667 
	mCLK2
 = (
SCU_BASE
 + 0xC08),

668 
	mCLK3
 = (
SCU_BASE
 + 0xC0C)

670 } 
	tscu_gΩ_pö_t
;

680 
	#SCU_CONF_FUNCTION0
 (0x0)

	)

681 
	#SCU_CONF_FUNCTION1
 (0x1)

	)

682 
	#SCU_CONF_FUNCTION2
 (0x2)

	)

683 
	#SCU_CONF_FUNCTION3
 (0x3)

	)

684 
	#SCU_CONF_FUNCTION4
 (0x4)

	)

685 
	#SCU_CONF_FUNCTION5
 (0x5)

	)

686 
	#SCU_CONF_FUNCTION6
 (0x6)

	)

687 
	#SCU_CONF_FUNCTION7
 (0x7)

	)

694 
	#SCU_CONF_EPD_EN_PULLDOWN
 (
BIT3
)

	)

701 
	#SCU_CONF_EPUN_DIS_PULLUP
 (
BIT4
)

	)

708 
	#SCU_CONF_EHS_FAST
 (
BIT5
)

	)

718 
	#SCU_CONF_EZI_EN_IN_BUFFER
 (
BIT6
)

	)

725 
	#SCU_CONF_ZIF_DIS_IN_GLITCH_FILT
 (
BIT7
)

	)

731 
	#SCU_CONF_EHD_NORMAL_DRIVE_8MILLIA
 (0x100)

	)

732 
	#SCU_CONF_EHD_NORMAL_DRIVE_14MILLIA
 (0x200)

	)

733 
	#SCU_CONF_EHD_NORMAL_DRIVE_20MILLIA
 (0x300)

	)

738 
	#SCU_EMC_IO
 (
SCU_CONF_EPD_EN_PULLDOWN
 | \

739 
SCU_CONF_EHS_FAST
 | \

740 
SCU_CONF_EZI_EN_IN_BUFFER
 | \

741 
SCU_CONF_ZIF_DIS_IN_GLITCH_FILT
)

	)

742 
	#SCU_LCD
 (
SCU_CONF_EPUN_DIS_PULLUP
 | \

743 
SCU_CONF_EHS_FAST
 | \

744 
SCU_CONF_EZI_EN_IN_BUFFER
 | \

745 
SCU_CONF_ZIF_DIS_IN_GLITCH_FILT
)

	)

746 
	#SCU_CLK_IN
 (
SCU_CONF_EPD_EN_PULLDOWN
 | \

747 
SCU_CONF_EHS_FAST
 | \

748 
SCU_CONF_EZI_EN_IN_BUFFER
 | \

749 
SCU_CONF_ZIF_DIS_IN_GLITCH_FILT
)

	)

750 
	#SCU_CLK_OUT
 (
SCU_CONF_EPD_EN_PULLDOWN
 | \

751 
SCU_CONF_EHS_FAST
 | \

752 
SCU_CONF_EZI_EN_IN_BUFFER
 | \

753 
SCU_CONF_ZIF_DIS_IN_GLITCH_FILT
)

	)

754 
	#SCU_GPIO_PUP
 (
SCU_CONF_EZI_EN_IN_BUFFER
)

	)

755 
	#SCU_GPIO_PDN
 (
SCU_CONF_EPUN_DIS_PULLUP
 | \

756 
SCU_CONF_EPD_EN_PULLDOWN
 | \

757 
SCU_CONF_EZI_EN_IN_BUFFER
)

	)

758 
	#SCU_GPIO_NOPULL
 (
SCU_CONF_EPUN_DIS_PULLUP
 | \

759 
SCU_CONF_EZI_EN_IN_BUFFER
)

	)

760 
	#SCU_GPIO_FAST
 (
SCU_CONF_EPUN_DIS_PULLUP
 | \

761 
SCU_CONF_EHS_FAST
 | \

762 
SCU_CONF_EZI_EN_IN_BUFFER
 | \

763 
SCU_CONF_ZIF_DIS_IN_GLITCH_FILT
)

	)

764 
	#SCU_UART_RX_TX
 (
SCU_CONF_EPUN_DIS_PULLUP
 | \

765 
SCU_CONF_EPD_EN_PULLDOWN
 | \

766 
SCU_CONF_EZI_EN_IN_BUFFER
)

	)

767 
	#SCU_SSP_IO
 (
SCU_CONF_EPUN_DIS_PULLUP
 | \

768 
SCU_CONF_EHS_FAST
 | \

769 
SCU_CONF_EZI_EN_IN_BUFFER
 | \

770 
SCU_CONF_ZIF_DIS_IN_GLITCH_FILT
)

	)

772 
BEGIN_DECLS


774 
scu_pömux
(
scu_gΩ_pö_t
 
group_pö
, 
uöt32_t
 
scu_c⁄f
);

776 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc43xx/sdio.h

34 #i‚de‡
LPC43XX_SDIO_H


35 
	#LPC43XX_SDIO_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

45 
	#SDIO_CTRL
 
	`MMIO32
(
SDIO_BASE
 + 0x000)

	)

48 
	#SDIO_PWREN
 
	`MMIO32
(
SDIO_BASE
 + 0x004)

	)

51 
	#SDIO_CLKDIV
 
	`MMIO32
(
SDIO_BASE
 + 0x008)

	)

54 
	#SDIO_CLKSRC
 
	`MMIO32
(
SDIO_BASE
 + 0x00C)

	)

57 
	#SDIO_CLKENA
 
	`MMIO32
(
SDIO_BASE
 + 0x010)

	)

60 
	#SDIO_TMOUT
 
	`MMIO32
(
SDIO_BASE
 + 0x014)

	)

63 
	#SDIO_CTYPE
 
	`MMIO32
(
SDIO_BASE
 + 0x018)

	)

66 
	#SDIO_BLKSIZ
 
	`MMIO32
(
SDIO_BASE
 + 0x01C)

	)

69 
	#SDIO_BYTCNT
 
	`MMIO32
(
SDIO_BASE
 + 0x020)

	)

72 
	#SDIO_INTMASK
 
	`MMIO32
(
SDIO_BASE
 + 0x024)

	)

75 
	#SDIO_CMDARG
 
	`MMIO32
(
SDIO_BASE
 + 0x028)

	)

78 
	#SDIO_CMD
 
	`MMIO32
(
SDIO_BASE
 + 0x02C)

	)

81 
	#SDIO_RESP0
 
	`MMIO32
(
SDIO_BASE
 + 0x030)

	)

84 
	#SDIO_RESP1
 
	`MMIO32
(
SDIO_BASE
 + 0x034)

	)

87 
	#SDIO_RESP2
 
	`MMIO32
(
SDIO_BASE
 + 0x038)

	)

90 
	#SDIO_RESP3
 
	`MMIO32
(
SDIO_BASE
 + 0x03C)

	)

93 
	#SDIO_MINTSTS
 
	`MMIO32
(
SDIO_BASE
 + 0x040)

	)

96 
	#SDIO_RINTSTS
 
	`MMIO32
(
SDIO_BASE
 + 0x044)

	)

99 
	#SDIO_STATUS
 
	`MMIO32
(
SDIO_BASE
 + 0x048)

	)

102 
	#SDIO_FIFOTH
 
	`MMIO32
(
SDIO_BASE
 + 0x04C)

	)

105 
	#SDIO_CDETECT
 
	`MMIO32
(
SDIO_BASE
 + 0x050)

	)

108 
	#SDIO_WRTPRT
 
	`MMIO32
(
SDIO_BASE
 + 0x054)

	)

111 
	#SDIO_TCBCNT
 
	`MMIO32
(
SDIO_BASE
 + 0x05C)

	)

114 
	#SDIO_TBBCNT
 
	`MMIO32
(
SDIO_BASE
 + 0x060)

	)

117 
	#SDIO_DEBNCE
 
	`MMIO32
(
SDIO_BASE
 + 0x064)

	)

120 
	#SDIO_UHS_REG
 
	`MMIO32
(
SDIO_BASE
 + 0x074)

	)

123 
	#SDIO_RST_N
 
	`MMIO32
(
SDIO_BASE
 + 0x078)

	)

126 
	#SDIO_BMOD
 
	`MMIO32
(
SDIO_BASE
 + 0x080)

	)

129 
	#SDIO_PLDMND
 
	`MMIO32
(
SDIO_BASE
 + 0x084)

	)

132 
	#SDIO_DBADDR
 
	`MMIO32
(
SDIO_BASE
 + 0x088)

	)

135 
	#SDIO_IDSTS
 
	`MMIO32
(
SDIO_BASE
 + 0x08C)

	)

138 
	#SDIO_IDINTEN
 
	`MMIO32
(
SDIO_BASE
 + 0x090)

	)

141 
	#SDIO_DSCADDR
 
	`MMIO32
(
SDIO_BASE
 + 0x094)

	)

144 
	#SDIO_BUFADDR
 
	`MMIO32
(
SDIO_BASE
 + 0x098)

	)

147 
	#SDIO_DATA
 
	`MMIO32
(
SDIO_BASE
 + 0x100)

	)

	@libopencm3/include/libopencm3/lpc43xx/sgpio.h

51 #i‚de‡
LPC43XX_SGPIO_H


52 
	#LPC43XX_SGPIO_H


	)

56 
	~<lib›ícm3/cm3/comm⁄.h
>

57 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

62 
	#SGPIO_OUT_MUX_CFG
(
pö
Ë
	`MMIO32
(
SGPIO_PORT_BASE
 + (pö * 0x04))

	)

63 
	#SGPIO_OUT_MUX_CFG0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x00)

	)

64 
	#SGPIO_OUT_MUX_CFG1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x04)

	)

65 
	#SGPIO_OUT_MUX_CFG2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x08)

	)

66 
	#SGPIO_OUT_MUX_CFG3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x0C)

	)

67 
	#SGPIO_OUT_MUX_CFG4
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x10)

	)

68 
	#SGPIO_OUT_MUX_CFG5
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x14)

	)

69 
	#SGPIO_OUT_MUX_CFG6
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x18)

	)

70 
	#SGPIO_OUT_MUX_CFG7
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1C)

	)

71 
	#SGPIO_OUT_MUX_CFG8
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x20)

	)

72 
	#SGPIO_OUT_MUX_CFG9
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x24)

	)

73 
	#SGPIO_OUT_MUX_CFG10
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x28)

	)

74 
	#SGPIO_OUT_MUX_CFG11
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x2C)

	)

75 
	#SGPIO_OUT_MUX_CFG12
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x30)

	)

76 
	#SGPIO_OUT_MUX_CFG13
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x34)

	)

77 
	#SGPIO_OUT_MUX_CFG14
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x38)

	)

78 
	#SGPIO_OUT_MUX_CFG15
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x3C)

	)

81 
	#SGPIO_MUX_CFG
(
¶i˚
Ë
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x40 + \

82 (
¶i˚
 * 0x04))

	)

83 
	#SGPIO_MUX_CFG0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x40)

	)

84 
	#SGPIO_MUX_CFG1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x44)

	)

85 
	#SGPIO_MUX_CFG2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x48)

	)

86 
	#SGPIO_MUX_CFG3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x4C)

	)

87 
	#SGPIO_MUX_CFG4
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x50)

	)

88 
	#SGPIO_MUX_CFG5
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x54)

	)

89 
	#SGPIO_MUX_CFG6
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x58)

	)

90 
	#SGPIO_MUX_CFG7
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x5C)

	)

91 
	#SGPIO_MUX_CFG8
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x60)

	)

92 
	#SGPIO_MUX_CFG9
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x64)

	)

93 
	#SGPIO_MUX_CFG10
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x68)

	)

94 
	#SGPIO_MUX_CFG11
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x6C)

	)

95 
	#SGPIO_MUX_CFG12
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x70)

	)

96 
	#SGPIO_MUX_CFG13
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x74)

	)

97 
	#SGPIO_MUX_CFG14
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x78)

	)

98 
	#SGPIO_MUX_CFG15
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x7C)

	)

101 
	#SGPIO_SLICE_MUX_CFG
(
¶i˚
Ë
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x80 + \

102 (
¶i˚
 * 0x04))

	)

103 
	#SGPIO_SLICE_MUX_CFG0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x80)

	)

104 
	#SGPIO_SLICE_MUX_CFG1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x84)

	)

105 
	#SGPIO_SLICE_MUX_CFG2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x88)

	)

106 
	#SGPIO_SLICE_MUX_CFG3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x8C)

	)

107 
	#SGPIO_SLICE_MUX_CFG4
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x90)

	)

108 
	#SGPIO_SLICE_MUX_CFG5
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x94)

	)

109 
	#SGPIO_SLICE_MUX_CFG6
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x98)

	)

110 
	#SGPIO_SLICE_MUX_CFG7
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x9C)

	)

111 
	#SGPIO_SLICE_MUX_CFG8
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xA0)

	)

112 
	#SGPIO_SLICE_MUX_CFG9
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xA4)

	)

113 
	#SGPIO_SLICE_MUX_CFG10
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xA8)

	)

114 
	#SGPIO_SLICE_MUX_CFG11
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xAC)

	)

115 
	#SGPIO_SLICE_MUX_CFG12
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xB0)

	)

116 
	#SGPIO_SLICE_MUX_CFG13
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xB4)

	)

117 
	#SGPIO_SLICE_MUX_CFG14
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xB8)

	)

118 
	#SGPIO_SLICE_MUX_CFG15
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xBC)

	)

121 
	#SGPIO_REG
(
¶i˚
Ë
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xC0 + \

122 (
¶i˚
 * 0x04))

	)

123 
	#SGPIO_REG0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xC0)

	)

124 
	#SGPIO_REG1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xC4)

	)

125 
	#SGPIO_REG2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xC8)

	)

126 
	#SGPIO_REG3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xCC)

	)

127 
	#SGPIO_REG4
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xD0)

	)

128 
	#SGPIO_REG5
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xD4)

	)

129 
	#SGPIO_REG6
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xD8)

	)

130 
	#SGPIO_REG7
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xDC)

	)

131 
	#SGPIO_REG8
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xE0)

	)

132 
	#SGPIO_REG9
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xE4)

	)

133 
	#SGPIO_REG10
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xE8)

	)

134 
	#SGPIO_REG11
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xEC)

	)

135 
	#SGPIO_REG12
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF0)

	)

136 
	#SGPIO_REG13
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF4)

	)

137 
	#SGPIO_REG14
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF8)

	)

138 
	#SGPIO_REG15
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xFC)

	)

141 
	#SGPIO_REG_SS
(
¶i˚
Ë
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x100 + \

142 (
¶i˚
 * 0x04))

	)

143 
	#SGPIO_REG_SS0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x100)

	)

144 
	#SGPIO_REG_SS1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x104)

	)

145 
	#SGPIO_REG_SS2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x108)

	)

146 
	#SGPIO_REG_SS3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x10C)

	)

147 
	#SGPIO_REG_SS4
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x110)

	)

148 
	#SGPIO_REG_SS5
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x114)

	)

149 
	#SGPIO_REG_SS6
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x118)

	)

150 
	#SGPIO_REG_SS7
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x11C)

	)

151 
	#SGPIO_REG_SS8
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x120)

	)

152 
	#SGPIO_REG_SS9
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x124)

	)

153 
	#SGPIO_REG_SS10
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x128)

	)

154 
	#SGPIO_REG_SS11
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x12C)

	)

155 
	#SGPIO_REG_SS12
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x130)

	)

156 
	#SGPIO_REG_SS13
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x134)

	)

157 
	#SGPIO_REG_SS14
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x138)

	)

158 
	#SGPIO_REG_SS15
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x13C)

	)

161 
	#SGPIO_PRESET
(
¶i˚
Ë
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x140 + \

162 (
¶i˚
 * 0x04))

	)

163 
	#SGPIO_PRESET0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x140)

	)

164 
	#SGPIO_PRESET1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x144)

	)

165 
	#SGPIO_PRESET2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x148)

	)

166 
	#SGPIO_PRESET3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x14C)

	)

167 
	#SGPIO_PRESET4
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x150)

	)

168 
	#SGPIO_PRESET5
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x154)

	)

169 
	#SGPIO_PRESET6
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x158)

	)

170 
	#SGPIO_PRESET7
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x15C)

	)

171 
	#SGPIO_PRESET8
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x160)

	)

172 
	#SGPIO_PRESET9
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x164)

	)

173 
	#SGPIO_PRESET10
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x168)

	)

174 
	#SGPIO_PRESET11
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x16C)

	)

175 
	#SGPIO_PRESET12
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x170)

	)

176 
	#SGPIO_PRESET13
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x174)

	)

177 
	#SGPIO_PRESET14
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x178)

	)

178 
	#SGPIO_PRESET15
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x17C)

	)

181 
	#SGPIO_COUNT
(
¶i˚
Ë
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x180 + \

182 (
¶i˚
 * 0x04))

	)

183 
	#SGPIO_COUNT0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x180)

	)

184 
	#SGPIO_COUNT1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x184)

	)

185 
	#SGPIO_COUNT2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x188)

	)

186 
	#SGPIO_COUNT3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x18C)

	)

187 
	#SGPIO_COUNT4
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x190)

	)

188 
	#SGPIO_COUNT5
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x194)

	)

189 
	#SGPIO_COUNT6
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x198)

	)

190 
	#SGPIO_COUNT7
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x19C)

	)

191 
	#SGPIO_COUNT8
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1A0)

	)

192 
	#SGPIO_COUNT9
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1A4)

	)

193 
	#SGPIO_COUNT10
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1A8)

	)

194 
	#SGPIO_COUNT11
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1AC)

	)

195 
	#SGPIO_COUNT12
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1B0)

	)

196 
	#SGPIO_COUNT13
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1B4)

	)

197 
	#SGPIO_COUNT14
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1B8)

	)

198 
	#SGPIO_COUNT15
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1BC)

	)

201 
	#SGPIO_POS
(
¶i˚
Ë
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1C0 + \

202 (
¶i˚
 * 0x04))

	)

203 
	#SGPIO_POS0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1C0)

	)

204 
	#SGPIO_POS1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1C4)

	)

205 
	#SGPIO_POS2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1C8)

	)

206 
	#SGPIO_POS3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1CC)

	)

207 
	#SGPIO_POS4
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1D0)

	)

208 
	#SGPIO_POS5
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1D4)

	)

209 
	#SGPIO_POS6
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1D8)

	)

210 
	#SGPIO_POS7
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1DC)

	)

211 
	#SGPIO_POS8
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1E0)

	)

212 
	#SGPIO_POS9
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1E4)

	)

213 
	#SGPIO_POS10
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1E8)

	)

214 
	#SGPIO_POS11
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1EC)

	)

215 
	#SGPIO_POS12
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1F0)

	)

216 
	#SGPIO_POS13
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1F4)

	)

217 
	#SGPIO_POS14
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1F8)

	)

218 
	#SGPIO_POS15
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x1FC)

	)

221 
	#SGPIO_SLICE_A
 0

	)

222 
	#SGPIO_SLICE_B
 1

	)

223 
	#SGPIO_SLICE_C
 2

	)

224 
	#SGPIO_SLICE_D
 3

	)

225 
	#SGPIO_SLICE_E
 4

	)

226 
	#SGPIO_SLICE_F
 5

	)

227 
	#SGPIO_SLICE_G
 6

	)

228 
	#SGPIO_SLICE_H
 7

	)

229 
	#SGPIO_SLICE_I
 8

	)

230 
	#SGPIO_SLICE_J
 9

	)

231 
	#SGPIO_SLICE_K
 10

	)

232 
	#SGPIO_SLICE_L
 11

	)

233 
	#SGPIO_SLICE_M
 12

	)

234 
	#SGPIO_SLICE_N
 13

	)

235 
	#SGPIO_SLICE_O
 14

	)

236 
	#SGPIO_SLICE_P
 15

	)

239 
	#SGPIO_MASK_A
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x200)

	)

242 
	#SGPIO_MASK_H
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x204)

	)

245 
	#SGPIO_MASK_I
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x208)

	)

248 
	#SGPIO_MASK_P
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x20C)

	)

251 
	#SGPIO_GPIO_INREG
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x210)

	)

254 
	#SGPIO_GPIO_OUTREG
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x214)

	)

257 
	#SGPIO_GPIO_OENREG
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x218)

	)

260 
	#SGPIO_CTRL_ENABLE
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x21C)

	)

263 
	#SGPIO_CTRL_DISABLE
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0x220)

	)

266 
	#SGPIO_CLR_EN_0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF00)

	)

269 
	#SGPIO_SET_EN_0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF04)

	)

272 
	#SGPIO_ENABLE_0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF08)

	)

275 
	#SGPIO_STATUS_0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF0C)

	)

278 
	#SGPIO_CLR_STATUS_0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF10)

	)

281 
	#SGPIO_SET_STATUS_0
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF14)

	)

284 
	#SGPIO_CLR_EN_1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF20)

	)

287 
	#SGPIO_SET_EN_1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF24)

	)

290 
	#SGPIO_ENABLE_1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF28)

	)

293 
	#SGPIO_STATUS_1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF2C)

	)

296 
	#SGPIO_CLR_STATUS_1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF30)

	)

299 
	#SGPIO_SET_STATUS_1
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF34)

	)

302 
	#SGPIO_CLR_EN_2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF40)

	)

305 
	#SGPIO_SET_EN_2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF44)

	)

308 
	#SGPIO_ENABLE_2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF48)

	)

311 
	#SGPIO_STATUS_2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF4C)

	)

314 
	#SGPIO_CLR_STATUS_2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF50)

	)

317 
	#SGPIO_SET_STATUS_2
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF54)

	)

320 
	#SGPIO_CLR_EN_3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF60)

	)

323 
	#SGPIO_SET_EN_3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF64)

	)

326 
	#SGPIO_ENABLE_3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF68)

	)

329 
	#SGPIO_STATUS_3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF6C)

	)

332 
	#SGPIO_CLR_STATUS_3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF70)

	)

335 
	#SGPIO_SET_STATUS_3
 
	`MMIO32
(
SGPIO_PORT_BASE
 + 0xF74)

	)

340 
	#SGPIO_OUT_MUX_CFG_P_OUT_CFG_SHIFT
 (0)

	)

341 
	#SGPIO_OUT_MUX_CFG_P_OUT_CFG_MASK
 \

342 (0x‡<< 
SGPIO_OUT_MUX_CFG_P_OUT_CFG_SHIFT
)

	)

343 
	#SGPIO_OUT_MUX_CFG_P_OUT_CFG
(
x
) \

344 ((
x
Ë<< 
SGPIO_OUT_MUX_CFG_P_OUT_CFG_SHIFT
)

	)

346 
	#SGPIO_OUT_MUX_CFG_P_OE_CFG_SHIFT
 (4)

	)

347 
	#SGPIO_OUT_MUX_CFG_P_OE_CFG_MASK
 \

348 (0x7 << 
SGPIO_OUT_MUX_CFG_P_OE_CFG_SHIFT
)

	)

349 
	#SGPIO_OUT_MUX_CFG_P_OE_CFG
(
x
) \

350 ((
x
Ë<< 
SGPIO_OUT_MUX_CFG_P_OE_CFG_SHIFT
)

	)

352 
	#SGPIO_MUX_CFG_EXT_CLK_ENABLE_SHIFT
 (0)

	)

353 
	#SGPIO_MUX_CFG_EXT_CLK_ENABLE_MASK
 \

354 (1 << 
SGPIO_MUX_CFG_EXT_CLK_ENABLE_SHIFT
)

	)

355 
	#SGPIO_MUX_CFG_EXT_CLK_ENABLE
(
x
) \

356 ((
x
Ë<< 
SGPIO_MUX_CFG_EXT_CLK_ENABLE_SHIFT
)

	)

358 
	#SGPIO_MUX_CFG_CLK_SOURCE_PIN_MODE_SHIFT
 (1)

	)

359 
	#SGPIO_MUX_CFG_CLK_SOURCE_PIN_MODE_MASK
 \

360 (0x3 << 
SGPIO_MUX_CFG_CLK_SOURCE_PIN_MODE_SHIFT
)

	)

361 
	#SGPIO_MUX_CFG_CLK_SOURCE_PIN_MODE
(
x
) \

362 ((
x
Ë<< 
SGPIO_MUX_CFG_CLK_SOURCE_PIN_MODE_SHIFT
)

	)

364 
	#SGPIO_MUX_CFG_CLK_SOURCE_SLICE_MODE_SHIFT
 (3)

	)

365 
	#SGPIO_MUX_CFG_CLK_SOURCE_SLICE_MODE_MASK
 \

366 (0x3 << 
SGPIO_MUX_CFG_CLK_SOURCE_SLICE_MODE_SHIFT
)

	)

367 
	#SGPIO_MUX_CFG_CLK_SOURCE_SLICE_MODE
(
x
) \

368 ((
x
Ë<< 
SGPIO_MUX_CFG_CLK_SOURCE_SLICE_MODE_SHIFT
)

	)

370 
	#SGPIO_MUX_CFG_QUALIFIER_MODE_SHIFT
 (5)

	)

371 
	#SGPIO_MUX_CFG_QUALIFIER_MODE_MASK
 \

372 (0x3 << 
SGPIO_MUX_CFG_QUALIFIER_MODE_SHIFT
)

	)

373 
	#SGPIO_MUX_CFG_QUALIFIER_MODE
(
x
) \

374 ((
x
Ë<< 
SGPIO_MUX_CFG_QUALIFIER_MODE_SHIFT
)

	)

376 
	#SGPIO_MUX_CFG_QUALIFIER_PIN_MODE_SHIFT
 (7)

	)

377 
	#SGPIO_MUX_CFG_QUALIFIER_PIN_MODE_MASK
 \

378 (0x3 << 
SGPIO_MUX_CFG_QUALIFIER_PIN_MODE_SHIFT
)

	)

379 
	#SGPIO_MUX_CFG_QUALIFIER_PIN_MODE
(
x
) \

380 ((
x
Ë<< 
SGPIO_MUX_CFG_QUALIFIER_PIN_MODE_SHIFT
)

	)

382 
	#SGPIO_MUX_CFG_QUALIFIER_SLICE_MODE_SHIFT
 (9)

	)

383 
	#SGPIO_MUX_CFG_QUALIFIER_SLICE_MODE_MASK
 \

384 (0x3 << 
SGPIO_MUX_CFG_QUALIFIER_SLICE_MODE_SHIFT
)

	)

385 
	#SGPIO_MUX_CFG_QUALIFIER_SLICE_MODE
(
x
) \

386 ((
x
Ë<< 
SGPIO_MUX_CFG_QUALIFIER_SLICE_MODE_SHIFT
)

	)

388 
	#SGPIO_MUX_CFG_CONCAT_ENABLE_SHIFT
 (11)

	)

389 
	#SGPIO_MUX_CFG_CONCAT_ENABLE_MASK
 \

390 (1 << 
SGPIO_MUX_CFG_CONCAT_ENABLE_SHIFT
)

	)

391 
	#SGPIO_MUX_CFG_CONCAT_ENABLE
(
x
) \

392 ((
x
Ë<< 
SGPIO_MUX_CFG_CONCAT_ENABLE_SHIFT
)

	)

394 
	#SGPIO_MUX_CFG_CONCAT_ORDER_SHIFT
 (12)

	)

395 
	#SGPIO_MUX_CFG_CONCAT_ORDER_MASK
 \

396 (0x3 << 
SGPIO_MUX_CFG_CONCAT_ORDER_SHIFT
)

	)

397 
	#SGPIO_MUX_CFG_CONCAT_ORDER
(
x
) \

398 ((
x
Ë<< 
SGPIO_MUX_CFG_CONCAT_ORDER_SHIFT
)

	)

400 
	#SGPIO_SLICE_MUX_CFG_MATCH_MODE_SHIFT
 (0)

	)

401 
	#SGPIO_SLICE_MUX_CFG_MATCH_MODE_MASK
 \

402 (1 << 
SGPIO_SLICE_MUX_CFG_MATCH_MODE_SHIFT
)

	)

403 
	#SGPIO_SLICE_MUX_CFG_MATCH_MODE
(
x
) \

404 ((
x
Ë<< 
SGPIO_SLICE_MUX_CFG_MATCH_MODE_SHIFT
)

	)

406 
	#SGPIO_SLICE_MUX_CFG_CLK_CAPTURE_MODE_SHIFT
 (1)

	)

407 
	#SGPIO_SLICE_MUX_CFG_CLK_CAPTURE_MODE_MASK
 \

408 (1 << 
SGPIO_SLICE_MUX_CFG_CLK_CAPTURE_MODE_SHIFT
)

	)

409 
	#SGPIO_SLICE_MUX_CFG_CLK_CAPTURE_MODE
(
x
) \

410 ((
x
Ë<< 
SGPIO_SLICE_MUX_CFG_CLK_CAPTURE_MODE_SHIFT
)

	)

412 
	#SGPIO_SLICE_MUX_CFG_CLKGEN_MODE_SHIFT
 (2)

	)

413 
	#SGPIO_SLICE_MUX_CFG_CLKGEN_MODE_MASK
 \

414 (1 << 
SGPIO_SLICE_MUX_CFG_CLKGEN_MODE_SHIFT
)

	)

415 
	#SGPIO_SLICE_MUX_CFG_CLKGEN_MODE
(
x
) \

416 ((
x
Ë<< 
SGPIO_SLICE_MUX_CFG_CLKGEN_MODE_SHIFT
)

	)

418 
	#SGPIO_SLICE_MUX_CFG_INV_OUT_CLK_SHIFT
 (3)

	)

419 
	#SGPIO_SLICE_MUX_CFG_INV_OUT_CLK_MASK
 \

420 (1 << 
SGPIO_SLICE_MUX_CFG_INV_OUT_CLK_SHIFT
)

	)

421 
	#SGPIO_SLICE_MUX_CFG_INV_OUT_CLK
(
x
) \

422 ((
x
Ë<< 
SGPIO_SLICE_MUX_CFG_INV_OUT_CLK_SHIFT
)

	)

424 
	#SGPIO_SLICE_MUX_CFG_DATA_CAPTURE_MODE_SHIFT
 (4)

	)

425 
	#SGPIO_SLICE_MUX_CFG_DATA_CAPTURE_MODE_MASK
 \

426 (0x3 << 
SGPIO_SLICE_MUX_CFG_DATA_CAPTURE_MODE_SHIFT
)

	)

427 
	#SGPIO_SLICE_MUX_CFG_DATA_CAPTURE_MODE
(
x
) \

428 ((
x
Ë<< 
SGPIO_SLICE_MUX_CFG_DATA_CAPTURE_MODE_SHIFT
)

	)

430 
	#SGPIO_SLICE_MUX_CFG_PARALLEL_MODE_SHIFT
 (6)

	)

431 
	#SGPIO_SLICE_MUX_CFG_PARALLEL_MODE_MASK
 \

432 (0x3 << 
SGPIO_SLICE_MUX_CFG_PARALLEL_MODE_SHIFT
)

	)

433 
	#SGPIO_SLICE_MUX_CFG_PARALLEL_MODE
(
x
) \

434 ((
x
Ë<< 
SGPIO_SLICE_MUX_CFG_PARALLEL_MODE_SHIFT
)

	)

436 
	#SGPIO_SLICE_MUX_CFG_INV_QUALIFIER_SHIFT
 (8)

	)

437 
	#SGPIO_SLICE_MUX_CFG_INV_QUALIFIER_MASK
 \

438 (1 << 
SGPIO_SLICE_MUX_CFG_INV_QUALIFIER_SHIFT
)

	)

439 
	#SGPIO_SLICE_MUX_CFG_INV_QUALIFIER
(
x
) \

440 ((
x
Ë<< 
SGPIO_SLICE_MUX_CFG_INV_QUALIFIER_SHIFT
)

	)

442 
	#SGPIO_POS_POS_SHIFT
 (0)

	)

443 
	#SGPIO_POS_POS_MASK
 (0xf‡<< 
SGPIO_POS_POS_SHIFT
)

	)

444 
	#SGPIO_POS_POS
(
x
Ë((xË<< 
SGPIO_POS_POS_SHIFT
)

	)

446 
	#SGPIO_POS_POS_RESET_SHIFT
 (8)

	)

447 
	#SGPIO_POS_POS_RESET_MASK
 (0xf‡<< 
SGPIO_POS_POS_RESET_SHIFT
)

	)

448 
	#SGPIO_POS_POS_RESET
(
x
Ë((xË<< 
SGPIO_POS_POS_RESET_SHIFT
)

	)

455 
	#SGPIO_OUT_MUX_CFGx_P_OUT_CFG_SHIFT
 (0)

	)

456 
	#SGPIO_OUT_MUX_CFGx_P_OUT_CFG_MASK
 \

457 (0x‡<< 
SGPIO_OUT_MUX_CFGx_P_OUT_CFG_SHIFT
)

	)

458 
	#SGPIO_OUT_MUX_CFGx_P_OUT_CFG
(
x
) \

459 ((
x
Ë<< 
SGPIO_OUT_MUX_CFGx_P_OUT_CFG_SHIFT
)

	)

462 
	#SGPIO_OUT_MUX_CFGx_P_OE_CFG_SHIFT
 (4)

	)

463 
	#SGPIO_OUT_MUX_CFGx_P_OE_CFG_MASK
 \

464 (0x7 << 
SGPIO_OUT_MUX_CFGx_P_OE_CFG_SHIFT
)

	)

465 
	#SGPIO_OUT_MUX_CFGx_P_OE_CFG
(
x
) \

466 ((
x
Ë<< 
SGPIO_OUT_MUX_CFGx_P_OE_CFG_SHIFT
)

	)

471 
	#SGPIO_MUX_CFGx_EXT_CLK_ENABLE_SHIFT
 (0)

	)

472 
	#SGPIO_MUX_CFGx_EXT_CLK_ENABLE
 \

473 (1 << 
SGPIO_MUX_CFGx_EXT_CLK_ENABLE_SHIFT
)

	)

476 
	#SGPIO_MUX_CFGx_CLK_SOURCE_PIN_MODE_SHIFT
 (1)

	)

477 
	#SGPIO_MUX_CFGx_CLK_SOURCE_PIN_MODE_MASK
 \

478 (0x3 << 
SGPIO_MUX_CFGx_CLK_SOURCE_PIN_MODE_SHIFT
)

	)

479 
	#SGPIO_MUX_CFGx_CLK_SOURCE_PIN_MODE
(
x
) \

480 ((
x
Ë<< 
SGPIO_MUX_CFGx_CLK_SOURCE_PIN_MODE_SHIFT
)

	)

483 
	#SGPIO_MUX_CFGx_CLK_SOURCE_SLICE_MODE_SHIFT
 (3)

	)

484 
	#SGPIO_MUX_CFGx_CLK_SOURCE_SLICE_MODE_MASK
 \

485 (0x3 << 
SGPIO_MUX_CFGx_CLK_SOURCE_SLICE_MODE_SHIFT
)

	)

486 
	#SGPIO_MUX_CFGx_CLK_SOURCE_SLICE_MODE
(
x
) \

487 ((
x
Ë<< 
SGPIO_MUX_CFGx_CLK_SOURCE_SLICE_MODE_SHIFT
)

	)

490 
	#SGPIO_MUX_CFGx_QUALIFIER_MODE_SHIFT
 (5)

	)

491 
	#SGPIO_MUX_CFGx_QUALIFIER_MODE_MASK
 \

492 (0x3 << 
SGPIO_MUX_CFGx_QUALIFIER_MODE_SHIFT
)

	)

493 
	#SGPIO_MUX_CFGx_QUALIFIER_MODE
(
x
) \

494 ((
x
Ë<< 
SGPIO_MUX_CFGx_QUALIFIER_MODE_SHIFT
)

	)

497 
	#SGPIO_MUX_CFGx_QUALIFIER_PIN_MODE_SHIFT
 (7)

	)

498 
	#SGPIO_MUX_CFGx_QUALIFIER_PIN_MODE_MASK
 \

499 (0x3 << 
SGPIO_MUX_CFGx_QUALIFIER_PIN_MODE_SHIFT
)

	)

500 
	#SGPIO_MUX_CFGx_QUALIFIER_PIN_MODE
(
x
) \

501 ((
x
Ë<< 
SGPIO_MUX_CFGx_QUALIFIER_PIN_MODE_SHIFT
)

	)

504 
	#SGPIO_MUX_CFGx_QUALIFIER_SLICE_MODE_SHIFT
 (9)

	)

505 
	#SGPIO_MUX_CFGx_QUALIFIER_SLICE_MODE_MASK
 \

506 (0x3 << 
SGPIO_MUX_CFGx_QUALIFIER_SLICE_MODE_SHIFT
)

	)

507 
	#SGPIO_MUX_CFGx_QUALIFIER_SLICE_MODE
(
x
) \

508 ((
x
Ë<< 
SGPIO_MUX_CFG0_QUALIFIER_SLICE_MODE_SHIFT
)

	)

511 
	#SGPIO_MUX_CFGx_CONCAT_ENABLE_SHIFT
 (11)

	)

512 
	#SGPIO_MUX_CFGx_CONCAT_ENABLE
 \

513 (1 << 
SGPIO_MUX_CFGx_CONCAT_ENABLE_SHIFT
)

	)

516 
	#SGPIO_MUX_CFGx_CONCAT_ORDER_SHIFT
 (12)

	)

517 
	#SGPIO_MUX_CFGx_CONCAT_ORDER_MASK
 \

518 (0x3 << 
SGPIO_MUX_CFGx_CONCAT_ORDER_SHIFT
)

	)

519 
	#SGPIO_MUX_CFGx_CONCAT_ORDER
(
x
) \

520 ((
x
Ë<< 
SGPIO_MUX_CFGx_CONCAT_ORDER_SHIFT
)

	)

525 
	#SGPIO_SLICE_MUX_CFGx_MATCH_MODE_SHIFT
 (0)

	)

526 
	#SGPIO_SLICE_MUX_CFGx_MATCH_MODE
 \

527 (1 << 
SGPIO_SLICE_MUX_CFG0_MATCH_MODE_SHIFT
)

	)

530 
	#SGPIO_SLICE_MUX_CFGx_CLK_CAPTURE_MODE_SHIFT
 (1)

	)

531 
	#SGPIO_SLICE_MUX_CFGx_CLK_CAPTURE_MODE
 \

532 (1 << 
SGPIO_SLICE_MUX_CFGx_CLK_CAPTURE_MODE_SHIFT
)

	)

535 
	#SGPIO_SLICE_MUX_CFGx_CLKGEN_MODE_SHIFT
 (2)

	)

536 
	#SGPIO_SLICE_MUX_CFGx_CLKGEN_MODE
 \

537 (1 << 
SGPIO_SLICE_MUX_CFGx_CLKGEN_MODE_SHIFT
)

	)

540 
	#SGPIO_SLICE_MUX_CFGx_INV_OUT_CLK_SHIFT
 (3)

	)

541 
	#SGPIO_SLICE_MUX_CFGx_INV_OUT_CLK
 \

542 (1 << 
SGPIO_SLICE_MUX_CFGx_INV_OUT_CLK_SHIFT
)

	)

545 
	#SGPIO_SLICE_MUX_CFGx_DATA_CAPTURE_MODE_SHIFT
 (4)

	)

546 
	#SGPIO_SLICE_MUX_CFGx_DATA_CAPTURE_MODE_MASK
 \

547 (0x3 << 
SGPIO_SLICE_MUX_CFGx_DATA_CAPTURE_MODE_SHIFT
)

	)

548 
	#SGPIO_SLICE_MUX_CFGx_DATA_CAPTURE_MODE
(
x
) \

549 ((
x
Ë<< 
SGPIO_SLICE_MUX_CFGx_DATA_CAPTURE_MODE_SHIFT
)

	)

552 
	#SGPIO_SLICE_MUX_CFGx_PARALLEL_MODE_SHIFT
 (6)

	)

553 
	#SGPIO_SLICE_MUX_CFGx_PARALLEL_MODE_MASK
 \

554 (0x3 << 
SGPIO_SLICE_MUX_CFGx_PARALLEL_MODE_SHIFT
)

	)

555 
	#SGPIO_SLICE_MUX_CFGx_PARALLEL_MODE
(
x
) \

556 ((
x
Ë<< 
SGPIO_SLICE_MUX_CFGx_PARALLEL_MODE_SHIFT
)

	)

559 
	#SGPIO_SLICE_MUX_CFGx_INV_QUALIFIER_SHIFT
 (8)

	)

560 
	#SGPIO_SLICE_MUX_CFGx_INV_QUALIFIER
 \

561 (1 << 
SGPIO_SLICE_MUX_CFGx_INV_QUALIFIER_SHIFT
)

	)

567 
	#SGPIO_POSx_POS_SHIFT
 (0)

	)

568 
	#SGPIO_POSx_POS_MASK
 (0xf‡<< 
SGPIO_POSx_POS_SHIFT
)

	)

569 
	#SGPIO_POSx_POS
(
x
Ë((xË<< 
SGPIO_POSx_POS_SHIFT
)

	)

572 
	#SGPIO_POSx_POS_RESET_SHIFT
 (8)

	)

573 
	#SGPIO_POSx_POS_RESET_MASK
 (0xf‡<< 
SGPIO_POSx_POS_RESET_SHIFT
)

	)

574 
	#SGPIO_POSx_POS_RESET
(
x
Ë((xË<< 
SGPIO_POSx_POS_RESET_SHIFT
)

	)

585 vﬁ©ûê
uöt32_t
 
	mOUT_MUX_CFG
[16];

587 vﬁ©ûê
uöt32_t
 
	mSGPIO_MUX_CFG
[16];

589 vﬁ©ûê
uöt32_t
 
	mSLICE_MUX_CFG
[16];

591 vﬁ©ûê
uöt32_t
 
	mREG
[16];

595 vﬁ©ûê
uöt32_t
 
	mREG_SS
[16];

599 vﬁ©ûê
uöt32_t
 
	mPRESET
[16];

601 vﬁ©ûê
uöt32_t
 
	mCOUNT
[16];

605 vﬁ©ûê
uöt32_t
 
	mPOS
[16];

609 vﬁ©ûê
uöt32_t
 
	mMASK_A
;

613 vﬁ©ûê
uöt32_t
 
	mMASK_H
;

617 vﬁ©ûê
uöt32_t
 
	mMASK_I
;

621 vﬁ©ûê
uöt32_t
 
	mMASK_P
;

623 vﬁ©ûê
uöt32_t
 
	mGPIO_INREG
;

625 vﬁ©ûê
uöt32_t
 
	mGPIO_OUTREG
;

627 vﬁ©ûê
uöt32_t
 
	mGPIO_OENREG
;

629 vﬁ©ûê
uöt32_t
 
	mCTRL_ENABLE
;

631 vﬁ©ûê
uöt32_t
 
	mCTRL_DISABLE
;

632 vﬁ©ûê
uöt32_t
 
	mRES0
[823];

634 vﬁ©ûê
uöt32_t
 
	mCLR_EN_0
;

636 vﬁ©ûê
uöt32_t
 
	mSET_EN_0
;

638 vﬁ©ûê
uöt32_t
 
	mENABLE_0
;

640 vﬁ©ûê
uöt32_t
 
	mSTATUS_0
;

642 vﬁ©ûê
uöt32_t
 
	mCLR_STATUS_0
;

644 vﬁ©ûê
uöt32_t
 
	mSET_STATUS_0
;

645 vﬁ©ûê
uöt32_t
 
	mRES1
[2];

647 vﬁ©ûê
uöt32_t
 
	mCLR_EN_1
;

649 vﬁ©ûê
uöt32_t
 
	mSET_EN_1
;

651 vﬁ©ûê
uöt32_t
 
	mENABLE_1
;

653 vﬁ©ûê
uöt32_t
 
	mSTATUS_1
;

655 vﬁ©ûê
uöt32_t
 
	mCLR_STATUS_1
;

657 vﬁ©ûê
uöt32_t
 
	mSET_STATUS_1
;

658 vﬁ©ûê
uöt32_t
 
	mRES2
[2];

660 vﬁ©ûê
uöt32_t
 
	mCLR_EN_2
;

662 vﬁ©ûê
uöt32_t
 
	mSET_EN_2
;

664 vﬁ©ûê
uöt32_t
 
	mENABLE_2
;

666 vﬁ©ûê
uöt32_t
 
	mSTATUS_2
;

668 vﬁ©ûê
uöt32_t
 
	mCLR_STATUS_2
;

670 vﬁ©ûê
uöt32_t
 
	mSET_STATUS_2
;

671 vﬁ©ûê
uöt32_t
 
	mRES3
[2];

673 vﬁ©ûê
uöt32_t
 
	mCLR_EN_3
;

675 vﬁ©ûê
uöt32_t
 
	mSET_EN_3
;

677 vﬁ©ûê
uöt32_t
 
	mENABLE_3
;

679 vﬁ©ûê
uöt32_t
 
	mSTATUS_3
;

681 vﬁ©ûê
uöt32_t
 
	mCLR_STATUS_3
;

683 vﬁ©ûê
uöt32_t
 
	mSET_STATUS_3
;

684 } 
	tsgpio_t
;

687 
	#SGPIO
 ((
sgpio_t
 *)
SGPIO_PORT_BASE
)

	)

	@libopencm3/include/libopencm3/lpc43xx/ssp.h

35 #i‚de‡
LPC43XX_SSP_H


36 
	#LPC43XX_SSP_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

46 
	#SSP0
 
SSP0_BASE


	)

47 
	#SSP1
 
SSP1_BASE


	)

53 
	#SSP_CR0
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x000)

	)

54 
	#SSP0_CR0
 
	`SSP_CR0
(
SSP0
)

	)

55 
	#SSP1_CR0
 
	`SSP_CR0
(
SSP1
)

	)

58 
	#SSP_CR1
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x004)

	)

59 
	#SSP0_CR1
 
	`SSP_CR1
(
SSP0
)

	)

60 
	#SSP1_CR1
 
	`SSP_CR1
(
SSP1
)

	)

63 
	#SSP_DR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x008)

	)

64 
	#SSP0_DR
 
	`SSP_DR
(
SSP0
)

	)

65 
	#SSP1_DR
 
	`SSP_DR
(
SSP1
)

	)

68 
	#SSP_SR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00C)

	)

69 
	#SSP0_SR
 
	`SSP_SR
(
SSP0
)

	)

70 
	#SSP1_SR
 
	`SSP_SR
(
SSP1
)

	)

72 
	#SSP_SR_TFE
 
BIT0


	)

73 
	#SSP_SR_TNF
 
BIT1


	)

74 
	#SSP_SR_RNE
 
BIT2


	)

75 
	#SSP_SR_RFF
 
BIT3


	)

76 
	#SSP_SR_BSY
 
BIT4


	)

79 
	#SSP_CPSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x010)

	)

80 
	#SSP0_CPSR
 
	`SSP_CPSR
(
SSP0
)

	)

81 
	#SSP1_CPSR
 
	`SSP_CPSR
(
SSP1
)

	)

84 
	#SSP_IMSC
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x014)

	)

85 
	#SSP0_IMSC
 
	`SSP_IMSC
(
SSP0
)

	)

86 
	#SSP1_IMSC
 
	`SSP_IMSC
(
SSP1
)

	)

89 
	#SSP_RIS
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x018)

	)

90 
	#SSP0_RIS
 
	`SSP_RIS
(
SSP0
)

	)

91 
	#SSP1_RIS
 
	`SSP_RIS
(
SSP1
)

	)

94 
	#SSP_MIS
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x01C)

	)

95 
	#SSP0_MIS
 
	`SSP_MIS
(
SSP0
)

	)

96 
	#SSP1_MIS
 
	`SSP_MIS
(
SSP1
)

	)

99 
	#SSP_ICR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x020)

	)

100 
	#SSP0_ICR
 
	`SSP_ICR
(
SSP0
)

	)

101 
	#SSP1_ICR
 
	`SSP_ICR
(
SSP1
)

	)

104 
	#SSP_DMACR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x024)

	)

105 
	#SSP0_DMACR
 
	`SSP_DMACR
(
SSP0
)

	)

106 
	#SSP1_DMACR
 
	`SSP_DMACR
(
SSP1
)

	)

109 
	#SSP_DMACR_RXDMAE
 0x1

	)

112 
	#SSP_DMACR_TXDMAE
 0x2

	)

115 
	mSSP0_NUM
 = 0x0,

116 
	mSSP1_NUM
 = 0x1

117 } 
	ts•_num_t
;

124 
	mSSP_DATA_4BITS
 = 0x3,

125 
	mSSP_DATA_5BITS
 = 0x4,

126 
	mSSP_DATA_6BITS
 = 0x5,

127 
	mSSP_DATA_7BITS
 = 0x6,

128 
	mSSP_DATA_8BITS
 = 0x7,

129 
	mSSP_DATA_9BITS
 = 0x8,

130 
	mSSP_DATA_10BITS
 = 0x9,

131 
	mSSP_DATA_11BITS
 = 0xA,

132 
	mSSP_DATA_12BITS
 = 0xB,

133 
	mSSP_DATA_13BITS
 = 0xC,

134 
	mSSP_DATA_14BITS
 = 0xD,

135 
	mSSP_DATA_15BITS
 = 0xE,

136 
	mSSP_DATA_16BITS
 = 0xF

137 } 
	ts•_d©asize_t
;

141 
	mSSP_FRAME_SPI
 = 0x00,

142 
	mSSP_FRAME_TI
 = 
BIT4
,

143 
	mSSP_FRAM_MICROWIRE
 = 
BIT5


144 } 
	ts•_‰ame_f‹m©_t
;

148 
	mSSP_CPOL_0_CPHA_0
 = 0x0,

149 
	mSSP_CPOL_1_CPHA_0
 = 
BIT6
,

150 
	mSSP_CPOL_0_CPHA_1
 = 
BIT7
,

151 
	mSSP_CPOL_1_CPHA_1
 = (
BIT6
|
BIT7
)

152 } 
	ts•_˝ﬁ_˝ha_t
;

159 
	mSSP_MODE_NORMAL
 = 0x0,

160 
	mSSP_MODE_LOOPBACK
 = 
BIT0


161 } 
	ts•_mode_t
;

164 
	#SSP_ENABLE
 
BIT1


	)

168 
	mSSP_MASTER
 = 0x0,

169 
	mSSP_SLAVE
 = 
BIT2


170 } 
	ts•_ma°î_¶ave_t
;

179 
	mSSP_SLAVE_OUT_ENABLE
 = 0x0,

180 
	mSSP_SLAVE_OUT_DISABLE
 = 
BIT3


181 } 
	ts•_¶ave_›ti⁄_t
;

183 
BEGIN_DECLS


185 
s•_dißbÀ
(
s•_num_t
 
s•_num
);

193 
s•_öô
(
s•_num_t
 
s•_num
,

194 
s•_d©asize_t
 
d©a_size
,

195 
s•_‰ame_f‹m©_t
 
‰ame_f‹m©
,

196 
s•_˝ﬁ_˝ha_t
 
˝ﬁ_˝ha_f‹m©
,

197 
uöt8_t
 
£rül_˛ock_øã
,

198 
uöt8_t
 
˛k_¥esˇÀ
,

199 
s•_mode_t
 
mode
,

200 
s•_ma°î_¶ave_t
 
ma°î_¶ave
,

201 
s•_¶ave_›ti⁄_t
 
¶ave_›ti⁄
);

203 
uöt16_t
 
s•_å™s„r
(
s•_num_t
 
s•_num
, uöt16_à
d©a
);

205 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc43xx/timer.h

34 #i‚de‡
LPC43XX_TIMER_H


35 
	#LPC43XX_TIMER_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

45 
	#TIMER0
 
TIMER0_BASE


	)

46 
	#TIMER1
 
TIMER1_BASE


	)

47 
	#TIMER2
 
TIMER2_BASE


	)

48 
	#TIMER3
 
TIMER3_BASE


	)

54 
	#TIMER_IR
(
timî
Ë
	`MMIO32
(—imîË+ 0x000)

	)

55 
	#TIMER0_IR
 
	`TIMER_IR
(
TIMER0
)

	)

56 
	#TIMER1_IR
 
	`TIMER_IR
(
TIMER1
)

	)

57 
	#TIMER2_IR
 
	`TIMER_IR
(
TIMER2
)

	)

58 
	#TIMER3_IR
 
	`TIMER_IR
(
TIMER3
)

	)

61 
	#TIMER_TCR
(
timî
Ë
	`MMIO32
(—imîË+ 0x004)

	)

62 
	#TIMER0_TCR
 
	`TIMER_TCR
(
TIMER0
)

	)

63 
	#TIMER1_TCR
 
	`TIMER_TCR
(
TIMER1
)

	)

64 
	#TIMER2_TCR
 
	`TIMER_TCR
(
TIMER2
)

	)

65 
	#TIMER3_TCR
 
	`TIMER_TCR
(
TIMER3
)

	)

68 
	#TIMER_TC
(
timî
Ë
	`MMIO32
(—imîË+ 0x008)

	)

69 
	#TIMER0_TC
 
	`TIMER_TC
(
TIMER0
)

	)

70 
	#TIMER1_TC
 
	`TIMER_TC
(
TIMER1
)

	)

71 
	#TIMER2_TC
 
	`TIMER_TC
(
TIMER2
)

	)

72 
	#TIMER3_TC
 
	`TIMER_TC
(
TIMER3
)

	)

75 
	#TIMER_PR
(
timî
Ë
	`MMIO32
(—imîË+ 0x00C)

	)

76 
	#TIMER0_PR
 
	`TIMER_PR
(
TIMER0
)

	)

77 
	#TIMER1_PR
 
	`TIMER_PR
(
TIMER1
)

	)

78 
	#TIMER2_PR
 
	`TIMER_PR
(
TIMER2
)

	)

79 
	#TIMER3_PR
 
	`TIMER_PR
(
TIMER3
)

	)

82 
	#TIMER_PC
(
timî
Ë
	`MMIO32
(—imîË+ 0x010)

	)

83 
	#TIMER0_PC
 
	`TIMER_PC
(
TIMER0
)

	)

84 
	#TIMER1_PC
 
	`TIMER_PC
(
TIMER1
)

	)

85 
	#TIMER2_PC
 
	`TIMER_PC
(
TIMER2
)

	)

86 
	#TIMER3_PC
 
	`TIMER_PC
(
TIMER3
)

	)

89 
	#TIMER_MCR
(
timî
Ë
	`MMIO32
(—imîË+ 0x014)

	)

90 
	#TIMER0_MCR
 
	`TIMER_MCR
(
TIMER0
)

	)

91 
	#TIMER1_MCR
 
	`TIMER_MCR
(
TIMER1
)

	)

92 
	#TIMER2_MCR
 
	`TIMER_MCR
(
TIMER2
)

	)

93 
	#TIMER3_MCR
 
	`TIMER_MCR
(
TIMER3
)

	)

96 
	#TIMER_MR0
(
timî
Ë
	`MMIO32
(—imîË+ 0x018)

	)

97 
	#TIMER0_MR0
 
	`TIMER_MR0
(
TIMER0
)

	)

98 
	#TIMER1_MR0
 
	`TIMER_MR0
(
TIMER1
)

	)

99 
	#TIMER2_MR0
 
	`TIMER_MR0
(
TIMER2
)

	)

100 
	#TIMER3_MR0
 
	`TIMER_MR0
(
TIMER3
)

	)

103 
	#TIMER_MR1
(
timî
Ë
	`MMIO32
(—imîË+ 0x01C)

	)

104 
	#TIMER0_MR1
 
	`TIMER_MR1
(
TIMER0
)

	)

105 
	#TIMER1_MR1
 
	`TIMER_MR1
(
TIMER1
)

	)

106 
	#TIMER2_MR1
 
	`TIMER_MR1
(
TIMER2
)

	)

107 
	#TIMER3_MR1
 
	`TIMER_MR1
(
TIMER3
)

	)

110 
	#TIMER_MR2
(
timî
Ë
	`MMIO32
(—imîË+ 0x020)

	)

111 
	#TIMER0_MR2
 
	`TIMER_MR2
(
TIMER0
)

	)

112 
	#TIMER1_MR2
 
	`TIMER_MR2
(
TIMER1
)

	)

113 
	#TIMER2_MR2
 
	`TIMER_MR2
(
TIMER2
)

	)

114 
	#TIMER3_MR2
 
	`TIMER_MR2
(
TIMER3
)

	)

117 
	#TIMER_MR3
(
timî
Ë
	`MMIO32
(—imîË+ 0x024)

	)

118 
	#TIMER0_MR3
 
	`TIMER_MR3
(
TIMER0
)

	)

119 
	#TIMER1_MR3
 
	`TIMER_MR3
(
TIMER1
)

	)

120 
	#TIMER2_MR3
 
	`TIMER_MR3
(
TIMER2
)

	)

121 
	#TIMER3_MR3
 
	`TIMER_MR3
(
TIMER3
)

	)

124 
	#TIMER_CCR
(
timî
Ë
	`MMIO32
(—imîË+ 0x028)

	)

125 
	#TIMER0_CCR
 
	`TIMER_CCR
(
TIMER0
)

	)

126 
	#TIMER1_CCR
 
	`TIMER_CCR
(
TIMER1
)

	)

127 
	#TIMER2_CCR
 
	`TIMER_CCR
(
TIMER2
)

	)

128 
	#TIMER3_CCR
 
	`TIMER_CCR
(
TIMER3
)

	)

131 
	#TIMER_CR0
(
timî
Ë
	`MMIO32
(—imîË+ 0x02C)

	)

132 
	#TIMER0_CR0
 
	`TIMER_CR0
(
TIMER0
)

	)

133 
	#TIMER1_CR0
 
	`TIMER_CR0
(
TIMER1
)

	)

134 
	#TIMER2_CR0
 
	`TIMER_CR0
(
TIMER2
)

	)

135 
	#TIMER3_CR0
 
	`TIMER_CR0
(
TIMER3
)

	)

138 
	#TIMER_CR1
(
timî
Ë
	`MMIO32
(—imîË+ 0x030)

	)

139 
	#TIMER0_CR1
 
	`TIMER_CR1
(
TIMER0
)

	)

140 
	#TIMER1_CR1
 
	`TIMER_CR1
(
TIMER1
)

	)

141 
	#TIMER2_CR1
 
	`TIMER_CR1
(
TIMER2
)

	)

142 
	#TIMER3_CR1
 
	`TIMER_CR1
(
TIMER3
)

	)

145 
	#TIMER_CR2
(
timî
Ë
	`MMIO32
(—imîË+ 0x034)

	)

146 
	#TIMER0_CR2
 
	`TIMER_CR2
(
TIMER0
)

	)

147 
	#TIMER1_CR2
 
	`TIMER_CR2
(
TIMER1
)

	)

148 
	#TIMER2_CR2
 
	`TIMER_CR2
(
TIMER2
)

	)

149 
	#TIMER3_CR2
 
	`TIMER_CR2
(
TIMER3
)

	)

152 
	#TIMER_CR3
(
timî
Ë
	`MMIO32
(—imîË+ 0x038)

	)

153 
	#TIMER0_CR3
 
	`TIMER_CR3
(
TIMER0
)

	)

154 
	#TIMER1_CR3
 
	`TIMER_CR3
(
TIMER1
)

	)

155 
	#TIMER2_CR3
 
	`TIMER_CR3
(
TIMER2
)

	)

156 
	#TIMER3_CR3
 
	`TIMER_CR3
(
TIMER3
)

	)

159 
	#TIMER_EMR
(
timî
Ë
	`MMIO32
(—imîË+ 0x03C)

	)

160 
	#TIMER0_EMR
 
	`TIMER_EMR
(
TIMER0
)

	)

161 
	#TIMER1_EMR
 
	`TIMER_EMR
(
TIMER1
)

	)

162 
	#TIMER2_EMR
 
	`TIMER_EMR
(
TIMER2
)

	)

163 
	#TIMER3_EMR
 
	`TIMER_EMR
(
TIMER3
)

	)

166 
	#TIMER_CTCR
(
timî
Ë
	`MMIO32
(—imîË+ 0x070)

	)

167 
	#TIMER0_CTCR
 
	`TIMER_CTCR
(
TIMER0
)

	)

168 
	#TIMER1_CTCR
 
	`TIMER_CTCR
(
TIMER1
)

	)

169 
	#TIMER2_CTCR
 
	`TIMER_CTCR
(
TIMER2
)

	)

170 
	#TIMER3_CTCR
 
	`TIMER_CTCR
(
TIMER3
)

	)

174 
	#TIMER_IR_MR0INT
 (1 << 0)

	)

175 
	#TIMER_IR_MR1INT
 (1 << 1)

	)

176 
	#TIMER_IR_MR2INT
 (1 << 2)

	)

177 
	#TIMER_IR_MR3INT
 (1 << 3)

	)

178 
	#TIMER_IR_CR0INT
 (1 << 4)

	)

179 
	#TIMER_IR_CR1INT
 (1 << 5)

	)

180 
	#TIMER_IR_CR2INT
 (1 << 6)

	)

181 
	#TIMER_IR_CR3INT
 (1 << 7)

	)

185 
	#TIMER_TCR_CEN
 (1 << 0)

	)

186 
	#TIMER_TCR_CRST
 (1 << 1)

	)

190 
	#TIMER_MCR_MR0I
 (1 << 0)

	)

191 
	#TIMER_MCR_MR0R
 (1 << 1)

	)

192 
	#TIMER_MCR_MR0S
 (1 << 2)

	)

193 
	#TIMER_MCR_MR1I
 (1 << 3)

	)

194 
	#TIMER_MCR_MR1R
 (1 << 4)

	)

195 
	#TIMER_MCR_MR1S
 (1 << 5)

	)

196 
	#TIMER_MCR_MR2I
 (1 << 6)

	)

197 
	#TIMER_MCR_MR2R
 (1 << 7)

	)

198 
	#TIMER_MCR_MR2S
 (1 << 8)

	)

199 
	#TIMER_MCR_MR3I
 (1 << 9)

	)

200 
	#TIMER_MCR_MR3R
 (1 << 10)

	)

201 
	#TIMER_MCR_MR3S
 (1 << 11)

	)

205 
	#TIMER_CCR_CAP0RE
 (1 << 0)

	)

206 
	#TIMER_CCR_CAP0FE
 (1 << 1)

	)

207 
	#TIMER_CCR_CAP0I
 (1 << 2)

	)

208 
	#TIMER_CCR_CAP1RE
 (1 << 3)

	)

209 
	#TIMER_CCR_CAP1FE
 (1 << 4)

	)

210 
	#TIMER_CCR_CAP1I
 (1 << 5)

	)

211 
	#TIMER_CCR_CAP2RE
 (1 << 6)

	)

212 
	#TIMER_CCR_CAP2FE
 (1 << 7)

	)

213 
	#TIMER_CCR_CAP2I
 (1 << 8)

	)

214 
	#TIMER_CCR_CAP3RE
 (1 << 9)

	)

215 
	#TIMER_CCR_CAP3FE
 (1 << 10)

	)

216 
	#TIMER_CCR_CAP3I
 (1 << 11)

	)

220 
	#TIMER_EMR_EM0
 (1 << 0)

	)

221 
	#TIMER_EMR_EM1
 (1 << 1)

	)

222 
	#TIMER_EMR_EM2
 (1 << 2)

	)

223 
	#TIMER_EMR_EM3
 (1 << 3)

	)

224 
	#TIMER_EMR_EMC0_SHIFT
 4

	)

225 
	#TIMER_EMR_EMC0_MASK
 (0x3 << 
TIMER_EMR_EMC0_SHIFT
)

	)

226 
	#TIMER_EMR_EMC1_SHIFT
 6

	)

227 
	#TIMER_EMR_EMC1_MASK
 (0x3 << 
TIMER_EMR_EMC1_SHIFT
)

	)

228 
	#TIMER_EMR_EMC2_SHIFT
 8

	)

229 
	#TIMER_EMR_EMC2_MASK
 (0x3 << 
TIMER_EMR_EMC2_SHIFT
)

	)

230 
	#TIMER_EMR_EMC3_SHIFT
 10

	)

231 
	#TIMER_EMR_EMC3_MASK
 (0x3 << 
TIMER_EMR_EMC3_SHIFT
)

	)

233 
	#TIMER_EMR_EMC_NOTHING
 0x0

	)

234 
	#TIMER_EMR_EMC_CLEAR
 0x1

	)

235 
	#TIMER_EMR_EMC_SET
 0x2

	)

236 
	#TIMER_EMR_EMC_TOGGLE
 0x3

	)

240 
	#TIMER_CTCR_MODE_TIMER
 (0x0 << 0)

	)

241 
	#TIMER_CTCR_MODE_COUNTER_RISING
 (0x1 << 0)

	)

242 
	#TIMER_CTCR_MODE_COUNTER_FALLING
 (0x2 << 0)

	)

243 
	#TIMER_CTCR_MODE_COUNTER_BOTH
 (0x3 << 0)

	)

244 
	#TIMER_CTCR_MODE_MASK
 (0x3 << 0)

	)

246 
	#TIMER_CTCR_CINSEL_CAPN_0
 (0x0 << 2)

	)

247 
	#TIMER_CTCR_CINSEL_CAPN_1
 (0x1 << 2)

	)

248 
	#TIMER_CTCR_CINSEL_CAPN_2
 (0x2 << 2)

	)

249 
	#TIMER_CTCR_CINSEL_CAPN_3
 (0x3 << 2)

	)

250 
	#TIMER_CTCR_CINSEL_MASK
 (0x3 << 2)

	)

254 
BEGIN_DECLS


256 
timî_ª£t
(
uöt32_t
 
timî_≥rùhîÆ
);

257 
timî_íabÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
);

258 
timî_dißbÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
);

259 
uöt32_t
 
timî_gë_cou¡î
(uöt32_à
timî_≥rùhîÆ
);

260 
timî_£t_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
cou¡
);

261 
uöt32_t
 
timî_gë_¥esˇÀr
(uöt32_à
timî_≥rùhîÆ
);

262 
timî_£t_¥esˇÀr
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
¥esˇÀr
);

263 
timî_£t_mode
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
mode
);

264 
timî_£t_cou¡_öput
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
öput
);

266 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc43xx/uart.h

20 #i‚de‡
LPC43XX_UART_H


21 
	#LPC43XX_UART_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

29 
	#UART0
 
USART0_BASE


	)

30 
	#UART1
 
UART1_BASE


	)

31 
	#UART2
 
USART2_BASE


	)

32 
	#UART3
 
USART3_BASE


	)

37 
	#UART_RBR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x000Ë

	)

40 
	#UART_THR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x000Ë

	)

43 
	#UART_DLL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x000Ë

	)

46 
	#UART_DLM
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x004Ë

	)

49 
	#UART_IER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x004)

	)

52 
	#UART_IIR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x008)

	)

55 
	#UART_FCR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x008)

	)

58 
	#UART_LCR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00C)

	)

63 
	#UART_LSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x014)

	)

66 
	#UART_ACR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x020)

	)

69 
	#UART_ICR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x024)

	)

72 
	#UART_FDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x028)

	)

75 
	#UART_OSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x02C)

	)

78 
	#UART_HDEN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x040)

	)

81 
	#UART_SCICTRL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x048)

	)

84 
	#UART_RS485CTRL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x04C)

	)

87 
	#UART_RS485ADRMATCH
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x050)

	)

90 
	#UART_RS485DLY
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x054)

	)

93 
	#UART_SYNCCTRL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x058)

	)

96 
	#UART_TER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x05C)

	)

103 
	#UART_RBR_MASKBIT
 ((
uöt8_t
)0xFF)

	)

109 
	#UART_THR_MASKBIT
 ((
uöt8_t
)0xFF)

	)

115 
	#UART_LOAD_DLL
(
div
Ë((divË& 0xFF)

	)

118 
	#UART_DLL_MASKBIT
 ((
uöt8_t
)0xFF)

	)

124 
	#UART_DLM_MASKBIT
 ((
uöt8_t
)0xFF)

	)

127 
	#UART_LOAD_DLM
(
div
Ë(((divË>> 8Ë& 0xFF)

	)

133 
	#UART_IER_RBRINT_EN
 (1 << 0)

	)

135 
	#UART_IER_THREINT_EN
 (1 << 1)

	)

137 
	#UART_IER_RLSINT_EN
 (1 << 2)

	)

139 
	#UART1_IER_MSINT_EN
 (1 << 3)

	)

141 
	#UART1_IER_CTSINT_EN
 (1 << 7)

	)

143 
	#UART_IER_ABEOINT_EN
 (1 << 8)

	)

145 
	#UART_IER_ABTOINT_EN
 (1 << 9)

	)

147 
	#UART_IER_BITMASK
 ((
uöt32_t
)(0x307))

	)

149 
	#UART1_IER_BITMASK
 ((
uöt32_t
)(0x38F))

	)

156 
	#UART_IIR_INTSTAT_PEND
 (1 << 0)

	)

158 
	#UART1_IIR_INTID_MODEM
 (0 << 1)

	)

160 
	#UART_IIR_INTID_THRE
 (1 << 1)

	)

162 
	#UART_IIR_INTID_RDA
 (2 << 1)

	)

164 
	#UART_IIR_INTID_RLS
 (3 << 1)

	)

166 
	#UART_IIR_INTID_CTI
 (6 << 1)

	)

168 
	#UART_IIR_INTID_MASK
 (7 << 1)

	)

170 
	#UART_IIR_FIFO_EN
 (3 << 6)

	)

172 
	#UART_IIR_ABEO_INT
 (1 << 8)

	)

174 
	#UART_IIR_ABTO_INT
 (1 << 9)

	)

176 
	#UART_IIR_BITMASK
 ((
uöt32_t
)(0x3CF))

	)

182 
	#UART_FCR_FIFO_EN
 (1 << 0)

	)

184 
	#UART_FCR_RX_RS
 (1 << 1)

	)

186 
	#UART_FCR_TX_RS
 (1 << 2)

	)

188 
	#UART_FCR_DMAMODE_SEL
 (1 << 3)

	)

190 
	#UART_FCR_TRG_LEV0
 (0 << 6)

	)

192 
	#UART_FCR_TRG_LEV1
 (1 << 6)

	)

194 
	#UART_FCR_TRG_LEV2
 (2 << 6)

	)

196 
	#UART_FCR_TRG_LEV3
 (3 << 6)

	)

198 
	#UART_FCR_BITMASK
 ((
uöt8_t
)(0xCF))

	)

199 
	#UART_TX_FIFO_SIZE
 (16)

	)

205 
	#UART_LCR_WLEN5
 (0 << 0)

	)

207 
	#UART_LCR_WLEN6
 (1 << 0)

	)

209 
	#UART_LCR_WLEN7
 (2 << 0)

	)

211 
	#UART_LCR_WLEN8
 (3 << 0)

	)

213 
	#UART_LCR_ONE_STOPBIT
 (0 << 2)

	)

215 
	#UART_LCR_TWO_STOPBIT
 (1 << 2)

	)

218 
	#UART_LCR_NO_PARITY
 (0 << 3)

	)

220 
	#UART_LCR_PARITY_EN
 (1 << 3)

	)

222 
	#UART_LCR_PARITY_ODD
 (0 << 4)

	)

224 
	#UART_LCR_PARITY_EVEN
 (1 << 4)

	)

226 
	#UART_LCR_PARITY_SP_1
 (1 << 5)

	)

228 
	#UART_LCR_PARITY_SP_0
 ((1 << 5Ë| (1 << 4))

	)

230 
	#UART_LCR_BREAK_EN
 (1 << 6)

	)

232 
	#UART_LCR_DLAB_EN
 (1 << 7)

	)

234 
	#UART_LCR_BITMASK
 ((
uöt8_t
)(0xFF))

	)

240 
	#UART_LSR_RDR
 (1 << 0)

	)

242 
	#UART_LSR_OE
 (1 << 1)

	)

244 
	#UART_LSR_PE
 (1 << 2)

	)

246 
	#UART_LSR_FE
 (1 << 3)

	)

248 
	#UART_LSR_BI
 (1 << 4)

	)

250 
	#UART_LSR_THRE
 (1 << 5)

	)

252 
	#UART_LSR_TEMT
 (1 << 6)

	)

254 
	#UART_LSR_RXFE
 (1 << 7)

	)

256 
	#UART_LSR_BITMASK
 ((
uöt8_t
)(0xFF))

	)

257 
	#UART_LSR_ERROR_MASK
 \

258 (
UART_LSR_OE
 | 
UART_LSR_PE
 | 
UART_LSR_FE
 | 
UART_LSR_BI
 | 
UART_LSR_RXFE
)

	)

265 
	#UART_SCR_BIMASK
 ((
uöt8_t
)(0xFF))

	)

272 
	#UART_ACR_START
 (1 << 0)

	)

274 
	#UART_ACR_MODE
 (1 << 1)

	)

276 
	#UART_ACR_AUTO_RESTART
 (1 << 2)

	)

278 
	#UART_ACR_ABEOINT_CLR
 (1 << 8)

	)

280 
	#UART_ACR_ABTOINT_CLR
 (1 << 9)

	)

282 
	#UART_ACR_BITMASK
 ((
uöt32_t
)(0x307))

	)

288 
	#UART_ICR_IRDAEN
 (1 << 0)

	)

290 
	#UART_ICR_IRDAINV
 (1 << 1)

	)

292 
	#UART_ICR_FIXPULSE_EN
 (1 << 2)

	)

294 
	#UART_ICR_PULSEDIV
(
n
Ë((
uöt32_t
)((“)&0x07)<<3))

	)

296 
	#UART_ICR_BITMASK
 ((
uöt32_t
)(0x3F))

	)

302 
	#UART_HDEN_HDEN
 (1 << 0)

	)

308 
	#UART_SCICTRL_SCIEN
 (1 << 0)

	)

310 
	#UART_SCICTRL_NACKDIS
 (1 << 1)

	)

312 
	#UART_SCICTRL_PROTSEL_T1
 (1 << 2)

	)

314 
	#UART_SCICTRL_TXRETRY
(
n
Ë((
uöt32_t
)((“)&0x07)<<5))

	)

316 
	#UART_SCICTRL_GUARDTIME
(
n
Ë((
uöt32_t
)((“)&0xFF)<<8))

	)

322 
	#UART_SYNCCTRL_SYNC
 (1 << 0)

	)

324 
	#UART_SYNCCTRL_CSRC_MASTER
 (1 << 1)

	)

326 
	#UART_SYNCCTRL_FES
 (1 << 2)

	)

328 
	#UART_SYNCCTRL_TSBYPASS
 (1 << 3)

	)

330 
	#UART_SYNCCTRL_CSCEN
 (1 << 4)

	)

332 
	#UART_SYNCCTRL_NOSTARTSTOP
 (1 << 5)

	)

334 
	#UART_SYNCCTRL_CCCLR
 (1 << 6)

	)

341 
	#UART_FDR_DIVADDVAL
(
n
Ë((
uöt32_t
)(“)&0x0F))

	)

343 
	#UART_FDR_MULVAL
(
n
Ë((
uöt32_t
)((“)<<4)&0xF0))

	)

345 
	#UART_FDR_BITMASK
 ((
uöt32_t
)(0xFF))

	)

351 
	#UART_TER_TXEN
 (1 << 0Ë

	)

357 
	#UART_FIFOLVL_RX
(
n
Ë((
uöt32_t
)(“)&0x0F))

	)

359 
	#UART_FIFOLVL_TX
(
n
Ë((
uöt32_t
)((“)>>8)&0x0F))

	)

361 
	#UART_FIFOLVL_BITMASK
 ((
uöt32_t
)(0x0F0F))

	)

371 
	mUART_DATABIT_5
 = 
UART_LCR_WLEN5
,

372 
	mUART_DATABIT_6
 = 
UART_LCR_WLEN6
,

373 
	mUART_DATABIT_7
 = 
UART_LCR_WLEN7
,

374 
	mUART_DATABIT_8
 = 
UART_LCR_WLEN8


375 } 
	tu¨t_d©abô_t
;

382 
	mUART_STOPBIT_1
 = 
UART_LCR_ONE_STOPBIT
,

384 
	mUART_STOPBIT_2
 = 
UART_LCR_TWO_STOPBIT


385 } 
	tu¨t_°›bô_t
;

392 
	mUART_PARITY_NONE
 = 
UART_LCR_NO_PARITY
,

394 
	mUART_PARITY_ODD
 = (
UART_LCR_PARITY_ODD
 | 
UART_LCR_PARITY_EN
),

396 
	mUART_PARITY_EVEN
 = (
UART_LCR_PARITY_EVEN
 | 
UART_LCR_PARITY_EN
),

398 
	mUART_PARITY_SP_1
 = (
UART_LCR_PARITY_SP_1
 | 
UART_LCR_PARITY_EN
),

400 
	mUART_PARITY_SP_0
 = (
UART_LCR_PARITY_SP_0
 | 
UART_LCR_PARITY_EN
)

401 } 
	tu¨t_∑rôy_t
;

404 
	mUART0_NUM
 = 
UART0
,

405 
	mUART1_NUM
 = 
UART1
,

406 
	mUART2_NUM
 = 
UART2
,

407 
	mUART3_NUM
 = 
UART3


408 } 
	tu¨t_num_t
;

411 
	mUART_NO_ERROR
 = 0,

412 
	mUART_TIMEOUT_ERROR
 = 1

413 } 
	tu¨t_îr‹_t
;

416 
	mUART_RX_NO_DATA
 = 0,

417 
	mUART_RX_DATA_READY
 = 1,

418 
	mUART_RX_DATA_ERROR
 = 2

419 } 
	tu¨t_rx_d©a_ªady_t
;

423 
BEGIN_DECLS


426 
u¨t_öô
(
u¨t_num_t
 
u¨t_num
, 
u¨t_d©abô_t
 
d©a_nb_bôs
,

427 
u¨t_°›bô_t
 
d©a_nb_°›
, 
u¨t_∑rôy_t
 
d©a_∑rôy
,

428 
uöt16_t
 
u¨t_divis‹
, 
uöt8_t
 
u¨t_divaddvÆ
, uöt8_à
u¨t_mulvÆ
);

430 
u¨t_rx_d©a_ªady_t
 
u¨t_rx_d©a_ªady
(
u¨t_num_t
 
u¨t_num
);

431 
uöt8_t
 
u¨t_ªad
(
u¨t_num_t
 
u¨t_num
);

432 
uöt8_t
 
u¨t_ªad_timeout
(
u¨t_num_t
 
u¨t_num
, 
uöt32_t
 
rx_timeout_nb_cy˛es
,

433 
u¨t_îr‹_t
 *
îr‹
);

434 
u¨t_wrôe
(
u¨t_num_t
 
u¨t_num
, 
uöt8_t
 
d©a
);

436 
	gEND_DECLS


	@libopencm3/include/libopencm3/lpc43xx/usb.h

20 #i‚de‡
LPC43XX_USB_H


21 
	#LPC43XX_USB_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

26 
	#BIT_MASK
(
ba£_«me
) \

27 (((1 << 
ba£_«me
##
_WIDTH
Ë- 1Ë<< ba£_«me##
_SHIFT
)

	)

28 
	#BIT_ARG
(
ba£_«me
, 
x
Ë((xË<< ba£_«me##
_SHIFT
)

	)

38 
usb_å™s„r_des¸ùt‹_t
 
	tusb_å™s„r_des¸ùt‹_t
;

39 
	susb_å™s„r_des¸ùt‹_t
 {

40 vﬁ©ûê
usb_å™s„r_des¸ùt‹_t
 *
	m√xt_dtd_poöãr
;

41 vﬁ©ûê
uöt32_t
 
	mtŸÆ_byãs
;

42 vﬁ©ûê
uöt32_t
 
	mbuf„r_poöãr_∑ge
[5];

43 vﬁ©ûê
uöt32_t
 
	m_ª£rved
;

46 
	#USB_TD_NEXT_DTD_POINTER_TERMINATE_SHIFT
 (0)

	)

47 
	#USB_TD_NEXT_DTD_POINTER_TERMINATE
 \

48 ((vﬁ©ûê
usb_å™s„r_des¸ùt‹_t
 *) \

49 (1 << 
USB_TD_NEXT_DTD_POINTER_TERMINATE_SHIFT
))

	)

51 
	#USB_TD_DTD_TOKEN_TOTAL_BYTES_SHIFT
 (16)

	)

52 
	#USB_TD_DTD_TOKEN_TOTAL_BYTES_WIDTH
 (15)

	)

53 
	#USB_TD_DTD_TOKEN_TOTAL_BYTES_MASK
 
	`BIT_MASK
(
USB_TD_DTD_TOKEN_TOTAL_BYTES
)

	)

54 
	#USB_TD_DTD_TOKEN_TOTAL_BYTES
(
x
Ë
	`BIT_ARG
(
USB_TD_DTD_TOKEN_TOTAL_BYTES
, (x))

	)

56 
	#USB_TD_DTD_TOKEN_IOC_SHIFT
 (15)

	)

57 
	#USB_TD_DTD_TOKEN_IOC
 (1 << 
USB_TD_DTD_TOKEN_IOC_SHIFT
)

	)

59 
	#USB_TD_DTD_TOKEN_MULTO_SHIFT
 (10)

	)

60 
	#USB_TD_DTD_TOKEN_MULTO_WIDTH
 (2)

	)

61 
	#USB_TD_DTD_TOKEN_MULTO_MASK
 
	`BIT_MASK
(
USB_TD_DTD_TOKEN_MULTO
)

	)

62 
	#USB_TD_DTD_TOKEN_MULTO
(
x
Ë
	`BIT_ARG
(
USB_TD_DTD_TOKEN_MULTO
, (x))

	)

64 
	#USB_TD_DTD_TOKEN_STATUS_ACTIVE_SHIFT
 (7)

	)

65 
	#USB_TD_DTD_TOKEN_STATUS_ACTIVE
 \

66 (1 << 
USB_TD_DTD_TOKEN_STATUS_ACTIVE_SHIFT
)

	)

68 
	#USB_TD_DTD_TOKEN_STATUS_HALTED_SHIFT
 (6)

	)

69 
	#USB_TD_DTD_TOKEN_STATUS_HALTED
 \

70 (1 << 
USB_TD_DTD_TOKEN_STATUS_HALTED_SHIFT
)

	)

72 
	#USB_TD_DTD_TOKEN_STATUS_BUFFER_ERROR_SHIFT
 (5)

	)

73 
	#USB_TD_DTD_TOKEN_STATUS_BUFFER_ERROR
 \

74 (1 << 
USB_TD_DTD_TOKEN_STATUS_BUFFER_ERROR_SHIFT
)

	)

76 
	#USB_TD_DTD_TOKEN_STATUS_TRANSACTION_ERROR_SHIFT
 (3)

	)

77 
	#USB_TD_DTD_TOKEN_STATUS_TRANSACTION_ERROR
 \

78 (1 << 
USB_TD_DTD_TOKEN_STATUS_TRANSACTION_ERROR_SHIFT
)

	)

84 vﬁ©ûê
uöt32_t
 
	mˇ∑bûôõs
;

85 vﬁ©ûê
usb_å™s„r_des¸ùt‹_t
 *
	mcuºít_dtd_poöãr
;

86 vﬁ©ûê
usb_å™s„r_des¸ùt‹_t
 *
	m√xt_dtd_poöãr
;

87 vﬁ©ûê
uöt32_t
 
	mtŸÆ_byãs
;

88 vﬁ©ûê
uöt32_t
 
	mbuf„r_poöãr_∑ge
[5];

89 vﬁ©ûê
uöt32_t
 
	m_ª£rved_0
;

90 vﬁ©ûê
uöt8_t
 
	m£tup
[8];

91 vﬁ©ûê
uöt32_t
 
	m_ª£rved_1
[4];

92 } 
	tusb_queue_hód_t
;

94 
	#USB_QH_CAPABILITIES_IOS_SHIFT
 (15)

	)

95 
	#USB_QH_CAPABILITIES_IOS
 (1 << 
USB_QH_CAPABILITIES_IOS_SHIFT
)

	)

97 
	#USB_QH_CAPABILITIES_MPL_SHIFT
 (16)

	)

98 
	#USB_QH_CAPABILITIES_MPL_WIDTH
 (11)

	)

99 
	#USB_QH_CAPABILITIES_MPL_MASK
 
	`BIT_MASK
(
USB_QH_CAPABILITIES_MPL
)

	)

100 
	#USB_QH_CAPABILITIES_MPL
(
x
Ë
	`BIT_ARG
(
USB_QH_CAPABILITIES_MPL
, (x))

	)

102 
	#USB_QH_CAPABILITIES_ZLT_SHIFT
 (29)

	)

103 
	#USB_QH_CAPABILITIES_ZLT
 (1 << 
USB_QH_CAPABILITIES_ZLT_SHIFT
)

	)

105 
	#USB_QH_CAPABILITIES_MULT_SHIFT
 (30)

	)

106 
	#USB_QH_CAPABILITIES_MULT_WIDTH
 (2)

	)

107 
	#USB_QH_CAPABILITIES_MULT_MASK
 
	`BIT_MASK
(
USB_QH_CAPABILITIES_MULT
)

	)

108 
	#USB_QH_CAPABILITIES_MULT
(
x
Ë
	`BIT_ARG
(
USB_QH_CAPABILITIES_MULT
, (x))

	)

115 
	#USB0_CAPLENGTH
 
	`MMIO32
(
USB0_BASE
 + 0x100)

	)

118 
	#USB0_HCSPARAMS
 
	`MMIO32
(
USB0_BASE
 + 0x104)

	)

121 
	#USB0_HCCPARAMS
 
	`MMIO32
(
USB0_BASE
 + 0x108)

	)

124 
	#USB0_DCIVERSION
 
	`MMIO32
(
USB0_BASE
 + 0x120)

	)

127 
	#USB0_DCCPARAMS
 
	`MMIO32
(
USB0_BASE
 + 0x124)

	)

133 
	#USB0_USBCMD_D
 
	`MMIO32
(
USB0_BASE
 + 0x140)

	)

136 
	#USB0_USBCMD_H
 
	`MMIO32
(
USB0_BASE
 + 0x140)

	)

139 
	#USB0_USBSTS_D
 
	`MMIO32
(
USB0_BASE
 + 0x144)

	)

142 
	#USB0_USBSTS_H
 
	`MMIO32
(
USB0_BASE
 + 0x144)

	)

145 
	#USB0_USBINTR_D
 
	`MMIO32
(
USB0_BASE
 + 0x148)

	)

148 
	#USB0_USBINTR_H
 
	`MMIO32
(
USB0_BASE
 + 0x148)

	)

151 
	#USB0_FRINDEX_D
 
	`MMIO32
(
USB0_BASE
 + 0x14C)

	)

154 
	#USB0_FRINDEX_H
 
	`MMIO32
(
USB0_BASE
 + 0x14C)

	)

157 
	#USB0_DEVICEADDR
 
	`MMIO32
(
USB0_BASE
 + 0x154)

	)

160 
	#USB0_PERIODICLISTBASE
 
	`MMIO32
(
USB0_BASE
 + 0x154)

	)

163 
	#USB0_ENDPOINTLISTADDR
 
	`MMIO32
(
USB0_BASE
 + 0x158)

	)

166 
	#USB0_ASYNCLISTADDR
 
	`MMIO32
(
USB0_BASE
 + 0x158)

	)

169 
	#USB0_TTCTRL
 
	`MMIO32
(
USB0_BASE
 + 0x15C)

	)

172 
	#USB0_BURSTSIZE
 
	`MMIO32
(
USB0_BASE
 + 0x160)

	)

175 
	#USB0_TXFILLTUNING
 
	`MMIO32
(
USB0_BASE
 + 0x164)

	)

178 
	#USB0_BINTERVAL
 
	`MMIO32
(
USB0_BASE
 + 0x174)

	)

181 
	#USB0_ENDPTNAK
 
	`MMIO32
(
USB0_BASE
 + 0x178)

	)

184 
	#USB0_ENDPTNAKEN
 
	`MMIO32
(
USB0_BASE
 + 0x17C)

	)

187 
	#USB0_PORTSC1_D
 
	`MMIO32
(
USB0_BASE
 + 0x184)

	)

190 
	#USB0_PORTSC1_H
 
	`MMIO32
(
USB0_BASE
 + 0x184)

	)

193 
	#USB0_OTGSC
 
	`MMIO32
(
USB0_BASE
 + 0x1A4)

	)

196 
	#USB0_USBMODE_D
 
	`MMIO32
(
USB0_BASE
 + 0x1A8)

	)

199 
	#USB0_USBMODE_H
 
	`MMIO32
(
USB0_BASE
 + 0x1A8)

	)

205 
	#USB0_ENDPTSETUPSTAT
 
	`MMIO32
(
USB0_BASE
 + 0x1AC)

	)

208 
	#USB0_ENDPTPRIME
 
	`MMIO32
(
USB0_BASE
 + 0x1B0)

	)

211 
	#USB0_ENDPTFLUSH
 
	`MMIO32
(
USB0_BASE
 + 0x1B4)

	)

214 
	#USB0_ENDPTSTAT
 
	`MMIO32
(
USB0_BASE
 + 0x1B8)

	)

217 
	#USB0_ENDPTCOMPLETE
 
	`MMIO32
(
USB0_BASE
 + 0x1BC)

	)

220 
	#USB0_ENDPTCTRL
(
logiˇl_ï
Ë
	`MMIO32
(
USB0_BASE
 + 0x1C0 + \

221 ((
logiˇl_ï
Ë* 4))

	)

224 
	#USB0_ENDPTCTRL0
 
	`USB0_ENDPTCTRL
(0)

	)

227 
	#USB0_ENDPTCTRL1
 
	`USB0_ENDPTCTRL
(1)

	)

230 
	#USB0_ENDPTCTRL2
 
	`USB0_ENDPTCTRL
(2)

	)

233 
	#USB0_ENDPTCTRL3
 
	`USB0_ENDPTCTRL
(3)

	)

236 
	#USB0_ENDPTCTRL4
 
	`USB0_ENDPTCTRL
(4)

	)

239 
	#USB0_ENDPTCTRL5
 
	`USB0_ENDPTCTRL
(5)

	)

245 
	#USB0_CAPLENGTH_CAPLENGTH_SHIFT
 (0)

	)

246 
	#USB0_CAPLENGTH_CAPLENGTH_MASK
 (0xf‡<< 
USB0_CAPLENGTH_CAPLENGTH_SHIFT
)

	)

247 
	#USB0_CAPLENGTH_CAPLENGTH
(
x
Ë((xË<< 
USB0_CAPLENGTH_CAPLENGTH_SHIFT
)

	)

251 
	#USB0_CAPLENGTH_HCIVERSION_SHIFT
 (8)

	)

252 
	#USB0_CAPLENGTH_HCIVERSION_MASK
 \

253 (0xfff‡<< 
USB0_CAPLENGTH_HCIVERSION_SHIFT
)

	)

254 
	#USB0_CAPLENGTH_HCIVERSION
(
x
Ë((xË<< 
USB0_CAPLENGTH_HCIVERSION_SHIFT
)

	)

259 
	#USB0_HCSPARAMS_N_PORTS_SHIFT
 (0)

	)

260 
	#USB0_HCSPARAMS_N_PORTS_MASK
 (0x‡<< 
USB0_HCSPARAMS_N_PORTS_SHIFT
)

	)

261 
	#USB0_HCSPARAMS_N_PORTS
(
x
Ë((xË<< 
USB0_HCSPARAMS_N_PORTS_SHIFT
)

	)

264 
	#USB0_HCSPARAMS_PPC_SHIFT
 (4)

	)

265 
	#USB0_HCSPARAMS_PPC
 (1 << 
USB0_HCSPARAMS_PPC_SHIFT
)

	)

268 
	#USB0_HCSPARAMS_N_PCC_SHIFT
 (8)

	)

269 
	#USB0_HCSPARAMS_N_PCC_MASK
 (0x‡<< 
USB0_HCSPARAMS_N_PCC_SHIFT
)

	)

270 
	#USB0_HCSPARAMS_N_PCC
(
x
Ë((xË<< 
USB0_HCSPARAMS_N_PCC_SHIFT
)

	)

273 
	#USB0_HCSPARAMS_N_CC_SHIFT
 (12)

	)

274 
	#USB0_HCSPARAMS_N_CC_MASK
 (0x‡<< 
USB0_HCSPARAMS_N_CC_SHIFT
)

	)

275 
	#USB0_HCSPARAMS_N_CC
(
x
Ë((xË<< 
USB0_HCSPARAMS_N_CC_SHIFT
)

	)

278 
	#USB0_HCSPARAMS_PI_SHIFT
 (16)

	)

279 
	#USB0_HCSPARAMS_PI
 (1 << 
USB0_HCSPARAMS_PI_SHIFT
)

	)

282 
	#USB0_HCSPARAMS_N_PTT_SHIFT
 (20)

	)

283 
	#USB0_HCSPARAMS_N_PTT_MASK
 (0x‡<< 
USB0_HCSPARAMS_N_PTT_SHIFT
)

	)

284 
	#USB0_HCSPARAMS_N_PTT
(
x
Ë((xË<< 
USB0_HCSPARAMS_N_PTT_SHIFT
)

	)

287 
	#USB0_HCSPARAMS_N_TT_SHIFT
 (24)

	)

288 
	#USB0_HCSPARAMS_N_TT_MASK
 (0x‡<< 
USB0_HCSPARAMS_N_TT_SHIFT
)

	)

289 
	#USB0_HCSPARAMS_N_TT
(
x
Ë((xË<< 
USB0_HCSPARAMS_N_TT_SHIFT
)

	)

294 
	#USB0_HCCPARAMS_ADC_SHIFT
 (0)

	)

295 
	#USB0_HCCPARAMS_ADC
 (1 << 
USB0_HCCPARAMS_ADC_SHIFT
)

	)

298 
	#USB0_HCCPARAMS_PFL_SHIFT
 (1)

	)

299 
	#USB0_HCCPARAMS_PFL
 (1 << 
USB0_HCCPARAMS_PFL_SHIFT
)

	)

302 
	#USB0_HCCPARAMS_ASP_SHIFT
 (2)

	)

303 
	#USB0_HCCPARAMS_ASP
 (1 << 
USB0_HCCPARAMS_ASP_SHIFT
)

	)

306 
	#USB0_HCCPARAMS_IST_SHIFT
 (4)

	)

307 
	#USB0_HCCPARAMS_IST_MASK
 (0x‡<< 
USB0_HCCPARAMS_IST_SHIFT
)

	)

308 
	#USB0_HCCPARAMS_IST
(
x
Ë((xË<< 
USB0_HCCPARAMS_IST_SHIFT
)

	)

311 
	#USB0_HCCPARAMS_EECP_SHIFT
 (8)

	)

312 
	#USB0_HCCPARAMS_EECP_MASK
 (0x‡<< 
USB0_HCCPARAMS_EECP_SHIFT
)

	)

313 
	#USB0_HCCPARAMS_EECP
(
x
Ë((xË<< 
USB0_HCCPARAMS_EECP_SHIFT
)

	)

318 
	#USB0_DCCPARAMS_DEN_SHIFT
 (0)

	)

319 
	#USB0_DCCPARAMS_DEN_MASK
 (0x1‡<< 
USB0_DCCPARAMS_DEN_SHIFT
)

	)

320 
	#USB0_DCCPARAMS_DEN
(
x
Ë((xË<< 
USB0_DCCPARAMS_DEN_SHIFT
)

	)

323 
	#USB0_DCCPARAMS_DC_SHIFT
 (7)

	)

324 
	#USB0_DCCPARAMS_DC
 (1 << 
USB0_DCCPARAMS_DC_SHIFT
)

	)

327 
	#USB0_DCCPARAMS_HC_SHIFT
 (8)

	)

328 
	#USB0_DCCPARAMS_HC
 (1 << 
USB0_DCCPARAMS_HC_SHIFT
)

	)

333 
	#USB0_USBCMD_D_RS_SHIFT
 (0)

	)

334 
	#USB0_USBCMD_D_RS
 (1 << 
USB0_USBCMD_D_RS_SHIFT
)

	)

337 
	#USB0_USBCMD_D_RST_SHIFT
 (1)

	)

338 
	#USB0_USBCMD_D_RST
 (1 << 
USB0_USBCMD_D_RST_SHIFT
)

	)

341 
	#USB0_USBCMD_D_SUTW_SHIFT
 (13)

	)

342 
	#USB0_USBCMD_D_SUTW
 (1 << 
USB0_USBCMD_D_SUTW_SHIFT
)

	)

345 
	#USB0_USBCMD_D_ATDTW_SHIFT
 (14)

	)

346 
	#USB0_USBCMD_D_ATDTW
 (1 << 
USB0_USBCMD_D_ATDTW_SHIFT
)

	)

349 
	#USB0_USBCMD_D_ITC_SHIFT
 (16)

	)

350 
	#USB0_USBCMD_D_ITC_MASK
 (0xf‡<< 
USB0_USBCMD_D_ITC_SHIFT
)

	)

351 
	#USB0_USBCMD_D_ITC
(
x
Ë((xË<< 
USB0_USBCMD_D_ITC_SHIFT
)

	)

356 
	#USB0_USBCMD_H_RS_SHIFT
 (0)

	)

357 
	#USB0_USBCMD_H_RS
 (1 << 
USB0_USBCMD_H_RS_SHIFT
)

	)

360 
	#USB0_USBCMD_H_RST_SHIFT
 (1)

	)

361 
	#USB0_USBCMD_H_RST
 (1 << 
USB0_USBCMD_H_RST_SHIFT
)

	)

364 
	#USB0_USBCMD_H_FS0_SHIFT
 (2)

	)

365 
	#USB0_USBCMD_H_FS0
 (1 << 
USB0_USBCMD_H_FS0_SHIFT
)

	)

368 
	#USB0_USBCMD_H_FS1_SHIFT
 (3)

	)

369 
	#USB0_USBCMD_H_FS1
 (1 << 
USB0_USBCMD_H_FS1_SHIFT
)

	)

373 
	#USB0_USBCMD_H_PSE_SHIFT
 (4)

	)

374 
	#USB0_USBCMD_H_PSE
 (1 << 
USB0_USBCMD_H_PSE_SHIFT
)

	)

378 
	#USB0_USBCMD_H_ASE_SHIFT
 (5)

	)

379 
	#USB0_USBCMD_H_ASE
 (1 << 
USB0_USBCMD_H_ASE_SHIFT
)

	)

383 
	#USB0_USBCMD_H_IAA_SHIFT
 (6)

	)

384 
	#USB0_USBCMD_H_IAA
 (1 << 
USB0_USBCMD_H_IAA_SHIFT
)

	)

387 
	#USB0_USBCMD_H_ASP1_0_SHIFT
 (8)

	)

388 
	#USB0_USBCMD_H_ASP1_0_MASK
 (0x3 << 
USB0_USBCMD_H_ASP1_0_SHIFT
)

	)

389 
	#USB0_USBCMD_H_ASP1_0
(
x
Ë((xË<< 
USB0_USBCMD_H_ASP1_0_SHIFT
)

	)

392 
	#USB0_USBCMD_H_ASPE_SHIFT
 (11)

	)

393 
	#USB0_USBCMD_H_ASPE
 (1 << 
USB0_USBCMD_H_ASPE_SHIFT
)

	)

396 
	#USB0_USBCMD_H_FS2_SHIFT
 (15)

	)

397 
	#USB0_USBCMD_H_FS2
 (1 << 
USB0_USBCMD_H_FS2_SHIFT
)

	)

400 
	#USB0_USBCMD_H_ITC_SHIFT
 (16)

	)

401 
	#USB0_USBCMD_H_ITC_MASK
 (0xf‡<< 
USB0_USBCMD_H_ITC_SHIFT
)

	)

402 
	#USB0_USBCMD_H_ITC
(
x
Ë((xË<< 
USB0_USBCMD_H_ITC_SHIFT
)

	)

407 
	#USB0_USBSTS_D_UI_SHIFT
 (0)

	)

408 
	#USB0_USBSTS_D_UI
 (1 << 
USB0_USBSTS_D_UI_SHIFT
)

	)

411 
	#USB0_USBSTS_D_UEI_SHIFT
 (1)

	)

412 
	#USB0_USBSTS_D_UEI
 (1 << 
USB0_USBSTS_D_UEI_SHIFT
)

	)

415 
	#USB0_USBSTS_D_PCI_SHIFT
 (2)

	)

416 
	#USB0_USBSTS_D_PCI
 (1 << 
USB0_USBSTS_D_PCI_SHIFT
)

	)

419 
	#USB0_USBSTS_D_URI_SHIFT
 (6)

	)

420 
	#USB0_USBSTS_D_URI
 (1 << 
USB0_USBSTS_D_URI_SHIFT
)

	)

423 
	#USB0_USBSTS_D_SRI_SHIFT
 (7)

	)

424 
	#USB0_USBSTS_D_SRI
 (1 << 
USB0_USBSTS_D_SRI_SHIFT
)

	)

427 
	#USB0_USBSTS_D_SLI_SHIFT
 (8)

	)

428 
	#USB0_USBSTS_D_SLI
 (1 << 
USB0_USBSTS_D_SLI_SHIFT
)

	)

431 
	#USB0_USBSTS_D_NAKI_SHIFT
 (16)

	)

432 
	#USB0_USBSTS_D_NAKI
 (1 << 
USB0_USBSTS_D_NAKI_SHIFT
)

	)

437 
	#USB0_USBSTS_H_UI_SHIFT
 (0)

	)

438 
	#USB0_USBSTS_H_UI
 (1 << 
USB0_USBSTS_H_UI_SHIFT
)

	)

441 
	#USB0_USBSTS_H_UEI_SHIFT
 (1)

	)

442 
	#USB0_USBSTS_H_UEI
 (1 << 
USB0_USBSTS_H_UEI_SHIFT
)

	)

445 
	#USB0_USBSTS_H_PCI_SHIFT
 (2)

	)

446 
	#USB0_USBSTS_H_PCI
 (1 << 
USB0_USBSTS_H_PCI_SHIFT
)

	)

449 
	#USB0_USBSTS_H_FRI_SHIFT
 (3)

	)

450 
	#USB0_USBSTS_H_FRI
 (1 << 
USB0_USBSTS_H_FRI_SHIFT
)

	)

453 
	#USB0_USBSTS_H_AAI_SHIFT
 (5)

	)

454 
	#USB0_USBSTS_H_AAI
 (1 << 
USB0_USBSTS_H_AAI_SHIFT
)

	)

457 
	#USB0_USBSTS_H_SRI_SHIFT
 (7)

	)

458 
	#USB0_USBSTS_H_SRI
 (1 << 
USB0_USBSTS_H_SRI_SHIFT
)

	)

461 
	#USB0_USBSTS_H_HCH_SHIFT
 (12)

	)

462 
	#USB0_USBSTS_H_HCH
 (1 << 
USB0_USBSTS_H_HCH_SHIFT
)

	)

465 
	#USB0_USBSTS_H_RCL_SHIFT
 (13)

	)

466 
	#USB0_USBSTS_H_RCL
 (1 << 
USB0_USBSTS_H_RCL_SHIFT
)

	)

469 
	#USB0_USBSTS_H_PS_SHIFT
 (14)

	)

470 
	#USB0_USBSTS_H_PS
 (1 << 
USB0_USBSTS_H_PS_SHIFT
)

	)

473 
	#USB0_USBSTS_H_AS_SHIFT
 (15)

	)

474 
	#USB0_USBSTS_H_AS
 (1 << 
USB0_USBSTS_H_AS_SHIFT
)

	)

477 
	#USB0_USBSTS_H_UAI_SHIFT
 (18)

	)

478 
	#USB0_USBSTS_H_UAI
 (1 << 
USB0_USBSTS_H_UAI_SHIFT
)

	)

481 
	#USB0_USBSTS_H_UPI_SHIFT
 (19)

	)

482 
	#USB0_USBSTS_H_UPI
 (1 << 
USB0_USBSTS_H_UPI_SHIFT
)

	)

487 
	#USB0_USBINTR_D_UE_SHIFT
 (0)

	)

488 
	#USB0_USBINTR_D_UE
 (1 << 
USB0_USBINTR_D_UE_SHIFT
)

	)

491 
	#USB0_USBINTR_D_UEE_SHIFT
 (1)

	)

492 
	#USB0_USBINTR_D_UEE
 (1 << 
USB0_USBINTR_D_UEE_SHIFT
)

	)

495 
	#USB0_USBINTR_D_PCE_SHIFT
 (2)

	)

496 
	#USB0_USBINTR_D_PCE
 (1 << 
USB0_USBINTR_D_PCE_SHIFT
)

	)

499 
	#USB0_USBINTR_D_URE_SHIFT
 (6)

	)

500 
	#USB0_USBINTR_D_URE
 (1 << 
USB0_USBINTR_D_URE_SHIFT
)

	)

503 
	#USB0_USBINTR_D_SRE_SHIFT
 (7)

	)

504 
	#USB0_USBINTR_D_SRE
 (1 << 
USB0_USBINTR_D_SRE_SHIFT
)

	)

507 
	#USB0_USBINTR_D_SLE_SHIFT
 (8)

	)

508 
	#USB0_USBINTR_D_SLE
 (1 << 
USB0_USBINTR_D_SLE_SHIFT
)

	)

511 
	#USB0_USBINTR_D_NAKE_SHIFT
 (16)

	)

512 
	#USB0_USBINTR_D_NAKE
 (1 << 
USB0_USBINTR_D_NAKE_SHIFT
)

	)

517 
	#USB0_USBINTR_H_UE_SHIFT
 (0)

	)

518 
	#USB0_USBINTR_H_UE
 (1 << 
USB0_USBINTR_H_UE_SHIFT
)

	)

521 
	#USB0_USBINTR_H_UEE_SHIFT
 (1)

	)

522 
	#USB0_USBINTR_H_UEE
 (1 << 
USB0_USBINTR_H_UEE_SHIFT
)

	)

525 
	#USB0_USBINTR_H_PCE_SHIFT
 (2)

	)

526 
	#USB0_USBINTR_H_PCE
 (1 << 
USB0_USBINTR_H_PCE_SHIFT
)

	)

529 
	#USB0_USBINTR_H_FRE_SHIFT
 (3)

	)

530 
	#USB0_USBINTR_H_FRE
 (1 << 
USB0_USBINTR_H_FRE_SHIFT
)

	)

533 
	#USB0_USBINTR_H_AAE_SHIFT
 (5)

	)

534 
	#USB0_USBINTR_H_AAE
 (1 << 
USB0_USBINTR_H_AAE_SHIFT
)

	)

537 
	#USB0_USBINTR_H_SRE_SHIFT
 (7)

	)

538 
	#USB0_USBINTR_H_SRE
 (1 << 
USB0_USBINTR_H_SRE_SHIFT
)

	)

541 
	#USB0_USBINTR_H_UAIE_SHIFT
 (18)

	)

542 
	#USB0_USBINTR_H_UAIE
 (1 << 
USB0_USBINTR_H_UAIE_SHIFT
)

	)

545 
	#USB0_USBINTR_H_UPIA_SHIFT
 (19)

	)

546 
	#USB0_USBINTR_H_UPIA
 (1 << 
USB0_USBINTR_H_UPIA_SHIFT
)

	)

551 
	#USB0_FRINDEX_D_FRINDEX2_0_SHIFT
 (0)

	)

552 
	#USB0_FRINDEX_D_FRINDEX2_0_MASK
 (0x7 << 
USB0_FRINDEX_D_FRINDEX2_0_SHIFT
)

	)

553 
	#USB0_FRINDEX_D_FRINDEX2_0
(
x
Ë((xË<< 
USB0_FRINDEX_D_FRINDEX2_0_SHIFT
)

	)

556 
	#USB0_FRINDEX_D_FRINDEX13_3_SHIFT
 (3)

	)

557 
	#USB0_FRINDEX_D_FRINDEX13_3_MASK
 \

558 (0x7f‡<< 
USB0_FRINDEX_D_FRINDEX13_3_SHIFT
)

	)

559 
	#USB0_FRINDEX_D_FRINDEX13_3
(
x
Ë((xË<< 
USB0_FRINDEX_D_FRINDEX13_3_SHIFT
)

	)

564 
	#USB0_FRINDEX_H_FRINDEX2_0_SHIFT
 (0)

	)

565 
	#USB0_FRINDEX_H_FRINDEX2_0_MASK
 (0x7 << 
USB0_FRINDEX_H_FRINDEX2_0_SHIFT
)

	)

566 
	#USB0_FRINDEX_H_FRINDEX2_0
(
x
Ë((xË<< 
USB0_FRINDEX_H_FRINDEX2_0_SHIFT
)

	)

569 
	#USB0_FRINDEX_H_FRINDEX12_3_SHIFT
 (3)

	)

570 
	#USB0_FRINDEX_H_FRINDEX12_3_MASK
 \

571 (0x3f‡<< 
USB0_FRINDEX_H_FRINDEX12_3_SHIFT
)

	)

572 
	#USB0_FRINDEX_H_FRINDEX12_3
(
x
Ë((xË<< 
USB0_FRINDEX_H_FRINDEX12_3_SHIFT
)

	)

577 
	#USB0_DEVICEADDR_USBADRA_SHIFT
 (24)

	)

578 
	#USB0_DEVICEADDR_USBADRA
 (1 << 
USB0_DEVICEADDR_USBADRA_SHIFT
)

	)

581 
	#USB0_DEVICEADDR_USBADR_SHIFT
 (25)

	)

582 
	#USB0_DEVICEADDR_USBADR_MASK
 (0x7‡<< 
USB0_DEVICEADDR_USBADR_SHIFT
)

	)

583 
	#USB0_DEVICEADDR_USBADR
(
x
Ë((xË<< 
USB0_DEVICEADDR_USBADR_SHIFT
)

	)

588 
	#USB0_PERIODICLISTBASE_PERBASE31_12_SHIFT
 (12)

	)

589 
	#USB0_PERIODICLISTBASE_PERBASE31_12_MASK
 \

590 (0xffff‡<< 
USB0_PERIODICLISTBASE_PERBASE31_12_SHIFT
)

	)

591 
	#USB0_PERIODICLISTBASE_PERBASE31_12
(
x
) \

592 ((
x
Ë<< 
USB0_PERIODICLISTBASE_PERBASE31_12_SHIFT
)

	)

597 
	#USB0_ENDPOINTLISTADDR_EPBASE31_11_SHIFT
 (11)

	)

598 
	#USB0_ENDPOINTLISTADDR_EPBASE31_11_MASK
 \

599 (0x1ffff‡<< 
USB0_ENDPOINTLISTADDR_EPBASE31_11_SHIFT
)

	)

600 
	#USB0_ENDPOINTLISTADDR_EPBASE31_11
(
x
) \

601 ((
x
Ë<< 
USB0_ENDPOINTLISTADDR_EPBASE31_11_SHIFT
)

	)

606 
	#USB0_ASYNCLISTADDR_ASYBASE31_5_SHIFT
 (5)

	)

607 
	#USB0_ASYNCLISTADDR_ASYBASE31_5_MASK
 \

608 (0x7fffff‡<< 
USB0_ASYNCLISTADDR_ASYBASE31_5_SHIFT
)

	)

609 
	#USB0_ASYNCLISTADDR_ASYBASE31_5
(
x
) \

610 ((
x
Ë<< 
USB0_ASYNCLISTADDR_ASYBASE31_5_SHIFT
)

	)

615 
	#USB0_TTCTRL_TTHA_SHIFT
 (24)

	)

616 
	#USB0_TTCTRL_TTHA_MASK
 (0x7‡<< 
USB0_TTCTRL_TTHA_SHIFT
)

	)

617 
	#USB0_TTCTRL_TTHA
(
x
Ë((xË<< 
USB0_TTCTRL_TTHA_SHIFT
)

	)

622 
	#USB0_BURSTSIZE_RXPBURST_SHIFT
 (0)

	)

623 
	#USB0_BURSTSIZE_RXPBURST_MASK
 (0xf‡<< 
USB0_BURSTSIZE_RXPBURST_SHIFT
)

	)

624 
	#USB0_BURSTSIZE_RXPBURST
(
x
Ë((xË<< 
USB0_BURSTSIZE_RXPBURST_SHIFT
)

	)

627 
	#USB0_BURSTSIZE_TXPBURST_SHIFT
 (8)

	)

628 
	#USB0_BURSTSIZE_TXPBURST_MASK
 (0xf‡<< 
USB0_BURSTSIZE_TXPBURST_SHIFT
)

	)

629 
	#USB0_BURSTSIZE_TXPBURST
(
x
Ë((xË<< 
USB0_BURSTSIZE_TXPBURST_SHIFT
)

	)

634 
	#USB0_TXFILLTUNING_TXSCHOH_SHIFT
 (0)

	)

635 
	#USB0_TXFILLTUNING_TXSCHOH_MASK
 (0xf‡<< 
USB0_TXFILLTUNING_TXSCHOH_SHIFT
)

	)

636 
	#USB0_TXFILLTUNING_TXSCHOH
(
x
Ë((xË<< 
USB0_TXFILLTUNING_TXSCHOH_SHIFT
)

	)

639 
	#USB0_TXFILLTUNING_TXSCHEATLTH_SHIFT
 (8)

	)

640 
	#USB0_TXFILLTUNING_TXSCHEATLTH_MASK
 \

641 (0x1‡<< 
USB0_TXFILLTUNING_TXSCHEATLTH_SHIFT
)

	)

642 
	#USB0_TXFILLTUNING_TXSCHEATLTH
(
x
) \

643 ((
x
Ë<< 
USB0_TXFILLTUNING_TXSCHEATLTH_SHIFT
)

	)

646 
	#USB0_TXFILLTUNING_TXFIFOTHRES_SHIFT
 (16)

	)

647 
	#USB0_TXFILLTUNING_TXFIFOTHRES_MASK
 \

648 (0x3‡<< 
USB0_TXFILLTUNING_TXFIFOTHRES_SHIFT
)

	)

649 
	#USB0_TXFILLTUNING_TXFIFOTHRES
(
x
) \

650 ((
x
Ë<< 
USB0_TXFILLTUNING_TXFIFOTHRES_SHIFT
)

	)

655 
	#USB0_BINTERVAL_BINT_SHIFT
 (0)

	)

656 
	#USB0_BINTERVAL_BINT_MASK
 (0x‡<< 
USB0_BINTERVAL_BINT_SHIFT
)

	)

657 
	#USB0_BINTERVAL_BINT
(
x
Ë((xË<< 
USB0_BINTERVAL_BINT_SHIFT
)

	)

662 
	#USB0_ENDPTNAK_EPRN_SHIFT
 (0)

	)

663 
	#USB0_ENDPTNAK_EPRN_MASK
 (0x3‡<< 
USB0_ENDPTNAK_EPRN_SHIFT
)

	)

664 
	#USB0_ENDPTNAK_EPRN
(
x
Ë((xË<< 
USB0_ENDPTNAK_EPRN_SHIFT
)

	)

667 
	#USB0_ENDPTNAK_EPTN_SHIFT
 (16)

	)

668 
	#USB0_ENDPTNAK_EPTN_MASK
 (0x3‡<< 
USB0_ENDPTNAK_EPTN_SHIFT
)

	)

669 
	#USB0_ENDPTNAK_EPTN
(
x
Ë((xË<< 
USB0_ENDPTNAK_EPTN_SHIFT
)

	)

674 
	#USB0_ENDPTNAKEN_EPRNE_SHIFT
 (0)

	)

675 
	#USB0_ENDPTNAKEN_EPRNE_MASK
 (0x3‡<< 
USB0_ENDPTNAKEN_EPRNE_SHIFT
)

	)

676 
	#USB0_ENDPTNAKEN_EPRNE
(
x
Ë((xË<< 
USB0_ENDPTNAKEN_EPRNE_SHIFT
)

	)

679 
	#USB0_ENDPTNAKEN_EPTNE_SHIFT
 (16)

	)

680 
	#USB0_ENDPTNAKEN_EPTNE_MASK
 (0x3‡<< 
USB0_ENDPTNAKEN_EPTNE_SHIFT
)

	)

681 
	#USB0_ENDPTNAKEN_EPTNE
(
x
Ë((xË<< 
USB0_ENDPTNAKEN_EPTNE_SHIFT
)

	)

686 
	#USB0_PORTSC1_D_CCS_SHIFT
 (0)

	)

687 
	#USB0_PORTSC1_D_CCS
 (1 << 
USB0_PORTSC1_D_CCS_SHIFT
)

	)

690 
	#USB0_PORTSC1_D_PE_SHIFT
 (2)

	)

691 
	#USB0_PORTSC1_D_PE
 (1 << 
USB0_PORTSC1_D_PE_SHIFT
)

	)

694 
	#USB0_PORTSC1_D_PEC_SHIFT
 (3)

	)

695 
	#USB0_PORTSC1_D_PEC
 (1 << 
USB0_PORTSC1_D_PEC_SHIFT
)

	)

698 
	#USB0_PORTSC1_D_FPR_SHIFT
 (6)

	)

699 
	#USB0_PORTSC1_D_FPR
 (1 << 
USB0_PORTSC1_D_FPR_SHIFT
)

	)

702 
	#USB0_PORTSC1_D_SUSP_SHIFT
 (7)

	)

703 
	#USB0_PORTSC1_D_SUSP
 (1 << 
USB0_PORTSC1_D_SUSP_SHIFT
)

	)

706 
	#USB0_PORTSC1_D_PR_SHIFT
 (8)

	)

707 
	#USB0_PORTSC1_D_PR
 (1 << 
USB0_PORTSC1_D_PR_SHIFT
)

	)

710 
	#USB0_PORTSC1_D_HSP_SHIFT
 (9)

	)

711 
	#USB0_PORTSC1_D_HSP
 (1 << 
USB0_PORTSC1_D_HSP_SHIFT
)

	)

714 
	#USB0_PORTSC1_D_PIC1_0_SHIFT
 (14)

	)

715 
	#USB0_PORTSC1_D_PIC1_0_MASK
 (0x3 << 
USB0_PORTSC1_D_PIC1_0_SHIFT
)

	)

716 
	#USB0_PORTSC1_D_PIC1_0
(
x
Ë((xË<< 
USB0_PORTSC1_D_PIC1_0_SHIFT
)

	)

719 
	#USB0_PORTSC1_D_PTC3_0_SHIFT
 (16)

	)

720 
	#USB0_PORTSC1_D_PTC3_0_MASK
 (0x‡<< 
USB0_PORTSC1_D_PTC3_0_SHIFT
)

	)

721 
	#USB0_PORTSC1_D_PTC3_0
(
x
Ë((xË<< 
USB0_PORTSC1_D_PTC3_0_SHIFT
)

	)

724 
	#USB0_PORTSC1_D_PHCD_SHIFT
 (23)

	)

725 
	#USB0_PORTSC1_D_PHCD
 (1 << 
USB0_PORTSC1_D_PHCD_SHIFT
)

	)

728 
	#USB0_PORTSC1_D_PFSC_SHIFT
 (24)

	)

729 
	#USB0_PORTSC1_D_PFSC
 (1 << 
USB0_PORTSC1_D_PFSC_SHIFT
)

	)

732 
	#USB0_PORTSC1_D_PSPD_SHIFT
 (26)

	)

733 
	#USB0_PORTSC1_D_PSPD_MASK
 (0x3 << 
USB0_PORTSC1_D_PSPD_SHIFT
)

	)

734 
	#USB0_PORTSC1_D_PSPD
(
x
Ë((xË<< 
USB0_PORTSC1_D_PSPD_SHIFT
)

	)

739 
	#USB0_PORTSC1_H_CCS_SHIFT
 (0)

	)

740 
	#USB0_PORTSC1_H_CCS
 (1 << 
USB0_PORTSC1_H_CCS_SHIFT
)

	)

743 
	#USB0_PORTSC1_H_CSC_SHIFT
 (1)

	)

744 
	#USB0_PORTSC1_H_CSC
 (1 << 
USB0_PORTSC1_H_CSC_SHIFT
)

	)

747 
	#USB0_PORTSC1_H_PE_SHIFT
 (2)

	)

748 
	#USB0_PORTSC1_H_PE
 (1 << 
USB0_PORTSC1_H_PE_SHIFT
)

	)

751 
	#USB0_PORTSC1_H_PEC_SHIFT
 (3)

	)

752 
	#USB0_PORTSC1_H_PEC
 (1 << 
USB0_PORTSC1_H_PEC_SHIFT
)

	)

755 
	#USB0_PORTSC1_H_OCA_SHIFT
 (4)

	)

756 
	#USB0_PORTSC1_H_OCA
 (1 << 
USB0_PORTSC1_H_OCA_SHIFT
)

	)

759 
	#USB0_PORTSC1_H_OCC_SHIFT
 (5)

	)

760 
	#USB0_PORTSC1_H_OCC
 (1 << 
USB0_PORTSC1_H_OCC_SHIFT
)

	)

763 
	#USB0_PORTSC1_H_FPR_SHIFT
 (6)

	)

764 
	#USB0_PORTSC1_H_FPR
 (1 << 
USB0_PORTSC1_H_FPR_SHIFT
)

	)

767 
	#USB0_PORTSC1_H_SUSP_SHIFT
 (7)

	)

768 
	#USB0_PORTSC1_H_SUSP
 (1 << 
USB0_PORTSC1_H_SUSP_SHIFT
)

	)

771 
	#USB0_PORTSC1_H_PR_SHIFT
 (8)

	)

772 
	#USB0_PORTSC1_H_PR
 (1 << 
USB0_PORTSC1_H_PR_SHIFT
)

	)

775 
	#USB0_PORTSC1_H_HSP_SHIFT
 (9)

	)

776 
	#USB0_PORTSC1_H_HSP
 (1 << 
USB0_PORTSC1_H_HSP_SHIFT
)

	)

779 
	#USB0_PORTSC1_H_LS_SHIFT
 (10)

	)

780 
	#USB0_PORTSC1_H_LS_MASK
 (0x3 << 
USB0_PORTSC1_H_LS_SHIFT
)

	)

781 
	#USB0_PORTSC1_H_LS
(
x
Ë((xË<< 
USB0_PORTSC1_H_LS_SHIFT
)

	)

784 
	#USB0_PORTSC1_H_PP_SHIFT
 (12)

	)

785 
	#USB0_PORTSC1_H_PP
 (1 << 
USB0_PORTSC1_H_PP_SHIFT
)

	)

788 
	#USB0_PORTSC1_H_PIC1_0_SHIFT
 (14)

	)

789 
	#USB0_PORTSC1_H_PIC1_0_MASK
 (0x3 << 
USB0_PORTSC1_H_PIC1_0_SHIFT
)

	)

790 
	#USB0_PORTSC1_H_PIC1_0
(
x
Ë((xË<< 
USB0_PORTSC1_H_PIC1_0_SHIFT
)

	)

793 
	#USB0_PORTSC1_H_PTC3_0_SHIFT
 (16)

	)

794 
	#USB0_PORTSC1_H_PTC3_0_MASK
 (0x‡<< 
USB0_PORTSC1_H_PTC3_0_SHIFT
)

	)

795 
	#USB0_PORTSC1_H_PTC3_0
(
x
Ë((xË<< 
USB0_PORTSC1_H_PTC3_0_SHIFT
)

	)

798 
	#USB0_PORTSC1_H_WKCN_SHIFT
 (20)

	)

799 
	#USB0_PORTSC1_H_WKCN
 (1 << 
USB0_PORTSC1_H_WKCN_SHIFT
)

	)

802 
	#USB0_PORTSC1_H_WKDC_SHIFT
 (21)

	)

803 
	#USB0_PORTSC1_H_WKDC
 (1 << 
USB0_PORTSC1_H_WKDC_SHIFT
)

	)

806 
	#USB0_PORTSC1_H_WKOC_SHIFT
 (22)

	)

807 
	#USB0_PORTSC1_H_WKOC
 (1 << 
USB0_PORTSC1_H_WKOC_SHIFT
)

	)

810 
	#USB0_PORTSC1_H_PHCD_SHIFT
 (23)

	)

811 
	#USB0_PORTSC1_H_PHCD
 (1 << 
USB0_PORTSC1_H_PHCD_SHIFT
)

	)

814 
	#USB0_PORTSC1_H_PFSC_SHIFT
 (24)

	)

815 
	#USB0_PORTSC1_H_PFSC
 (1 << 
USB0_PORTSC1_H_PFSC_SHIFT
)

	)

818 
	#USB0_PORTSC1_H_PSPD_SHIFT
 (26)

	)

819 
	#USB0_PORTSC1_H_PSPD_MASK
 (0x3 << 
USB0_PORTSC1_H_PSPD_SHIFT
)

	)

820 
	#USB0_PORTSC1_H_PSPD
(
x
Ë((xË<< 
USB0_PORTSC1_H_PSPD_SHIFT
)

	)

825 
	#USB0_OTGSC_VD_SHIFT
 (0)

	)

826 
	#USB0_OTGSC_VD
 (1 << 
USB0_OTGSC_VD_SHIFT
)

	)

829 
	#USB0_OTGSC_VC_SHIFT
 (1)

	)

830 
	#USB0_OTGSC_VC
 (1 << 
USB0_OTGSC_VC_SHIFT
)

	)

833 
	#USB0_OTGSC_HAAR_SHIFT
 (2)

	)

834 
	#USB0_OTGSC_HAAR
 (1 << 
USB0_OTGSC_HAAR_SHIFT
)

	)

837 
	#USB0_OTGSC_OT_SHIFT
 (3)

	)

838 
	#USB0_OTGSC_OT
 (1 << 
USB0_OTGSC_OT_SHIFT
)

	)

841 
	#USB0_OTGSC_DP_SHIFT
 (4)

	)

842 
	#USB0_OTGSC_DP
 (1 << 
USB0_OTGSC_DP_SHIFT
)

	)

845 
	#USB0_OTGSC_IDPU_SHIFT
 (5)

	)

846 
	#USB0_OTGSC_IDPU
 (1 << 
USB0_OTGSC_IDPU_SHIFT
)

	)

849 
	#USB0_OTGSC_HADP_SHIFT
 (6)

	)

850 
	#USB0_OTGSC_HADP
 (1 << 
USB0_OTGSC_HADP_SHIFT
)

	)

853 
	#USB0_OTGSC_HABA_SHIFT
 (7)

	)

854 
	#USB0_OTGSC_HABA
 (1 << 
USB0_OTGSC_HABA_SHIFT
)

	)

857 
	#USB0_OTGSC_ID_SHIFT
 (8)

	)

858 
	#USB0_OTGSC_ID
 (1 << 
USB0_OTGSC_ID_SHIFT
)

	)

861 
	#USB0_OTGSC_AVV_SHIFT
 (9)

	)

862 
	#USB0_OTGSC_AVV
 (1 << 
USB0_OTGSC_AVV_SHIFT
)

	)

865 
	#USB0_OTGSC_ASV_SHIFT
 (10)

	)

866 
	#USB0_OTGSC_ASV
 (1 << 
USB0_OTGSC_ASV_SHIFT
)

	)

869 
	#USB0_OTGSC_BSV_SHIFT
 (11)

	)

870 
	#USB0_OTGSC_BSV
 (1 << 
USB0_OTGSC_BSV_SHIFT
)

	)

873 
	#USB0_OTGSC_BSE_SHIFT
 (12)

	)

874 
	#USB0_OTGSC_BSE
 (1 << 
USB0_OTGSC_BSE_SHIFT
)

	)

877 
	#USB0_OTGSC_MS1T_SHIFT
 (13)

	)

878 
	#USB0_OTGSC_MS1T
 (1 << 
USB0_OTGSC_MS1T_SHIFT
)

	)

881 
	#USB0_OTGSC_DPS_SHIFT
 (14)

	)

882 
	#USB0_OTGSC_DPS
 (1 << 
USB0_OTGSC_DPS_SHIFT
)

	)

885 
	#USB0_OTGSC_IDIS_SHIFT
 (16)

	)

886 
	#USB0_OTGSC_IDIS
 (1 << 
USB0_OTGSC_IDIS_SHIFT
)

	)

889 
	#USB0_OTGSC_AVVIS_SHIFT
 (17)

	)

890 
	#USB0_OTGSC_AVVIS
 (1 << 
USB0_OTGSC_AVVIS_SHIFT
)

	)

893 
	#USB0_OTGSC_ASVIS_SHIFT
 (18)

	)

894 
	#USB0_OTGSC_ASVIS
 (1 << 
USB0_OTGSC_ASVIS_SHIFT
)

	)

897 
	#USB0_OTGSC_BSVIS_SHIFT
 (19)

	)

898 
	#USB0_OTGSC_BSVIS
 (1 << 
USB0_OTGSC_BSVIS_SHIFT
)

	)

901 
	#USB0_OTGSC_BSEIS_SHIFT
 (20)

	)

902 
	#USB0_OTGSC_BSEIS
 (1 << 
USB0_OTGSC_BSEIS_SHIFT
)

	)

905 
	#USB0_OTGSC_MS1S_SHIFT
 (21)

	)

906 
	#USB0_OTGSC_MS1S
 (1 << 
USB0_OTGSC_MS1S_SHIFT
)

	)

909 
	#USB0_OTGSC_DPIS_SHIFT
 (22)

	)

910 
	#USB0_OTGSC_DPIS
 (1 << 
USB0_OTGSC_DPIS_SHIFT
)

	)

913 
	#USB0_OTGSC_IDIE_SHIFT
 (24)

	)

914 
	#USB0_OTGSC_IDIE
 (1 << 
USB0_OTGSC_IDIE_SHIFT
)

	)

917 
	#USB0_OTGSC_AVVIE_SHIFT
 (25)

	)

918 
	#USB0_OTGSC_AVVIE
 (1 << 
USB0_OTGSC_AVVIE_SHIFT
)

	)

921 
	#USB0_OTGSC_ASVIE_SHIFT
 (26)

	)

922 
	#USB0_OTGSC_ASVIE
 (1 << 
USB0_OTGSC_ASVIE_SHIFT
)

	)

925 
	#USB0_OTGSC_BSVIE_SHIFT
 (27)

	)

926 
	#USB0_OTGSC_BSVIE
 (1 << 
USB0_OTGSC_BSVIE_SHIFT
)

	)

929 
	#USB0_OTGSC_BSEIE_SHIFT
 (28)

	)

930 
	#USB0_OTGSC_BSEIE
 (1 << 
USB0_OTGSC_BSEIE_SHIFT
)

	)

933 
	#USB0_OTGSC_MS1E_SHIFT
 (29)

	)

934 
	#USB0_OTGSC_MS1E
 (1 << 
USB0_OTGSC_MS1E_SHIFT
)

	)

937 
	#USB0_OTGSC_DPIE_SHIFT
 (30)

	)

938 
	#USB0_OTGSC_DPIE
 (1 << 
USB0_OTGSC_DPIE_SHIFT
)

	)

943 
	#USB0_USBMODE_D_CM1_0_SHIFT
 (0)

	)

944 
	#USB0_USBMODE_D_CM1_0_MASK
 (0x3 << 
USB0_USBMODE_D_CM1_0_SHIFT
)

	)

945 
	#USB0_USBMODE_D_CM1_0
(
x
Ë((xË<< 
USB0_USBMODE_D_CM1_0_SHIFT
)

	)

948 
	#USB0_USBMODE_D_ES_SHIFT
 (2)

	)

949 
	#USB0_USBMODE_D_ES
 (1 << 
USB0_USBMODE_D_ES_SHIFT
)

	)

952 
	#USB0_USBMODE_D_SLOM_SHIFT
 (3)

	)

953 
	#USB0_USBMODE_D_SLOM
 (1 << 
USB0_USBMODE_D_SLOM_SHIFT
)

	)

956 
	#USB0_USBMODE_D_SDIS_SHIFT
 (4)

	)

957 
	#USB0_USBMODE_D_SDIS
 (1 << 
USB0_USBMODE_D_SDIS_SHIFT
)

	)

962 
	#USB0_USBMODE_H_CM_SHIFT
 (0)

	)

963 
	#USB0_USBMODE_H_CM_MASK
 (0x3 << 
USB0_USBMODE_H_CM_SHIFT
)

	)

964 
	#USB0_USBMODE_H_CM
(
x
Ë((xË<< 
USB0_USBMODE_H_CM_SHIFT
)

	)

967 
	#USB0_USBMODE_H_ES_SHIFT
 (2)

	)

968 
	#USB0_USBMODE_H_ES
 (1 << 
USB0_USBMODE_H_ES_SHIFT
)

	)

971 
	#USB0_USBMODE_H_SDIS_SHIFT
 (4)

	)

972 
	#USB0_USBMODE_H_SDIS
 (1 << 
USB0_USBMODE_H_SDIS_SHIFT
)

	)

975 
	#USB0_USBMODE_H_VBPS_SHIFT
 (5)

	)

976 
	#USB0_USBMODE_H_VBPS
 (1 << 
USB0_USBMODE_H_VBPS_SHIFT
)

	)

981 
	#USB0_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT
 (0)

	)

982 
	#USB0_ENDPTSETUPSTAT_ENDPTSETUPSTAT_MASK
 \

983 (0x3‡<< 
USB0_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT
)

	)

984 
	#USB0_ENDPTSETUPSTAT_ENDPTSETUPSTAT
(
x
) \

985 ((
x
Ë<< 
USB0_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT
)

	)

990 
	#USB0_ENDPTPRIME_PERB_SHIFT
 (0)

	)

991 
	#USB0_ENDPTPRIME_PERB_MASK
 (0x3‡<< 
USB0_ENDPTPRIME_PERB_SHIFT
)

	)

992 
	#USB0_ENDPTPRIME_PERB
(
x
Ë((xË<< 
USB0_ENDPTPRIME_PERB_SHIFT
)

	)

995 
	#USB0_ENDPTPRIME_PETB_SHIFT
 (16)

	)

996 
	#USB0_ENDPTPRIME_PETB_MASK
 (0x3‡<< 
USB0_ENDPTPRIME_PETB_SHIFT
)

	)

997 
	#USB0_ENDPTPRIME_PETB
(
x
Ë((xË<< 
USB0_ENDPTPRIME_PETB_SHIFT
)

	)

1002 
	#USB0_ENDPTFLUSH_FERB_SHIFT
 (0)

	)

1003 
	#USB0_ENDPTFLUSH_FERB_MASK
 (0x3‡<< 
USB0_ENDPTFLUSH_FERB_SHIFT
)

	)

1004 
	#USB0_ENDPTFLUSH_FERB
(
x
Ë((xË<< 
USB0_ENDPTFLUSH_FERB_SHIFT
)

	)

1007 
	#USB0_ENDPTFLUSH_FETB_SHIFT
 (16)

	)

1008 
	#USB0_ENDPTFLUSH_FETB_MASK
 (0x3‡<< 
USB0_ENDPTFLUSH_FETB_SHIFT
)

	)

1009 
	#USB0_ENDPTFLUSH_FETB
(
x
Ë((xË<< 
USB0_ENDPTFLUSH_FETB_SHIFT
)

	)

1014 
	#USB0_ENDPTSTAT_ERBR_SHIFT
 (0)

	)

1015 
	#USB0_ENDPTSTAT_ERBR_MASK
 (0x3‡<< 
USB0_ENDPTSTAT_ERBR_SHIFT
)

	)

1016 
	#USB0_ENDPTSTAT_ERBR
(
x
Ë((xË<< 
USB0_ENDPTSTAT_ERBR_SHIFT
)

	)

1019 
	#USB0_ENDPTSTAT_ETBR_SHIFT
 (16)

	)

1020 
	#USB0_ENDPTSTAT_ETBR_MASK
 (0x3‡<< 
USB0_ENDPTSTAT_ETBR_SHIFT
)

	)

1021 
	#USB0_ENDPTSTAT_ETBR
(
x
Ë((xË<< 
USB0_ENDPTSTAT_ETBR_SHIFT
)

	)

1026 
	#USB0_ENDPTCOMPLETE_ERCE_SHIFT
 (0)

	)

1027 
	#USB0_ENDPTCOMPLETE_ERCE_MASK
 (0x3‡<< 
USB0_ENDPTCOMPLETE_ERCE_SHIFT
)

	)

1028 
	#USB0_ENDPTCOMPLETE_ERCE
(
x
Ë((xË<< 
USB0_ENDPTCOMPLETE_ERCE_SHIFT
)

	)

1031 
	#USB0_ENDPTCOMPLETE_ETCE_SHIFT
 (16)

	)

1032 
	#USB0_ENDPTCOMPLETE_ETCE_MASK
 (0x3‡<< 
USB0_ENDPTCOMPLETE_ETCE_SHIFT
)

	)

1033 
	#USB0_ENDPTCOMPLETE_ETCE
(
x
Ë((xË<< 
USB0_ENDPTCOMPLETE_ETCE_SHIFT
)

	)

1038 
	#USB0_ENDPTCTRL0_RXS_SHIFT
 (0)

	)

1039 
	#USB0_ENDPTCTRL0_RXS
 (1 << 
USB0_ENDPTCTRL0_RXS_SHIFT
)

	)

1042 
	#USB0_ENDPTCTRL0_RXT1_0_SHIFT
 (2)

	)

1043 
	#USB0_ENDPTCTRL0_RXT1_0_MASK
 (0x3 << 
USB0_ENDPTCTRL0_RXT1_0_SHIFT
)

	)

1044 
	#USB0_ENDPTCTRL0_RXT1_0
(
x
Ë((xË<< 
USB0_ENDPTCTRL0_RXT1_0_SHIFT
)

	)

1047 
	#USB0_ENDPTCTRL0_RXE_SHIFT
 (7)

	)

1048 
	#USB0_ENDPTCTRL0_RXE
 (1 << 
USB0_ENDPTCTRL0_RXE_SHIFT
)

	)

1051 
	#USB0_ENDPTCTRL0_TXS_SHIFT
 (16)

	)

1052 
	#USB0_ENDPTCTRL0_TXS
 (1 << 
USB0_ENDPTCTRL0_TXS_SHIFT
)

	)

1055 
	#USB0_ENDPTCTRL0_TXT1_0_SHIFT
 (18)

	)

1056 
	#USB0_ENDPTCTRL0_TXT1_0_MASK
 (0x3 << 
USB0_ENDPTCTRL0_TXT1_0_SHIFT
)

	)

1057 
	#USB0_ENDPTCTRL0_TXT1_0
(
x
Ë((xË<< 
USB0_ENDPTCTRL0_TXT1_0_SHIFT
)

	)

1060 
	#USB0_ENDPTCTRL0_TXE_SHIFT
 (23)

	)

1061 
	#USB0_ENDPTCTRL0_TXE
 (1 << 
USB0_ENDPTCTRL0_TXE_SHIFT
)

	)

1066 
	#USB0_ENDPTCTRL1_RXS_SHIFT
 (0)

	)

1067 
	#USB0_ENDPTCTRL1_RXS
 (1 << 
USB0_ENDPTCTRL1_RXS_SHIFT
)

	)

1070 
	#USB0_ENDPTCTRL1_RXT_SHIFT
 (2)

	)

1071 
	#USB0_ENDPTCTRL1_RXT_MASK
 (0x3 << 
USB0_ENDPTCTRL1_RXT_SHIFT
)

	)

1072 
	#USB0_ENDPTCTRL1_RXT
(
x
Ë((xË<< 
USB0_ENDPTCTRL1_RXT_SHIFT
)

	)

1075 
	#USB0_ENDPTCTRL1_RXI_SHIFT
 (5)

	)

1076 
	#USB0_ENDPTCTRL1_RXI
 (1 << 
USB0_ENDPTCTRL1_RXI_SHIFT
)

	)

1079 
	#USB0_ENDPTCTRL1_RXR_SHIFT
 (6)

	)

1080 
	#USB0_ENDPTCTRL1_RXR
 (1 << 
USB0_ENDPTCTRL1_RXR_SHIFT
)

	)

1083 
	#USB0_ENDPTCTRL1_RXE_SHIFT
 (7)

	)

1084 
	#USB0_ENDPTCTRL1_RXE
 (1 << 
USB0_ENDPTCTRL1_RXE_SHIFT
)

	)

1087 
	#USB0_ENDPTCTRL1_TXS_SHIFT
 (16)

	)

1088 
	#USB0_ENDPTCTRL1_TXS
 (1 << 
USB0_ENDPTCTRL1_TXS_SHIFT
)

	)

1091 
	#USB0_ENDPTCTRL1_TXT1_0_SHIFT
 (18)

	)

1092 
	#USB0_ENDPTCTRL1_TXT1_0_MASK
 (0x3 << 
USB0_ENDPTCTRL1_TXT1_0_SHIFT
)

	)

1093 
	#USB0_ENDPTCTRL1_TXT1_0
(
x
Ë((xË<< 
USB0_ENDPTCTRL1_TXT1_0_SHIFT
)

	)

1096 
	#USB0_ENDPTCTRL1_TXI_SHIFT
 (21)

	)

1097 
	#USB0_ENDPTCTRL1_TXI
 (1 << 
USB0_ENDPTCTRL1_TXI_SHIFT
)

	)

1100 
	#USB0_ENDPTCTRL1_TXR_SHIFT
 (22)

	)

1101 
	#USB0_ENDPTCTRL1_TXR
 (1 << 
USB0_ENDPTCTRL1_TXR_SHIFT
)

	)

1104 
	#USB0_ENDPTCTRL1_TXE_SHIFT
 (23)

	)

1105 
	#USB0_ENDPTCTRL1_TXE
 (1 << 
USB0_ENDPTCTRL1_TXE_SHIFT
)

	)

1110 
	#USB0_ENDPTCTRL2_RXS_SHIFT
 (0)

	)

1111 
	#USB0_ENDPTCTRL2_RXS
 (1 << 
USB0_ENDPTCTRL2_RXS_SHIFT
)

	)

1114 
	#USB0_ENDPTCTRL2_RXT_SHIFT
 (2)

	)

1115 
	#USB0_ENDPTCTRL2_RXT_MASK
 (0x3 << 
USB0_ENDPTCTRL2_RXT_SHIFT
)

	)

1116 
	#USB0_ENDPTCTRL2_RXT
(
x
Ë((xË<< 
USB0_ENDPTCTRL2_RXT_SHIFT
)

	)

1119 
	#USB0_ENDPTCTRL2_RXI_SHIFT
 (5)

	)

1120 
	#USB0_ENDPTCTRL2_RXI
 (1 << 
USB0_ENDPTCTRL2_RXI_SHIFT
)

	)

1123 
	#USB0_ENDPTCTRL2_RXR_SHIFT
 (6)

	)

1124 
	#USB0_ENDPTCTRL2_RXR
 (1 << 
USB0_ENDPTCTRL2_RXR_SHIFT
)

	)

1127 
	#USB0_ENDPTCTRL2_RXE_SHIFT
 (7)

	)

1128 
	#USB0_ENDPTCTRL2_RXE
 (1 << 
USB0_ENDPTCTRL2_RXE_SHIFT
)

	)

1131 
	#USB0_ENDPTCTRL2_TXS_SHIFT
 (16)

	)

1132 
	#USB0_ENDPTCTRL2_TXS
 (1 << 
USB0_ENDPTCTRL2_TXS_SHIFT
)

	)

1135 
	#USB0_ENDPTCTRL2_TXT1_0_SHIFT
 (18)

	)

1136 
	#USB0_ENDPTCTRL2_TXT1_0_MASK
 (0x3 << 
USB0_ENDPTCTRL2_TXT1_0_SHIFT
)

	)

1137 
	#USB0_ENDPTCTRL2_TXT1_0
(
x
Ë((xË<< 
USB0_ENDPTCTRL2_TXT1_0_SHIFT
)

	)

1140 
	#USB0_ENDPTCTRL2_TXI_SHIFT
 (21)

	)

1141 
	#USB0_ENDPTCTRL2_TXI
 (1 << 
USB0_ENDPTCTRL2_TXI_SHIFT
)

	)

1144 
	#USB0_ENDPTCTRL2_TXR_SHIFT
 (22)

	)

1145 
	#USB0_ENDPTCTRL2_TXR
 (1 << 
USB0_ENDPTCTRL2_TXR_SHIFT
)

	)

1148 
	#USB0_ENDPTCTRL2_TXE_SHIFT
 (23)

	)

1149 
	#USB0_ENDPTCTRL2_TXE
 (1 << 
USB0_ENDPTCTRL2_TXE_SHIFT
)

	)

1154 
	#USB0_ENDPTCTRL3_RXS_SHIFT
 (0)

	)

1155 
	#USB0_ENDPTCTRL3_RXS
 (1 << 
USB0_ENDPTCTRL3_RXS_SHIFT
)

	)

1158 
	#USB0_ENDPTCTRL3_RXT_SHIFT
 (2)

	)

1159 
	#USB0_ENDPTCTRL3_RXT_MASK
 (0x3 << 
USB0_ENDPTCTRL3_RXT_SHIFT
)

	)

1160 
	#USB0_ENDPTCTRL3_RXT
(
x
Ë((xË<< 
USB0_ENDPTCTRL3_RXT_SHIFT
)

	)

1163 
	#USB0_ENDPTCTRL3_RXI_SHIFT
 (5)

	)

1164 
	#USB0_ENDPTCTRL3_RXI
 (1 << 
USB0_ENDPTCTRL3_RXI_SHIFT
)

	)

1167 
	#USB0_ENDPTCTRL3_RXR_SHIFT
 (6)

	)

1168 
	#USB0_ENDPTCTRL3_RXR
 (1 << 
USB0_ENDPTCTRL3_RXR_SHIFT
)

	)

1171 
	#USB0_ENDPTCTRL3_RXE_SHIFT
 (7)

	)

1172 
	#USB0_ENDPTCTRL3_RXE
 (1 << 
USB0_ENDPTCTRL3_RXE_SHIFT
)

	)

1175 
	#USB0_ENDPTCTRL3_TXS_SHIFT
 (16)

	)

1176 
	#USB0_ENDPTCTRL3_TXS
 (1 << 
USB0_ENDPTCTRL3_TXS_SHIFT
)

	)

1179 
	#USB0_ENDPTCTRL3_TXT1_0_SHIFT
 (18)

	)

1180 
	#USB0_ENDPTCTRL3_TXT1_0_MASK
 (0x3 << 
USB0_ENDPTCTRL3_TXT1_0_SHIFT
)

	)

1181 
	#USB0_ENDPTCTRL3_TXT1_0
(
x
Ë((xË<< 
USB0_ENDPTCTRL3_TXT1_0_SHIFT
)

	)

1184 
	#USB0_ENDPTCTRL3_TXI_SHIFT
 (21)

	)

1185 
	#USB0_ENDPTCTRL3_TXI
 (1 << 
USB0_ENDPTCTRL3_TXI_SHIFT
)

	)

1188 
	#USB0_ENDPTCTRL3_TXR_SHIFT
 (22)

	)

1189 
	#USB0_ENDPTCTRL3_TXR
 (1 << 
USB0_ENDPTCTRL3_TXR_SHIFT
)

	)

1192 
	#USB0_ENDPTCTRL3_TXE_SHIFT
 (23)

	)

1193 
	#USB0_ENDPTCTRL3_TXE
 (1 << 
USB0_ENDPTCTRL3_TXE_SHIFT
)

	)

1198 
	#USB0_ENDPTCTRL4_RXS_SHIFT
 (0)

	)

1199 
	#USB0_ENDPTCTRL4_RXS
 (1 << 
USB0_ENDPTCTRL4_RXS_SHIFT
)

	)

1202 
	#USB0_ENDPTCTRL4_RXT_SHIFT
 (2)

	)

1203 
	#USB0_ENDPTCTRL4_RXT_MASK
 (0x3 << 
USB0_ENDPTCTRL4_RXT_SHIFT
)

	)

1204 
	#USB0_ENDPTCTRL4_RXT
(
x
Ë((xË<< 
USB0_ENDPTCTRL4_RXT_SHIFT
)

	)

1207 
	#USB0_ENDPTCTRL4_RXI_SHIFT
 (5)

	)

1208 
	#USB0_ENDPTCTRL4_RXI
 (1 << 
USB0_ENDPTCTRL4_RXI_SHIFT
)

	)

1211 
	#USB0_ENDPTCTRL4_RXR_SHIFT
 (6)

	)

1212 
	#USB0_ENDPTCTRL4_RXR
 (1 << 
USB0_ENDPTCTRL4_RXR_SHIFT
)

	)

1215 
	#USB0_ENDPTCTRL4_RXE_SHIFT
 (7)

	)

1216 
	#USB0_ENDPTCTRL4_RXE
 (1 << 
USB0_ENDPTCTRL4_RXE_SHIFT
)

	)

1219 
	#USB0_ENDPTCTRL4_TXS_SHIFT
 (16)

	)

1220 
	#USB0_ENDPTCTRL4_TXS
 (1 << 
USB0_ENDPTCTRL4_TXS_SHIFT
)

	)

1223 
	#USB0_ENDPTCTRL4_TXT1_0_SHIFT
 (18)

	)

1224 
	#USB0_ENDPTCTRL4_TXT1_0_MASK
 (0x3 << 
USB0_ENDPTCTRL4_TXT1_0_SHIFT
)

	)

1225 
	#USB0_ENDPTCTRL4_TXT1_0
(
x
Ë((xË<< 
USB0_ENDPTCTRL4_TXT1_0_SHIFT
)

	)

1228 
	#USB0_ENDPTCTRL4_TXI_SHIFT
 (21)

	)

1229 
	#USB0_ENDPTCTRL4_TXI
 (1 << 
USB0_ENDPTCTRL4_TXI_SHIFT
)

	)

1232 
	#USB0_ENDPTCTRL4_TXR_SHIFT
 (22)

	)

1233 
	#USB0_ENDPTCTRL4_TXR
 (1 << 
USB0_ENDPTCTRL4_TXR_SHIFT
)

	)

1236 
	#USB0_ENDPTCTRL4_TXE_SHIFT
 (23)

	)

1237 
	#USB0_ENDPTCTRL4_TXE
 (1 << 
USB0_ENDPTCTRL4_TXE_SHIFT
)

	)

1242 
	#USB0_ENDPTCTRL5_RXS_SHIFT
 (0)

	)

1243 
	#USB0_ENDPTCTRL5_RXS
 (1 << 
USB0_ENDPTCTRL5_RXS_SHIFT
)

	)

1246 
	#USB0_ENDPTCTRL5_RXT_SHIFT
 (2)

	)

1247 
	#USB0_ENDPTCTRL5_RXT_MASK
 (0x3 << 
USB0_ENDPTCTRL5_RXT_SHIFT
)

	)

1248 
	#USB0_ENDPTCTRL5_RXT
(
x
Ë((xË<< 
USB0_ENDPTCTRL5_RXT_SHIFT
)

	)

1251 
	#USB0_ENDPTCTRL5_RXI_SHIFT
 (5)

	)

1252 
	#USB0_ENDPTCTRL5_RXI
 (1 << 
USB0_ENDPTCTRL5_RXI_SHIFT
)

	)

1255 
	#USB0_ENDPTCTRL5_RXR_SHIFT
 (6)

	)

1256 
	#USB0_ENDPTCTRL5_RXR
 (1 << 
USB0_ENDPTCTRL5_RXR_SHIFT
)

	)

1259 
	#USB0_ENDPTCTRL5_RXE_SHIFT
 (7)

	)

1260 
	#USB0_ENDPTCTRL5_RXE
 (1 << 
USB0_ENDPTCTRL5_RXE_SHIFT
)

	)

1263 
	#USB0_ENDPTCTRL5_TXS_SHIFT
 (16)

	)

1264 
	#USB0_ENDPTCTRL5_TXS
 (1 << 
USB0_ENDPTCTRL5_TXS_SHIFT
)

	)

1267 
	#USB0_ENDPTCTRL5_TXT1_0_SHIFT
 (18)

	)

1268 
	#USB0_ENDPTCTRL5_TXT1_0_MASK
 (0x3 << 
USB0_ENDPTCTRL5_TXT1_0_SHIFT
)

	)

1269 
	#USB0_ENDPTCTRL5_TXT1_0
(
x
Ë((xË<< 
USB0_ENDPTCTRL5_TXT1_0_SHIFT
)

	)

1272 
	#USB0_ENDPTCTRL5_TXI_SHIFT
 (21)

	)

1273 
	#USB0_ENDPTCTRL5_TXI
 (1 << 
USB0_ENDPTCTRL5_TXI_SHIFT
)

	)

1276 
	#USB0_ENDPTCTRL5_TXR_SHIFT
 (22)

	)

1277 
	#USB0_ENDPTCTRL5_TXR
 (1 << 
USB0_ENDPTCTRL5_TXR_SHIFT
)

	)

1280 
	#USB0_ENDPTCTRL5_TXE_SHIFT
 (23)

	)

1281 
	#USB0_ENDPTCTRL5_TXE
 (1 << 
USB0_ENDPTCTRL5_TXE_SHIFT
)

	)

1289 
	#USB0_ENDPTCTRL_RXS_SHIFT
 (0)

	)

1290 
	#USB0_ENDPTCTRL_RXS
 (1 << 
USB0_ENDPTCTRL_RXS_SHIFT
)

	)

1293 
	#USB0_ENDPTCTRL_RXT_SHIFT
 (2)

	)

1294 
	#USB0_ENDPTCTRL_RXT_MASK
 (0x3 << 
USB0_ENDPTCTRL_RXT_SHIFT
)

	)

1295 
	#USB0_ENDPTCTRL_RXT
(
x
Ë((xË<< 
USB0_ENDPTCTRL_RXT_SHIFT
)

	)

1298 
	#USB0_ENDPTCTRL_RXI_SHIFT
 (5)

	)

1299 
	#USB0_ENDPTCTRL_RXI
 (1 << 
USB0_ENDPTCTRL_RXI_SHIFT
)

	)

1302 
	#USB0_ENDPTCTRL_RXR_SHIFT
 (6)

	)

1303 
	#USB0_ENDPTCTRL_RXR
 (1 << 
USB0_ENDPTCTRL_RXR_SHIFT
)

	)

1306 
	#USB0_ENDPTCTRL_RXE_SHIFT
 (7)

	)

1307 
	#USB0_ENDPTCTRL_RXE
 (1 << 
USB0_ENDPTCTRL_RXE_SHIFT
)

	)

1310 
	#USB0_ENDPTCTRL_TXS_SHIFT
 (16)

	)

1311 
	#USB0_ENDPTCTRL_TXS
 (1 << 
USB0_ENDPTCTRL_TXS_SHIFT
)

	)

1314 
	#USB0_ENDPTCTRL_TXT1_0_SHIFT
 (18)

	)

1315 
	#USB0_ENDPTCTRL_TXT1_0_MASK
 (0x3 << 
USB0_ENDPTCTRL_TXT1_0_SHIFT
)

	)

1316 
	#USB0_ENDPTCTRL_TXT1_0
(
x
Ë((xË<< 
USB0_ENDPTCTRL_TXT1_0_SHIFT
)

	)

1319 
	#USB0_ENDPTCTRL_TXI_SHIFT
 (21)

	)

1320 
	#USB0_ENDPTCTRL_TXI
 (1 << 
USB0_ENDPTCTRL_TXI_SHIFT
)

	)

1323 
	#USB0_ENDPTCTRL_TXR_SHIFT
 (22)

	)

1324 
	#USB0_ENDPTCTRL_TXR
 (1 << 
USB0_ENDPTCTRL_TXR_SHIFT
)

	)

1327 
	#USB0_ENDPTCTRL_TXE_SHIFT
 (23)

	)

1328 
	#USB0_ENDPTCTRL_TXE
 (1 << 
USB0_ENDPTCTRL_TXE_SHIFT
)

	)

	@libopencm3/include/libopencm3/lpc43xx/wwdt.h

35 #i‚de‡
LPC43XX_WWDT_H


36 
	#LPC43XX_WWDT_H


	)

40 
	~<lib›ícm3/cm3/comm⁄.h
>

41 
	~<lib›ícm3/Õc43xx/mem‹ym≠.h
>

46 
	#WWDT_MOD
 
	`MMIO32
(
WWDT_BASE
 + 0x000)

	)

49 
	#WWDT_TC
 
	`MMIO32
(
WWDT_BASE
 + 0x004)

	)

52 
	#WWDT_FEED
 
	`MMIO32
(
WWDT_BASE
 + 0x008)

	)

55 
	#WWDT_TV
 
	`MMIO32
(
WWDT_BASE
 + 0x00C)

	)

58 
	#WWDT_WARNINT
 
	`MMIO32
(
WWDT_BASE
 + 0x014)

	)

61 
	#WWDT_WINDOW
 
	`MMIO32
(
WWDT_BASE
 + 0x018)

	)

	@libopencm3/include/libopencm3/sam/3a/gpio.h

20 #i‚de‡
LIBOPENCM3_GPIO_H


21 
	#LIBOPENCM3_GPIO_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/pio.h
>

25 
	~<lib›ícm3/ßm/comm⁄/gpio_comm⁄_3a3u3x.h
>

	@libopencm3/include/libopencm3/sam/3a/memorymap.h

21 #i‚de‡
SAM3A_MEMORYMAP_H


22 
	#SAM3A_MEMORYMAP_H


	)

24 
	~<lib›ícm3/cm3/comm⁄.h
>

27 
	#HSMCI_BASE
 (0x40000000U)

	)

28 
	#SSC_BASE
 (0x40004000U)

	)

29 
	#SPI0_BASE
 (0x40008000U)

	)

30 
	#SPI1_BASE
 (0x4000C000U)

	)

31 
	#TC0_BASE
 (0x40080000U)

	)

32 
	#TC1_BASE
 (0x40080040U)

	)

33 
	#TC2_BASE
 (0x40080080U)

	)

34 
	#TC3_BASE
 (0x40084000U)

	)

35 
	#TC4_BASE
 (0x40084040U)

	)

36 
	#TC5_BASE
 (0x40084080U)

	)

37 
	#TC6_BASE
 (0x40088000U)

	)

38 
	#TC7_BASE
 (0x40088040U)

	)

39 
	#TC8_BASE
 (0x40088080U)

	)

40 
	#TWI0_BASE
 (0x4008C000U)

	)

41 
	#TWI1_BASE
 (0x40090000U)

	)

42 
	#PWM_BASE
 (0x40094000U)

	)

43 
	#USART0_BASE
 (0x40098000U)

	)

44 
	#USART1_BASE
 (0x4009C000U)

	)

45 
	#USART2_BASE
 (0x400A0000U)

	)

46 
	#USART3_BASE
 (0x400A4000U)

	)

47 
	#UOTGHS_BASE
 (0x400AC000U)

	)

48 
	#CAN0_BASE
 (0x400B4000U)

	)

49 
	#CAN1_BASE
 (0x400B8000U)

	)

50 
	#TRNG_BASE
 (0x400BC000U)

	)

51 
	#ADC_BASE
 (0x400C0000U)

	)

52 
	#DMAC_BASE
 (0x400C4000U)

	)

53 
	#DACC_BASE
 (0x400C8000U)

	)

56 
	#SMC_BASE
 (0x400E0000U)

	)

57 
	#SDRAM_BASE
 (0x400E0200U)

	)

58 
	#MATRIX_BASE
 (0x400E0400U)

	)

59 
	#PMC_BASE
 (0x400E0600U)

	)

60 
	#UART_BASE
 (0x400E0800U)

	)

61 
	#CHIPID_BASE
 (0x400E0940U)

	)

62 
	#EEFC0_BASE
 (0x400E0A00U)

	)

63 
	#EEFC1_BASE
 (0x400E0C00U)

	)

64 
	#PIOA_BASE
 (0x400E0E00U)

	)

65 
	#PIOB_BASE
 (0x400E1000U)

	)

66 
	#PIOC_BASE
 (0x400E1200U)

	)

67 
	#PIOD_BASE
 (0x400E1400U)

	)

68 
	#PIOE_BASE
 (0x400E1600U)

	)

69 
	#PIOF_BASE
 (0x400E1800U)

	)

70 
	#RSTC_BASE
 (0x400E1A00U)

	)

71 
	#SUPC_BASE
 (0x400E1A10U)

	)

72 
	#RTT_BASE
 (0x400E1A30U)

	)

73 
	#WDT_BASE
 (0x400E1A50U)

	)

74 
	#RTC_BASE
 (0x400E1A60U)

	)

75 
	#GPBR_BASE
 (0x400E1A90U)

	)

	@libopencm3/include/libopencm3/sam/3a/nvic.h

6 #i‚de‡
LIBOPENCM3_SAM3A_NVIC_H


7 
	#LIBOPENCM3_SAM3A_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_SUPC_IRQ
 0

	)

17 
	#NVIC_RSTC_IRQ
 1

	)

18 
	#NVIC_RTC_IRQ
 2

	)

19 
	#NVIC_RTT_IRQ
 3

	)

20 
	#NVIC_WDT_IRQ
 4

	)

21 
	#NVIC_PMC_IRQ
 5

	)

22 
	#NVIC_EEFC0_IRQ
 6

	)

23 
	#NVIC_EEFC1_IRQ
 7

	)

24 
	#NVIC_UART_IRQ
 8

	)

25 
	#NVIC_SMC_SDRAMC_IRQ
 9

	)

26 
	#NVIC_SDRAMC_IRQ
 10

	)

27 
	#NVIC_PIOA_IRQ
 11

	)

28 
	#NVIC_PIOB_IRQ
 12

	)

29 
	#NVIC_PIOC_IRQ
 13

	)

30 
	#NVIC_PIOD_IRQ
 14

	)

31 
	#NVIC_PIOE_IRQ
 15

	)

32 
	#NVIC_PIOF_IRQ
 16

	)

33 
	#NVIC_USART0_IRQ
 17

	)

34 
	#NVIC_USART1_IRQ
 18

	)

35 
	#NVIC_USART2_IRQ
 19

	)

36 
	#NVIC_USART3_IRQ
 20

	)

37 
	#NVIC_HSMCI_IRQ
 21

	)

38 
	#NVIC_TWI0_IRQ
 22

	)

39 
	#NVIC_TWI1_IRQ
 23

	)

40 
	#NVIC_SPI0_IRQ
 24

	)

41 
	#NVIC_SPI1_IRQ
 25

	)

42 
	#NVIC_SSC_IRQ
 26

	)

43 
	#NVIC_TC0_IRQ
 27

	)

44 
	#NVIC_TC1_IRQ
 28

	)

45 
	#NVIC_TC2_IRQ
 29

	)

46 
	#NVIC_TC3_IRQ
 30

	)

47 
	#NVIC_TC4_IRQ
 31

	)

48 
	#NVIC_TC5_IRQ
 32

	)

49 
	#NVIC_TC6_IRQ
 33

	)

50 
	#NVIC_TC7_IRQ
 34

	)

51 
	#NVIC_TC8_IRQ
 35

	)

52 
	#NVIC_PWM_IRQ
 36

	)

53 
	#NVIC_ADC_IRQ
 37

	)

54 
	#NVIC_DACC_IRQ
 38

	)

55 
	#NVIC_DMAC_IRQ
 39

	)

56 
	#NVIC_UOTGHS_IRQ
 40

	)

57 
	#NVIC_TRNG_IRQ
 41

	)

58 
	#NVIC_RESERVED0_IRQ
 42

	)

59 
	#NVIC_CAN0_IRQ
 43

	)

60 
	#NVIC_CAN1_IRQ
 44

	)

62 
	#NVIC_IRQ_COUNT
 45

	)

71 
BEGIN_DECLS


73 
supc_i§
();

74 
r°c_i§
();

75 
πc_i§
();

76 
πt_i§
();

77 
wdt_i§
();

78 
pmc_i§
();

79 
ìfc0_i§
();

80 
ìfc1_i§
();

81 
u¨t_i§
();

82 
smc_sdømc_i§
();

83 
sdømc_i§
();

84 
piﬂ_i§
();

85 
piob_i§
();

86 
pioc_i§
();

87 
piod_i§
();

88 
pi€_i§
();

89 
piof_i§
();

90 
ußπ0_i§
();

91 
ußπ1_i§
();

92 
ußπ2_i§
();

93 
ußπ3_i§
();

94 
hsmci_i§
();

95 
twi0_i§
();

96 
twi1_i§
();

97 
•i0_i§
();

98 
•i1_i§
();

99 
ssc_i§
();

100 
tc0_i§
();

101 
tc1_i§
();

102 
tc2_i§
();

103 
tc3_i§
();

104 
tc4_i§
();

105 
tc5_i§
();

106 
tc6_i§
();

107 
tc7_i§
();

108 
tc8_i§
();

109 
pwm_i§
();

110 
adc_i§
();

111 
dacc_i§
();

112 
dmac_i§
();

113 
uŸghs_i§
();

114 
ång_i§
();

115 
ª£rved0_i§
();

116 
ˇn0_i§
();

117 
ˇn1_i§
();

119 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/3a/pio.h

20 #i‚de‡
LIBOPENCM3_PIO_H


21 
	#LIBOPENCM3_PIO_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/comm⁄/pio_comm⁄_3a3u3x.h
>

	@libopencm3/include/libopencm3/sam/3a/pmc.h

21 #i‚de‡
LIBOPENCM3_PMC_H


22 
	#LIBOPENCM3_PMC_H


	)

24 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

25 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_Æl.h
>

26 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_3a3s3x.h
>

27 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_3a3u3x.h
>

32 
	#PMC_PCR
 
	`MMIO32
(
PMC_BASE
 + 0x010C)

	)

41 
	#PMC_MCKR_PLLADIV2
 (0x01 << 12)

	)

47 
	#PMC_PCR_EN
 (0x01 << 28)

	)

50 
	#PMC_PCR_DIV_SHIFT
 16

	)

51 
	#PMC_PCR_DIV_MASK
 (0x03 << 
PMC_PCR_DIV_SHIFT
)

	)

52 
	#PMC_PCR_DIV_PERIPH_DIV_MCK
 (0x00 << 
PMC_PCR_DIV_SHIFT
)

	)

53 
	#PMC_PCR_DIV_PERIPH_DIV2_MCK
 (0x01 << 
PMC_PCR_DIV_SHIFT
)

	)

54 
	#PMC_PCR_DIV_PERIPH_DIV4_MCK
 (0x02 << 
PMC_PCR_DIV_SHIFT
)

	)

57 
	#PMC_PCR_CMD
 (0x01 << 12)

	)

60 
	#PMC_PCR_PID_SHIFT
 0

	)

61 
	#PMC_PCR_PID_MASK
 (0x3F << 
PMC_PCR_PID_SHIFT
)

	)

	@libopencm3/include/libopencm3/sam/3n/gpio.h

20 #i‚de‡
LIBOPENCM3_GPIO_H


21 
	#LIBOPENCM3_GPIO_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/pio.h
>

25 
	~<lib›ícm3/ßm/comm⁄/gpio_comm⁄_3n3s.h
>

	@libopencm3/include/libopencm3/sam/3n/memorymap.h

20 #i‚de‡
SAM3N_MEMORYMAP_H


21 
	#SAM3N_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

27 
	#SPI_BASE
 (0x40008000U)

	)

28 
	#TC0_BASE
 (0x40010000U)

	)

29 
	#TC1_BASE
 (0x40010040U)

	)

30 
	#TC2_BASE
 (0x40010080U)

	)

31 
	#TC3_BASE
 (0x40014000U)

	)

32 
	#TC4_BASE
 (0x40014040U)

	)

33 
	#TC5_BASE
 (0x40014080U)

	)

34 
	#TWI0_BASE
 (0x40018000U)

	)

35 
	#TWI1_BASE
 (0x4001C000U)

	)

36 
	#PWM_BASE
 (0x40020000U)

	)

37 
	#USART0_BASE
 (0x40024000U)

	)

38 
	#USART1_BASE
 (0x40028000U)

	)

39 
	#ADC_BASE
 (0x40038000U)

	)

40 
	#DACC_BASE
 (0x4003C000U)

	)

43 
	#SMC_BASE
 (0x400E0000U)

	)

44 
	#MATRIX_BASE
 (0x400E0200U)

	)

45 
	#PMC_BASE
 (0x400E0400U)

	)

46 
	#UART0_BASE
 (0x400E0600U)

	)

47 
	#CHIPID_BASE
 (0x400E0740U)

	)

48 
	#UART1_BASE
 (0x400E0800U)

	)

49 
	#EEFC_BASE
 (0x400E0A00U)

	)

50 
	#PIOA_BASE
 (0x400E0E00U)

	)

51 
	#PIOB_BASE
 (0x400E1000U)

	)

52 
	#PIOC_BASE
 (0x400E1200U)

	)

53 
	#RSTC_BASE
 (0x400E1400U)

	)

54 
	#SUPC_BASE
 (0x400E1410U)

	)

55 
	#RTT_BASE
 (0x400E1430U)

	)

56 
	#WDT_BASE
 (0x400E1450U)

	)

57 
	#RTC_BASE
 (0x400E1460U)

	)

58 
	#GPBR_BASE
 (0x400E1490U)

	)

	@libopencm3/include/libopencm3/sam/3n/nvic.h

6 #i‚de‡
LIBOPENCM3_SAM3N_NVIC_H


7 
	#LIBOPENCM3_SAM3N_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_SUPC_IRQ
 0

	)

17 
	#NVIC_RSTC_IRQ
 1

	)

18 
	#NVIC_RTC_IRQ
 2

	)

19 
	#NVIC_RTT_IRQ
 3

	)

20 
	#NVIC_WDT_IRQ
 4

	)

21 
	#NVIC_PMC_IRQ
 5

	)

22 
	#NVIC_EEFC_IRQ
 6

	)

23 
	#NVIC_RESERVED0_IRQ
 7

	)

24 
	#NVIC_UART0_IRQ
 8

	)

25 
	#NVIC_UART1_IRQ
 9

	)

26 
	#NVIC_RESERVED1_IRQ
 10

	)

27 
	#NVIC_PIOA_IRQ
 11

	)

28 
	#NVIC_PIOB_IRQ
 12

	)

29 
	#NVIC_PIOC_IRQ
 13

	)

30 
	#NVIC_USART0_IRQ
 14

	)

31 
	#NVIC_USART1_IRQ
 15

	)

32 
	#NVIC_RESERVED2_IRQ
 16

	)

33 
	#NVIC_RESERVED3_IRQ
 17

	)

34 
	#NVIC_RESERVED4_IRQ
 18

	)

35 
	#NVIC_TWI0_IRQ
 19

	)

36 
	#NVIC_TWI1_IRQ
 20

	)

37 
	#NVIC_SPI_IRQ
 21

	)

38 
	#NVIC_RESERVED5_IRQ
 22

	)

39 
	#NVIC_TC0_IRQ
 23

	)

40 
	#NVIC_TC1_IRQ
 24

	)

41 
	#NVIC_TC2_IRQ
 25

	)

42 
	#NVIC_TC3_IRQ
 26

	)

43 
	#NVIC_TC4_IRQ
 27

	)

44 
	#NVIC_TC5_IRQ
 28

	)

45 
	#NVIC_ADC_IRQ
 29

	)

46 
	#NVIC_DACC_IRQ
 30

	)

47 
	#NVIC_PWM_IRQ
 31

	)

49 
	#NVIC_IRQ_COUNT
 32

	)

58 
BEGIN_DECLS


60 
supc_i§
();

61 
r°c_i§
();

62 
πc_i§
();

63 
πt_i§
();

64 
wdt_i§
();

65 
pmc_i§
();

66 
ìfc_i§
();

67 
ª£rved0_i§
();

68 
u¨t0_i§
();

69 
u¨t1_i§
();

70 
ª£rved1_i§
();

71 
piﬂ_i§
();

72 
piob_i§
();

73 
pioc_i§
();

74 
ußπ0_i§
();

75 
ußπ1_i§
();

76 
ª£rved2_i§
();

77 
ª£rved3_i§
();

78 
ª£rved4_i§
();

79 
twi0_i§
();

80 
twi1_i§
();

81 
•i_i§
();

82 
ª£rved5_i§
();

83 
tc0_i§
();

84 
tc1_i§
();

85 
tc2_i§
();

86 
tc3_i§
();

87 
tc4_i§
();

88 
tc5_i§
();

89 
adc_i§
();

90 
dacc_i§
();

91 
pwm_i§
();

93 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/3n/periph.h

20 #i‚de‡
LIBOPENCM3_PERIPH_H


21 
	#LIBOPENCM3_PERIPH_H


	)

24 
	#PERIPH_SUPC
 0

	)

25 
	#PERIPH_RSTC
 1

	)

26 
	#PERIPH_RTC
 2

	)

27 
	#PERIPH_RTT
 3

	)

28 
	#PERIPH_WDG
 4

	)

29 
	#PERIPH_PMC
 5

	)

30 
	#PERIPH_EEFC
 6

	)

31 
	#PERIPH_UART0
 8

	)

32 
	#PERIPH_UART1
 9

	)

33 
	#PERIPH_PIOA
 11

	)

34 
	#PERIPH_PIOB
 12

	)

35 
	#PERIPH_PIOC
 13

	)

36 
	#PERIPH_USART0
 14

	)

37 
	#PERIPH_USART1
 15

	)

38 
	#PERIPH_TWI0
 19

	)

39 
	#PERIPH_TWI1
 20

	)

40 
	#PERIPH_SPI
 21

	)

41 
	#PERIPH_TC0
 23

	)

42 
	#PERIPH_TC1
 24

	)

43 
	#PERIPH_TC2
 25

	)

44 
	#PERIPH_TC3
 26

	)

45 
	#PERIPH_TC4
 27

	)

46 
	#PERIPH_TC5
 28

	)

47 
	#PERIPH_ADC
 29

	)

48 
	#PERIPH_DACC
 30

	)

49 
	#PERIPH_PWM
 31

	)

	@libopencm3/include/libopencm3/sam/3n/pio.h

20 #i‚de‡
LIBOPENCM3_PIO_H


21 
	#LIBOPENCM3_PIO_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/comm⁄/pio_comm⁄_3n3s.h
>

	@libopencm3/include/libopencm3/sam/3n/pmc.h

20 #i‚de‡
LIBOPENCM3_PMC_H


21 
	#LIBOPENCM3_PMC_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_Æl.h
>

25 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_3n3u.h
>

30 
	#CKGR_PLLR
 
CKGR_PLLAR


	)

33 
	#PMC_OCR
 
	`MMIO32
(
PMC_BASE
 + 0x0110)

	)

42 
	#CKGR_MOR_WAITMODE
 (0x01 << 2)

	)

49 
	#CKGR_PLLR_ONE
 
CKGR_PLLAR_ONE


	)

52 
	#CKGR_PLLR_MUL_SHIFT
 
CKGR_PLLAR_MULA_SHIFT


	)

53 
	#CKGR_PLLR_MUL_MASK
 
CKGR_PLLAR_MULA_MASK


	)

56 
	#CKGR_PLLR_PLLCOUNT_SHIFT
 
CKGR_PLLAR_PLLACOUNT_SHIFT


	)

57 
	#CKGR_PLLR_PLLCOUNT_MASK
 
CKGR_PLLAR_PLLACOUNT_MASK


	)

60 
	#CKGR_PLLR_DIV_SHIFT
 
CKGR_PLLAR_DIVA_SHIFT


	)

61 
	#CKGR_PLLR_DIV_MASK
 
CKGR_PLLAR_DIVA_MASK


	)

67 
	#PMC_MCKR_PLLDIV2
 (0x01 << 12)

	)

70 
	#PMC_MCKR_CSS_PLL_CLK
 (2 << 
PMC_MCKR_CSS_SHIFT
)

	)

76 
	#PMC_PCK0_CSS_PLL_CLK
 (2 << 
PMC_PCK0_CSS_SHIFT
)

	)

82 
	#PMC_PCK1_CSS_PLL_CLK
 (2 << 
PMC_PCK1_CSS_SHIFT
)

	)

88 
	#PMC_PCK2_CSS_PLL_CLK
 (2 << 
PMC_PCK2_CSS_SHIFT
)

	)

94 
	#PMC_IER_LOCK
 
PMC_IER_LOCKA


	)

100 
	#PMC_IDR_LOCK
 
PMC_IDR_LOCKA


	)

106 
	#PMC_SR_LOCK
 
PMC_SR_LOCKA


	)

112 
	#PMC_IMR_LOCK
 
PMC_IMR_LOCKA


	)

118 
	#PMC_OCR_SEL12
 (0x01 << 23)

	)

121 
	#PMC_OCR_CAL12_SHIFT
 16

	)

122 
	#PMC_OCR_CAL12_MASK
 (0x7F << 
PMC_OCR_CAL12_SHIFT
)

	)

125 
	#PMC_OCR_SEL8
 (0x01 << 15)

	)

128 
	#PMC_OCR_CAL8_SHIFT
 8

	)

129 
	#PMC_OCR_CAL8_MASK
 (0x7F << 
PMC_OCR_CAL8_SHIFT
)

	)

132 
	#PMC_OCR_SEL4
 (0x01 << 7)

	)

135 
	#PMC_OCR_CAL4_SHIFT
 0

	)

136 
	#PMC_OCR_CAL4_MASK
 (0x7F << 
PMC_OCR_CAL12_SHIFT
)

	)

	@libopencm3/include/libopencm3/sam/3s/gpio.h

20 #i‚de‡
LIBOPENCM3_GPIO_H


21 
	#LIBOPENCM3_GPIO_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/pio.h
>

25 
	~<lib›ícm3/ßm/comm⁄/gpio_comm⁄_3n3s.h
>

	@libopencm3/include/libopencm3/sam/3s/memorymap.h

21 #i‚de‡
SAM3S_MEMORYMAP_H


22 
	#SAM3S_MEMORYMAP_H


	)

24 
	~<lib›ícm3/cm3/comm⁄.h
>

27 
	#HSMCI_BASE
 (0x40000000U)

	)

28 
	#SSC_BASE
 (0x40004000U)

	)

29 
	#SPI_BASE
 (0x40008000U)

	)

30 
	#TC0_BASE
 (0x40010000U)

	)

31 
	#TC1_BASE
 (0x40010040U)

	)

32 
	#TC2_BASE
 (0x40010080U)

	)

33 
	#TC3_BASE
 (0x40014000U)

	)

34 
	#TC4_BASE
 (0x40014040U)

	)

35 
	#TC5_BASE
 (0x40014080U)

	)

36 
	#TWI0_BASE
 (0x40018000U)

	)

37 
	#TWI1_BASE
 (0x4001C000U)

	)

38 
	#PWM_BASE
 (0x40020000U)

	)

39 
	#USART0_BASE
 (0x40024000U)

	)

40 
	#USART1_BASE
 (0x40028000U)

	)

41 
	#USART2_BASE
 (0x4002C000U)

	)

42 
	#UDP_BASE
 (0x40034000U)

	)

43 
	#ADC_BASE
 (0x40038000U)

	)

44 
	#DACC_BASE
 (0x4003C000U)

	)

45 
	#ACC_BASE
 (0x40040000U)

	)

46 
	#CRCCU_BASE
 (0x40044000U)

	)

49 
	#SMC_BASE
 (0x400E0000U)

	)

50 
	#MATRIX_BASE
 (0x400E0200U)

	)

51 
	#PMC_BASE
 (0x400E0400U)

	)

52 
	#UART0_BASE
 (0x400E0600U)

	)

53 
	#CHIPID_BASE
 (0x400E0740U)

	)

54 
	#UART1_BASE
 (0x400E0800U)

	)

55 
	#EEFC_BASE
 (0x400E0A00U)

	)

56 
	#PIOA_BASE
 (0x400E0E00U)

	)

57 
	#PIOB_BASE
 (0x400E1000U)

	)

58 
	#PIOC_BASE
 (0x400E1200U)

	)

59 
	#RSTC_BASE
 (0x400E1400U)

	)

60 
	#SUPC_BASE
 (0x400E1410U)

	)

61 
	#RTT_BASE
 (0x400E1430U)

	)

62 
	#WDT_BASE
 (0x400E1450U)

	)

63 
	#RTC_BASE
 (0x400E1460U)

	)

64 
	#GPBR_BASE
 (0x400E1490U)

	)

	@libopencm3/include/libopencm3/sam/3s/nvic.h

6 #i‚de‡
LIBOPENCM3_SAM3S_NVIC_H


7 
	#LIBOPENCM3_SAM3S_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_SUPC_IRQ
 0

	)

17 
	#NVIC_RSTC_IRQ
 1

	)

18 
	#NVIC_RTC_IRQ
 2

	)

19 
	#NVIC_RTT_IRQ
 3

	)

20 
	#NVIC_WDT_IRQ
 4

	)

21 
	#NVIC_PMC_IRQ
 5

	)

22 
	#NVIC_EEFC_IRQ
 6

	)

23 
	#NVIC_RESERVED0_IRQ
 7

	)

24 
	#NVIC_UART0_IRQ
 8

	)

25 
	#NVIC_UART1_IRQ
 9

	)

26 
	#NVIC_SMC_IRQ
 10

	)

27 
	#NVIC_PIOA_IRQ
 11

	)

28 
	#NVIC_PIOB_IRQ
 12

	)

29 
	#NVIC_PIOC_IRQ
 13

	)

30 
	#NVIC_USART0_IRQ
 14

	)

31 
	#NVIC_USART1_IRQ
 15

	)

32 
	#NVIC_USART2_IRQ
 16

	)

33 
	#NVIC_RESERVED1_IRQ
 17

	)

34 
	#NVIC_HSMCI_IRQ
 18

	)

35 
	#NVIC_TWI0_IRQ
 19

	)

36 
	#NVIC_TWI1_IRQ
 20

	)

37 
	#NVIC_SPI_IRQ
 21

	)

38 
	#NVIC_SSC_IRQ
 22

	)

39 
	#NVIC_TC0_IRQ
 23

	)

40 
	#NVIC_TC1_IRQ
 24

	)

41 
	#NVIC_TC2_IRQ
 25

	)

42 
	#NVIC_TC3_IRQ
 26

	)

43 
	#NVIC_TC4_IRQ
 27

	)

44 
	#NVIC_TC5_IRQ
 28

	)

45 
	#NVIC_ADC_IRQ
 29

	)

46 
	#NVIC_DACC_IRQ
 30

	)

47 
	#NVIC_PWM_IRQ
 31

	)

48 
	#NVIC_CRCCU_IRQ
 32

	)

49 
	#NVIC_ACC_IRQ
 33

	)

50 
	#NVIC_UDP_IRQ
 34

	)

52 
	#NVIC_IRQ_COUNT
 35

	)

61 
BEGIN_DECLS


63 
supc_i§
();

64 
r°c_i§
();

65 
πc_i§
();

66 
πt_i§
();

67 
wdt_i§
();

68 
pmc_i§
();

69 
ìfc_i§
();

70 
ª£rved0_i§
();

71 
u¨t0_i§
();

72 
u¨t1_i§
();

73 
smc_i§
();

74 
piﬂ_i§
();

75 
piob_i§
();

76 
pioc_i§
();

77 
ußπ0_i§
();

78 
ußπ1_i§
();

79 
ußπ2_i§
();

80 
ª£rved1_i§
();

81 
hsmci_i§
();

82 
twi0_i§
();

83 
twi1_i§
();

84 
•i_i§
();

85 
ssc_i§
();

86 
tc0_i§
();

87 
tc1_i§
();

88 
tc2_i§
();

89 
tc3_i§
();

90 
tc4_i§
();

91 
tc5_i§
();

92 
adc_i§
();

93 
dacc_i§
();

94 
pwm_i§
();

95 
¸ccu_i§
();

96 
acc_i§
();

97 
udp_i§
();

99 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/3s/periph.h

20 #i‚de‡
LIBOPENCM3_PERIPH_H


21 
	#LIBOPENCM3_PERIPH_H


	)

24 
	#PERIPH_SUPC
 0

	)

25 
	#PERIPH_RSTC
 1

	)

26 
	#PERIPH_RTC
 2

	)

27 
	#PERIPH_RTT
 3

	)

28 
	#PERIPH_WDG
 4

	)

29 
	#PERIPH_PMC
 5

	)

30 
	#PERIPH_EEFC
 6

	)

31 
	#PERIPH_UART0
 8

	)

32 
	#PERIPH_UART1
 9

	)

33 
	#PERIPH_SMC
 10

	)

34 
	#PERIPH_PIOA
 11

	)

35 
	#PERIPH_PIOB
 12

	)

36 
	#PERIPH_PIOC
 13

	)

37 
	#PERIPH_USART0
 14

	)

38 
	#PERIPH_USART1
 15

	)

39 
	#PERIPH_USART2
 16

	)

40 
	#PERIPH_HSMCI
 18

	)

41 
	#PERIPH_TWI0
 19

	)

42 
	#PERIPH_TWI1
 20

	)

43 
	#PERIPH_SPI
 21

	)

44 
	#PERIPH_SSC
 22

	)

45 
	#PERIPH_TC0
 23

	)

46 
	#PERIPH_TC1
 24

	)

47 
	#PERIPH_TC2
 25

	)

48 
	#PERIPH_TC3
 26

	)

49 
	#PERIPH_TC4
 27

	)

50 
	#PERIPH_TC5
 28

	)

51 
	#PERIPH_ADC
 29

	)

52 
	#PERIPH_DACC
 30

	)

53 
	#PERIPH_PWM
 31

	)

54 
	#PERIPH_CRCCU
 32

	)

55 
	#PERIPH_ACC
 33

	)

56 
	#PERIPH_UDP
 34

	)

	@libopencm3/include/libopencm3/sam/3s/pio.h

20 #i‚de‡
LIBOPENCM3_PIO_H


21 
	#LIBOPENCM3_PIO_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/comm⁄/pio_comm⁄_3n3s.h
>

29 
	#PIO_PCMR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0150)

	)

32 
	#PIO_PCIER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0154)

	)

35 
	#PIO_PCIDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0158)

	)

38 
	#PIO_PCIMR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x015C)

	)

41 
	#PIO_PCISR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0160)

	)

44 
	#PIO_PCRHR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0164)

	)

	@libopencm3/include/libopencm3/sam/3s/pmc.h

20 #i‚de‡
LIBOPENCM3_PMC_H


21 
	#LIBOPENCM3_PMC_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_Æl.h
>

25 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_3a3s3x.h
>

30 
	#CKGR_PLLBR
 
	`MMIO32
(
PMC_BASE
 + 0x002C)

	)

33 
	#PMC_OCR
 
	`MMIO32
(
PMC_BASE
 + 0x0110)

	)

42 
	#CKGR_MCFR_RCMEAS
 (0x01 << 20)

	)

48 
	#CKGR_PLLBR_MULB_SHIFT
 16

	)

49 
	#CKGR_PLLBR_MULB_MASK
 (0x7FF << 
CKGR_PLLBR_MULB_SHIFT
)

	)

52 
	#CKGR_PLLBR_PLLBCOUNT_SHIFT
 8

	)

53 
	#CKGR_PLLBR_PLLBCOUNT_MASK
 (0x3F << 
CKGR_PLLBR_PLLBCOUNT_SHIFT
)

	)

56 
	#CKGR_PLLBR_DIVB_SHIFT
 0

	)

57 
	#CKGR_PLLBR_DIVB_MASK
 (0xFF << 
CKGR_PLLBR_DIVB_SHIFT
)

	)

63 
	#PMC_MCKR_PLLBDIV2
 (0x01 << 13)

	)

66 
	#PMC_MCKR_PLLADIV2
 (0x01 << 12)

	)

69 
	#PMC_MCKR_CSS_PLLB_CLK
 (3 << 
PMC_MCKR_CSS_SHIFT
)

	)

75 
	#PMC_PCK0_CSS_PLLB_CLK
 (3 << 
PMC_PCK0_CSS_SHIFT
)

	)

81 
	#PMC_PCK1_CSS_PLLB_CLK
 (3 << 
PMC_PCK1_CSS_SHIFT
)

	)

87 
	#PMC_PCK2_CSS_PLLB_CLK
 (3 << 
PMC_PCK2_CSS_SHIFT
)

	)

93 
	#PMC_IER_LOCKB
 (0x01 << 2)

	)

99 
	#PMC_IDR_LOCKB
 (0x01 << 2)

	)

105 
	#PMC_SR_LOCKB
 (0x01 << 2)

	)

111 
	#PMC_IMR_LOCKB
 (0x01 << 2)

	)

117 
	#PMC_OCR_SEL12
 (0x01 << 23)

	)

120 
	#PMC_OCR_CAL12_SHIFT
 16

	)

121 
	#PMC_OCR_CAL12_MASK
 (0x7F << 
PMC_OCR_CAL12_SHIFT
)

	)

124 
	#PMC_OCR_SEL8
 (0x01 << 15)

	)

127 
	#PMC_OCR_CAL8_SHIFT
 8

	)

128 
	#PMC_OCR_CAL8_MASK
 (0x7F << 
PMC_OCR_CAL8_SHIFT
)

	)

131 
	#PMC_OCR_SEL4
 (0x01 << 7)

	)

134 
	#PMC_OCR_CAL4_SHIFT
 0

	)

135 
	#PMC_OCR_CAL4_MASK
 (0x7F << 
PMC_OCR_CAL12_SHIFT
)

	)

	@libopencm3/include/libopencm3/sam/3s/smc.h

20 #i‚de‡
LIBOPENCM3_SMC_H


21 
	#LIBOPENCM3_SMC_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

27 
	#SMC_CS_0
 0

	)

28 
	#SMC_CS_1
 1

	)

29 
	#SMC_CS_2
 2

	)

30 
	#SMC_CS_3
 3

	)

36 
	#SMC_SETUP
(
CS_numbî
Ë
	`MMIO32
(
SMC_BASE
 + 0x10*(CS_number) \

37 + 0x00)

	)

40 
	#SMC_PULSE
(
CS_numbî
Ë
	`MMIO32
(
SMC_BASE
 + 0x10*(CS_number) \

41 + 0x04)

	)

44 
	#SMC_CYCLE
(
CS_numbî
Ë
	`MMIO32
(
SMC_BASE
 + 0x10*(CS_number) \

45 + 0x08)

	)

48 
	#SMC_MODE
(
CS_numbî
Ë
	`MMIO32
(
SMC_BASE
 + 0x10*(CS_number) \

49 + 0x0C)

	)

52 
	#SMC_OCMS
 
	`MMIO32
(
SMC_BASE
 + 0x80)

	)

55 
	#SMC_KEY1
 
	`MMIO32
(
SMC_BASE
 + 0x84)

	)

58 
	#SMC_KEY2
 
	`MMIO32
(
SMC_BASE
 + 0x88)

	)

61 
	#SMC_WPMR
 
	`MMIO32
(
SMC_BASE
 + 0xE4)

	)

64 
	#SMC_WPSR
 
	`MMIO32
(
SMC_BASE
 + 0xE8)

	)

73 
	#SMC_SETUP_NCS_RD_SETUP_SHIFT
 24

	)

74 
	#SMC_SETUP_NCS_RD_SETUP_MASK
 (0x3F << 
SMC_SETUP_NCS_RD_SETUP_SHIFT
)

	)

77 
	#SMC_SETUP_NRD_SETUP_SHIFT
 16

	)

78 
	#SMC_SETUP_NRD_SETUP_MASK
 (0x3F << 
SMC_SETUP_NRD_SETUP_SHIFT
)

	)

81 
	#SMC_SETUP_NCS_WR_SETUP_SHIFT
 8

	)

82 
	#SMC_SETUP_NCS_WR_SETUP_MASK
 (0x3F << 
SMC_SETUP_NCS_WR_SETUP_SHIFT
)

	)

85 
	#SMC_SETUP_NWE_SETUP_SHIFT
 0

	)

86 
	#SMC_SETUP_NWE_SETUP_MASK
 (0x3F << 
SMC_SETUP_NWE_SETUP_SHIFT
)

	)

92 
	#SMC_PULSE_NCS_RD_PULSE_SHIFT
 24

	)

93 
	#SMC_PULSE_NCS_RD_PULSE_MASK
 (0x7F << 
SMC_PULSE_NCS_RD_PULSE_SHIFT
)

	)

96 
	#SMC_PULSE_NRD_PULSE_SHIFT
 16

	)

97 
	#SMC_PULSE_NRD_PULSE_MASK
 (0x7F << 
SMC_PULSE_NRD_PULSE_SHIFT
)

	)

100 
	#SMC_PULSE_NCS_WR_PULSE_SHIFT
 8

	)

101 
	#SMC_PULSE_NCS_WR_PULSE_MASK
 (0x7F << 
SMC_PULSE_NCS_WR_PULSE_SHIFT
)

	)

104 
	#SMC_PULSE_NWE_PULSE_SHIFT
 0

	)

105 
	#SMC_PULSE_NWE_PULSE_MASK
 (0x7F << 
SMC_PULSE_NWE_PULSE_SHIFT
)

	)

111 
	#SMC_CYCLE_NRD_CYCLE_SHIFT
 16

	)

112 
	#SMC_CYCLE_NRD_CYCLE_MASK
 (0x1FF << 
SMC_CYCLE_NRD_CYCLE_SHIFT
)

	)

115 
	#SMC_CYCLE_NWE_CYCLE_SHIFT
 0

	)

116 
	#SMC_CYCLE_NWE_CYCLE_MASK
 (0x1FF << 
SMC_CYCLE_NWE_CYCLE_SHIFT
)

	)

122 
	#SMC_MODE_PS_SHIFT
 28

	)

123 
	#SMC_MODE_PS_MASK
 (0x03 << 
SMC_MODE_PS_SHIFT
)

	)

126 
	#SMC_MODE_PS_4_BYTE
 (0x00 << 
SMC_MODE_PS_SHIFT
)

	)

127 
	#SMC_MODE_PS_8_BYTE
 (0x01 << 
SMC_MODE_PS_SHIFT
)

	)

128 
	#SMC_MODE_PS_16_BYTE
 (0x02 << 
SMC_MODE_PS_SHIFT
)

	)

129 
	#SMC_MODE_PS_32_BYTE
 (0x03 << 
SMC_MODE_PS_SHIFT
)

	)

132 
	#SMC_MODE_PMEN
 (1 << 24)

	)

135 
	#SMC_MODE_TDF_MODE
 (1 << 20)

	)

138 
	#SMC_MODE_TDF_CYCLES_SHIFT
 16

	)

139 
	#SMC_MODE_TDF_CYCLES_MASK
 (0x0F << 
SMC_MODE_TDF_CYCLES_SHIFT
)

	)

142 
	#SMC_MODE_DBW_SHIFT
 12

	)

143 
	#SMC_MODE_DBW_MASK
 (0x03 << 
SMC_MODE_DBW_SHIFT
)

	)

146 
	#SMC_MODE_DBW_8_BIT
 (0x00 << 
SMC_MODE_DBW_SHIFT
)

	)

147 
	#SMC_MODE_DBW_16_BIT
 (0x01 << 
SMC_MODE_DBW_SHIFT
)

	)

148 
	#SMC_MODE_DBW_32_BIT
 (0x02 << 
SMC_MODE_DBW_SHIFT
)

	)

151 
	#SMC_MODE_EXNW_MODE_SHIFT
 4

	)

152 
	#SMC_MODE_EXNW_MODE_MASK
 (0x03 << 
SMC_MODE_EXNW_MODE_SHIFT
)

	)

155 
	#SMC_MODE_EXNW_MODE_DISABLED
 (0x00 << 
SMC_MODE_EXNW_MODE_SHIFT
)

	)

156 
	#SMC_MODE_EXNW_MODE_FROZEN
 (0x02 << 
SMC_MODE_EXNW_MODE_SHIFT
)

	)

157 
	#SMC_MODE_EXNW_MODE_READY
 (0x03 << 
SMC_MODE_EXNW_MODE_SHIFT
)

	)

160 
	#SMC_MODE_WRITE_MODE
 (1 << 1)

	)

163 
	#SMC_MODE_READ_MODE
 (1 << 0)

	)

169 
	#SMC_OCMS_CS3SE
 (1 << 19)

	)

172 
	#SMC_OCMS_CS2SE
 (1 << 18)

	)

175 
	#SMC_OCMS_CS1SE
 (1 << 17)

	)

178 
	#SMC_OCMS_CS0SE
 (1 << 16)

	)

181 
	#SMC_OCMS_SMSE
 (1 << 0)

	)

187 
	#SMC_WPMR_WPKEY_SHIFT
 8

	)

188 
	#SMC_WPMR_WPKEY_KEY
 (0x534D43 << 
SMC_WPMR_WPKEY_SHIFT
)

	)

191 
	#SMC_WPMR_WPEN
 (1 << 0)

	)

197 
	#SMC_WPSR_WP_VSRC_SHIFT
 8

	)

198 
	#SMC_WPSR_WP_VSRC_MASK
 (0xFFFF << 
SMC_WPSR_WP_VSRC_SHIFT
)

	)

201 
	#SMC_WPSR_WPVS
 (1 << 0)

	)

	@libopencm3/include/libopencm3/sam/3u/gpio.h

20 #i‚de‡
LIBOPENCM3_GPIO_H


21 
	#LIBOPENCM3_GPIO_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/pio.h
>

25 
	~<lib›ícm3/ßm/comm⁄/gpio_comm⁄_3a3u3x.h
>

	@libopencm3/include/libopencm3/sam/3u/memorymap.h

21 #i‚de‡
SAM3U_MEMORYMAP_H


22 
	#SAM3U_MEMORYMAP_H


	)

24 
	~<lib›ícm3/cm3/comm⁄.h
>

27 
	#HSMCI_BASE
 (0x40000000U)

	)

28 
	#SSC_BASE
 (0x40004000U)

	)

29 
	#SPI_BASE
 (0x40008000U)

	)

30 
	#TC0_BASE
 (0x40080000U)

	)

31 
	#TC1_BASE
 (0x40080040U)

	)

32 
	#TC2_BASE
 (0x40080080U)

	)

33 
	#TWI0_BASE
 (0x40084000U)

	)

34 
	#TWI1_BASE
 (0x40088000U)

	)

35 
	#PWM_BASE
 (0x4008C000U)

	)

36 
	#USART0_BASE
 (0x40090000U)

	)

37 
	#USART1_BASE
 (0x40094000U)

	)

38 
	#USART2_BASE
 (0x40098000U)

	)

39 
	#USART3_BASE
 (0x4009C000U)

	)

40 
	#UDPHS_BASE
 (0x400A4000U)

	)

41 
	#ADC12B_BASE
 (0x400A8000U)

	)

42 
	#ADC_BASE
 (0x400AC000U)

	)

43 
	#DMAC_BASE
 (0x400B0000U)

	)

46 
	#SMC_BASE
 (0x400E0000U)

	)

47 
	#MATRIX_BASE
 (0x400E0200U)

	)

48 
	#PMC_BASE
 (0x400E0400U)

	)

49 
	#UART_BASE
 (0x400E0600U)

	)

50 
	#CHIPID_BASE
 (0x400E0740U)

	)

51 
	#EEFC0_BASE
 (0x400E0800U)

	)

52 
	#EEFC1_BASE
 (0x400E0A00U)

	)

53 
	#PIOA_BASE
 (0x400E0C00U)

	)

54 
	#PIOB_BASE
 (0x400E0E00U)

	)

55 
	#PIOC_BASE
 (0x400E1000U)

	)

56 
	#RSTC_BASE
 (0x400E1200U)

	)

57 
	#SUPC_BASE
 (0x400E1210U)

	)

58 
	#RTT_BASE
 (0x400E1230U)

	)

59 
	#WDT_BASE
 (0x400E1250U)

	)

60 
	#RTC_BASE
 (0x400E1260U)

	)

61 
	#GPBR_BASE
 (0x400E1290U)

	)

	@libopencm3/include/libopencm3/sam/3u/nvic.h

6 #i‚de‡
LIBOPENCM3_SAM3U_NVIC_H


7 
	#LIBOPENCM3_SAM3U_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_SUPC_IRQ
 0

	)

17 
	#NVIC_RSTC_IRQ
 1

	)

18 
	#NVIC_RTC_IRQ
 2

	)

19 
	#NVIC_RTT_IRQ
 3

	)

20 
	#NVIC_WDT_IRQ
 4

	)

21 
	#NVIC_PMC_IRQ
 5

	)

22 
	#NVIC_EEFC0_IRQ
 6

	)

23 
	#NVIC_EEFC1_IRQ
 7

	)

24 
	#NVIC_UART_IRQ
 8

	)

25 
	#NVIC_SMC_IRQ
 9

	)

26 
	#NVIC_PIOA_IRQ
 10

	)

27 
	#NVIC_PIOB_IRQ
 11

	)

28 
	#NVIC_PIOC_IRQ
 12

	)

29 
	#NVIC_USART0_IRQ
 13

	)

30 
	#NVIC_USART1_IRQ
 14

	)

31 
	#NVIC_USART2_IRQ
 15

	)

32 
	#NVIC_USART3_IRQ
 16

	)

33 
	#NVIC_HSMCI_IRQ
 17

	)

34 
	#NVIC_TWI0_IRQ
 18

	)

35 
	#NVIC_TWI1_IRQ
 19

	)

36 
	#NVIC_SPI_IRQ
 20

	)

37 
	#NVIC_SSC_IRQ
 21

	)

38 
	#NVIC_TC0_IRQ
 22

	)

39 
	#NVIC_TC1_IRQ
 23

	)

40 
	#NVIC_TC2_IRQ
 24

	)

41 
	#NVIC_PWM_IRQ
 25

	)

42 
	#NVIC_ADC12B_IRQ
 26

	)

43 
	#NVIC_ADC_IRQ
 27

	)

44 
	#NVIC_DMAC_IRQ
 28

	)

45 
	#NVIC_UDPHS_IRQ
 29

	)

47 
	#NVIC_IRQ_COUNT
 30

	)

56 
BEGIN_DECLS


58 
supc_i§
();

59 
r°c_i§
();

60 
πc_i§
();

61 
πt_i§
();

62 
wdt_i§
();

63 
pmc_i§
();

64 
ìfc0_i§
();

65 
ìfc1_i§
();

66 
u¨t_i§
();

67 
smc_i§
();

68 
piﬂ_i§
();

69 
piob_i§
();

70 
pioc_i§
();

71 
ußπ0_i§
();

72 
ußπ1_i§
();

73 
ußπ2_i§
();

74 
ußπ3_i§
();

75 
hsmci_i§
();

76 
twi0_i§
();

77 
twi1_i§
();

78 
•i_i§
();

79 
ssc_i§
();

80 
tc0_i§
();

81 
tc1_i§
();

82 
tc2_i§
();

83 
pwm_i§
();

84 
adc12b_i§
();

85 
adc_i§
();

86 
dmac_i§
();

87 
udphs_i§
();

89 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/3u/periph.h

20 #i‚de‡
LIBOPENCM3_PERIPH_H


21 
	#LIBOPENCM3_PERIPH_H


	)

24 
	#PERIPH_SUPC
 0

	)

25 
	#PERIPH_RSTC
 1

	)

26 
	#PERIPH_RTC
 2

	)

27 
	#PERIPH_RTT
 3

	)

28 
	#PERIPH_WDG
 4

	)

29 
	#PERIPH_PMC
 5

	)

30 
	#PERIPH_EEFC0
 6

	)

31 
	#PERIPH_EEFC1
 7

	)

32 
	#PERIPH_UART
 8

	)

33 
	#PERIPH_SMC
 9

	)

34 
	#PERIPH_PIOA
 10

	)

35 
	#PERIPH_PIOB
 11

	)

36 
	#PERIPH_PIOC
 12

	)

37 
	#PERIPH_USART0
 13

	)

38 
	#PERIPH_USART1
 14

	)

39 
	#PERIPH_USART2
 15

	)

40 
	#PERIPH_USART3
 16

	)

41 
	#PERIPH_HSMCI
 17

	)

42 
	#PERIPH_TWI0
 18

	)

43 
	#PERIPH_TWI1
 19

	)

44 
	#PERIPH_SPI
 20

	)

45 
	#PERIPH_SSC
 21

	)

46 
	#PERIPH_TC0
 22

	)

47 
	#PERIPH_TC1
 23

	)

48 
	#PERIPH_TC2
 24

	)

49 
	#PERIPH_PWM
 25

	)

50 
	#PERIPH_ADC12B
 26

	)

51 
	#PERIPH_ADC
 27

	)

52 
	#PERIPH_DMAC
 28

	)

53 
	#PERIPH_UDPHS
 29

	)

	@libopencm3/include/libopencm3/sam/3u/pio.h

20 #i‚de‡
LIBOPENCM3_PIO_H


21 
	#LIBOPENCM3_PIO_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/comm⁄/pio_comm⁄_3a3u3x.h
>

	@libopencm3/include/libopencm3/sam/3u/pmc.h

21 #i‚de‡
LIBOPENCM3_PMC_H


22 
	#LIBOPENCM3_PMC_H


	)

24 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

25 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_Æl.h
>

26 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_3n3u.h
>

27 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_3a3u3x.h
>

35 
	#CKGR_MOR_WAITMODE
 (0x01 << 2)

	)

	@libopencm3/include/libopencm3/sam/3x/gpio.h

20 #i‚de‡
LIBOPENCM3_GPIO_H


21 
	#LIBOPENCM3_GPIO_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/pio.h
>

25 
	~<lib›ícm3/ßm/comm⁄/gpio_comm⁄_3a3u3x.h
>

	@libopencm3/include/libopencm3/sam/3x/memorymap.h

20 #i‚de‡
SAM3X_MEMORYMAP_H


21 
	#SAM3X_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

27 
	#HSMCI_BASE
 (0x40000000U)

	)

28 
	#SSC_BASE
 (0x40004000U)

	)

29 
	#SPI0_BASE
 (0x40008000U)

	)

30 
	#SPI1_BASE
 (0x4000C000U)

	)

31 
	#TC0_BASE
 (0x40080000U)

	)

32 
	#TC1_BASE
 (0x40080040U)

	)

33 
	#TC2_BASE
 (0x40080080U)

	)

34 
	#TC3_BASE
 (0x40084000U)

	)

35 
	#TC4_BASE
 (0x40084040U)

	)

36 
	#TC5_BASE
 (0x40084080U)

	)

37 
	#TC6_BASE
 (0x40088000U)

	)

38 
	#TC7_BASE
 (0x40088040U)

	)

39 
	#TC8_BASE
 (0x40088080U)

	)

40 
	#TWI0_BASE
 (0x4008C000U)

	)

41 
	#TWI1_BASE
 (0x40090000U)

	)

42 
	#PWM_BASE
 (0x40094000U)

	)

43 
	#USART0_BASE
 (0x40098000U)

	)

44 
	#USART1_BASE
 (0x4009C000U)

	)

45 
	#USART2_BASE
 (0x400A0000U)

	)

46 
	#USART3_BASE
 (0x400A4000U)

	)

47 
	#UOTGHS_BASE
 (0x400AC000U)

	)

48 
	#EMAC_BASE
 (0x400B0000U)

	)

49 
	#CAN0_BASE
 (0x400B4000U)

	)

50 
	#CAN1_BASE
 (0x400B8000U)

	)

51 
	#TRNG_BASE
 (0x400BC000U)

	)

52 
	#ADC_BASE
 (0x400C0000U)

	)

53 
	#DMAC_BASE
 (0x400C4000U)

	)

54 
	#DACC_BASE
 (0x400C8000U)

	)

57 
	#SMC_BASE
 (0x400E0000U)

	)

58 
	#SDRAM_BASE
 (0x400E0200U)

	)

59 
	#MATRIX_BASE
 (0x400E0400U)

	)

60 
	#PMC_BASE
 (0x400E0600U)

	)

61 
	#UART_BASE
 (0x400E0800U)

	)

62 
	#CHIPID_BASE
 (0x400E0940U)

	)

63 
	#EEFC0_BASE
 (0x400E0A00U)

	)

64 
	#EEFC1_BASE
 (0x400E0C00U)

	)

65 
	#PIOA_BASE
 (0x400E0E00U)

	)

66 
	#PIOB_BASE
 (0x400E1000U)

	)

67 
	#PIOC_BASE
 (0x400E1200U)

	)

68 
	#PIOD_BASE
 (0x400E1400U)

	)

69 
	#PIOE_BASE
 (0x400E1600U)

	)

70 
	#PIOF_BASE
 (0x400E1800U)

	)

71 
	#RSTC_BASE
 (0x400E1A00U)

	)

72 
	#SUPC_BASE
 (0x400E1A10U)

	)

73 
	#RTT_BASE
 (0x400E1A30U)

	)

74 
	#WDT_BASE
 (0x400E1A50U)

	)

75 
	#RTC_BASE
 (0x400E1A60U)

	)

76 
	#GPBR_BASE
 (0x400E1A90U)

	)

	@libopencm3/include/libopencm3/sam/3x/nvic.h

6 #i‚de‡
LIBOPENCM3_SAM3X_NVIC_H


7 
	#LIBOPENCM3_SAM3X_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_SUPC_IRQ
 0

	)

17 
	#NVIC_RSTC_IRQ
 1

	)

18 
	#NVIC_RTC_IRQ
 2

	)

19 
	#NVIC_RTT_IRQ
 3

	)

20 
	#NVIC_WDT_IRQ
 4

	)

21 
	#NVIC_PMC_IRQ
 5

	)

22 
	#NVIC_EEFC0_IRQ
 6

	)

23 
	#NVIC_EEFC1_IRQ
 7

	)

24 
	#NVIC_UART_IRQ
 8

	)

25 
	#NVIC_SMC_SDRAMC_IRQ
 9

	)

26 
	#NVIC_SDRAMC_IRQ
 10

	)

27 
	#NVIC_PIOA_IRQ
 11

	)

28 
	#NVIC_PIOB_IRQ
 12

	)

29 
	#NVIC_PIOC_IRQ
 13

	)

30 
	#NVIC_PIOD_IRQ
 14

	)

31 
	#NVIC_PIOE_IRQ
 15

	)

32 
	#NVIC_PIOF_IRQ
 16

	)

33 
	#NVIC_USART0_IRQ
 17

	)

34 
	#NVIC_USART1_IRQ
 18

	)

35 
	#NVIC_USART2_IRQ
 19

	)

36 
	#NVIC_USART3_IRQ
 20

	)

37 
	#NVIC_HSMCI_IRQ
 21

	)

38 
	#NVIC_TWI0_IRQ
 22

	)

39 
	#NVIC_TWI1_IRQ
 23

	)

40 
	#NVIC_SPI0_IRQ
 24

	)

41 
	#NVIC_SPI1_IRQ
 25

	)

42 
	#NVIC_SSC_IRQ
 26

	)

43 
	#NVIC_TC0_IRQ
 27

	)

44 
	#NVIC_TC1_IRQ
 28

	)

45 
	#NVIC_TC2_IRQ
 29

	)

46 
	#NVIC_TC3_IRQ
 30

	)

47 
	#NVIC_TC4_IRQ
 31

	)

48 
	#NVIC_TC5_IRQ
 32

	)

49 
	#NVIC_TC6_IRQ
 33

	)

50 
	#NVIC_TC7_IRQ
 34

	)

51 
	#NVIC_TC8_IRQ
 35

	)

52 
	#NVIC_PWM_IRQ
 36

	)

53 
	#NVIC_ADC_IRQ
 37

	)

54 
	#NVIC_DACC_IRQ
 38

	)

55 
	#NVIC_DMAC_IRQ
 39

	)

56 
	#NVIC_UOTGHS_IRQ
 40

	)

57 
	#NVIC_TRNG_IRQ
 41

	)

58 
	#NVIC_EMAC_IRQ
 42

	)

59 
	#NVIC_CAN0_IRQ
 43

	)

60 
	#NVIC_CAN1_IRQ
 44

	)

62 
	#NVIC_IRQ_COUNT
 45

	)

71 
BEGIN_DECLS


73 
supc_i§
();

74 
r°c_i§
();

75 
πc_i§
();

76 
πt_i§
();

77 
wdt_i§
();

78 
pmc_i§
();

79 
ìfc0_i§
();

80 
ìfc1_i§
();

81 
u¨t_i§
();

82 
smc_sdømc_i§
();

83 
sdømc_i§
();

84 
piﬂ_i§
();

85 
piob_i§
();

86 
pioc_i§
();

87 
piod_i§
();

88 
pi€_i§
();

89 
piof_i§
();

90 
ußπ0_i§
();

91 
ußπ1_i§
();

92 
ußπ2_i§
();

93 
ußπ3_i§
();

94 
hsmci_i§
();

95 
twi0_i§
();

96 
twi1_i§
();

97 
•i0_i§
();

98 
•i1_i§
();

99 
ssc_i§
();

100 
tc0_i§
();

101 
tc1_i§
();

102 
tc2_i§
();

103 
tc3_i§
();

104 
tc4_i§
();

105 
tc5_i§
();

106 
tc6_i§
();

107 
tc7_i§
();

108 
tc8_i§
();

109 
pwm_i§
();

110 
adc_i§
();

111 
dacc_i§
();

112 
dmac_i§
();

113 
uŸghs_i§
();

114 
ång_i§
();

115 
emac_i§
();

116 
ˇn0_i§
();

117 
ˇn1_i§
();

119 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/3x/pio.h

20 #i‚de‡
LIBOPENCM3_PIO_H


21 
	#LIBOPENCM3_PIO_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

24 
	~<lib›ícm3/ßm/comm⁄/pio_comm⁄_3a3u3x.h
>

	@libopencm3/include/libopencm3/sam/3x/pmc.h

21 #i‚de‡
LIBOPENCM3_PMC_H


22 
	#LIBOPENCM3_PMC_H


	)

24 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

25 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_Æl.h
>

26 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_3a3s3x.h
>

27 
	~<lib›ícm3/ßm/comm⁄/pmc_comm⁄_3a3u3x.h
>

32 
	#PMC_PCR
 
	`MMIO32
(
PMC_BASE
 + 0x010C)

	)

41 
	#PMC_MCKR_PLLADIV2
 (0x01 << 12)

	)

47 
	#PMC_PCR_EN
 (0x01 << 28)

	)

50 
	#PMC_PCR_DIV_SHIFT
 16

	)

51 
	#PMC_PCR_DIV_MASK
 (0x03 << 
PMC_PCR_DIV_SHIFT
)

	)

52 
	#PMC_PCR_DIV_PERIPH_DIV_MCK
 (0x00 << 
PMC_PCR_DIV_SHIFT
)

	)

53 
	#PMC_PCR_DIV_PERIPH_DIV2_MCK
 (0x01 << 
PMC_PCR_DIV_SHIFT
)

	)

54 
	#PMC_PCR_DIV_PERIPH_DIV4_MCK
 (0x02 << 
PMC_PCR_DIV_SHIFT
)

	)

57 
	#PMC_PCR_CMD
 (0x01 << 12)

	)

60 
	#PMC_PCR_PID_SHIFT
 0

	)

61 
	#PMC_PCR_PID_MASK
 (0x3F << 
PMC_PCR_PID_SHIFT
)

	)

	@libopencm3/include/libopencm3/sam/4l/adcife.h

18 #i‚de‡
LIBOPENCM3_SAM4L_ADCIFE_H


19 
	#LIBOPENCM3_SAM4L_ADCIFE_H


	)

21 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

27 
	#ADCIFE_CR
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0000)

	)

30 
	#ADCIFE_CFG
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0004)

	)

33 
	#ADCIFE_SR
 
	`MMIO32
(
ADCIFE_BASE
 + 0x008)

	)

36 
	#ADCIFE_SCR
 
	`MMIO32
(
ADCIFE_BASE
 + 0x000C)

	)

39 
	#ADCIFE_SEQCFG
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0014)

	)

42 
	#ADCIFE_CDMA
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0018)

	)

45 
	#ADCIFE_TIM
 
	`MMIO32
(
ADCIFE_BASE
 + 0x001C)

	)

48 
	#ADCIFE_ITIMER
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0020)

	)

51 
	#ADCIFE_WCFG
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0024)

	)

54 
	#ADCIFE_WTH
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0028)

	)

57 
	#ADCIFE_LCV
 
	`MMIO32
(
ADCIFE_BASE
 + 0x002C)

	)

60 
	#ADCIFE_IER
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0030)

	)

63 
	#ADCIFE_IDR
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0034)

	)

66 
	#ADCIFE_IMR
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0038)

	)

69 
	#ADCIFE_CALIB
 
	`MMIO32
(
ADCIFE_BASE
 + 0x003C)

	)

72 
	#ADCIFE_VERSION
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0040)

	)

75 
	#ADCIFE_PARAMETER
 
	`MMIO32
(
ADCIFE_BASE
 + 0x0044)

	)

79 
	#ADCIFE_CR_SWRST
 (1 << 0)

	)

80 
	#ADCIFE_CR_TSTOP
 (1 << 1)

	)

81 
	#ADCIFE_CR_TSTART
 (1 << 2)

	)

82 
	#ADCIFE_CR_STRIG
 (1 << 3)

	)

83 
	#ADCIFE_CR_REFBUFEN
 (1 << 4)

	)

84 
	#ADCIFE_CR_REFBUFDIS
 (1 << 5)

	)

85 
	#ADCIFE_CR_EN
 (1 << 8)

	)

86 
	#ADCIFE_CR_DIS
 (1 << 9)

	)

87 
	#ADCIFE_CR_BGREQEN
 (1 << 10)

	)

88 
	#ADCIFE_CR_BGREQDIS
 (1 << 11)

	)

90 
	#_MASKED_VALUE
(
V
, 
S
, 
M
Ë(((VË<< (S)Ë& (M))

	)

92 
	#ADCIFE_CFG_REFSEL_SHIFT
 (1)

	)

93 
	#ADCIFE_CFG_REFSEL_MASK
 (7 << 
ADCIFE_CFG_REFSEL_SHIFT
)

	)

94 
	#ADCIFE_CFG_REFSEL_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
ADCIFE_CFG_REFSEL_SHIFT
, 
ADCIFE_CFG_REFSEL_MASK
)

	)

95 
	#ADCIFE_CFG_SPEED_SHIFT
 (4)

	)

96 
	#ADCIFE_CFG_SPEED_MASK
 (3 << 
ADCIFE_CFG_SPEED_SHIFT
)

	)

97 
	#ADCIFE_CFG_SPEED_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
ADCIFE_CFG_SPEED_SHIFT
, 
ADCIFE_CFG_SPEED_MASK
)

	)

98 
	#ADCIFE_CFG_CLKSEL
 (1 << 6)

	)

99 
	#ADCIFE_CFG_PRESCAL_SHIFT
 (8)

	)

100 
	#ADCIFE_CFG_PRESCAL_MASK
 (3 << 
ADCIFE_CFG_PRESCAL_SHIFT
)

	)

101 
	#ADCIFE_CFG_PRESCAL_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
ADCIFE_CFG_PRESCAL_SHIFT
, 
ADCIFE_CFG_PRESCAL_MASK
)

	)

103 
	#ADCIFE_SR_SEOC
 (1 << 0)

	)

104 
	#ADCIFE_SR_LOVR
 (1 << 1)

	)

105 
	#ADCIFE_SR_WM
 (1 << 2)

	)

106 
	#ADCIFE_SR_SMTRG
 (1 << 3)

	)

107 
	#ADCIFE_SR_TTO
 (1 << 5)

	)

108 
	#ADCIFE_SR_EN
 (1 << 24)

	)

109 
	#ADCIFE_SR_TBUSY
 (1 << 25)

	)

110 
	#ADCIFE_SR_SBUSY
 (1 << 26)

	)

111 
	#ADCIFE_SR_CBUSY
 (1 << 27)

	)

112 
	#ADCIFE_SR_REFBUF
 (1 << 28)

	)

113 
	#ADCIFE_SR_BGREQ
 (1 << 30)

	)

115 
	#ADCIFE_IR_SEOC
 (1 << 0)

	)

116 
	#ADCIFE_IR_LOVR
 (1 << 1)

	)

117 
	#ADCIFE_IR_WM
 (1 << 2)

	)

118 
	#ADCIFE_IR_SMTRG
 (1 << 3)

	)

119 
	#ADCIFE_IR_TTO
 (1 << 5)

	)

121 
	#ADCIFE_SEQCFG_HWLA
 (1 << 0)

	)

122 
	#ADCIFE_SEQCFG_BIPOLAR
 (1 << 2)

	)

123 
	#ADCIFE_SEQCFG_GAIN_SHIFT
 (4)

	)

124 
	#ADCIFE_SEQCFG_GAIN_MASK
 (7 << 
ADCIFE_SEQCFG_GAIN_SHIFT
)

	)

125 
	#ADCIFE_SEQCFG_GAIN_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
ADCIFE_SEQCFG_GAIN_SHIFT
, 
ADCIFE_SEQCFG_GAIN_MASK
)

	)

126 
	#ADCIFE_SEQCFG_GCOMP
 (1 << 7)

	)

127 
	#ADCIFE_SEQCFG_TRGSEL_SHIFT
 (8)

	)

128 
	#ADCIFE_SEQCFG_TRGSEL_MASK
 (7 << 
ADCIFE_SEQCFG_TRGSEL_SHIFT
)

	)

129 
	#ADCIFE_SEQCFG_TRGSEL_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
ADCIFE_SEQCFG_TRGSEL_SHIFT
, 
ADCIFE_SEQCFG_TRGSEL_MASK
)

	)

130 
	#ADCIFE_SEQCFG_RES
 (1 << 12)

	)

131 
	#ADCIFE_SEQCFG_INTERNAL_SHIFT
 (14)

	)

132 
	#ADCIFE_SEQCFG_INTERNAL_MASK
 (3 << 
ADCIFE_SEQCFG_INTERNAL_SHIFT
)

	)

133 
	#ADCIFE_SEQCFG_INTERNAL_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
ADCIFE_SEQCFG_INTERNAL_SHIFT
, 
ADCIFE_SEQCFG_INTERNAL_MASK
)

	)

134 
	#ADCIFE_SEQCFG_MUXPOS_SHIFT
 (16)

	)

135 
	#ADCIFE_SEQCFG_MUXPOS_MASK
 (0x‡<< 
ADCIFE_SEQCFG_MUXPOS_SHIFT
)

	)

136 
	#ADCIFE_SEQCFG_MUXPOS_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
ADCIFE_SEQCFG_MUXPOS_SHIFT
, 
ADCIFE_SEQCFG_MUXPOS_MASK
)

	)

137 
	#ADCIFE_SEQCFG_MUXNEG_SHIFT
 (20)

	)

138 
	#ADCIFE_SEQCFG_MUXNEG_MASK
 (7 << 
ADCIFE_SEQCFG_MUXNEG_SHIFT
)

	)

139 
	#ADCIFE_SEQCFG_MUXNEG_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
ADCIFE_SEQCFG_MUXNEG_SHIFT
, 
ADCIFE_SEQCFG_MUXNEG_MASK
)

	)

140 
	#ADCIFE_SEQCFG_ZOOMRANGE_SHIFT
 (28)

	)

141 
	#ADCIFE_SEQCFG_ZOOMRANGE_MASK
 (7 << 
ADCIFE_SEQCFG_ZOOMRANGE_SHIFT
)

	)

142 
	#ADCIFE_SEQCFG_ZOOMRANGE_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
ADCIFE_SEQCFG_ZOOMRANGE_SHIFT
, 
ADCIFE_SEQCFG_ZOOMRANGE_MASK
)

	)

145 
	eadci„_¥esˇl
 {

146 
	mADCIFE_PRESCAL_DIV4
,

147 
	mADCIFE_PRESCAL_DIV8
,

148 
	mADCIFE_PRESCAL_DIV16
,

149 
	mADCIFE_PRESCAL_DIV32
,

150 
	mADCIFE_PRESCAL_DIV64
,

151 
	mADCIFE_PRESCAL_DIV128
,

152 
	mADCIFE_PRESCAL_DIV256
,

153 
	mADCIFE_PRESCAL_DIV512
,

156 
	eadci„_•ìd
 {

157 
	mADCIFE_SPEED_300KSPS
,

158 
	mADCIFE_SPEED_225KSPS
,

159 
	mADCIFE_SPEED_150KSPS
,

160 
	mADCIFE_SPEED_75KSPS
,

163 
	eadci„_ªf£l
 {

164 
	mADCIFE_REFSEL_INTERNAL1V
,

165 
	mADCIFE_REFSEL_0_625xVCC
,

166 
	mADCIFE_REFSEL_EXTERNAL1
,

167 
	mADCIFE_REFSEL_EXTERNAL2
,

168 
	mADCIFE_REFSEL_HALF_VCC
,

171 
	eadci„_˛k
 {

172 
	mADCIFE_CLK_GENERIC
,

173 
	mADCIFE_CLK_APB
 = 
ADCIFE_CFG_CLKSEL
,

176 
	eadci„_ch™√l
 {

177 
	mADCIFE_CHANNEL_AD0
,

178 
	mADCIFE_CHANNEL_AD1
,

179 
	mADCIFE_CHANNEL_AD2
,

180 
	mADCIFE_CHANNEL_AD3
,

181 
	mADCIFE_CHANNEL_AD4
,

182 
	mADCIFE_CHANNEL_AD5
,

183 
	mADCIFE_CHANNEL_AD6
,

184 
	mADCIFE_CHANNEL_AD7
,

185 
	mADCIFE_CHANNEL_AD8
,

186 
	mADCIFE_CHANNEL_AD9
,

187 
	mADCIFE_CHANNEL_AD10
,

188 
	mADCIFE_CHANNEL_AD11
,

189 
	mADCIFE_CHANNEL_AD12
,

190 
	mADCIFE_CHANNEL_AD13
,

191 
	mADCIFE_CHANNEL_AD14
,

194 
	eadci„_ªsﬁuti⁄
 {

195 
	mADCIFE_RESOLUTION_12BITS
,

196 
	mADCIFE_RESOLUTION_8BITS
,

199 
	eadci„_åiggî
 {

200 
	mADCIFE_TRIGGER_SW
,

201 
	mADCIFE_TRIGGER_IADC_TMR
,

202 
	mADCIFE_TRIGGER_ITS
,

203 
	mADCIFE_TRIGGER_CONT
,

204 
	mADCIFE_TRIGGER_EXT_RIS
,

205 
	mADCIFE_TRIGGER_EXT_FALL
,

206 
	mADCIFE_TRIGGER_EXT_BOTH
,

209 
	eadci„_gaö
 {

210 
	mADCIFE_GAIN_1X
,

211 
	mADCIFE_GAIN_2X
,

212 
	mADCIFE_GAIN_4X
,

213 
	mADCIFE_GAIN_8X
,

214 
	mADCIFE_GAIN_16X
,

215 
	mADCIFE_GAIN_32X
,

216 
	mADCIFE_GAIN_64X
,

217 
	mADCIFE_GAIN_0_5X
,

220 
	sadci„_lcv
 {

222 
uöt32_t
 
	mlcv
;

224 
uöt16_t
 
	mvÆue
;

225 
uöt8_t
 
	mch™√l
;

226 
uöt8_t
 
	mª£rved
;

227 } 
	m_lc_s
;

228 } 
	m_lc_u
;

231 
	#lc_ch™√l
 
_lc_u
.
_lc_s
.
ch™√l


	)

232 
	#lc_vÆue
 
_lc_u
.
_lc_s
.
vÆue


	)

234 
BEGIN_DECLS


236 
adci„_íabÀ_sync
();

237 
adci„_c⁄figuª
(

238 
adci„_ªf£l
 
ªf
,

239 
adci„_•ìd
 
•ìd
,

240 
adci„_˛k
 
˛k
,

241 
adci„_¥esˇl
 
¥esˇl
);

242 
adci„_£À˘_ch™√l
(
adci„_ch™√l
 
ad
);

243 
adci„_£t_ªsﬁuti⁄
(
adci„_ªsﬁuti⁄
 
ªs
);

244 
adci„_£À˘_åiggî
(
adci„_åiggî
 
åig
);

245 
adci„_£t_gaö
(
adci„_gaö
 
gaö
);

246 
adci„_£t_bùﬁ¨
(
boﬁ
 
íabÀ
);

247 
adci„_£t_À·_adju°
(
boﬁ
 
íabÀ
);

248 
adci„_°¨t_c⁄vîsi⁄
();

249 
adci„_waô_c⁄vîsi⁄
();

250 
adci„_lcv
 
adci„_gë_lcv
();

251 
adci„_íabÀ_öãºu±s
(
uöt32_t
 
imask
);

252 
adci„_dißbÀ_öãºu±s
(
uöt32_t
 
imask
);

253 
adci„_timî_°¨t
();

254 
adci„_timî_°›
();

255 
adci„_timî_£t_timeout
(
uöt16_t
 
timeout
);

257 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/4l/gpio.h

18 #i‚de‡
LIBOPENCM3_GPIO_H


19 
	#LIBOPENCM3_GPIO_H


	)

21 
	~<lib›ícm3/cm3/comm⁄.h
>

22 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

23 
	~<lib›ícm3/ßm/comm⁄/gpio_comm⁄_Æl.h
>

25 
	#GPIOA
 (
GPIO_BASE
)

	)

26 
	#GPIOB
 (
GPIO_BASE
 + 0x200)

	)

27 
	#GPIOC
 (
GPIO_BASE
 + 0x400)

	)

29 
	#GPIO0
 (1 << 0)

	)

30 
	#GPIO1
 (1 << 1)

	)

31 
	#GPIO2
 (1 << 2)

	)

32 
	#GPIO3
 (1 << 3)

	)

33 
	#GPIO4
 (1 << 4)

	)

34 
	#GPIO5
 (1 << 5)

	)

35 
	#GPIO6
 (1 << 6)

	)

36 
	#GPIO7
 (1 << 7)

	)

37 
	#GPIO8
 (1 << 8)

	)

38 
	#GPIO9
 (1 << 9)

	)

39 
	#GPIO10
 (1 << 10)

	)

40 
	#GPIO11
 (1 << 11)

	)

41 
	#GPIO12
 (1 << 12)

	)

42 
	#GPIO13
 (1 << 13)

	)

43 
	#GPIO14
 (1 << 14)

	)

44 
	#GPIO15
 (1 << 15)

	)

45 
	#GPIO16
 (1 << 16)

	)

46 
	#GPIO17
 (1 << 17)

	)

47 
	#GPIO18
 (1 << 18)

	)

48 
	#GPIO19
 (1 << 19)

	)

49 
	#GPIO20
 (1 << 20)

	)

50 
	#GPIO21
 (1 << 21)

	)

51 
	#GPIO22
 (1 << 22)

	)

52 
	#GPIO23
 (1 << 23)

	)

53 
	#GPIO24
 (1 << 24)

	)

54 
	#GPIO25
 (1 << 25)

	)

55 
	#GPIO26
 (1 << 26)

	)

56 
	#GPIO27
 (1 << 27)

	)

57 
	#GPIO28
 (1 << 28)

	)

58 
	#GPIO29
 (1 << 29)

	)

59 
	#GPIO30
 (1 << 30)

	)

60 
	#GPIO31
 (1 << 31)

	)

63 
	#GPIO_GPER
(
X
Ë
	`MMIO32
(X)

	)

64 
	#GPIO_GPERS
(
X
Ë
	`MMIO32
((XË+ 0x004)

	)

65 
	#GPIO_GPERC
(
X
Ë
	`MMIO32
((XË+ 0x008)

	)

66 
	#GPIO_GPERT
(
X
Ë
	`MMIO32
((XË+ 0x00C)

	)

68 
	#GPIO_PMR
(
P
, 
I
Ë
	`MMIO32
((PË+ (0x10*(1 + (I))))

	)

69 
	#GPIO_PMR_SETVAL
(
P
, 
I
, 
S
Ë
	`MMIO32
((PË+ (0x10*(1 + (I)Ë+ ((SË? 0x04 : 0x08)))

	)

71 
	#GPIO_PMR0
(
X
Ë
	`MMIO32
((XË+ 0x010)

	)

72 
	#GPIO_PMR0S
(
X
Ë
	`MMIO32
((XË+ 0x014)

	)

73 
	#GPIO_PMR0C
(
X
Ë
	`MMIO32
((XË+ 0x018)

	)

74 
	#GPIO_PMR0T
(
X
Ë
	`MMIO32
((XË+ 0x01C)

	)

76 
	#GPIO_PMR1
(
X
Ë
	`MMIO32
((XË+ 0x020)

	)

77 
	#GPIO_PMR1S
(
X
Ë
	`MMIO32
((XË+ 0x024)

	)

78 
	#GPIO_PMR1C
(
X
Ë
	`MMIO32
((XË+ 0x028)

	)

79 
	#GPIO_PMR1T
(
X
Ë
	`MMIO32
((XË+ 0x02C)

	)

81 
	#GPIO_PMR2
(
X
Ë
	`MMIO32
((XË+ 0x030)

	)

82 
	#GPIO_PMR2S
(
X
Ë
	`MMIO32
((XË+ 0x034)

	)

83 
	#GPIO_PMR2C
(
X
Ë
	`MMIO32
((XË+ 0x038)

	)

84 
	#GPIO_PMR2T
(
X
Ë
	`MMIO32
((XË+ 0x03C)

	)

86 
	#GPIO_ODER
(
X
Ë
	`MMIO32
((XË+ 0x040)

	)

87 
	#GPIO_ODERS
(
X
Ë
	`MMIO32
((XË+ 0x044)

	)

88 
	#GPIO_ODERC
(
X
Ë
	`MMIO32
((XË+ 0x048)

	)

89 
	#GPIO_ODERT
(
X
Ë
	`MMIO32
((XË+ 0x04C)

	)

91 
	#GPIO_OVR
(
X
Ë
	`MMIO32
((XË+ 0x050)

	)

92 
	#GPIO_OVRS
(
X
Ë
	`MMIO32
((XË+ 0x054)

	)

93 
	#GPIO_OVRC
(
X
Ë
	`MMIO32
((XË+ 0x058)

	)

94 
	#GPIO_OVRT
(
X
Ë
	`MMIO32
((XË+ 0x05C)

	)

96 
	#GPIO_PVR
(
X
Ë
	`MMIO32
((XË+ 0x060)

	)

98 
	#GPIO_PUER
(
X
Ë
	`MMIO32
((XË+ 0x070)

	)

99 
	#GPIO_PUERS
(
X
Ë
	`MMIO32
((XË+ 0x074)

	)

100 
	#GPIO_PUERC
(
X
Ë
	`MMIO32
((XË+ 0x078)

	)

101 
	#GPIO_PUERT
(
X
Ë
	`MMIO32
((XË+ 0x07C)

	)

103 
	#GPIO_PDER
(
X
Ë
	`MMIO32
((XË+ 0x080)

	)

104 
	#GPIO_PDERS
(
X
Ë
	`MMIO32
((XË+ 0x084)

	)

105 
	#GPIO_PDERC
(
X
Ë
	`MMIO32
((XË+ 0x088)

	)

106 
	#GPIO_PDERT
(
X
Ë
	`MMIO32
((XË+ 0x08C)

	)

108 
	#GPIO_IER
(
X
Ë
	`MMIO32
((XË+ 0x090)

	)

109 
	#GPIO_IERS
(
X
Ë
	`MMIO32
((XË+ 0x094)

	)

110 
	#GPIO_IERC
(
X
Ë
	`MMIO32
((XË+ 0x098)

	)

111 
	#GPIO_IERT
(
X
Ë
	`MMIO32
((XË+ 0x09C)

	)

113 
	#GPIO_IMR0
(
X
Ë
	`MMIO32
((XË+ 0x0A0)

	)

114 
	#GPIO_IMR0S
(
X
Ë
	`MMIO32
((XË+ 0x0A4)

	)

115 
	#GPIO_IMR0C
(
X
Ë
	`MMIO32
((XË+ 0x0A8)

	)

116 
	#GPIO_IMR0T
(
X
Ë
	`MMIO32
((XË+ 0x0AC)

	)

118 
	#GPIO_IMR1
(
X
Ë
	`MMIO32
((XË+ 0x0B0)

	)

119 
	#GPIO_IMR1S
(
X
Ë
	`MMIO32
((XË+ 0x0B4)

	)

120 
	#GPIO_IMR1C
(
X
Ë
	`MMIO32
((XË+ 0x0B8)

	)

121 
	#GPIO_IMR1T
(
X
Ë
	`MMIO32
((XË+ 0x0BC)

	)

123 
	#GPIO_GFER
(
X
Ë
	`MMIO32
((XË+ 0x0C0)

	)

124 
	#GPIO_GFERS
(
X
Ë
	`MMIO32
((XË+ 0x0C4)

	)

125 
	#GPIO_GFERC
(
X
Ë
	`MMIO32
((XË+ 0x0C8)

	)

126 
	#GPIO_GFERT
(
X
Ë
	`MMIO32
((XË+ 0x0CC)

	)

128 
	#GPIO_IFR
(
X
Ë
	`MMIO32
((XË+ 0x0D0)

	)

129 
	#GPIO_IFRC
(
X
Ë
	`MMIO32
((XË+ 0x0D8)

	)

131 
	#GPIO_ODCR0
(
X
Ë
	`MMIO32
((XË+ 0x100)

	)

132 
	#GPIO_ODCR0S
(
X
Ë
	`MMIO32
((XË+ 0x104)

	)

133 
	#GPIO_ODCR0C
(
X
Ë
	`MMIO32
((XË+ 0x108)

	)

134 
	#GPIO_ODCR0T
(
X
Ë
	`MMIO32
((XË+ 0x10C)

	)

136 
	#GPIO_ODCR1
(
X
Ë
	`MMIO32
((XË+ 0x110)

	)

137 
	#GPIO_ODCR1S
(
X
Ë
	`MMIO32
((XË+ 0x114)

	)

138 
	#GPIO_ODCR1C
(
X
Ë
	`MMIO32
((XË+ 0x118)

	)

139 
	#GPIO_ODCR1T
(
X
Ë
	`MMIO32
((XË+ 0x11C)

	)

141 
	#GPIO_OSRR0
(
X
Ë
	`MMIO32
((XË+ 0x130)

	)

142 
	#GPIO_OSRR0S
(
X
Ë
	`MMIO32
((XË+ 0x134)

	)

143 
	#GPIO_OSRR0C
(
X
Ë
	`MMIO32
((XË+ 0x138)

	)

144 
	#GPIO_OSRR0T
(
X
Ë
	`MMIO32
((XË+ 0x13C)

	)

146 
	#GPIO_STER
(
X
Ë
	`MMIO32
((XË+ 0x160)

	)

147 
	#GPIO_STERS
(
X
Ë
	`MMIO32
((XË+ 0x164)

	)

148 
	#GPIO_STERC
(
X
Ë
	`MMIO32
((XË+ 0x168)

	)

149 
	#GPIO_STERT
(
X
Ë
	`MMIO32
((XË+ 0x16C)

	)

151 
	#GPIO_EVER
(
X
Ë
	`MMIO32
((XË+ 0x180)

	)

152 
	#GPIO_EVERS
(
X
Ë
	`MMIO32
((XË+ 0x184)

	)

153 
	#GPIO_EVERC
(
X
Ë
	`MMIO32
((XË+ 0x188)

	)

154 
	#GPIO_EVERT
(
X
Ë
	`MMIO32
((XË+ 0x18C)

	)

156 
	#GPIO_PARAMETER
(
X
Ë
	`MMIO32
((XË+ 0x1f8)

	)

157 
	#GPIO_VERSION
(
X
Ë
	`MMIO32
((XË+ 0x1fc)

	)

159 
	egpio_mode
 {

161 
	mGPIO_MODE_A
 = 0,

162 
	mGPIO_MODE_B
,

163 
	mGPIO_MODE_C
,

164 
	mGPIO_MODE_D
,

165 
	mGPIO_MODE_E
,

166 
	mGPIO_MODE_F
,

167 
	mGPIO_MODE_G
,

168 
	mGPIO_MODE_H
,

169 
	mGPIO_MODE_IN
,

170 
	mGPIO_MODE_OUT
,

173 
BEGIN_DECLS


175 
gpio_íabÀ
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
, 
gpio_mode
 
mode
);

176 
gpio_dißbÀ
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
);

178 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/4l/memorymap.h

18 #i‚de‡
SAM4L_MEMORYMAP_H


19 
	#SAM4L_MEMORYMAP_H


	)

21 
	~<lib›ícm3/cm3/comm⁄.h
>

23 
	#PERIPH_BASE
 (0x40000000U)

	)

26 
	#PERIPH_PBA_BASE
 
PERIPH_BASE


	)

28 
	#I2SC_BASE
 (
PERIPH_PBA_BASE
 + 0x04000)

	)

29 
	#SPI_BASE
 (
PERIPH_PBA_BASE
 + 0x08000)

	)

31 
	#TC0_BASE
 (
PERIPH_PBA_BASE
 + 0x10000)

	)

32 
	#TC1_BASE
 (
PERIPH_PBA_BASE
 + 0x14000)

	)

33 
	#TWIMS0_BASE
 (
PERIPH_PBA_BASE
 + 0x18000)

	)

34 
	#TWIMS1_BASE
 (
PERIPH_PBA_BASE
 + 0x1C000)

	)

36 
	#USART0_BASE
 (
PERIPH_PBA_BASE
 + 0x24000)

	)

37 
	#USART1_BASE
 (
PERIPH_PBA_BASE
 + 0x28000

	)

38 
	#USART2_BASE
 (
PERIPH_PBA_BASE
 + 0x2C000)

	)

39 
	#USART3_BASE
 (
PERIPH_PBA_BASE
 + 0x30000)

	)

41 
	#ADCIFE_BASE
 (
PERIPH_PBA_BASE
 + 0x38000)

	)

42 
	#DACC_BASE
 (
PERIPH_PBA_BASE
 + 0x3C000)

	)

43 
	#ACIFC_BASE
 (
PERIPH_PBA_BASE
 + 0x40000)

	)

45 
	#GLOC_BASE
 (
PERIPH_PBA_BASE
 + 0x60000)

	)

46 
	#ABDACB_BASE
 (
PERIPH_PBA_BASE
 + 0x64000)

	)

47 
	#TRNG_BASE
 (
PERIPH_PBA_BASE
 + 0x68000)

	)

48 
	#PARC_BASE
 (
PERIPH_PBA_BASE
 + 0x6C000)

	)

49 
	#CATB_BASE
 (
PERIPH_PBA_BASE
 + 0x70000)

	)

51 
	#TWIM2_BASE
 (
PERIPH_PBA_BASE
 + 0x78000)

	)

52 
	#TWIM3_BASE
 (
PERIPH_PBA_BASE
 + 0x7C000)

	)

53 
	#LCDCA_BASE
 (
PERIPH_PBA_BASE
 + 0x80000)

	)

56 
	#PERIPH_PBB_BASE
 (
PERIPH_BASE
 + 0xA0000U)

	)

57 
	#FLASHCALW_BASE
 (
PERIPH_PBB_BASE
)

	)

58 
	#PICOCACHE_BASE
 (
PERIPH_PBB_BASE
 + 0x400)

	)

59 
	#HMATRIX_BASE
 (
PERIPH_PBB_BASE
 + 0x1000)

	)

60 
	#PDCA_BASE
 (
PERIPH_PBB_BASE
 + 0x2000)

	)

61 
	#SMAP_BASE
 (
PERIPH_PBB_BASE
 + 0x3000)

	)

62 
	#CRCCU_BASE
 (
PERIPH_PBB_BASE
 + 0x4000)

	)

63 
	#USBC_BASE
 (
PERIPH_PBB_BASE
 + 0x5000)

	)

64 
	#PEVC_BASE
 (
PERIPH_PBB_BASE
 + 0x6000)

	)

67 
	#AESA_BASE
 (
PERIPH_BASE
 + 0xB0000)

	)

70 
	#PERIPH_PBC_BASE
 (
PERIPH_BASE
 + 0xE0000)

	)

71 
	#PM_BASE
 (
PERIPH_PBC_BASE
)

	)

72 
	#CHIPID_BASE
 (
PERIPH_PBC_BASE
 + 0x740)

	)

73 
	#SCIF_BASE
 (
PERIPH_PBC_BASE
 + 0x800)

	)

74 
	#FREQM_BASE
 (
PERIPH_PBC_BASE
 + 0xC00)

	)

75 
	#GPIO_BASE
 (
PERIPH_PBC_BASE
 + 0x1000)

	)

78 
	#PERIPH_PBD_BASE
 (
PERIPH_BASE
 + 0xF0000U)

	)

79 
	#BPM_BASE
 (
PERIPH_PBD_BASE
)

	)

80 
	#BSCIF_BASE
 (
PERIPH_PBD_BASE
 + 0x400)

	)

81 
	#AST_BASE
 (
PERIPH_PBD_BASE
 + 0x800)

	)

82 
	#WDT_BASE
 (
PERIPH_PBD_BASE
 + 0xC00)

	)

83 
	#EIC_BASE
 (
PERIPH_PBD_BASE
 + 0x1000)

	)

84 
	#PICOUART_BASE
 (
PERIPH_PBD_BASE
 + 0x1400)

	)

	@libopencm3/include/libopencm3/sam/4l/nvic.h

6 #i‚de‡
LIBOPENCM3_SAM4L_NVIC_H


7 
	#LIBOPENCM3_SAM4L_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_HFLASHC_IRQ
 0

	)

17 
	#NVIC_PDCA0_IRQ
 1

	)

18 
	#NVIC_PDCA1_IRQ
 2

	)

19 
	#NVIC_PDCA2_IRQ
 3

	)

20 
	#NVIC_PDCA3_IRQ
 4

	)

21 
	#NVIC_PDCA4_IRQ
 5

	)

22 
	#NVIC_PDCA5_IRQ
 6

	)

23 
	#NVIC_PDCA6_IRQ
 7

	)

24 
	#NVIC_PDCA7_IRQ
 8

	)

25 
	#NVIC_PDCA8_IRQ
 9

	)

26 
	#NVIC_PDCA9_IRQ
 10

	)

27 
	#NVIC_PDCA10_IRQ
 11

	)

28 
	#NVIC_PDCA11_IRQ
 12

	)

29 
	#NVIC_PDCA12_IRQ
 13

	)

30 
	#NVIC_PDCA13_IRQ
 14

	)

31 
	#NVIC_PDCA14_IRQ
 15

	)

32 
	#NVIC_PDCA15_IRQ
 16

	)

33 
	#NVIC_CRCCU_IRQ
 17

	)

34 
	#NVIC_USBC_IRQ
 18

	)

35 
	#NVIC_PEVC_TR_IRQ
 19

	)

36 
	#NVIC_PEVC_OV_IRQ
 20

	)

37 
	#NVIC_AESA_IRQ
 21

	)

38 
	#NVIC_PM_IRQ
 22

	)

39 
	#NVIC_SCIM_IRQ
 23

	)

40 
	#NVIC_FREQM_IRQ
 24

	)

41 
	#NVIC_GPIO0_IRQ
 25

	)

42 
	#NVIC_GPIO1_IRQ
 26

	)

43 
	#NVIC_GPIO2_IRQ
 27

	)

44 
	#NVIC_GPIO3_IRQ
 28

	)

45 
	#NVIC_GPIO4_IRQ
 29

	)

46 
	#NVIC_GPIO5_IRQ
 30

	)

47 
	#NVIC_GPIO6_IRQ
 31

	)

48 
	#NVIC_GPIO7_IRQ
 32

	)

49 
	#NVIC_GPIO8_IRQ
 33

	)

50 
	#NVIC_GPIO9_IRQ
 34

	)

51 
	#NVIC_GPIO10_IRQ
 35

	)

52 
	#NVIC_GPIO11_IRQ
 36

	)

53 
	#NVIC_BPM_IRQ
 37

	)

54 
	#NVIC_BSCIF_IRQ
 38

	)

55 
	#NVIC_AST_ALARM_IRQ
 39

	)

56 
	#NVIC_AST_PER_IRQ
 40

	)

57 
	#NVIC_AST_OVF_IRQ
 41

	)

58 
	#NVIC_AST_READY_IRQ
 42

	)

59 
	#NVIC_AST_CLKREADY_IRQ
 43

	)

60 
	#NVIC_WDT_IRQ
 44

	)

61 
	#NVIC_EIC1_IRQ
 45

	)

62 
	#NVIC_EIC2_IRQ
 46

	)

63 
	#NVIC_EIC3_IRQ
 47

	)

64 
	#NVIC_EIC4_IRQ
 48

	)

65 
	#NVIC_EIC5_IRQ
 49

	)

66 
	#NVIC_EIC6_IRQ
 50

	)

67 
	#NVIC_EIC7_IRQ
 51

	)

68 
	#NVIC_EIC8_IRQ
 52

	)

69 
	#NVIC_IISC_IRQ
 53

	)

70 
	#NVIC_SPI_IRQ
 54

	)

71 
	#NVIC_TC00_IRQ
 55

	)

72 
	#NVIC_TC01_IRQ
 56

	)

73 
	#NVIC_TC02_IRQ
 57

	)

74 
	#NVIC_TC10_IRQ
 58

	)

75 
	#NVIC_TC11_IRQ
 59

	)

76 
	#NVIC_TC12_IRQ
 60

	)

77 
	#NVIC_TWIM0_IRQ
 61

	)

78 
	#NVIC_TWIS0_IRQ
 62

	)

79 
	#NVIC_TWIM1_IRQ
 63

	)

80 
	#NVIC_TWIS1_IRQ
 64

	)

81 
	#NVIC_USART0_IRQ
 65

	)

82 
	#NVIC_USART1_IRQ
 66

	)

83 
	#NVIC_USART2_IRQ
 67

	)

84 
	#NVIC_USART3_IRQ
 68

	)

85 
	#NVIC_ADCIFE_IRQ
 69

	)

86 
	#NVIC_DACC_IRQ
 70

	)

87 
	#NVIC_ACIFC_IRQ
 71

	)

88 
	#NVIC_ABDACB_IRQ
 72

	)

89 
	#NVIC_TRNG_IRQ
 73

	)

90 
	#NVIC_PARC_IRQ
 74

	)

91 
	#NVIC_CATB_IRQ
 75

	)

92 
	#NVIC_RESERVED0_IRQ
 76

	)

93 
	#NVIC_TWIM2_IRQ
 77

	)

94 
	#NVIC_TWIM3_IRQ
 78

	)

95 
	#NVIC_LCDCA_IRQ
 79

	)

97 
	#NVIC_IRQ_COUNT
 80

	)

106 
BEGIN_DECLS


108 
hÊashc_i§
();

109 
pdˇ0_i§
();

110 
pdˇ1_i§
();

111 
pdˇ2_i§
();

112 
pdˇ3_i§
();

113 
pdˇ4_i§
();

114 
pdˇ5_i§
();

115 
pdˇ6_i§
();

116 
pdˇ7_i§
();

117 
pdˇ8_i§
();

118 
pdˇ9_i§
();

119 
pdˇ10_i§
();

120 
pdˇ11_i§
();

121 
pdˇ12_i§
();

122 
pdˇ13_i§
();

123 
pdˇ14_i§
();

124 
pdˇ15_i§
();

125 
¸ccu_i§
();

126 
usbc_i§
();

127 
≥vc_å_i§
();

128 
≥vc_ov_i§
();

129 
´ß_i§
();

130 
pm_i§
();

131 
scim_i§
();

132 
‰eqm_i§
();

133 
gpio0_i§
();

134 
gpio1_i§
();

135 
gpio2_i§
();

136 
gpio3_i§
();

137 
gpio4_i§
();

138 
gpio5_i§
();

139 
gpio6_i§
();

140 
gpio7_i§
();

141 
gpio8_i§
();

142 
gpio9_i§
();

143 
gpio10_i§
();

144 
gpio11_i§
();

145 
bpm_i§
();

146 
bscif_i§
();

147 
a°_Æ¨m_i§
();

148 
a°_≥r_i§
();

149 
a°_ovf_i§
();

150 
a°_ªady_i§
();

151 
a°_˛kªady_i§
();

152 
wdt_i§
();

153 
eic1_i§
();

154 
eic2_i§
();

155 
eic3_i§
();

156 
eic4_i§
();

157 
eic5_i§
();

158 
eic6_i§
();

159 
eic7_i§
();

160 
eic8_i§
();

161 
iisc_i§
();

162 
•i_i§
();

163 
tc00_i§
();

164 
tc01_i§
();

165 
tc02_i§
();

166 
tc10_i§
();

167 
tc11_i§
();

168 
tc12_i§
();

169 
twim0_i§
();

170 
twis0_i§
();

171 
twim1_i§
();

172 
twis1_i§
();

173 
ußπ0_i§
();

174 
ußπ1_i§
();

175 
ußπ2_i§
();

176 
ußπ3_i§
();

177 
adci„_i§
();

178 
dacc_i§
();

179 
acifc_i§
();

180 
abdacb_i§
();

181 
ång_i§
();

182 
∑rc_i§
();

183 
ˇtb_i§
();

184 
ª£rved0_i§
();

185 
twim2_i§
();

186 
twim3_i§
();

187 
lcdˇ_i§
();

189 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/4l/pm.h

18 #i‚de‡
LIBOPENCM3_PM_H


19 
	#LIBOPENCM3_PM_H


	)

21 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

26 
	#PM_MCCTRL
 
	`MMIO32
(
PM_BASE
 + 0x000)

	)

27 
	#PM_MCCTRL_KEY
 (
PM_UNLOCK_KEY
)

	)

30 
	#PM_CKSEL
(
I
Ë
	`MMIO32
(
PM_BASE
 + 0x004 + (0x004 * (I)))

	)

31 
	#PM_CKSEL_KEY
(
I
Ë(
PM_UNLOCK_KEY
 | (0x004 + (0x004 * (I))))

	)

33 
	#PM_MASK
(
I
Ë
	`MMIO32
(
PM_BASE
 + 0x020 + (0x004Ë* (I))

	)

34 
	#PM_MASK_KEY
(
I
Ë(
PM_UNLOCK_KEY
 | (0x020 + (0x004Ë* (I)))

	)

37 
	#PM_CPUMASK
 
	`MMIO32
(
PM_BASE
 + 0x020)

	)

40 
	#PM_HSBMASK
 
	`MMIO32
(
PM_BASE
 + 0x024)

	)

43 
	#PM_PBAMASK
 
	`MMIO32
(
PM_BASE
 + 0x028)

	)

44 
	#PM_PBAMASK_KEY
 (
PM_UNLOCK_KEY
 | 0x028)

	)

47 
	#PM_PBBMASK
 
	`MMIO32
(
PM_BASE
 + 0x02C)

	)

50 
	#PM_PBCMASK
 
	`MMIO32
(
PM_BASE
 + 0x030)

	)

53 
	#PM_PBDMASK
 
	`MMIO32
(
PM_BASE
 + 0x034)

	)

56 
	#PM_PBADIVMASK
 
	`MMIO32
(
PM_BASE
 + 0x040)

	)

57 
	#PM_PBADIVMASK_KEY
 (
PM_UNLOCK_KEY
 | 0x040)

	)

60 
	#PM_CFDCTRL
 
	`MMIO32
(
PM_BASE
 + 0x054)

	)

63 
	#PM_UNLOCK
 
	`MMIO32
(
PM_BASE
 + 0x058)

	)

64 
	#PM_UNLOCK_KEY
 (0xAA << 24)

	)

67 
	#PM_IER
 
	`MMIO32
(
PM_BASE
 + 0x0C0)

	)

70 
	#PM_IDR
 
	`MMIO32
(
PM_BASE
 + 0x0C4)

	)

73 
	#PM_IMR
 
	`MMIO32
(
PM_BASE
 + 0x0C8)

	)

76 
	#PM_ISR
 
	`MMIO32
(
PM_BASE
 + 0x0CC)

	)

79 
	#PM_ICR
 
	`MMIO32
(
PM_BASE
 + 0x0D0)

	)

82 
	#PM_SR
 
	`MMIO32
(
PM_BASE
 + 0x0D4)

	)

85 
	#PM_PPCR
 
	`MMIO32
(
PM_BASE
 + 0x160)

	)

88 
	#PM_RCAUSE
 
	`MMIO32
(
PM_BASE
 + 0x180)

	)

91 
	#PM_WCAUSE
 
	`MMIO32
(
PM_BASE
 + 0x184)

	)

94 
	#PM_AWEN
 
	`MMIO32
(
PM_BASE
 + 0x188)

	)

97 
	#PM_PROTCTRL
 
	`MMIO32
(
PM_BASE
 + 0x18C)

	)

100 
	#PM_FASTSLEEP
 
	`MMIO32
(
PM_BASE
 + 0x194)

	)

103 
	#PM_CONFIG
 
	`MMIO32
(
PM_BASE
 + 0x3F8)

	)

106 
	#PM_VERSION
 
	`MMIO32
(
PM_BASE
 + 0x3FC)

	)

110 
	#PM_MCCTRL_MCSEL_SHIFT
 0

	)

111 
	#PM_MCCTRL_MCSEL_MASK
 3

	)

114 
	#PM_CKSEL_DIV
 (1 << 7)

	)

115 
	#PM_CKSEL_MASK
 (3)

	)

117 
	#PM_CPUMASK_OSC
 (1 << 0)

	)

119 
	#PM_HSBMASK_PDCA
 (1 << 0)

	)

120 
	#PM_HSBMASK_FLASHCALW
 (1 << 1)

	)

121 
	#PM_HSBMASK_FLASHCALW_PICO
 (1 << 2)

	)

122 
	#PM_HSBMASK_USBC
 (1 << 3)

	)

123 
	#PM_HSBMASK_CRCCU
 (1 << 4)

	)

124 
	#PM_HSBMASK_APBA
 (1 << 5)

	)

125 
	#PM_HSBMASK_APBB
 (1 << 6)

	)

126 
	#PM_HSBMASK_APBC
 (1 << 7)

	)

127 
	#PM_HSBMASK_APBD
 (1 << 8)

	)

128 
	#PM_HSBMASK_AESA
 (1 << 9)

	)

130 
	#PM_PBAMASK_IISC
 (1 << 0)

	)

131 
	#PM_PBAMASK_SPI
 (1 << 1)

	)

132 
	#PM_PBAMASK_TC0
 (1 << 2)

	)

133 
	#PM_PBAMASK_TC1
 (1 << 3)

	)

134 
	#PM_PBAMASK_TWIM0
 (1 << 4)

	)

135 
	#PM_PBAMASK_TWIS0
 (1 << 5)

	)

136 
	#PM_PBAMASK_TWIM1
 (1 << 6)

	)

137 
	#PM_PBAMASK_TWIS1
 (1 << 7)

	)

138 
	#PM_PBAMASK_USART0
 (1 << 8)

	)

139 
	#PM_PBAMASK_USART1
 (1 << 9)

	)

140 
	#PM_PBAMASK_USART2
 (1 << 10)

	)

141 
	#PM_PBAMASK_USART3
 (1 << 11)

	)

142 
	#PM_PBAMASK_ADCIFE
 (1 << 12)

	)

143 
	#PM_PBAMASK_DACC
 (1 << 13)

	)

144 
	#PM_PBAMASK_ACIFC
 (1 << 14)

	)

145 
	#PM_PBAMASK_GLOC
 (1 << 15)

	)

146 
	#PM_PBAMASK_ABDACB
 (1 << 16)

	)

147 
	#PM_PBAMASK_TRNG
 (1 << 17)

	)

148 
	#PM_PBAMASK_PARC
 (1 << 18)

	)

149 
	#PM_PBAMASK_CATB
 (1 << 19)

	)

151 
	#PM_PBAMASK_TWIM2
 (1 << 21)

	)

152 
	#PM_PBAMASK_TWIM3
 (1 << 22)

	)

153 
	#PM_PBAMASK_LCDCA
 (1 << 23)

	)

155 
	#PM_PBBMASK_FLASHCALW
 (1 << 0)

	)

156 
	#PM_PBBMASK_HRAMC1
 (1 << 1)

	)

157 
	#PM_PBBMASK_HMATRIX
 (1 << 2)

	)

158 
	#PM_PBBMASK_PDCA
 (1 << 3)

	)

159 
	#PM_PBBMASK_CRCCU
 (1 << 4)

	)

160 
	#PM_PBBMASK_USBC
 (1 << 5)

	)

161 
	#PM_PBBMASK_PEVC
 (1 << 6)

	)

163 
	#PM_PBCMASK_PM
 (1 << 0)

	)

164 
	#PM_PBCMASK_CHIPID
 (1 << 1)

	)

165 
	#PM_PBCMASK_SCIF
 (1 << 2)

	)

166 
	#PM_PBCMASK_FREQM
 (1 << 3)

	)

167 
	#PM_PBCMASK_GPIO
 (1 << 4)

	)

169 
	#PM_PBDMASK_BPM
 (1 << 0)

	)

170 
	#PM_PBDMASK_BSCIF
 (1 << 1)

	)

171 
	#PM_PBDMASK_AST
 (1 << 2)

	)

172 
	#PM_PBDMASK_WDT
 (1 << 3)

	)

173 
	#PM_PBDMASK_EIC
 (1 << 4)

	)

174 
	#PM_PBDMASK_PICOUART
 (1 << 5)

	)

176 
	#PM_PBADIVMASK_TC2
 (1 << 0)

	)

177 
	#PM_PBADIVMASK_USART0
 (1 << 2)

	)

178 
	#PM_PBADIVMASK_USART1
 (1 << 2)

	)

179 
	#PM_PBADIVMASK_USART2
 (1 << 2)

	)

180 
	#PM_PBADIVMASK_USART3
 (1 << 2)

	)

181 
	#PM_PBADIVMASK_TC3
 (1 << 2)

	)

182 
	#PM_PBADIVMASK_TC4
 (1 << 4)

	)

183 
	#PM_PBADIVMASK_TC5
 (1 << 6)

	)

185 
	#PM_SR_CFD
 (1 << 0)

	)

186 
	#PM_SR_CKRDY
 (1 << 5)

	)

187 
	#PM_SR_WAKE
 (1 << 8)

	)

189 
	emck_§c
 {

190 
	mMCK_SRC_RCSYS
 = 0,

191 
	mMCK_SRC_OSC0
,

192 
	mMCK_SRC_PLL
,

193 
	mMCK_SRC_DFLL
,

194 
	mMCK_SRC_RC80M
,

195 
	mMCK_SRC_RCFAST
,

196 
	mMCK_SRC_RC1M
,

199 
	epm_ck£l
 {

200 
	mPM_CKSEL_CPU
 = 0,

201 
	mPM_CKSEL_PBA
 = 2,

202 
	mPM_CKSEL_PBB
,

203 
	mPM_CKSEL_PBC
,

204 
	mPM_CKSEL_PBD
,

212 
	epm_≥rùhîÆ
 {

213 
	mPM_PERIPHERAL_OCD
 = 0,

214 
	mPM_PERIPHERAL_PDCA
 = 32,

215 
	mPM_PERIPHERAL_FLASHCALW
,

216 
	mPM_PERIPHERAL_FLASHCALW_PICORAM
,

217 
	mPM_PERIPHERAL_USBC
,

218 
	mPM_PERIPHERAL_CRCCU
,

219 
	mPM_PERIPHERAL_APBA_BRIDGE
,

220 
	mPM_PERIPHERAL_APBB_BRIDGE
,

221 
	mPM_PERIPHERAL_APBC_BRIDGE
,

222 
	mPM_PERIPHERAL_APBD_BRIDGE
,

223 
	mPM_PERIPHERAL_AESA
,

224 
	mPM_PERIPHERAL_IISC
 = 64,

225 
	mPM_PERIPHERAL_SPI
,

226 
	mPM_PERIPHERAL_TC0
,

227 
	mPM_PERIPHERAL_TC1
,

228 
	mPM_PERIPHERAL_TWIM0
,

229 
	mPM_PERIPHERAL_TWIS0
,

230 
	mPM_PERIPHERAL_TWIM1
,

231 
	mPM_PERIPHERAL_TWIS1
,

232 
	mPM_PERIPHERAL_USART0
,

233 
	mPM_PERIPHERAL_USART1
,

234 
	mPM_PERIPHERAL_USART2
,

235 
	mPM_PERIPHERAL_USART3
,

236 
	mPM_PERIPHERAL_ADCIFE
,

237 
	mPM_PERIPHERAL_DACC
,

238 
	mPM_PERIPHERAL_ACIFC
,

239 
	mPM_PERIPHERAL_GLOC
,

240 
	mPM_PERIPHERAL_ABDACB
,

241 
	mPM_PERIPHERAL_TRNG
,

242 
	mPM_PERIPHERAL_PARC
,

243 
	mPM_PERIPHERAL_CATB
,

244 
	mPM_PERIPHERAL_RESERVED1
,

245 
	mPM_PERIPHERAL_TWIM2
,

246 
	mPM_PERIPHERAL_TWIM3
,

247 
	mPM_PERIPHERAL_LCDCA
,

248 
	mPM_PERIPHERAL_FLASHCALW_ALT
 = 96,

249 
	mPM_PERIPHERAL_HRAMC1
,

250 
	mPM_PERIPHERAL_HMATRIX
,

251 
	mPM_PERIPHERAL_PDCA_ALT
,

252 
	mPM_PERIPHERAL_CRCCU_ALT
,

253 
	mPM_PERIPHERAL_USBC_ALT
,

254 
	mPM_PERIPHERAL_PEVC
,

255 
	mPM_PERIPHERAL_PM
 = 128,

256 
	mPM_PERIPHERAL_CHIPID
,

257 
	mPM_PERIPHERAL_SCIF
,

258 
	mPM_PERIPHERAL_FREQM
,

259 
	mPM_PERIPHERAL_GPIO
,

260 
	mPM_PERIPHERAL_BPM
 = 160,

261 
	mPM_PERIPHERAL_BSCIF
,

262 
	mPM_PERIPHERAL_AST
,

263 
	mPM_PERIPHERAL_WDT
,

264 
	mPM_PERIPHERAL_EIC
,

265 
	mPM_PERIPHERAL_PICOUART
,

268 
BEGIN_DECLS


270 
pm_£À˘_maö_˛ock
(
mck_§c
 
sour˚_˛ock
);

271 
pm_íabÀ_˛ock_div
(
pm_ck£l
 
£l_èrgë
, 
uöt8_t
 
div
);

272 
pm_£t_divmask_˛ock
(
uöt8_t
 
mask
);

273 
pm_íabÀ_≥rùhîÆ_˛ock
(
pm_≥rùhîÆ
 
≥rùh
);

274 
pm_dißbÀ_≥rùhîÆ_˛ock
(
pm_≥rùhîÆ
 
≥rùh
);

276 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/4l/scif.h

18 #i‚de‡
LIBOPENCM3_SCIF_H


19 
	#LIBOPENCM3_SCIF_H


	)

21 
	~<lib›ícm3/cm3/comm⁄.h
>

22 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

27 
	#SCIF_IER
 
	`MMIO32
(
SCIF_BASE
)

	)

30 
	#SCIF_IDR
 
	`MMIO32
(
SCIF_BASE
 + 0x0004)

	)

33 
	#SCIF_IMR
 
	`MMIO32
(
SCIF_BASE
 + 0x0008)

	)

36 
	#SCIF_ISR
 
	`MMIO32
(
SCIF_BASE
 + 0x000C)

	)

39 
	#SCIF_ICR
 
	`MMIO32
(
SCIF_BASE
 + 0x0010)

	)

42 
	#SCIF_PCLKSR
 
	`MMIO32
(
SCIF_BASE
 + 0x0014)

	)

45 
	#SCIF_UNLOCK
 
	`MMIO32
(
SCIF_BASE
 + 0x0018)

	)

46 
	#SCIF_UNLOCK_KEY
 (0xØ << 24)

	)

49 
	#SCIF_CSCR
 
	`MMIO32
(
SCIF_BASE
 + 0x001C)

	)

52 
	#SCIF_OSCCTRL0
 
	`MMIO32
(
SCIF_BASE
 + 0x0020)

	)

53 
	#SCIF_OSCCTRL0_KEY
 (
SCIF_UNLOCK_KEY
 | 0x0020)

	)

56 
	#SCIF_PLL0
 
	`MMIO32
(
SCIF_BASE
 + 0x0024)

	)

57 
	#SCIF_PLL0_KEY
 (
SCIF_UNLOCK_KEY
 | 0x0024)

	)

60 
	#SCIF_DFLL0CONF
 
	`MMIO32
(
SCIF_BASE
 + 0x0028)

	)

63 
	#SCIF_DFLL0VAL
 
	`MMIO32
(
SCIF_BASE
 + 0x002C)

	)

66 
	#SCIF_DFLL0MUL
 
	`MMIO32
(
SCIF_BASE
 + 0x0030)

	)

69 
	#SCIF_DFLL0STEP
 
	`MMIO32
(
SCIF_BASE
 + 0x0034)

	)

72 
	#SCIF_DFLL0SSG
 
	`MMIO32
(
SCIF_BASE
 + 0x0038)

	)

75 
	#SCIF_DFLL0RATIO
 
	`MMIO32
(
SCIF_BASE
 + 0x003C)

	)

78 
	#SCIF_DFLL0SYNC
 
	`MMIO32
(
SCIF_BASE
 + 0x0040)

	)

81 
	#SCIF_RCCR
 
	`MMIO32
(
SCIF_BASE
 + 0x0044)

	)

84 
	#SCIF_RCFASTCFG
 
	`MMIO32
(
SCIF_BASE
 + 0x0048)

	)

87 
	#SCIF_RCFASTSR
 
	`MMIO32
(
SCIF_BASE
 + 0x004C)

	)

90 
	#SCIF_RC80MCR
 
	`MMIO32
(
SCIF_BASE
 + 0x0050)

	)

93 
	#SCIF_HPPCR
 
	`MMIO32
(
SCIF_BASE
 + 0x0064)

	)

96 
	#SCIF_FPCR
 
	`MMIO32
(
SCIF_BASE
 + 0x0068)

	)

99 
	#SCIF_FPMUL
 
	`MMIO32
(
SCIF_BASE
 + 0x006C)

	)

102 
	#SCIF_FPDIV
 
	`MMIO32
(
SCIF_BASE
 + 0x006C)

	)

105 
	#SCIF_GCCTRL0
 
	`MMIO32
(
SCIF_BASE
 + 0x0074)

	)

108 
	#SCIF_GCCTRL1
 
	`MMIO32
(
SCIF_BASE
 + 0x0078)

	)

111 
	#SCIF_GCCTRL2
 
	`MMIO32
(
SCIF_BASE
 + 0x007C)

	)

114 
	#SCIF_GCCTRL3
 
	`MMIO32
(
SCIF_BASE
 + 0x0080)

	)

117 
	#SCIF_GCCTRL4
 
	`MMIO32
(
SCIF_BASE
 + 0x0084)

	)

120 
	#SCIF_GCCTRL5
 
	`MMIO32
(
SCIF_BASE
 + 0x0088)

	)

123 
	#SCIF_GCCTRL6
 
	`MMIO32
(
SCIF_BASE
 + 0x008C)

	)

126 
	#SCIF_GCCTRL7
 
	`MMIO32
(
SCIF_BASE
 + 0x0090)

	)

129 
	#SCIF_GCCTRL8
 
	`MMIO32
(
SCIF_BASE
 + 0x0094)

	)

132 
	#SCIF_GCCTRL9
 
	`MMIO32
(
SCIF_BASE
 + 0x0098)

	)

135 
	#SCIF_GCCTRL10
 
	`MMIO32
(
SCIF_BASE
 + 0x009C)

	)

138 
	#SCIF_GCCTRL11
 
	`MMIO32
(
SCIF_BASE
 + 0x00A0)

	)

140 
	#SCIF_GCTRL
(
N
Ë
	`MMIO32
(
SCIF_BASE
 + 0x0074 + 0x0004 * (N))

	)

141 
	#SCIF_GCLK_MAX_NUM
 11

	)

144 
	#SCIF_RCFASTVERSION
 
	`MMIO32
(
SCIF_BASE
 + 0x03D8)

	)

147 
	#SCIF_GCLKPRESCVERSION
 
	`MMIO32
(
SCIF_BASE
 + 0x03DC)

	)

150 
	#SCIF_PLLIFAVERSION
 
	`MMIO32
(
SCIF_BASE
 + 0x03E0)

	)

153 
	#SCIF_OSCIFAVERSION
 
	`MMIO32
(
SCIF_BASE
 + 0x03E4)

	)

156 
	#SCIF_DFLLIFBVERSION
 
	`MMIO32
(
SCIF_BASE
 + 0x03E8)

	)

159 
	#SCIF_RCOSCIFAVERSION
 
	`MMIO32
(
SCIF_BASE
 + 0x03EC)

	)

162 
	#SCIF_RC80MVERSION
 
	`MMIO32
(
SCIF_BASE
 + 0x03F4)

	)

165 
	#SCIF_GCLKVERSION
 
	`MMIO32
(
SCIF_BASE
 + 0x03F8)

	)

168 
	#SCIF_VERSION
 
	`MMIO32
(
SCIF_BASE
 + 0x03FC)

	)

175 
	#SCIF_OSC0RDY
 (1 << 0)

	)

176 
	#SCIF_DFLL0LOCKC
 (1 << 1)

	)

177 
	#SCIF_DFLL0LOCKF
 (1 << 2)

	)

178 
	#SCIF_DFLL0RDY
 (1 << 3)

	)

179 
	#SCIF_DFLL0RCS
 (1 << 4)

	)

180 
	#SCIF_PLL0LOCK
 (1 << 6)

	)

181 
	#SCIF_PLL0LOCKLOST
 (1 << 7)

	)

182 
	#SCIF_RCFASTLOCK
 (1 << 13)

	)

183 
	#SCIF_RCFASTLOCKLOST
 (1 << 14)

	)

185 
	#SCIF_OSCCTRL_MODE
 (1 << 0)

	)

186 
	#SCIF_OSCCTRL_GAIN_SHIFT
 1

	)

187 
	#SCIF_OSCCTRL_GAIN_MASK
 (3 << 
SCIF_OSCCTRL_GAIN_SHIFT
)

	)

188 
	#SCIF_OSCCTRL_AGC
 (1 << 3)

	)

189 
	#SCIF_OSCCTRL_STARTUP_SHIFT
 8

	)

190 
	#SCIF_OSCCTRL_STARTUP_MASK
 (0x‡<< 
SCIF_OSCCTRL_STARTUP_SHIFT
)

	)

191 
	#SCIF_OSCCTRL_OSCEN
 (1 << 16)

	)

193 
	#_MASKED_VALUE
(
V
, 
S
, 
M
Ë(((VË<< (S)Ë& (M))

	)

195 
	#SCIF_PLL0_PLLEN
 (1 << 0)

	)

196 
	#SCIF_PLL0_PLLOSC_SHIFT
 1

	)

197 
	#SCIF_PLL0_PLLOSC_MASK
 (3 << 
SCIF_PLL0_PLLOSC_SHIFT
)

	)

198 
	#SCIF_PLL0_PLLOSC_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
SCIF_PLL0_PLLOSC_SHIFT
, 
SCIF_PLL0_PLLOSC_MASK
)

	)

200 
	#SCIF_PLL0_PLLOPT_SHIFT
 3

	)

201 
	#SCIF_PLL0_PLLOPT_MASK
 (7 << 
SCIF_PLL0_PLLOPT_SHIFT
)

	)

202 
	#SCIF_PLL0_PLLOPT_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
SCIF_PLL0_PLLOPT_SHIFT
, 
SCIF_PLL0_PLLOPT_MASK
)

	)

204 
	#SCIF_PLL0_PLLDIV_SHIFT
 8

	)

205 
	#SCIF_PLL0_PLLDIV_MASK
 (0x‡<< 
SCIF_PLL0_PLLDIV_SHIFT
)

	)

206 
	#SCIF_PLL0_PLLDIV_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
SCIF_PLL0_PLLDIV_SHIFT
, 
SCIF_PLL0_PLLDIV_MASK
)

	)

208 
	#SCIF_PLL0_PLLMUL_SHIFT
 16

	)

209 
	#SCIF_PLL0_PLLMUL_MASK
 (0x‡<< 
SCIF_PLL0_PLLMUL_SHIFT
)

	)

210 
	#SCIF_PLL0_PLLMUL_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
SCIF_PLL0_PLLMUL_SHIFT
, 
SCIF_PLL0_PLLMUL_MASK
)

	)

212 
	#SCIF_PLL0_PLLCOUNT_SHIFT
 24

	)

213 
	#SCIF_PLL0_PLLCOUNT_MASK
 (0x3‡<< 
SCIF_PLL0_PLLCOUNT_SHIFT
)

	)

214 
	#SCIF_PLL0_PLLCOUNT_MASKED
(
V
Ë
	`_MASKED_VALUE
((V), 
SCIF_PLL0_PLLCOUNT_SHIFT
, 
SCIF_PLL0_PLLCOUNT_MASK
)

	)

217 
	#SCIF_GCCTRL_CEN
 (1 << 0)

	)

218 
	#SCIF_GCCTRL_DIVEN
 (1 << 1)

	)

219 
	#SCIF_GCCTRL_OSCSEL_SHIFT
 8

	)

220 
	#SCIF_GCCTRL_OSCSEL_MASK
 (0x1‡<< 
SCIF_GCCTRL_OSCSEL_SHIFT
)

	)

221 
	#SCIF_GCCTRL_OSCSEL_MASKED
(
V
Ë
	`_MASKED_VALUE
(V, 
SCIF_GCCTRL_OSCSEL_SHIFT
, 
SCIF_GCCTRL_OSCSEL_MASK
)

	)

222 
	#SCIF_GCCTRL_DIV_SHIFT
 16

	)

223 
	#SCIF_GCCTRL_DIV_MASK
 (0xfff‡<< 
SCIF_GCCTRL_DIV_SHIFT
)

	)

224 
	#SCIF_GCCTRL_DIV_MASKED
(
V
Ë
	`_MASKED_VALUE
(V, 
SCIF_GCCTRL_DIV_SHIFT
, 
SCIF_GCCTRL_DIV_MASK
)

	)

227 
	eosc_mode
 {

228 
	mOSC_MODE_XIN
 = 0,

229 
	mOSC_MODE_XIN_XOUT
,

232 
	eosc_°¨tup
 {

233 
	mOSC_STARTUP_0
 = 0,

234 
	mOSC_STARTUP_4
 = 8,

235 
	mOSC_STARTUP_8
 = 9,

236 
	mOSC_STARTUP_16
 = 10,

237 
	mOSC_STARTUP_32
 = 11,

238 
	mOSC_STARTUP_64
 = 1,

239 
	mOSC_STARTUP_128
 = 2,

240 
	mOSC_STARTUP_256
 = 12,

241 
	mOSC_STARTUP_512
 = 13,

242 
	mOSC_STARTUP_1K
 = 14,

243 
	mOSC_STARTUP_2K
 = 3,

244 
	mOSC_STARTUP_4K
 = 4,

245 
	mOSC_STARTUP_8K
 = 5,

246 
	mOSC_STARTUP_16K
 = 6,

247 
	mOSC_STARTUP_32K
 = 7,

250 
	e∂l_˛k_§c
 {

251 
	mPLL_CLK_SRC_OSC0
 = 0,

252 
	mPLL_CLK_SRC_GCLK9
,

278 
	eg˛k_§c
 {

279 
	mGCLK_SRC_RCSYS
,

280 
	mGCLK_SRC_OSC32K
,

281 
	mGCLK_SRC_DFLL0
,

282 
	mGCLK_SRC_OSC0
,

283 
	mGCLK_SRC_RC80M
,

284 
	mGCLK_SRC_RCFAST
,

285 
	mGCLK_SRC_RC1M
,

286 
	mGCLK_SRC_CLK_CPU
,

287 
	mGCLK_SRC_CLK_HSB
,

288 
	mGCLK_SRC_CLK_PBA
,

289 
	mGCLK_SRC_CLK_PBB
,

290 
	mGCLK_SRC_CLK_PBC
,

291 
	mGCLK_SRC_CLK_PBD
,

292 
	mGCLK_SRC_RC32K
,

293 
	mGCLK_SRC_RESERVED_
,

294 
	mGCLK_SRC_CLK_1K
,

295 
	mGCLK_SRC_PLL0
,

296 
	mGCLK_SRC_HRP
,

297 
	mGCLK_SRC_FP
,

298 
	mGCLK_SRC_GCLK_IN0
,

299 
	mGCLK_SRC_GCLK_IN1
,

300 
	mGCLK_SRC_GCLK11
,

303 
	egíîic_˛ock
 {

304 
	mGENERIC_CLOCK0
,

305 
	mGENERIC_CLOCK1
,

306 
	mGENERIC_CLOCK2
,

307 
	mGENERIC_CLOCK3
,

308 
	mGENERIC_CLOCK4
,

309 
	mGENERIC_CLOCK5
,

310 
	mGENERIC_CLOCK6
,

311 
	mGENERIC_CLOCK7
,

312 
	mGENERIC_CLOCK8
,

313 
	mGENERIC_CLOCK9
,

314 
	mGENERIC_CLOCK10
,

315 
	mGENERIC_CLOCK_ADCIFE
 = 
GENERIC_CLOCK10
,

316 
	mGENERIC_CLOCK11
,

319 
BEGIN_DECLS


321 
scif_osc_íabÀ
(
osc_mode
 
mode
, 
uöt32_t
 
‰eq
, 
osc_°¨tup
 
°¨tup
);

322 
scif_íabÀ_∂l
(
uöt8_t
 
dñay
, uöt8_à
mul
, uöt8_à
div
, uöt8_à
∂l_›t
, 
∂l_˛k_§c
 
sour˚_˛ock
);

323 
scif_íabÀ_g˛k
(
gíîic_˛ock
 
g˛k
, 
g˛k_§c
 
sour˚_˛ock
, 
uöt16_t
 
div
);

325 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/adcife.h

18 #i‚de‡
SAM_ADCIFE_H


19 
	#SAM_ADCIFE_H


	)

21 #i‡
deföed
(
SAM4L
)

22 
	~<lib›ícm3/ßm/4l/adci„.h
>

	@libopencm3/include/libopencm3/sam/common/gpio_common_3a3u3x.h

25 #i‡
deföed
(
LIBOPENCM3_GPIO_H
)

27 #i‚de‡
LIBOPENCM3_GPIO_COMMON_3A3U3X_H


28 
	#LIBOPENCM3_GPIO_COMMON_3A3U3X_H


	)

30 
	~<lib›ícm3/ßm/comm⁄/gpio_comm⁄_Æl.h
>

35 
	egpio_Êags
 {

36 
	mGPIO_FLAG_GPINPUT
 = 0,

37 
	mGPIO_FLAG_GPOUTPUT
 = 1,

38 
	mGPIO_FLAG_PERIPHA
 = 2,

39 
	mGPIO_FLAG_PERIPHB
 = 3,

40 
	mGPIO_FLAG_OPEN_DRAIN
 = (1 << 3),

41 
	mGPIO_FLAG_PULL_UP
 = (1 << 4),

45 
gpio_öô
(
uöt32_t
 
gpi›‹t
, uöt32_à
pös
, 
gpio_Êags
 
Êags
);

	@libopencm3/include/libopencm3/sam/common/gpio_common_3n3s.h

25 #i‡
deföed
(
LIBOPENCM3_GPIO_H
)

27 #i‚de‡
LIBOPENCM3_GPIO_COMMON_3N3S_H


28 
	#LIBOPENCM3_GPIO_COMMON_3N3S_H


	)

30 
	~<lib›ícm3/ßm/comm⁄/gpio_comm⁄_Æl.h
>

35 
	egpio_Êags
 {

36 
	mGPIO_FLAG_GPINPUT
 = 0,

37 
	mGPIO_FLAG_GPOUTPUT
 = 1,

38 
	mGPIO_FLAG_PERIPHA
 = 2,

39 
	mGPIO_FLAG_PERIPHB
 = 3,

40 
	mGPIO_FLAG_PERIPHC
 = 4,

41 
	mGPIO_FLAG_PERIPHD
 = 5,

42 
	mGPIO_FLAG_OPEN_DRAIN
 = (1 << 3),

43 
	mGPIO_FLAG_PULL_UP
 = (1 << 4),

47 
gpio_öô
(
uöt32_t
 
gpi›‹t
, uöt32_à
pös
, 
gpio_Êags
 
Êags
);

	@libopencm3/include/libopencm3/sam/common/gpio_common_all.h

25 #i‡
deföed
(
LIBOPENCM3_GPIO_H
)

27 #i‚de‡
LIBOPENCM3_GPIO_COMMON_ALL_H


28 
	#LIBOPENCM3_GPIO_COMMON_ALL_H


	)

30 
	~<lib›ícm3/cm3/comm⁄.h
>

32 
BEGIN_DECLS


34 
gpio_£t
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
);

35 
gpio_˛ór
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
);

36 
gpio_toggÀ
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
);

38 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/common/periph_common_3a3x.h

20 #i‚de‡
LIBOPENCM3_PERIPH_H


21 
	#LIBOPENCM3_PERIPH_H


	)

24 
	#PERIPH_SUPC
 0

	)

25 
	#PERIPH_RSTC
 1

	)

26 
	#PERIPH_RTC
 2

	)

27 
	#PERIPH_RTT
 3

	)

28 
	#PERIPH_WDG
 4

	)

29 
	#PERIPH_PMC
 5

	)

30 
	#PERIPH_EEFC0
 6

	)

31 
	#PERIPH_EEFC1
 7

	)

32 
	#PERIPH_UART
 8

	)

33 
	#PERIPH_SMC_SDRAMC
 9

	)

34 
	#PERIPH_SDRAMC
 10

	)

35 
	#PERIPH_PIOA
 11

	)

36 
	#PERIPH_PIOB
 12

	)

37 
	#PERIPH_PIOC
 13

	)

38 
	#PERIPH_PIOD
 14

	)

39 
	#PERIPH_PIOE
 15

	)

40 
	#PERIPH_PIOF
 16

	)

41 
	#PERIPH_USART0
 17

	)

42 
	#PERIPH_USART1
 18

	)

43 
	#PERIPH_USART2
 19

	)

44 
	#PERIPH_USART3
 20

	)

45 
	#PERIPH_HSMCI
 21

	)

46 
	#PERIPH_TWI0
 22

	)

47 
	#PERIPH_TWI1
 23

	)

48 
	#PERIPH_SPI0
 24

	)

49 
	#PERIPH_SPI1
 25

	)

50 
	#PERIPH_SSC
 26

	)

51 
	#PERIPH_TC0
 27

	)

52 
	#PERIPH_TC1
 28

	)

53 
	#PERIPH_TC2
 29

	)

54 
	#PERIPH_TC3
 30

	)

55 
	#PERIPH_TC4
 31

	)

56 
	#PERIPH_TC5
 32

	)

57 
	#PERIPH_TC6
 33

	)

58 
	#PERIPH_TC7
 34

	)

59 
	#PERIPH_TC8
 35

	)

60 
	#PERIPH_PWM
 36

	)

61 
	#PERIPH_ADC
 37

	)

62 
	#PERIPH_DACC
 38

	)

63 
	#PERIPH_DMAC
 39

	)

64 
	#PERIPH_UOTGHS
 40

	)

65 
	#PERIPH_TRNG
 41

	)

66 
	#PERIPH_EMAC
 42

	)

67 
	#PERIPH_CAN0
 43

	)

68 
	#PERIPH_CAN1
 44

	)

	@libopencm3/include/libopencm3/sam/common/pio_common_3a3u3x.h

24 #i‡
deföed
(
LIBOPENCM3_PIO_H
)

26 #i‚de‡
LIBOPENCM3_PIO_COMMON_3A3U3X_H


27 
	#LIBOPENCM3_PIO_COMMON_3A3U3X_H


	)

29 
	~<lib›ícm3/ßm/comm⁄/pio_comm⁄_Æl.h
>

34 
	#PIO_ABSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0070)

	)

37 
	#PIO_SCIFSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0080)

	)

40 
	#PIO_DIFSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0084)

	)

43 
	#PIO_IFDGSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0088)

	)

	@libopencm3/include/libopencm3/sam/common/pio_common_3n3s.h

24 #i‡
deföed
(
LIBOPENCM3_PIO_H
)

26 #i‚de‡
LIBOPENCM3_PIO_COMMON_3N3S_H


27 
	#LIBOPENCM3_PIO_COMMON_3N3S_H


	)

29 
	~<lib›ícm3/ßm/comm⁄/pio_comm⁄_Æl.h
>

34 
	#PIO_ABCDSR1
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0070)

	)

37 
	#PIO_ABCDSR2
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0074)

	)

40 
	#PIO_IFSCDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0080)

	)

43 
	#PIO_IFSCER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0084)

	)

46 
	#PIO_IFSCSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0088)

	)

49 
	#PIO_PPDDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0090)

	)

52 
	#PIO_PPDER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0094)

	)

55 
	#PIO_PPDSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0098)

	)

58 
	#PIO_SCHMITT
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0100)

	)

	@libopencm3/include/libopencm3/sam/common/pio_common_all.h

25 #i‡
deföed
(
LIBOPENCM3_PIO_H
)

27 #i‚de‡
LIBOPENCM3_PIO_COMMON_ALL_H


28 
	#LIBOPENCM3_PIO_COMMON_ALL_H


	)

30 
	~<lib›ícm3/cm3/comm⁄.h
>

35 
	#PIOA
 
PIOA_BASE


	)

36 
	#PIOB
 
PIOB_BASE


	)

37 
	#PIOC
 
PIOC_BASE


	)

38 
	#PIOD
 
PIOD_BASE


	)

39 
	#PIOE
 
PIOE_BASE


	)

40 
	#PIOF
 
PIOF_BASE


	)

41 
	#PIOG
 
PIOG_BASE


	)

42 
	#PIOH
 
PIOH_BASE


	)

47 
	#PIO_PER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0000)

	)

50 
	#PIO_PDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0004)

	)

53 
	#PIO_PSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0008)

	)

56 
	#PIO_OER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0010)

	)

59 
	#PIO_ODR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0014)

	)

62 
	#PIO_OSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0018)

	)

65 
	#PIO_IFER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0020)

	)

68 
	#PIO_IFDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0024)

	)

71 
	#PIO_IFSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0028)

	)

74 
	#PIO_SODR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0030)

	)

77 
	#PIO_CODR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0034)

	)

80 
	#PIO_ODSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0038)

	)

83 
	#PIO_PDSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x003C)

	)

86 
	#PIO_IER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0040)

	)

89 
	#PIO_IDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0044)

	)

92 
	#PIO_IMR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0048)

	)

95 
	#PIO_ISR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x004C)

	)

98 
	#PIO_MDER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0050)

	)

101 
	#PIO_MDDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0054)

	)

104 
	#PIO_MDSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0058)

	)

107 
	#PIO_PUDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0060)

	)

110 
	#PIO_PUER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0064)

	)

113 
	#PIO_PUSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0068)

	)

116 
	#PIO_SCDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x008C)

	)

119 
	#PIO_OWER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00A0)

	)

122 
	#PIO_OWDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00A4)

	)

125 
	#PIO_OWSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00A8)

	)

128 
	#PIO_AIMER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00B0)

	)

131 
	#PIO_AIMDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00B4)

	)

134 
	#PIO_AIMMR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00B8)

	)

137 
	#PIO_ESR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00C0)

	)

140 
	#PIO_LSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00C4)

	)

143 
	#PIO_ELSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00C8)

	)

146 
	#PIO_FELLSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00D0)

	)

149 
	#PIO_REHLSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00D4)

	)

152 
	#PIO_FRLHSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00D8)

	)

155 
	#PIO_LOCKSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00E0)

	)

158 
	#PIO_WPMR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00E4)

	)

161 
	#PIO_WPSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00E8)

	)

	@libopencm3/include/libopencm3/sam/common/pmc_common_3a3s3x.h

21 #i‡
deföed
(
LIBOPENCM3_PMC_H
)

23 #i‚de‡
LIBOPENCM3_PMC_COMMON_3A3S3X_H


24 
	#LIBOPENCM3_PMC_COMMON_3A3S3X_H


	)

30 
	#PMC_PCER0
 
	`MMIO32
(
PMC_BASE
 + 0x0010)

	)

33 
	#PMC_PCDR0
 
	`MMIO32
(
PMC_BASE
 + 0x0014)

	)

36 
	#PMC_PCSR0
 
	`MMIO32
(
PMC_BASE
 + 0x0018)

	)

39 
	#PMC_USB
 
	`MMIO32
(
PMC_BASE
 + 0x0038)

	)

42 
	#PMC_PCER1
 
	`MMIO32
(
PMC_BASE
 + 0x0100)

	)

45 
	#PMC_PCDR1
 
	`MMIO32
(
PMC_BASE
 + 0x0104)

	)

48 
	#PMC_PCSR1
 
	`MMIO32
(
PMC_BASE
 + 0x0108)

	)

57 
	#PMC_USB_USBDIV_SHIFT
 8

	)

58 
	#PMC_USB_USBDIV_MASK
 (0x0F << 
PMC_USB_USBDIV_SHIFT
)

	)

61 
	#PMC_USB_USBS
 (0x01 << 0)

	)

	@libopencm3/include/libopencm3/sam/common/pmc_common_3a3u3x.h

21 #i‡
deföed
(
LIBOPENCM3_PMC_H
)

23 #i‚de‡
LIBOPENCM3_PMC_COMMON_3A3U3X_H


24 
	#LIBOPENCM3_PMC_COMMON_3A3U3X_H


	)

30 
	#CKGR_UCKR
 
	`MMIO32
(
PMC_BASE
 + 0x001C)

	)

39 
	#CKGR_UCKR_UPLLCOUNT_SHIFT
 20

	)

40 
	#CKGR_UCKR_UPLLCOUNT_MASK
 (0x0F << 
CKGR_UCKR_UPLLCOUNT_SHIFT
)

	)

43 
	#CKGR_UCKR_UPLLEN
 (0x01 << 16)

	)

48 
	#PMC_MCKR_UPLLDIV2
 (0x01 << 13)

	)

51 
	#PMC_MCKR_CSS_UPLL_CLK
 (3 << 
PMC_MCKR_CSS_SHIFT
)

	)

57 
	#PMC_PCK0_CSS_UPLL_CLK
 (3 << 
PMC_PCK0_CSS_SHIFT
)

	)

63 
	#PMC_PCK1_CSS_UPLL_CLK
 (3 << 
PMC_PCK1_CSS_SHIFT
)

	)

69 
	#PMC_PCK2_CSS_UPLL_CLK
 (3 << 
PMC_PCK2_CSS_SHIFT
)

	)

75 
	#PMC_IER_LOCKU
 (0x01 << 6)

	)

81 
	#PMC_IDR_LOCKU
 (0x01 << 6)

	)

87 
	#PMC_SR_LOCKU
 (0x01 << 6)

	)

93 
	#PMC_IMR_LOCKU
 (0x01 << 6)

	)

	@libopencm3/include/libopencm3/sam/common/pmc_common_3n3u.h

20 #i‡
deföed
(
LIBOPENCM3_PMC_H
)

22 #i‚de‡
LIBOPENCM3_PMC_COMMON_3N3U_H


23 
	#LIBOPENCM3_PMC_COMMON_3N3U_H


	)

26 
	#PMC_PCER
 
	`MMIO32
(
PMC_BASE
 + 0x0010)

	)

29 
	#PMC_PCDR
 
	`MMIO32
(
PMC_BASE
 + 0x0014)

	)

32 
	#PMC_PCSR
 
	`MMIO32
(
PMC_BASE
 + 0x0018)

	)

	@libopencm3/include/libopencm3/sam/common/pmc_common_all.h

21 #i‡
deföed
(
LIBOPENCM3_PMC_H
)

23 #i‚de‡
LIBOPENCM3_PMC_COMMON_ALL_H


24 
	#LIBOPENCM3_PMC_COMMON_ALL_H


	)

26 
	~<lib›ícm3/cm3/comm⁄.h
>

31 
	#PMC_SCER
 
	`MMIO32
(
PMC_BASE
 + 0x0000)

	)

34 
	#PMC_SCDR
 
	`MMIO32
(
PMC_BASE
 + 0x0004)

	)

37 
	#PMC_SCSR
 
	`MMIO32
(
PMC_BASE
 + 0x0008)

	)

40 
	#CKGR_MOR
 
	`MMIO32
(
PMC_BASE
 + 0x0020)

	)

43 
	#CKGR_MCFR
 
	`MMIO32
(
PMC_BASE
 + 0x0024)

	)

46 
	#CKGR_PLLAR
 
	`MMIO32
(
PMC_BASE
 + 0x0028)

	)

49 
	#PMC_MCKR
 
	`MMIO32
(
PMC_BASE
 + 0x0030)

	)

52 
	#PMC_PCK0
 
	`MMIO32
(
PMC_BASE
 + 0x0040)

	)

55 
	#PMC_PCK1
 
	`MMIO32
(
PMC_BASE
 + 0x0044)

	)

58 
	#PMC_PCK2
 
	`MMIO32
(
PMC_BASE
 + 0x0048)

	)

61 
	#PMC_IER
 
	`MMIO32
(
PMC_BASE
 + 0x0060)

	)

64 
	#PMC_IDR
 
	`MMIO32
(
PMC_BASE
 + 0x0064)

	)

67 
	#PMC_SR
 
	`MMIO32
(
PMC_BASE
 + 0x0068)

	)

70 
	#PMC_IMR
 
	`MMIO32
(
PMC_BASE
 + 0x006C)

	)

73 
	#PMC_FSMR
 
	`MMIO32
(
PMC_BASE
 + 0x0070)

	)

76 
	#PMC_FSPR
 
	`MMIO32
(
PMC_BASE
 + 0x0074)

	)

79 
	#PMC_FOCR
 
	`MMIO32
(
PMC_BASE
 + 0x0078)

	)

82 
	#PMC_WPMR
 
	`MMIO32
(
PMC_BASE
 + 0x00E4)

	)

85 
	#PMC_WPSR
 
	`MMIO32
(
PMC_BASE
 + 0x00E8)

	)

94 
	#PMC_SCER_PCK0
 (0x01 << 8)

	)

95 
	#PMC_SCER_PCK1
 (0x01 << 9)

	)

96 
	#PMC_SCER_PCK2
 (0x01 << 10)

	)

102 
	#PMC_SCDR_PCK0
 (0x01 << 8)

	)

103 
	#PMC_SCDR_PCK1
 (0x01 << 9)

	)

104 
	#PMC_SCDR_PCK2
 (0x01 << 10)

	)

110 
	#PMC_SCSR_PCK0
 (0x01 << 8)

	)

111 
	#PMC_SCSR_PCK1
 (0x01 << 9)

	)

112 
	#PMC_SCSR_PCK2
 (0x01 << 10)

	)

122 
	#CKGR_MOR_CFDEN
 (0x01 << 25)

	)

125 
	#CKGR_MOR_MOSCSEL
 (0x01 << 24)

	)

128 
	#CKGR_MOR_KEY
 (0x37 << 16)

	)

131 
	#CKGR_MOR_MOSCXTST_SHIFT
 8

	)

132 
	#CKGR_MOR_MOSCXTST_MASK
 (0xFF << 8)

	)

135 
	#CKGR_MOR_MOSCRCF_SHIFT
 4

	)

136 
	#CKGR_MOR_MOSCRCF_MASK
 (0x07 << 
CKGR_MOR_MOSCRCF_SHIFT
)

	)

139 
	#CKGR_MOR_MOSCRCF_4MHZ
 (0 << 
CKGR_MOR_MOSCRCF_SHIFT
)

	)

140 
	#CKGR_MOR_MOSCRCF_8MHZ
 (1 << 
CKGR_MOR_MOSCRCF_SHIFT
)

	)

141 
	#CKGR_MOR_MOSCRCF_12MHZ
 (2 << 
CKGR_MOR_MOSCRCF_SHIFT
)

	)

144 
	#CKGR_MOR_MOSCRCEN
 (0x01 << 3)

	)

147 
	#CKGR_MOR_MOSCXTBY
 (0x01 << 1)

	)

150 
	#CKGR_MOR_MOSCXTEN
 (0x01 << 0)

	)

156 
	#CKGR_MCFR_MAINFRDY
 (0x01 << 16)

	)

159 
	#CKGR_MCFR_MAINF_SHIFT
 0

	)

160 
	#CKGR_MCFR_MAINF_MASK
 (0xFFFF << 
CKGR_MCFR_MAINF_SHIFT
)

	)

166 
	#CKGR_PLLAR_ONE
 (0x01 << 29)

	)

169 
	#CKGR_PLLAR_MULA_SHIFT
 16

	)

170 
	#CKGR_PLLAR_MULA_MASK
 (0x7FF << 
CKGR_PLLAR_MULA_SHIFT
)

	)

173 
	#CKGR_PLLAR_PLLACOUNT_SHIFT
 8

	)

174 
	#CKGR_PLLAR_PLLACOUNT_MASK
 (0x3F << 
CKGR_PLLAR_PLLACOUNT_SHIFT
)

	)

177 
	#CKGR_PLLAR_DIVA_SHIFT
 0

	)

178 
	#CKGR_PLLAR_DIVA_MASK
 (0xFF << 
CKGR_PLLAR_DIVA_SHIFT
)

	)

184 
	#PMC_MCKR_PRES_SHIFT
 4

	)

185 
	#PMC_MCKR_PRES_MASK
 (0x07 << 
PMC_MCKR_PRES_SHIFT
)

	)

186 
	#PMC_MCKR_PRES_CLK_1
 (0 << 
PMC_MCKR_PRES_SHIFT
)

	)

187 
	#PMC_MCKR_PRES_CLK_2
 (1 << 
PMC_MCKR_PRES_SHIFT
)

	)

188 
	#PMC_MCKR_PRES_CLK_4
 (2 << 
PMC_MCKR_PRES_SHIFT
)

	)

189 
	#PMC_MCKR_PRES_CLK_8
 (3 << 
PMC_MCKR_PRES_SHIFT
)

	)

190 
	#PMC_MCKR_PRES_CLK_16
 (4 << 
PMC_MCKR_PRES_SHIFT
)

	)

191 
	#PMC_MCKR_PRES_CLK_32
 (5 << 
PMC_MCKR_PRES_SHIFT
)

	)

192 
	#PMC_MCKR_PRES_CLK_64
 (6 << 
PMC_MCKR_PRES_SHIFT
)

	)

193 
	#PMC_MCKR_PRES_CLK_3
 (7 << 
PMC_MCKR_PRES_SHIFT
)

	)

196 
	#PMC_MCKR_CSS_SHIFT
 0

	)

197 
	#PMC_MCKR_CSS_MASK
 (0x03 << 
PMC_MCKR_CSS_SHIFT
)

	)

198 
	#PMC_MCKR_CSS_SLOW_CLK
 (0 << 
PMC_MCKR_CSS_SHIFT
)

	)

199 
	#PMC_MCKR_CSS_MAIN_CLK
 (1 << 
PMC_MCKR_CSS_SHIFT
)

	)

200 
	#PMC_MCKR_CSS_PLLA_CLK
 (2 << 
PMC_MCKR_CSS_SHIFT
)

	)

206 
	#PMC_PCK0_PRES_SHIFT
 4

	)

207 
	#PMC_PCK0_PRES_MASK
 (0x07 << 
PMC_PCK0_PRES_SHIFT
)

	)

208 
	#PMC_PCK0_PRES_CLK_1
 (0 << 
PMC_PCK0_PRES_SHIFT
)

	)

209 
	#PMC_PCK0_PRES_CLK_2
 (1 << 
PMC_PCK0_PRES_SHIFT
)

	)

210 
	#PMC_PCK0_PRES_CLK_4
 (2 << 
PMC_PCK0_PRES_SHIFT
)

	)

211 
	#PMC_PCK0_PRES_CLK_8
 (3 << 
PMC_PCK0_PRES_SHIFT
)

	)

212 
	#PMC_PCK0_PRES_CLK_16
 (4 << 
PMC_PCK0_PRES_SHIFT
)

	)

213 
	#PMC_PCK0_PRES_CLK_32
 (5 << 
PMC_PCK0_PRES_SHIFT
)

	)

214 
	#PMC_PCK0_PRES_CLK_64
 (6 << 
PMC_PCK0_PRES_SHIFT
)

	)

217 
	#PMC_PCK0_CSS_SHIFT
 0

	)

218 
	#PMC_PCK0_CSS_MASK
 (0x07 << 
PMC_PCK0_CSS_SHIFT
)

	)

219 
	#PMC_PCK0_CSS_SLOW_CLK
 (0 << 
PMC_PCK0_CSS_SHIFT
)

	)

220 
	#PMC_PCK0_CSS_MAIN_CLK
 (1 << 
PMC_PCK0_CSS_SHIFT
)

	)

221 
	#PMC_PCK0_CSS_PLLA_CLK
 (2 << 
PMC_PCK0_CSS_SHIFT
)

	)

222 
	#PMC_PCK0_CSS_MCK
 (4 << 
PMC_PCK0_CSS_SHIFT
)

	)

228 
	#PMC_PCK1_PRES_SHIFT
 4

	)

229 
	#PMC_PCK1_PRES_MASK
 (0x07 << 
PMC_PCK1_PRES_SHIFT
)

	)

230 
	#PMC_PCK1_PRES_CLK_1
 (0 << 
PMC_PCK1_PRES_SHIFT
)

	)

231 
	#PMC_PCK1_PRES_CLK_2
 (1 << 
PMC_PCK1_PRES_SHIFT
)

	)

232 
	#PMC_PCK1_PRES_CLK_4
 (2 << 
PMC_PCK1_PRES_SHIFT
)

	)

233 
	#PMC_PCK1_PRES_CLK_8
 (3 << 
PMC_PCK1_PRES_SHIFT
)

	)

234 
	#PMC_PCK1_PRES_CLK_16
 (4 << 
PMC_PCK1_PRES_SHIFT
)

	)

235 
	#PMC_PCK1_PRES_CLK_32
 (5 << 
PMC_PCK1_PRES_SHIFT
)

	)

236 
	#PMC_PCK1_PRES_CLK_64
 (6 << 
PMC_PCK1_PRES_SHIFT
)

	)

239 
	#PMC_PCK1_CSS_SHIFT
 0

	)

240 
	#PMC_PCK1_CSS_MASK
 (0x07 << 
PMC_PCK1_CSS_SHIFT
)

	)

241 
	#PMC_PCK1_CSS_SLOW_CLK
 (0 << 
PMC_PCK1_CSS_SHIFT
)

	)

242 
	#PMC_PCK1_CSS_MAIN_CLK
 (1 << 
PMC_PCK1_CSS_SHIFT
)

	)

243 
	#PMC_PCK1_CSS_PLLA_CLK
 (2 << 
PMC_PCK1_CSS_SHIFT
)

	)

244 
	#PMC_PCK1_CSS_MCK
 (4 << 
PMC_PCK1_CSS_SHIFT
)

	)

250 
	#PMC_PCK2_PRES_SHIFT
 4

	)

251 
	#PMC_PCK2_PRES_MASK
 (0x07 << 
PMC_PCK2_PRES_SHIFT
)

	)

252 
	#PMC_PCK2_PRES_CLK_1
 (0 << 
PMC_PCK2_PRES_SHIFT
)

	)

253 
	#PMC_PCK2_PRES_CLK_2
 (1 << 
PMC_PCK2_PRES_SHIFT
)

	)

254 
	#PMC_PCK2_PRES_CLK_4
 (2 << 
PMC_PCK2_PRES_SHIFT
)

	)

255 
	#PMC_PCK2_PRES_CLK_8
 (3 << 
PMC_PCK2_PRES_SHIFT
)

	)

256 
	#PMC_PCK2_PRES_CLK_16
 (4 << 
PMC_PCK2_PRES_SHIFT
)

	)

257 
	#PMC_PCK2_PRES_CLK_32
 (5 << 
PMC_PCK2_PRES_SHIFT
)

	)

258 
	#PMC_PCK2_PRES_CLK_64
 (6 << 
PMC_PCK2_PRES_SHIFT
)

	)

261 
	#PMC_PCK2_CSS_SHIFT
 0

	)

262 
	#PMC_PCK2_CSS_MASK
 (0x07 << 
PMC_PCK2_CSS_SHIFT
)

	)

263 
	#PMC_PCK2_CSS_SLOW_CLK
 (0 << 
PMC_PCK2_CSS_SHIFT
)

	)

264 
	#PMC_PCK2_CSS_MAIN_CLK
 (1 << 
PMC_PCK2_CSS_SHIFT
)

	)

265 
	#PMC_PCK2_CSS_PLLA_CLK
 (2 << 
PMC_PCK2_CSS_SHIFT
)

	)

266 
	#PMC_PCK2_CSS_MCK
 (4 << 
PMC_PCK2_CSS_SHIFT
)

	)

272 
	#PMC_IER_CFDEV
 (0x01 << 18)

	)

275 
	#PMC_IER_MOSCRCS
 (0x01 << 17)

	)

278 
	#PMC_IER_MOSCSELS
 (0x01 << 16)

	)

281 
	#PMC_IER_PCKRDY2
 (0x01 << 10)

	)

284 
	#PMC_IER_PCKRDY1
 (0x01 << 9)

	)

287 
	#PMC_IER_PCKRDY0
 (0x01 << 8)

	)

290 
	#PMC_IER_MCKRDY
 (0x01 << 3)

	)

293 
	#PMC_IER_LOCKA
 (0x01 << 1)

	)

296 
	#PMC_IER_MOSCXTS
 (0x01 << 0)

	)

302 
	#PMC_IDR_CFDEV
 (0x01 << 18)

	)

305 
	#PMC_IDR_MOSCRCS
 (0x01 << 17)

	)

308 
	#PMC_IDR_MOSCSELS
 (0x01 << 16)

	)

311 
	#PMC_IDR_PCKRDY2
 (0x01 << 10)

	)

314 
	#PMC_IDR_PCKRDY1
 (0x01 << 9)

	)

317 
	#PMC_IDR_PCKRDY0
 (0x01 << 8)

	)

320 
	#PMC_IDR_MCKRDY
 (0x01 << 3)

	)

323 
	#PMC_IDR_LOCKA
 (0x01 << 1)

	)

326 
	#PMC_IDR_MOSCXTS
 (0x01 << 0)

	)

332 
	#PMC_SR_FOS
 (0x01 << 20)

	)

335 
	#PMC_SR_CFDS
 (0x01 << 19)

	)

338 
	#PMC_SR_CFDEV
 (0x01 << 18)

	)

341 
	#PMC_SR_MOSCRCS
 (0x01 << 17)

	)

344 
	#PMC_SR_MOSCSELS
 (0x01 << 16)

	)

347 
	#PMC_SR_PCKRDY2
 (0x01 << 10)

	)

350 
	#PMC_SR_PCKRDY1
 (0x01 << 9)

	)

353 
	#PMC_SR_PCKRDY0
 (0x01 << 8)

	)

356 
	#PMC_SR_OSCSELS
 (0x01 << 7)

	)

359 
	#PMC_SR_MCKRDY
 (0x01 << 3)

	)

362 
	#PMC_SR_LOCKA
 (0x01 << 1)

	)

365 
	#PMC_SR_MOSCXTS
 (0x01 << 0)

	)

371 
	#PMC_IMR_CFDEV
 (0x01 << 18)

	)

374 
	#PMC_IMR_MOSCRCS
 (0x01 << 17)

	)

377 
	#PMC_IMR_MOSCSELS
 (0x01 << 16)

	)

380 
	#PMC_IMR_PCKRDY2
 (0x01 << 10)

	)

383 
	#PMC_IMR_PCKRDY1
 (0x01 << 9)

	)

386 
	#PMC_IMR_PCKRDY0
 (0x01 << 8)

	)

389 
	#PMC_IMR_MCKRDY
 (0x01 << 3)

	)

392 
	#PMC_IMR_LOCKA
 (0x01 << 1)

	)

395 
	#PMC_IMR_MOSCXTS
 (0x01 << 0)

	)

401 
	#PMC_FSMR_LPM
 (0x01 << 20)

	)

404 
	#PMC_FSMR_USBAL
 (0x01 << 18)

	)

407 
	#PMC_FSMR_RTCAL
 (0x01 << 17)

	)

410 
	#PMC_FSMR_RTTAL
 (0x01 << 16)

	)

413 
	#PMC_FSMR_FSTT15
 (0x01 << 15)

	)

414 
	#PMC_FSMR_FSTT14
 (0x01 << 14)

	)

415 
	#PMC_FSMR_FSTT13
 (0x01 << 13)

	)

416 
	#PMC_FSMR_FSTT12
 (0x01 << 12)

	)

417 
	#PMC_FSMR_FSTT11
 (0x01 << 11)

	)

418 
	#PMC_FSMR_FSTT10
 (0x01 << 10)

	)

419 
	#PMC_FSMR_FSTT9
 (0x01 << 9)

	)

420 
	#PMC_FSMR_FSTT8
 (0x01 << 8)

	)

421 
	#PMC_FSMR_FSTT7
 (0x01 << 7)

	)

422 
	#PMC_FSMR_FSTT6
 (0x01 << 6)

	)

423 
	#PMC_FSMR_FSTT5
 (0x01 << 5)

	)

424 
	#PMC_FSMR_FSTT4
 (0x01 << 4)

	)

425 
	#PMC_FSMR_FSTT3
 (0x01 << 3)

	)

426 
	#PMC_FSMR_FSTT2
 (0x01 << 2)

	)

427 
	#PMC_FSMR_FSTT1
 (0x01 << 1)

	)

428 
	#PMC_FSMR_FSTT0
 (0x01 << 0)

	)

434 
	#PMC_FSPR_FSTP15
 (0x01 << 15)

	)

435 
	#PMC_FSPR_FSTP14
 (0x01 << 14)

	)

436 
	#PMC_FSPR_FSTP13
 (0x01 << 13)

	)

437 
	#PMC_FSPR_FSTP12
 (0x01 << 12)

	)

438 
	#PMC_FSPR_FSTP11
 (0x01 << 11)

	)

439 
	#PMC_FSPR_FSTP10
 (0x01 << 10)

	)

440 
	#PMC_FSPR_FSTP9
 (0x01 << 9)

	)

441 
	#PMC_FSPR_FSTP8
 (0x01 << 8)

	)

442 
	#PMC_FSPR_FSTP7
 (0x01 << 7)

	)

443 
	#PMC_FSPR_FSTP6
 (0x01 << 6)

	)

444 
	#PMC_FSPR_FSTP5
 (0x01 << 5)

	)

445 
	#PMC_FSPR_FSTP4
 (0x01 << 4)

	)

446 
	#PMC_FSPR_FSTP3
 (0x01 << 3)

	)

447 
	#PMC_FSPR_FSTP2
 (0x01 << 2)

	)

448 
	#PMC_FSPR_FSTP1
 (0x01 << 1)

	)

449 
	#PMC_FSPR_FSTP0
 (0x01 << 0)

	)

455 
	#PMC_FOCR_FOCLR
 (0x01 << 0)

	)

461 
	#PMC_WPMR_WPKEY_SHIFT
 8

	)

462 
	#PMC_WPMR_WPKEY
 (0x504D43 << 
PMC_WPMR_WPKEY_SHIFT
)

	)

465 
	#PMC_WPMR_WPEN
 (0x01 << 0)

	)

471 
	#PMC_WPSR_WPVSRC_SHIFT
 8

	)

472 
	#PMC_WPSR_WPVSRC_MASK
 (0xFFFF << 
PMC_WPSR_WPVSRC_SHIFT
)

	)

475 
	#PMC_WPSR_WPVS
 (0x01 << 0)

	)

480 
uöt32_t
 
pmc_mck_‰equícy
;

482 
	emck_§c
 {

483 
	mMCK_SRC_SLOW
 = 0,

484 
	mMCK_SRC_MAIN
 = 1,

485 
	mMCK_SRC_PLLA
 = 2,

486 
	mMCK_SRC_UPLL
 = 3,

489 
pmc_mck_£t_sour˚
(
mck_§c
 
§c
);

490 
pmc_xèl_íabÀ
(
boﬁ
 
í
, 
uöt8_t
 
°¨tup_time
);

491 
pmc_∂œ_c⁄fig
(
uöt8_t
 
mul
, uöt8_à
div
);

492 
pmc_≥rùhîÆ_˛ock_íabÀ
(
uöt8_t
 
pid
);

493 
pmc_≥rùhîÆ_˛ock_dißbÀ
(
uöt8_t
 
pid
);

494 
pmc_˛ock_£tup_ö_xèl_12mhz_out_84mhz
();

495 
pmc_˛ock_£tup_ö_rc_4mhz_out_84mhz
();

	@libopencm3/include/libopencm3/sam/common/smc_common_3a3u3x.h

20 #i‚de‡
LIBOPENCM3_SMC_H


21 
	#LIBOPENCM3_SMC_H


	)

23 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

27 
	#SMC_CS_0
 0

	)

28 
	#SMC_CS_1
 1

	)

29 
	#SMC_CS_2
 2

	)

30 
	#SMC_CS_3
 3

	)

36 
	#SMC_CFG
 
	`MMIO32
(
SMC_BASE
 + 0x00)

	)

39 
	#SMC_CTRL
 
	`MMIO32
(
SMC_BASE
 + 0x04)

	)

42 
	#SMC_SR
 
	`MMIO32
(
SMC_BASE
 + 0x08)

	)

45 
	#SMC_IER
 
	`MMIO32
(
SMC_BASE
 + 0x0C)

	)

48 
	#SMC_IDR
 
	`MMIO32
(
SMC_BASE
 + 0x10)

	)

51 
	#SMC_IMR
 
	`MMIO32
(
SMC_BASE
 + 0x14)

	)

54 
	#SMC_ADDR
 
	`MMIO32
(
SMC_BASE
 + 0x18)

	)

57 
	#SMC_BANK
 
	`MMIO32
(
SMC_BASE
 + 0x1C)

	)

60 
	#SMC_ECC_CTRL
 
	`MMIO32
(
SMC_BASE
 + 0x20)

	)

63 
	#SMC_ECC_MD
 
	`MMIO32
(
SMC_BASE
 + 0x24)

	)

66 
	#SMC_ECC_SR1
 
	`MMIO32
(
SMC_BASE
 + 0x28)

	)

69 
	#SMC_ECC_PR0
 
	`MMIO32
(
SMC_BASE
 + 0x2C)

	)

72 
	#SMC_ECC_PR1
 
	`MMIO32
(
SMC_BASE
 + 0x30)

	)

75 
	#SMC_ECC_SR2
 
	`MMIO32
(
SMC_BASE
 + 0x34)

	)

78 
	#SMC_ECC_PR2
 
	`MMIO32
(
SMC_BASE
 + 0x38)

	)

81 
	#SMC_ECC_PR3
 
	`MMIO32
(
SMC_BASE
 + 0x3C)

	)

84 
	#SMC_ECC_PR4
 
	`MMIO32
(
SMC_BASE
 + 0x40)

	)

87 
	#SMC_ECC_PR5
 
	`MMIO32
(
SMC_BASE
 + 0x44)

	)

90 
	#SMC_ECC_PR6
 
	`MMIO32
(
SMC_BASE
 + 0x48)

	)

93 
	#SMC_ECC_PR7
 
	`MMIO32
(
SMC_BASE
 + 0x4C)

	)

96 
	#SMC_ECC_PR8
 
	`MMIO32
(
SMC_BASE
 + 0x50)

	)

99 
	#SMC_ECC_PR9
 
	`MMIO32
(
SMC_BASE
 + 0x54)

	)

102 
	#SMC_ECC_PR10
 
	`MMIO32
(
SMC_BASE
 + 0x58)

	)

105 
	#SMC_ECC_PR11
 
	`MMIO32
(
SMC_BASE
 + 0x5C)

	)

108 
	#SMC_ECC_PR12
 
	`MMIO32
(
SMC_BASE
 + 0x60)

	)

111 
	#SMC_ECC_PR13
 
	`MMIO32
(
SMC_BASE
 + 0x64)

	)

114 
	#SMC_ECC_PR14
 
	`MMIO32
(
SMC_BASE
 + 0x68)

	)

117 
	#SMC_ECC_PR15
 
	`MMIO32
(
SMC_BASE
 + 0x6C)

	)

120 
	#SMC_SETUP
(
CS_numbî
Ë
	`MMIO32
(
SMC_BASE
 + 0x14*(CS_number) \

121 + 0x70)

	)

124 
	#SMC_PULSE
(
CS_numbî
Ë
	`MMIO32
(
SMC_BASE
 + 0x14*(CS_number) \

125 + 0x74)

	)

128 
	#SMC_CYCLE
(
CS_numbî
Ë
	`MMIO32
(
SMC_BASE
 + 0x14*(CS_number) \

129 + 0x78)

	)

132 
	#SMC_TIMINGS
(
CS_numbî
Ë
	`MMIO32
(
SMC_BASE
 + 0x14*(CS_number) \

133 + 0x7C)

	)

136 
	#SMC_MODE
(
CS_numbî
Ë
	`MMIO32
(
SMC_BASE
 + 0x14*(CS_number) \

137 + 0x80)

	)

140 
	#SMC_OCMS
 
	`MMIO32
(
SMC_BASE
 + 0x110)

	)

143 
	#SMC_KEY1
 
	`MMIO32
(
SMC_BASE
 + 0x114)

	)

146 
	#SMC_KEY2
 
	`MMIO32
(
SMC_BASE
 + 0x118)

	)

149 
	#SMC_WPCR
 
	`MMIO32
(
SMC_BASE
 + 0x1E4)

	)

152 
	#SMC_WPSR
 
	`MMIO32
(
SMC_BASE
 + 0x1E8)

	)

161 
	#SMC_CFG_DTOMUL_SHIFT
 20

	)

162 
	#SMC_CFG_DTOMUL_MASK
 (0x07 << 
SMC_DTOMUL_SHIFT
)

	)

165 
	#SMC_CFG_DTOMUL_X1
 (0x00 << 
SMC_DTOMUL_SHIFT
)

	)

166 
	#SMC_CFG_DTOMUL_X16
 (0x01 << 
SMC_DTOMUL_SHIFT
)

	)

167 
	#SMC_CFG_DTOMUL_X128
 (0x02 << 
SMC_DTOMUL_SHIFT
)

	)

168 
	#SMC_CFG_DTOMUL_X256
 (0x03 << 
SMC_DTOMUL_SHIFT
)

	)

169 
	#SMC_CFG_DTOMUL_X1024
 (0x04 << 
SMC_DTOMUL_SHIFT
)

	)

170 
	#SMC_CFG_DTOMUL_X4096
 (0x05 << 
SMC_DTOMUL_SHIFT
)

	)

171 
	#SMC_CFG_DTOMUL_X65536
 (0x06 << 
SMC_DTOMUL_SHIFT
)

	)

172 
	#SMC_CFG_DTOMUL_X1048576
 (0x07 << 
SMC_DTOMUL_SHIFT
)

	)

175 
	#SMC_CFG_DTOCYC_SHIFT
 16

	)

176 
	#SMC_CFG_DTOCYC_MASK
 (0x0F << 
SMC_DTOCYC_SHIFT
)

	)

179 
	#SMC_CFG_RBEDGE
 (1 << 13)

	)

182 
	#SMC_CFG_EDGECTRL
 (1 << 12)

	)

185 
	#SMC_CFG_RSPARE
 (1 << 9)

	)

188 
	#SMC_CFG_WSPARE
 (1 << 8)

	)

191 
	#SMC_CFG_PAGESIZE_SHIFT
 0

	)

192 
	#SMC_CFG_PAGESIZE_MASK
 (0x03 << 
SMC_CFG_PAGESIZE_SHIFT
)

	)

195 
	#SMC_CFG_PAGESIZE_PS512_16
 (0x00 << 
SMC_CFG_PAGESIZE_SHIFT
)

	)

196 
	#SMC_CFG_PAGESIZE_PS1024_32
 (0x01 << 
SMC_CFG_PAGESIZE_SHIFT
)

	)

197 
	#SMC_CFG_PAGESIZE_PS2048_64
 (0x02 << 
SMC_CFG_PAGESIZE_SHIFT
)

	)

198 
	#SMC_CFG_PAGESIZE_PS4096_128
 (0x03 << 
SMC_CFG_PAGESIZE_SHIFT
)

	)

204 
	#SMC_CTRL_NFCDIS
 (1 << 1)

	)

207 
	#SMC_CTRL_NFCEN
 (1 << 0)

	)

213 
	#SMC_SR_RB_EDGE0
 (1 << 24)

	)

216 
	#SMC_SR_NFCASE
 (1 << 23)

	)

219 
	#SMC_SR_AWB
 (1 << 22)

	)

222 
	#SMC_SR_UNDEF
 (1 << 21)

	)

225 
	#SMC_SR_DTOE
 (1 << 20)

	)

228 
	#SMC_SR_CMDDONE
 (1 << 17)

	)

231 
	#SMC_SR_XFRDONE
 (1 << 16)

	)

234 
	#SMC_SR_NFCSID_SHIFT
 12

	)

235 
	#SMC_SR_NFCSID_MASK
 (0x07 << 
SMC_SR_NFCSID_SHIFT
)

	)

238 
	#SMC_SR_NFCWR
 (1 << 11)

	)

241 
	#SMC_SR_NFCBUSY
 (1 << 8)

	)

244 
	#SMC_SR_RB_FALL
 (1 << 5)

	)

247 
	#SMC_SR_RB_RISE
 (1 << 4)

	)

250 
	#SMC_SR_SMCSTS
 (1 << 0)

	)

256 
	#SMC_IER_RB_EDGE0
 (1 << 24)

	)

259 
	#SMC_IER_NFCASE
 (1 << 23)

	)

262 
	#SMC_IER_AWB
 (1 << 22)

	)

265 
	#SMC_IER_UNDEF
 (1 << 21)

	)

268 
	#SMC_IER_DTOE
 (1 << 20)

	)

271 
	#SMC_IER_CMDDONE
 (1 << 17)

	)

274 
	#SMC_IER_XFRDONE
 (1 << 16)

	)

277 
	#SMC_IER_RB_FALL
 (1 << 5)

	)

280 
	#SMC_IER_RB_RISE
 (1 << 4)

	)

286 
	#SMC_IDR_RB_EDGE0
 (1 << 24)

	)

289 
	#SMC_IDR_NFCASE
 (1 << 23)

	)

292 
	#SMC_IDR_AWB
 (1 << 22)

	)

295 
	#SMC_IDR_UNDEF
 (1 << 21)

	)

298 
	#SMC_IDR_DTOE
 (1 << 20)

	)

301 
	#SMC_IDR_CMDDONE
 (1 << 17)

	)

304 
	#SMC_IDR_XFRDONE
 (1 << 16)

	)

307 
	#SMC_IDR_RB_FALL
 (1 << 5)

	)

310 
	#SMC_IDR_RB_RISE
 (1 << 4)

	)

316 
	#SMC_IMR_RB_EDGE0
 (1 << 24)

	)

319 
	#SMC_IMR_NFCASE
 (1 << 23)

	)

322 
	#SMC_IMR_AWB
 (1 << 22)

	)

325 
	#SMC_IMR_UNDEF
 (1 << 21)

	)

328 
	#SMC_IMR_DTOE
 (1 << 20)

	)

331 
	#SMC_IMR_CMDDONE
 (1 << 17)

	)

334 
	#SMC_IMR_XFRDONE
 (1 << 16)

	)

337 
	#SMC_IMR_RB_FALL
 (1 << 5)

	)

340 
	#SMC_IMR_RB_RISE
 (1 << 4)

	)

346 
	#SMC_ADDR_ADDR_CYCLE0_SHIFT
 0

	)

347 
	#SMC_ADDR_ADDR_CYCLE0_MASK
 (0xFF << 
SMC_ADDR_ADDR_CYCLE0_SHIFT
)

	)

353 
	#SMC_BANK_BANK_SHIFT
 0

	)

354 
	#SMC_BANK_BANK_MASK
 (0x07 << 
SMC_BANK_BANK_SHIFT
)

	)

360 
	#SMC_ECC_CTRL_SWRST
 (1 << 1)

	)

363 
	#SMC_ECC_CTRL_RST
 (1 << 0)

	)

369 
	#SMC_ECC_MD_TYPCORREC_SHIFT
 4

	)

370 
	#SMC_ECC_MD_TYPCORREC_MASK
 (0x03 << 
SMC_ECC_MD_TYPCORREC_SHIFT
)

	)

373 
	#SMC_ECC_MD_TYPCORREC_CPAGE
 (0x00 << 
SMC_ECC_MD_TYPCORREC_SHIFT
)

	)

374 
	#SMC_ECC_MD_TYPCORREC_C256B
 (0x01 << 
SMC_ECC_MD_TYPCORREC_SHIFT
)

	)

375 
	#SMC_ECC_MD_TYPCORREC_C512B
 (0x02 << 
SMC_ECC_MD_TYPCORREC_SHIFT
)

	)

378 
	#SMC_ECC_MD_ECC_PAGESIZE_SHIFT
 0

	)

379 
	#SMC_ECC_MD_ECC_PAGESIZE_MASK
 (0x03 << 
SMC_ECC_MD_ECC_PAGESIZE_SHIFT
)

	)

382 
	#SMC_ECC_MD_ECC_PAGESIZE_PS512_16
 \

383 (0x00 << 
SMC_ECC_MD_ECC_PAGESIZE_SHIFT
)

	)

384 
	#SMC_ECC_MD_ECC_PAGESIZE_PS1024_32
 \

385 (0x01 << 
SMC_ECC_MD_ECC_PAGESIZE_SHIFT
)

	)

386 
	#SMC_ECC_MD_ECC_PAGESIZE_PS2048_64
 \

387 (0x02 << 
SMC_ECC_MD_ECC_PAGESIZE_SHIFT
)

	)

388 
	#SMC_ECC_MD_ECC_PAGESIZE_PS4096_128
 \

389 (0x03 << 
SMC_ECC_MD_ECC_PAGESIZE_SHIFT
)

	)

415 
	#SMC_SETUP_NCS_RD_SETUP_SHIFT
 24

	)

416 
	#SMC_SETUP_NCS_RD_SETUP_MASK
 (0x3F << 
SMC_SETUP_NCS_RD_SETUP_SHIFT
)

	)

419 
	#SMC_SETUP_NRD_SETUP_SHIFT
 16

	)

420 
	#SMC_SETUP_NRD_SETUP_MASK
 (0x3F << 
SMC_SETUP_NRD_SETUP_SHIFT
)

	)

423 
	#SMC_SETUP_NCS_WR_SETUP_SHIFT
 8

	)

424 
	#SMC_SETUP_NCS_WR_SETUP_MASK
 (0x3F << 
SMC_SETUP_NCS_WR_SETUP_SHIFT
)

	)

427 
	#SMC_SETUP_NWE_SETUP_SHIFT
 0

	)

428 
	#SMC_SETUP_NWE_SETUP_MASK
 (0x3F << 
SMC_SETUP_NWE_SETUP_SHIFT
)

	)

434 
	#SMC_PULSE_NCS_RD_PULSE_SHIFT
 24

	)

435 
	#SMC_PULSE_NCS_RD_PULSE_MASK
 (0x3F << 
SMC_PULSE_NCS_RD_PULSE_SHIFT
)

	)

438 
	#SMC_PULSE_NRD_PULSE_SHIFT
 16

	)

439 
	#SMC_PULSE_NRD_PULSE_MASK
 (0x3F << 
SMC_PULSE_NRD_PULSE_SHIFT
)

	)

442 
	#SMC_PULSE_NCS_WR_PULSE_SHIFT
 8

	)

443 
	#SMC_PULSE_NCS_WR_PULSE_MASK
 (0x3F << 
SMC_PULSE_NCS_WR_PULSE_SHIFT
)

	)

446 
	#SMC_PULSE_NWE_PULSE_SHIFT
 0

	)

447 
	#SMC_PULSE_NWE_PULSE_MASK
 (0x3F << 
SMC_PULSE_NWE_PULSE_SHIFT
)

	)

453 
	#SMC_CYCLE_NRD_CYCLE_SHIFT
 16

	)

454 
	#SMC_CYCLE_NRD_CYCLE_MASK
 (0x1FF << 
SMC_CYCLE_NRD_CYCLE_SHIFT
)

	)

457 
	#SMC_CYCLE_NWE_CYCLE_SHIFT
 0

	)

458 
	#SMC_CYCLE_NWE_CYCLE_MASK
 (0x1FF << 
SMC_CYCLE_NWE_CYCLE_SHIFT
)

	)

464 
	#SMC_TIMINGS_NFSEL
 (1 << 31)

	)

467 
	#SMC_TIMINGS_RBNSEL_SHIFT
 28

	)

468 
	#SMC_TIMINGS_RBNSEL_MASK
 (0x07 << 
SMC_TIMINGS_RBNSEL_SHIFT
)

	)

471 
	#SMC_TIMINGS_TWB_SHIFT
 24

	)

472 
	#SMC_TIMINGS_TWB_MASK
 (0x0F << 
SMC_TIMINGS_TWB_SHIFT
)

	)

475 
	#SMC_TIMINGS_TRR_SHIFT
 16

	)

476 
	#SMC_TIMINGS_TRR_MASK
 (0x0F << 
SMC_TIMINGS_TRR_SHIFT
)

	)

479 
	#SMC_TIMINGS_OCMS
 (1 << 12)

	)

482 
	#SMC_TIMINGS_TAR_SHIFT
 8

	)

483 
	#SMC_TIMINGS_TAR_MASK
 (0x0F << 
SMC_TIMINGS_TAR_SHIFT
)

	)

486 
	#SMC_TIMINGS_TADL_SHIFT
 4

	)

487 
	#SMC_TIMINGS_TADL_MASK
 (0x0F << 
SMC_TIMINGS_TADL_SHIFT
)

	)

490 
	#SMC_TIMINGS_TCLR_SHIFT
 0

	)

491 
	#SMC_TIMINGS_TCLR_MASK
 (0x0F << 
SMC_TIMINGS_TCLR_SHIFT
)

	)

497 
	#SMC_MODE_TDF_MODE
 (1 << 20)

	)

500 
	#SMC_MODE_TDF_CYCLES_SHIFT
 16

	)

501 
	#SMC_MODE_TDF_CYCLES_MASK
 (0x0F << 
SMC_MODE_TDF_CYCLES_SHIFT
)

	)

504 
	#SMC_MODE_DBW
 (1 << 12)

	)

507 
	#SMC_MODE_DBW_BIT_8
 (0 << 12)

	)

508 
	#SMC_MODE_DBW_BIT_16
 (1 << 12)

	)

511 
	#SMC_MODE_BAT
 (1 << 8)

	)

514 
	#SMC_MODE_EXNW_MODE_SHIFT
 4

	)

515 
	#SMC_MODE_EXNW_MODE_MASK
 (0x03 << 
SMC_MODE_EXNW_MODE_SHIFT
)

	)

518 
	#SMC_MODE_EXNW_MODE_DISABLED
 (0x00 << 
SMC_MODE_EXNW_MODE_SHIFT
)

	)

519 
	#SMC_MODE_EXNW_MODE_FROZEN
 (0x02 << 
SMC_MODE_EXNW_MODE_SHIFT
)

	)

520 
	#SMC_MODE_EXNW_MODE_READY
 (0x03 << 
SMC_MODE_EXNW_MODE_SHIFT
)

	)

523 
	#SMC_MODE_WRITE_MODE
 (1 << 1)

	)

526 
	#SMC_MODE_READ_MODE
 (1 << 0)

	)

532 
	#SMC_OCMS_SRSE
 (1 << 1)

	)

535 
	#SMC_OCMS_SMSE
 (1 << 0)

	)

541 
	#SMC_WPCR_WPKEY_SHIFT
 8

	)

542 
	#SMC_WPCR_WPKEY_KEY
 (0x534D43 << 
SMC_WPCR_WPKEY_SHIFT
)

	)

545 
	#SMC_WPCR_WPEN
 (1 << 0)

	)

551 
	#SMC_WPSR_WP_VSRC_SHIFT
 8

	)

552 
	#SMC_WPSR_WP_VSRC_MASK
 (0xFFFF << 
SMC_WPSR_WP_VSRC_SHIFT
)

	)

555 
	#SMC_WPSR_WP_VS_SHIFT
 0

	)

556 
	#SMC_WPSR_WP_VS_MASK
 (0x0F << 
SMC_WPSR_WP_VS_SHIFT
)

	)

	@libopencm3/include/libopencm3/sam/d/memorymap.h

20 #i‚de‡
SAMD_MEMORYMAP_H


21 
	#SAMD_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#PM_BASE
 (0x40000400U)

	)

27 
	#SYSCTRL_BASE
 (0x40000800U)

	)

28 
	#GCLK_BASE
 (0x40000c00U)

	)

29 
	#WDT_BASE
 (0x40001000U)

	)

30 
	#RTC_BASE
 (0x40001400U)

	)

31 
	#EIC_BASE
 (0x40001800U)

	)

33 
	#DSU_BASE
 (0x41002000U)

	)

34 
	#NVMCTRL_BASE
 (0x41004000U)

	)

35 
	#PORT_BASE
 (0x41004400U)

	)

36 
	#DMAC_BASE
 (0x41004800U)

	)

37 
	#MTB_BASE
 (0x41006000U)

	)

39 
	#EVSYS_BASE
 (0x42000400U)

	)

40 
	#SERCOM0_BASE
 (0x42000800U)

	)

41 
	#SERCOM1_BASE
 (0x42000c00U)

	)

42 
	#SERCOM2_BASE
 (0x42001000U)

	)

43 
	#TCC0_BASE
 (0x42001400U)

	)

44 
	#TC1_BASE
 (0x42001800U)

	)

45 
	#TC2_BASE
 (0x42001c00U)

	)

46 
	#ADC_BASE
 (0x42002000U)

	)

47 
	#AC_BASE
 (0x42002400U)

	)

48 
	#DAC_BASE
 (0x42002800U)

	)

49 
	#PTC_BASE
 (0x42002c00U)

	)

	@libopencm3/include/libopencm3/sam/d/nvic.h

6 #i‚de‡
LIBOPENCM3_SAMD_NVIC_H


7 
	#LIBOPENCM3_SAMD_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_PM_IRQ
 0

	)

17 
	#NVIC_SYSCTRL_IRQ
 1

	)

18 
	#NVIC_WDT_IRQ
 2

	)

19 
	#NVIC_RTC_IRQ
 3

	)

20 
	#NVIC_EIC_IRQ
 4

	)

21 
	#NVIC_NVMCTRL_IRQ
 5

	)

22 
	#NVIC_DMAC_IRQ
 6

	)

23 
	#NVIC_RESERVED1_IRQ
 7

	)

24 
	#NVIC_EVSYS_IRQ
 8

	)

25 
	#NVIC_SERCOM0_IRQ
 9

	)

26 
	#NVIC_SERCOM1_IRQ
 10

	)

27 
	#NVIC_SERCOM2_IRQ
 11

	)

28 
	#NVIC_TCC0_IRQ
 12

	)

29 
	#NVIC_TC1_IRQ
 13

	)

30 
	#NVIC_TC2_IRQ
 14

	)

31 
	#NVIC_ADC_IRQ
 15

	)

32 
	#NVIC_AC_IRQ
 16

	)

33 
	#NVIC_DAC_IRQ
 17

	)

34 
	#NVIC_PTC_IRQ
 18

	)

36 
	#NVIC_IRQ_COUNT
 19

	)

45 
BEGIN_DECLS


47 
pm_i§
();

48 
sys˘æ_i§
();

49 
wdt_i§
();

50 
πc_i§
();

51 
eic_i§
();

52 
nvm˘æ_i§
();

53 
dmac_i§
();

54 
ª£rved1_i§
();

55 
evsys_i§
();

56 
£rcom0_i§
();

57 
£rcom1_i§
();

58 
£rcom2_i§
();

59 
tcc0_i§
();

60 
tc1_i§
();

61 
tc2_i§
();

62 
adc_i§
();

63 
ac_i§
();

64 
dac_i§
();

65 
±c_i§
();

67 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/d/port.h

20 #¥agm®
⁄˚


22 
	~<lib›ícm3/cm3/comm⁄.h
>

26 
	#PORTA
 (
PORT_BASE
 + 0)

	)

27 
	#PORTB
 (
PORT_BASE
 + 0x80)

	)

32 
	#PORT_DIR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0000)

	)

35 
	#PORT_DIRCLR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0004)

	)

38 
	#PORT_DIRSET
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0008)

	)

41 
	#PORT_DIRTGL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x000c)

	)

44 
	#PORT_OUT
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0010)

	)

47 
	#PORT_OUTCLR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0014)

	)

50 
	#PORT_OUTSET
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0018)

	)

53 
	#PORT_OUTTGL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x001c)

	)

56 
	#PORT_IN
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0020)

	)

59 
	#PORT_CTRL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0024)

	)

62 
	#PORT_WRCONFIG
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0028)

	)

65 
	#PORT_PMUX
(
p‹t
, 
n
Ë
	`MMIO8
(’‹tË+ 0x0030 + (n))

	)

68 
	#PORT_PINCFG
(
p‹t
, 
n
Ë
	`MMIO8
(’‹tË+ 0x0040 + (n))

	)

	@libopencm3/include/libopencm3/sam/eefc.h

20 #i‚de‡
SAM3X_EEFC_H


21 
	#SAM3X_EEFC_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

27 
	#EEFC
 
EEFC_BASE


	)

28 
	#EEFC0
 
EEFC0_BASE


	)

29 
	#EEFC1
 
EEFC1_BASE


	)

32 
	#EEFC_FMR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00)

	)

33 
	#EEFC_FCR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x04)

	)

34 
	#EEFC_FSR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x08)

	)

35 
	#EEFC_FRR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0C)

	)

41 
	#EEFC_FMR_FAM
 (0x01 << 24)

	)

43 
	#EEFC_FMR_FWS_MASK
 (0x0F << 8)

	)

45 
	#EEFC_FMR_FRDY
 (0x01 << 0)

	)

48 
	#EEFC_FCR_FKEY
 (0x5A << 24)

	)

49 
	#EEFC_FCR_FARG_MASK
 (0xFFFF << 8)

	)

50 
	#EEFC_FCR_FCMD_MASK
 (0xFF << 0)

	)

51 
	#EEFC_FCR_FCMD_GETD
 (0x00 << 0)

	)

52 
	#EEFC_FCR_FCMD_WP
 (0x01 << 0)

	)

53 
	#EEFC_FCR_FCMD_WPL
 (0x02 << 0)

	)

54 
	#EEFC_FCR_FCMD_EWP
 (0x03 << 0)

	)

55 
	#EEFC_FCR_FCMD_EWPL
 (0x04 << 0)

	)

56 
	#EEFC_FCR_FCMD_EA
 (0x05 << 0)

	)

57 
	#EEFC_FCR_FCMD_SLB
 (0x08 << 0)

	)

58 
	#EEFC_FCR_FCMD_CLB
 (0x09 << 0)

	)

59 
	#EEFC_FCR_FCMD_GLB
 (0x0A << 0)

	)

60 
	#EEFC_FCR_FCMD_SGPB
 (0x0B << 0)

	)

61 
	#EEFC_FCR_FCMD_CGPB
 (0x0C << 0)

	)

62 
	#EEFC_FCR_FCMD_GGPB
 (0x0D << 0)

	)

63 
	#EEFC_FCR_FCMD_STUI
 (0x0E << 0)

	)

64 
	#EEFC_FCR_FCMD_SPUI
 (0x0F << 0)

	)

68 
	#EEFC_FSR_FLOCKE
 (0x01 << 2)

	)

69 
	#EEFC_FSR_FCMDE
 (0x01 << 1)

	)

70 
	#EEFC_FSR_FRDY
 (0x01 << 0)

	)

72 
ölöe
 
	$ìfc_£t_œãncy
(
uöt8_t
 
waô
)

74 #i‡
	`deföed
(
SAM3A
Ë|| deföed(
SAM3U
Ë|| deföed(
SAM3X
)

75 
	`EEFC_FMR
(
EEFC0
Ë(EEFC_FMR(EEFC0Ë& ~
EEFC_FMR_FWS_MASK
Ë| (
waô
 << 8);

76 
	`EEFC_FMR
(
EEFC1
Ë(EEFC_FMR(EEFC1Ë& ~
EEFC_FMR_FWS_MASK
Ë| (
waô
 << 8);

77 #ñi‡
	`deföed
(
SAM3N
Ë|| deföed(
SAM3S
)

78 
	`EEFC_FMR
(
EEFC
Ë(EEFC_FMR(EEFCË& ~
EEFC_FMR_FWS_MASK
Ë| (
waô
 << 8);

80 
	}
}

	@libopencm3/include/libopencm3/sam/gpio.h

22 #i‡
deföed
(
SAM3A
)

23 
	~<lib›ícm3/ßm/3a/gpio.h
>

24 #ñi‡
deföed
(
SAM3N
)

25 
	~<lib›ícm3/ßm/3n/gpio.h
>

26 #ñi‡
deföed
(
SAM3S
)

27 
	~<lib›ícm3/ßm/3s/gpio.h
>

28 #ñi‡
deföed
(
SAM3U
)

29 
	~<lib›ícm3/ßm/3u/gpio.h
>

30 #ñi‡
deföed
(
SAM3X
)

31 
	~<lib›ícm3/ßm/3x/gpio.h
>

32 #ñi‡
deföed
(
SAM4L
)

33 
	~<lib›ícm3/ßm/4l/gpio.h
>

	@libopencm3/include/libopencm3/sam/memorymap.h

21 #i‚de‡
SAM_MEMORYMAP_H


22 
	#SAM_MEMORYMAP_H


	)

24 #i‡
deföed
(
SAM3A
)

25 
	~<lib›ícm3/ßm/3a/mem‹ym≠.h
>

26 #ñi‡
deföed
(
SAM3N
)

27 
	~<lib›ícm3/ßm/3n/mem‹ym≠.h
>

28 #ñi‡
deföed
(
SAM3S
)

29 
	~<lib›ícm3/ßm/3s/mem‹ym≠.h
>

30 #ñi‡
deföed
(
SAM3U
)

31 
	~<lib›ícm3/ßm/3u/mem‹ym≠.h
>

32 #ñi‡
deföed
(
SAM3X
)

33 
	~<lib›ícm3/ßm/3x/mem‹ym≠.h
>

34 #ñi‡
deföed
(
SAM4L
)

35 
	~<lib›ícm3/ßm/4l/mem‹ym≠.h
>

36 #ñi‡
deföed
(
SAMD
)

37 
	~<lib›ícm3/ßm/d/mem‹ym≠.h
>

	@libopencm3/include/libopencm3/sam/periph.h

20 #i‡
deföed
(
SAM3A
)

21 
	~<lib›ícm3/ßm/comm⁄/≥rùh_comm⁄_3a3x.h
>

22 #ñi‡
deföed
(
SAM3N
)

23 
	~<lib›ícm3/ßm/3n/≥rùh.h
>

24 #ñi‡
deföed
(
SAM3S
)

25 
	~<lib›ícm3/ßm/3s/≥rùh.h
>

26 #ñi‡
deföed
(
SAM3U
)

27 
	~<lib›ícm3/ßm/3u/≥rùh.h
>

28 #ñi‡
deföed
(
SAM3X
)

29 
	~<lib›ícm3/ßm/comm⁄/≥rùh_comm⁄_3a3x.h
>

	@libopencm3/include/libopencm3/sam/pio.h

22 #i‡
deföed
(
SAM3A
)

23 
	~<lib›ícm3/ßm/3a/pio.h
>

24 #ñi‡
deföed
(
SAM3N
)

25 
	~<lib›ícm3/ßm/3n/pio.h
>

26 #ñi‡
deföed
(
SAM3S
)

27 
	~<lib›ícm3/ßm/3s/pio.h
>

28 #ñi‡
deföed
(
SAM3U
)

29 
	~<lib›ícm3/ßm/3u/pio.h
>

30 #ñi‡
deföed
(
SAM3X
)

31 
	~<lib›ícm3/ßm/3x/pio.h
>

	@libopencm3/include/libopencm3/sam/pm.h

20 #i‡
deföed
(
SAM4L
)

21 
	~<lib›ícm3/ßm/4l/pm.h
>

	@libopencm3/include/libopencm3/sam/pmc.h

20 #i‡
deföed
(
SAM3A
)

21 
	~<lib›ícm3/ßm/3a/pmc.h
>

22 #ñi‡
deföed
(
SAM3N
)

23 
	~<lib›ícm3/ßm/3n/pmc.h
>

24 #ñi‡
deföed
(
SAM3S
)

25 
	~<lib›ícm3/ßm/3s/pmc.h
>

26 #ñi‡
deföed
(
SAM3U
)

27 
	~<lib›ícm3/ßm/3u/pmc.h
>

28 #ñi‡
deföed
(
SAM3X
)

29 
	~<lib›ícm3/ßm/3x/pmc.h
>

	@libopencm3/include/libopencm3/sam/pwm.h

20 #i‚de‡
SAM3X_PWM_H


21 
	#SAM3X_PWM_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

28 
	#PWM_CLK
 
	`MMIO32
(
PWM_BASE
 + 0x0000)

	)

29 
	#PWM_ENA
 
	`MMIO32
(
PWM_BASE
 + 0x0004)

	)

30 
	#PWM_DIS
 
	`MMIO32
(
PWM_BASE
 + 0x0008)

	)

31 
	#PWM_SR
 
	`MMIO32
(
PWM_BASE
 + 0x000C)

	)

32 
	#PWM_IER1
 
	`MMIO32
(
PWM_BASE
 + 0x0010)

	)

33 
	#PWM_IDR1
 
	`MMIO32
(
PWM_BASE
 + 0x0014)

	)

34 
	#PWM_IMR1
 
	`MMIO32
(
PWM_BASE
 + 0x0018)

	)

35 
	#PWM_ISR1
 
	`MMIO32
(
PWM_BASE
 + 0x001C)

	)

36 
	#PWM_SCM
 
	`MMIO32
(
PWM_BASE
 + 0x0020)

	)

38 
	#PWM_SCUC
 
	`MMIO32
(
PWM_BASE
 + 0x0028)

	)

39 
	#PWM_SCUP
 
	`MMIO32
(
PWM_BASE
 + 0x002C)

	)

40 
	#PWM_SCUPUPD
 
	`MMIO32
(
PWM_BASE
 + 0x0030)

	)

41 
	#PWM_IER2
 
	`MMIO32
(
PWM_BASE
 + 0x0034)

	)

42 
	#PWM_IDR2
 
	`MMIO32
(
PWM_BASE
 + 0x0038)

	)

43 
	#PWM_IMR2
 
	`MMIO32
(
PWM_BASE
 + 0x003C)

	)

44 
	#PWM_ISR2
 
	`MMIO32
(
PWM_BASE
 + 0x0040)

	)

45 
	#PWM_OOV
 
	`MMIO32
(
PWM_BASE
 + 0x0044)

	)

46 
	#PWM_OS
 
	`MMIO32
(
PWM_BASE
 + 0x0048)

	)

47 
	#PWM_OSS
 
	`MMIO32
(
PWM_BASE
 + 0x004C)

	)

48 
	#PWM_OSC
 
	`MMIO32
(
PWM_BASE
 + 0x0050)

	)

49 
	#PWM_OSSUPD
 
	`MMIO32
(
PWM_BASE
 + 0x0054)

	)

50 
	#PWM_OSCUPD
 
	`MMIO32
(
PWM_BASE
 + 0x0058)

	)

51 
	#PWM_FMR
 
	`MMIO32
(
PWM_BASE
 + 0x005C)

	)

52 
	#PWM_FSR
 
	`MMIO32
(
PWM_BASE
 + 0x0060)

	)

53 
	#PWM_FCR
 
	`MMIO32
(
PWM_BASE
 + 0x0064)

	)

54 
	#PWM_FPV
 
	`MMIO32
(
PWM_BASE
 + 0x0068)

	)

55 
	#PWM_FPE1
 
	`MMIO32
(
PWM_BASE
 + 0x006C)

	)

56 
	#PWM_FPE2
 
	`MMIO32
(
PWM_BASE
 + 0x0070)

	)

58 
	#PWM_ELMR0
 
	`MMIO32
(
PWM_BASE
 + 0x007C)

	)

59 
	#PWM_ELMR1
 
	`MMIO32
(
PWM_BASE
 + 0x0080)

	)

61 
	#PWM_SMMR
 
	`MMIO32
(
PWM_BASE
 + 0x00B0)

	)

63 
	#PWM_WPCR
 
	`MMIO32
(
PWM_BASE
 + 0x00E4)

	)

64 
	#PWM_WPSR
 
	`MMIO32
(
PWM_BASE
 + 0x00E8)

	)

67 
	#PWM_CMPV
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x0130 + 0x10*(x))

	)

68 
	#PWM_CMPVUPD
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x0134 + 0x10*(x))

	)

69 
	#PWM_CMMV
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x0138 + 0x10*(x))

	)

70 
	#PWM_CMMVUPD
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x013C + 0x10*(x))

	)

72 
	#PWM_CMR
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x0200 + 0x20*(x))

	)

73 
	#PWM_CDTY
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x0204 + 0x20*(x))

	)

74 #i‡
deföed
(
SAM3X
)

75 
	#PWM_CDTYUPD
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x0208 + 0x20*(x))

	)

76 
	#PWM_CPRD
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x020C + 0x20*(x))

	)

77 
	#PWM_CPRDUPD
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x0210 + 0x20*(x))

	)

78 
	#PWM_CCNT
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x0214 + 0x20*(x))

	)

79 
	#PWM_DT
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x0218 + 0x20*(x))

	)

80 
	#PWM_DTUPD
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x021C + 0x20*(x))

	)

81 #ñi‡
deföed
(
SAM3N
)

82 
	#PWM_CPRD
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x0208 + 0x20*(x))

	)

83 
	#PWM_CCNT
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x020C + 0x20*(x))

	)

84 
	#PWM_CUPD
(
x
Ë
	`MMIO32
(
PWM_BASE
 + 0x0210 + 0x20*(x))

	)

89 
ölöe
 
	$pwm_£t_≥riod
(
ch
, 
uöt32_t
 
≥riod
)

91 
	`PWM_CPRD
(
ch
Ë
≥riod
;

92 
	}
}

94 
ölöe
 
	$pwm_£t_duty
(
ch
, 
uöt32_t
 
duty
)

96 
	`PWM_CDTY
(
ch
Ë
duty
;

97 
	}
}

99 
ölöe
 
	$pwm_íabÀ
(
ch
)

101 
PWM_ENA
 = 1 << 
ch
;

102 
	}
}

104 
ölöe
 
	$pwm_dißbÀ
(
ch
)

106 
PWM_DIS
 = 1 << 
ch
;

107 
	}
}

	@libopencm3/include/libopencm3/sam/scif.h

20 #i‡
deföed
(
SAM4L
)

21 
	~<lib›ícm3/ßm/4l/scif.h
>

	@libopencm3/include/libopencm3/sam/smc.h

20 #i‡
deföed
(
SAM3A
)

21 
	~<lib›ícm3/ßm/comm⁄/smc_comm⁄_3a3u3x.h
>

22 #ñi‡
deföed
(
SAM3N
)

24 #ñi‡
deföed
(
SAM3S
)

25 
	~<lib›ícm3/ßm/3s/smc.h
>

26 #ñi‡
deföed
(
SAM3U
)

27 
	~<lib›ícm3/ßm/comm⁄/smc_comm⁄_3a3u3x.h
>

28 #ñi‡
deföed
(
SAM3X
)

29 
	~<lib›ícm3/ßm/comm⁄/smc_comm⁄_3a3u3x.h
>

	@libopencm3/include/libopencm3/sam/tc.h

20 #i‚de‡
SAM3X_TC_H


21 
	#SAM3X_TC_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

28 
	#TC_CCR
(
x
Ë
	`MMIO32
(
TC_BASE
 + 0x00 + 0x40*(x))

	)

29 
	#TC_CMR
(
x
Ë
	`MMIO32
(
TC_BASE
 + 0x04 + 0x40*(x))

	)

30 
	#TC_SMMR
(
x
Ë
	`MMIO32
(
TC_BASE
 + 0x08 + 0x40*(x))

	)

32 
	#TC_CV
(
x
Ë
	`MMIO32
(
TC_BASE
 + 0x10 + 0x40*(x))

	)

33 
	#TC_RA
(
x
Ë
	`MMIO32
(
TC_BASE
 + 0x14 + 0x40*(x))

	)

34 
	#TC_RB
(
x
Ë
	`MMIO32
(
TC_BASE
 + 0x18 + 0x40*(x))

	)

35 
	#TC_RC
(
x
Ë
	`MMIO32
(
TC_BASE
 + 0x1C + 0x40*(x))

	)

36 
	#TC_SR
(
x
Ë
	`MMIO32
(
TC_BASE
 + 0x20 + 0x40*(x))

	)

37 
	#TC_IER
(
x
Ë
	`MMIO32
(
TC_BASE
 + 0x24 + 0x40*(x))

	)

38 
	#TC_IDR
(
x
Ë
	`MMIO32
(
TC_BASE
 + 0x28 + 0x40*(x))

	)

39 
	#TC_IMR
(
x
Ë
	`MMIO32
(
TC_BASE
 + 0x2C + 0x40*(x))

	)

40 
	#TC_BCR
 
	`MMIO32
(
TC_BASE
 + 0xC0)

	)

41 
	#TC_BMR
 
	`MMIO32
(
TC_BASE
 + 0xC4)

	)

42 
	#TC_QIER
 
	`MMIO32
(
TC_BASE
 + 0xC8)

	)

43 
	#TC_QIDR
 
	`MMIO32
(
TC_BASE
 + 0xCC)

	)

44 
	#TC_QIMR
 
	`MMIO32
(
TC_BASE
 + 0xD0)

	)

45 
	#TC_QISR
 
	`MMIO32
(
TC_BASE
 + 0xD4)

	)

46 
	#TC_FMR
 
	`MMIO32
(
TC_BASE
 + 0xD8)

	)

48 
	#TC_WPMR
 
	`MMIO32
(
TC_BASE
 + 0xE4)

	)

	@libopencm3/include/libopencm3/sam/uart.h

20 #i‚de‡
SAM3X_UART_H


21 
	#SAM3X_UART_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

27 
	#UART_CR
 
	`MMIO32
(
UART_BASE
 + 0x0000)

	)

28 
	#UART_MR
 
	`MMIO32
(
UART_BASE
 + 0x0004)

	)

29 
	#UART_IER
 
	`MMIO32
(
UART_BASE
 + 0x0008)

	)

30 
	#UART_IDR
 
	`MMIO32
(
UART_BASE
 + 0x000C)

	)

31 
	#UART_IMR
 
	`MMIO32
(
UART_BASE
 + 0x0010)

	)

32 
	#UART_SR
 
	`MMIO32
(
UART_BASE
 + 0x0014)

	)

33 
	#UART_RHR
 
	`MMIO32
(
UART_BASE
 + 0x0018)

	)

34 
	#UART_THR
 
	`MMIO32
(
UART_BASE
 + 0x001C)

	)

35 
	#UART_BRGR
 
	`MMIO32
(
UART_BASE
 + 0x0020)

	)

43 
	#UART_CR_RSTSTA
 (0x01 << 8)

	)

44 
	#UART_CR_TXDIS
 (0x01 << 7)

	)

45 
	#UART_CR_TXEN
 (0x01 << 6)

	)

46 
	#UART_CR_RXDIS
 (0x01 << 5)

	)

47 
	#UART_CR_RXEN
 (0x01 << 4)

	)

48 
	#UART_CR_RSTTX
 (0x01 << 3)

	)

49 
	#UART_CR_RSTRX
 (0x01 << 2)

	)

54 
	#UART_MR_CHMODE_MASK
 (0x03 << 14)

	)

55 
	#UART_MR_CHMODE_NORMAL
 (0x00 << 14)

	)

56 
	#UART_MR_CHMODE_AUTOMATIC
 (0x01 << 14)

	)

57 
	#UART_MR_CHMODE_LOCAL_LOOPBACK
 (0x02 << 14)

	)

58 
	#UART_MR_CHMODE_REMOTE_LOOPBACK
 (0x03 << 14)

	)

60 
	#UART_MR_PAR_MASK
 (0x07 << 9)

	)

61 
	#UART_MR_PAR_EVEN
 (0x00 << 9)

	)

62 
	#UART_MR_PAR_ODD
 (0x01 << 9)

	)

63 
	#UART_MR_PAR_SPACE
 (0x02 << 9)

	)

64 
	#UART_MR_PAR_MARK
 (0x03 << 9)

	)

65 
	#UART_MR_PAR_NO
 (0x04 << 9)

	)

70 
	#UART_SR_RXBUFF
 (0x01 << 12)

	)

71 
	#UART_SR_TXBUFF
 (0x01 << 11)

	)

73 
	#UART_SR_TXEMPTY
 (0x01 << 9)

	)

75 
	#UART_SR_PARE
 (0x01 << 7)

	)

76 
	#UART_SR_FRAME
 (0x01 << 6)

	)

77 
	#UART_SR_OVRE
 (0x01 << 5)

	)

78 
	#UART_SR_ENDTX
 (0x01 << 4)

	)

79 
	#UART_SR_ENDRX
 (0x01 << 3)

	)

81 
	#UART_SR_TXRDY
 (0x01 << 1)

	)

82 
	#UART_SR_RXRDY
 (0x01 << 0)

	)

	@libopencm3/include/libopencm3/sam/usart.h

20 #i‚de‡
SAM_USART_H


21 
	#SAM_USART_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

26 
	#USART0
 
USART0_BASE


	)

27 
	#USART1
 
USART1_BASE


	)

28 
	#USART2
 
USART2_BASE


	)

29 
	#USART3
 
USART3_BASE


	)

32 
	#USART_CR
(
x
Ë
	`MMIO32
((xË+ 0x0000)

	)

33 
	#USART_MR
(
x
Ë
	`MMIO32
((xË+ 0x0004)

	)

34 
	#USART_IER
(
x
Ë
	`MMIO32
((xË+ 0x0008)

	)

35 
	#USART_IDR
(
x
Ë
	`MMIO32
((xË+ 0x000C)

	)

36 
	#USART_IMR
(
x
Ë
	`MMIO32
((xË+ 0x0010)

	)

37 
	#USART_CSR
(
x
Ë
	`MMIO32
((xË+ 0x0014)

	)

38 
	#USART_RHR
(
x
Ë
	`MMIO32
((xË+ 0x0018)

	)

39 
	#USART_THR
(
x
Ë
	`MMIO32
((xË+ 0x001C)

	)

40 
	#USART_BRGR
(
x
Ë
	`MMIO32
((xË+ 0x0020)

	)

41 
	#USART_RTOR
(
x
Ë
	`MMIO32
((xË+ 0x0024)

	)

42 
	#USART_TTGR
(
x
Ë
	`MMIO32
((xË+ 0x0028)

	)

44 
	#USART_FIDI
(
x
Ë
	`MMIO32
((xË+ 0x0040)

	)

45 
	#USART_NER
(
x
Ë
	`MMIO32
((xË+ 0x0044)

	)

47 
	#USART_IF
(
x
Ë
	`MMIO32
((xË+ 0x004C)

	)

48 
	#USART_MAN
(
x
Ë
	`MMIO32
((xË+ 0x0050)

	)

49 
	#USART_LINMR
(
x
Ë
	`MMIO32
((xË+ 0x0054)

	)

50 
	#USART_LINIR
(
x
Ë
	`MMIO32
((xË+ 0x0058)

	)

52 
	#USART_WPMR
(
x
Ë
	`MMIO32
((xË+ 0x00E4)

	)

53 
	#USART_WPSR
(
x
Ë
	`MMIO32
((xË+ 0x00E8)

	)

55 
	#USART_VERSION
(
x
Ë
	`MMIO32
((xË+ 0x00FC)

	)

61 
	#USART_CR_LINWKUP
 (0x01 << 21)

	)

62 
	#USART_CR_LINABT
 (0x01 << 20)

	)

63 
	#USART_CR_RTSDIS
 (0x01 << 19)

	)

64 
	#USART_CR_RCS
 (0x01 << 19)

	)

65 
	#USART_CR_RTSEN
 (0x01 << 18)

	)

66 
	#USART_CR_FCS
 (0x01 << 18)

	)

68 
	#USART_CR_RETTO
 (0x01 << 15)

	)

69 
	#USART_CR_RSTNACK
 (0x01 << 14)

	)

70 
	#USART_CR_RSTIT
 (0x01 << 13)

	)

71 
	#USART_CR_SENDA
 (0x01 << 12)

	)

72 
	#USART_CR_STTTO
 (0x01 << 11)

	)

73 
	#USART_CR_STPBRK
 (0x01 << 10)

	)

74 
	#USART_CR_STTBRK
 (0x01 << 9)

	)

75 
	#USART_CR_RSTSTA
 (0x01 << 8)

	)

76 
	#USART_CR_TXDIS
 (0x01 << 7)

	)

77 
	#USART_CR_TXEN
 (0x01 << 6)

	)

78 
	#USART_CR_RXDIS
 (0x01 << 5)

	)

79 
	#USART_CR_RXEN
 (0x01 << 4)

	)

80 
	#USART_CR_RSTTX
 (0x01 << 3)

	)

81 
	#USART_CR_RSTRX
 (0x01 << 2)

	)

85 
	#USART_MR_ONEBIT
 (0x01 << 31)

	)

86 
	#USART_MR_MODSYNC
 (0x01 << 30)

	)

87 
	#USART_MR_MAN
 (0x01 << 29)

	)

88 
	#USART_MR_FILTER
 (0x01 << 28)

	)

90 
	#USART_MR_MAX_ITERATION_MASK
 (0x07 << 24)

	)

91 
	#USART_MR_INVDATA
 (0x01 << 23)

	)

92 
	#USART_MR_VAR_SYNC
 (0x01 << 22)

	)

93 
	#USART_MR_DSNACK
 (0x01 << 21)

	)

94 
	#USART_MR_INACK
 (0x01 << 20)

	)

95 
	#USART_MR_OVER
 (0x01 << 19)

	)

96 
	#USART_MR_CLKO
 (0x01 << 18)

	)

97 
	#USART_MR_MODE9
 (0x01 << 17)

	)

98 
	#USART_MR_MSBF
 (0x01 << 16)

	)

99 
	#USART_MR_CPOL
 (0x01 << 16)

	)

100 
	#USART_MR_CHMODE_MASK
 (0x03 << 14)

	)

101 
	#USART_MR_CHMODE_NORMAL
 (0x00 << 14)

	)

102 
	#USART_MR_CHMODE_AUTOMATIC
 (0x01 << 14)

	)

103 
	#USART_MR_CHMODE_LOCAL_LOOPBACK
 (0x02 << 14)

	)

104 
	#USART_MR_CHMODE_REMOTE_LOOPBACK
 (0x03 << 14)

	)

105 
	#USART_MR_NBSTOP_MASK
 (0x03 << 12)

	)

106 
	#USART_MR_NBSTOP_1_BIT
 (0x00 << 12)

	)

107 
	#USART_MR_NBSTOP_1_5_BIT
 (0x01 << 12)

	)

108 
	#USART_MR_NBSTOP_2_BIT
 (0x02 << 12)

	)

110 
	#USART_MR_PAR_MASK
 (0x07 << 9)

	)

111 
	#USART_MR_PAR_EVEN
 (0x00 << 9)

	)

112 
	#USART_MR_PAR_ODD
 (0x01 << 9)

	)

113 
	#USART_MR_PAR_SPACE
 (0x02 << 9)

	)

114 
	#USART_MR_PAR_MARK
 (0x03 << 9)

	)

115 
	#USART_MR_PAR_NO
 (0x04 << 9)

	)

117 
	#USART_MR_SYNC
 (0x01 << 8)

	)

118 
	#USART_MR_CPHA
 (0x01 << 8)

	)

119 
	#USART_MR_CHRL_SHIFT
 (6)

	)

120 
	#USART_MR_CHRL_MASK
 (0x03 << 
USART_MR_CHRL_SHIFT
)

	)

121 
	#USART_MR_CHRL_5BIT
 (0x00 << 
USART_MR_CHRL_SHIFT
)

	)

122 
	#USART_MR_CHRL_6BIT
 (0x01 << 
USART_MR_CHRL_SHIFT
)

	)

123 
	#USART_MR_CHRL_7BIT
 (0x02 << 
USART_MR_CHRL_SHIFT
)

	)

124 
	#USART_MR_CHRL_8BIT
 (0x03 << 
USART_MR_CHRL_SHIFT
)

	)

125 
	#USART_MR_USCLKS_SHIFT
 (4)

	)

126 
	#USART_MR_USCLKS_MASK
 (0x03 << 
USART_MR_USCLKS_SHIFT
)

	)

127 
	#USART_MR_USCLKS_MCK
 (0x00 << 4)

	)

128 
	#USART_MR_USCLKS_DIV
 (0x01 << 4)

	)

129 
	#USART_MR_USCLKS_SCK
 (0x03 << 4)

	)

130 
	#USART_MR_MODE_MASK
 (0x0F << 0)

	)

131 
	#USART_MR_MODE_NORMAL
 (0x00 << 0)

	)

132 
	#USART_MR_MODE_RS485
 (0x01 << 0)

	)

133 
	#USART_MR_MODE_HW_HANDSHAKING
 (0x02 << 0)

	)

134 
	#USART_MR_MODE_ISO7816_T_0
 (0x03 << 0)

	)

135 
	#USART_MR_MODE_ISO7816_T_1
 (0x04 << 0)

	)

136 
	#USART_MR_MODE_IRDA
 (0x06 << 0)

	)

137 
	#USART_MR_MODE_LIN_MASTER
 (0x0A << 0)

	)

138 
	#USART_MR_MODE_LIN_SLAVE
 (0x0B << 0)

	)

139 
	#USART_MR_MODE_SPI_MASTER
 (0x0E << 0)

	)

140 
	#USART_MR_MODE_SPI_SLAVE
 (0x0F << 0)

	)

144 
	#USART_CSR_LINSNRE
 (0x01 << 29)

	)

145 
	#USART_CSR_LINCE
 (0x01 << 28)

	)

146 
	#USART_CSR_LINIPE
 (0x01 << 27)

	)

147 
	#USART_CSR_LINSFE
 (0x01 << 26)

	)

148 
	#USART_CSR_LINBE
 (0x01 << 25)

	)

149 
	#USART_CSR_MANERR
 (0x01 << 24)

	)

150 
	#USART_CSR_CTS
 (0x01 << 23)

	)

151 
	#USART_CSR_LINBLS
 (0x01 << 23)

	)

153 
	#USART_CSR_CTSIC
 (0x01 << 19)

	)

155 
	#USART_CSR_LINTC
 (0x01 << 15)

	)

156 
	#USART_CSR_LINID
 (0x01 << 14)

	)

157 
	#USART_CSR_NACK
 (0x01 << 13)

	)

158 
	#USART_CSR_LINBK
 (0x01 << 13)

	)

159 
	#USART_CSR_RXBUFF
 (0x01 << 12)

	)

160 
	#USART_CSR_TXBUFE
 (0x01 << 11)

	)

162 
	#USART_CSR_TXEMPTY
 (0x01 << 9)

	)

164 
	#USART_CSR_PARE
 (0x01 << 7)

	)

165 
	#USART_CSR_FRAME
 (0x01 << 6)

	)

166 
	#USART_CSR_OVRE
 (0x01 << 5)

	)

167 
	#USART_CSR_ENDTX
 (0x01 << 4)

	)

168 
	#USART_CSR_ENDRX
 (0x01 << 3)

	)

170 
	#USART_CSR_TXRDY
 (0x01 << 1)

	)

171 
	#USART_CSR_RXRDY
 (0x01 << 0)

	)

173 
	#USART_WPMR_KEY
 (0x555341 << 8)

	)

174 
	#USART_WPMR_WPEN
 (0x01 << 0)

	)

176 
	eußπ_°›bôs
 {

177 
	mUSART_STOPBITS_1
,

178 
	mUSART_STOPBITS_1_5
,

179 
	mUSART_STOPBITS_2
,

182 
	eußπ_∑rôy
 {

183 
	mUSART_PARITY_EVEN
,

184 
	mUSART_PARITY_ODD
,

185 
	mUSART_PARITY_SPACE
,

186 
	mUSART_PARITY_MARK
,

187 
	mUSART_PARITY_NONE
,

188 
	mUSART_PARITY_MULTIDROP
,

191 
	eußπ_mode
 {

192 
	mUSART_MODE_DISABLED
,

193 
	mUSART_MODE_RX
,

194 
	mUSART_MODE_TX
,

195 
	mUSART_MODE_TX_RX
,

198 
	eußπ_Êowc⁄åﬁ
 {

199 
	mUSART_FLOWCONTROL_NONE
,

200 
	mUSART_FLOWCONTROL_RTS_CTS
,

203 
	eußπ_˛ock
 {

204 
	mUSART_CLOCK_CLK_USART
,

205 
	mUSART_CLOCK_CLK_USART_DIV
,

206 
	mUSART_CLOCK_CLK
 = 3,

209 
	eußπ_chæ
 {

210 
	mUSART_CHRL_5BIT
,

211 
	mUSART_CHRL_6BIT
,

212 
	mUSART_CHRL_7BIT
,

213 
	mUSART_CHRL_8BIT
,

216 
BEGIN_DECLS


218 
ußπ_£t_baudøã
(
uöt32_t
 
ußπ
, uöt32_à
baud
);

219 
ußπ_£t_d©abôs
(
uöt32_t
 
ußπ
, 
bôs
);

220 
ußπ_£t_°›bôs
(
uöt32_t
 
ußπ
, 
ußπ_°›bôs
);

221 
ußπ_£t_∑rôy
(
uöt32_t
 
ußπ
, 
ußπ_∑rôy
);

222 
ußπ_£t_mode
(
uöt32_t
 
ußπ
, 
ußπ_mode
);

223 
ußπ_£t_ch¨a˘î_Àngth
(
uöt32_t
 
ußπ
, 
ußπ_chæ
 
chæ
);

224 
ußπ_£t_Êow_c⁄åﬁ
(
uöt32_t
 
ußπ
, 
ußπ_Êowc⁄åﬁ
);

225 
ußπ_íabÀ
(
uöt32_t
 
ußπ
);

226 
ußπ_dißbÀ
(
uöt32_t
 
ußπ
);

227 
ußπ_£nd
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
);

228 
uöt16_t
 
ußπ_ªcv
(
uöt32_t
 
ußπ
);

229 
ußπ_waô_£nd_ªady
(
uöt32_t
 
ußπ
);

230 
ußπ_waô_ªcv_ªady
(
uöt32_t
 
ußπ
);

231 
ußπ_£nd_blockög
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
);

232 
uöt16_t
 
ußπ_ªcv_blockög
(
uöt32_t
 
ußπ
);

233 
ußπ_íabÀ_rx_öãºu±
(
uöt32_t
 
ußπ
);

234 
ußπ_dißbÀ_rx_öãºu±
(
uöt32_t
 
ußπ
);

235 
ußπ_wp_dißbÀ
(
uöt32_t
 
ußπ
);

236 
ußπ_wp_íabÀ
(
uöt32_t
 
ußπ
);

237 
ußπ_£À˘_˛ock
(
uöt32_t
 
ußπ
, 
ußπ_˛ock
 
˛k
);

239 
	gEND_DECLS


	@libopencm3/include/libopencm3/sam/wdt.h

20 #i‚de‡
SAM3X_WDT_H


21 
	#SAM3X_WDT_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/ßm/mem‹ym≠.h
>

29 
	#WDT_CR
 
	`MMIO32
(
WDT_BASE
 + 0x00)

	)

30 
	#WDT_MR
 
	`MMIO32
(
WDT_BASE
 + 0x04)

	)

31 
	#WDT_SR
 
	`MMIO32
(
WDT_BASE
 + 0x08)

	)

35 
	#WDT_CR_KEY
 (0xA5 << 24)

	)

37 
	#WDT_CR_WDRSTT
 (1 << 0)

	)

42 
	#WDT_MR_WDIDLEHLT
 (1 << 29)

	)

43 
	#WDT_MR_WDDBGHLT
 (1 << 28)

	)

44 
	#WDT_MR_WDD_MASK
 (0xFFF << 16)

	)

45 
	#WDT_MR_WDDIS
 (1 << 15)

	)

46 
	#WDT_MR_WDRPROC
 (1 << 14)

	)

47 
	#WDT_MR_WDRSTEN
 (1 << 13)

	)

48 
	#WDT_MR_WDFIEN
 (1 << 12)

	)

49 
	#WDT_MR_WDV_MASK
 (0xFFF << 0)

	)

54 
	#WDT_SR_WDERR
 (1 << 1)

	)

55 
	#WDT_SR_WDUNF
 (1 << 0)

	)

	@libopencm3/include/libopencm3/stm32/adc.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/adc.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/adc.h
>

27 #ñi‡
deföed
(
STM32F3
)

28 
	~<lib›ícm3/°m32/f3/adc.h
>

29 #ñi‡
deföed
(
STM32F4
)

30 
	~<lib›ícm3/°m32/f4/adc.h
>

31 #ñi‡
deföed
(
STM32L0
)

32 
	~<lib›ícm3/°m32/l0/adc.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/adc.h
>

35 #ñi‡
deföed
(
STM32L4
)

36 
	~<lib›ícm3/°m32/l4/adc.h
>

	@libopencm3/include/libopencm3/stm32/can.h

34 #i‚de‡
LIBOPENCM3_CAN_H


35 
	#LIBOPENCM3_CAN_H


	)

37 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

38 
	~<lib›ícm3/cm3/comm⁄.h
>

50 
	#CAN1
 
BX_CAN1_BASE


	)

51 
	#CAN2
 
BX_CAN2_BASE


	)

57 
	#CAN_MCR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x000)

	)

59 
	#CAN_MSR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x004)

	)

61 
	#CAN_TSR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x008)

	)

64 
	#CAN_RF0R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x00C)

	)

66 
	#CAN_RF1R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x010)

	)

69 
	#CAN_IER
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x014)

	)

71 
	#CAN_ESR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x018)

	)

73 
	#CAN_BTR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x01C)

	)

80 
	#CAN_MBOX0
 0x180

	)

81 
	#CAN_MBOX1
 0x190

	)

82 
	#CAN_MBOX2
 0x1A0

	)

83 
	#CAN_FIFO0
 0x1B0

	)

84 
	#CAN_FIFO1
 0x1C0

	)

87 
	#CAN_TIxR
(
ˇn_ba£
, 
mbox
Ë
	`MMIO32
((ˇn_ba£Ë+ (mboxË+ 0x0)

	)

88 
	#CAN_TI0R
(
ˇn_ba£
Ë
	`CAN_TIxR
(ˇn_ba£, 
CAN_MBOX0
)

	)

89 
	#CAN_TI1R
(
ˇn_ba£
Ë
	`CAN_TIxR
(ˇn_ba£, 
CAN_MBOX1
)

	)

90 
	#CAN_TI2R
(
ˇn_ba£
Ë
	`CAN_TIxR
(ˇn_ba£, 
CAN_MBOX2
)

	)

93 
	#CAN_TDTxR
(
ˇn_ba£
, 
mbox
Ë
	`MMIO32
((ˇn_ba£Ë+ (mboxË+ 0x4)

	)

94 
	#CAN_TDT0R
(
ˇn_ba£
Ë
	`CAN_TDTxR
((ˇn_ba£), 
CAN_MBOX0
)

	)

95 
	#CAN_TDT1R
(
ˇn_ba£
Ë
	`CAN_TDTxR
((ˇn_ba£), 
CAN_MBOX1
)

	)

96 
	#CAN_TDT2R
(
ˇn_ba£
Ë
	`CAN_TDTxR
((ˇn_ba£), 
CAN_MBOX2
)

	)

99 
	#CAN_TDLxR
(
ˇn_ba£
, 
mbox
Ë
	`MMIO32
((ˇn_ba£Ë+ (mboxË+ 0x8)

	)

100 
	#CAN_TDL0R
(
ˇn_ba£
Ë
	`CAN_TDLxR
((ˇn_ba£), 
CAN_MBOX0
)

	)

101 
	#CAN_TDL1R
(
ˇn_ba£
Ë
	`CAN_TDLxR
((ˇn_ba£), 
CAN_MBOX1
)

	)

102 
	#CAN_TDL2R
(
ˇn_ba£
Ë
	`CAN_TDLxR
((ˇn_ba£), 
CAN_MBOX2
)

	)

105 
	#CAN_TDHxR
(
ˇn_ba£
, 
mbox
Ë
	`MMIO32
((ˇn_ba£Ë+ (mboxË+ 0xC)

	)

106 
	#CAN_TDH0R
(
ˇn_ba£
Ë
	`CAN_TDHxR
((ˇn_ba£), 
CAN_MBOX0
)

	)

107 
	#CAN_TDH1R
(
ˇn_ba£
Ë
	`CAN_TDHxR
((ˇn_ba£), 
CAN_MBOX1
)

	)

108 
	#CAN_TDH2R
(
ˇn_ba£
Ë
	`CAN_TDHxR
((ˇn_ba£), 
CAN_MBOX2
)

	)

111 
	#CAN_RIxR
(
ˇn_ba£
, 
fifo
Ë
	`MMIO32
((ˇn_ba£Ë+ (fifoË+ 0x0)

	)

112 
	#CAN_RI0R
(
ˇn_ba£
Ë
	`CAN_RIxR
((ˇn_ba£), 
CAN_FIFO0
)

	)

113 
	#CAN_RI1R
(
ˇn_ba£
Ë
	`CAN_RIxR
((ˇn_ba£), 
CAN_FIFO1
)

	)

116 
	#CAN_RDTxR
(
ˇn_ba£
, 
fifo
Ë
	`MMIO32
((ˇn_ba£Ë+ (fifoË+ 0x4)

	)

117 
	#CAN_RDT0R
(
ˇn_ba£
Ë
	`CAN_RDTxR
((ˇn_ba£), 
CAN_FIFO0
)

	)

118 
	#CAN_RDT1R
(
ˇn_ba£
Ë
	`CAN_RDTxR
((ˇn_ba£), 
CAN_FIFO1
)

	)

121 
	#CAN_RDLxR
(
ˇn_ba£
, 
fifo
Ë
	`MMIO32
((ˇn_ba£Ë+ (fifoË+ 0x8)

	)

122 
	#CAN_RDL0R
(
ˇn_ba£
Ë
	`CAN_RDLxR
((ˇn_ba£), 
CAN_FIFO0
)

	)

123 
	#CAN_RDL1R
(
ˇn_ba£
Ë
	`CAN_RDLxR
((ˇn_ba£), 
CAN_FIFO1
)

	)

126 
	#CAN_RDHxR
(
ˇn_ba£
, 
fifo
Ë
	`MMIO32
((ˇn_ba£Ë+ (fifoË+ 0xC)

	)

127 
	#CAN_RDH0R
(
ˇn_ba£
Ë
	`CAN_RDHxR
((ˇn_ba£), 
CAN_FIFO0
)

	)

128 
	#CAN_RDH1R
(
ˇn_ba£
Ë
	`CAN_RDHxR
((ˇn_ba£), 
CAN_FIFO1
)

	)

133 
	#CAN_FMR
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x200)

	)

136 
	#CAN_FM1R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x204)

	)

141 
	#CAN_FS1R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x20C)

	)

146 
	#CAN_FFA1R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x214)

	)

151 
	#CAN_FA1R
(
ˇn_ba£
Ë
	`MMIO32
((ˇn_ba£Ë+ 0x21C)

	)

162 
	#CAN_FiR1
(
ˇn_ba£
, 
b™k
Ë
	`MMIO32
((can_base) + 0x240 + \

163 ((
b™k
Ë* 0x8Ë+ 0x0)

	)

164 
	#CAN_FiR2
(
ˇn_ba£
, 
b™k
Ë
	`MMIO32
((can_base) + 0x240 + \

165 ((
b™k
Ë* 0x8Ë+ 0x4)

	)

172 
	#CAN_MCR_DBF
 (1 << 16)

	)

175 
	#CAN_MCR_RESET
 (1 << 15)

	)

180 
	#CAN_MCR_TTCM
 (1 << 7)

	)

183 
	#CAN_MCR_ABOM
 (1 << 6)

	)

186 
	#CAN_MCR_AWUM
 (1 << 5)

	)

189 
	#CAN_MCR_NART
 (1 << 4)

	)

192 
	#CAN_MCR_RFLM
 (1 << 3)

	)

195 
	#CAN_MCR_TXFP
 (1 << 2)

	)

198 
	#CAN_MCR_SLEEP
 (1 << 1)

	)

201 
	#CAN_MCR_INRQ
 (1 << 0)

	)

208 
	#CAN_MSR_RX
 (1 << 11)

	)

211 
	#CAN_MSR_SAMP
 (1 << 10)

	)

214 
	#CAN_MSR_RXM
 (1 << 9)

	)

217 
	#CAN_MSR_TXM
 (1 << 8)

	)

222 
	#CAN_MSR_SLAKI
 (1 << 4)

	)

225 
	#CAN_MSR_WKUI
 (1 << 3)

	)

228 
	#CAN_MSR_ERRI
 (1 << 2)

	)

231 
	#CAN_MSR_SLAK
 (1 << 1)

	)

234 
	#CAN_MSR_INAK
 (1 << 0)

	)

239 
	#CAN_TSR_LOW2
 (1 << 31)

	)

242 
	#CAN_TSR_LOW1
 (1 << 30)

	)

245 
	#CAN_TSR_LOW0
 (1 << 29)

	)

248 
	#CAN_TSR_TME2
 (1 << 28)

	)

251 
	#CAN_TSR_TME1
 (1 << 27)

	)

254 
	#CAN_TSR_TME0
 (1 << 26)

	)

257 
	#CAN_TSR_CODE_MASK
 (0x3 << 24)

	)

260 
	#CAN_TSR_ABRQ2
 (1 << 23)

	)

265 
	#CAN_TSR_TERR2
 (1 << 19)

	)

268 
	#CAN_TSR_ALST2
 (1 << 18)

	)

271 
	#CAN_TSR_TXOK2
 (1 << 17)

	)

274 
	#CAN_TSR_RQCP2
 (1 << 16)

	)

277 
	#CAN_TSR_ABRQ1
 (1 << 15)

	)

282 
	#CAN_TSR_TERR1
 (1 << 11)

	)

285 
	#CAN_TSR_ALST1
 (1 << 10)

	)

288 
	#CAN_TSR_TXOK1
 (1 << 9)

	)

291 
	#CAN_TSR_RQCP1
 (1 << 8)

	)

294 
	#CAN_TSR_ABRQ0
 (1 << 7)

	)

299 
	#CAN_TSR_TERR0
 (1 << 3)

	)

302 
	#CAN_TSR_ALST0
 (1 << 2)

	)

305 
	#CAN_TSR_TXOK0
 (1 << 1)

	)

308 
	#CAN_TSR_RQCP0
 (1 << 0)

	)

315 
	#CAN_RF0R_RFOM0
 (1 << 5)

	)

318 
	#CAN_RF0R_FOVR0
 (1 << 4)

	)

321 
	#CAN_RF0R_FULL0
 (1 << 3)

	)

326 
	#CAN_RF0R_FMP0_MASK
 (0x3 << 0)

	)

333 
	#CAN_RF1R_RFOM1
 (1 << 5)

	)

336 
	#CAN_RF1R_FOVR1
 (1 << 4)

	)

339 
	#CAN_RF1R_FULL1
 (1 << 3)

	)

344 
	#CAN_RF1R_FMP1_MASK
 (0x3 << 0)

	)

351 
	#CAN_IER_SLKIE
 (1 << 17)

	)

354 
	#CAN_IER_WKUIE
 (1 << 16)

	)

357 
	#CAN_IER_ERRIE
 (1 << 15)

	)

362 
	#CAN_IER_LECIE
 (1 << 11)

	)

365 
	#CAN_IER_BOFIE
 (1 << 10)

	)

368 
	#CAN_IER_EPVIE
 (1 << 9)

	)

371 
	#CAN_IER_EWGIE
 (1 << 8)

	)

376 
	#CAN_IER_FOVIE1
 (1 << 6)

	)

379 
	#CAN_IER_FFIE1
 (1 << 5)

	)

382 
	#CAN_IER_FMPIE1
 (1 << 4)

	)

385 
	#CAN_IER_FOVIE0
 (1 << 3)

	)

388 
	#CAN_IER_FFIE0
 (1 << 2)

	)

391 
	#CAN_IER_FMPIE0
 (1 << 1)

	)

394 
	#CAN_IER_TMEIE
 (1 << 0)

	)

399 
	#CAN_ESR_REC_MASK
 (0xF << 24)

	)

402 
	#CAN_ESR_TEC_MASK
 (0xF << 16)

	)

407 
	#CAN_ESR_LEC_NO_ERROR
 (0x0 << 4)

	)

408 
	#CAN_ESR_LEC_STUFF_ERROR
 (0x1 << 4)

	)

409 
	#CAN_ESR_LEC_FORM_ERROR
 (0x2 << 4)

	)

410 
	#CAN_ESR_LEC_ACK_ERROR
 (0x3 << 4)

	)

411 
	#CAN_ESR_LEC_REC_ERROR
 (0x4 << 4)

	)

412 
	#CAN_ESR_LEC_DOM_ERROR
 (0x5 << 4)

	)

413 
	#CAN_ESR_LEC_CRC_ERROR
 (0x6 << 4)

	)

414 
	#CAN_ESR_LEC_SOFT_ERROR
 (0x7 << 4)

	)

415 
	#CAN_ESR_LEC_MASK
 (0x7 << 4)

	)

420 
	#CAN_ESR_BOFF
 (1 << 2)

	)

423 
	#CAN_ESR_EPVF
 (1 << 1)

	)

426 
	#CAN_ESR_EWGF
 (1 << 0)

	)

431 
	#CAN_BTR_SILM
 (1 << 31)

	)

434 
	#CAN_BTR_LBKM
 (1 << 30)

	)

439 
	#CAN_BTR_SJW_1TQ
 (0x0 << 24)

	)

440 
	#CAN_BTR_SJW_2TQ
 (0x1 << 24)

	)

441 
	#CAN_BTR_SJW_3TQ
 (0x2 << 24)

	)

442 
	#CAN_BTR_SJW_4TQ
 (0x3 << 24)

	)

443 
	#CAN_BTR_SJW_MASK
 (0x3 << 24)

	)

444 
	#CAN_BTR_SJW_SHIFT
 24

	)

449 
	#CAN_BTR_TS2_1TQ
 (0x0 << 20)

	)

450 
	#CAN_BTR_TS2_2TQ
 (0x1 << 20)

	)

451 
	#CAN_BTR_TS2_3TQ
 (0x2 << 20)

	)

452 
	#CAN_BTR_TS2_4TQ
 (0x3 << 20)

	)

453 
	#CAN_BTR_TS2_5TQ
 (0x4 << 20)

	)

454 
	#CAN_BTR_TS2_6TQ
 (0x5 << 20)

	)

455 
	#CAN_BTR_TS2_7TQ
 (0x6 << 20)

	)

456 
	#CAN_BTR_TS2_8TQ
 (0x7 << 20)

	)

457 
	#CAN_BTR_TS2_MASK
 (0x7 << 20)

	)

458 
	#CAN_BTR_TS2_SHIFT
 20

	)

461 
	#CAN_BTR_TS1_1TQ
 (0x0 << 16)

	)

462 
	#CAN_BTR_TS1_2TQ
 (0x1 << 16)

	)

463 
	#CAN_BTR_TS1_3TQ
 (0x2 << 16)

	)

464 
	#CAN_BTR_TS1_4TQ
 (0x3 << 16)

	)

465 
	#CAN_BTR_TS1_5TQ
 (0x4 << 16)

	)

466 
	#CAN_BTR_TS1_6TQ
 (0x5 << 16)

	)

467 
	#CAN_BTR_TS1_7TQ
 (0x6 << 16)

	)

468 
	#CAN_BTR_TS1_8TQ
 (0x7 << 16)

	)

469 
	#CAN_BTR_TS1_9TQ
 (0x8 << 16)

	)

470 
	#CAN_BTR_TS1_10TQ
 (0x9 << 16)

	)

471 
	#CAN_BTR_TS1_11TQ
 (0xA << 16)

	)

472 
	#CAN_BTR_TS1_12TQ
 (0xB << 16)

	)

473 
	#CAN_BTR_TS1_13TQ
 (0xC << 16)

	)

474 
	#CAN_BTR_TS1_14TQ
 (0xD << 16)

	)

475 
	#CAN_BTR_TS1_15TQ
 (0xE << 16)

	)

476 
	#CAN_BTR_TS1_16TQ
 (0xF << 16)

	)

477 
	#CAN_BTR_TS1_MASK
 (0xF << 16)

	)

478 
	#CAN_BTR_TS1_SHIFT
 16

	)

483 
	#CAN_BTR_BRP_MASK
 (0x3FFUL << 0)

	)

488 
	#CAN_TIxR_STID_MASK
 (0x7FF << 21)

	)

489 
	#CAN_TIxR_STID_SHIFT
 21

	)

492 
	#CAN_TIxR_EXID_MASK
 (0x1FFFFFF << 3)

	)

493 
	#CAN_TIxR_EXID_SHIFT
 3

	)

496 
	#CAN_TIxR_IDE
 (1 << 2)

	)

499 
	#CAN_TIxR_RTR
 (1 << 1)

	)

502 
	#CAN_TIxR_TXRQ
 (1 << 0)

	)

507 
	#CAN_TDTxR_TIME_MASK
 (0xFFFF << 15)

	)

508 
	#CAN_TDTxR_TIME_SHIFT
 15

	)

513 
	#CAN_TDTxR_TGT
 (1 << 5)

	)

518 
	#CAN_TDTxR_DLC_MASK
 (0xF << 0)

	)

519 
	#CAN_TDTxR_DLC_SHIFT
 0

	)

538 
	#CAN_RIxR_STID_MASK
 (0x7FF)

	)

539 
	#CAN_RIxR_STID_SHIFT
 21

	)

542 
	#CAN_RIxR_EXID_MASK
 (0x1FFFFFFF)

	)

543 
	#CAN_RIxR_EXID_SHIFT
 3

	)

546 
	#CAN_RIxR_IDE
 (1 << 2)

	)

549 
	#CAN_RIxR_RTR
 (1 << 1)

	)

556 
	#CAN_RDTxR_TIME_MASK
 (0xFFFF << 16)

	)

557 
	#CAN_RDTxR_TIME_SHIFT
 16

	)

560 
	#CAN_RDTxR_FMI_MASK
 (0xFF << 8)

	)

561 
	#CAN_RDTxR_FMI_SHIFT
 8

	)

566 
	#CAN_RDTxR_DLC_MASK
 (0xF << 0)

	)

567 
	#CAN_RDTxR_DLC_SHIFT
 0

	)

591 
	#CAN_FMR_CAN2SB_SHIFT
 8

	)

592 
	#CAN_FMR_CAN2SB_MASK
 (0x3F << 
CAN_FMR_CAN2SB_SHIFT
)

	)

597 
	#CAN_FMR_FINIT
 (1 << 0)

	)

645 
BEGIN_DECLS


647 
ˇn_ª£t
(
uöt32_t
 
ˇ≈‹t
);

648 
ˇn_öô
(
uöt32_t
 
ˇ≈‹t
, 
boﬁ
 
âcm
, boﬁ 
abom
, boﬁ 
awum
, boﬁ 
«π
,

649 
boﬁ
 
rÊm
, boﬁ 
txÂ
, 
uöt32_t
 
sjw
, uöt32_à
ts1
, uöt32_à
ts2
,

650 
uöt32_t
 
bΩ
, 
boﬁ
 
lo›back
, boﬁ 
sûít
);

652 
ˇn_fûãr_öô
(
uöt32_t
 
ƒ
, 
boﬁ
 
sˇÀ_32bô
,

653 
boﬁ
 
id_li°_mode
, 
uöt32_t
 
‰1
, uöt32_à
‰2
,

654 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
);

655 
ˇn_fûãr_id_mask_16bô_öô
(
uöt32_t
 
ƒ
, 
uöt16_t
 
id1
,

656 
uöt16_t
 
mask1
, uöt16_à
id2
,

657 
uöt16_t
 
mask2
, 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
);

658 
ˇn_fûãr_id_mask_32bô_öô
(
uöt32_t
 
ƒ
, uöt32_à
id
,

659 
uöt32_t
 
mask
, uöt32_à
fifo
, 
boﬁ
 
íabÀ
);

660 
ˇn_fûãr_id_li°_16bô_öô
(
uöt32_t
 
ƒ
, 
uöt16_t
 
id1
,

661 
uöt16_t
 
id2
, uöt16_à
id3
, uöt16_à
id4
,

662 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
);

663 
ˇn_fûãr_id_li°_32bô_öô
(
uöt32_t
 
ƒ
, uöt32_à
id1
,

664 
uöt32_t
 
id2
, uöt32_à
fifo
, 
boﬁ
 
íabÀ
);

666 
ˇn_íabÀ_úq
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
úq
);

667 
ˇn_dißbÀ_úq
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
úq
);

669 
ˇn_å™smô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
id
, 
boﬁ
 
ext
, boﬁ 
πr
,

670 
uöt8_t
 
Àngth
, uöt8_à*
d©a
);

671 
ˇn_ª˚ive
(
uöt32_t
 
ˇ≈‹t
, 
uöt8_t
 
fifo
, 
boﬁ
 
ªÀa£
, uöt32_à*
id
,

672 
boﬁ
 *
ext
, boﬁ *
πr
, 
uöt8_t
 *
fmi
, uöt8_à*
Àngth
,

673 
uöt8_t
 *
d©a
, 
uöt16_t
 *
time°amp
);

675 
ˇn_fifo_ªÀa£
(
uöt32_t
 
ˇ≈‹t
, 
uöt8_t
 
fifo
);

676 
boﬁ
 
ˇn_avaûabÀ_maûbox
(
uöt32_t
 
ˇ≈‹t
);

677 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/cec.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/˚c.h
>

	@libopencm3/include/libopencm3/stm32/common/adc_common_v1.h

33 #ifde‡
LIBOPENCM3_ADC_H


35 #i‚de‡
LIBOPENCM3_ADC_COMMON_V1_H


36 
	#LIBOPENCM3_ADC_COMMON_V1_H


	)

46 
	#ADC1
 
ADC1_BASE


	)

52 
	#ADC_SR
(
block
Ë
	`MMIO32
((blockË+ 0x00)

	)

55 
	#ADC_CR1
(
block
Ë
	`MMIO32
((blockË+ 0x04)

	)

58 
	#ADC_CR2
(
block
Ë
	`MMIO32
((blockË+ 0x08)

	)

61 
	#ADC_SMPR1
(
block
Ë
	`MMIO32
((blockË+ 0x0c)

	)

64 
	#ADC_SMPR2
(
block
Ë
	`MMIO32
((blockË+ 0x10)

	)

66 
	#ADC1_SR
 
	`ADC_SR
(
ADC1
)

	)

67 
	#ADC1_CR1
 
	`ADC_CR1
(
ADC1
)

	)

68 
	#ADC1_CR2
 
	`ADC_CR2
(
ADC1
)

	)

69 
	#ADC1_SMPR1
 
	`ADC_SMPR1
(
ADC1
)

	)

70 
	#ADC1_SMPR2
 
	`ADC_SMPR2
(
ADC1
)

	)

72 
	#ADC1_JOFR1
 
	`ADC_JOFR1
(
ADC1
)

	)

73 
	#ADC1_JOFR2
 
	`ADC_JOFR2
(
ADC1
)

	)

74 
	#ADC1_JOFR3
 
	`ADC_JOFR3
(
ADC1
)

	)

75 
	#ADC1_JOFR4
 
	`ADC_JOFR4
(
ADC1
)

	)

77 
	#ADC1_HTR
 
	`ADC_HTR
(
ADC1
)

	)

78 
	#ADC1_LTR
 
	`ADC_LTR
(
ADC1
)

	)

80 
	#ADC1_SQR1
 
	`ADC_SQR1
(
ADC1
)

	)

81 
	#ADC1_SQR2
 
	`ADC_SQR2
(
ADC1
)

	)

82 
	#ADC1_SQR3
 
	`ADC_SQR3
(
ADC1
)

	)

83 
	#ADC1_JSQR
 
	`ADC_JSQR
(
ADC1
)

	)

85 
	#ADC1_JDR1
 
	`ADC_JDR1
(
ADC1
)

	)

86 
	#ADC1_JDR2
 
	`ADC_JDR2
(
ADC1
)

	)

87 
	#ADC1_JDR3
 
	`ADC_JDR3
(
ADC1
)

	)

88 
	#ADC1_JDR4
 
	`ADC_JDR4
(
ADC1
)

	)

89 
	#ADC1_DR
 
	`ADC_DR
(
ADC1
)

	)

91 #i‡
deföed
(
ADC2_BASE
)

92 
	#ADC2
 
ADC2_BASE


	)

93 
	#ADC2_SR
 
	`ADC_SR
(
ADC2
)

	)

94 
	#ADC2_CR1
 
	`ADC_CR1
(
ADC2
)

	)

95 
	#ADC2_CR2
 
	`ADC_CR2
(
ADC2
)

	)

96 
	#ADC2_SMPR1
 
	`ADC_SMPR1
(
ADC2
)

	)

97 
	#ADC2_SMPR2
 
	`ADC_SMPR2
(
ADC2
)

	)

99 
	#ADC2_JOFR1
 
	`ADC_JOFR1
(
ADC2
)

	)

100 
	#ADC2_JOFR2
 
	`ADC_JOFR2
(
ADC2
)

	)

101 
	#ADC2_JOFR3
 
	`ADC_JOFR3
(
ADC2
)

	)

102 
	#ADC2_JOFR4
 
	`ADC_JOFR4
(
ADC2
)

	)

105 
	#ADC2_HTR
 
	`ADC_HTR
(
ADC2
)

	)

107 
	#ADC2_LTR
 
	`ADC_LTR
(
ADC2
)

	)

110 
	#ADC2_SQR1
 
	`ADC_SQR1
(
ADC2
)

	)

112 
	#ADC2_SQR2
 
	`ADC_SQR2
(
ADC2
)

	)

114 
	#ADC2_SQR3
 
	`ADC_SQR3
(
ADC2
)

	)

116 
	#ADC2_JSQR
 
	`ADC_JSQR
(
ADC2
)

	)

119 
	#ADC2_JDR1
 
	`ADC_JDR1
(
ADC2
)

	)

120 
	#ADC2_JDR2
 
	`ADC_JDR2
(
ADC2
)

	)

121 
	#ADC2_JDR3
 
	`ADC_JDR3
(
ADC2
)

	)

122 
	#ADC2_JDR4
 
	`ADC_JDR4
(
ADC2
)

	)

124 
	#ADC2_DR
 
	`ADC_DR
(
ADC2
)

	)

127 #i‡
deföed
(
ADC3_BASE
)

128 
	#ADC3
 
ADC3_BASE


	)

129 
	#ADC3_SR
 
	`ADC_SR
(
ADC3
)

	)

130 
	#ADC3_CR1
 
	`ADC_CR1
(
ADC3
)

	)

131 
	#ADC3_CR2
 
	`ADC_CR2
(
ADC3
)

	)

132 
	#ADC3_SMPR1
 
	`ADC_SMPR1
(
ADC3
)

	)

133 
	#ADC3_SMPR2
 
	`ADC_SMPR2
(
ADC3
)

	)

135 
	#ADC3_JOFR1
 
	`ADC_JOFR1
(
ADC3
)

	)

136 
	#ADC3_JOFR2
 
	`ADC_JOFR2
(
ADC3
)

	)

137 
	#ADC3_JOFR3
 
	`ADC_JOFR3
(
ADC3
)

	)

138 
	#ADC3_JOFR4
 
	`ADC_JOFR4
(
ADC3
)

	)

140 
	#ADC3_HTR
 
	`ADC_HTR
(
ADC3
)

	)

141 
	#ADC3_LTR
 
	`ADC_LTR
(
ADC3
)

	)

143 
	#ADC3_SQR1
 
	`ADC_SQR1
(
ADC3
)

	)

144 
	#ADC3_SQR2
 
	`ADC_SQR2
(
ADC3
)

	)

145 
	#ADC3_SQR3
 
	`ADC_SQR3
(
ADC3
)

	)

146 
	#ADC3_JSQR
 
	`ADC_JSQR
(
ADC3
)

	)

148 
	#ADC3_JDR1
 
	`ADC_JDR1
(
ADC3
)

	)

149 
	#ADC3_JDR2
 
	`ADC_JDR2
(
ADC3
)

	)

150 
	#ADC3_JDR3
 
	`ADC_JDR3
(
ADC3
)

	)

151 
	#ADC3_JDR4
 
	`ADC_JDR4
(
ADC3
)

	)

152 
	#ADC3_DR
 
	`ADC_DR
(
ADC3
)

	)

164 
	#ADC_CHANNEL0
 0x00

	)

165 
	#ADC_CHANNEL1
 0x01

	)

166 
	#ADC_CHANNEL2
 0x02

	)

167 
	#ADC_CHANNEL3
 0x03

	)

168 
	#ADC_CHANNEL4
 0x04

	)

169 
	#ADC_CHANNEL5
 0x05

	)

170 
	#ADC_CHANNEL6
 0x06

	)

171 
	#ADC_CHANNEL7
 0x07

	)

172 
	#ADC_CHANNEL8
 0x08

	)

173 
	#ADC_CHANNEL9
 0x09

	)

174 
	#ADC_CHANNEL10
 0x0A

	)

175 
	#ADC_CHANNEL11
 0x0B

	)

176 
	#ADC_CHANNEL12
 0x0C

	)

177 
	#ADC_CHANNEL13
 0x0D

	)

178 
	#ADC_CHANNEL14
 0x0E

	)

179 
	#ADC_CHANNEL15
 0x0F

	)

180 
	#ADC_CHANNEL16
 0x10

	)

181 
	#ADC_CHANNEL17
 0x11

	)

182 
	#ADC_CHANNEL18
 0x12

	)

184 
	#ADC_CHANNEL_MASK
 0x1F

	)

189 
	#ADC_SR_STRT
 (1 << 4)

	)

190 
	#ADC_SR_JSTRT
 (1 << 3)

	)

191 
	#ADC_SR_JEOC
 (1 << 2)

	)

192 
	#ADC_SR_EOC
 (1 << 1)

	)

193 
	#ADC_SR_AWD
 (1 << 0)

	)

198 
	#ADC_CR1_AWDEN
 (1 << 23)

	)

201 
	#ADC_CR1_JAWDEN
 (1 << 22)

	)

212 
	#ADC_CR1_DISCNUM_1CHANNELS
 (0x0 << 13)

	)

213 
	#ADC_CR1_DISCNUM_2CHANNELS
 (0x1 << 13)

	)

214 
	#ADC_CR1_DISCNUM_3CHANNELS
 (0x2 << 13)

	)

215 
	#ADC_CR1_DISCNUM_4CHANNELS
 (0x3 << 13)

	)

216 
	#ADC_CR1_DISCNUM_5CHANNELS
 (0x4 << 13)

	)

217 
	#ADC_CR1_DISCNUM_6CHANNELS
 (0x5 << 13)

	)

218 
	#ADC_CR1_DISCNUM_7CHANNELS
 (0x6 << 13)

	)

219 
	#ADC_CR1_DISCNUM_8CHANNELS
 (0x7 << 13)

	)

221 
	#ADC_CR1_DISCNUM_MASK
 (0x7 << 13)

	)

222 
	#ADC_CR1_DISCNUM_SHIFT
 13

	)

225 
	#ADC_CR1_JDISCEN
 (1 << 12)

	)

228 
	#ADC_CR1_DISCEN
 (1 << 11)

	)

231 
	#ADC_CR1_JAUTO
 (1 << 10)

	)

234 
	#ADC_CR1_AWDSGL
 (1 << 9)

	)

237 
	#ADC_CR1_SCAN
 (1 << 8)

	)

240 
	#ADC_CR1_JEOCIE
 (1 << 7)

	)

243 
	#ADC_CR1_AWDIE
 (1 << 6)

	)

246 
	#ADC_CR1_EOCIE
 (1 << 5)

	)

258 
	#ADC_CR1_AWDCH_CHANNEL0
 (0x00 << 0)

	)

259 
	#ADC_CR1_AWDCH_CHANNEL1
 (0x01 << 0)

	)

260 
	#ADC_CR1_AWDCH_CHANNEL2
 (0x02 << 0)

	)

261 
	#ADC_CR1_AWDCH_CHANNEL3
 (0x03 << 0)

	)

262 
	#ADC_CR1_AWDCH_CHANNEL4
 (0x04 << 0)

	)

263 
	#ADC_CR1_AWDCH_CHANNEL5
 (0x05 << 0)

	)

264 
	#ADC_CR1_AWDCH_CHANNEL6
 (0x06 << 0)

	)

265 
	#ADC_CR1_AWDCH_CHANNEL7
 (0x07 << 0)

	)

266 
	#ADC_CR1_AWDCH_CHANNEL8
 (0x08 << 0)

	)

267 
	#ADC_CR1_AWDCH_CHANNEL9
 (0x09 << 0)

	)

268 
	#ADC_CR1_AWDCH_CHANNEL10
 (0x0A << 0)

	)

269 
	#ADC_CR1_AWDCH_CHANNEL11
 (0x0B << 0)

	)

270 
	#ADC_CR1_AWDCH_CHANNEL12
 (0x0C << 0)

	)

271 
	#ADC_CR1_AWDCH_CHANNEL13
 (0x0D << 0)

	)

272 
	#ADC_CR1_AWDCH_CHANNEL14
 (0x0E << 0)

	)

273 
	#ADC_CR1_AWDCH_CHANNEL15
 (0x0F << 0)

	)

274 
	#ADC_CR1_AWDCH_CHANNEL16
 (0x10 << 0)

	)

275 
	#ADC_CR1_AWDCH_CHANNEL17
 (0x11 << 0)

	)

277 
	#ADC_CR1_AWDCH_MASK
 (0x1F << 0)

	)

278 
	#ADC_CR1_AWDCH_SHIFT
 0

	)

283 
	#ADC_CR2_ALIGN_RIGHT
 (0 << 11)

	)

284 
	#ADC_CR2_ALIGN_LEFT
 (1 << 11)

	)

285 
	#ADC_CR2_ALIGN
 (1 << 11)

	)

288 
	#ADC_CR2_DMA
 (1 << 8)

	)

291 
	#ADC_CR2_CONT
 (1 << 1)

	)

299 
	#ADC_CR2_ADON
 (1 << 0)

	)

303 
	#ADC_JOFFSET_LSB
 0

	)

304 
	#ADC_JOFFSET_MSK
 0xfff

	)

305 
	#ADC_HT_LSB
 0

	)

306 
	#ADC_HT_MSK
 0xfff

	)

307 
	#ADC_LT_LSB
 0

	)

308 
	#ADC_LT_MSK
 0xfff

	)

313 
	#ADC_SQR1_L_LSB
 20

	)

316 
	#ADC_JSQR_JL_LSB
 20

	)

317 
	#ADC_JSQR_JSQ4_LSB
 15

	)

318 
	#ADC_JSQR_JSQ3_LSB
 10

	)

319 
	#ADC_JSQR_JSQ2_LSB
 5

	)

320 
	#ADC_JSQR_JSQ1_LSB
 0

	)

328 
	#ADC_JSQR_JL_1CHANNELS
 (0x0 << 
ADC_JSQR_JL_LSB
)

	)

329 
	#ADC_JSQR_JL_2CHANNELS
 (0x1 << 
ADC_JSQR_JL_LSB
)

	)

330 
	#ADC_JSQR_JL_3CHANNELS
 (0x2 << 
ADC_JSQR_JL_LSB
)

	)

331 
	#ADC_JSQR_JL_4CHANNELS
 (0x3 << 
ADC_JSQR_JL_LSB
)

	)

333 
	#ADC_JSQR_JL_MSK
 (0x2 << 
ADC_JSQR_JL_LSB
)

	)

334 
	#ADC_JSQR_JSQ4_MSK
 (0x1‡<< 
ADC_JSQR_JSQ4_LSB
)

	)

335 
	#ADC_JSQR_JSQ3_MSK
 (0x1‡<< 
ADC_JSQR_JSQ3_LSB
)

	)

336 
	#ADC_JSQR_JSQ2_MSK
 (0x1‡<< 
ADC_JSQR_JSQ2_LSB
)

	)

337 
	#ADC_JSQR_JSQ1_MSK
 (0x1‡<< 
ADC_JSQR_JSQ1_LSB
)

	)

339 
	#ADC_JSQR_JSQ_VAL
(
n
, 
vÆ
Ë((vÆË<< ((“Ë- 1Ë* 5))

	)

340 
	#ADC_JSQR_JL_VAL
(
vÆ
Ë(((vÆË- 1Ë<< 
ADC_JSQR_JL_LSB
)

	)

342 #i‡(
deföed
(
THESE_HAVE_BAD_NAMES_PROBABLY
) && (THESE_HAVE_BAD_NAMES_PROBABLY))

345 
	#ADC_JDATA_LSB
 0

	)

346 
	#ADC_DATA_LSB
 0

	)

347 
	#ADC_ADC2DATA_LSB
 16

	)

348 
	#ADC_JDATA_MSK
 (0xfff‡<< 
ADC_JDATA_LSB
)

	)

349 
	#ADC_DATA_MSK
 (0xfff‡<< 
ADC_DA
)

	)

350 
	#ADC_ADC2DATA_MSK
 (0xfff‡<< 
ADC_ADC2DATA_LSB
)

	)

357 
BEGIN_DECLS


359 
adc_powî_⁄
(
uöt32_t
 
adc
);

360 
adc_powî_off
(
uöt32_t
 
adc
);

361 
adc_íabÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
);

362 
adc_dißbÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
);

363 
adc_íabÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
);

364 
adc_dißbÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
);

365 
adc_íabÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
);

366 
adc_dißbÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
);

367 
adc_íabÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
);

368 
adc_dißbÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
);

369 
adc_íabÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
);

370 
adc_dißbÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
);

371 
adc_íabÀ_™Æog_w©chdog_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
);

372 
adc_íabÀ_™Æog_w©chdog_⁄_£À˘ed_ch™√l
(
uöt32_t
 
adc
,

373 
uöt8_t
 
ch™√l
);

374 
adc_íabÀ_sˇn_mode
(
uöt32_t
 
adc
);

375 
adc_dißbÀ_sˇn_mode
(
uöt32_t
 
adc
);

376 
adc_íabÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
);

377 
adc_dißbÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
);

378 
adc_íabÀ_awd_öãºu±
(
uöt32_t
 
adc
);

379 
adc_dißbÀ_awd_öãºu±
(
uöt32_t
 
adc
);

380 
adc_íabÀ_eoc_öãºu±
(
uöt32_t
 
adc
);

381 
adc_dißbÀ_eoc_öãºu±
(
uöt32_t
 
adc
);

382 
adc_£t_À·_Æig√d
(
uöt32_t
 
adc
);

383 
adc_£t_right_Æig√d
(
uöt32_t
 
adc
);

384 
boﬁ
 
adc_eoc
(
uöt32_t
 
adc
);

385 
boﬁ
 
adc_eoc_öje˘ed
(
uöt32_t
 
adc
);

386 
uöt32_t
 
adc_ªad_ªguœr
(uöt32_à
adc
);

387 
uöt32_t
 
adc_ªad_öje˘ed
(uöt32_à
adc
, 
uöt8_t
 
ªg
);

388 
adc_£t_c⁄töuous_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
);

389 
adc_£t_sögÀ_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
);

390 
adc_£t_ªguœr_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[]);

391 
adc_£t_öje˘ed_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[]);

392 
adc_£t_öje˘ed_off£t
(
uöt32_t
 
adc
, 
uöt8_t
 
ªg
, uöt32_à
off£t
);

393 
adc_£t_w©chdog_high_thªshﬁd
(
uöt32_t
 
adc
, 
uöt16_t
 
thªshﬁd
);

394 
adc_£t_w©chdog_low_thªshﬁd
(
uöt32_t
 
adc
, 
uöt16_t
 
thªshﬁd
);

395 
adc_°¨t_c⁄vîsi⁄_ªguœr
(
uöt32_t
 
adc
);

396 
adc_°¨t_c⁄vîsi⁄_öje˘ed
(
uöt32_t
 
adc
);

397 
adc_íabÀ_dma
(
uöt32_t
 
adc
);

398 
adc_dißbÀ_dma
(
uöt32_t
 
adc
);

401 
adc_£t_ßm∂e_time
(
uöt32_t
 
adc
, 
uöt8_t
 
ch™√l
, uöt8_à
time
);

402 
adc_£t_ßm∂e_time_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
, 
uöt8_t
 
time
);

403 
adc_dißbÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
);

404 
adc_dißbÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
);

406 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/adc_common_v2.h

33 #ifde‡
LIBOPENCM3_ADC_H


35 #i‚de‡
LIBOPENCM3_ADC_COMMON_V2_H


36 
	#LIBOPENCM3_ADC_COMMON_V2_H


	)

40 
	#ADC_ISR
(
adc
Ë
	`MMIO32
(◊dcË+ 0x00)

	)

42 
	#ADC_IER
(
adc
Ë
	`MMIO32
(◊dcË+ 0x04)

	)

44 
	#ADC_CR
(
adc
Ë
	`MMIO32
(◊dcË+ 0x08)

	)

46 
	#ADC_CFGR1
(
adc
Ë
	`MMIO32
(◊dcË+ 0x0C)

	)

48 
	#ADC_CFGR2
(
adc
Ë
	`MMIO32
(◊dcË+ 0x10)

	)

50 
	#ADC_SMPR1
(
adc
Ë
	`MMIO32
(◊dcË+ 0x14)

	)

52 
	#ADC_TR1
(
adc
Ë
	`MMIO32
(◊dcË+ 0x20)

	)

54 
	#ADC_DR
(
adc
Ë
	`MMIO32
(◊dcË+ 0x40)

	)

58 
	#ADC_CCR
(
adc
Ë
	`MMIO32
(◊dcË+ 0x300 + 0x8)

	)

65 
	#ADC_ISR_AWD1
 (1 << 7)

	)

66 
	#ADC_ISR_OVR
 (1 << 4)

	)

67 
	#ADC_ISR_EOS
 (1 << 3)

68 
	#ADC_ISR_EOSEQ
 
ADC_ISR_EOS


	)

69 
	#ADC_ISR_EOC
 (1 << 2)

	)

70 
	#ADC_ISR_EOSMP
 (1 << 1)

	)

71 
	#ADC_ISR_ADRDY
 (1 << 0)

	)

76 
	#ADC_IER_AWD1IE
 (1 << 7)

	)

78 
	#ADC_IER_OVRIE
 (1 << 4)

	)

80 
	#ADC_IER_EOSIE
 (1 << 3)

	)

81 
	#ADC_IER_EOSEQIE
 
ADC_IER_EOSIE


	)

83 
	#ADC_IER_EOCIE
 (1 << 2)

	)

85 
	#ADC_IER_EOSMPIE
 (1 << 1)

	)

87 
	#ADC_IER_ADRDYIE
 (1 << 0)

	)

92 
	#ADC_CR_ADCAL
 (1 << 31)

	)

94 
	#ADC_CR_ADSTP
 (1 << 4)

	)

96 
	#ADC_CR_ADSTART
 (1 << 2)

	)

98 
	#ADC_CR_ADDIS
 (1 << 1)

	)

100 
	#ADC_CR_ADEN
 (1 << 0)

	)

105 
	#ADC_CFGR1_AWD1CH_SHIFT
 26

	)

106 
	#ADC_CFGR1_AWD1CH
 (0x1F << 
ADC_CFGR1_AWD1CH_SHIFT
)

	)

107 
	#ADC_CFGR1_AWD1CH_VAL
(
x
Ë((xË<< 
ADC_CFGR1_AWD1CH_SHIFT
)

	)

110 
	#ADC_CFGR1_AWD1EN
 (1 << 23)

	)

113 
	#ADC_CFGR1_AWD1SGL
 (1 << 22)

	)

116 
	#ADC_CFGR1_DISCEN
 (1 << 16)

	)

119 
	#ADC_CFGR1_AUTDLY
 (1 << 14)

	)

122 
	#ADC_CFGR1_CONT
 (1 << 13)

	)

125 
	#ADC_CFGR1_OVRMOD
 (1 << 12)

	)

131 
	#ADC_CFGR1_EXTEN_DISABLED
 (0x0 << 10)

	)

132 
	#ADC_CFGR1_EXTEN_RISING_EDGE
 (0x1 << 10)

	)

133 
	#ADC_CFGR1_EXTEN_FALLING_EDGE
 (0x2 << 10)

	)

134 
	#ADC_CFGR1_EXTEN_BOTH_EDGES
 (0x3 << 10)

	)

136 
	#ADC_CFGR1_EXTEN_MASK
 (0x3 << 10)

	)

139 
	#ADC_CFGR1_ALIGN
 (1 << 5)

	)

142 
	#ADC_CFGR1_RES_12_BIT
 (0x0 << 3)

	)

143 
	#ADC_CFGR1_RES_10_BIT
 (0x1 << 3)

	)

144 
	#ADC_CFGR1_RES_8_BIT
 (0x2 << 3)

	)

145 
	#ADC_CFGR1_RES_6_BIT
 (0x3 << 3)

	)

146 
	#ADC_CFGR1_RES_MASK
 (0x3 << 3)

	)

149 
	#ADC_CFGR1_DMACFG
 (1 << 1)

	)

152 
	#ADC_CFGR1_DMAEN
 (1 << 0)

	)

156 
	#ADC_TR1_LT_SHIFT
 0

	)

157 
	#ADC_TR1_LT
 (0xFFF << 
ADC_TR1_LT_SHIFT
)

	)

158 
	#ADC_TR1_LT_VAL
(
x
Ë((xË<< 
ADC_TR1_LT_SHIFT
)

	)

160 
	#ADC_TR1_HT_SHIFT
 16

	)

161 
	#ADC_TR1_HT
 (0xFFF << 
ADC_TR1_HT_SHIFT
)

	)

162 
	#ADC_TR1_HT_VAL
(
x
Ë((xË<< 
ADC_TR1_HT_SHIFT
)

	)

167 
	#ADC_CCR_VBATEN
 (1 << 24)

	)

168 
	#ADC_CCR_TSEN
 (1 << 23)

	)

169 
	#ADC_CCR_VREFEN
 (1 << 22)

	)

174 
BEGIN_DECLS


176 
adc_powî_⁄_async
(
uöt32_t
 
adc
);

177 
adc_powî_⁄
(
uöt32_t
 
adc
);

178 
boﬁ
 
adc_is_powî_⁄
(
uöt32_t
 
adc
);

179 
adc_powî_off_async
(
uöt32_t
 
adc
);

180 
adc_powî_off
(
uöt32_t
 
adc
);

181 
boﬁ
 
adc_is_powî_off
(
uöt32_t
 
adc
);

182 
adc_ˇlibøã_async
(
uöt32_t
 
adc
);

183 
boﬁ
 
adc_is_ˇlibøtög
(
uöt32_t
 
adc
);

184 
adc_ˇlibøã
(
uöt32_t
 
adc
);

185 
adc_£t_c⁄töuous_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
);

186 
adc_£t_sögÀ_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
);

187 
adc_£t_ªguœr_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[]);

188 
adc_£t_ßm∂e_time_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
, 
uöt8_t
 
time
);

189 
adc_íabÀ_ãm≥øtuª_£ns‹
();

190 
adc_dißbÀ_ãm≥øtuª_£ns‹
();

191 
adc_íabÀ_vªföt
();

192 
adc_dißbÀ_vªföt
();

193 
adc_£t_ªsﬁuti⁄
(
uöt32_t
 
adc
, 
uöt16_t
 
ªsﬁuti⁄
);

194 
adc_£t_À·_Æig√d
(
uöt32_t
 
adc
);

195 
adc_£t_right_Æig√d
(
uöt32_t
 
adc
);

196 
adc_íabÀ_dma
(
uöt32_t
 
adc
);

197 
adc_dißbÀ_dma
(
uöt32_t
 
adc
);

198 
boﬁ
 
adc_eoc
(
uöt32_t
 
adc
);

199 
boﬁ
 
adc_eos
(
uöt32_t
 
adc
);

200 
adc_íabÀ_eoc_öãºu±
(
uöt32_t
 
adc
);

201 
adc_dißbÀ_eoc_öãºu±
(
uöt32_t
 
adc
);

202 
adc_íabÀ_ovîrun_öãºu±
(
uöt32_t
 
adc
);

203 
adc_dißbÀ_ovîrun_öãºu±
(
uöt32_t
 
adc
);

204 
boﬁ
 
adc_gë_ovîrun_Êag
(
uöt32_t
 
adc
);

205 
adc_˛ór_ovîrun_Êag
(
uöt32_t
 
adc
);

206 
uöt32_t
 
adc_ªad_ªguœr
(uöt32_à
adc
);

207 
adc_°¨t_c⁄vîsi⁄_ªguœr
(
uöt32_t
 
adc
);

209 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/adc_common_v2_multi.h

33 #ifde‡
LIBOPENCM3_ADC_H


35 #i‚de‡
LIBOPENCM3_ADC_COMMON_V2_MULTI_H


36 
	#LIBOPENCM3_ADC_COMMON_V2_MULTI_H


	)

47 
	#ADC_SMPR2
(
adc
Ë
	`MMIO32
(◊dcË+ 0x18)

	)

49 
	#ADC_TR2
(
adc
Ë
	`MMIO32
(◊dcË+ 0x24)

	)

51 
	#ADC_TR3
(
adc
Ë
	`MMIO32
(◊dcË+ 0x28)

	)

53 
	#ADC_SQR1
(
adc
Ë
	`MMIO32
(◊dcË+ 0x30)

	)

54 
	#ADC_SQR2
(
adc
Ë
	`MMIO32
(◊dcË+ 0x34)

	)

55 
	#ADC_SQR3
(
adc
Ë
	`MMIO32
(◊dcË+ 0x38)

	)

56 
	#ADC_SQR4
(
adc
Ë
	`MMIO32
(◊dcË+ 0x3C)

	)

59 
	#ADC_JSQR
(
adc
Ë
	`MMIO32
(◊dcË+ 0x30)

	)

62 
	#ADC_OFR1
(
adc
Ë
	`MMIO32
(◊dcË+ 0x60)

	)

63 
	#ADC_OFR2
(
adc
Ë
	`MMIO32
(◊dcË+ 0x64)

	)

64 
	#ADC_OFR3
(
adc
Ë
	`MMIO32
(◊dcË+ 0x68)

	)

65 
	#ADC_OFR4
(
adc
Ë
	`MMIO32
(◊dcË+ 0x6C)

	)

68 
	#ADC_JDR1
(
adc
Ë
	`MMIO32
(◊dcË+ 0x80)

	)

69 
	#ADC_JDR2
(
adc
Ë
	`MMIO32
(◊dcË+ 0x84)

	)

70 
	#ADC_JDR3
(
adc
Ë
	`MMIO32
(◊dcË+ 0x88)

	)

71 
	#ADC_JDR4
(
adc
Ë
	`MMIO32
(◊dcË+ 0x8C)

	)

74 
	#ADC_AWD2CR
(
adc
Ë
	`MMIO32
(◊dcË+ 0xA0)

	)

76 
	#ADC_AWD3CR
(
adc
Ë
	`MMIO32
(◊dcË+ 0xA4)

	)

79 
	#ADC_DIFSEL
(
adc
Ë
	`MMIO32
(◊dcË+ 0xB0)

	)

82 
	#ADC_CALFACT
(
adc
Ë
	`MMIO32
(◊dcË+ 0xB4)

	)

85 
	#ADC_CSR
(
adc
Ë
	`MMIO32
(◊dcË+ 0x300 + 0x0)

	)

86 
	#ADC_CDR
(
adc
Ë
	`MMIO32
(◊dcË+ 0x300 + 0xc)

	)

92 
	#ADC_ISR_JQOVF
 (1 << 10)

	)

94 
	#ADC_ISR_AWD3
 (1 << 9)

	)

96 
	#ADC_ISR_AWD2
 (1 << 8)

	)

98 
	#ADC_ISR_JEOS
 (1 << 6)

	)

100 
	#ADC_ISR_JEOC
 (1 << 5)

	)

105 
	#ADC_IER_JQOVFIE
 (1 << 10)

	)

107 
	#ADC_IER_AWD3IE
 (1 << 9)

	)

109 
	#ADC_IER_AWD2IE
 (1 << 8)

	)

111 
	#ADC_IER_JEOSIE
 (1 << 6)

	)

113 
	#ADC_IER_JEOCIE
 (1 << 5)

	)

118 
	#ADC_CR_ADCALDIF
 (1 << 30)

	)

120 
	#ADC_CR_JADSTP
 (1 << 5)

	)

122 
	#ADC_CR_JADSTART
 (1 << 3)

	)

127 
	#ADC_CFGR1_JAUTO
 (1 << 25)

	)

130 
	#ADC_CFGR1_JAWD1EN
 (1 << 24)

	)

133 
	#ADC_CFGR1_JQM
 (1 << 21)

	)

136 
	#ADC_CFGR1_JDISCEN
 (1 << 20)

	)

139 
	#ADC_CFGR1_DISCNUM_SHIFT
 17

	)

140 
	#ADC_CFGR1_DISCNUM_MASK
 (0x7 << 
ADC_CFGR1_DISCNUM_SHIFT
)

	)

141 
	#ADC_CFGR1_DISCNUM_VAL
(
x
Ë(((xË- 1Ë<< 
ADC_CFGR1_DISCNUM_SHIFT
)

	)

144 
	#ADC_CFGR1_EXTSEL_SHIFT
 6

	)

145 
	#ADC_CFGR1_EXTSEL_MASK
 (0x‡<< 
ADC_CFGR1_EXTSEL_SHIFT
)

	)

146 
	#ADC_CFGR1_EXTSEL_VAL
(
x
Ë((xË<< 
ADC_CFGR1_EXTSEL_SHIFT
)

	)

150 
	#ADC_SQR1_L_SHIFT
 0

	)

151 
	#ADC_SQR1_L_MASK
 0xf

	)

152 
	#ADC_SQRx_SQx_MASK
 0x1f

	)

153 
	#ADC_SQR1_SQ1_SHIFT
 6

	)

154 
	#ADC_SQR1_SQ2_SHIFT
 12

	)

155 
	#ADC_SQR1_SQ3_SHIFT
 18

	)

156 
	#ADC_SQR1_SQ4_SHIFT
 24

	)

157 
	#ADC_SQR2_SQ5_SHIFT
 0

	)

158 
	#ADC_SQR2_SQ6_SHIFT
 6

	)

159 
	#ADC_SQR2_SQ7_SHIFT
 12

	)

160 
	#ADC_SQR2_SQ8_SHIFT
 18

	)

161 
	#ADC_SQR2_SQ9_SHIFT
 24

	)

162 
	#ADC_SQR3_SQ10_SHIFT
 0

	)

163 
	#ADC_SQR3_SQ11_SHIFT
 6

	)

164 
	#ADC_SQR3_SQ12_SHIFT
 12

	)

165 
	#ADC_SQR3_SQ13_SHIFT
 18

	)

166 
	#ADC_SQR3_SQ14_SHIFT
 24

	)

167 
	#ADC_SQR4_SQ15_SHIFT
 0

	)

168 
	#ADC_SQR4_SQ16_SHIFT
 6

	)

172 
BEGIN_DECLS


174 
adc_£t_ßm∂e_time
(
uöt32_t
 
adc
, 
uöt8_t
 
ch™√l
, uöt8_à
time
);

175 
adc_íabÀ_ªguœt‹
(
uöt32_t
 
adc
);

176 
adc_dißbÀ_ªguœt‹
(
uöt32_t
 
adc
);

178 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/adc_common_v2_single.h

40 #ifde‡
LIBOPENCM3_ADC_H


42 #i‚de‡
LIBOPENCM3_ADC_COMMON_V2_SINGLE_H


43 
	#LIBOPENCM3_ADC_COMMON_V2_SINGLE_H


	)

47 
	#ADC_CHSELR
(
adc
Ë
	`MMIO32
(◊dcË+ 0x28)

	)

52 
	#ADC_CFGR1_WAIT
 (1<<14)

	)

54 
	#ADC_CFGR1_AUTOFF
 (1 << 15)

	)

57 
	#ADC_CFGR1_EXTSEL_SHIFT
 6

	)

58 
	#ADC_CFGR1_EXTSEL
 (0x7 << 
ADC_CFGR1_EXTSEL_SHIFT
)

	)

59 
	#ADC_CFGR1_EXTSEL_VAL
(
x
Ë((xË<< 
ADC_CFGR1_EXTSEL_SHIFT
)

	)

61 
	#ADC_CFGR1_SCANDIR
 (1 << 2)

	)

65 
	#ADC_CHSELR_CHSEL
(
x
Ë(1 << (x))

	)

70 
BEGIN_DECLS


72 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/crc_common_all.h

31 #ifde‡
LIBOPENCM3_CRC_H


33 #i‚de‡
LIBOPENCM3_CRC_COMMON_ALL_H


34 
	#LIBOPENCM3_CRC_COMMON_ALL_H


	)

47 
	#CRC_DR
 
	`MMIO32
(
CRC_BASE
 + 0x00)

	)

50 
	#CRC_IDR
 
	`MMIO32
(
CRC_BASE
 + 0x04)

	)

53 
	#CRC_CR
 
	`MMIO32
(
CRC_BASE
 + 0x08)

	)

73 
	#CRC_CR_RESET
 (1 << 0)

	)

84 
BEGIN_DECLS


91 
¸c_ª£t
();

98 
uöt32_t
 
¸c_ˇlcuœã
(uöt32_à
d©a
);

106 
uöt32_t
 
¸c_ˇlcuœã_block
(uöt32_à*
d©≠
, 
size
);

108 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/crc_v2.h

31 #ifde‡
LIBOPENCM3_CRC_H


33 #i‚de‡
LIBOPENCM3_CRC_V2_H


34 
	#LIBOPENCM3_CRC_V2_H


	)

38 
	~<lib›ícm3/°m32/comm⁄/¸c_comm⁄_Æl.h
>

49 
	#CRC_DR8
 
	`MMIO8
(
CRC_BASE
 + 0x00)

	)

51 
	#CRC_DR16
 
	`MMIO16
(
CRC_BASE
 + 0x00)

	)

54 
	#CRC_INIT
 
	`MMIO32
(
CRC_BASE
 + 0x10)

	)

57 
	#CRC_POL
 
	`MMIO32
(
CRC_BASE
 + 0x14)

	)

64 
	#CRC_CR_REV_OUT
 (1 << 7)

	)

66 
	#CRC_CR_REV_IN_SHIFT
 5

	)

67 
	#CRC_CR_REV_IN
 (3 << 
CRC_CR_REV_IN_SHIFT
)

	)

68 
	#CRC_CR_REV_IN_NONE
 (0 << 
CRC_CR_REV_IN_SHIFT
)

	)

69 
	#CRC_CR_REV_IN_BYTE
 (1 << 
CRC_CR_REV_IN_SHIFT
)

	)

70 
	#CRC_CR_REV_IN_HALF
 (2 << 
CRC_CR_REV_IN_SHIFT
)

	)

71 
	#CRC_CR_REV_IN_WORD
 (3 << 
CRC_CR_REV_IN_SHIFT
)

	)

73 
	#CRC_CR_POLYSIZE_SHIFT
 3

	)

74 
	#CRC_CR_POLYSIZE
 (3 << 
CRC_CR_POLYSIZE_SHIFT
)

	)

75 
	#CRC_CR_POLYSIZE_32
 (0 << 
CRC_CR_POLYSIZE_SHIFT
)

	)

76 
	#CRC_CR_POLYSIZE_16
 (1 << 
CRC_CR_POLYSIZE_SHIFT
)

	)

77 
	#CRC_CR_POLYSIZE_8
 (2 << 
CRC_CR_POLYSIZE_SHIFT
)

	)

78 
	#CRC_CR_POLYSIZE_7
 (3 << 
CRC_CR_POLYSIZE_SHIFT
)

	)

81 
	#CRC_POL_DEFAULT
 0x04C11DB7

	)

92 
BEGIN_DECLS


94 
¸c_ªvî£_ouçut_íabÀ
();

95 
¸c_ªvî£_ouçut_dißbÀ
();

97 
¸c_£t_ªvî£_öput
(
uöt32_t
 
ªvî£_ö
);

98 
¸c_£t_pﬁysize
(
uöt32_t
 
pﬁysize
);

100 
¸c_£t_pﬁynomül
(
uöt32_t
 
pﬁynomül
);

101 
¸c_£t_öôül
(
uöt32_t
 
öôül
);

103 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/crs_common_all.h

32 #i‚de‡
LIBOPENCM3_CRS_H


33 
	#LIBOPENCM3_CRS_H


	)

40 
	#CRS
 
CRS_BASE


	)

46 
	#CRS_CR
 
	`MMIO32
(
CRS_BASE
 + 0x00)

	)

47 
	#CRS_CFGR
 
	`MMIO32
(
CRS_BASE
 + 0x04)

	)

48 
	#CRS_ISR
 
	`MMIO32
(
CRS_BASE
 + 0x08)

	)

49 
	#CRS_ICR
 
	`MMIO32
(
CRS_BASE
 + 0x0c)

	)

57 
	#CRS_CR_TRIM_SHIFT
 8

	)

58 
	#CRS_CR_TRIM
 (0x3F << 
CRS_CR_TRIM_SHIFT
)

	)

60 
	#CRS_CR_SWSYNC
 (1 << 7)

	)

61 
	#CRS_CR_AUTOTRIMEN
 (1 << 6)

	)

62 
	#CRS_CR_CEN
 (1 << 5)

	)

63 
	#CRS_CR_ESYNCIE
 (1 << 3)

	)

64 
	#CRS_CR_ERRIE
 (1 << 2)

	)

65 
	#CRS_CR_SYNCWARNIE
 (1 << 1)

	)

66 
	#CRS_CR_SYNCOKIE
 (1 << 0)

	)

70 
	#CRS_CFGR_SYNCPOL
 (1 << 31)

	)

72 
	#CRS_CFGR_SYNCSRC_SHIFT
 28

	)

73 
	#CRS_CFGR_SYNCSRC
 (3 << 
CRS_CFGR_SYNCSRC_SHIFT
)

	)

74 
	#CRS_CFGR_SYNCSRC_GPIO
 (0 << 
CRS_CFGR_SYNCSRC_SHIFT
)

	)

75 
	#CRS_CFGR_SYNCSRC_LSE
 (1 << 
CRS_CFGR_SYNCSRC_SHIFT
)

	)

76 
	#CRS_CFGR_SYNCSRC_USB_SOF
 (2 << 
CRS_CFGR_SYNCSRC_SHIFT
)

	)

78 
	#CRS_CFGR_SYNCDIV_SHIFT
 24

	)

79 
	#CRS_CFGR_SYNCDIV
 (7 << 
CRS_CFGR_SYNCDIV_SHIFT
)

	)

80 
	#CRS_CFGR_SYNCDIV_NODIV
 (0 << 
CRS_CFGR_SYNCDIV_SHIFT
)

	)

81 
	#CRS_CFGR_SYNCDIV_DIV2
 (1 << 
CRS_CFGR_SYNCDIV_SHIFT
)

	)

82 
	#CRS_CFGR_SYNCDIV_DIV4
 (2 << 
CRS_CFGR_SYNCDIV_SHIFT
)

	)

83 
	#CRS_CFGR_SYNCDIV_DIV8
 (3 << 
CRS_CFGR_SYNCDIV_SHIFT
)

	)

84 
	#CRS_CFGR_SYNCDIV_DIV16
 (4 << 
CRS_CFGR_SYNCDIV_SHIFT
)

	)

85 
	#CRS_CFGR_SYNCDIV_DIV32
 (5 << 
CRS_CFGR_SYNCDIV_SHIFT
)

	)

86 
	#CRS_CFGR_SYNCDIV_DIV64
 (6 << 
CRS_CFGR_SYNCDIV_SHIFT
)

	)

87 
	#CRS_CFGR_SYNCDIV_DIV128
 (7 << 
CRS_CFGR_SYNCDIV_SHIFT
)

	)

89 
	#CRS_CFGR_FELIM_SHIFT
 16

	)

90 
	#CRS_CFGR_FELIM
 (0xFF << 
CRS_CFGR_FELIM_SHIFT
)

	)

91 
	#CRS_CFGR_FELIM_VAL
(
x
Ë((xË<< 
CRS_CFGR_FELIM_SHIFT
)

	)

93 
	#CRS_CFGR_RELOAD_SHIFT
 0

	)

94 
	#CRS_CFGR_RELOAD
 (0xFFFF << 
CRS_CFGR_RELOAD_SHIFT
)

	)

95 
	#CRS_CFGR_RELOAD_VAL
(
x
Ë((xË<< 
CRS_CFGR_RELOAD_SHIFT
)

	)

99 
	#CRS_ISR_FECAP_SHIFT
 16

	)

100 
	#CRS_ISR_FECAP
 (0xFFFF << 
CRS_ISR_FECAP_SHIFT
)

	)

102 
	#CRS_ISR_FEDIR
 (1 << 15)

	)

103 
	#CRS_ISR_TRIMOVF
 (1 << 10)

	)

104 
	#CRS_ISR_SYNCMISS
 (1 << 9)

	)

105 
	#CRS_ISR_SYNCERR
 (1 << 8)

	)

106 
	#CRS_ISR_ESYNCF
 (1 << 3)

	)

107 
	#CRS_ISR_ERRF
 (1 << 2)

	)

108 
	#CRS_ISR_SYNCWARNF
 (1 << 1)

	)

109 
	#CRS_ISR_SYNCOOKF
 (1 << 0)

	)

113 
	#CRS_ICR_ESYNCC
 (1 << 3)

	)

114 
	#CRS_ICR_ERRC
 (1 << 2)

	)

115 
	#CRS_ICR_SYNCWARNC
 (1 << 1)

	)

116 
	#CRS_ICR_SYNCOKC
 (1 << 0)

	)

126 
BEGIN_DECLS


128 
¸s_autŸrim_usb_íabÀ
();

130 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/crypto_common_f24.h

97 #ifde‡
LIBOPENCM3_CRYPTO_H


100 #i‚de‡
LIBOPENCM3_CRYPTO_COMMON_F24_H


101 
	#LIBOPENCM3_CRYPTO_COMMON_F24_H


	)

114 
	#CRYP
 
CRYP_BASE


	)

117 
	#CRYP_CR
 
	`MMIO32
(
CRYP_BASE
 + 0x00)

	)

120 
	#CRYP_SR
 
	`MMIO32
(
CRYP_BASE
 + 0x04)

	)

123 
	#CRYP_DIN
 
	`MMIO32
(
CRYP_BASE
 + 0x08)

	)

126 
	#CRYP_DOUT
 
	`MMIO32
(
CRYP_BASE
 + 0x0C)

	)

129 
	#CRYP_DMACR
 
	`MMIO32
(
CRYP_BASE
 + 0x10)

	)

132 
	#CRYP_IMSCR
 
	`MMIO32
(
CRYP_BASE
 + 0x14)

	)

135 
	#CRYP_RISR
 
	`MMIO32
(
CRYP_BASE
 + 0x18)

	)

138 
	#CRYP_MISR
 
	`MMIO32
(
CRYP_BASE
 + 0x1C)

	)

141 
	#CRYP_KR
(
i
Ë
	`MMIO64
(
CRYP_BASE
 + 0x20 + (iË* 8)

	)

144 
	#CRYP_IVR
(
i
Ë
	`MMIO32
(
CRYP_BASE
 + 0x40 + (iË* 8)

	)

149 
	#CRYP_CR_ALGODIR
 (1 << 2)

	)

152 
	#CRYP_CR_ALGOMODE_SHIFT
 3

	)

153 
	#CRYP_CR_ALGOMODE
 (7 << 
CRYP_CR_ALGOMODE_SHIFT
)

	)

154 
	#CRYP_CR_ALGOMODE_TDES_ECB
 (0 << 
CRYP_CR_ALGOMODE_SHIFT
)

	)

155 
	#CRYP_CR_ALGOMODE_TDES_CBC
 (1 << 
CRYP_CR_ALGOMODE_SHIFT
)

	)

156 
	#CRYP_CR_ALGOMODE_DES_ECB
 (2 << 
CRYP_CR_ALGOMODE_SHIFT
)

	)

157 
	#CRYP_CR_ALGOMODE_DES_CBC
 (3 << 
CRYP_CR_ALGOMODE_SHIFT
)

	)

158 
	#CRYP_CR_ALGOMODE_AES_ECB
 (4 << 
CRYP_CR_ALGOMODE_SHIFT
)

	)

159 
	#CRYP_CR_ALGOMODE_AES_CBC
 (5 << 
CRYP_CR_ALGOMODE_SHIFT
)

	)

160 
	#CRYP_CR_ALGOMODE_AES_CTR
 (6 << 
CRYP_CR_ALGOMODE_SHIFT
)

	)

161 
	#CRYP_CR_ALGOMODE_AES_PREP
 (7 << 
CRYP_CR_ALGOMODE_SHIFT
)

	)

164 
	#CRYP_CR_DATATYPE_SHIFT
 6

	)

165 
	#CRYP_CR_DATATYPE
 (3 << 
CRYP_CR_DATATYPE_SHIFT
)

	)

166 
	#CRYP_CR_DATATYPE_32
 (0 << 
CRYP_CR_DATATYPE_SHIFT
)

	)

167 
	#CRYP_CR_DATATYPE_16
 (1 << 
CRYP_CR_DATATYPE_SHIFT
)

	)

168 
	#CRYP_CR_DATATYPE_8
 (2 << 
CRYP_CR_DATATYPE_SHIFT
)

	)

169 
	#CRYP_CR_DATATYPE_BIT
 (3 << 
CRYP_CR_DATATYPE_SHIFT
)

	)

172 
	#CRYP_CR_KEYSIZE_SHIFT
 8

	)

173 
	#CRYP_CR_KEYSIZE
 (3 << 
CRYP_CR_KEYSIZE_SHIFT
)

	)

174 
	#CRYP_CR_KEYSIZE_128
 (0 << 
CRYP_CR_KEYSIZE_SHIFT
)

	)

175 
	#CRYP_CR_KEYSIZE_192
 (1 << 
CRYP_CR_KEYSIZE_SHIFT
)

	)

176 
	#CRYP_CR_KEYSIZE_256
 (2 << 
CRYP_CR_KEYSIZE_SHIFT
)

	)

179 
	#CRYP_CR_FFLUSH
 (1 << 14)

	)

182 
	#CRYP_CR_CRYPEN
 (1 << 15)

	)

187 
	#CRYP_SR_IFEM
 (1 << 0)

	)

190 
	#CRYP_SR_IFNF
 (1 << 1)

	)

193 
	#CRYP_SR_OFNE
 (1 << 2)

	)

196 
	#CRYP_SR_OFFU
 (1 << 3)

	)

199 
	#CRYP_SR_BUSY
 (1 << 4)

	)

204 
	#CRYP_DMACR_DIEN
 (1 << 0)

	)

207 
	#CRYP_DMACR_DOEN
 (1 << 1)

	)

212 
	#CRYP_IMSCR_INIM
 (1 << 0)

	)

215 
	#CRYP_IMSCR_OUTIM
 (1 << 1)

	)

220 
	#CRYP_RISR_INRIS
 (1 << 0)

	)

223 
	#CRYP_RISR_OUTRIS
 (1 << 0)

	)

228 
	#CRYP_MISR_INMIS
 (1 << 0)

	)

231 
	#CRYP_MISR_OUTMIS
 (1 << 0)

	)

243 
	e¸y±o_mode
 {

244 
	mENCRYPT_TDES_ECB
 = 
CRYP_CR_ALGOMODE_TDES_ECB
,

245 
	mENCRYPT_TDES_CBC
 = 
CRYP_CR_ALGOMODE_TDES_CBC
,

246 
	mENCRYPT_DES_ECB
 = 
CRYP_CR_ALGOMODE_DES_ECB
,

247 
	mENCRYPT_DES_CBC
 = 
CRYP_CR_ALGOMODE_DES_CBC
,

248 
	mENCRYPT_AES_ECB
 = 
CRYP_CR_ALGOMODE_AES_ECB
,

249 
	mENCRYPT_AES_CBC
 = 
CRYP_CR_ALGOMODE_AES_CBC
,

250 
	mENCRYPT_AES_CTR
 = 
CRYP_CR_ALGOMODE_AES_CTR
,

251 
	mDECRYPT_TDES_ECB
 = 
CRYP_CR_ALGOMODE_TDES_ECB
 | 
CRYP_CR_ALGODIR
,

252 
	mDECRYPT_TDES_CBC
 = 
CRYP_CR_ALGOMODE_TDES_CBC
 | 
CRYP_CR_ALGODIR
,

253 
	mDECRYPT_DES_ECB
 = 
CRYP_CR_ALGOMODE_DES_ECB
 | 
CRYP_CR_ALGODIR
,

254 
	mDECRYPT_DES_CBC
 = 
CRYP_CR_ALGOMODE_DES_CBC
 | 
CRYP_CR_ALGODIR
,

255 
	mDECRYPT_AES_ECB
 = 
CRYP_CR_ALGOMODE_AES_ECB
 | 
CRYP_CR_ALGODIR
,

256 
	mDECRYPT_AES_CBC
 = 
CRYP_CR_ALGOMODE_AES_CBC
 | 
CRYP_CR_ALGODIR
,

257 
	mDECRYPT_AES_CTR
 = 
CRYP_CR_ALGOMODE_AES_CTR
,

259 
	e¸y±o_keysize
 {

260 
	mCRYPTO_KEY_128BIT
 = 0,

261 
	mCRYPTO_KEY_192BIT
,

262 
	mCRYPTO_KEY_256BIT
,

264 
	e¸y±o_d©©y≥
 {

266 
	mCRYPTO_DATA_32BIT
 = 0,

267 
	mCRYPTO_DATA_16BIT
,

268 
	mCRYPTO_DATA_8BIT
,

269 
	mCRYPTO_DATA_BIT
,

272 
BEGIN_DECLS


273 
¸y±o_waô_busy
();

274 
¸y±o_£t_key
(
¸y±o_keysize
 
keysize
, 
uöt64_t
 
key
[]);

275 
¸y±o_£t_iv
(
uöt64_t
 
iv
[]);

276 
¸y±o_£t_d©©y≥
(
¸y±o_d©©y≥
 
d©©y≥
);

277 
¸y±o_£t_Æg‹ôhm
(
¸y±o_mode
 
mode
);

278 
¸y±o_°¨t
();

279 
¸y±o_°›
();

280 
uöt32_t
 
¸y±o_¥o˚ss_block
(uöt32_à*
öp
, uöt32_à*
ouç
, uöt32_à
Àngth
);

281 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/dac_common_all.h

34 #ifde‡
LIBOPENCM3_DAC_H


36 #i‚de‡
LIBOPENCM3_DAC_COMMON_ALL_H


37 
	#LIBOPENCM3_DAC_COMMON_ALL_H


	)

42 
	#DAC_CR
 
	`MMIO32
(
DAC_BASE
 + 0x00)

	)

45 
	#DAC_SWTRIGR
 
	`MMIO32
(
DAC_BASE
 + 0x04)

	)

48 
	#DAC_DHR12R1
 
	`MMIO32
(
DAC_BASE
 + 0x08)

	)

51 
	#DAC_DHR12L1
 
	`MMIO32
(
DAC_BASE
 + 0x0C)

	)

54 
	#DAC_DHR8R1
 
	`MMIO32
(
DAC_BASE
 + 0x10)

	)

57 
	#DAC_DHR12R2
 
	`MMIO32
(
DAC_BASE
 + 0x14)

	)

60 
	#DAC_DHR12L2
 
	`MMIO32
(
DAC_BASE
 + 0x18)

	)

63 
	#DAC_DHR8R2
 
	`MMIO32
(
DAC_BASE
 + 0x1C)

	)

66 
	#DAC_DHR12RD
 
	`MMIO32
(
DAC_BASE
 + 0x20)

	)

69 
	#DAC_DHR12LD
 
	`MMIO32
(
DAC_BASE
 + 0x24)

	)

72 
	#DAC_DHR8RD
 
	`MMIO32
(
DAC_BASE
 + 0x28)

	)

75 
	#DAC_DOR1
 
	`MMIO32
(
DAC_BASE
 + 0x2C)

	)

78 
	#DAC_DOR2
 
	`MMIO32
(
DAC_BASE
 + 0x30)

	)

85 
	#DAC_CR_DMAUDRIE2
 (1 << 29)

	)

88 
	#DAC_CR_DMAEN2
 (1 << 28)

	)

94 
	#DAC_CR_MAMP2_SHIFT
 24

	)

101 
	#DAC_CR_MAMP2_1
 (0x0 << 
DAC_CR_MAMP2_SHIFT
)

	)

102 
	#DAC_CR_MAMP2_2
 (0x1 << 
DAC_CR_MAMP2_SHIFT
)

	)

103 
	#DAC_CR_MAMP2_3
 (0x2 << 
DAC_CR_MAMP2_SHIFT
)

	)

104 
	#DAC_CR_MAMP2_4
 (0x3 << 
DAC_CR_MAMP2_SHIFT
)

	)

105 
	#DAC_CR_MAMP2_5
 (0x4 << 
DAC_CR_MAMP2_SHIFT
)

	)

106 
	#DAC_CR_MAMP2_6
 (0x5 << 
DAC_CR_MAMP2_SHIFT
)

	)

107 
	#DAC_CR_MAMP2_7
 (0x6 << 
DAC_CR_MAMP2_SHIFT
)

	)

108 
	#DAC_CR_MAMP2_8
 (0x7 << 
DAC_CR_MAMP2_SHIFT
)

	)

109 
	#DAC_CR_MAMP2_9
 (0x8 << 
DAC_CR_MAMP2_SHIFT
)

	)

110 
	#DAC_CR_MAMP2_10
 (0x9 << 
DAC_CR_MAMP2_SHIFT
)

	)

111 
	#DAC_CR_MAMP2_11
 (0xA << 
DAC_CR_MAMP2_SHIFT
)

	)

112 
	#DAC_CR_MAMP2_12
 (0xB << 
DAC_CR_MAMP2_SHIFT
)

	)

123 
	#DAC_CR_WAVE2_SHIFT
 22

	)

124 
	#DAC_CR_WAVE2_DIS
 (0x3 << 
DAC_CR_WAVE2_SHIFT
)

	)

133 
	#DAC_CR_WAVE2_NOISE
 (0x1 << 
DAC_CR_WAVE2_SHIFT
)

	)

134 
	#DAC_CR_WAVE2_TRI
 (0x2 << 
DAC_CR_WAVE2_SHIFT
)

	)

155 
	#DAC_CR_TSEL2_SHIFT
 19

	)

175 
	#DAC_CR_TSEL2_T6
 (0x0 << 
DAC_CR_TSEL2_SHIFT
)

	)

176 
	#DAC_CR_TSEL2_T3
 (0x1 << 
DAC_CR_TSEL2_SHIFT
)

	)

177 
	#DAC_CR_TSEL2_T8
 (0x1 << 
DAC_CR_TSEL2_SHIFT
)

	)

178 
	#DAC_CR_TSEL2_T7
 (0x2 << 
DAC_CR_TSEL2_SHIFT
)

	)

179 
	#DAC_CR_TSEL2_T5
 (0x3 << 
DAC_CR_TSEL2_SHIFT
)

	)

180 
	#DAC_CR_TSEL2_T15
 (0x3 << 
DAC_CR_TSEL2_SHIFT
)

	)

181 
	#DAC_CR_TSEL2_T2
 (0x4 << 
DAC_CR_TSEL2_SHIFT
)

	)

182 
	#DAC_CR_TSEL2_T4
 (0x5 << 
DAC_CR_TSEL2_SHIFT
)

	)

183 
	#DAC_CR_TSEL2_E9
 (0x6 << 
DAC_CR_TSEL2_SHIFT
)

	)

184 
	#DAC_CR_TSEL2_SW
 (0x7 << 
DAC_CR_TSEL2_SHIFT
)

	)

188 
	#DAC_CR_TEN2
 (1 << 18)

	)

191 
	#DAC_CR_BOFF2
 (1 << 17)

	)

194 
	#DAC_CR_EN2
 (1 << 16)

	)

198 
	#DAC_CR_DMAUDRIE1
 (1 << 13)

	)

201 
	#DAC_CR_DMAEN1
 (1 << 12)

	)

207 
	#DAC_CR_MAMP1_SHIFT
 8

	)

214 
	#DAC_CR_MAMP1_1
 (0x0 << 
DAC_CR_MAMP1_SHIFT
)

	)

215 
	#DAC_CR_MAMP1_2
 (0x1 << 
DAC_CR_MAMP1_SHIFT
)

	)

216 
	#DAC_CR_MAMP1_3
 (0x2 << 
DAC_CR_MAMP1_SHIFT
)

	)

217 
	#DAC_CR_MAMP1_4
 (0x3 << 
DAC_CR_MAMP1_SHIFT
)

	)

218 
	#DAC_CR_MAMP1_5
 (0x4 << 
DAC_CR_MAMP1_SHIFT
)

	)

219 
	#DAC_CR_MAMP1_6
 (0x5 << 
DAC_CR_MAMP1_SHIFT
)

	)

220 
	#DAC_CR_MAMP1_7
 (0x6 << 
DAC_CR_MAMP1_SHIFT
)

	)

221 
	#DAC_CR_MAMP1_8
 (0x7 << 
DAC_CR_MAMP1_SHIFT
)

	)

222 
	#DAC_CR_MAMP1_9
 (0x8 << 
DAC_CR_MAMP1_SHIFT
)

	)

223 
	#DAC_CR_MAMP1_10
 (0x9 << 
DAC_CR_MAMP1_SHIFT
)

	)

224 
	#DAC_CR_MAMP1_11
 (0xA << 
DAC_CR_MAMP1_SHIFT
)

	)

225 
	#DAC_CR_MAMP1_12
 (0xB << 
DAC_CR_MAMP1_SHIFT
)

	)

236 
	#DAC_CR_WAVE1_SHIFT
 6

	)

237 
	#DAC_CR_WAVE1_DIS
 (0x3 << 
DAC_CR_WAVE1_SHIFT
)

	)

247 
	#DAC_CR_WAVE1_NOISE
 (0x1 << 
DAC_CR_WAVE1_SHIFT
)

	)

248 
	#DAC_CR_WAVE1_TRI
 (0x2 << 
DAC_CR_WAVE1_SHIFT
)

	)

269 
	#DAC_CR_TSEL1_SHIFT
 3

	)

289 
	#DAC_CR_TSEL1_T6
 (0x0 << 
DAC_CR_TSEL1_SHIFT
)

	)

290 
	#DAC_CR_TSEL1_T3
 (0x1 << 
DAC_CR_TSEL1_SHIFT
)

	)

291 
	#DAC_CR_TSEL1_T8
 (0x1 << 
DAC_CR_TSEL1_SHIFT
)

	)

292 
	#DAC_CR_TSEL1_T7
 (0x2 << 
DAC_CR_TSEL1_SHIFT
)

	)

293 
	#DAC_CR_TSEL1_T5
 (0x3 << 
DAC_CR_TSEL1_SHIFT
)

	)

294 
	#DAC_CR_TSEL1_T15
 (0x3 << 
DAC_CR_TSEL1_SHIFT
)

	)

295 
	#DAC_CR_TSEL1_T2
 (0x4 << 
DAC_CR_TSEL1_SHIFT
)

	)

296 
	#DAC_CR_TSEL1_T4
 (0x5 << 
DAC_CR_TSEL1_SHIFT
)

	)

297 
	#DAC_CR_TSEL1_E9
 (0x6 << 
DAC_CR_TSEL1_SHIFT
)

	)

298 
	#DAC_CR_TSEL1_SW
 (0x7 << 
DAC_CR_TSEL1_SHIFT
)

	)

302 
	#DAC_CR_TEN1
 (1 << 2)

	)

305 
	#DAC_CR_BOFF1
 (1 << 1)

	)

308 
	#DAC_CR_EN1
 (1 << 0)

	)

314 
	#DAC_SWTRIGR_SWTRIG2
 (1 << 1)

	)

317 
	#DAC_SWTRIGR_SWTRIG1
 (1 << 0)

	)

321 
	#DAC_DHR12R1_DACC1DHR_LSB
 (1 << 0)

	)

322 
	#DAC_DHR12R1_DACC1DHR_MSK
 (0x0FFF << 0)

	)

326 
	#DAC_DHR12L1_DACC1DHR_LSB
 (1 << 4)

	)

327 
	#DAC_DHR12L1_DACC1DHR_MSK
 (0x0FFF << 4)

	)

331 
	#DAC_DHR8R1_DACC1DHR_LSB
 (1 << 0)

	)

332 
	#DAC_DHR8R1_DACC1DHR_MSK
 (0x00FF << 0)

	)

336 
	#DAC_DHR12R2_DACC2DHR_LSB
 (1 << 0)

	)

337 
	#DAC_DHR12R2_DACC2DHR_MSK
 (0x00FFF << 0)

	)

341 
	#DAC_DHR12L2_DACC2DHR_LSB
 (1 << 4)

	)

342 
	#DAC_DHR12L2_DACC2DHR_MSK
 (0x0FFF << 4)

	)

346 
	#DAC_DHR8R2_DACC2DHR_LSB
 (1 << 0)

	)

347 
	#DAC_DHR8R2_DACC2DHR_MSK
 (0x00FF << 0)

	)

351 
	#DAC_DHR12RD_DACC2DHR_LSB
 (1 << 16)

	)

352 
	#DAC_DHR12RD_DACC2DHR_MSK
 (0x0FFF << 16)

	)

353 
	#DAC_DHR12RD_DACC1DHR_LSB
 (1 << 0)

	)

354 
	#DAC_DHR12RD_DACC1DHR_MSK
 (0x0FFF << 0)

	)

358 
	#DAC_DHR12LD_DACC2DHR_LSB
 (1 << 16)

	)

359 
	#DAC_DHR12LD_DACC2DHR_MSK
 (0x0FFF << 20)

	)

360 
	#DAC_DHR12LD_DACC1DHR_LSB
 (1 << 0)

	)

361 
	#DAC_DHR12LD_DACC1DHR_MSK
 (0x0FFF << 4)

	)

365 
	#DAC_DHR8RD_DACC2DHR_LSB
 (1 << 8)

	)

366 
	#DAC_DHR8RD_DACC2DHR_MSK
 (0x00FF << 8)

	)

367 
	#DAC_DHR8RD_DACC1DHR_LSB
 (1 << 0)

	)

368 
	#DAC_DHR8RD_DACC1DHR_MSK
 (0x00FF << 0)

	)

372 
	#DAC_DOR1_DACC1DOR_LSB
 (1 << 0)

	)

373 
	#DAC_DOR1_DACC1DOR_MSK
 (0x0FFF << 0)

	)

377 
	#DAC_DOR2_DACC2DOR_LSB
 (1 << 0)

	)

378 
	#DAC_DOR2_DACC2DOR_MSK
 (0x0FFF << 0)

	)

382 
	mCHANNEL_1
, 
	mCHANNEL_2
, 
	mCHANNEL_D


383 } 
	td©a_ch™√l
;

387 
	mRIGHT8
, 
	mRIGHT12
, 
	mLEFT12


388 } 
	td©a_Æign
;

392 
BEGIN_DECLS


394 
dac_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
);

395 
dac_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
);

396 
dac_buf„r_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
);

397 
dac_buf„r_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
);

398 
dac_dma_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
);

399 
dac_dma_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
);

400 
dac_åiggî_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
);

401 
dac_åiggî_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
);

402 
dac_£t_åiggî_sour˚
(
uöt32_t
 
dac_åig_§c
);

403 
dac_£t_wavef‹m_gíî©i⁄
(
uöt32_t
 
dac_wave_ís
);

404 
dac_dißbÀ_wavef‹m_gíî©i⁄
(
d©a_ch™√l
 
dac_ch™√l
);

405 
dac_£t_wavef‹m_ch¨a˘îi°ics
(
uöt32_t
 
dac_mamp
);

406 
dac_lﬂd_d©a_buf„r_sögÀ
(
uöt16_t
 
dac_d©a
, 
d©a_Æign
 
dac_d©a_f‹m©
,

407 
d©a_ch™√l
 
dac_ch™√l
);

408 
dac_lﬂd_d©a_buf„r_duÆ
(
uöt16_t
 
dac_d©a1
, uöt16_à
dac_d©a2
,

409 
d©a_Æign
 
dac_d©a_f‹m©
);

410 
dac_so·w¨e_åiggî
(
d©a_ch™√l
 
dac_ch™√l
);

412 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/dma_common_f24.h

34 #ifde‡
LIBOPENCM3_DMA_H


36 #i‚de‡
LIBOPENCM3_DMA_COMMON_F24_H


37 
	#LIBOPENCM3_DMA_COMMON_F24_H


	)

44 
	#DMA1
 
DMA1_BASE


	)

45 
	#DMA2
 
DMA2_BASE


	)

52 
	#DMA_STREAM0
 0

	)

53 
	#DMA_STREAM1
 1

	)

54 
	#DMA_STREAM2
 2

	)

55 
	#DMA_STREAM3
 3

	)

56 
	#DMA_STREAM4
 4

	)

57 
	#DMA_STREAM5
 5

	)

58 
	#DMA_STREAM6
 6

	)

59 
	#DMA_STREAM7
 7

	)

62 
	#DMA_STREAM
(
p‹t
, 
n
Ë(’‹tË+ 0x10 + (24 * (n)))

	)

63 
	#DMA1_STREAM
(
n
Ë
	`DMA_STREAM
(
DMA1
, (n))

	)

64 
	#DMA2_STREAM
(
n
Ë
	`DMA_STREAM
(
DMA2
, (n))

	)

66 
	#DMA1_STREAM0
 
	`DMA1_STREAM
(0)

	)

67 
	#DMA1_STREAM1
 
	`DMA1_STREAM
(1)

	)

68 
	#DMA1_STREAM2
 
	`DMA1_STREAM
(2)

	)

69 
	#DMA1_STREAM3
 
	`DMA1_STREAM
(3)

	)

70 
	#DMA1_STREAM4
 
	`DMA1_STREAM
(4)

	)

71 
	#DMA1_STREAM5
 
	`DMA1_STREAM
(5)

	)

72 
	#DMA1_STREAM6
 
	`DMA1_STREAM
(6)

	)

73 
	#DMA1_STREAM7
 
	`DMA1_STREAM
(7)

	)

75 
	#DMA2_STREAM0
 
	`DMA2_STREAM
(0)

	)

76 
	#DMA2_STREAM1
 
	`DMA2_STREAM
(1)

	)

77 
	#DMA2_STREAM2
 
	`DMA2_STREAM
(2)

	)

78 
	#DMA2_STREAM3
 
	`DMA2_STREAM
(3)

	)

79 
	#DMA2_STREAM4
 
	`DMA2_STREAM
(4)

	)

80 
	#DMA2_STREAM5
 
	`DMA2_STREAM
(5)

	)

81 
	#DMA2_STREAM6
 
	`DMA2_STREAM
(6)

	)

82 
	#DMA2_STREAM7
 
	`DMA2_STREAM
(7)

	)

87 
	#DMA_LISR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00)

	)

88 
	#DMA1_LISR
 
	`DMA_LISR
(
DMA1
)

	)

89 
	#DMA2_LISR
 
	`DMA_LISR
(
DMA2
)

	)

92 
	#DMA_HISR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x04)

	)

93 
	#DMA1_HISR
 
	`DMA_HISR
(
DMA1
)

	)

94 
	#DMA2_HISR
 
	`DMA_HISR
(
DMA2
)

	)

97 
	#DMA_LIFCR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x08)

	)

98 
	#DMA1_LIFCR
 
	`DMA_LIFCR
(
DMA1
)

	)

99 
	#DMA2_LIFCR
 
	`DMA_LIFCR
(
DMA2
)

	)

102 
	#DMA_HIFCR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0C)

	)

103 
	#DMA1_HIFCR
 
	`DMA_HIFCR
(
DMA1
)

	)

104 
	#DMA2_HIFCR
 
	`DMA_HIFCR
(
DMA2
)

	)

109 
	#DMA_SCR
(
p‹t
, 
n
Ë
	`MMIO32
(
	`DMA_STREAM
(’‹t), (n)Ë+ 0x00)

	)

110 
	#DMA1_SCR
(
n
Ë
	`DMA_SCR
(
DMA1
, (n))

	)

111 
	#DMA2_SCR
(
n
Ë
	`DMA_SCR
(
DMA2
, (n))

	)

113 
	#DMA1_S0CR
 
	`DMA1_SCR
(0)

	)

114 
	#DMA1_S1CR
 
	`DMA1_SCR
(1)

	)

115 
	#DMA1_S2CR
 
	`DMA1_SCR
(2)

	)

116 
	#DMA1_S3CR
 
	`DMA1_SCR
(3)

	)

117 
	#DMA1_S4CR
 
	`DMA1_SCR
(4)

	)

118 
	#DMA1_S5CR
 
	`DMA1_SCR
(5)

	)

119 
	#DMA1_S6CR
 
	`DMA1_SCR
(6)

	)

120 
	#DMA1_S7CR
 
	`DMA1_SCR
(7)

	)

122 
	#DMA2_S0CR
 
	`DMA2_SCR
(0)

	)

123 
	#DMA2_S1CR
 
	`DMA2_SCR
(1)

	)

124 
	#DMA2_S2CR
 
	`DMA2_SCR
(2)

	)

125 
	#DMA2_S3CR
 
	`DMA2_SCR
(3)

	)

126 
	#DMA2_S4CR
 
	`DMA2_SCR
(4)

	)

127 
	#DMA2_S5CR
 
	`DMA2_SCR
(5)

	)

128 
	#DMA2_S6CR
 
	`DMA2_SCR
(6)

	)

129 
	#DMA2_S7CR
 
	`DMA2_SCR
(7)

	)

132 
	#DMA_SNDTR
(
p‹t
, 
n
Ë
	`MMIO32
(
	`DMA_STREAM
(’‹t), (n)Ë+ 0x04)

	)

133 
	#DMA1_SNDTR
(
n
Ë
	`DMA_SNDTR
(
DMA1
, (n))

	)

134 
	#DMA2_SNDTR
(
n
Ë
	`DMA_SNDTR
(
DMA2
, (n))

	)

136 
	#DMA1_S0NDTR
 
	`DMA1_SNDTR
(0)

	)

137 
	#DMA1_S1NDTR
 
	`DMA1_SNDTR
(1)

	)

138 
	#DMA1_S2NDTR
 
	`DMA1_SNDTR
(2)

	)

139 
	#DMA1_S3NDTR
 
	`DMA1_SNDTR
(3)

	)

140 
	#DMA1_S4NDTR
 
	`DMA1_SNDTR
(4)

	)

141 
	#DMA1_S5NDTR
 
	`DMA1_SNDTR
(5)

	)

142 
	#DMA1_S6NDTR
 
	`DMA1_SNDTR
(6)

	)

143 
	#DMA1_S7NDTR
 
	`DMA1_SNDTR
(7)

	)

145 
	#DMA2_S0NDTR
 
	`DMA2_SNDTR
(0)

	)

146 
	#DMA2_S1NDTR
 
	`DMA2_SNDTR
(1)

	)

147 
	#DMA2_S2NDTR
 
	`DMA2_SNDTR
(2)

	)

148 
	#DMA2_S3NDTR
 
	`DMA2_SNDTR
(3)

	)

149 
	#DMA2_S4NDTR
 
	`DMA2_SNDTR
(4)

	)

150 
	#DMA2_S5NDTR
 
	`DMA2_SNDTR
(5)

	)

151 
	#DMA2_S6NDTR
 
	`DMA2_SNDTR
(6)

	)

152 
	#DMA2_S7NDTR
 
	`DMA2_SNDTR
(7)

	)

155 
	#DMA_SPAR
(
p‹t
, 
n
) (*(volatile **)\

156 (
	`DMA_STREAM
((
p‹t
), (
n
)Ë+ 0x08))

	)

157 
	#DMA1_SPAR
(
n
Ë
	`DMA_SPAR
(
DMA1
, (n))

	)

158 
	#DMA2_SPAR
(
n
Ë
	`DMA_SPAR
(
DMA2
, (n))

	)

160 
	#DMA1_S0PAR
 
	`DMA1_SPAR
(0)

	)

161 
	#DMA1_S1PAR
 
	`DMA1_SPAR
(1)

	)

162 
	#DMA1_S2PAR
 
	`DMA1_SPAR
(2)

	)

163 
	#DMA1_S3PAR
 
	`DMA1_SPAR
(3)

	)

164 
	#DMA1_S4PAR
 
	`DMA1_SPAR
(4)

	)

165 
	#DMA1_S5PAR
 
	`DMA1_SPAR
(5)

	)

166 
	#DMA1_S6PAR
 
	`DMA1_SPAR
(6)

	)

167 
	#DMA1_S7PAR
 
	`DMA1_SPAR
(7)

	)

169 
	#DMA2_S0PAR
 
	`DMA2_SPAR
(0)

	)

170 
	#DMA2_S1PAR
 
	`DMA2_SPAR
(1)

	)

171 
	#DMA2_S2PAR
 
	`DMA2_SPAR
(2)

	)

172 
	#DMA2_S3PAR
 
	`DMA2_SPAR
(3)

	)

173 
	#DMA2_S4PAR
 
	`DMA2_SPAR
(4)

	)

174 
	#DMA2_S5PAR
 
	`DMA2_SPAR
(5)

	)

175 
	#DMA2_S6PAR
 
	`DMA2_SPAR
(6)

	)

176 
	#DMA2_S7PAR
 
	`DMA2_SPAR
(7)

	)

179 
	#DMA_SM0AR
(
p‹t
, 
n
) (*(volatile **) \

180 (
	`DMA_STREAM
((
p‹t
), (
n
)Ë+ 0x0c))

	)

181 
	#DMA1_SM0AR
(
n
Ë
	`DMA_SM0AR
(
DMA1
, (n))

	)

182 
	#DMA2_SM0AR
(
n
Ë
	`DMA_SM0AR
(
DMA2
, (n))

	)

184 
	#DMA1_S0M0AR
 
	`DMA1_SM0AR
(0)

	)

185 
	#DMA1_S1M0AR
 
	`DMA1_SM0AR
(1)

	)

186 
	#DMA1_S2M0AR
 
	`DMA1_SM0AR
(2)

	)

187 
	#DMA1_S3M0AR
 
	`DMA1_SM0AR
(3)

	)

188 
	#DMA1_S4M0AR
 
	`DMA1_SM0AR
(4)

	)

189 
	#DMA1_S5M0AR
 
	`DMA1_SM0AR
(5)

	)

190 
	#DMA1_S6M0AR
 
	`DMA1_SM0AR
(6)

	)

191 
	#DMA1_S7M0AR
 
	`DMA1_SM0AR
(7)

	)

193 
	#DMA2_S0M0AR
 
	`DMA2_SM0AR
(0)

	)

194 
	#DMA2_S1M0AR
 
	`DMA2_SM0AR
(1)

	)

195 
	#DMA2_S2M0AR
 
	`DMA2_SM0AR
(2)

	)

196 
	#DMA2_S3M0AR
 
	`DMA2_SM0AR
(3)

	)

197 
	#DMA2_S4M0AR
 
	`DMA2_SM0AR
(4)

	)

198 
	#DMA2_S5M0AR
 
	`DMA2_SM0AR
(5)

	)

199 
	#DMA2_S6M0AR
 
	`DMA2_SM0AR
(6)

	)

200 
	#DMA2_S7M0AR
 
	`DMA2_SM0AR
(7)

	)

203 
	#DMA_SM1AR
(
p‹t
, 
n
) (*(volatile **)\

204 (
	`DMA_STREAM
((
p‹t
), (
n
)Ë+ 0x10))

	)

205 
	#DMA1_SM1AR
(
n
Ë
	`DMA_SM1AR
(
DMA1
, (n))

	)

206 
	#DMA2_SM1AR
(
n
Ë
	`DMA_SM1AR
(
DMA2
, (n))

	)

208 
	#DMA1_S0M1AR
 
	`DMA1_SM1AR
(0)

	)

209 
	#DMA1_S1M1AR
 
	`DMA1_SM1AR
(1)

	)

210 
	#DMA1_S2M1AR
 
	`DMA1_SM1AR
(2)

	)

211 
	#DMA1_S3M1AR
 
	`DMA1_SM1AR
(3)

	)

212 
	#DMA1_S4M1AR
 
	`DMA1_SM1AR
(4)

	)

213 
	#DMA1_S5M1AR
 
	`DMA1_SM1AR
(5)

	)

214 
	#DMA1_S6M1AR
 
	`DMA1_SM1AR
(6)

	)

215 
	#DMA1_S7M1AR
 
	`DMA1_SM1AR
(7)

	)

217 
	#DMA2_S0M1AR
 
	`DMA2_SM1AR
(0)

	)

218 
	#DMA2_S1M1AR
 
	`DMA2_SM1AR
(1)

	)

219 
	#DMA2_S2M1AR
 
	`DMA2_SM1AR
(2)

	)

220 
	#DMA2_S3M1AR
 
	`DMA2_SM1AR
(3)

	)

221 
	#DMA2_S4M1AR
 
	`DMA2_SM1AR
(4)

	)

222 
	#DMA2_S5M1AR
 
	`DMA2_SM1AR
(5)

	)

223 
	#DMA2_S6M1AR
 
	`DMA2_SM1AR
(6)

	)

224 
	#DMA2_S7M1AR
 
	`DMA2_SM1AR
(7)

	)

227 
	#DMA_SFCR
(
p‹t
, 
n
Ë
	`MMIO32
(
	`DMA_STREAM
(’‹t), (n)Ë+ 0x14)

	)

228 
	#DMA1_SFCR
(
n
Ë
	`DMA_SFCR
(
DMA1
, (n))

	)

229 
	#DMA2_SFCR
(
n
Ë
	`DMA_SFCR
(
DMA2
, (n))

	)

231 
	#DMA1_S0FCR
 
	`DMA1_SFCR
(0)

	)

232 
	#DMA1_S1FCR
 
	`DMA1_SFCR
(1)

	)

233 
	#DMA1_S2FCR
 
	`DMA1_SFCR
(2)

	)

234 
	#DMA1_S3FCR
 
	`DMA1_SFCR
(3)

	)

235 
	#DMA1_S4FCR
 
	`DMA1_SFCR
(4)

	)

236 
	#DMA1_S5FCR
 
	`DMA1_SFCR
(5)

	)

237 
	#DMA1_S6FCR
 
	`DMA1_SFCR
(6)

	)

238 
	#DMA1_S7FCR
 
	`DMA1_SFCR
(7)

	)

240 
	#DMA2_S0FCR
 
	`DMA2_SFCR
(0)

	)

241 
	#DMA2_S1FCR
 
	`DMA2_SFCR
(1)

	)

242 
	#DMA2_S2FCR
 
	`DMA2_SFCR
(2)

	)

243 
	#DMA2_S3FCR
 
	`DMA2_SFCR
(3)

	)

244 
	#DMA2_S4FCR
 
	`DMA2_SFCR
(4)

	)

245 
	#DMA2_S5FCR
 
	`DMA2_SFCR
(5)

	)

246 
	#DMA2_S6FCR
 
	`DMA2_SFCR
(6)

	)

247 
	#DMA2_S7FCR
 
	`DMA2_SFCR
(7)

	)

258 
	#DMA_TCIF
 (1 << 5)

	)

260 
	#DMA_HTIF
 (1 << 4)

	)

262 
	#DMA_TEIF
 (1 << 3)

	)

264 
	#DMA_DMEIF
 (1 << 2)

	)

266 
	#DMA_FEIF
 (1 << 0)

	)

272 
	#DMA_ISR_OFFSET
(
°ªam
Ë(6*((°ªamË& 0x01)+16*(((°ªamË& 0x02Ë>> 1))

	)

273 
	#DMA_ISR_FLAGS
 (
DMA_TCIF
 | 
DMA_HTIF
 | 
DMA_TEIF
 | 
DMA_DMEIF
 | \

274 
DMA_FEIF
)

	)

275 
	#DMA_ISR_MASK
(
°ªam
Ë(
DMA_ISR_FLAGS
 << 
	`DMA_ISR_OFFSET
(°ªam))

	)

279 
	#DMA_LISR_FEIF0
 (1 << 0)

	)

280 
	#DMA_LISR_DMEIF0
 (1 << 2)

	)

281 
	#DMA_LISR_TEIF0
 (1 << 3)

	)

282 
	#DMA_LISR_HTIF0
 (1 << 4)

	)

283 
	#DMA_LISR_TCIF0
 (1 << 5)

	)

285 
	#DMA_LISR_FEIF1
 (1 << 6)

	)

286 
	#DMA_LISR_DMEIF1
 (1 << 8)

	)

287 
	#DMA_LISR_TEIF1
 (1 << 9)

	)

288 
	#DMA_LISR_HTIF1
 (1 << 10)

	)

289 
	#DMA_LISR_TCIF1
 (1 << 11)

	)

291 
	#DMA_LISR_FEIF2
 (1 << 16)

	)

292 
	#DMA_LISR_DMEIF2
 (1 << 18)

	)

293 
	#DMA_LISR_TEIF2
 (1 << 19)

	)

294 
	#DMA_LISR_HTIF2
 (1 << 20)

	)

295 
	#DMA_LISR_TCIF2
 (1 << 21)

	)

297 
	#DMA_LISR_FEIF3
 (1 << 22)

	)

298 
	#DMA_LISR_DMEIF3
 (1 << 24)

	)

299 
	#DMA_LISR_TEIF3
 (1 << 25)

	)

300 
	#DMA_LISR_HTIF3
 (1 << 26)

	)

301 
	#DMA_LISR_TCIF3
 (1 << 27)

	)

305 
	#DMA_HISR_FEIF4
 (1 << 0)

	)

306 
	#DMA_HISR_DMEIF4
 (1 << 2)

	)

307 
	#DMA_HISR_TEIF4
 (1 << 3)

	)

308 
	#DMA_HISR_HTIF4
 (1 << 4)

	)

309 
	#DMA_HISR_TCIF4
 (1 << 5)

	)

311 
	#DMA_HISR_FEIF5
 (1 << 6)

	)

312 
	#DMA_HISR_DMEIF5
 (1 << 8)

	)

313 
	#DMA_HISR_TEIF5
 (1 << 9)

	)

314 
	#DMA_HISR_HTIF5
 (1 << 10)

	)

315 
	#DMA_HISR_TCIF5
 (1 << 11)

	)

317 
	#DMA_HISR_FEIF6
 (1 << 16)

	)

318 
	#DMA_HISR_DMEIF6
 (1 << 18)

	)

319 
	#DMA_HISR_TEIF6
 (1 << 19)

	)

320 
	#DMA_HISR_HTIF6
 (1 << 20)

	)

321 
	#DMA_HISR_TCIF6
 (1 << 21)

	)

323 
	#DMA_HISR_FEIF7
 (1 << 22)

	)

324 
	#DMA_HISR_DMEIF7
 (1 << 24)

	)

325 
	#DMA_HISR_TEIF7
 (1 << 25)

	)

326 
	#DMA_HISR_HTIF7
 (1 << 26)

	)

327 
	#DMA_HISR_TCIF7
 (1 << 27)

	)

331 
	#DMA_LIFCR_CFEIF0
 (1 << 0)

	)

332 
	#DMA_LIFCR_CDMEIF0
 (1 << 2)

	)

333 
	#DMA_LIFCR_CTEIF0
 (1 << 3)

	)

334 
	#DMA_LIFCR_CHTIF0
 (1 << 4)

	)

335 
	#DMA_LIFCR_CTCIF0
 (1 << 5)

	)

337 
	#DMA_LIFCR_CFEIF1
 (1 << 6)

	)

338 
	#DMA_LIFCR_CDMEIF1
 (1 << 8)

	)

339 
	#DMA_LIFCR_CTEIF1
 (1 << 9)

	)

340 
	#DMA_LIFCR_CHTIF1
 (1 << 10)

	)

341 
	#DMA_LIFCR_CTCIF1
 (1 << 11)

	)

343 
	#DMA_LIFCR_CFEIF2
 (1 << 16)

	)

344 
	#DMA_LIFCR_CDMEIF2
 (1 << 18)

	)

345 
	#DMA_LIFCR_CTEIF2
 (1 << 19)

	)

346 
	#DMA_LIFCR_CHTIF2
 (1 << 20)

	)

347 
	#DMA_LIFCR_CTCIF2
 (1 << 21)

	)

349 
	#DMA_LIFCR_CFEIF3
 (1 << 22)

	)

350 
	#DMA_LIFCR_CDMEIF3
 (1 << 24)

	)

351 
	#DMA_LIFCR_CTEIF3
 (1 << 25)

	)

352 
	#DMA_LIFCR_CHTIF3
 (1 << 26)

	)

353 
	#DMA_LIFCR_CTCIF3
 (1 << 27)

	)

357 
	#DMA_HIFCR_CFEIF4
 (1 << 0)

	)

358 
	#DMA_HIFCR_CDMEIF4
 (1 << 2)

	)

359 
	#DMA_HIFCR_CTEIF4
 (1 << 3)

	)

360 
	#DMA_HIFCR_CHTIF4
 (1 << 4)

	)

361 
	#DMA_HIFCR_CTCIF4
 (1 << 5)

	)

363 
	#DMA_HIFCR_CFEIF5
 (1 << 6)

	)

364 
	#DMA_HIFCR_CDMEIF5
 (1 << 8)

	)

365 
	#DMA_HIFCR_CTEIF5
 (1 << 9)

	)

366 
	#DMA_HIFCR_CHTIF5
 (1 << 10)

	)

367 
	#DMA_HIFCR_CTCIF5
 (1 << 11)

	)

369 
	#DMA_HIFCR_CFEIF6
 (1 << 16)

	)

370 
	#DMA_HIFCR_CDMEIF6
 (1 << 18)

	)

371 
	#DMA_HIFCR_CTEIF6
 (1 << 19)

	)

372 
	#DMA_HIFCR_CHTIF6
 (1 << 20)

	)

373 
	#DMA_HIFCR_CTCIF6
 (1 << 21)

	)

375 
	#DMA_HIFCR_CFEIF7
 (1 << 22)

	)

376 
	#DMA_HIFCR_CDMEIF7
 (1 << 24)

	)

377 
	#DMA_HIFCR_CTEIF7
 (1 << 25)

	)

378 
	#DMA_HIFCR_CHTIF7
 (1 << 26)

	)

379 
	#DMA_HIFCR_CTCIF7
 (1 << 27)

	)

384 
	#DMA_SxCR_EN
 (1 << 0)

	)

386 
	#DMA_SxCR_DMEIE
 (1 << 1)

	)

388 
	#DMA_SxCR_TEIE
 (1 << 2)

	)

390 
	#DMA_SxCR_HTIE
 (1 << 3)

	)

392 
	#DMA_SxCR_TCIE
 (1 << 4)

	)

394 
	#DMA_SxCR_PFCTRL
 (1 << 5)

	)

401 
	#DMA_SxCR_DIR_PERIPHERAL_TO_MEM
 (0 << 6)

	)

402 
	#DMA_SxCR_DIR_MEM_TO_PERIPHERAL
 (1 << 6)

	)

403 
	#DMA_SxCR_DIR_MEM_TO_MEM
 (2 << 6)

	)

405 
	#DMA_SxCR_DIR_SHIFT
 6

	)

406 
	#DMA_SxCR_DIR_MASK
 (3 << 6)

	)

409 
	#DMA_SxCR_CIRC
 (1 << 8)

	)

411 
	#DMA_SxCR_PINC
 (1 << 9)

	)

413 
	#DMA_SxCR_MINC
 (1 << 10)

	)

420 
	#DMA_SxCR_PSIZE_8BIT
 (0 << 11)

	)

421 
	#DMA_SxCR_PSIZE_16BIT
 (1 << 11)

	)

422 
	#DMA_SxCR_PSIZE_32BIT
 (2 << 11)

	)

424 
	#DMA_SxCR_PSIZE_SHIFT
 11

	)

425 
	#DMA_SxCR_PSIZE_MASK
 (3 << 11)

	)

432 
	#DMA_SxCR_MSIZE_8BIT
 (0 << 13)

	)

433 
	#DMA_SxCR_MSIZE_16BIT
 (1 << 13)

	)

434 
	#DMA_SxCR_MSIZE_32BIT
 (2 << 13)

	)

436 
	#DMA_SxCR_MSIZE_SHIFT
 13

	)

437 
	#DMA_SxCR_MSIZE_MASK
 (3 << 13)

	)

440 
	#DMA_SxCR_PINCOS
 (1 << 15)

	)

447 
	#DMA_SxCR_PL_LOW
 (0 << 16)

	)

448 
	#DMA_SxCR_PL_MEDIUM
 (1 << 16)

	)

449 
	#DMA_SxCR_PL_HIGH
 (2 << 16)

	)

450 
	#DMA_SxCR_PL_VERY_HIGH
 (3 << 16)

	)

452 
	#DMA_SxCR_PL_SHIFT
 16

	)

453 
	#DMA_SxCR_PL_MASK
 (3 << 16)

	)

456 
	#DMA_SxCR_DBM
 (1 << 18)

	)

458 
	#DMA_SxCR_CT
 (1 << 19)

	)

467 
	#DMA_SxCR_PBURST_SINGLE
 (0 << 21)

	)

468 
	#DMA_SxCR_PBURST_INCR4
 (1 << 21)

	)

469 
	#DMA_SxCR_PBURST_INCR8
 (2 << 21)

	)

470 
	#DMA_SxCR_PBURST_INCR16
 (3 << 21)

	)

472 
	#DMA_SxCR_PBURST_SHIFT
 21

	)

473 
	#DMA_SxCR_PBURST_MASK
 (3 << 21)

	)

480 
	#DMA_SxCR_MBURST_SINGLE
 (0 << 23)

	)

481 
	#DMA_SxCR_MBURST_INCR4
 (1 << 23)

	)

482 
	#DMA_SxCR_MBURST_INCR8
 (2 << 23)

	)

483 
	#DMA_SxCR_MBURST_INCR16
 (3 << 23)

	)

485 
	#DMA_SxCR_MBURST_SHIFT
 23

	)

486 
	#DMA_SxCR_MBURST_MASK
 (3 << 23)

	)

493 
	#DMA_SxCR_CHSEL_0
 (0 << 
DMA_SxCR_CHSEL_SHIFT
)

	)

494 
	#DMA_SxCR_CHSEL_1
 (1 << 
DMA_SxCR_CHSEL_SHIFT
)

	)

495 
	#DMA_SxCR_CHSEL_2
 (2 << 
DMA_SxCR_CHSEL_SHIFT
)

	)

496 
	#DMA_SxCR_CHSEL_3
 (3 << 
DMA_SxCR_CHSEL_SHIFT
)

	)

497 
	#DMA_SxCR_CHSEL_4
 (4 << 
DMA_SxCR_CHSEL_SHIFT
)

	)

498 
	#DMA_SxCR_CHSEL_5
 (5 << 
DMA_SxCR_CHSEL_SHIFT
)

	)

499 
	#DMA_SxCR_CHSEL_6
 (6 << 
DMA_SxCR_CHSEL_SHIFT
)

	)

500 
	#DMA_SxCR_CHSEL_7
 (7 << 
DMA_SxCR_CHSEL_SHIFT
)

	)

502 
	#DMA_SxCR_CHSEL_SHIFT
 25

	)

503 
	#DMA_SxCR_CHSEL_MASK
 (7 << 25)

	)

504 
	#DMA_SxCR_CHSEL
(
n
Ë(“Ë<< 
DMA_SxCR_CHSEL_SHIFT
)

	)

531 
	#DMA_SxFCR_FTH_1_4_FULL
 (0 << 0)

	)

532 
	#DMA_SxFCR_FTH_2_4_FULL
 (1 << 0)

	)

533 
	#DMA_SxFCR_FTH_3_4_FULL
 (2 << 0)

	)

534 
	#DMA_SxFCR_FTH_4_4_FULL
 (3 << 0)

	)

536 
	#DMA_SxFCR_FTH_SHIFT
 0

	)

537 
	#DMA_SxFCR_FTH_MASK
 (3 << 0)

	)

540 
	#DMA_SxFCR_DMDIS
 (1 << 2)

	)

547 
	#DMA_SxFCR_FS_LT_1_4_FULL
 (0 << 0)

	)

548 
	#DMA_SxFCR_FS_LT_2_4_FULL
 (1 << 0)

	)

549 
	#DMA_SxFCR_FS_LT_3_4_FULL
 (2 << 0)

	)

550 
	#DMA_SxFCR_FS_LT_4_4_FULL
 (3 << 0)

	)

551 
	#DMA_SxFCR_FS_FULL
 (4 << 3)

	)

552 
	#DMA_SxFCR_FS_EMPTY
 (5 << 3)

	)

554 
	#DMA_SxFCR_FS_SHIFT
 3

	)

555 
	#DMA_SxFCR_FS_MASK
 (7 << 3)

	)

560 
	#DMA_SxFCR_FEIE
 (1 << 7)

	)

566 
BEGIN_DECLS


573 
dma_°ªam_ª£t
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

574 
dma_˛ór_öãºu±_Êags
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
,

575 
uöt32_t
 
öãºu±s
);

576 
boﬁ
 
dma_gë_öãºu±_Êag
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
öãºu±
);

577 
dma_£t_å™s„r_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
dúe˘i⁄
);

578 
dma_£t_¥i‹ôy
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
¥io
);

579 
dma_£t_mem‹y_size
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
mem_size
);

580 
dma_£t_≥rùhîÆ_size
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
,

581 
uöt32_t
 
≥rùhîÆ_size
);

582 
dma_íabÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

583 
dma_dißbÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

584 
dma_íabÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

585 
dma_dißbÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

586 
dma_íabÀ_fixed_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

587 
dma_íabÀ_cúcuœr_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

588 
dma_ch™√l_£À˘
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
ch™√l
);

589 
dma_£t_mem‹y_bur°
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
bur°
);

590 
dma_£t_≥rùhîÆ_bur°
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
bur°
);

591 
dma_£t_öôül_èrgë
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt8_à
mem‹y
);

592 
uöt8_t
 
dma_gë_èrgë
(
uöt32_t
 
dma
, uöt8_à
°ªam
);

593 
dma_íabÀ_doubÀ_buf„r_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

594 
dma_dißbÀ_doubÀ_buf„r_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

595 
dma_£t_≥rùhîÆ_Êow_c⁄åﬁ
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

596 
dma_£t_dma_Êow_c⁄åﬁ
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

597 
dma_íabÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

598 
dma_dißbÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

599 
dma_íabÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

600 
dma_dißbÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

601 
dma_íabÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

602 
dma_dißbÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

603 
uöt32_t
 
dma_fifo_°©us
(uöt32_à
dma
, 
uöt8_t
 
°ªam
);

604 
dma_íabÀ_dúe˘_mode_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

605 
dma_dißbÀ_dúe˘_mode_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

606 
dma_íabÀ_fifo_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

607 
dma_dißbÀ_fifo_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

608 
dma_íabÀ_dúe˘_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

609 
dma_íabÀ_fifo_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

610 
dma_£t_fifo_thªshﬁd
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
thªshﬁd
);

611 
dma_íabÀ_°ªam
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

612 
dma_dißbÀ_°ªam
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
);

613 
dma_£t_≥rùhîÆ_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
addªss
);

614 
dma_£t_mem‹y_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
addªss
);

615 
dma_£t_mem‹y_addªss_1
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
addªss
);

616 
dma_£t_numbî_of_d©a
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, 
uöt16_t
 
numbî
);

618 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/dma_common_l1f013.h

37 #ifde‡
LIBOPENCM3_DMA_H


39 #i‚de‡
LIBOPENCM3_DMA_COMMON_F13_H


40 
	#LIBOPENCM3_DMA_COMMON_F13_H


	)

45 
	#DMA1
 
DMA1_BASE


	)

46 
	#DMA2
 
DMA2_BASE


	)

51 
	#DMA_ISR
(
dma_ba£
Ë
	`MMIO32
((dma_ba£Ë+ 0x00)

	)

52 
	#DMA1_ISR
 
	`DMA_ISR
(
DMA1
)

	)

53 
	#DMA2_ISR
 
	`DMA_ISR
(
DMA2
)

	)

56 
	#DMA_IFCR
(
dma_ba£
Ë
	`MMIO32
((dma_ba£Ë+ 0x04)

	)

57 
	#DMA1_IFCR
 
	`DMA_IFCR
(
DMA1
)

	)

58 
	#DMA2_IFCR
 
	`DMA_IFCR
(
DMA2
)

	)

61 
	#DMA_CCR
(
dma_ba£
, 
ch™√l
Ë
	`MMIO32
((dma_base) + 0x08 + \

62 (0x14 * ((
ch™√l
Ë- 1)))

	)

64 
	#DMA1_CCR
(
ch™√l
Ë
	`DMA_CCR
(
DMA1
, ch™√l)

	)

65 
	#DMA1_CCR1
 
	`DMA1_CCR
(
DMA_CHANNEL1
)

	)

66 
	#DMA1_CCR2
 
	`DMA1_CCR
(
DMA_CHANNEL2
)

	)

67 
	#DMA1_CCR3
 
	`DMA1_CCR
(
DMA_CHANNEL3
)

	)

68 
	#DMA1_CCR4
 
	`DMA1_CCR
(
DMA_CHANNEL4
)

	)

69 
	#DMA1_CCR5
 
	`DMA1_CCR
(
DMA_CHANNEL5
)

	)

70 
	#DMA1_CCR6
 
	`DMA1_CCR
(
DMA_CHANNEL6
)

	)

71 
	#DMA1_CCR7
 
	`DMA1_CCR
(
DMA_CHANNEL7
)

	)

73 
	#DMA2_CCR
(
ch™√l
Ë
	`DMA_CCR
(
DMA2
, ch™√l)

	)

74 
	#DMA2_CCR1
 
	`DMA2_CCR
(
DMA_CHANNEL1
)

	)

75 
	#DMA2_CCR2
 
	`DMA2_CCR
(
DMA_CHANNEL2
)

	)

76 
	#DMA2_CCR3
 
	`DMA2_CCR
(
DMA_CHANNEL3
)

	)

77 
	#DMA2_CCR4
 
	`DMA2_CCR
(
DMA_CHANNEL4
)

	)

78 
	#DMA2_CCR5
 
	`DMA2_CCR
(
DMA_CHANNEL5
)

	)

81 
	#DMA_CNDTR
(
dma_ba£
, 
ch™√l
Ë
	`MMIO32
((dma_base) + 0x0C + \

82 (0x14 * ((
ch™√l
Ë- 1)))

	)

84 
	#DMA1_CNDTR
(
ch™√l
Ë
	`DMA_CNDTR
(
DMA1
, ch™√l)

	)

85 
	#DMA1_CNDTR1
 
	`DMA1_CNDTR
(
DMA_CHANNEL1
)

	)

86 
	#DMA1_CNDTR2
 
	`DMA1_CNDTR
(
DMA_CHANNEL2
)

	)

87 
	#DMA1_CNDTR3
 
	`DMA1_CNDTR
(
DMA_CHANNEL3
)

	)

88 
	#DMA1_CNDTR4
 
	`DMA1_CNDTR
(
DMA_CHANNEL4
)

	)

89 
	#DMA1_CNDTR5
 
	`DMA1_CNDTR
(
DMA_CHANNEL5
)

	)

90 
	#DMA1_CNDTR6
 
	`DMA1_CNDTR
(
DMA_CHANNEL6
)

	)

91 
	#DMA1_CNDTR7
 
	`DMA1_CNDTR
(
DMA_CHANNEL7
)

	)

93 
	#DMA2_CNDTR
(
ch™√l
Ë
	`DMA_CNDTR
(
DMA2
, ch™√l)

	)

94 
	#DMA2_CNDTR1
 
	`DMA2_CNDTR
(
DMA_CHANNEL1
)

	)

95 
	#DMA2_CNDTR2
 
	`DMA2_CNDTR
(
DMA_CHANNEL2
)

	)

96 
	#DMA2_CNDTR3
 
	`DMA2_CNDTR
(
DMA_CHANNEL3
)

	)

97 
	#DMA2_CNDTR4
 
	`DMA2_CNDTR
(
DMA_CHANNEL4
)

	)

98 
	#DMA2_CNDTR5
 
	`DMA2_CNDTR
(
DMA_CHANNEL5
)

	)

101 
	#DMA_CPAR
(
dma_ba£
, 
ch™√l
Ë
	`MMIO32
((dma_base) + 0x10 + \

102 (0x14 * ((
ch™√l
Ë- 1)))

	)

104 
	#DMA1_CPAR
(
ch™√l
Ë
	`DMA_CPAR
(
DMA1
, ch™√l)

	)

105 
	#DMA1_CPAR1
 
	`DMA1_CPAR
(
DMA_CHANNEL1
)

	)

106 
	#DMA1_CPAR2
 
	`DMA1_CPAR
(
DMA_CHANNEL2
)

	)

107 
	#DMA1_CPAR3
 
	`DMA1_CPAR
(
DMA_CHANNEL3
)

	)

108 
	#DMA1_CPAR4
 
	`DMA1_CPAR
(
DMA_CHANNEL4
)

	)

109 
	#DMA1_CPAR5
 
	`DMA1_CPAR
(
DMA_CHANNEL5
)

	)

110 
	#DMA1_CPAR6
 
	`DMA1_CPAR
(
DMA_CHANNEL6
)

	)

111 
	#DMA1_CPAR7
 
	`DMA1_CPAR
(
DMA_CHANNEL7
)

	)

113 
	#DMA2_CPAR
(
ch™√l
Ë
	`DMA_CPAR
(
DMA2
, ch™√l)

	)

114 
	#DMA2_CPAR1
 
	`DMA2_CPAR
(
DMA_CHANNEL1
)

	)

115 
	#DMA2_CPAR2
 
	`DMA2_CPAR
(
DMA_CHANNEL2
)

	)

116 
	#DMA2_CPAR3
 
	`DMA2_CPAR
(
DMA_CHANNEL3
)

	)

117 
	#DMA2_CPAR4
 
	`DMA2_CPAR
(
DMA_CHANNEL4
)

	)

118 
	#DMA2_CPAR5
 
	`DMA2_CPAR
(
DMA_CHANNEL5
)

	)

122 
	#DMA_CMAR
(
dma_ba£
, 
ch™√l
Ë
	`MMIO32
((dma_base) + 0x14 + \

123 (0x14 * ((
ch™√l
Ë- 1)))

	)

125 
	#DMA1_CMAR
(
ch™√l
Ë
	`DMA_CMAR
(
DMA1
, ch™√l)

	)

126 
	#DMA1_CMAR1
 
	`DMA1_CMAR
(
DMA_CHANNEL1
)

	)

127 
	#DMA1_CMAR2
 
	`DMA1_CMAR
(
DMA_CHANNEL2
)

	)

128 
	#DMA1_CMAR3
 
	`DMA1_CMAR
(
DMA_CHANNEL3
)

	)

129 
	#DMA1_CMAR4
 
	`DMA1_CMAR
(
DMA_CHANNEL4
)

	)

130 
	#DMA1_CMAR5
 
	`DMA1_CMAR
(
DMA_CHANNEL5
)

	)

131 
	#DMA1_CMAR6
 
	`DMA1_CMAR
(
DMA_CHANNEL6
)

	)

132 
	#DMA1_CMAR7
 
	`DMA1_CMAR
(
DMA_CHANNEL7
)

	)

134 
	#DMA2_CMAR
(
ch™√l
Ë
	`DMA_CMAR
(
DMA2
, ch™√l)

	)

135 
	#DMA2_CMAR1
 
	`DMA2_CMAR
(
DMA_CHANNEL1
)

	)

136 
	#DMA2_CMAR2
 
	`DMA2_CMAR
(
DMA_CHANNEL2
)

	)

137 
	#DMA2_CMAR3
 
	`DMA2_CMAR
(
DMA_CHANNEL3
)

	)

138 
	#DMA2_CMAR4
 
	`DMA2_CMAR
(
DMA_CHANNEL4
)

	)

139 
	#DMA2_CMAR5
 
	`DMA2_CMAR
(
DMA_CHANNEL5
)

	)

153 
	#DMA_TEIF
 (1 << 3)

	)

155 
	#DMA_HTIF
 (1 << 2)

	)

157 
	#DMA_TCIF
 (1 << 1)

	)

159 
	#DMA_GIF
 (1 << 0)

	)

165 
	#DMA_FLAG_OFFSET
(
ch™√l
Ë(4*((ch™√lË- 1))

	)

166 
	#DMA_FLAGS
 (
DMA_TEIF
 | 
DMA_TCIF
 | 
DMA_HTIF
 | \

167 
DMA_GIF
)

	)

168 
	#DMA_ISR_MASK
(
ch™√l
Ë(
DMA_FLAGS
 << 
	`DMA_FLAG_OFFSET
(ch™√l))

	)

171 
	#DMA_ISR_TEIF_BIT
 
DMA_TEIF


	)

172 
	#DMA_ISR_TEIF
(
ch™√l
Ë(
DMA_ISR_TEIF_BIT
 << \

173 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

175 
	#DMA_ISR_TEIF1
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL1
)

	)

176 
	#DMA_ISR_TEIF2
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL2
)

	)

177 
	#DMA_ISR_TEIF3
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL3
)

	)

178 
	#DMA_ISR_TEIF4
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL4
)

	)

179 
	#DMA_ISR_TEIF5
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL5
)

	)

180 
	#DMA_ISR_TEIF6
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL6
)

	)

181 
	#DMA_ISR_TEIF7
 
	`DMA_ISR_TEIF
(
DMA_CHANNEL7
)

	)

184 
	#DMA_ISR_HTIF_BIT
 
DMA_HTIF


	)

185 
	#DMA_ISR_HTIF
(
ch™√l
Ë(
DMA_ISR_HTIF_BIT
 << \

186 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

188 
	#DMA_ISR_HTIF1
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL1
)

	)

189 
	#DMA_ISR_HTIF2
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL2
)

	)

190 
	#DMA_ISR_HTIF3
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL3
)

	)

191 
	#DMA_ISR_HTIF4
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL4
)

	)

192 
	#DMA_ISR_HTIF5
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL5
)

	)

193 
	#DMA_ISR_HTIF6
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL6
)

	)

194 
	#DMA_ISR_HTIF7
 
	`DMA_ISR_HTIF
(
DMA_CHANNEL7
)

	)

197 
	#DMA_ISR_TCIF_BIT
 
DMA_TCIF


	)

198 
	#DMA_ISR_TCIF
(
ch™√l
Ë(
DMA_ISR_TCIF_BIT
 << \

199 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

201 
	#DMA_ISR_TCIF1
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL1
)

	)

202 
	#DMA_ISR_TCIF2
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL2
)

	)

203 
	#DMA_ISR_TCIF3
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL3
)

	)

204 
	#DMA_ISR_TCIF4
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL4
)

	)

205 
	#DMA_ISR_TCIF5
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL5
)

	)

206 
	#DMA_ISR_TCIF6
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL6
)

	)

207 
	#DMA_ISR_TCIF7
 
	`DMA_ISR_TCIF
(
DMA_CHANNEL7
)

	)

210 
	#DMA_ISR_GIF_BIT
 
DMA_GIF


	)

211 
	#DMA_ISR_GIF
(
ch™√l
Ë(
DMA_ISR_GIF_BIT
 << \

212 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

214 
	#DMA_ISR_GIF1
 
	`DMA_ISR_GIF
(
DMA_CHANNEL1
)

	)

215 
	#DMA_ISR_GIF2
 
	`DMA_ISR_GIF
(
DMA_CHANNEL2
)

	)

216 
	#DMA_ISR_GIF3
 
	`DMA_ISR_GIF
(
DMA_CHANNEL3
)

	)

217 
	#DMA_ISR_GIF4
 
	`DMA_ISR_GIF
(
DMA_CHANNEL4
)

	)

218 
	#DMA_ISR_GIF5
 
	`DMA_ISR_GIF
(
DMA_CHANNEL5
)

	)

219 
	#DMA_ISR_GIF6
 
	`DMA_ISR_GIF
(
DMA_CHANNEL6
)

	)

220 
	#DMA_ISR_GIF7
 
	`DMA_ISR_GIF
(
DMA_CHANNEL7
)

	)

225 
	#DMA_IFCR_CTEIF_BIT
 
DMA_TEIF


	)

226 
	#DMA_IFCR_CTEIF
(
ch™√l
Ë(
DMA_IFCR_CTEIF_BIT
 << \

227 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

229 
	#DMA_IFCR_CTEIF1
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL1
)

	)

230 
	#DMA_IFCR_CTEIF2
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL2
)

	)

231 
	#DMA_IFCR_CTEIF3
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL3
)

	)

232 
	#DMA_IFCR_CTEIF4
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL4
)

	)

233 
	#DMA_IFCR_CTEIF5
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL5
)

	)

234 
	#DMA_IFCR_CTEIF6
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL6
)

	)

235 
	#DMA_IFCR_CTEIF7
 
	`DMA_IFCR_CTEIF
(
DMA_CHANNEL7
)

	)

238 
	#DMA_IFCR_CHTIF_BIT
 
DMA_HTIF


	)

239 
	#DMA_IFCR_CHTIF
(
ch™√l
Ë(
DMA_IFCR_CHTIF_BIT
 << \

240 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

242 
	#DMA_IFCR_CHTIF1
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL1
)

	)

243 
	#DMA_IFCR_CHTIF2
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL2
)

	)

244 
	#DMA_IFCR_CHTIF3
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL3
)

	)

245 
	#DMA_IFCR_CHTIF4
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL4
)

	)

246 
	#DMA_IFCR_CHTIF5
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL5
)

	)

247 
	#DMA_IFCR_CHTIF6
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL6
)

	)

248 
	#DMA_IFCR_CHTIF7
 
	`DMA_IFCR_CHTIF
(
DMA_CHANNEL7
)

	)

251 
	#DMA_IFCR_CTCIF_BIT
 
DMA_TCIF


	)

252 
	#DMA_IFCR_CTCIF
(
ch™√l
Ë(
DMA_IFCR_CTCIF_BIT
 << \

253 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

255 
	#DMA_IFCR_CTCIF1
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL1
)

	)

256 
	#DMA_IFCR_CTCIF2
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL2
)

	)

257 
	#DMA_IFCR_CTCIF3
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL3
)

	)

258 
	#DMA_IFCR_CTCIF4
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL4
)

	)

259 
	#DMA_IFCR_CTCIF5
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL5
)

	)

260 
	#DMA_IFCR_CTCIF6
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL6
)

	)

261 
	#DMA_IFCR_CTCIF7
 
	`DMA_IFCR_CTCIF
(
DMA_CHANNEL7
)

	)

264 
	#DMA_IFCR_CGIF_BIT
 
DMA_GIF


	)

265 
	#DMA_IFCR_CGIF
(
ch™√l
Ë(
DMA_IFCR_CGIF_BIT
 << \

266 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

268 
	#DMA_IFCR_CGIF1
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL1
)

	)

269 
	#DMA_IFCR_CGIF2
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL2
)

	)

270 
	#DMA_IFCR_CGIF3
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL3
)

	)

271 
	#DMA_IFCR_CGIF4
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL4
)

	)

272 
	#DMA_IFCR_CGIF5
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL5
)

	)

273 
	#DMA_IFCR_CGIF6
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL6
)

	)

274 
	#DMA_IFCR_CGIF7
 
	`DMA_IFCR_CGIF
(
DMA_CHANNEL7
)

	)

277 
	#DMA_IFCR_CIF_BIT
 0xF

	)

278 
	#DMA_IFCR_CIF
(
ch™√l
Ë(
DMA_IFCR_CIF_BIT
 << \

279 (
	`DMA_FLAG_OFFSET
(
ch™√l
)))

	)

281 
	#DMA_IFCR_CIF1
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL1
)

	)

282 
	#DMA_IFCR_CIF2
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL2
)

	)

283 
	#DMA_IFCR_CIF3
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL3
)

	)

284 
	#DMA_IFCR_CIF4
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL4
)

	)

285 
	#DMA_IFCR_CIF5
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL5
)

	)

286 
	#DMA_IFCR_CIF6
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL6
)

	)

287 
	#DMA_IFCR_CIF7
 
	`DMA_IFCR_CIF
(
DMA_CHANNEL7
)

	)

292 
	#DMA_CCR_MEM2MEM
 (1 << 14)

	)

299 
	#DMA_CCR_PL_LOW
 (0x0 << 12)

	)

300 
	#DMA_CCR_PL_MEDIUM
 (0x1 << 12)

	)

301 
	#DMA_CCR_PL_HIGH
 (0x2 << 12)

	)

302 
	#DMA_CCR_PL_VERY_HIGH
 (0x3 << 12)

	)

304 
	#DMA_CCR_PL_MASK
 (0x3 << 12)

	)

305 
	#DMA_CCR_PL_SHIFT
 12

	)

312 
	#DMA_CCR_MSIZE_8BIT
 (0x0 << 10)

	)

313 
	#DMA_CCR_MSIZE_16BIT
 (0x1 << 10)

	)

314 
	#DMA_CCR_MSIZE_32BIT
 (0x2 << 10)

	)

316 
	#DMA_CCR_MSIZE_MASK
 (0x3 << 10)

	)

317 
	#DMA_CCR_MSIZE_SHIFT
 10

	)

324 
	#DMA_CCR_PSIZE_8BIT
 (0x0 << 8)

	)

325 
	#DMA_CCR_PSIZE_16BIT
 (0x1 << 8)

	)

326 
	#DMA_CCR_PSIZE_32BIT
 (0x2 << 8)

	)

328 
	#DMA_CCR_PSIZE_MASK
 (0x3 << 8)

	)

329 
	#DMA_CCR_PSIZE_SHIFT
 8

	)

332 
	#DMA_CCR_MINC
 (1 << 7)

	)

335 
	#DMA_CCR_PINC
 (1 << 6)

	)

338 
	#DMA_CCR_CIRC
 (1 << 5)

	)

341 
	#DMA_CCR_DIR
 (1 << 4)

	)

344 
	#DMA_CCR_TEIE
 (1 << 3)

	)

347 
	#DMA_CCR_HTIE
 (1 << 2)

	)

350 
	#DMA_CCR_TCIE
 (1 << 1)

	)

353 
	#DMA_CCR_EN
 (1 << 0)

	)

373 
	#DMA_CHANNEL1
 1

	)

374 
	#DMA_CHANNEL2
 2

	)

375 
	#DMA_CHANNEL3
 3

	)

376 
	#DMA_CHANNEL4
 4

	)

377 
	#DMA_CHANNEL5
 5

	)

378 
	#DMA_CHANNEL6
 6

	)

379 
	#DMA_CHANNEL7
 7

	)

384 
BEGIN_DECLS


386 
dma_ch™√l_ª£t
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

387 
dma_˛ór_öãºu±_Êags
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
,

388 
uöt32_t
 
öãºu±s
);

389 
boﬁ
 
dma_gë_öãºu±_Êag
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
öãºu±s
);

390 
dma_íabÀ_mem2mem_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

391 
dma_£t_¥i‹ôy
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
¥io
);

392 
dma_£t_mem‹y_size
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
mem_size
);

393 
dma_£t_≥rùhîÆ_size
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
,

394 
uöt32_t
 
≥rùhîÆ_size
);

395 
dma_íabÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

396 
dma_dißbÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

397 
dma_íabÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

398 
dma_dißbÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

399 
dma_íabÀ_cúcuœr_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

400 
dma_£t_ªad_‰om_≥rùhîÆ
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

401 
dma_£t_ªad_‰om_mem‹y
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

402 
dma_íabÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

403 
dma_dißbÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

404 
dma_íabÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

405 
dma_dißbÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

406 
dma_íabÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

407 
dma_dißbÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

408 
dma_íabÀ_ch™√l
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

409 
dma_dißbÀ_ch™√l
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
);

410 
dma_£t_≥rùhîÆ_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
,

411 
uöt32_t
 
addªss
);

412 
dma_£t_mem‹y_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
addªss
);

413 
dma_£t_numbî_of_d©a
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, 
uöt16_t
 
numbî
);

415 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/exti_common_all.h

26 #i‡
deföed
(
LIBOPENCM3_EXTI_H
)

28 #i‚de‡
LIBOPENCM3_EXTI_COMMON_ALL_H


29 
	#LIBOPENCM3_EXTI_COMMON_ALL_H


	)

34 
	#EXTI_IMR
 
	`MMIO32
(
EXTI_BASE
 + 0x00)

	)

35 
	#EXTI_EMR
 
	`MMIO32
(
EXTI_BASE
 + 0x04)

	)

36 
	#EXTI_RTSR
 
	`MMIO32
(
EXTI_BASE
 + 0x08)

	)

37 
	#EXTI_FTSR
 
	`MMIO32
(
EXTI_BASE
 + 0x0c)

	)

38 
	#EXTI_SWIER
 
	`MMIO32
(
EXTI_BASE
 + 0x10)

	)

39 
	#EXTI_PR
 
	`MMIO32
(
EXTI_BASE
 + 0x14)

	)

42 
	#EXTI0
 (1 << 0)

	)

43 
	#EXTI1
 (1 << 1)

	)

44 
	#EXTI2
 (1 << 2)

	)

45 
	#EXTI3
 (1 << 3)

	)

46 
	#EXTI4
 (1 << 4)

	)

47 
	#EXTI5
 (1 << 5)

	)

48 
	#EXTI6
 (1 << 6)

	)

49 
	#EXTI7
 (1 << 7)

	)

50 
	#EXTI8
 (1 << 8)

	)

51 
	#EXTI9
 (1 << 9)

	)

52 
	#EXTI10
 (1 << 10)

	)

53 
	#EXTI11
 (1 << 11)

	)

54 
	#EXTI12
 (1 << 12)

	)

55 
	#EXTI13
 (1 << 13)

	)

56 
	#EXTI14
 (1 << 14)

	)

57 
	#EXTI15
 (1 << 15)

	)

58 
	#EXTI16
 (1 << 16)

	)

59 
	#EXTI17
 (1 << 17)

	)

60 
	#EXTI18
 (1 << 18)

	)

61 
	#EXTI19
 (1 << 19)

	)

62 
	#EXTI20
 (1 << 20)

	)

63 
	#EXTI21
 (1 << 21)

	)

64 
	#EXTI22
 (1 << 22)

	)

65 
	#EXTI23
 (1 << 23)

	)

66 
	#EXTI24
 (1 << 24)

	)

67 
	#EXTI25
 (1 << 25)

	)

68 
	#EXTI26
 (1 << 26)

	)

69 
	#EXTI27
 (1 << 27)

	)

70 
	#EXTI28
 (1 << 28)

	)

71 
	#EXTI29
 (1 << 29)

	)

72 
	#EXTI30
 (1 << 30)

	)

73 
	#EXTI31
 (1 << 31)

	)

75 
	#EXTI32
 (1 << 0)

	)

76 
	#EXTI33
 (1 << 1)

	)

77 
	#EXTI34
 (1 << 2)

	)

78 
	#EXTI35
 (1 << 3)

	)

79 
	#EXTI36
 (1 << 4)

	)

80 
	#EXTI37
 (1 << 5)

	)

83 
	eexti_åiggî_ty≥
 {

84 
	mEXTI_TRIGGER_RISING
,

85 
	mEXTI_TRIGGER_FALLING
,

86 
	mEXTI_TRIGGER_BOTH
,

89 
BEGIN_DECLS


91 
exti_£t_åiggî
(
uöt32_t
 
extis
, 
exti_åiggî_ty≥
 
åig
);

92 
exti_íabÀ_ªque°
(
uöt32_t
 
extis
);

93 
exti_dißbÀ_ªque°
(
uöt32_t
 
extis
);

94 
exti_ª£t_ªque°
(
uöt32_t
 
extis
);

95 
exti_£À˘_sour˚
(
uöt32_t
 
exti
, uöt32_à
gpi›‹t
);

96 
uöt32_t
 
exti_gë_Êag_°©us
(uöt32_à
exti
);

98 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/flash_common_f01.h

32 #ifde‡
LIBOPENCM3_FLASH_H


34 #i‚de‡
LIBOPENCM3_FLASH_COMMON_F01_H


35 
	#LIBOPENCM3_FLASH_COMMON_F01_H


	)

40 
	#FLASH_ACR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x00)

	)

41 
	#FLASH_KEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x04)

	)

42 
	#FLASH_OPTKEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x08)

	)

43 
	#FLASH_SR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x0C)

	)

44 
	#FLASH_CR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x10)

	)

45 
	#FLASH_AR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x14)

	)

46 
	#FLASH_OBR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x1C)

	)

47 
	#FLASH_WRPR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x20)

	)

49 
	#FLASH_KEYR2
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x44)

	)

50 
	#FLASH_SR2
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x4C)

	)

51 
	#FLASH_CR2
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x50)

	)

52 
	#FLASH_AR2
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x54)

	)

56 
	#FLASH_OPTION_BYTE
(
i
Ë
	`MMIO16
(
INFO_BASE
+0x0800 + (i)*2)

	)

60 
	#FLASH_ACR_LATENCY_SHIFT
 0

	)

61 
	#FLASH_ACR_LATENCY
 7

	)

63 
	#FLASH_ACR_PRFTBS
 (1 << 5)

	)

64 
	#FLASH_ACR_PRFTBE
 (1 << 4)

	)

68 
	#FLASH_SR_EOP
 (1 << 5)

	)

69 
	#FLASH_SR_WRPRTERR
 (1 << 4)

	)

70 
	#FLASH_SR_PGERR
 (1 << 2)

	)

71 
	#FLASH_SR_BSY
 (1 << 0)

	)

75 
	#FLASH_CR_EOPIE
 (1 << 12)

	)

76 
	#FLASH_CR_ERRIE
 (1 << 10)

	)

77 
	#FLASH_CR_OPTWRE
 (1 << 9)

	)

78 
	#FLASH_CR_LOCK
 (1 << 7)

	)

79 
	#FLASH_CR_STRT
 (1 << 6)

	)

80 
	#FLASH_CR_OPTER
 (1 << 5)

	)

81 
	#FLASH_CR_OPTPG
 (1 << 4)

	)

82 
	#FLASH_CR_MER
 (1 << 2)

	)

83 
	#FLASH_CR_PER
 (1 << 1)

	)

84 
	#FLASH_CR_PG
 (1 << 0)

	)

88 
	#FLASH_OBR_RDPRT_SHIFT
 1

	)

89 
	#FLASH_OBR_OPTERR
 (1 << 0)

	)

93 
	#FLASH_KEYR_KEY1
 ((
uöt32_t
)0x45670123)

	)

94 
	#FLASH_KEYR_KEY2
 ((
uöt32_t
)0xcdef89ab)

	)

98 
BEGIN_DECLS


100 
Êash_£t_ws
(
uöt32_t
 
ws
);

101 
Êash_¥e„tch_íabÀ
();

102 
Êash_¥e„tch_dißbÀ
();

103 
Êash_u∆ock
();

104 
Êash_lock
();

105 
Êash_˛ór_pgîr_Êag
();

106 
Êash_˛ór_e›_Êag
();

107 
Êash_˛ór_wΩπîr_Êag
();

108 
Êash_˛ór_bsy_Êag
();

109 
Êash_˛ór_°©us_Êags
();

110 
uöt32_t
 
Êash_gë_°©us_Êags
();

111 
Êash_waô_f‹_œ°_›î©i⁄
();

112 
Êash_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
);

113 
Êash_¥ogøm_hÆf_w‹d
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
);

114 
Êash_îa£_∑ge
(
uöt32_t
 
∑ge_addªss
);

115 
Êash_îa£_Æl_∑ges
();

116 
Êash_u∆ock_›ti⁄_byãs
();

117 
Êash_îa£_›ti⁄_byãs
();

118 
Êash_¥ogøm_›ti⁄_byãs
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
);

120 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/flash_common_f234.h

37 #ifde‡
LIBOPENCM3_FLASH_H


39 #i‚de‡
LIBOPENCM3_FLASH_COMMON_F234_H


40 
	#LIBOPENCM3_FLASH_COMMON_F234_H


	)

45 
	#FLASH_ACR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x00)

	)

46 
	#FLASH_KEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x04)

	)

47 
	#FLASH_OPTKEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x08)

	)

48 
	#FLASH_SR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x0C)

	)

49 
	#FLASH_CR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x10)

	)

53 
	#FLASH_ACR_LATENCY_MASK
 0x07

	)

54 
	#FLASH_ACR_LATENCY_0WS
 0x00

	)

55 
	#FLASH_ACR_LATENCY_1WS
 0x01

	)

56 
	#FLASH_ACR_LATENCY_2WS
 0x02

	)

57 
	#FLASH_ACR_LATENCY_3WS
 0x03

	)

58 
	#FLASH_ACR_LATENCY_4WS
 0x04

	)

59 
	#FLASH_ACR_LATENCY_5WS
 0x05

	)

60 
	#FLASH_ACR_LATENCY_6WS
 0x06

	)

61 
	#FLASH_ACR_LATENCY_7WS
 0x07

	)

69 
	#FLASH_KEYR_KEY1
 ((
uöt32_t
)0x45670123)

	)

70 
	#FLASH_KEYR_KEY2
 ((
uöt32_t
)0xcdef89ab)

	)

74 
BEGIN_DECLS


76 
Êash_£t_ws
(
uöt32_t
 
ws
);

77 
Êash_u∆ock
();

78 
Êash_lock
();

79 
Êash_˛ór_pg≥º_Êag
();

80 
Êash_˛ór_e›_Êag
();

81 
Êash_˛ór_bsy_Êag
();

82 
Êash_˛ór_°©us_Êags
();

83 
Êash_waô_f‹_œ°_›î©i⁄
();

85 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/flash_common_f24.h

37 #ifde‡
LIBOPENCM3_FLASH_H


39 #i‚de‡
LIBOPENCM3_FLASH_COMMON_F24_H


40 
	#LIBOPENCM3_FLASH_COMMON_F24_H


	)

43 
	~<lib›ícm3/°m32/comm⁄/Êash_comm⁄_f234.h
>

47 
	#FLASH_OPTCR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x14)

	)

48 
	#FLASH_OPTCR1
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x18)

	)

52 
	#FLASH_ACR_DCRST
 (1 << 12)

	)

53 
	#FLASH_ACR_ICRST
 (1 << 11)

	)

54 
	#FLASH_ACR_DCEN
 (1 << 10)

	)

55 
	#FLASH_ACR_ICEN
 (1 << 9)

	)

56 
	#FLASH_ACR_PRFTEN
 (1 << 8)

	)

60 
	#FLASH_SR_BSY
 (1 << 16)

	)

61 
	#FLASH_SR_PGSERR
 (1 << 7)

	)

62 
	#FLASH_SR_PGPERR
 (1 << 6)

	)

63 
	#FLASH_SR_PGAERR
 (1 << 5)

	)

64 
	#FLASH_SR_WRPERR
 (1 << 4)

	)

65 
	#FLASH_SR_OPERR
 (1 << 1)

	)

66 
	#FLASH_SR_EOP
 (1 << 0)

	)

70 
	#FLASH_CR_LOCK
 (1 << 31)

	)

71 
	#FLASH_CR_ERRIE
 (1 << 25)

	)

72 
	#FLASH_CR_EOPIE
 (1 << 24)

	)

73 
	#FLASH_CR_STRT
 (1 << 16)

	)

74 
	#FLASH_CR_MER
 (1 << 2)

	)

75 
	#FLASH_CR_SER
 (1 << 1)

	)

76 
	#FLASH_CR_PG
 (1 << 0)

	)

77 
	#FLASH_CR_SNB_SHIFT
 3

	)

78 
	#FLASH_CR_SNB_MASK
 0x1f

	)

79 
	#FLASH_CR_PROGRAM_MASK
 0x3

	)

80 
	#FLASH_CR_PROGRAM_SHIFT
 8

	)

85 
	#FLASH_CR_PROGRAM_X8
 0

	)

86 
	#FLASH_CR_PROGRAM_X16
 1

	)

87 
	#FLASH_CR_PROGRAM_X32
 2

	)

88 
	#FLASH_CR_PROGRAM_X64
 3

	)

95 
	#FLASH_OPTCR_NRST_STDBY
 (1 << 7)

	)

96 
	#FLASH_OPTCR_NRST_STOP
 (1 << 6)

	)

97 
	#FLASH_OPTCR_WDG_SW
 (1 << 5)

	)

98 
	#FLASH_OPTCR_OPTSTRT
 (1 << 1)

	)

99 
	#FLASH_OPTCR_OPTLOCK
 (1 << 0)

	)

100 
	#FLASH_OPTCR_BOR_LEVEL_3
 (0x00 << 2)

	)

101 
	#FLASH_OPTCR_BOR_LEVEL_2
 (0x01 << 2)

	)

102 
	#FLASH_OPTCR_BOR_LEVEL_1
 (0x02 << 2)

	)

103 
	#FLASH_OPTCR_BOR_OFF
 (0x03 << 2)

	)

111 
	#FLASH_OPTKEYR_KEY1
 ((
uöt32_t
)0x08192a3b)

	)

112 
	#FLASH_OPTKEYR_KEY2
 ((
uöt32_t
)0x4c5d6e7f)

	)

116 
BEGIN_DECLS


118 
Êash_u∆ock_›ti⁄_byãs
();

119 
Êash_lock_›ti⁄_byãs
();

120 
Êash_˛ór_pg£º_Êag
();

121 
Êash_˛ór_wΩîr_Êag
();

122 
Êash_˛ór_pg´º_Êag
();

123 
Êash_dˇche_íabÀ
();

124 
Êash_dˇche_dißbÀ
();

125 
Êash_iˇche_íabÀ
();

126 
Êash_iˇche_dißbÀ
();

127 
Êash_¥e„tch_íabÀ
();

128 
Êash_¥e„tch_dißbÀ
();

129 
Êash_dˇche_ª£t
();

130 
Êash_iˇche_ª£t
();

131 
Êash_îa£_Æl_£˘‹s
(
uöt32_t
 
¥ogøm_size
);

132 
Êash_îa£_£˘‹
(
uöt8_t
 
£˘‹
, 
uöt32_t
 
¥ogøm_size
);

133 
Êash_¥ogøm_doubÀ_w‹d
(
uöt32_t
 
addªss
, 
uöt64_t
 
d©a
);

134 
Êash_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
);

135 
Êash_¥ogøm_hÆf_w‹d
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
);

136 
Êash_¥ogøm_byã
(
uöt32_t
 
addªss
, 
uöt8_t
 
d©a
);

137 
Êash_¥ogøm
(
uöt32_t
 
addªss
, c⁄° 
uöt8_t
 *
d©a
, uöt32_à
Àn
);

138 
Êash_¥ogøm_›ti⁄_byãs
(
uöt32_t
 
d©a
);

140 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/flash_common_l01.h

26 #ifde‡
LIBOPENCM3_FLASH_H


28 #i‚de‡
LIBOPENCM3_FLASH_COMMON_L01_H


29 
	#LIBOPENCM3_FLASH_COMMON_L01_H


	)

34 
	#FLASH_ACR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x00)

	)

35 
	#FLASH_PECR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x04)

	)

36 
	#FLASH_PDKEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x08)

	)

37 
	#FLASH_PEKEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x0C)

	)

38 
	#FLASH_PRGKEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x10)

	)

39 
	#FLASH_OPTKEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x14)

	)

40 
	#FLASH_SR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x18)

	)

41 
	#FLASH_OBR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x1c)

	)

42 
	#FLASH_WRPR1
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x20)

	)

43 
	#FLASH_WRPR2
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x80)

	)

46 
	#FLASH_ACR_RUNPD
 (1 << 4)

	)

47 
	#FLASH_ACR_SLEEPPD
 (1 << 3)

	)

48 
	#FLASH_ACR_PRFTEN
 (1 << 1)

	)

52 
	#FLASH_ACR_LATENCY_0WS
 0x00

	)

53 
	#FLASH_ACR_LATENCY_1WS
 0x01

	)

57 
	#FLASH_PECR_OBL_LAUNCH
 (1 << 18)

	)

58 
	#FLASH_PECR_ERRIE
 (1 << 17)

	)

59 
	#FLASH_PECR_EOPIE
 (1 << 16)

	)

60 
	#FLASH_PECR_PARALLBANK
 (1 << 15)

	)

61 
	#FLASH_PECR_FPRG
 (1 << 10)

	)

62 
	#FLASH_PECR_ERASE
 (1 << 9)

	)

63 
	#FLASH_PECR_FTDW
 (1 << 8)

	)

64 
	#FLASH_PECR_DATA
 (1 << 4)

	)

65 
	#FLASH_PECR_PROG
 (1 << 3)

	)

66 
	#FLASH_PECR_OPTLOCK
 (1 << 2)

	)

67 
	#FLASH_PECR_PRGLOCK
 (1 << 1)

	)

68 
	#FLASH_PECR_PELOCK
 (1 << 0)

	)

71 
	#FLASH_PDKEYR_PDKEY1
 ((
uöt32_t
)0x04152637)

	)

72 
	#FLASH_PDKEYR_PDKEY2
 ((
uöt32_t
)0xFAFBFCFD)

	)

75 
	#FLASH_PEKEYR_PEKEY1
 ((
uöt32_t
)0x89ABCDEF)

	)

76 
	#FLASH_PEKEYR_PEKEY2
 ((
uöt32_t
)0x02030405)

	)

79 
	#FLASH_PRGKEYR_PRGKEY1
 ((
uöt32_t
)0x8C9DAEBF)

	)

80 
	#FLASH_PRGKEYR_PRGKEY2
 ((
uöt32_t
)0x13141516)

	)

83 
	#FLASH_OPTKEYR_OPTKEY1
 ((
uöt32_t
)0xFBEAD9C8)

	)

84 
	#FLASH_OPTKEYR_OPTKEY2
 ((
uöt32_t
)0x24252627)

	)

87 
	#FLASH_SR_OPTVERR
 (1 << 11)

	)

88 
	#FLASH_SR_SIZEERR
 (1 << 10)

	)

89 
	#FLASH_SR_PGAERR
 (1 << 9)

	)

90 
	#FLASH_SR_WRPERR
 (1 << 8)

	)

91 
	#FLASH_SR_READY
 (1 << 3)

	)

92 
	#FLASH_SR_ENDHV
 (1 << 2)

	)

93 
	#FLASH_SR_EOP
 (1 << 1)

	)

94 
	#FLASH_SR_BSY
 (1 << 0)

	)

97 
	#FLASH_OBR_BFB2
 (1 << 23)

	)

98 
	#FLASH_OBR_NRST_STDBY
 (1 << 22)

	)

99 
	#FLASH_OBR_NRST_STOP
 (1 << 21)

	)

100 
	#FLASH_OBR_IWDG_SW
 (1 << 20)

	)

101 
	#FLASH_OBR_BOR_OFF
 (0x0 << 16)

	)

102 
	#FLASH_OBR_BOR_LEVEL_1
 (0x8 << 16)

	)

103 
	#FLASH_OBR_BOR_LEVEL_2
 (0x9 << 16)

	)

104 
	#FLASH_OBR_BOR_LEVEL_3
 (0x®<< 16)

	)

105 
	#FLASH_OBR_BOR_LEVEL_4
 (0xb << 16)

	)

106 
	#FLASH_OBR_BOR_LEVEL_5
 (0x¯<< 16)

	)

107 
	#FLASH_OBR_RDPRT_LEVEL_0
 (0xØ)

	)

108 
	#FLASH_OBR_RDPRT_LEVEL_1
 (0x00)

	)

109 
	#FLASH_OBR_RDPRT_LEVEL_2
 (0xcc)

	)

111 
BEGIN_DECLS


113 
Êash_¥e„tch_íabÀ
();

114 
Êash_¥e„tch_dißbÀ
();

115 
Êash_£t_ws
(
uöt32_t
 
ws
);

116 
Êash_u∆ock_≥¸
();

117 
Êash_lock_≥¸
();

118 
Êash_u∆ock_¥ogmem
();

119 
Êash_lock_¥ogmem
();

120 
Êash_u∆ock_›ti⁄_byãs
();

121 
Êash_lock_›ti⁄_byãs
();

122 
Êash_u∆ock
();

123 
Êash_lock
();

125 
ì¥om_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
);

126 
ì¥om_¥ogøm_w‹ds
(
uöt32_t
 
addªss
, uöt32_à*
d©a
, 
Àngth_ö_w‹ds
);

128 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/gpio_common_all.h

34 #i‡
deföed
(
LIBOPENCM3_GPIO_H
)

36 #i‚de‡
LIBOPENCM3_GPIO_COMMON_ALL_H


37 
	#LIBOPENCM3_GPIO_COMMON_ALL_H


	)

45 
	#GPIO_LCKK
 (1 << 16)

	)

53 
	#GPIO0
 (1 << 0)

	)

54 
	#GPIO1
 (1 << 1)

	)

55 
	#GPIO2
 (1 << 2)

	)

56 
	#GPIO3
 (1 << 3)

	)

57 
	#GPIO4
 (1 << 4)

	)

58 
	#GPIO5
 (1 << 5)

	)

59 
	#GPIO6
 (1 << 6)

	)

60 
	#GPIO7
 (1 << 7)

	)

61 
	#GPIO8
 (1 << 8)

	)

62 
	#GPIO9
 (1 << 9)

	)

63 
	#GPIO10
 (1 << 10)

	)

64 
	#GPIO11
 (1 << 11)

	)

65 
	#GPIO12
 (1 << 12)

	)

66 
	#GPIO13
 (1 << 13)

	)

67 
	#GPIO14
 (1 << 14)

	)

68 
	#GPIO15
 (1 << 15)

	)

69 
	#GPIO_ALL
 0xffff

	)

72 
BEGIN_DECLS


74 
gpio_£t
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
);

75 
gpio_˛ór
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
);

76 
uöt16_t
 
gpio_gë
(
uöt32_t
 
gpi›‹t
, uöt16_à
gpios
);

77 
gpio_toggÀ
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
);

78 
uöt16_t
 
gpio_p‹t_ªad
(
uöt32_t
 
gpi›‹t
);

79 
gpio_p‹t_wrôe
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
d©a
);

80 
gpio_p‹t_c⁄fig_lock
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
);

82 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/gpio_common_f234.h

34 #ifde‡
LIBOPENCM3_GPIO_H


36 #i‚de‡
LIBOPENCM3_GPIO_COMMON_F234_H


37 
	#LIBOPENCM3_GPIO_COMMON_F234_H


	)

41 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_Æl.h
>

48 
	#GPIOA
 
GPIO_PORT_A_BASE


	)

49 
	#GPIOB
 
GPIO_PORT_B_BASE


	)

50 
	#GPIOC
 
GPIO_PORT_C_BASE


	)

51 
	#GPIOD
 
GPIO_PORT_D_BASE


	)

52 
	#GPIOE
 
GPIO_PORT_E_BASE


	)

53 
	#GPIOF
 
GPIO_PORT_F_BASE


	)

60 
	#GPIO_MODER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00)

	)

61 
	#GPIOA_MODER
 
	`GPIO_MODER
(
GPIOA
)

	)

62 
	#GPIOB_MODER
 
	`GPIO_MODER
(
GPIOB
)

	)

63 
	#GPIOC_MODER
 
	`GPIO_MODER
(
GPIOC
)

	)

64 
	#GPIOD_MODER
 
	`GPIO_MODER
(
GPIOD
)

	)

65 
	#GPIOE_MODER
 
	`GPIO_MODER
(
GPIOE
)

	)

66 
	#GPIOF_MODER
 
	`GPIO_MODER
(
GPIOF
)

	)

69 
	#GPIO_OTYPER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x04)

	)

70 
	#GPIOA_OTYPER
 
	`GPIO_OTYPER
(
GPIOA
)

	)

71 
	#GPIOB_OTYPER
 
	`GPIO_OTYPER
(
GPIOB
)

	)

72 
	#GPIOC_OTYPER
 
	`GPIO_OTYPER
(
GPIOC
)

	)

73 
	#GPIOD_OTYPER
 
	`GPIO_OTYPER
(
GPIOD
)

	)

74 
	#GPIOE_OTYPER
 
	`GPIO_OTYPER
(
GPIOE
)

	)

75 
	#GPIOF_OTYPER
 
	`GPIO_OTYPER
(
GPIOF
)

	)

78 
	#GPIO_OSPEEDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x08)

	)

79 
	#GPIOA_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOA
)

	)

80 
	#GPIOB_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOB
)

	)

81 
	#GPIOC_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOC
)

	)

82 
	#GPIOD_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOD
)

	)

83 
	#GPIOE_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOE
)

	)

84 
	#GPIOF_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOF
)

	)

87 
	#GPIO_PUPDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0c)

	)

88 
	#GPIOA_PUPDR
 
	`GPIO_PUPDR
(
GPIOA
)

	)

89 
	#GPIOB_PUPDR
 
	`GPIO_PUPDR
(
GPIOB
)

	)

90 
	#GPIOC_PUPDR
 
	`GPIO_PUPDR
(
GPIOC
)

	)

91 
	#GPIOD_PUPDR
 
	`GPIO_PUPDR
(
GPIOD
)

	)

92 
	#GPIOE_PUPDR
 
	`GPIO_PUPDR
(
GPIOE
)

	)

93 
	#GPIOF_PUPDR
 
	`GPIO_PUPDR
(
GPIOF
)

	)

96 
	#GPIO_IDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x10)

	)

97 
	#GPIOA_IDR
 
	`GPIO_IDR
(
GPIOA
)

	)

98 
	#GPIOB_IDR
 
	`GPIO_IDR
(
GPIOB
)

	)

99 
	#GPIOC_IDR
 
	`GPIO_IDR
(
GPIOC
)

	)

100 
	#GPIOD_IDR
 
	`GPIO_IDR
(
GPIOD
)

	)

101 
	#GPIOE_IDR
 
	`GPIO_IDR
(
GPIOE
)

	)

102 
	#GPIOF_IDR
 
	`GPIO_IDR
(
GPIOF
)

	)

105 
	#GPIO_ODR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x14)

	)

106 
	#GPIOA_ODR
 
	`GPIO_ODR
(
GPIOA
)

	)

107 
	#GPIOB_ODR
 
	`GPIO_ODR
(
GPIOB
)

	)

108 
	#GPIOC_ODR
 
	`GPIO_ODR
(
GPIOC
)

	)

109 
	#GPIOD_ODR
 
	`GPIO_ODR
(
GPIOD
)

	)

110 
	#GPIOE_ODR
 
	`GPIO_ODR
(
GPIOE
)

	)

111 
	#GPIOF_ODR
 
	`GPIO_ODR
(
GPIOF
)

	)

114 
	#GPIO_BSRR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x18)

	)

115 
	#GPIOA_BSRR
 
	`GPIO_BSRR
(
GPIOA
)

	)

116 
	#GPIOB_BSRR
 
	`GPIO_BSRR
(
GPIOB
)

	)

117 
	#GPIOC_BSRR
 
	`GPIO_BSRR
(
GPIOC
)

	)

118 
	#GPIOD_BSRR
 
	`GPIO_BSRR
(
GPIOD
)

	)

119 
	#GPIOE_BSRR
 
	`GPIO_BSRR
(
GPIOE
)

	)

120 
	#GPIOF_BSRR
 
	`GPIO_BSRR
(
GPIOF
)

	)

123 
	#GPIO_LCKR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x1c)

	)

124 
	#GPIOA_LCKR
 
	`GPIO_LCKR
(
GPIOA
)

	)

125 
	#GPIOB_LCKR
 
	`GPIO_LCKR
(
GPIOB
)

	)

126 
	#GPIOC_LCKR
 
	`GPIO_LCKR
(
GPIOC
)

	)

127 
	#GPIOD_LCKR
 
	`GPIO_LCKR
(
GPIOD
)

	)

128 
	#GPIOE_LCKR
 
	`GPIO_LCKR
(
GPIOE
)

	)

129 
	#GPIOF_LCKR
 
	`GPIO_LCKR
(
GPIOF
)

	)

132 
	#GPIO_AFRL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x20)

	)

133 
	#GPIOA_AFRL
 
	`GPIO_AFRL
(
GPIOA
)

	)

134 
	#GPIOB_AFRL
 
	`GPIO_AFRL
(
GPIOB
)

	)

135 
	#GPIOC_AFRL
 
	`GPIO_AFRL
(
GPIOC
)

	)

136 
	#GPIOD_AFRL
 
	`GPIO_AFRL
(
GPIOD
)

	)

137 
	#GPIOE_AFRL
 
	`GPIO_AFRL
(
GPIOE
)

	)

138 
	#GPIOF_AFRL
 
	`GPIO_AFRL
(
GPIOF
)

	)

141 
	#GPIO_AFRH
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x24)

	)

142 
	#GPIOA_AFRH
 
	`GPIO_AFRH
(
GPIOA
)

	)

143 
	#GPIOB_AFRH
 
	`GPIO_AFRH
(
GPIOB
)

	)

144 
	#GPIOC_AFRH
 
	`GPIO_AFRH
(
GPIOC
)

	)

145 
	#GPIOD_AFRH
 
	`GPIO_AFRH
(
GPIOD
)

	)

146 
	#GPIOE_AFRH
 
	`GPIO_AFRH
(
GPIOE
)

	)

147 
	#GPIOF_AFRH
 
	`GPIO_AFRH
(
GPIOF
)

	)

151 
	#GPIO_MODE
(
n
, 
mode
Ë((modeË<< (2 * (n)))

	)

152 
	#GPIO_MODE_MASK
(
n
Ë(0x3 << (2 * (n)))

	)

156 
	#GPIO_MODE_INPUT
 0x0

	)

157 
	#GPIO_MODE_OUTPUT
 0x1

	)

158 
	#GPIO_MODE_AF
 0x2

	)

159 
	#GPIO_MODE_ANALOG
 0x3

	)

168 
	#GPIO_OTYPE_PP
 0x0

	)

170 
	#GPIO_OTYPE_OD
 0x1

	)

175 
	#GPIO_OSPEED
(
n
, 
•ìd
Ë((•ìdË<< (2 * (n)))

	)

176 
	#GPIO_OSPEED_MASK
(
n
Ë(0x3 << (2 * (n)))

	)

180 
	#GPIO_OSPEED_2MHZ
 0x0

	)

181 
	#GPIO_OSPEED_25MHZ
 0x1

	)

182 
	#GPIO_OSPEED_50MHZ
 0x2

	)

183 
	#GPIO_OSPEED_100MHZ
 0x3

	)

188 
	#GPIO_PUPD
(
n
, 
pupd
Ë(’updË<< (2 * (n)))

	)

189 
	#GPIO_PUPD_MASK
(
n
Ë(0x3 << (2 * (n)))

	)

193 
	#GPIO_PUPD_NONE
 0x0

	)

194 
	#GPIO_PUPD_PULLUP
 0x1

	)

195 
	#GPIO_PUPD_PULLDOWN
 0x2

	)

213 
	#GPIO_LCKK
 (1 << 16)

	)

221 
	#GPIO_AFR
(
n
, 
af
Ë(◊fË<< (“Ë* 4))

	)

222 
	#GPIO_AFR_MASK
(
n
Ë(0x‡<< (“Ë* 4))

	)

226 
	#GPIO_AF0
 0x0

	)

227 
	#GPIO_AF1
 0x1

	)

228 
	#GPIO_AF2
 0x2

	)

229 
	#GPIO_AF3
 0x3

	)

230 
	#GPIO_AF4
 0x4

	)

231 
	#GPIO_AF5
 0x5

	)

232 
	#GPIO_AF6
 0x6

	)

233 
	#GPIO_AF7
 0x7

	)

234 
	#GPIO_AF8
 0x8

	)

235 
	#GPIO_AF9
 0x9

	)

236 
	#GPIO_AF10
 0xa

	)

237 
	#GPIO_AF11
 0xb

	)

238 
	#GPIO_AF12
 0xc

	)

239 
	#GPIO_AF13
 0xd

	)

240 
	#GPIO_AF14
 0xe

	)

241 
	#GPIO_AF15
 0xf

	)

248 
BEGIN_DECLS


258 
gpio_mode_£tup
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
mode
, uöt8_à
puŒ_up_down
,

259 
uöt16_t
 
gpios
);

260 
gpio_£t_ouçut_›ti⁄s
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
Ÿy≥
, uöt8_à
•ìd
,

261 
uöt16_t
 
gpios
);

262 
gpio_£t_af
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
Æt_func_num
, 
uöt16_t
 
gpios
);

264 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/gpio_common_f24.h

34 #ifde‡
LIBOPENCM3_GPIO_H


36 #i‚de‡
LIBOPENCM3_GPIO_COMMON_F24_H


37 
	#LIBOPENCM3_GPIO_COMMON_F24_H


	)

41 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_f234.h
>

48 
	#GPIOG
 
GPIO_PORT_G_BASE


	)

49 
	#GPIOH
 
GPIO_PORT_H_BASE


	)

50 
	#GPIOI
 
GPIO_PORT_I_BASE


	)

51 
	#GPIOJ
 
GPIO_PORT_J_BASE


	)

52 
	#GPIOK
 
GPIO_PORT_K_BASE


	)

58 
	#GPIOG_MODER
 
	`GPIO_MODER
(
GPIOG
)

	)

59 
	#GPIOH_MODER
 
	`GPIO_MODER
(
GPIOH
)

	)

60 
	#GPIOI_MODER
 
	`GPIO_MODER
(
GPIOI
)

	)

61 
	#GPIOJ_MODER
 
	`GPIO_MODER
(
GPIOJ
)

	)

62 
	#GPIOK_MODER
 
	`GPIO_MODER
(
GPIOK
)

	)

65 
	#GPIOG_OTYPER
 
	`GPIO_OTYPER
(
GPIOG
)

	)

66 
	#GPIOH_OTYPER
 
	`GPIO_OTYPER
(
GPIOH
)

	)

67 
	#GPIOI_OTYPER
 
	`GPIO_OTYPER
(
GPIOI
)

	)

68 
	#GPIOJ_OTYPER
 
	`GPIO_OTYPER
(
GPIOJ
)

	)

69 
	#GPIOK_OTYPER
 
	`GPIO_OTYPER
(
GPIOK
)

	)

72 
	#GPIOG_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOG
)

	)

73 
	#GPIOH_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOH
)

	)

74 
	#GPIOI_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOI
)

	)

75 
	#GPIOJ_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOJ
)

	)

76 
	#GPIOK_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOK
)

	)

79 
	#GPIOG_PUPDR
 
	`GPIO_PUPDR
(
GPIOG
)

	)

80 
	#GPIOH_PUPDR
 
	`GPIO_PUPDR
(
GPIOH
)

	)

81 
	#GPIOI_PUPDR
 
	`GPIO_PUPDR
(
GPIOI
)

	)

82 
	#GPIOJ_PUPDR
 
	`GPIO_PUPDR
(
GPIOJ
)

	)

83 
	#GPIOK_PUPDR
 
	`GPIO_PUPDR
(
GPIOK
)

	)

86 
	#GPIOG_IDR
 
	`GPIO_IDR
(
GPIOG
)

	)

87 
	#GPIOH_IDR
 
	`GPIO_IDR
(
GPIOH
)

	)

88 
	#GPIOI_IDR
 
	`GPIO_IDR
(
GPIOI
)

	)

89 
	#GPIOJ_IDR
 
	`GPIO_IDR
(
GPIOJ
)

	)

90 
	#GPIOK_IDR
 
	`GPIO_IDR
(
GPIOK
)

	)

93 
	#GPIOG_ODR
 
	`GPIO_ODR
(
GPIOG
)

	)

94 
	#GPIOH_ODR
 
	`GPIO_ODR
(
GPIOH
)

	)

95 
	#GPIOI_ODR
 
	`GPIO_ODR
(
GPIOI
)

	)

96 
	#GPIOJ_ODR
 
	`GPIO_ODR
(
GPIOJ
)

	)

97 
	#GPIOK_ODR
 
	`GPIO_ODR
(
GPIOK
)

	)

100 
	#GPIOG_BSRR
 
	`GPIO_BSRR
(
GPIOG
)

	)

101 
	#GPIOH_BSRR
 
	`GPIO_BSRR
(
GPIOH
)

	)

102 
	#GPIOI_BSRR
 
	`GPIO_BSRR
(
GPIOI
)

	)

103 
	#GPIOJ_BSRR
 
	`GPIO_BSRR
(
GPIOJ
)

	)

104 
	#GPIOK_BSRR
 
	`GPIO_BSRR
(
GPIOK
)

	)

107 
	#GPIOG_LCKR
 
	`GPIO_LCKR
(
GPIOG
)

	)

108 
	#GPIOH_LCKR
 
	`GPIO_LCKR
(
GPIOH
)

	)

109 
	#GPIOI_LCKR
 
	`GPIO_LCKR
(
GPIOI
)

	)

110 
	#GPIOJ_LCKR
 
	`GPIO_LCKR
(
GPIOJ
)

	)

111 
	#GPIOK_LCKR
 
	`GPIO_LCKR
(
GPIOK
)

	)

114 
	#GPIOG_AFRL
 
	`GPIO_AFRL
(
GPIOG
)

	)

115 
	#GPIOH_AFRL
 
	`GPIO_AFRL
(
GPIOH
)

	)

116 
	#GPIOI_AFRL
 
	`GPIO_AFRL
(
GPIOI
)

	)

117 
	#GPIOJ_AFRL
 
	`GPIO_AFRL
(
GPIOJ
)

	)

118 
	#GPIOK_AFRL
 
	`GPIO_AFRL
(
GPIOK
)

	)

121 
	#GPIOG_AFRH
 
	`GPIO_AFRH
(
GPIOG
)

	)

122 
	#GPIOH_AFRH
 
	`GPIO_AFRH
(
GPIOH
)

	)

123 
	#GPIOI_AFRH
 
	`GPIO_AFRH
(
GPIOI
)

	)

124 
	#GPIOJ_AFRH
 
	`GPIO_AFRH
(
GPIOJ
)

	)

125 
	#GPIOK_AFRH
 
	`GPIO_AFRH
(
GPIOK
)

	)

	@libopencm3/include/libopencm3/stm32/common/hash_common_f24.h

29 #ifde‡
LIBOPENCM3_HASH_H


31 #i‚de‡
LIBOPENCM3_HASH_COMMON_F24_H


32 
	#LIBOPENCM3_HASH_COMMON_F24_H


	)

41 
	#HASH_BASE
 (
PERIPH_BASE_AHB2
 + 0x60400)

	)

42 
	#HASH
 
HASH_BASE


	)

48 
	#HASH_CR
 
	`MMIO32
(
HASH
 + 0x00)

	)

51 
	#HASH_DIN
 
	`MMIO32
(
HASH
 + 0x04)

	)

54 
	#HASH_STR
 
	`MMIO32
(
HASH
 + 0x08)

	)

57 
	#HASH_HR
 (&
	`MMIO32
(
HASH
 + 0x0C)Ë

	)

60 
	#HASH_IMR
 
	`MMIO32
(
HASH
 + 0x20)

	)

63 
	#HASH_SR
 
	`MMIO32
(
HASH
 + 0x28)

	)

66 
	#HASH_CSR
 (&
	`MMIO32
(
HASH
 + 0xF8)Ë

	)

71 
	#HASH_CR_INIT
 (1 << 2)

	)

74 
	#HASH_CR_DMAE
 (1 << 3)

	)

82 
	#HASH_DATA_32BIT
 (0 << 4)

	)

83 
	#HASH_DATA_16BIT
 (1 << 4)

	)

84 
	#HASH_DATA_8BIT
 (2 << 4)

	)

85 
	#HASH_DATA_BITSTRING
 (3 << 4)

	)

87 
	#HASH_CR_DATATYPE
 (3 << 4)

	)

95 
	#HASH_MODE_HASH
 (0 << 6)

	)

96 
	#HASH_MODE_HMAC
 (1 << 6)

	)

98 
	#HASH_CR_MODE
 (1 << 6)

	)

106 
	#HASH_ALGO_SHA1
 (0 << 7)

	)

107 
	#HASH_ALGO_MD5
 (1 << 7)

	)

109 
	#HASH_CR_ALGO
 (1 << 7)

	)

112 
	#HASH_CR_NBW
 (15 << 8)

	)

115 
	#HASH_CR_DINNE
 (1 << 12)

	)

123 
	#HASH_KEY_SHORT
 (0 << 16)

	)

124 
	#HASH_KEY_LONG
 (1 << 16)

	)

126 
	#HASH_CR_LKEY
 (1 << 16)

	)

132 
	#HASH_STR_NBW
 (31 << 0)

	)

135 
	#HASH_STR_DCAL
 (1 << 8)

	)

140 
	#HASH_IMR_DINIE
 (1 << 0)

	)

143 
	#HASH_IMR_DCIE
 (1 << 1)

	)

148 
	#HASH_SR_DINIS
 (1 << 0)

	)

151 
	#HASH_SR_DCIS
 (1 << 1)

	)

154 
	#HASH_SR_DMAS
 (1 << 2)

	)

157 
	#HASH_SR_BUSY
 (1 << 3)

	)

161 
BEGIN_DECLS


163 
hash_£t_mode
(
uöt8_t
 
mode
);

164 
hash_£t_Æg‹ôhm
(
uöt8_t
 
Æg‹ôhm
);

165 
hash_£t_d©a_ty≥
(
uöt8_t
 
d©©y≥
);

166 
hash_£t_key_Àngth
(
uöt8_t
 
keyÀngth
);

167 
hash_£t_œ°_w‹d_vÆid_bôs
(
uöt8_t
 
vÆidbôs
);

168 
hash_öô
();

169 
hash_add_d©a
(
uöt32_t
 
d©a
);

170 
hash_dige°
();

171 
hash_gë_ªsu…
(
uöt32_t
 *
d©a
);

173 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/hrtim_common_all.h

34 #ifde‡
LIBOPENCM3_HRTIM_H


36 #i‚de‡
LIBOPENCM3_HRTIM_COMMON_ALL_H


37 
	#LIBOPENCM3_HRTIM_COMMON_ALL_H


	)

44 
	#HRTIM_CR1
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x00)

	)

47 
	#HRTIM_CR2
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x04)

	)

50 
	#HRTIM_ISR
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x08)

	)

53 
	#HRTIM_ICR
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x0c)

	)

56 
	#HRTIM_IER
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x10)

	)

59 
	#HRTIM_OENR
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x14)

	)

62 
	#HRTIM_ODISR
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x18)

	)

65 
	#HRTIM_ODSR
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x1c)

	)

68 
	#HRTIM_BMCR
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x20)

	)

71 
	#HRTIM_BMTRGR
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x24)

	)

74 
	#HRTIM_BMCMPR6
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x28)

	)

77 
	#HRTIM_BMPER
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x2c)

	)

80 
	#HRTIM_EECR1
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x30)

	)

83 
	#HRTIM_EECR2
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x34)

	)

86 
	#HRTIM_EECR3
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x38)

	)

89 
	#HRTIM_ADC1R
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x3c)

	)

92 
	#HRTIM_ADC2R
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x40)

	)

95 
	#HRTIM_ADC3R
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x44)

	)

98 
	#HRTIM_ADC4R
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x48)

	)

101 
	#HRTIM_DLLCR
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x4c)

	)

104 
	#HRTIM_FLTINR1
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x50)

	)

107 
	#HRTIM_FLTINR2
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x54)

	)

110 
	#HRTIM_BDMUPDR
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x58)

	)

113 
	#HRTIM_BDTxUPR
(
x
Ë
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x5¯+ (x)*4)

	)

116 
	#HRTIM_BDMADR
 
	`MMIO32
(
HRTIM_BASE
 + 0x380 + 0x70)

	)

125 
	#HRTIM_MCR
 
	`MMIO32
(
HRTIM_BASE
 + 0x00)

	)

128 
	#HRTIM_MISR
 
	`MMIO32
(
HRTIM_BASE
 + 0x04)

	)

131 
	#HRTIM_MICR
 
	`MMIO32
(
HRTIM_BASE
 + 0x08)

	)

134 
	#HRTIM_MDIER
 
	`MMIO32
(
HRTIM_BASE
 + 0x0c)

	)

137 
	#HRTIM_MCNTR
 
	`MMIO32
(
HRTIM_BASE
 + 0x10)

	)

140 
	#HRTIM_MPER
 
	`MMIO32
(
HRTIM_BASE
 + 0x14)

	)

143 
	#HRTIM_MREP
 
	`MMIO32
(
HRTIM_BASE
 + 0x18)

	)

146 
	#HRTIM_MCMP1R
 
	`MMIO32
(
HRTIM_BASE
 + 0x1c)

	)

149 
	#HRTIM_MCMP2R
 
	`MMIO32
(
HRTIM_BASE
 + 0x24)

	)

152 
	#HRTIM_MCMP3R
 
	`MMIO32
(
HRTIM_BASE
 + 0x28)

	)

155 
	#HRTIM_MCMP4R
 
	`MMIO32
(
HRTIM_BASE
 + 0x2c)

	)

163 
	#HRTIM_TIMx_BASE
(
x
Ë(
HRTIM_BASE
 + 0x80 + (xË* 0x80)

	)

165 
	#HRTIM_TIMA
 0

	)

166 
	#HRTIM_TIMB
 1

	)

167 
	#HRTIM_TIMC
 2

	)

168 
	#HRTIM_TIMD
 3

	)

169 
	#HRTIM_TIME
 4

	)

172 
	#HRTIM_TIMx_TIMCR
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x00)

	)

175 
	#HRTIM_TIMx_ISR
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x04)

	)

178 
	#HRTIM_TIMx_ICR
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x08)

	)

181 
	#HRTIM_TIMx_DIER
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x0c)

	)

184 
	#HRTIM_TIMx_CNT
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x10)

	)

187 
	#HRTIM_TIMx_PER
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x14)

	)

190 
	#HRTIM_TIMx_REP
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x18)

	)

193 
	#HRTIM_TIMx_CMP1
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x1c)

	)

196 
	#HRTIM_TIMx_CMP1C
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x20)

	)

199 
	#HRTIM_TIMx_CMP2
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x24)

	)

202 
	#HRTIM_TIMx_CMP3
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x28)

	)

205 
	#HRTIM_TIMx_CMP4
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x2c)

	)

208 
	#HRTIM_TIMx_CPT1
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x30)

	)

211 
	#HRTIM_TIMx_CPT2
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x34)

	)

214 
	#HRTIM_TIMx_DT
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x38)

	)

217 
	#HRTIM_TIMx_SET1
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x3c)

	)

220 
	#HRTIM_TIMx_RST1
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x40)

	)

223 
	#HRTIM_TIMx_SET2
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x44)

	)

226 
	#HRTIM_TIMx_RST2
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x48)

	)

229 
	#HRTIM_TIMx_EEF1
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x4c)

	)

232 
	#HRTIM_TIMx_EEF2
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x50)

	)

235 
	#HRTIM_TIMx_RST
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x54)

	)

238 
	#HRTIM_TIMx_CHP
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x58)

	)

241 
	#HRTIM_TIMx_CPT1CR
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x5c)

	)

244 
	#HRTIM_TIMx_CPT2CR
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x60)

	)

247 
	#HRTIM_TIMx_OUT
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x64)

	)

250 
	#HRTIM_TIMx_FLT
(
x
Ë
	`MMIO32
(
	`HRTIM_TIMx_BASE
(xË+ 0x68)

	)

259 
	#HRTIM_CR1_AD4USRC_SHIFT
 25

	)

260 
	#HRTIM_CR1_AD4USRC_MASK
 (0x7 << 
HRTIM_CR1_AD4USRC_SHIFT
)

	)

263 
	#HRTIM_CR1_AD3USRC_SHIFT
 22

	)

264 
	#HRTIM_CR1_AD3USRC_MASK
 (0x7 << 
HRTIM_CR1_AD3USRC_SHIFT
)

	)

267 
	#HRTIM_CR1_AD2USRC_SHIFT
 19

	)

268 
	#HRTIM_CR1_AD2USRC_MASK
 (0x7 << 
HRTIM_CR1_AD2USRC_SHIFT
)

	)

271 
	#HRTIM_CR1_AD1USRC_SHIFT
 16

	)

272 
	#HRTIM_CR1_AD1USRC_MASK
 (0x7 << 
HRTIM_CR1_AD1USRC_SHIFT
)

	)

274 
	#HRTIM_CR1_ADxUSRC_MASTER
 0x0

	)

275 
	#HRTIM_CR1_ADxUSRC_TIMA
 0x1

	)

276 
	#HRTIM_CR1_ADxUSRC_TIMB
 0x2

	)

277 
	#HRTIM_CR1_ADxUSRC_TIMC
 0x3

	)

278 
	#HRTIM_CR1_ADxUSRC_TIMD
 0x4

	)

279 
	#HRTIM_CR1_ADxUSRC_TIME
 0x5

	)

282 
	#HRTIM_CR1_TEUDIS
 (1 << 5)

	)

285 
	#HRTIM_CR1_TDUDIS
 (1 << 4)

	)

288 
	#HRTIM_CR1_TCUDIS
 (1 << 3)

	)

291 
	#HRTIM_CR1_TBUDIS
 (1 << 2)

	)

294 
	#HRTIM_CR1_TAUDIS
 (1 << 1)

	)

297 
	#HRTIM_CR1_MUDIS
 (1 << 0)

	)

307 
	#HRTIM_CR2_TERST
 (1 << 13)

	)

310 
	#HRTIM_CR2_TDRST
 (1 << 12)

	)

313 
	#HRTIM_CR2_TCRST
 (1 << 11)

	)

316 
	#HRTIM_CR2_TBRST
 (1 << 10)

	)

319 
	#HRTIM_CR2_TARST
 (1 << 9)

	)

322 
	#HRTIM_CR2_MRST
 (1 << 8)

	)

325 
	#HRTIM_CR2_TESWU
 (1 << 5)

	)

328 
	#HRTIM_CR2_TDSWU
 (1 << 4)

	)

331 
	#HRTIM_CR2_TCSWU
 (1 << 3)

	)

334 
	#HRTIM_CR2_TBSWU
 (1 << 2)

	)

337 
	#HRTIM_CR2_TASWU
 (1 << 1)

	)

340 
	#HRTIM_CR2_MSWU
 (1 << 0)

	)

350 
	#HRTIM_ISR_BMPER
 (1 << 17)

	)

353 
	#HRTIM_ISR_DLLRDY
 (1 << 16)

	)

356 
	#HRTIM_ISR_SYSFLT
 (1 << 5)

	)

359 
	#HRTIM_ISR_FLT5
 (1 << 4)

	)

362 
	#HRTIM_ISR_FLT4
 (1 << 3)

	)

365 
	#HRTIM_ISR_FLT3
 (1 << 2)

	)

368 
	#HRTIM_ISR_FLT2
 (1 << 1)

	)

371 
	#HRTIM_ISR_FLT1
 (1 << 0)

	)

380 
	#HRTIM_ICR_BMPERC
 (1 << 17)

	)

383 
	#HRTIM_ICR_DLLRDYC
 (1 << 16)

	)

386 
	#HRTIM_ICR_SYSFLTC
 (1 << 5)

	)

389 
	#HRTIM_ICR_FLT5C
 (1 << 4)

	)

392 
	#HRTIM_ICR_FLT4C
 (1 << 3)

	)

395 
	#HRTIM_ICR_FLT3C
 (1 << 2)

	)

398 
	#HRTIM_ICR_FLT2C
 (1 << 1)

	)

401 
	#HRTIM_ICR_FLT1C
 (1 << 0)

	)

411 
	#HRTIM_IER_BMPERIE
 (1 << 17)

	)

414 
	#HRTIM_IER_DLLRDYIE
 (1 << 16)

	)

417 
	#HRTIM_IER_SYSFLTE
 (1 << 5)

	)

420 
	#HRTIM_IER_FLT5IE
 (1 << 4)

	)

423 
	#HRTIM_IER_FLT4IE
 (1 << 3)

	)

426 
	#HRTIM_IER_FLT3IE
 (1 << 2)

	)

429 
	#HRTIM_IER_FLT2IE
 (1 << 1)

	)

432 
	#HRTIM_IER_FLT1IE
 (1 << 0)

	)

442 
	#HRTIM_OENR_TE2OEN
 (1 << 9)

	)

445 
	#HRTIM_OENR_TE1OEN
 (1 << 8)

	)

448 
	#HRTIM_OENR_TD2OEN
 (1 << 7)

	)

451 
	#HRTIM_OENR_TD1OEN
 (1 << 6)

	)

454 
	#HRTIM_OENR_TC2OEN
 (1 << 5)

	)

457 
	#HRTIM_OENR_TC1OEN
 (1 << 4)

	)

460 
	#HRTIM_OENR_TB2OEN
 (1 << 3)

	)

463 
	#HRTIM_OENR_TB1OEN
 (1 << 2)

	)

466 
	#HRTIM_OENR_TA2OEN
 (1 << 1)

	)

469 
	#HRTIM_OENR_TA1OEN
 (1 << 0)

	)

479 
	#HRTIM_DISR_TE2ODIS
 (1 << 9)

	)

482 
	#HRTIM_DISR_TE1ODIS
 (1 << 8)

	)

485 
	#HRTIM_DISR_TD2ODIS
 (1 << 7)

	)

488 
	#HRTIM_DISR_TD1ODIS
 (1 << 6)

	)

491 
	#HRTIM_DISR_TC2ODIS
 (1 << 5)

	)

494 
	#HRTIM_DISR_TC1ODIS
 (1 << 4)

	)

497 
	#HRTIM_DISR_TB2ODIS
 (1 << 3)

	)

500 
	#HRTIM_DISR_TB1ODIS
 (1 << 2)

	)

503 
	#HRTIM_DISR_TA2ODIS
 (1 << 1)

	)

506 
	#HRTIM_DISR_TA1ODIS
 (1 << 0)

	)

516 
	#HRTIM_ODSR_TE2ODS
 (1 << 9)

	)

519 
	#HRTIM_ODSR_TE1ODS
 (1 << 8)

	)

522 
	#HRTIM_ODSR_TD2ODS
 (1 << 7)

	)

525 
	#HRTIM_ODSR_TD1ODS
 (1 << 6)

	)

528 
	#HRTIM_ODSR_TC2ODS
 (1 << 5)

	)

531 
	#HRTIM_ODSR_TC1ODS
 (1 << 4)

	)

534 
	#HRTIM_ODSR_TB2ODS
 (1 << 3)

	)

537 
	#HRTIM_ODSR_TB1ODS
 (1 << 2)

	)

540 
	#HRTIM_ODSR_TA2ODS
 (1 << 1)

	)

543 
	#HRTIM_ODSR_TA1ODS
 (1 << 0)

	)

553 
	#HRTIM_BMCR_BMSTAT
 (1 << 31)

	)

556 
	#HRTIM_BMCR_TEBM
 (1 << 21)

	)

559 
	#HRTIM_BMCR_TDBM
 (1 << 20)

	)

562 
	#HRTIM_BMCR_TCBM
 (1 << 19)

	)

565 
	#HRTIM_BMCR_TBBM
 (1 << 18)

	)

568 
	#HRTIM_BMCR_TABM
 (1 << 17)

	)

571 
	#HRTIM_BMCR_MTBM
 (1 << 16)

	)

574 
	#HRTIM_BMCR_BMPREN
 (1 << 10)

	)

577 
	#HRTIM_BMCR_BMPRSC_SHIFT
 6

	)

578 
	#HRTIM_BMCR_BMPRSC_MASK
 (0x‡<< 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

580 
	#HRTIM_BMCR_BMPRSC_1
 ( 0 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

581 
	#HRTIM_BMCR_BMPRSC_2
 ( 1 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

582 
	#HRTIM_BMCR_BMPRSC_4
 ( 2 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

583 
	#HRTIM_BMCR_BMPRSC_8
 ( 3 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

584 
	#HRTIM_BMCR_BMPRSC_16
 ( 4 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

585 
	#HRTIM_BMCR_BMPRSC_32
 ( 5 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

586 
	#HRTIM_BMCR_BMPRSC_64
 ( 6 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

587 
	#HRTIM_BMCR_BMPRSC_128
 ( 7 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

588 
	#HRTIM_BMCR_BMPRSC_256
 ( 8 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

589 
	#HRTIM_BMCR_BMPRSC_512
 ( 9 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

590 
	#HRTIM_BMCR_BMPRSC_1024
 (10 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

591 
	#HRTIM_BMCR_BMPRSC_2048
 (11 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

592 
	#HRTIM_BMCR_BMPRSC_4096
 (12 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

593 
	#HRTIM_BMCR_BMPRSC_8192
 (13 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

594 
	#HRTIM_BMCR_BMPRSC_16384
 (14 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

595 
	#HRTIM_BMCR_BMPRSC_32768
 (15 << 
HRTIM_BMCR_BMPRSC_SHIFT
)

	)

598 
	#HRTIM_BMCR_BMCLK_SHIFT
 2

	)

599 
	#HRTIM_BMCR_BMCLK_MASK
 (0x‡<< 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

601 
	#HRTIM_BMCR_BMCLK_MASTER
 ( 0 << 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

602 
	#HRTIM_BMCR_BMCLK_TIMA
 ( 1 << 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

603 
	#HRTIM_BMCR_BMCLK_TIMB
 ( 2 << 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

604 
	#HRTIM_BMCR_BMCLK_TIMC
 ( 3 << 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

605 
	#HRTIM_BMCR_BMCLK_TIMD
 ( 4 << 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

606 
	#HRTIM_BMCR_BMCLK_TIME
 ( 5 << 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

607 
	#HRTIM_BMCR_BMCLK_BMC1
 ( 6 << 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

608 
	#HRTIM_BMCR_BMCLK_BMC2
 ( 7 << 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

609 
	#HRTIM_BMCR_BMCLK_BMC3
 ( 8 << 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

610 
	#HRTIM_BMCR_BMCLK_BMC4
 ( 9 << 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

611 
	#HRTIM_BMCR_BMCLK_HRTIM
 (10 << 
HRTIM_BMCR_BMCLK_SHIFT
)

	)

614 
	#HRTIM_BMCR_BMOM
 (1 << 1)

	)

617 
	#HRTIM_BMCR_BME
 (1 << 0)

	)

627 
	#HRTIM_BMTRGR_OCHPEV
 (1 << 31)

	)

630 
	#HRTIM_BMTRGR_EEV8
 (1 << 30)

	)

633 
	#HRTIM_BMTRGR_EEV7
 (1 << 29)

	)

636 
	#HRTIM_BMTRGR_TDEEV8
 (1 << 28)

	)

639 
	#HRTIM_BMTRGR_TAEEV7
 (1 << 27)

	)

642 
	#HRTIM_BMTRGR_TECMP2
 (1 << 26)

	)

645 
	#HRTIM_BMTRGR_TECMP1
 (1 << 25)

	)

648 
	#HRTIM_BMTRGR_TEREP
 (1 << 24)

	)

651 
	#HRTIM_BMTRGR_TERST
 (1 << 23)

	)

654 
	#HRTIM_BMTRGR_TDCMP2
 (1 << 22)

	)

657 
	#HRTIM_BMTRGR_TDCMP1
 (1 << 21)

	)

660 
	#HRTIM_BMTRGR_TDREP
 (1 << 20)

	)

663 
	#HRTIM_BMTRGR_TDRST
 (1 << 19)

	)

666 
	#HRTIM_BMTRGR_TCCMP2
 (1 << 18)

	)

669 
	#HRTIM_BMTRGR_TCCMP1
 (1 << 17)

	)

672 
	#HRTIM_BMTRGR_TCREP
 (1 << 16)

	)

675 
	#HRTIM_BMTRGR_TCRST
 (1 << 15)

	)

678 
	#HRTIM_BMTRGR_TBCMP2
 (1 << 14)

	)

681 
	#HRTIM_BMTRGR_TBCMP1
 (1 << 13)

	)

684 
	#HRTIM_BMTRGR_TBREP
 (1 << 12)

	)

687 
	#HRTIM_BMTRGR_TBRST
 (1 << 11)

	)

690 
	#HRTIM_BMTRGR_TACMP2
 (1 << 10)

	)

693 
	#HRTIM_BMTRGR_TACMP1
 (1 << 9)

	)

696 
	#HRTIM_BMTRGR_TAREP
 (1 << 8)

	)

699 
	#HRTIM_BMTRGR_TARST
 (1 << 7)

	)

702 
	#HRTIM_BMTRGR_MSTCMP4
 (1 << 6)

	)

705 
	#HRTIM_BMTRGR_MSTCMP3
 (1 << 5)

	)

708 
	#HRTIM_BMTRGR_MSTCMP2
 (1 << 4)

	)

711 
	#HRTIM_BMTRGR_MSTCMP1
 (1 << 3)

	)

714 
	#HRTIM_BMTRGR_MSTREP
 (1 << 2)

	)

717 
	#HRTIM_BMTRGR_MSTRST
 (1 << 1)

	)

720 
	#HRTIM_BMTRGR_SW
 (1 << 0)

	)

730 
	#HRTIM_EECR_EExFAST
(
x
Ë(1 << ((xË* 6 - 1))

	)

733 
	#HRTIM_EECR_EExSNS_SHIFT
(
x
Ë((xË* 6 - 3)

	)

734 
	#HRTIM_EECR_EExSNS_MASK
(
x
Ë(0x3 << 
	`HRTIM_EECR_EExSNS_SHIFT
(x))

	)

736 
	#HRTIM_EECR_EExSNS_LEVEL
(
x
Ë(0 << 
	`HRTIM_EECR_EExSNS_SHIFT
(x))

	)

737 
	#HRTIM_EECR_EExSNS_RISING
(
x
Ë(1 << 
	`HRTIM_EECR_EExSNS_SHIFT
(x))

	)

738 
	#HRTIM_EECR_EExSNS_FALLING
(
x
Ë(2 << 
	`HRTIM_EECR_EExSNS_SHIFT
(x))

	)

739 
	#HRTIM_EECR_EExSNS_BOTH
(
x
Ë(3 << 
	`HRTIM_EECR_EExSNS_SHIFT
(x))

	)

742 
	#HRTIM_EECR_EExPOL
 (1 << ((
x
Ë* 6 - 4))

	)

745 
	#HRTIM_EECR_EExSRC_SHIFT
(
x
Ë((xË* 6 - 6)

	)

746 
	#HRTIM_EECR_EExSRC_MASK
(
x
Ë(0x3 << 
	`HRTIM_EECR_EExSRC_SHIFT
(x))

	)

752 
	#HRTIM_EECR3_EExF_SHIFT
(
x
Ë((x - 6Ë* 4)

	)

753 
	#HRTIM_EECR3_EExF_MASK
(
x
Ë(0xF << 
	`HRTIM_EECR3_EExF_SHIFT
(x))

	)

763 
	#HRTIM_ADC1R_AD1TEPER
 (1 << 31)

	)

766 
	#HRTIM_ADC1R_AD1TEC4
 (1 << 30)

	)

769 
	#HRTIM_ADC1R_AD1TEC3
 (1 << 29)

	)

772 
	#HRTIM_ADC1R_AD1TEC2
 (1 << 28)

	)

775 
	#HRTIM_ADC1R_AD1TDPER
 (1 << 27)

	)

778 
	#HRTIM_ADC1R_AD1TDC4
 (1 << 26)

	)

781 
	#HRTIM_ADC1R_AD1TDC3
 (1 << 25)

	)

784 
	#HRTIM_ADC1R_AD1TDC2
 (1 << 24)

	)

787 
	#HRTIM_ADC1R_AD1TCPER
 (1 << 23)

	)

790 
	#HRTIM_ADC1R_AD1TCC4
 (1 << 22)

	)

793 
	#HRTIM_ADC1R_AD1TCC3
 (1 << 21)

	)

796 
	#HRTIM_ADC1R_AD1TCC2
 (1 << 20)

	)

799 
	#HRTIM_ADC1R_AD1TBRST
 (1 << 19)

	)

802 
	#HRTIM_ADC1R_AD1TBPER
 (1 << 18)

	)

805 
	#HRTIM_ADC1R_AD1TBC4
 (1 << 17)

	)

808 
	#HRTIM_ADC1R_AD1TBC3
 (1 << 16)

	)

811 
	#HRTIM_ADC1R_AD1TBC2
 (1 << 15)

	)

814 
	#HRTIM_ADC1R_AD1TARST
 (1 << 14)

	)

817 
	#HRTIM_ADC1R_AD1TAPER
 (1 << 13)

	)

820 
	#HRTIM_ADC1R_AD1TAC4
 (1 << 12)

	)

823 
	#HRTIM_ADC1R_AD1TAC3
 (1 << 11)

	)

826 
	#HRTIM_ADC1R_AD1TAC2
 (1 << 10)

	)

829 
	#HRTIM_ADC1R_AD1EEV5
 (1 << 9)

	)

832 
	#HRTIM_ADC1R_AD1EEV4
 (1 << 8)

	)

835 
	#HRTIM_ADC1R_AD1EEV3
 (1 << 7)

	)

838 
	#HRTIM_ADC1R_AD1EEV2
 (1 << 6)

	)

841 
	#HRTIM_ADC1R_AD1EEV1
 (1 << 5)

	)

844 
	#HRTIM_ADC1R_AD1MPER
 (1 << 4)

	)

847 
	#HRTIM_ADC1R_AD1MC4
 (1 << 3)

	)

850 
	#HRTIM_ADC1R_AD1MC3
 (1 << 2)

	)

853 
	#HRTIM_ADC1R_AD1MC2
 (1 << 1)

	)

856 
	#HRTIM_ADC1R_AD1MC1
 (1 << 0)

	)

866 
	#HRTIM_ADC2R_AD2TERST
 (1 << 31)

	)

869 
	#HRTIM_ADC2R_AD2TEC4
 (1 << 30)

	)

872 
	#HRTIM_ADC2R_AD2TEC3
 (1 << 29)

	)

875 
	#HRTIM_ADC2R_AD2TEC2
 (1 << 28)

	)

878 
	#HRTIM_ADC2R_AD2TDRST
 (1 << 27)

	)

881 
	#HRTIM_ADC2R_AD2TDPER
 (1 << 26)

	)

884 
	#HRTIM_ADC2R_AD2TDC4
 (1 << 25)

	)

887 
	#HRTIM_ADC2R_AD2TDC3
 (1 << 24)

	)

890 
	#HRTIM_ADC2R_AD2TDC2
 (1 << 23)

	)

893 
	#HRTIM_ADC2R_AD2TCRST
 (1 << 22)

	)

896 
	#HRTIM_ADC2R_AD2TCPER
 (1 << 21)

	)

899 
	#HRTIM_ADC2R_AD2TCC4
 (1 << 20)

	)

902 
	#HRTIM_ADC2R_AD2TCC3
 (1 << 19)

	)

905 
	#HRTIM_ADC2R_AD2TCC2
 (1 << 18)

	)

908 
	#HRTIM_ADC2R_AD2TBPER
 (1 << 17)

	)

911 
	#HRTIM_ADC2R_AD2TBC4
 (1 << 16)

	)

914 
	#HRTIM_ADC2R_AD2TBC3
 (1 << 15)

	)

917 
	#HRTIM_ADC2R_AD2TBC2
 (1 << 14)

	)

920 
	#HRTIM_ADC2R_AD2TAPER
 (1 << 13)

	)

923 
	#HRTIM_ADC2R_AD2TAC4
 (1 << 12)

	)

926 
	#HRTIM_ADC2R_AD2TAC3
 (1 << 11)

	)

929 
	#HRTIM_ADC2R_AD2TAC2
 (1 << 10)

	)

932 
	#HRTIM_ADC2R_AD2EEV10
 (1 << 9)

	)

935 
	#HRTIM_ADC2R_AD2EEV9
 (1 << 8)

	)

938 
	#HRTIM_ADC2R_AD2EEV8
 (1 << 7)

	)

941 
	#HRTIM_ADC2R_AD2EEV7
 (1 << 6)

	)

944 
	#HRTIM_ADC2R_AD2EEV6
 (1 << 5)

	)

947 
	#HRTIM_ADC2R_AD2MPER
 (1 << 4)

	)

950 
	#HRTIM_ADC2R_AD2MC4
 (1 << 3)

	)

953 
	#HRTIM_ADC2R_AD2MC3
 (1 << 2)

	)

956 
	#HRTIM_ADC2R_AD2MC2
 (1 << 1)

	)

959 
	#HRTIM_ADC2R_AD2MC1
 (1 << 0)

	)

969 
	#HRTIM_ADC3R_AD3TEPER
 (1 << 31)

	)

972 
	#HRTIM_ADC3R_AD3TEC4
 (1 << 30)

	)

975 
	#HRTIM_ADC3R_AD3TEC3
 (1 << 29)

	)

978 
	#HRTIM_ADC3R_AD3TEC2
 (1 << 28)

	)

981 
	#HRTIM_ADC3R_AD3TDPER
 (1 << 27)

	)

984 
	#HRTIM_ADC3R_AD3TDC4
 (1 << 26)

	)

987 
	#HRTIM_ADC3R_AD3TDC3
 (1 << 25)

	)

990 
	#HRTIM_ADC3R_AD3TDC2
 (1 << 24)

	)

993 
	#HRTIM_ADC3R_AD3TCPER
 (1 << 23)

	)

996 
	#HRTIM_ADC3R_AD3TCC4
 (1 << 22)

	)

999 
	#HRTIM_ADC3R_AD3TCC3
 (1 << 21)

	)

1002 
	#HRTIM_ADC3R_AD3TCC2
 (1 << 20)

	)

1005 
	#HRTIM_ADC3R_AD3TBRST
 (1 << 19)

	)

1008 
	#HRTIM_ADC3R_AD3TBPER
 (1 << 18)

	)

1011 
	#HRTIM_ADC3R_AD3TBC4
 (1 << 17)

	)

1014 
	#HRTIM_ADC3R_AD3TBC3
 (1 << 16)

	)

1017 
	#HRTIM_ADC3R_AD3TBC2
 (1 << 15)

	)

1020 
	#HRTIM_ADC3R_AD3TARST
 (1 << 14)

	)

1023 
	#HRTIM_ADC3R_AD3TAPER
 (1 << 13)

	)

1026 
	#HRTIM_ADC3R_AD3TAC4
 (1 << 12)

	)

1029 
	#HRTIM_ADC3R_AD3TAC3
 (1 << 11)

	)

1032 
	#HRTIM_ADC3R_AD3TAC2
 (1 << 10)

	)

1035 
	#HRTIM_ADC3R_AD3EEV5
 (1 << 9)

	)

1038 
	#HRTIM_ADC3R_AD3EEV4
 (1 << 8)

	)

1041 
	#HRTIM_ADC3R_AD3EEV3
 (1 << 7)

	)

1044 
	#HRTIM_ADC3R_AD3EEV2
 (1 << 6)

	)

1047 
	#HRTIM_ADC3R_AD3EEV1
 (1 << 5)

	)

1050 
	#HRTIM_ADC3R_AD3MPER
 (1 << 4)

	)

1053 
	#HRTIM_ADC3R_AD3MC4
 (1 << 3)

	)

1056 
	#HRTIM_ADC3R_AD3MC3
 (1 << 2)

	)

1059 
	#HRTIM_ADC3R_AD3MC2
 (1 << 1)

	)

1062 
	#HRTIM_ADC3R_AD3MC1
 (1 << 0)

	)

1072 
	#HRTIM_ADC4R_AD4TERST
 (1 << 31)

	)

1075 
	#HRTIM_ADC4R_AD4TEC4
 (1 << 30)

	)

1078 
	#HRTIM_ADC4R_AD4TEC3
 (1 << 29)

	)

1081 
	#HRTIM_ADC4R_AD4TEC2
 (1 << 28)

	)

1084 
	#HRTIM_ADC4R_AD4TDRST
 (1 << 27)

	)

1087 
	#HRTIM_ADC4R_AD4TDPER
 (1 << 26)

	)

1090 
	#HRTIM_ADC4R_AD4TDC4
 (1 << 25)

	)

1093 
	#HRTIM_ADC4R_AD4TDC3
 (1 << 24)

	)

1096 
	#HRTIM_ADC4R_AD4TDC2
 (1 << 23)

	)

1099 
	#HRTIM_ADC4R_AD4TCRST
 (1 << 22)

	)

1102 
	#HRTIM_ADC4R_AD4TCPER
 (1 << 21)

	)

1105 
	#HRTIM_ADC4R_AD4TCC4
 (1 << 20)

	)

1108 
	#HRTIM_ADC4R_AD4TCC3
 (1 << 19)

	)

1111 
	#HRTIM_ADC4R_AD4TCC2
 (1 << 18)

	)

1114 
	#HRTIM_ADC4R_AD4TBPER
 (1 << 17)

	)

1117 
	#HRTIM_ADC4R_AD4TBC4
 (1 << 16)

	)

1120 
	#HRTIM_ADC4R_AD4TBC3
 (1 << 15)

	)

1123 
	#HRTIM_ADC4R_AD4TBC2
 (1 << 14)

	)

1126 
	#HRTIM_ADC4R_AD4TAPER
 (1 << 13)

	)

1129 
	#HRTIM_ADC4R_AD4TAC4
 (1 << 12)

	)

1132 
	#HRTIM_ADC4R_AD4TAC3
 (1 << 11)

	)

1135 
	#HRTIM_ADC4R_AD4TAC2
 (1 << 10)

	)

1138 
	#HRTIM_ADC4R_AD4EEV10
 (1 << 9)

	)

1141 
	#HRTIM_ADC4R_AD4EEV9
 (1 << 8)

	)

1144 
	#HRTIM_ADC4R_AD4EEV8
 (1 << 7)

	)

1147 
	#HRTIM_ADC4R_AD4EEV7
 (1 << 6)

	)

1150 
	#HRTIM_ADC4R_AD4EEV6
 (1 << 5)

	)

1153 
	#HRTIM_ADC4R_AD4MPER
 (1 << 4)

	)

1156 
	#HRTIM_ADC4R_AD4MC4
 (1 << 3)

	)

1159 
	#HRTIM_ADC4R_AD4MC3
 (1 << 2)

	)

1162 
	#HRTIM_ADC4R_AD4MC2
 (1 << 1)

	)

1165 
	#HRTIM_ADC4R_AD4MC1
 (1 << 0)

	)

1175 
	#HRTIM_DLLCR_CALRTE_SHIFT
 2

	)

1176 
	#HRTIM_DLLCR_CALRTE_MASK
 (0x3 << 
HRTIM_DLLCR_CALRTE_SHIFT
)

	)

1178 
	#HRTIM_DLLCR_CALRTE_1048576
 (0 << 
HRTIM_DLLCR_CALRTE_SHIFT
)

	)

1179 
	#HRTIM_DLLCR_CALRTE_131072
 (1 << 
HRTIM_DLLCR_CALRTE_SHIFT
)

	)

1180 
	#HRTIM_DLLCR_CALRTE_16384
 (2 << 
HRTIM_DLLCR_CALRTE_SHIFT
)

	)

1181 
	#HRTIM_DLLCR_CALRTE_2048
 (3 << 
HRTIM_DLLCR_CALRTE_SHIFT
)

	)

1184 
	#HRTIM_DLLCR_CALEN
 (1 << 1)

	)

1187 
	#HRTIM_DLLCR_CAL
 (1 << 0)

	)

1197 
	#HRTIM_FLTINR1_FLTxLCK
(
x
Ë(1 << ((xË* 8 - 1))

	)

1200 
	#HRTIM_FLTINR1_FLTxF_SHIFT
(
x
Ë((xË* 8 - 5)

	)

1201 
	#HRTIM_FLTINR1_FLTxF_MASK
(
x
Ë(0x‡<< 
	`HRTIM_FLTINR1_FLTxF_SHIFT
(x))

	)

1204 
	#HRTIM_FLTINR1_FLTxSRC
(
x
Ë(1 << ((xË* 8 - 6))

	)

1207 
	#HRTIM_FLTINR1_FLTxP
(
x
Ë(1 << ((xË* 8 - 7))

	)

1210 
	#HRTIM_FLTINR1_FLTxE
(
x
Ë(1 << ((xË* 8 - 8))

	)

1220 
	#HRTIM_FLTINR2_FLTSD_SHIFT
 24

	)

1221 
	#HRTIM_FLTINR2_FLTSD_MASK
 (0x3 << 
HRTIM_FLTINR2_FLTSD_SHIFT
)

	)

1223 
	#HRTIM_FLTINR2_FLTSD_DIV1
 (0 << 
HRTIM_FLTINR2_FLTSD_SHIFT
)

	)

1224 
	#HRTIM_FLTINR2_FLTSD_DIV2
 (1 << 
HRTIM_FLTINR2_FLTSD_SHIFT
)

	)

1225 
	#HRTIM_FLTINR2_FLTSD_DIV4
 (2 << 
HRTIM_FLTINR2_FLTSD_SHIFT
)

	)

1226 
	#HRTIM_FLTINR2_FLTSD_DIV8
 (3 << 
HRTIM_FLTINR2_FLTSD_SHIFT
)

	)

1229 
	#HRTIM_FLTINR2_FLT5LCK
 (1 << 7)

	)

1232 
	#HRTIM_FLTINR2_FLT5F_SHIFT
 3

	)

1233 
	#HRTIM_FLTINR2_FLT5F_MASK
 (0x‡<< 
HRTIM_FLTINR2_FLT5F_SHIFT
)

	)

1236 
	#HRTIM_FLTINR2_FLT5SRC
 (1 << 2)

	)

1239 
	#HRTIM_FLTINR2_FLT5P
 (1 << 1)

	)

1242 
	#HRTIM_FLTINR2_FLT5E
 (1 << 0)

	)

1252 
	#HRTIM_BDMUPDR_MCMP4
 (1 << 9)

	)

1255 
	#HRTIM_BDMUPDR_MCMP3
 (1 << 8)

	)

1258 
	#HRTIM_BDMUPDR_MCMP2
 (1 << 7)

	)

1261 
	#HRTIM_BDMUPDR_MCMP1
 (1 << 6)

	)

1264 
	#HRTIM_BDMUPDR_MREP
 (1 << 5)

	)

1267 
	#HRTIM_BDMUPDR_MPER
 (1 << 4)

	)

1270 
	#HRTIM_BDMUPDR_MCNT
 (1 << 3)

	)

1273 
	#HRTIM_BDMUPDR_MDIER
 (1 << 2)

	)

1276 
	#HRTIM_BDMUPDR_MICR
 (1 << 1)

	)

1279 
	#HRTIM_BDMUPDR_MCR
 (1 << 0)

	)

1289 
	#HRTIM_BDTxUPR_TIMxFLTR
 (1 << 20)

	)

1292 
	#HRTIM_BDTxUPR_TIMxOUTR
 (1 << 19)

	)

1295 
	#HRTIM_BDTxUPR_TIMxCHPR
 (1 << 18)

	)

1298 
	#HRTIM_BDTxUPR_TIMxRSTR
 (1 << 17)

	)

1301 
	#HRTIM_BDTxUPR_TIMxEEFR2
 (1 << 16)

	)

1304 
	#HRTIM_BDTxUPR_TIMxEEFR1
 (1 << 15)

	)

1307 
	#HRTIM_BDTxUPR_TIMxRST2R
 (1 << 14)

	)

1310 
	#HRTIM_BDTxUPR_TIMxSET2R
 (1 << 13)

	)

1313 
	#HRTIM_BDTxUPR_TIMxRST1R
 (1 << 12)

	)

1316 
	#HRTIM_BDTxUPR_TIMxSET1R
 (1 << 11)

	)

1319 
	#HRTIM_BDTxUPR_TIMx_DTxR
 (1 << 10)

	)

1322 
	#HRTIM_BDTxUPR_TIMxCMP4
 (1 << 9)

	)

1325 
	#HRTIM_BDTxUPR_TIMxCMP3
 (1 << 8)

	)

1328 
	#HRTIM_BDTxUPR_TIMxCMP2
 (1 << 7)

	)

1331 
	#HRTIM_BDTxUPR_TIMxCMP1
 (1 << 6)

	)

1334 
	#HRTIM_BDTxUPR_TIMxREP
 (1 << 5)

	)

1337 
	#HRTIM_BDTxUPR_TIMxPER
 (1 << 4)

	)

1340 
	#HRTIM_BDTxUPR_TIMxCNT
 (1 << 3)

	)

1343 
	#HRTIM_BDTxUPR_TIMxDIER
 (1 << 2)

	)

1346 
	#HRTIM_BDTxUPR_TIMxICR
 (1 << 1)

	)

1349 
	#HRTIM_BDTxUPR_TIMxCR
 (1 << 0)

	)

1359 
	#HRTIM_MCR_BRSTDMA_SHIFT
 30

	)

1360 
	#HRTIM_MCR_BRSTDMA_MASK
 (0x3 << 
HRTIM_MCR_BRSTDMA_SHIFT
)

	)

1362 
	#HRTIM_MCR_BRSTDMA_INDEP
 (0 << 
HRTIM_MCR_BRSTDMA_SHIFT
)

	)

1363 
	#HRTIM_MCR_BRSTDMA_COMPL
 (1 << 
HRTIM_MCR_BRSTDMA_SHIFT
)

	)

1364 
	#HRTIM_MCR_BRSTDMA_ROLLOVR
 (2 << 
HRTIM_MCR_BRSTDMA_SHIFT
)

	)

1367 
	#HRTIM_MCR_MREPU
 (1 << 29)

	)

1370 
	#HRTIM_MCR_PREEN
 (1 << 27)

	)

1373 
	#HRTIM_MCR_DACSYNC_SHIFT
 25

	)

1374 
	#HRTIM_MCR_DACSYNC_MASK
 (0x3 << 
HRTIM_MCR_DACSYNC_SHIFT
)

	)

1377 
	#HRTIM_MCR_TECEN
 (1 << 21)

	)

1380 
	#HRTIM_MCR_TDCEN
 (1 << 20)

	)

1383 
	#HRTIM_MCR_TCCEN
 (1 << 19)

	)

1386 
	#HRTIM_MCR_TBCEN
 (1 << 18)

	)

1389 
	#HRTIM_MCR_TACEN
 (1 << 17)

	)

1392 
	#HRTIM_MCR_MCEN
 (1 << 16)

	)

1395 
	#HRTIM_MCR_SYNC_SRC_SHIFT
 14

	)

1396 
	#HRTIM_MCR_SYNC_SRC_MASK
 (0x3 << 
HRTIM_MCR_SYNC_SRC_SHIFT
)

	)

1398 
	#HRTIM_MCR_SYNC_SRC_MSTART
 (0 << 
HRTIM_MCR_SYNC_SRC_SHIFT
)

	)

1399 
	#HRTIM_MCR_SYNC_SRC_MCMP1
 (1 << 
HRTIM_MCR_SYNC_SRC_SHIFT
)

	)

1400 
	#HRTIM_MCR_SYNC_SRC_TIMA_START
 (2 << 
HRTIM_MCR_SYNC_SRC_SHIFT
)

	)

1401 
	#HRTIM_MCR_SYNC_SRC_TIMA_CMP1
 (3 << 
HRTIM_MCR_SYNC_SRC_SHIFT
)

	)

1404 
	#HRTIM_MCR_SYNC_OUT_SHIFT
 12

	)

1405 
	#HRTIM_MCR_SYNC_OUT_MASK
 (0x3 << 
HRTIM_MCR_SYNC_OUT_SHIFT
)

	)

1407 
	#HRTIM_MCR_SYNC_OUT_DISABLE
 (0 << 
HRTIM_MCR_SYNC_OUT_SHIFT
)

	)

1408 
	#HRTIM_MCR_SYNC_OUT_POS
 (2 << 
HRTIM_MCR_SYNC_OUT_SHIFT
)

	)

1409 
	#HRTIM_MCR_SYNC_OUT_NEG
 (3 << 
HRTIM_MCR_SYNC_OUT_SHIFT
)

	)

1412 
	#HRTIM_MCR_SYNCSTRTM
 (1 << 11)

	)

1415 
	#HRTIM_MCR_SYNCRSTM
 (1 << 10)

	)

1418 
	#HRTIM_MCR_SYNC_IN_SHIFT
 8

	)

1419 
	#HRTIM_MCR_SYNC_IN_MASK
 (0x3 << 
HRTIM_MCR_SYNC_IN_SHIFT
)

	)

1421 
	#HRTIM_MCR_SYNC_IN_DISABLE
 (0 << 
HRTIM_MCR_SYNC_IN_SHIFT
)

	)

1422 
	#HRTIM_MCR_SYNC_IN_INT
 (1 << 
HRTIM_MCR_SYNC_IN_SHIFT
)

	)

1423 
	#HRTIM_MCR_SYNC_IN_EXT
 (2 << 
HRTIM_MCR_SYNC_IN_SHIFT
)

	)

1426 
	#HRTIM_MCR_HALF
 (1 << 5)

	)

1429 
	#HRTIM_MCR_RETRIG
 (1 << 4)

	)

1432 
	#HRTIM_MCR_CONT
 (1 << 3)

	)

1435 
	#HRTIM_MCR_CK_PSC_SHIFT
 0

	)

1436 
	#HRTIM_MCR_CK_PSC_MASK
 (0x7 << 
HRTIM_MCR_CK_PSC_SHIFT
)

	)

1446 
	#HRTIM_MISR_MUPD
 (1 << 6)

	)

1449 
	#HRTIM_MISR_SYNC
 (1 << 5)

	)

1452 
	#HRTIM_MISR_MREP
 (1 << 4)

	)

1455 
	#HRTIM_MISR_MCMP4
 (1 << 3)

	)

1458 
	#HRTIM_MISR_MCMP3
 (1 << 2)

	)

1461 
	#HRTIM_MISR_MCMP2
 (1 << 1)

	)

1464 
	#HRTIM_MISR_MCMP1
 (1 << 0)

	)

1474 
	#HRTIM_MICR_MUPDC
 (1 << 6)

	)

1477 
	#HRTIM_MICR_SYNCC
 (1 << 5)

	)

1480 
	#HRTIM_MICR_MREPC
 (1 << 4)

	)

1483 
	#HRTIM_MICR_MCMP4C
 (1 << 3)

	)

1486 
	#HRTIM_MICR_MCMP3C
 (1 << 2)

	)

1489 
	#HRTIM_MICR_MCMP2C
 (1 << 1)

	)

1492 
	#HRTIM_MICR_MCMP1C
 (1 << 0)

	)

1502 
	#HRTIM_MDIER_MUPDDE
 (1 << 22)

	)

1505 
	#HRTIM_MDIER_SYNCDE
 (1 << 21)

	)

1508 
	#HRTIM_MDIER_MREPDE
 (1 << 20)

	)

1511 
	#HRTIM_MDIER_MCMP4DE
 (1 << 19)

	)

1514 
	#HRTIM_MDIER_MCMP3DE
 (1 << 18)

	)

1517 
	#HRTIM_MDIER_MCMP2DE
 (1 << 17)

	)

1520 
	#HRTIM_MDIER_MCMP1DE
 (1 << 16)

	)

1523 
	#HRTIM_MDIER_MUPDIE
 (1 << 6)

	)

1526 
	#HRTIM_MDIER_SYNCIE
 (1 << 5)

	)

1529 
	#HRTIM_MDIER_MREPIE
 (1 << 4)

	)

1532 
	#HRTIM_MDIER_MCMP4IE
 (1 << 3)

	)

1535 
	#HRTIM_MDIER_MCMP3IE
 (1 << 2)

	)

1538 
	#HRTIM_MDIER_MCMP2IE
 (1 << 1)

	)

1541 
	#HRTIM_MDIER_MCMP1IE
 (1 << 0)

	)

1551 
	#HRTIM_TIMx_CR_UPDGAT_SHIFT
 28

	)

1552 
	#HRTIM_TIMx_CR_UPDGAT_MASK
 (0x‡<< 
HRTIM_TIMx_CR_UPDGAT_SHIFT
)

	)

1554 
	#HRTIM_TIMx_CR_UPDGAT_INDEP
 (0 << 
HRTIM_TIMx_CR_UPDGAT_SHIFT
)

	)

1555 
	#HRTIM_TIMx_CR_UPDGAT_DMA
 (1 << 
HRTIM_TIMx_CR_UPDGAT_SHIFT
)

	)

1556 
	#HRTIM_TIMx_CR_UPDGAT_DMA_POST
 (2 << 
HRTIM_TIMx_CR_UPDGAT_SHIFT
)

	)

1557 
	#HRTIM_TIMx_CR_UPDGAT_IN1
 (3 << 
HRTIM_TIMx_CR_UPDGAT_SHIFT
)

	)

1558 
	#HRTIM_TIMx_CR_UPDGAT_IN2
 (4 << 
HRTIM_TIMx_CR_UPDGAT_SHIFT
)

	)

1559 
	#HRTIM_TIMx_CR_UPDGAT_IN3
 (5 << 
HRTIM_TIMx_CR_UPDGAT_SHIFT
)

	)

1560 
	#HRTIM_TIMx_CR_UPDGAT_IN1_POST
 (6 << 
HRTIM_TIMx_CR_UPDGAT_SHIFT
)

	)

1561 
	#HRTIM_TIMx_CR_UPDGAT_IN2_POST
 (7 << 
HRTIM_TIMx_CR_UPDGAT_SHIFT
)

	)

1562 
	#HRTIM_TIMx_CR_UPDGAT_IN3_POST
 (8 << 
HRTIM_TIMx_CR_UPDGAT_SHIFT
)

	)

1565 
	#HRTIM_TIMx_CR_PREEN
 (1 << 27)

	)

1568 
	#HRTIM_TIMx_CR_DACSYNC_SHIFT
 25

	)

1569 
	#HRTIM_TIMx_CR_DACSYNC_MASK
 (0x3 << 
HRTIM_TIMx_CR_DACSYNC_SHIFT
)

	)

1571 
	#HRTIM_TIMx_CR_DACSYNC_NONE
 (0 << 
HRTIM_TIMx_CR_DACSYNC_SHIFT
)

	)

1572 
	#HRTIM_TIMx_CR_DACSYNC_1
 (1 << 
HRTIM_TIMx_CR_DACSYNC_SHIFT
)

	)

1573 
	#HRTIM_TIMx_CR_DACSYNC_2
 (2 << 
HRTIM_TIMx_CR_DACSYNC_SHIFT
)

	)

1574 
	#HRTIM_TIMx_CR_DACSYNC_3
 (3 << 
HRTIM_TIMx_CR_DACSYNC_SHIFT
)

	)

1577 
	#HRTIM_TIMx_CR_MSTU
 (1 << 24)

	)

1580 
	#HRTIM_TIMx_CR_TEU
 (1 << 23)

	)

1583 
	#HRTIM_TIMx_CR_TDU
 (1 << 22)

	)

1586 
	#HRTIM_TIMx_CR_TCU
 (1 << 21)

	)

1589 
	#HRTIM_TIMx_CR_TBU
 (1 << 20)

	)

1592 
	#HRTIM_TIMx_CR_TxRSTU
 (1 << 18)

	)

1595 
	#HRTIM_TIMx_CR_TxREPU
 (1 << 17)

	)

1598 
	#HRTIM_TIMx_CR_DELCMP4_SHIFT
 14

	)

1599 
	#HRTIM_TIMx_CR_DELCMP4_MASK
 (0x3 << 
HRTIM_TIMx_CR_DELCMP4_SHIFT
)

	)

1601 
	#HRTIM_TIMx_CR_DELCMP4_ALWAYS
 (0 << 
HRTIM_TIMx_CR_DELCMP4_SHIFT
)

	)

1602 
	#HRTIM_TIMx_CR_DELCMP4_CAP2
 (1 << 
HRTIM_TIMx_CR_DELCMP4_SHIFT
)

	)

1603 
	#HRTIM_TIMx_CR_DELCMP4_CAP2_COMP1
 (2 << 
HRTIM_TIMx_CR_DELCMP4_SHIFT
)

	)

1604 
	#HRTIM_TIMx_CR_DELCMP4_CAP2_COMP3
 (3 << 
HRTIM_TIMx_CR_DELCMP4_SHIFT
)

	)

1607 
	#HRTIM_TIMx_CR_DELCMP2_SHIFT
 12

	)

1608 
	#HRTIM_TIMx_CR_DELCMP2_MASK
 (0x3 << 
HRTIM_TIMx_CR_DELCMP2_SHIFT
)

	)

1610 
	#HRTIM_TIMx_CR_DELCMP2_ALWAYS
 (0x << 
HRTIM_TIMx_CR_DELCMP2_SHIFT
)

	)

1611 
	#HRTIM_TIMx_CR_DELCMP2_CAP1
 (0x << 
HRTIM_TIMx_CR_DELCMP2_SHIFT
)

	)

1612 
	#HRTIM_TIMx_CR_DELCMP2_CAP1_COMP1
 (0x << 
HRTIM_TIMx_CR_DELCMP2_SHIFT
)

	)

1613 
	#HRTIM_TIMx_CR_DELCMP2_CAP1_COMP3
 (0x << 
HRTIM_TIMx_CR_DELCMP2_SHIFT
)

	)

1616 
	#HRTIM_TIMx_CR_SYNCSTRTx
 (1 << 11)

	)

1619 
	#HRTIM_TIMx_CR_SYNCRSTx
 (1 << 10)

	)

1622 
	#HRTIM_TIMx_CR_PSHPLL
 (1 << 6)

	)

1625 
	#HRTIM_TIMx_CR_HALF
 (1 << 5)

	)

1628 
	#HRTIM_TIMx_CR_RETRIG
 (1 << 4)

	)

1631 
	#HRTIM_TIMx_CR_CONT
 (1 << 3)

	)

1634 
	#HRTIM_TIMx_CR_CK_PSCx_SHIFT
 0

	)

1635 
	#HRTIM_TIMx_CR_CK_PSCx_MASK
 (0x7 << 
HRTIM_TIMx_CR_CK_PSCx_SHIFT
)

	)

1645 
	#HRTIM_TIMx_ISR_O2STAT
 (1 << 19)

	)

1648 
	#HRTIM_TIMx_ISR_O1STAT
 (1 << 18)

	)

1651 
	#HRTIM_TIMx_ISR_IPPSTAT
 (1 << 17)

	)

1654 
	#HRTIM_TIMx_ISR_CPPSTAT
 (1 << 16)

	)

1657 
	#HRTIM_TIMx_ISR_DLYPRT
 (1 << 14)

	)

1660 
	#HRTIM_TIMx_ISR_RST
 (1 << 13)

	)

1663 
	#HRTIM_TIMx_ISR_RSTx2
 (1 << 12)

	)

1666 
	#HRTIM_TIMx_ISR_SETx2
 (1 << 11)

	)

1669 
	#HRTIM_TIMx_ISR_RSTx1
 (1 << 10)

	)

1672 
	#HRTIM_TIMx_ISR_SETx1
 (1 << 9)

	)

1675 
	#HRTIM_TIMx_ISR_CPT2
 (1 << 8)

	)

1678 
	#HRTIM_TIMx_ISR_CPT1
 (1 << 7)

	)

1681 
	#HRTIM_TIMx_ISR_UPD
 (1 << 6)

	)

1684 
	#HRTIM_TIMx_ISR_REP
 (1 << 4)

	)

1687 
	#HRTIM_TIMx_ISR_CMP4
 (1 << 3)

	)

1690 
	#HRTIM_TIMx_ISR_CMP3
 (1 << 2)

	)

1693 
	#HRTIM_TIMx_ISR_CMP2
 (1 << 1)

	)

1696 
	#HRTIM_TIMx_ISR_CMP1
 (1 << 0)

	)

1706 
	#HRTIM_TIMx_ICR_DLYPRTC
 (1 << 14)

	)

1709 
	#HRTIM_TIMx_ICR_RSTC
 (1 << 13)

	)

1712 
	#HRTIM_TIMx_ICR_RSTx2C
 (1 << 12)

	)

1715 
	#HRTIM_TIMx_ICR_SET2xC
 (1 << 11)

	)

1718 
	#HRTIM_TIMx_ICR_RSTx1C
 (1 << 10)

	)

1721 
	#HRTIM_TIMx_ICR_SET1xC
 (1 << 9)

	)

1724 
	#HRTIM_TIMx_ICR_CPT2C
 (1 << 8)

	)

1727 
	#HRTIM_TIMx_ICR_CPT1C
 (1 << 7)

	)

1730 
	#HRTIM_TIMx_ICR_UPDC
 (1 << 6)

	)

1733 
	#HRTIM_TIMx_ICR_REPC
 (1 << 4)

	)

1736 
	#HRTIM_TIMx_ICR_CMP4C
 (1 << 3)

	)

1739 
	#HRTIM_TIMx_ICR_CMP3C
 (1 << 2)

	)

1742 
	#HRTIM_TIMx_ICR_CMP2C
 (1 << 1)

	)

1745 
	#HRTIM_TIMx_ICR_CMP1C
 (1 << 0)

	)

1755 
	#HRTIM_TIMx_DIER_DLYPRTDE
 (1 << 30)

	)

1758 
	#HRTIM_TIMx_DIER_RSTDE
 (1 << 29)

	)

1761 
	#HRTIM_TIMx_DIER_RSTx2DE
 (1 << 28)

	)

1764 
	#HRTIM_TIMx_DIER_SETx2DE
 (1 << 27)

	)

1767 
	#HRTIM_TIMx_DIER_RSTx1DE
 (1 << 26)

	)

1770 
	#HRTIM_TIMx_DIER_SET1xDE
 (1 << 25)

	)

1773 
	#HRTIM_TIMx_DIER_CPT2DE
 (1 << 24)

	)

1776 
	#HRTIM_TIMx_DIER_CPT1DE
 (1 << 23)

	)

1779 
	#HRTIM_TIMx_DIER_UPDDE
 (1 << 22)

	)

1782 
	#HRTIM_TIMx_DIER_REPDE
 (1 << 20)

	)

1785 
	#HRTIM_TIMx_DIER_CMP4DE
 (1 << 19)

	)

1788 
	#HRTIM_TIMx_DIER_CMP3DE
 (1 << 18)

	)

1791 
	#HRTIM_TIMx_DIER_CMP2DE
 (1 << 17)

	)

1794 
	#HRTIM_TIMx_DIER_CMP1DE
 (1 << 16)

	)

1797 
	#HRTIM_TIMx_DIER_DLYPRTIE
 (1 << 14)

	)

1800 
	#HRTIM_TIMx_DIER_RSTIE
 (1 << 13)

	)

1803 
	#HRTIM_TIMx_DIER_RSTx2IE
 (1 << 12)

	)

1806 
	#HRTIM_TIMx_DIER_SETx2IE
 (1 << 11)

	)

1809 
	#HRTIM_TIMx_DIER_RSTx1IE
 (1 << 10)

	)

1812 
	#HRTIM_TIMx_DIER_SET1xIE
 (1 << 9)

	)

1815 
	#HRTIM_TIMx_DIER_CPT2IE
 (1 << 8)

	)

1818 
	#HRTIM_TIMx_DIER_CPT1IE
 (1 << 7)

	)

1821 
	#HRTIM_TIMx_DIER_UPDIE
 (1 << 6)

	)

1824 
	#HRTIM_TIMx_DIER_REPIE
 (1 << 4)

	)

1827 
	#HRTIM_TIMx_DIER_CMP4IE
 (1 << 3)

	)

1830 
	#HRTIM_TIMx_DIER_CMP3IE
 (1 << 2)

	)

1833 
	#HRTIM_TIMx_DIER_CMP2IE
 (1 << 1)

	)

1836 
	#HRTIM_TIMx_DIER_CMP1IE
 (1 << 0)

	)

1846 
	#HRTIM_TIMx_CMP1C_REPx_SHIFT
 16

	)

1847 
	#HRTIM_TIMx_CMP1C_REPx_MASK
 (0xf‡<< 
HRTIM_TIMx_CMP1C_REPx_SHIFT
)

	)

1850 
	#HRTIM_TIMx_CMP1C_CMP1x_SHIFT
 0

	)

1851 
	#HRTIM_TIMx_CMP1C_CMP1x_MASK
 (0xfff‡<< 
HRTIM_TIMx_CMP1C_CMP1x_SHIFT
)

	)

1861 
	#HRTIM_TIMx_DT_DTFLKx
 (1 << 31)

	)

1864 
	#HRTIM_TIMx_DT_DTFSLKx
 (1 << 30)

	)

1867 
	#HRTIM_TIMx_DT_SDTFx
 (1 << 25)

	)

1870 
	#HRTIM_TIMx_DT_DTFx_SHIFT
 16

	)

1871 
	#HRTIM_TIMx_DT_DTFx_MASK
 (0x1f‡<< 
HRTIM_TIMx_DT_DTFx_SHIFT
)

	)

1874 
	#HRTIM_TIMx_DT_DTRLKx
 (1 << 15)

	)

1877 
	#HRTIM_TIMx_DT_DTRSLKx
 (1 << 14)

	)

1880 
	#HRTIM_TIMx_DT_DTPRSC_SHIFT
 10

	)

1881 
	#HRTIM_TIMx_DT_DTPRSC_MASK
 (0x7 << 
HRTIM_TIMx_DT_DTPRSC_SHIFT
)

	)

1884 
	#HRTIM_TIMx_DT_SDTRx
 (1 << 9)

	)

1887 
	#HRTIM_TIMx_DT_DTRx_SHIFT
 0

	)

1888 
	#HRTIM_TIMx_DT_DTRx_MASK
 (0x1f‡<< 
HRTIM_TIMx_DT_DTRx_SHIFT
)

	)

1898 
	#HRTIM_TIMx_SETy_UPDATE
 (1 << 31)

	)

1901 
	#HRTIM_TIMx_SETy_EXTEVNT10
 (1 << 30)

	)

1904 
	#HRTIM_TIMx_SETy_EXTEVNT9
 (1 << 29)

	)

1907 
	#HRTIM_TIMx_SETy_EXTEVNT8
 (1 << 28)

	)

1910 
	#HRTIM_TIMx_SETy_EXTEVNT7
 (1 << 27)

	)

1913 
	#HRTIM_TIMx_SETy_EXTEVNT6
 (1 << 26)

	)

1916 
	#HRTIM_TIMx_SETy_EXTEVNT5
 (1 << 25)

	)

1919 
	#HRTIM_TIMx_SETy_EXTEVNT4
 (1 << 24)

	)

1922 
	#HRTIM_TIMx_SETy_EXTEVNT3
 (1 << 23)

	)

1925 
	#HRTIM_TIMx_SETy_EXTEVNT2
 (1 << 22)

	)

1928 
	#HRTIM_TIMx_SETy_EXTEVNT1
 (1 << 21)

	)

1931 
	#HRTIM_TIMx_SETy_TIMEVNT9
 (1 << 20)

	)

1934 
	#HRTIM_TIMx_SETy_TIMEVNT8
 (1 << 19)

	)

1937 
	#HRTIM_TIMx_SETy_TIMEVNT7
 (1 << 18)

	)

1940 
	#HRTIM_TIMx_SETy_TIMEVNT6
 (1 << 17)

	)

1943 
	#HRTIM_TIMx_SETy_TIMEVNT5
 (1 << 16)

	)

1946 
	#HRTIM_TIMx_SETy_TIMEVNT4
 (1 << 15)

	)

1949 
	#HRTIM_TIMx_SETy_TIMEVNT3
 (1 << 14)

	)

1952 
	#HRTIM_TIMx_SETy_TIMEVNT2
 (1 << 13)

	)

1955 
	#HRTIM_TIMx_SETy_TIMEVNT1
 (1 << 12)

	)

1958 
	#HRTIM_TIMx_SETy_MSTCMP4
 (1 << 11)

	)

1961 
	#HRTIM_TIMx_SETy_MSTCMP3
 (1 << 10)

	)

1964 
	#HRTIM_TIMx_SETy_MSTCMP2
 (1 << 9)

	)

1967 
	#HRTIM_TIMx_SETy_MSTCMP1
 (1 << 8)

	)

1970 
	#HRTIM_TIMx_SETy_MSTPER
 (1 << 7)

	)

1973 
	#HRTIM_TIMx_SETy_CMP4
 (1 << 6)

	)

1976 
	#HRTIM_TIMx_SETy_CMP3
 (1 << 5)

	)

1979 
	#HRTIM_TIMx_SETy_CMP2
 (1 << 4)

	)

1982 
	#HRTIM_TIMx_SETy_CMP1
 (1 << 3)

	)

1985 
	#HRTIM_TIMx_SETy_PER
 (1 << 2)

	)

1988 
	#HRTIM_TIMx_SETy_RESYNC
 (1 << 1)

	)

1991 
	#HRTIM_TIMx_SETy_SST
 (1 << 0)

	)

2001 
	#HRTIM_TIMx_RSTy_UPDATE
 (1 << 31)

	)

2004 
	#HRTIM_TIMx_RSTy_EXTEVNT10
 (1 << 30)

	)

2007 
	#HRTIM_TIMx_RSTy_EXTEVNT9
 (1 << 29)

	)

2010 
	#HRTIM_TIMx_RSTy_EXTEVNT8
 (1 << 28)

	)

2013 
	#HRTIM_TIMx_RSTy_EXTEVNT7
 (1 << 27)

	)

2016 
	#HRTIM_TIMx_RSTy_EXTEVNT6
 (1 << 26)

	)

2019 
	#HRTIM_TIMx_RSTy_EXTEVNT5
 (1 << 25)

	)

2022 
	#HRTIM_TIMx_RSTy_EXTEVNT4
 (1 << 24)

	)

2025 
	#HRTIM_TIMx_RSTy_EXTEVNT3
 (1 << 23)

	)

2028 
	#HRTIM_TIMx_RSTy_EXTEVNT2
 (1 << 22)

	)

2031 
	#HRTIM_TIMx_RSTy_EXTEVNT1
 (1 << 21)

	)

2034 
	#HRTIM_TIMx_RSTy_TIMEVNT9
 (1 << 20)

	)

2037 
	#HRTIM_TIMx_RSTy_TIMEVNT8
 (1 << 19)

	)

2040 
	#HRTIM_TIMx_RSTy_TIMEVNT7
 (1 << 18)

	)

2043 
	#HRTIM_TIMx_RSTy_TIMEVNT6
 (1 << 17)

	)

2046 
	#HRTIM_TIMx_RSTy_TIMEVNT5
 (1 << 16)

	)

2049 
	#HRTIM_TIMx_RSTy_TIMEVNT4
 (1 << 15)

	)

2052 
	#HRTIM_TIMx_RSTy_TIMEVNT3
 (1 << 14)

	)

2055 
	#HRTIM_TIMx_RSTy_TIMEVNT2
 (1 << 13)

	)

2058 
	#HRTIM_TIMx_RSTy_TIMEVNT1
 (1 << 12)

	)

2061 
	#HRTIM_TIMx_RSTy_MSTCMP4
 (1 << 11)

	)

2064 
	#HRTIM_TIMx_RSTy_MSTCMP3
 (1 << 10)

	)

2067 
	#HRTIM_TIMx_RSTy_MSTCMP2
 (1 << 9)

	)

2070 
	#HRTIM_TIMx_RSTy_MSTCMP1
 (1 << 8)

	)

2073 
	#HRTIM_TIMx_RSTy_MSTPER
 (1 << 7)

	)

2076 
	#HRTIM_TIMx_RSTy_CMP4
 (1 << 6)

	)

2079 
	#HRTIM_TIMx_RSTy_CMP3
 (1 << 5)

	)

2082 
	#HRTIM_TIMx_RSTy_CMP2
 (1 << 4)

	)

2085 
	#HRTIM_TIMx_RSTy_CMP1
 (1 << 3)

	)

2088 
	#HRTIM_TIMx_RSTy_PER
 (1 << 2)

	)

2091 
	#HRTIM_TIMx_RSTy_RESYNC
 (1 << 1)

	)

2094 
	#HRTIM_TIMx_RSTy_SRT
 (1 << 0)

	)

2104 
	#HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(
x
Ë((xË* 6 - 5)

	)

2105 
	#HRTIM_TIMx_EEF1_EExFLTR_MASK
(
x
Ë(0x‡<< 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2107 
	#HRTIM_TIMx_EEF1_EExFLTR_NONE
(
x
Ë–0 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2108 
	#HRTIM_TIMx_EEF1_EExFLTR_CMP1
(
x
Ë–1 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2109 
	#HRTIM_TIMx_EEF1_EExFLTR_CMP2
(
x
Ë–2 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2110 
	#HRTIM_TIMx_EEF1_EExFLTR_CMP3
(
x
Ë–3 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2111 
	#HRTIM_TIMx_EEF1_EExFLTR_CMP4
(
x
Ë–4 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2112 
	#HRTIM_TIMx_EEF1_EExFLTR_TIMFLTR1
(
x
Ë–5 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2113 
	#HRTIM_TIMx_EEF1_EExFLTR_TIMFLTR2
(
x
Ë–6 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2114 
	#HRTIM_TIMx_EEF1_EExFLTR_TIMFLTR3
(
x
Ë–7 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2115 
	#HRTIM_TIMx_EEF1_EExFLTR_TIMFLTR4
(
x
Ë–8 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2116 
	#HRTIM_TIMx_EEF1_EExFLTR_TIMFLTR5
(
x
Ë–9 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2117 
	#HRTIM_TIMx_EEF1_EExFLTR_TIMFLTR6
(
x
Ë(10 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2118 
	#HRTIM_TIMx_EEF1_EExFLTR_TIMFLTR7
(
x
Ë(11 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2119 
	#HRTIM_TIMx_EEF1_EExFLTR_TIMFLTR8
(
x
Ë(12 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2120 
	#HRTIM_TIMx_EEF1_EExFLTR_WND_CMP2
(
x
Ë(13 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2121 
	#HRTIM_TIMx_EEF1_EExFLTR_WND_CMP3
(
x
Ë(14 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2122 
	#HRTIM_TIMx_EEF1_EExFLTR_TIMWIN
(
x
Ë(15 << 
	`HRTIM_TIMx_EEF1_EExFLTR_SHIFT
(x))

	)

2125 
	#HRTIM_TIMx_EEF1_EExLTCH
 (1 << ((
x
Ë* 6 - 6))

	)

2135 
	#HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(
x
Ë(((xË- 6Ë* 6 + 1)

	)

2136 
	#HRTIM_TIMx_EEF2_EExFLTR_MASK
(
x
Ë(0x‡<< 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2138 
	#HRTIM_TIMx_EEF2_EExFLTR_NONE
(
x
Ë–0 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2139 
	#HRTIM_TIMx_EEF2_EExFLTR_CMP1
(
x
Ë–1 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2140 
	#HRTIM_TIMx_EEF2_EExFLTR_CMP2
(
x
Ë–2 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2141 
	#HRTIM_TIMx_EEF2_EExFLTR_CMP3
(
x
Ë–3 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2142 
	#HRTIM_TIMx_EEF2_EExFLTR_CMP4
(
x
Ë–4 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2143 
	#HRTIM_TIMx_EEF2_EExFLTR_TIMFLTR1
(
x
Ë–5 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2144 
	#HRTIM_TIMx_EEF2_EExFLTR_TIMFLTR2
(
x
Ë–6 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2145 
	#HRTIM_TIMx_EEF2_EExFLTR_TIMFLTR3
(
x
Ë–7 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2146 
	#HRTIM_TIMx_EEF2_EExFLTR_TIMFLTR4
(
x
Ë–8 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2147 
	#HRTIM_TIMx_EEF2_EExFLTR_TIMFLTR5
(
x
Ë–9 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2148 
	#HRTIM_TIMx_EEF2_EExFLTR_TIMFLTR6
(
x
Ë(10 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2149 
	#HRTIM_TIMx_EEF2_EExFLTR_TIMFLTR7
(
x
Ë(11 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2150 
	#HRTIM_TIMx_EEF2_EExFLTR_TIMFLTR8
(
x
Ë(12 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2151 
	#HRTIM_TIMx_EEF2_EExFLTR_WND_CMP2
(
x
Ë(13 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2152 
	#HRTIM_TIMx_EEF2_EExFLTR_WND_CMP3
(
x
Ë(14 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2153 
	#HRTIM_TIMx_EEF2_EExFLTR_TIMWIN
(
x
Ë(15 << 
	`HRTIM_TIMx_EEF2_EExFLTR_SHIFT
(x))

	)

2156 
	#HRTIM_TIMx_EEF2_EExLTCH
 (1 << (((
x
Ë- 6Ë* 6))

	)

2172 
	#HRTIM_TIMA_RST_TIMECMP4
 (1 << 30)

	)

2175 
	#HRTIM_TIMA_RST_TIMECMP2
 (1 << 29)

	)

2178 
	#HRTIM_TIMA_RST_TIMECMP1
 (1 << 28)

	)

2181 
	#HRTIM_TIMA_RST_TIMDCMP4
 (1 << 27)

	)

2184 
	#HRTIM_TIMA_RST_TIMDCMP2
 (1 << 26)

	)

2187 
	#HRTIM_TIMA_RST_TIMDCMP1
 (1 << 25)

	)

2190 
	#HRTIM_TIMA_RST_TIMCCMP4
 (1 << 24)

	)

2193 
	#HRTIM_TIMA_RST_TIMCCMP2
 (1 << 23)

	)

2196 
	#HRTIM_TIMA_RST_TIMCCMP1
 (1 << 22)

	)

2199 
	#HRTIM_TIMA_RST_TIMBCMP4
 (1 << 21)

	)

2202 
	#HRTIM_TIMA_RST_TIMBCMP2
 (1 << 20)

	)

2205 
	#HRTIM_TIMA_RST_TIMBCMP1
 (1 << 19)

	)

2208 
	#HRTIM_TIMA_RST_EXTEVNT10
 (1 << 18)

	)

2211 
	#HRTIM_TIMA_RST_EXTEVNT9
 (1 << 17)

	)

2214 
	#HRTIM_TIMA_RST_EXTEVNT8
 (1 << 16)

	)

2217 
	#HRTIM_TIMA_RST_EXTEVNT7
 (1 << 15)

	)

2220 
	#HRTIM_TIMA_RST_EXTEVNT6
 (1 << 14)

	)

2223 
	#HRTIM_TIMA_RST_EXTEVNT5
 (1 << 13)

	)

2226 
	#HRTIM_TIMA_RST_EXTEVNT4
 (1 << 12)

	)

2229 
	#HRTIM_TIMA_RST_EXTEVNT3
 (1 << 11)

	)

2232 
	#HRTIM_TIMA_RST_EXTEVNT2
 (1 << 10)

	)

2235 
	#HRTIM_TIMA_RST_EXTEVNT1
 (1 << 9)

	)

2238 
	#HRTIM_TIMA_RST_MSTCMP4
 (1 << 8)

	)

2241 
	#HRTIM_TIMA_RST_MSTCMP3
 (1 << 7)

	)

2244 
	#HRTIM_TIMA_RST_MSTCMP2
 (1 << 6)

	)

2247 
	#HRTIM_TIMA_RST_MSTCMP1
 (1 << 5)

	)

2250 
	#HRTIM_TIMA_RST_MSTPER
 (1 << 4)

	)

2253 
	#HRTIM_TIMA_RST_CMP4
 (1 << 3)

	)

2256 
	#HRTIM_TIMA_RST_CMP2
 (1 << 2)

	)

2259 
	#HRTIM_TIMA_RST_UPDT
 (1 << 1)

	)

2275 
	#HRTIM_TIMB_RST_TIMECMP4
 (1 << 30)

	)

2278 
	#HRTIM_TIMB_RST_TIMECMP2
 (1 << 29)

	)

2281 
	#HRTIM_TIMB_RST_TIMECMP1
 (1 << 28)

	)

2284 
	#HRTIM_TIMB_RST_TIMDCMP4
 (1 << 27)

	)

2287 
	#HRTIM_TIMB_RST_TIMDCMP2
 (1 << 26)

	)

2290 
	#HRTIM_TIMB_RST_TIMDCMP1
 (1 << 25)

	)

2293 
	#HRTIM_TIMB_RST_TIMCCMP4
 (1 << 24)

	)

2296 
	#HRTIM_TIMB_RST_TIMCCMP2
 (1 << 23)

	)

2299 
	#HRTIM_TIMB_RST_TIMCCMP1
 (1 << 22)

	)

2302 
	#HRTIM_TIMB_RST_TIMACMP4
 (1 << 21)

	)

2305 
	#HRTIM_TIMB_RST_TIMACMP2
 (1 << 20)

	)

2308 
	#HRTIM_TIMB_RST_TIMACMP1
 (1 << 19)

	)

2311 
	#HRTIM_TIMB_RST_EXTEVNT10
 (1 << 18)

	)

2314 
	#HRTIM_TIMB_RST_EXTEVNT9
 (1 << 17)

	)

2317 
	#HRTIM_TIMB_RST_EXTEVNT8
 (1 << 16)

	)

2320 
	#HRTIM_TIMB_RST_EXTEVNT7
 (1 << 15)

	)

2323 
	#HRTIM_TIMB_RST_EXTEVNT6
 (1 << 14)

	)

2326 
	#HRTIM_TIMB_RST_EXTEVNT5
 (1 << 13)

	)

2329 
	#HRTIM_TIMB_RST_EXTEVNT4
 (1 << 12)

	)

2332 
	#HRTIM_TIMB_RST_EXTEVNT3
 (1 << 11)

	)

2335 
	#HRTIM_TIMB_RST_EXTEVNT2
 (1 << 10)

	)

2338 
	#HRTIM_TIMB_RST_EXTEVNT1
 (1 << 9)

	)

2341 
	#HRTIM_TIMB_RST_MSTCMP4
 (1 << 8)

	)

2344 
	#HRTIM_TIMB_RST_MSTCMP3
 (1 << 7)

	)

2347 
	#HRTIM_TIMB_RST_MSTCMP2
 (1 << 6)

	)

2350 
	#HRTIM_TIMB_RST_MSTCMP1
 (1 << 5)

	)

2353 
	#HRTIM_TIMB_RST_MSTPER
 (1 << 4)

	)

2356 
	#HRTIM_TIMB_RST_CMP4
 (1 << 3)

	)

2359 
	#HRTIM_TIMB_RST_CMP2
 (1 << 2)

	)

2362 
	#HRTIM_TIMB_RST_UPDT
 (1 << 1)

	)

2378 
	#HRTIM_TIMC_RST_TIMECMP4
 (1 << 30)

	)

2381 
	#HRTIM_TIMC_RST_TIMECMP2
 (1 << 29)

	)

2384 
	#HRTIM_TIMC_RST_TIMECMP1
 (1 << 28)

	)

2387 
	#HRTIM_TIMC_RST_TIMDCMP4
 (1 << 27)

	)

2390 
	#HRTIM_TIMC_RST_TIMDCMP2
 (1 << 26)

	)

2393 
	#HRTIM_TIMC_RST_TIMDCMP1
 (1 << 25)

	)

2396 
	#HRTIM_TIMC_RST_TIMBCMP4
 (1 << 24)

	)

2399 
	#HRTIM_TIMC_RST_TIMBCMP2
 (1 << 23)

	)

2402 
	#HRTIM_TIMC_RST_TIMBCMP1
 (1 << 22)

	)

2405 
	#HRTIM_TIMC_RST_TIMACMP4
 (1 << 21)

	)

2408 
	#HRTIM_TIMC_RST_TIMACMP2
 (1 << 20)

	)

2411 
	#HRTIM_TIMC_RST_TIMACMP1
 (1 << 19)

	)

2414 
	#HRTIM_TIMC_RST_EXTEVNT10
 (1 << 18)

	)

2417 
	#HRTIM_TIMC_RST_EXTEVNT9
 (1 << 17)

	)

2420 
	#HRTIM_TIMC_RST_EXTEVNT8
 (1 << 16)

	)

2423 
	#HRTIM_TIMC_RST_EXTEVNT7
 (1 << 15)

	)

2426 
	#HRTIM_TIMC_RST_EXTEVNT6
 (1 << 14)

	)

2429 
	#HRTIM_TIMC_RST_EXTEVNT5
 (1 << 13)

	)

2432 
	#HRTIM_TIMC_RST_EXTEVNT4
 (1 << 12)

	)

2435 
	#HRTIM_TIMC_RST_EXTEVNT3
 (1 << 11)

	)

2438 
	#HRTIM_TIMC_RST_EXTEVNT2
 (1 << 10)

	)

2441 
	#HRTIM_TIMC_RST_EXTEVNT1
 (1 << 9)

	)

2444 
	#HRTIM_TIMC_RST_MSTCMP4
 (1 << 8)

	)

2447 
	#HRTIM_TIMC_RST_MSTCMP3
 (1 << 7)

	)

2450 
	#HRTIM_TIMC_RST_MSTCMP2
 (1 << 6)

	)

2453 
	#HRTIM_TIMC_RST_MSTCMP1
 (1 << 5)

	)

2456 
	#HRTIM_TIMC_RST_MSTPER
 (1 << 4)

	)

2459 
	#HRTIM_TIMC_RST_CMP4
 (1 << 3)

	)

2462 
	#HRTIM_TIMC_RST_CMP2
 (1 << 2)

	)

2465 
	#HRTIM_TIMC_RST_UPDT
 (1 << 1)

	)

2481 
	#HRTIM_TIMD_RST_TIMECMP4
 (1 << 30)

	)

2484 
	#HRTIM_TIMD_RST_TIMECMP2
 (1 << 29)

	)

2487 
	#HRTIM_TIMD_RST_TIMECMP1
 (1 << 28)

	)

2490 
	#HRTIM_TIMD_RST_TIMCCMP4
 (1 << 27)

	)

2493 
	#HRTIM_TIMD_RST_TIMCCMP2
 (1 << 26)

	)

2496 
	#HRTIM_TIMD_RST_TIMCCMP1
 (1 << 25)

	)

2499 
	#HRTIM_TIMD_RST_TIMBCMP4
 (1 << 24)

	)

2502 
	#HRTIM_TIMD_RST_TIMBCMP2
 (1 << 23)

	)

2505 
	#HRTIM_TIMD_RST_TIMBCMP1
 (1 << 22)

	)

2508 
	#HRTIM_TIMD_RST_TIMACMP4
 (1 << 21)

	)

2511 
	#HRTIM_TIMD_RST_TIMACMP2
 (1 << 20)

	)

2514 
	#HRTIM_TIMD_RST_TIMACMP1
 (1 << 19)

	)

2517 
	#HRTIM_TIMD_RST_EXTEVNT10
 (1 << 18)

	)

2520 
	#HRTIM_TIMD_RST_EXTEVNT9
 (1 << 17)

	)

2523 
	#HRTIM_TIMD_RST_EXTEVNT8
 (1 << 16)

	)

2526 
	#HRTIM_TIMD_RST_EXTEVNT7
 (1 << 15)

	)

2529 
	#HRTIM_TIMD_RST_EXTEVNT6
 (1 << 14)

	)

2532 
	#HRTIM_TIMD_RST_EXTEVNT5
 (1 << 13)

	)

2535 
	#HRTIM_TIMD_RST_EXTEVNT4
 (1 << 12)

	)

2538 
	#HRTIM_TIMD_RST_EXTEVNT3
 (1 << 11)

	)

2541 
	#HRTIM_TIMD_RST_EXTEVNT2
 (1 << 10)

	)

2544 
	#HRTIM_TIMD_RST_EXTEVNT1
 (1 << 9)

	)

2547 
	#HRTIM_TIMD_RST_MSTCMP4
 (1 << 8)

	)

2550 
	#HRTIM_TIMD_RST_MSTCMP3
 (1 << 7)

	)

2553 
	#HRTIM_TIMD_RST_MSTCMP2
 (1 << 6)

	)

2556 
	#HRTIM_TIMD_RST_MSTCMP1
 (1 << 5)

	)

2559 
	#HRTIM_TIMD_RST_MSTPER
 (1 << 4)

	)

2562 
	#HRTIM_TIMD_RST_CMP4
 (1 << 3)

	)

2565 
	#HRTIM_TIMD_RST_CMP2
 (1 << 2)

	)

2568 
	#HRTIM_TIMD_RST_UPDT
 (1 << 1)

	)

2584 
	#HRTIM_TIME_RST_TIMDCMP4
 (1 << 30)

	)

2587 
	#HRTIM_TIME_RST_TIMDCMP2
 (1 << 29)

	)

2590 
	#HRTIM_TIME_RST_TIMDCMP1
 (1 << 28)

	)

2593 
	#HRTIM_TIME_RST_TIMCCMP4
 (1 << 27)

	)

2596 
	#HRTIM_TIME_RST_TIMCCMP2
 (1 << 26)

	)

2599 
	#HRTIM_TIME_RST_TIMCCMP1
 (1 << 25)

	)

2602 
	#HRTIM_TIME_RST_TIMBCMP4
 (1 << 24)

	)

2605 
	#HRTIM_TIME_RST_TIMBCMP2
 (1 << 23)

	)

2608 
	#HRTIM_TIME_RST_TIMBCMP1
 (1 << 22)

	)

2611 
	#HRTIM_TIME_RST_TIMACMP4
 (1 << 21)

	)

2614 
	#HRTIM_TIME_RST_TIMACMP2
 (1 << 20)

	)

2617 
	#HRTIM_TIME_RST_TIMACMP1
 (1 << 19)

	)

2620 
	#HRTIM_TIME_RST_EXTEVNT10
 (1 << 18)

	)

2623 
	#HRTIM_TIME_RST_EXTEVNT9
 (1 << 17)

	)

2626 
	#HRTIM_TIME_RST_EXTEVNT8
 (1 << 16)

	)

2629 
	#HRTIM_TIME_RST_EXTEVNT7
 (1 << 15)

	)

2632 
	#HRTIM_TIME_RST_EXTEVNT6
 (1 << 14)

	)

2635 
	#HRTIM_TIME_RST_EXTEVNT5
 (1 << 13)

	)

2638 
	#HRTIM_TIME_RST_EXTEVNT4
 (1 << 12)

	)

2641 
	#HRTIM_TIME_RST_EXTEVNT3
 (1 << 11)

	)

2644 
	#HRTIM_TIME_RST_EXTEVNT2
 (1 << 10)

	)

2647 
	#HRTIM_TIME_RST_EXTEVNT1
 (1 << 9)

	)

2650 
	#HRTIM_TIME_RST_MSTCMP4
 (1 << 8)

	)

2653 
	#HRTIM_TIME_RST_MSTCMP3
 (1 << 7)

	)

2656 
	#HRTIM_TIME_RST_MSTCMP2
 (1 << 6)

	)

2659 
	#HRTIM_TIME_RST_MSTCMP1
 (1 << 5)

	)

2662 
	#HRTIM_TIME_RST_MSTPER
 (1 << 4)

	)

2665 
	#HRTIM_TIME_RST_CMP4
 (1 << 3)

	)

2668 
	#HRTIM_TIME_RST_CMP2
 (1 << 2)

	)

2671 
	#HRTIM_TIME_RST_UPDT
 (1 << 1)

	)

2681 
	#HRTIM_TIMx_CHP_STRTPW_SHIFT
 7

	)

2682 
	#HRTIM_TIMx_CHP_STRTPW_MASK
 (0x‡<< 
HRTIM_TIMx_CHP_STRTPW_SHIFT
)

	)

2685 
	#HRTIM_TIMx_CHP_CHPDTY_SHIFT
 4

	)

2686 
	#HRTIM_TIMx_CHP_CHPDTY_MASK
 (0x7 << 
HRTIM_TIMx_CHP_CHPDTY_SHIFT
)

	)

2688 
	#HRTIM_TIMx_CHP_CHPDTY_0_8
 (0 << 
HRTIM_TIMx_CHP_CHPDTY_SHIFT
)

	)

2689 
	#HRTIM_TIMx_CHP_CHPDTY_1_8
 (1 << 
HRTIM_TIMx_CHP_CHPDTY_SHIFT
)

	)

2690 
	#HRTIM_TIMx_CHP_CHPDTY_2_8
 (2 << 
HRTIM_TIMx_CHP_CHPDTY_SHIFT
)

	)

2691 
	#HRTIM_TIMx_CHP_CHPDTY_3_8
 (3 << 
HRTIM_TIMx_CHP_CHPDTY_SHIFT
)

	)

2692 
	#HRTIM_TIMx_CHP_CHPDTY_4_8
 (4 << 
HRTIM_TIMx_CHP_CHPDTY_SHIFT
)

	)

2693 
	#HRTIM_TIMx_CHP_CHPDTY_5_8
 (5 << 
HRTIM_TIMx_CHP_CHPDTY_SHIFT
)

	)

2694 
	#HRTIM_TIMx_CHP_CHPDTY_6_8
 (6 << 
HRTIM_TIMx_CHP_CHPDTY_SHIFT
)

	)

2695 
	#HRTIM_TIMx_CHP_CHPDTY_7_8
 (7 << 
HRTIM_TIMx_CHP_CHPDTY_SHIFT
)

	)

2698 
	#HRTIM_TIMx_CHP_CHPFRQ_SHIFT
 0

	)

2699 
	#HRTIM_TIMx_CHP_CHPFRQ_MASK
 (0x‡<< 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2701 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV16
 ( 0 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2702 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV32
 ( 1 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2703 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV48
 ( 2 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2704 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV64
 ( 3 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2705 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV80
 ( 4 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2706 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV96
 ( 5 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2707 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV112
 ( 6 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2708 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV128
 ( 7 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2709 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV144
 ( 8 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2710 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV160
 ( 9 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2711 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV176
 (10 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2712 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV192
 (11 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2713 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV208
 (12 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2714 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV224
 (13 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2715 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV240
 (14 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2716 
	#HRTIM_TIMx_CHP_CHPFRQ_DIV256
 (15 << 
HRTIM_TIMx_CHP_CHPFRQ_SHIFT
)

	)

2726 
	#HRTIM_TIMx_CPT1_TECMP2
 (1 << 31)

	)

2729 
	#HRTIM_TIMx_CPT1_TECMP1
 (1 << 30)

	)

2732 
	#HRTIM_TIMx_CPT1_TE1RST
 (1 << 29)

	)

2735 
	#HRTIM_TIMx_CPT1_TE1SET
 (1 << 28)

	)

2738 
	#HRTIM_TIMx_CPT1_TDCMP2
 (1 << 27)

	)

2741 
	#HRTIM_TIMx_CPT1_TDCMP1
 (1 << 26)

	)

2744 
	#HRTIM_TIMx_CPT1_TD1RST
 (1 << 25)

	)

2747 
	#HRTIM_TIMx_CPT1_TD1SET
 (1 << 24)

	)

2750 
	#HRTIM_TIMx_CPT1_TCCMP2
 (1 << 23)

	)

2753 
	#HRTIM_TIMx_CPT1_TCCMP1
 (1 << 22)

	)

2756 
	#HRTIM_TIMx_CPT1_TC1RST
 (1 << 21)

	)

2759 
	#HRTIM_TIMx_CPT1_TC1SET
 (1 << 20)

	)

2762 
	#HRTIM_TIMx_CPT1_TBCMP2
 (1 << 19)

	)

2765 
	#HRTIM_TIMx_CPT1_TBCMP1
 (1 << 18)

	)

2768 
	#HRTIM_TIMx_CPT1_TB1RST
 (1 << 17)

	)

2771 
	#HRTIM_TIMx_CPT1_TB1SET
 (1 << 16)

	)

2774 
	#HRTIM_TIMx_CPT1_EXEV10CPT
 (1 << 11)

	)

2777 
	#HRTIM_TIMx_CPT1_EXEV9CPT
 (1 << 10)

	)

2780 
	#HRTIM_TIMx_CPT1_EXEV8CPT
 (1 << 9)

	)

2783 
	#HRTIM_TIMx_CPT1_EXEV7CPT
 (1 << 8)

	)

2786 
	#HRTIM_TIMx_CPT1_EXEV6CPT
 (1 << 7)

	)

2789 
	#HRTIM_TIMx_CPT1_EXEV5CPT
 (1 << 6)

	)

2792 
	#HRTIM_TIMx_CPT1_EXEV4CPT
 (1 << 5)

	)

2795 
	#HRTIM_TIMx_CPT1_EXEV3CPT
 (1 << 4)

	)

2798 
	#HRTIM_TIMx_CPT1_EXEV2CPT
 (1 << 3)

	)

2801 
	#HRTIM_TIMx_CPT1_EXEV1CPT
 (1 << 2)

	)

2804 
	#HRTIM_TIMx_CPT1_UDPCPT
 (1 << 1)

	)

2807 
	#HRTIM_TIMx_CPT1_SWCPT
 (1 << 0)

	)

2817 
	#HRTIM_TIMx_CPT2_TECMP2
 (1 << 31)

	)

2820 
	#HRTIM_TIMx_CPT2_TECMP1
 (1 << 30)

	)

2823 
	#HRTIM_TIMx_CPT2_TE1RST
 (1 << 29)

	)

2826 
	#HRTIM_TIMx_CPT2_TE1SET
 (1 << 28)

	)

2829 
	#HRTIM_TIMx_CPT2_TDCMP2
 (1 << 27)

	)

2832 
	#HRTIM_TIMx_CPT2_TDCMP1
 (1 << 26)

	)

2835 
	#HRTIM_TIMx_CPT2_TD1RST
 (1 << 25)

	)

2838 
	#HRTIM_TIMx_CPT2_TD1SET
 (1 << 24)

	)

2841 
	#HRTIM_TIMx_CPT2_TCCMP2
 (1 << 23)

	)

2844 
	#HRTIM_TIMx_CPT2_TCCMP1
 (1 << 22)

	)

2847 
	#HRTIM_TIMx_CPT2_TC1RST
 (1 << 21)

	)

2850 
	#HRTIM_TIMx_CPT2_TC1SET
 (1 << 20)

	)

2853 
	#HRTIM_TIMx_CPT2_TBCMP2
 (1 << 19)

	)

2856 
	#HRTIM_TIMx_CPT2_TBCMP1
 (1 << 18)

	)

2859 
	#HRTIM_TIMx_CPT2_TB1RST
 (1 << 17)

	)

2862 
	#HRTIM_TIMx_CPT2_TB1SET
 (1 << 16)

	)

2865 
	#HRTIM_TIMx_CPT2_EXEV10CPT
 (1 << 11)

	)

2868 
	#HRTIM_TIMx_CPT2_EXEV9CPT
 (1 << 10)

	)

2871 
	#HRTIM_TIMx_CPT2_EXEV8CPT
 (1 << 9)

	)

2874 
	#HRTIM_TIMx_CPT2_EXEV7CPT
 (1 << 8)

	)

2877 
	#HRTIM_TIMx_CPT2_EXEV6CPT
 (1 << 7)

	)

2880 
	#HRTIM_TIMx_CPT2_EXEV5CPT
 (1 << 6)

	)

2883 
	#HRTIM_TIMx_CPT2_EXEV4CPT
 (1 << 5)

	)

2886 
	#HRTIM_TIMx_CPT2_EXEV3CPT
 (1 << 4)

	)

2889 
	#HRTIM_TIMx_CPT2_EXEV2CPT
 (1 << 3)

	)

2892 
	#HRTIM_TIMx_CPT2_EXEV1CPT
 (1 << 2)

	)

2895 
	#HRTIM_TIMx_CPT2_UDPCPT
 (1 << 1)

	)

2898 
	#HRTIM_TIMx_CPT2_SWCPT
 (1 << 0)

	)

2908 
	#HRTIM_TIMx_OUT_DIDL2
 (1 << 23)

	)

2911 
	#HRTIM_TIMx_OUT_CHP2
 (1 << 22)

	)

2914 
	#HRTIM_TIMx_OUT_FAULT2_SHIFT
 20

	)

2915 
	#HRTIM_TIMx_OUT_FAULT2_MASK
 (0x3 << 
HRTIM_TIMx_OUT_FAULT2_SHIFT
)

	)

2917 
	#HRTIM_TIMx_OUT_FAULT2_NOOP
 (0 << 
HRTIM_TIMx_OUT_FAULT2_SHIFT
)

	)

2918 
	#HRTIM_TIMx_OUT_FAULT2_ACTIVE
 (1 << 
HRTIM_TIMx_OUT_FAULT2_SHIFT
)

	)

2919 
	#HRTIM_TIMx_OUT_FAULT2_INACTIVE
 (2 << 
HRTIM_TIMx_OUT_FAULT2_SHIFT
)

	)

2920 
	#HRTIM_TIMx_OUT_FAULT2_HIGHZ
 (3 << 
HRTIM_TIMx_OUT_FAULT2_SHIFT
)

	)

2923 
	#HRTIM_TIMx_OUT_IDLES2
 (1 << 19)

	)

2926 
	#HRTIM_TIMx_OUT_IDLEM2
 (1 << 18)

	)

2929 
	#HRTIM_TIMx_OUT_POL2
 (1 << 17)

	)

2932 
	#HRTIM_TIMx_OUT_DLYPRT_SHIFT
 10

	)

2933 
	#HRTIM_TIMx_OUT_DLYPRT_MASK
 (0x7 << 
HRTIM_TIMx_OUT_DLYPRT_SHIFT
)

	)

2936 
	#HRTIM_TIMx_OUT_DLYPRTEN
 (1 << 9)

	)

2939 
	#HRTIM_TIMx_OUT_DTEN
 (1 << 8)

	)

2942 
	#HRTIM_TIMx_OUT_DIDL1
 (1 << 7)

	)

2945 
	#HRTIM_TIMx_OUT_CHP1
 (1 << 6)

	)

2948 
	#HRTIM_TIMx_OUT_FAULT1_SHIFT
 4

	)

2949 
	#HRTIM_TIMx_OUT_FAULT1_MASK
 (0x3 << 
HRTIM_TIMx_OUT_FAULT1_SHIFT
)

	)

2951 
	#HRTIM_TIMx_OUT_FAULT1_NOOP
 (0 << 
HRTIM_TIMx_OUT_FAULT1_SHIFT
)

	)

2952 
	#HRTIM_TIMx_OUT_FAULT1_ACTIVE
 (1 << 
HRTIM_TIMx_OUT_FAULT1_SHIFT
)

	)

2953 
	#HRTIM_TIMx_OUT_FAULT1_INACTIVE
 (2 << 
HRTIM_TIMx_OUT_FAULT1_SHIFT
)

	)

2954 
	#HRTIM_TIMx_OUT_FAULT1_HIGHZ
 (3 << 
HRTIM_TIMx_OUT_FAULT1_SHIFT
)

	)

2957 
	#HRTIM_TIMx_OUT_IDLES1
 (1 << 3)

	)

2960 
	#HRTIM_TIMx_OUT_IDLEM1
 (1 << 2)

	)

2963 
	#HRTIM_TIMx_OUT_POL1
 (1 << 1)

	)

2973 
	#HRTIM_TIMx_FLT_FLTLCK
 (1 << 31)

	)

2976 
	#HRTIM_TIMx_FLT_FLT5EN
 (1 << 4)

	)

2979 
	#HRTIM_TIMx_FLT_FLT4EN
 (1 << 3)

	)

2982 
	#HRTIM_TIMx_FLT_FLT3EN
 (1 << 2)

	)

2985 
	#HRTIM_TIMx_FLT_FLT2EN
 (1 << 1)

	)

2988 
	#HRTIM_TIMx_FLT_FLT1EN
 (1 << 0)

	)

2993 
BEGIN_DECLS


2995 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/i2c_common_v1.h

32 #ifde‡
LIBOPENCM3_I2C_H


34 #i‚de‡
LIBOPENCM3_I2C_COMMON_V1_H


35 
	#LIBOPENCM3_I2C_COMMON_V1_H


	)

37 
	~<°ddef.h
>

38 
	~<°döt.h
>

48 
	#I2C1
 
I2C1_BASE


	)

49 
	#I2C2
 
I2C2_BASE


	)

55 
	#I2C_CR1
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x00)

	)

56 
	#I2C1_CR1
 
	`I2C_CR1
(
I2C1
)

	)

57 
	#I2C2_CR1
 
	`I2C_CR1
(
I2C2
)

	)

60 
	#I2C_CR2
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x04)

	)

61 
	#I2C1_CR2
 
	`I2C_CR2
(
I2C1
)

	)

62 
	#I2C2_CR2
 
	`I2C_CR2
(
I2C2
)

	)

65 
	#I2C_OAR1
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x08)

	)

66 
	#I2C1_OAR1
 
	`I2C_OAR1
(
I2C1
)

	)

67 
	#I2C2_OAR1
 
	`I2C_OAR1
(
I2C2
)

	)

70 
	#I2C_OAR2
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x0c)

	)

71 
	#I2C1_OAR2
 
	`I2C_OAR2
(
I2C1
)

	)

72 
	#I2C2_OAR2
 
	`I2C_OAR2
(
I2C2
)

	)

75 
	#I2C_DR
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x10)

	)

76 
	#I2C1_DR
 
	`I2C_DR
(
I2C1
)

	)

77 
	#I2C2_DR
 
	`I2C_DR
(
I2C2
)

	)

80 
	#I2C_SR1
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x14)

	)

81 
	#I2C1_SR1
 
	`I2C_SR1
(
I2C1
)

	)

82 
	#I2C2_SR1
 
	`I2C_SR1
(
I2C2
)

	)

85 
	#I2C_SR2
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x18)

	)

86 
	#I2C1_SR2
 
	`I2C_SR2
(
I2C1
)

	)

87 
	#I2C2_SR2
 
	`I2C_SR2
(
I2C2
)

	)

90 
	#I2C_CCR
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x1c)

	)

91 
	#I2C1_CCR
 
	`I2C_CCR
(
I2C1
)

	)

92 
	#I2C2_CCR
 
	`I2C_CCR
(
I2C2
)

	)

95 
	#I2C_TRISE
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x20)

	)

96 
	#I2C1_TRISE
 
	`I2C_TRISE
(
I2C1
)

	)

97 
	#I2C2_TRISE
 
	`I2C_TRISE
(
I2C2
)

	)

102 
	#I2C_CR1_SWRST
 (1 << 15)

	)

107 
	#I2C_CR1_ALERT
 (1 << 13)

	)

110 
	#I2C_CR1_PEC
 (1 << 12)

	)

113 
	#I2C_CR1_POS
 (1 << 11)

	)

116 
	#I2C_CR1_ACK
 (1 << 10)

	)

119 
	#I2C_CR1_STOP
 (1 << 9)

	)

122 
	#I2C_CR1_START
 (1 << 8)

	)

125 
	#I2C_CR1_NOSTRETCH
 (1 << 7)

	)

128 
	#I2C_CR1_ENGC
 (1 << 6)

	)

131 
	#I2C_CR1_ENPEC
 (1 << 5)

	)

134 
	#I2C_CR1_ENARP
 (1 << 4)

	)

137 
	#I2C_CR1_SMBTYPE
 (1 << 3)

	)

142 
	#I2C_CR1_SMBUS
 (1 << 1)

	)

145 
	#I2C_CR1_PE
 (1 << 0)

	)

152 
	#I2C_CR2_LAST
 (1 << 12)

	)

155 
	#I2C_CR2_DMAEN
 (1 << 11)

	)

158 
	#I2C_CR2_ITBUFEN
 (1 << 10)

	)

161 
	#I2C_CR2_ITEVTEN
 (1 << 9)

	)

164 
	#I2C_CR2_ITERREN
 (1 << 8)

	)

175 
	#I2C_CR2_FREQ_2MHZ
 0x02

	)

176 
	#I2C_CR2_FREQ_3MHZ
 0x03

	)

177 
	#I2C_CR2_FREQ_4MHZ
 0x04

	)

178 
	#I2C_CR2_FREQ_5MHZ
 0x05

	)

179 
	#I2C_CR2_FREQ_6MHZ
 0x06

	)

180 
	#I2C_CR2_FREQ_7MHZ
 0x07

	)

181 
	#I2C_CR2_FREQ_8MHZ
 0x08

	)

182 
	#I2C_CR2_FREQ_9MHZ
 0x09

	)

183 
	#I2C_CR2_FREQ_10MHZ
 0x0a

	)

184 
	#I2C_CR2_FREQ_11MHZ
 0x0b

	)

185 
	#I2C_CR2_FREQ_12MHZ
 0x0c

	)

186 
	#I2C_CR2_FREQ_13MHZ
 0x0d

	)

187 
	#I2C_CR2_FREQ_14MHZ
 0x0e

	)

188 
	#I2C_CR2_FREQ_15MHZ
 0x0f

	)

189 
	#I2C_CR2_FREQ_16MHZ
 0x10

	)

190 
	#I2C_CR2_FREQ_17MHZ
 0x11

	)

191 
	#I2C_CR2_FREQ_18MHZ
 0x12

	)

192 
	#I2C_CR2_FREQ_19MHZ
 0x13

	)

193 
	#I2C_CR2_FREQ_20MHZ
 0x14

	)

194 
	#I2C_CR2_FREQ_21MHZ
 0x15

	)

195 
	#I2C_CR2_FREQ_22MHZ
 0x16

	)

196 
	#I2C_CR2_FREQ_23MHZ
 0x17

	)

197 
	#I2C_CR2_FREQ_24MHZ
 0x18

	)

198 
	#I2C_CR2_FREQ_25MHZ
 0x19

	)

199 
	#I2C_CR2_FREQ_26MHZ
 0x1a

	)

200 
	#I2C_CR2_FREQ_27MHZ
 0x1b

	)

201 
	#I2C_CR2_FREQ_28MHZ
 0x1c

	)

202 
	#I2C_CR2_FREQ_29MHZ
 0x1d

	)

203 
	#I2C_CR2_FREQ_30MHZ
 0x1e

	)

204 
	#I2C_CR2_FREQ_31MHZ
 0x1f

	)

205 
	#I2C_CR2_FREQ_32MHZ
 0x20

	)

206 
	#I2C_CR2_FREQ_33MHZ
 0x21

	)

207 
	#I2C_CR2_FREQ_34MHZ
 0x22

	)

208 
	#I2C_CR2_FREQ_35MHZ
 0x23

	)

209 
	#I2C_CR2_FREQ_36MHZ
 0x24

	)

210 
	#I2C_CR2_FREQ_37MHZ
 0x25

	)

211 
	#I2C_CR2_FREQ_38MHZ
 0x26

	)

212 
	#I2C_CR2_FREQ_39MHZ
 0x27

	)

213 
	#I2C_CR2_FREQ_40MHZ
 0x28

	)

214 
	#I2C_CR2_FREQ_41MHZ
 0x29

	)

215 
	#I2C_CR2_FREQ_42MHZ
 0x2a

	)

221 
	#I2C_OAR1_ADDMODE
 (1 << 15)

	)

222 
	#I2C_OAR1_ADDMODE_7BIT
 0

	)

223 
	#I2C_OAR1_ADDMODE_10BIT
 1

	)

238 
	#I2C_OAR2_ENDUAL
 (1 << 0)

	)

249 
	#I2C_SR1_SMBALERT
 (1 << 15)

	)

252 
	#I2C_SR1_TIMEOUT
 (1 << 14)

	)

257 
	#I2C_SR1_PECERR
 (1 << 12)

	)

260 
	#I2C_SR1_OVR
 (1 << 11)

	)

263 
	#I2C_SR1_AF
 (1 << 10)

	)

266 
	#I2C_SR1_ARLO
 (1 << 9)

	)

269 
	#I2C_SR1_BERR
 (1 << 8)

	)

272 
	#I2C_SR1_TxE
 (1 << 7)

	)

275 
	#I2C_SR1_RxNE
 (1 << 6)

	)

280 
	#I2C_SR1_STOPF
 (1 << 4)

	)

283 
	#I2C_SR1_ADD10
 (1 << 3)

	)

286 
	#I2C_SR1_BTF
 (1 << 2)

	)

289 
	#I2C_SR1_ADDR
 (1 << 1)

	)

292 
	#I2C_SR1_SB
 (1 << 0)

	)

299 
	#I2C_SR2_DUALF
 (1 << 7)

	)

302 
	#I2C_SR2_SMBHOST
 (1 << 6)

	)

305 
	#I2C_SR2_SMBDEFAULT
 (1 << 5)

	)

308 
	#I2C_SR2_GENCALL
 (1 << 4)

	)

313 
	#I2C_SR2_TRA
 (1 << 2)

	)

316 
	#I2C_SR2_BUSY
 (1 << 1)

	)

319 
	#I2C_SR2_MSL
 (1 << 0)

	)

324 
	#I2C_CCR_FS
 (1 << 15)

	)

331 
	#I2C_CCR_DUTY
 (1 << 14)

	)

332 
	#I2C_CCR_DUTY_DIV2
 0

	)

333 
	#I2C_CCR_DUTY_16_DIV_9
 1

	)

359 
	#I2C_WRITE
 0

	)

360 
	#I2C_READ
 1

	)

368 
	ei2c_•ìds
 {

369 
	mi2c_•ìd_sm_100k
,

370 
	mi2c_•ìd_fm_400k
,

371 
	mi2c_•ìd_fmp_1m
,

372 
	mi2c_•ìd_unknown


375 
BEGIN_DECLS


377 
i2c_ª£t
(
uöt32_t
 
i2c
);

378 
i2c_≥rùhîÆ_íabÀ
(
uöt32_t
 
i2c
);

379 
i2c_≥rùhîÆ_dißbÀ
(
uöt32_t
 
i2c
);

380 
i2c_£nd_°¨t
(
uöt32_t
 
i2c
);

381 
i2c_£nd_°›
(
uöt32_t
 
i2c
);

382 
i2c_˛ór_°›
(
uöt32_t
 
i2c
);

383 
i2c_£t_own_7bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
);

384 
i2c_£t_own_10bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt16_t
 
¶ave
);

385 
i2c_£t_own_7bô_¶ave_addªss_two
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
);

386 
i2c_íabÀ_duÆ_addªssög_mode
(
uöt32_t
 
i2c
);

387 
i2c_dißbÀ_duÆ_addªssög_mode
(
uöt32_t
 
i2c
);

388 
i2c_£t_˛ock_‰equícy
(
uöt32_t
 
i2c
, 
uöt8_t
 
‰eq
);

389 
i2c_£nd_d©a
(
uöt32_t
 
i2c
, 
uöt8_t
 
d©a
);

390 
i2c_£t_Á°_mode
(
uöt32_t
 
i2c
);

391 
i2c_£t_°™d¨d_mode
(
uöt32_t
 
i2c
);

392 
i2c_£t_c¸
(
uöt32_t
 
i2c
, 
uöt16_t
 
‰eq
);

393 
i2c_£t_åi£
(
uöt32_t
 
i2c
, 
uöt16_t
 
åi£
);

394 
i2c_£nd_7bô_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
, uöt8_à
ªadwrôe
);

395 
uöt8_t
 
i2c_gë_d©a
(
uöt32_t
 
i2c
);

396 
i2c_íabÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
);

397 
i2c_dißbÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
);

398 
i2c_íabÀ_ack
(
uöt32_t
 
i2c
);

399 
i2c_dißbÀ_ack
(
uöt32_t
 
i2c
);

400 
i2c_«ck_√xt
(
uöt32_t
 
i2c
);

401 
i2c_«ck_cuºít
(
uöt32_t
 
i2c
);

402 
i2c_£t_dutycy˛e
(
uöt32_t
 
i2c
, uöt32_à
dutycy˛e
);

403 
i2c_íabÀ_dma
(
uöt32_t
 
i2c
);

404 
i2c_dißbÀ_dma
(
uöt32_t
 
i2c
);

405 
i2c_£t_dma_œ°_å™s„r
(
uöt32_t
 
i2c
);

406 
i2c_˛ór_dma_œ°_å™s„r
(
uöt32_t
 
i2c
);

407 
i2c_å™s„r7
(
uöt32_t
 
i2c
, 
uöt8_t
 
addr
, uöt8_à*
w
, 
size_t
 
wn
, uöt8_à*
r
, size_à
∫
);

408 
i2c_£t_•ìd
(
uöt32_t
 
i2c
, 
i2c_•ìds
 
•ìd
, uöt32_à
˛ock_megahz
);

410 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/i2c_common_v2.h

29 #ifde‡
LIBOPENCM3_I2C_H


31 #i‚de‡
LIBOPENCM3_I2C_COMMON_V2_H


32 
	#LIBOPENCM3_I2C_COMMON_V2_H


	)

34 
	~<°ddef.h
>

35 
	~<°döt.h
>

44 
	#I2C1
 
I2C1_BASE


	)

45 
	#I2C2
 
I2C2_BASE


	)

51 
	#I2C_CR1
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x00)

	)

52 
	#I2C1_CR1
 
	`I2C_CR1
(
I2C1
)

	)

53 
	#I2C2_CR1
 
	`I2C_CR1
(
I2C2
)

	)

56 
	#I2C_CR2
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x04)

	)

57 
	#I2C1_CR2
 
	`I2C_CR2
(
I2C1
)

	)

58 
	#I2C2_CR2
 
	`I2C_CR2
(
I2C2
)

	)

61 
	#I2C_OAR1
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x08)

	)

62 
	#I2C1_OAR1
 
	`I2C_OAR1
(
I2C1
)

	)

63 
	#I2C2_OAR1
 
	`I2C_OAR1
(
I2C2
)

	)

66 
	#I2C_OAR2
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x0c)

	)

67 
	#I2C1_OAR2
 
	`I2C_OAR2
(
I2C1
)

	)

68 
	#I2C2_OAR2
 
	`I2C_OAR2
(
I2C2
)

	)

71 
	#I2C_TIMINGR
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x10)

	)

72 
	#I2C1_TIMINGR
 
	`I2C_TIMINGR
(
I2C1
)

	)

73 
	#I2C2_TIMINGR
 
	`I2C_TIMINGR
(
I2C2
)

	)

76 
	#I2C_TIMEOUTR
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x14)

	)

77 
	#I2C1_TIMEOUTR
 
	`I2C_TIMEOUTR
(
I2C1
)

	)

78 
	#I2C2_TIMEOUTR
 
	`I2C_TIMEOUTR
(
I2C2
)

	)

81 
	#I2C_ISR
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x18)

	)

82 
	#I2C1_ISR
 
	`I2C_ISR
(
I2C1
)

	)

83 
	#I2C2_ISR
 
	`I2C_ISR
(
I2C2
)

	)

86 
	#I2C_ICR
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x1C)

	)

87 
	#I2C1_ICR
 
	`I2C_ICR
(
I2C1
)

	)

88 
	#I2C2_ICR
 
	`I2C_ICR
(
I2C2
)

	)

91 
	#I2C_PECR
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x20)

	)

92 
	#I2C1_PECR
 
	`I2C_PECR
(
I2C1
)

	)

93 
	#I2C2_PECR
 
	`I2C_PECR
(
I2C2
)

	)

96 
	#I2C_RXDR
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x24)

	)

97 
	#I2C1_RXDR
 
	`I2C_RXDR
(
I2C1
)

	)

98 
	#I2C2_RXDR
 
	`I2C_RXDR
(
I2C2
)

	)

101 
	#I2C_TXDR
(
i2c_ba£
Ë
	`MMIO32
((i2c_ba£Ë+ 0x28)

	)

102 
	#I2C1_TXDR
 
	`I2C_TXDR
(
I2C1
)

	)

103 
	#I2C2_TXDR
 
	`I2C_TXDR
(
I2C2
)

	)

108 
	#I2C_CR1_PECEN
 (1 << 23)

	)

111 
	#I2C_CR1_ALERTEN
 (1 << 22)

	)

114 
	#I2C_CR1_SMBDEN
 (1 << 21)

	)

117 
	#I2C_CR1_SMBHEN
 (1 << 20)

	)

120 
	#I2C_CR1_GCEN
 (1 << 19)

	)

123 
	#I2C_CR1_WUPEN
 (1 << 18)

	)

126 
	#I2C_CR1_NOSTRETCH
 (1 << 17)

	)

129 
	#I2C_CR1_SBC
 (1 << 16)

	)

132 
	#I2C_CR1_RXDMAEN
 (1 << 15)

	)

135 
	#I2C_CR1_TXDMAEN
 (1 << 14)

	)

138 
	#I2C_CR1_ANFOFF
 (1 << 12)

	)

141 
	#I2C_CR1_DNF_MASK
 0xF

	)

142 
	#I2C_CR1_DNF_SHIFT
 8

	)

145 
	#I2C_CR1_ERRIE
 (1 << 7)

	)

148 
	#I2C_CR1_TCIE
 (1 << 6)

	)

151 
	#I2C_CR1_STOPIE
 (1 << 5)

	)

154 
	#I2C_CR1_NACKIE
 (1 << 4)

	)

157 
	#I2C_CR1_ADDRIE
 (1 << 3)

	)

160 
	#I2C_CR1_RXIE
 (1 << 2)

	)

163 
	#I2C_CR1_TXIE
 (1 << 1)

	)

166 
	#I2C_CR1_PE
 (1 << 0)

	)

171 
	#I2C_CR2_PECBYTE
 (1 << 26)

	)

174 
	#I2C_CR2_AUTOEND
 (1 << 25)

	)

177 
	#I2C_CR2_RELOAD
 (1 << 24)

	)

180 
	#I2C_CR2_NBYTES_SHIFT
 16

	)

181 
	#I2C_CR2_NBYTES_MASK
 (0xFF << 
I2C_CR2_NBYTES_SHIFT
)

	)

184 
	#I2C_CR2_NACK
 (1 << 15)

	)

187 
	#I2C_CR2_STOP
 (1 << 14)

	)

190 
	#I2C_CR2_START
 (1 << 13)

	)

193 
	#I2C_CR2_HEAD10R
 (1 << 12)

	)

196 
	#I2C_CR2_ADD10
 (1 << 11)

	)

199 
	#I2C_CR2_RD_WRN
 (1 << 10)

	)

201 
	#I2C_CR2_SADD_7BIT_SHIFT
 1

	)

202 
	#I2C_CR2_SADD_10BIT_SHIFT
 0

	)

203 
	#I2C_CR2_SADD_7BIT_MASK
 (0x7F << 
I2C_CR2_SADD_7BIT_SHIFT
)

	)

204 
	#I2C_CR2_SADD_10BIT_MASK
 0x3FF

	)

209 
	#I2C_OAR1_OA1EN_DISABLE
 (0x0 << 15)

	)

210 
	#I2C_OAR1_OA1EN_ENABLE
 (0x1 << 15)

	)

213 
	#I2C_OAR1_OA1MODE
 (1 << 10)

	)

214 
	#I2C_OAR1_OA1MODE_7BIT
 0

	)

215 
	#I2C_OAR1_OA1MODE_10BIT
 1

	)

222 
	#I2C_OAR1_OA1
 (1 << 10)

	)

223 
	#I2C_OAR1_OA1_7BIT
 0

	)

224 
	#I2C_OAR1_OA1_10BIT
 1

	)

229 
	#I2C_OAR2_OA2EN
 (1 << 15)

	)

232 
	#I2C_OAR2_OA2MSK_NO_MASK
 (0x0 << 8)

	)

233 
	#I2C_OAR2_OA2MSK_OA2_7_OA2_2
 (0x1 << 8)

	)

234 
	#I2C_OAR2_OA2MSK_OA2_7_OA2_3
 (0x2 << 8)

	)

235 
	#I2C_OAR2_OA2MSK_OA2_7_OA2_4
 (0x3 << 8)

	)

236 
	#I2C_OAR2_OA2MSK_OA2_7_OA2_5
 (0x4 << 8)

	)

237 
	#I2C_OAR2_OA2MSK_OA2_7_OA2_6
 (0x5 << 8)

	)

238 
	#I2C_OAR2_OA2MSK_OA2_7
 (0x6 << 8)

	)

239 
	#I2C_OAR2_OA2MSK_NO_CMP
 (0x7 << 8)

	)

246 
	#I2C_TIMINGR_PRESC_SHIFT
 28

	)

247 
	#I2C_TIMINGR_PRESC_MASK
 (0xF << 28)

	)

250 
	#I2C_TIMINGR_SCLDEL_SHIFT
 20

	)

251 
	#I2C_TIMINGR_SCLDEL_MASK
 (0xF << 
I2C_TIMINGR_SCLDEL_SHIFT
)

	)

254 
	#I2C_TIMINGR_SDADEL_SHIFT
 16

	)

255 
	#I2C_TIMINGR_SDADEL_MASK
 (0xF << 
I2C_TIMINGR_SDADEL_SHIFT
)

	)

258 
	#I2C_TIMINGR_SCLH_SHIFT
 8

	)

259 
	#I2C_TIMINGR_SCLH_MASK
 (0xFF << 
I2C_TIMINGR_SCLH_SHIFT
)

	)

262 
	#I2C_TIMINGR_SCLL_SHIFT
 0

	)

263 
	#I2C_TIMINGR_SCLL_MASK
 (0xFF << 
I2C_TIMINGR_SCLL_SHIFT
)

	)

268 
	#I2C_TIEMOUTR_TEXTEN
 (1 << 31)

	)

274 
	#I2C_TIEMOUTR_TIMOUTEN
 (1 << 15)

	)

277 
	#I2C_TIEMOUTR_TIDLE_SCL_LOW
 (0x0 << 12)

	)

278 
	#I2C_TIEMOUTR_TIDLE_SCL_SDA_HIGH
 (0x1 << 12)

	)

291 
	#I2C_ISR_DIR_READ
 (0x1 << 16)

	)

292 
	#I2C_ISR_DIR_WRITE
 (0x0 << 16)

	)

295 
	#I2C_ISR_BUSY
 (1 << 15)

	)

298 
	#I2C_ISR_ALERT
 (1 << 13)

	)

301 
	#I2C_ISR_TIMEOUT
 (1 << 12)

	)

304 
	#I2C_ISR_PECERR
 (1 << 11)

	)

307 
	#I2C_ISR_OVR
 (1 << 10)

	)

310 
	#I2C_ISR_ARLO
 (1 << 9)

	)

313 
	#I2C_ISR_BERR
 (1 << 8)

	)

316 
	#I2C_ISR_TCR
 (1 << 7)

	)

319 
	#I2C_ISR_TC
 (1 << 6)

	)

322 
	#I2C_ISR_STOPF
 (1 << 5)

	)

325 
	#I2C_ISR_NACKF
 (1 << 4)

	)

328 
	#I2C_ISR_ADDR
 (1 << 3)

	)

331 
	#I2C_ISR_RXNE
 (1 << 2)

	)

334 
	#I2C_ISR_TXIS
 (1 << 1)

	)

337 
	#I2C_ISR_TXE
 (1 << 0)

	)

342 
	#I2C_ICR_ALERTCF
 (1 << 13)

	)

345 
	#I2C_ICR_TIMOUTCF
 (1 << 12)

	)

348 
	#I2C_ICR_PECCF
 (1 << 11)

	)

351 
	#I2C_ICR_OVRCF
 (1 << 10)

	)

354 
	#I2C_ICR_ARLOCF
 (1 << 9)

	)

357 
	#I2C_ICR_BERRCF
 (1 << 8)

	)

360 
	#I2C_ICR_STOPCF
 (1 << 5)

	)

363 
	#I2C_ICR_NACKCF
 (1 << 4)

	)

366 
	#I2C_ICR_ADDRCF
 (1 << 3)

	)

377 
	ei2c_•ìds
 {

378 
	mi2c_•ìd_sm_100k
,

379 
	mi2c_•ìd_fm_400k
,

380 
	mi2c_•ìd_fmp_1m
,

381 
	mi2c_•ìd_unknown


384 
BEGIN_DECLS


386 
i2c_ª£t
(
uöt32_t
 
i2c
);

387 
i2c_≥rùhîÆ_íabÀ
(
uöt32_t
 
i2c
);

388 
i2c_≥rùhîÆ_dißbÀ
(
uöt32_t
 
i2c
);

389 
i2c_£nd_°¨t
(
uöt32_t
 
i2c
);

390 
i2c_£nd_°›
(
uöt32_t
 
i2c
);

391 
i2c_˛ór_°›
(
uöt32_t
 
i2c
);

392 
i2c_£t_own_7bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
);

393 
i2c_£t_own_10bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt16_t
 
¶ave
);

394 
i2c_£nd_d©a
(
uöt32_t
 
i2c
, 
uöt8_t
 
d©a
);

395 
uöt8_t
 
i2c_gë_d©a
(
uöt32_t
 
i2c
);

397 
i2c_íabÀ_™Æog_fûãr
(
uöt32_t
 
i2c
);

398 
i2c_dißbÀ_™Æog_fûãr
(
uöt32_t
 
i2c
);

399 
i2c_£t_digôÆ_fûãr
(
uöt32_t
 
i2c
, 
uöt8_t
 
dnf_£âög
);

400 
i2c_£t_¥esˇÀr
(
uöt32_t
 
i2c
, 
uöt8_t
 
¥esc
);

401 
i2c_£t_d©a_£tup_time
(
uöt32_t
 
i2c
, 
uöt8_t
 
s_time
);

402 
i2c_£t_d©a_hﬁd_time
(
uöt32_t
 
i2c
, 
uöt8_t
 
h_time
);

403 
i2c_£t_s˛_high_≥riod
(
uöt32_t
 
i2c
, 
uöt8_t
 
≥riod
);

404 
i2c_£t_s˛_low_≥riod
(
uöt32_t
 
i2c
, 
uöt8_t
 
≥riod
);

405 
i2c_íabÀ_°ªtchög
(
uöt32_t
 
i2c
);

406 
i2c_dißbÀ_°ªtchög
(
uöt32_t
 
i2c
);

407 
i2c_£t_7bô_addr_mode
(
uöt32_t
 
i2c
);

408 
i2c_£t_10bô_addr_mode
(
uöt32_t
 
i2c
);

409 
i2c_£t_7bô_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
addr
);

410 
i2c_£t_10bô_addªss
(
uöt32_t
 
i2c
, 
uöt16_t
 
addr
);

411 
i2c_£t_wrôe_å™s„r_dú
(
uöt32_t
 
i2c
);

412 
i2c_£t_ªad_å™s„r_dú
(
uöt32_t
 
i2c
);

413 
i2c_£t_byãs_to_å™s„r
(
uöt32_t
 
i2c
, uöt32_à
n_byãs
);

414 
boﬁ
 
i2c_is_°¨t
(
uöt32_t
 
i2c
);

415 
i2c_íabÀ_aut€nd
(
uöt32_t
 
i2c
);

416 
i2c_dißbÀ_aut€nd
(
uöt32_t
 
i2c
);

417 
boﬁ
 
i2c_«ck
(
uöt32_t
 
i2c
);

418 
boﬁ
 
i2c_busy
(
uöt32_t
 
i2c
);

419 
boﬁ
 
i2c_å™smô_öt_°©us
(
uöt32_t
 
i2c
);

420 
boﬁ
 
i2c_å™s„r_com∂ëe
(
uöt32_t
 
i2c
);

421 
boﬁ
 
i2c_ª˚ived_d©a
(
uöt32_t
 
i2c
);

422 
i2c_íabÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
);

423 
i2c_dißbÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
);

424 
i2c_íabÀ_rxdma
(
uöt32_t
 
i2c
);

425 
i2c_dißbÀ_rxdma
(
uöt32_t
 
i2c
);

426 
i2c_íabÀ_txdma
(
uöt32_t
 
i2c
);

427 
i2c_dißbÀ_txdma
(
uöt32_t
 
i2c
);

428 
i2c_å™s„r7
(
uöt32_t
 
i2c
, 
uöt8_t
 
addr
, uöt8_à*
w
, 
size_t
 
wn
, uöt8_à*
r
, size_à
∫
);

429 
i2c_£t_•ìd
(
uöt32_t
 
i2c
, 
i2c_•ìds
 
•ìd
, uöt32_à
˛ock_megahz
);

431 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/iwdg_common_all.h

30 #ifde‡
LIBOPENCM3_IWDG_H


32 #i‚de‡
LIBOPENCM3_IWDG_COMMON_ALL_H


33 
	#LIBOPENCM3_IWDG_COMMON_ALL_H


	)

40 
	#IWDG_KR
 
	`MMIO32
(
IWDG_BASE
 + 0x00)

	)

43 
	#IWDG_PR
 
	`MMIO32
(
IWDG_BASE
 + 0x04)

	)

46 
	#IWDG_RLR
 
	`MMIO32
(
IWDG_BASE
 + 0x08)

	)

49 
	#IWDG_SR
 
	`MMIO32
(
IWDG_BASE
 + 0x0c)

	)

60 
	#IWDG_KR_RESET
 0xØØ

	)

61 
	#IWDG_KR_UNLOCK
 0x5555

	)

62 
	#IWDG_KR_START
 0xcccc

	)

70 
	#IWDG_PR_LSB
 0

	)

75 
	#IWDG_PR_DIV4
 0x0

	)

76 
	#IWDG_PR_DIV8
 0x1

	)

77 
	#IWDG_PR_DIV16
 0x2

	)

78 
	#IWDG_PR_DIV32
 0x3

	)

79 
	#IWDG_PR_DIV64
 0x4

	)

80 
	#IWDG_PR_DIV128
 0x5

	)

81 
	#IWDG_PR_DIV256
 0x6

	)

96 
	#IWDG_SR_RVU
 (1 << 1)

	)

99 
	#IWDG_SR_PVU
 (1 << 0)

	)

104 
BEGIN_DECLS


106 
iwdg_°¨t
();

107 
iwdg_£t_≥riod_ms
(
uöt32_t
 
≥riod
);

108 
boﬁ
 
iwdg_ªlﬂd_busy
();

109 
boﬁ
 
iwdg_¥esˇÀr_busy
();

110 
iwdg_ª£t
();

112 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/iwdg_common_v2.h

31 #ifde‡
LIBOPENCM3_IWDG_H


33 #¥agm®
⁄˚


37 
	~<lib›ícm3/°m32/comm⁄/iwdg_comm⁄_Æl.h
>

48 
	#IWDG_WINR
 
	`MMIO32
(
IWDG_BASE
 + 0x10)

	)

57 
	#IWDG_SR_WVU
 (1 << 2)

	)

69 
BEGIN_DECLS


71 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/pwr_common_v1.h

31 #ifde‡
LIBOPENCM3_PWR_H


33 #i‚de‡
LIBOPENCM3_PWR_COMMON_V1_H


34 
	#LIBOPENCM3_PWR_COMMON_V1_H


	)

41 
	#PWR_CR
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x00)

	)

44 
	#PWR_CSR
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x04)

	)

51 
	#PWR_CR_DBP
 (1 << 8)

	)

54 
	#PWR_CR_PLS_LSB
 5

	)

59 
	#PWR_CR_PLS_2V2
 (0x0 << 
PWR_CR_PLS_LSB
)

	)

60 
	#PWR_CR_PLS_2V3
 (0x1 << 
PWR_CR_PLS_LSB
)

	)

61 
	#PWR_CR_PLS_2V4
 (0x2 << 
PWR_CR_PLS_LSB
)

	)

62 
	#PWR_CR_PLS_2V5
 (0x3 << 
PWR_CR_PLS_LSB
)

	)

63 
	#PWR_CR_PLS_2V6
 (0x4 << 
PWR_CR_PLS_LSB
)

	)

64 
	#PWR_CR_PLS_2V7
 (0x5 << 
PWR_CR_PLS_LSB
)

	)

65 
	#PWR_CR_PLS_2V8
 (0x6 << 
PWR_CR_PLS_LSB
)

	)

66 
	#PWR_CR_PLS_2V9
 (0x7 << 
PWR_CR_PLS_LSB
)

	)

68 
	#PWR_CR_PLS_MASK
 (0x7 << 
PWR_CR_PLS_LSB
)

	)

71 
	#PWR_CR_PVDE
 (1 << 4)

	)

74 
	#PWR_CR_CSBF
 (1 << 3)

	)

77 
	#PWR_CR_CWUF
 (1 << 2)

	)

80 
	#PWR_CR_PDDS
 (1 << 1)

	)

83 
	#PWR_CR_LPDS
 (1 << 0)

	)

90 
	#PWR_CSR_EWUP
 (1 << 8)

	)

95 
	#PWR_CSR_PVDO
 (1 << 2)

	)

98 
	#PWR_CSR_SBF
 (1 << 1)

	)

101 
	#PWR_CSR_WUF
 (1 << 0)

	)

105 
BEGIN_DECLS


107 
pwr_dißbÀ_backup_domaö_wrôe_¥Ÿe˘
();

108 
pwr_íabÀ_backup_domaö_wrôe_¥Ÿe˘
();

109 
pwr_íabÀ_powî_vﬁège_dëe˘
(
uöt32_t
 
pvd_Àvñ
);

110 
pwr_dißbÀ_powî_vﬁège_dëe˘
();

111 
pwr_˛ór_°™dby_Êag
();

112 
pwr_˛ór_wakeup_Êag
();

113 
pwr_£t_°™dby_mode
();

114 
pwr_£t_°›_mode
();

115 
pwr_vﬁège_ªguœt‹_⁄_ö_°›
();

116 
pwr_vﬁège_ªguœt‹_low_powî_ö_°›
();

117 
pwr_íabÀ_wakeup_pö
();

118 
pwr_dißbÀ_wakeup_pö
();

119 
boﬁ
 
pwr_vﬁège_high
();

120 
boﬁ
 
pwr_gë_°™dby_Êag
();

121 
boﬁ
 
pwr_gë_wakeup_Êag
();

123 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/pwr_common_v2.h

26 #i‚de‡
LIBOPENCM3_PWR_COMMON_V2_H


27 
	#LIBOPENCM3_PWR_COMMON_V2_H


	)

29 
	~<lib›ícm3/°m32/comm⁄/pwr_comm⁄_v1.h
>

36 
	#PWR_CR_LPRUN
 (1 << 14)

	)

39 
	#PWR_CR_VOS_LSB
 11

	)

44 
	#PWR_CR_VOS_RANGE1
 (0x1 << 
PWR_CR_VOS_LSB
)

	)

45 
	#PWR_CR_VOS_RANGE2
 (0x2 << 
PWR_CR_VOS_LSB
)

	)

46 
	#PWR_CR_VOS_RANGE3
 (0x3 << 
PWR_CR_VOS_LSB
)

	)

48 
	#PWR_CR_VOS_MASK
 (0x3 << 
PWR_CR_VOS_LSB
)

	)

51 
	#PWR_CR_FWU
 (1 << 10)

	)

54 
	#PWR_CR_ULP
 (1 << 9)

	)

57 
	#PWR_CR_LPSDSR
 (1 << 0Ë

	)

62 
	#PWR_CSR_EWUP2
 (1 << 9)

	)

65 
	#PWR_CSR_EWUP1
 
PWR_CSR_EWUP


	)

68 
	#PWR_CSR_REGLPF
 (1 << 5)

	)

71 
	#PWR_CSR_VOSF
 (1 << 4)

	)

74 
	#PWR_CSR_VREFINTRDYF
 (1 << 3)

	)

82 
	epwr_vos_sˇÀ
 {

84 
	mPWR_SCALE1
,

86 
	mPWR_SCALE2
,

88 
	mPWR_SCALE3
,

91 
BEGIN_DECLS


93 
pwr_£t_vos_sˇÀ
(
pwr_vos_sˇÀ
 
sˇÀ
);

95 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/rcc_common_all.h

31 #ifde‡
LIBOPENCM3_RCC_H


34 #i‚de‡
LIBOPENCM3_RCC_COMMON_ALL_H


35 
	#LIBOPENCM3_RCC_COMMON_ALL_H


	)

39 
BEGIN_DECLS


41 
rcc_≥rùhîÆ_íabÀ_˛ock
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
í
);

42 
rcc_≥rùhîÆ_dißbÀ_˛ock
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
í
);

43 
rcc_≥rùhîÆ_ª£t
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
ª£t
);

44 
rcc_≥rùhîÆ_˛ór_ª£t
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
˛ór_ª£t
);

46 
rcc_≥rùh_˛ock_íabÀ
(
rcc_≥rùh_˛kí
 
˛kí
);

47 
rcc_≥rùh_˛ock_dißbÀ
(
rcc_≥rùh_˛kí
 
˛kí
);

48 
rcc_≥rùh_ª£t_pul£
(
rcc_≥rùh_r°
 
r°
);

49 
rcc_≥rùh_ª£t_hﬁd
(
rcc_≥rùh_r°
 
r°
);

50 
rcc_≥rùh_ª£t_ªÀa£
(
rcc_≥rùh_r°
 
r°
);

52 
rcc_£t_mco
(
uöt32_t
 
mco§c
);

53 
rcc_osc_by∑ss_íabÀ
(
rcc_osc
 
osc
);

54 
rcc_osc_by∑ss_dißbÀ
(
rcc_osc
 
osc
);

61 
boﬁ
 
rcc_is_osc_ªady
(
rcc_osc
 
osc
);

68 
rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
);

70 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/rng_common_v1.h

26 #ifde‡
LIBOPENCM3_RNG_H


28 #i‚de‡
LIBOPENCM3_RNG_V1_H


29 
	#LIBOPENCM3_RNG_V1_H


	)

31 
	~<°dboﬁ.h
>

32 
	~<°döt.h
>

39 
	#RNG_CR
 
	`MMIO32
(
RNG_BASE
 + 0x00)

	)

42 
	#RNG_SR
 
	`MMIO32
(
RNG_BASE
 + 0x04)

	)

45 
	#RNG_DR
 
	`MMIO32
(
RNG_BASE
 + 0x08)

	)

50 
	#RNG_CR_RNGEN
 (1 << 2)

	)

53 
	#RNG_CR_IE
 (1 << 3)

	)

58 
	#RNG_SR_DRDY
 (1 << 0)

	)

61 
	#RNG_SR_CECS
 (1 << 1)

	)

64 
	#RNG_SR_SECS
 (1 << 2)

	)

67 
	#RNG_SR_CEIS
 (1 << 5)

	)

70 
	#RNG_SR_SEIS
 (1 << 6)

	)

74 
BEGIN_DECLS


76 
∫g_íabÀ
();

77 
∫g_dißbÀ
();

78 
boﬁ
 
∫g_gë_øndom
(
uöt32_t
 *
ønd_ƒ
);

79 
uöt32_t
 
∫g_gë_øndom_blockög
();

81 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/rtc_common_l1f024.h

38 #ifde‡
LIBOPENCM3_RTC_H


40 #i‚de‡
LIBOPENCM3_RTC2_H


41 
	#LIBOPENCM3_RTC2_H


	)

46 
	#RTC_TR
 
	`MMIO32
(
RTC_BASE
 + 0x00)

	)

49 
	#RTC_DR
 
	`MMIO32
(
RTC_BASE
 + 0x04)

	)

52 
	#RTC_CR
 
	`MMIO32
(
RTC_BASE
 + 0x08)

	)

55 
	#RTC_ISR
 
	`MMIO32
(
RTC_BASE
 + 0x0c)

	)

58 
	#RTC_PRER
 
	`MMIO32
(
RTC_BASE
 + 0x10)

	)

61 
	#RTC_WUTR
 
	`MMIO32
(
RTC_BASE
 + 0x14)

	)

64 
	#RTC_CALIBR
 
	`MMIO32
(
RTC_BASE
 + 0x18)

	)

67 
	#RTC_ALRMAR
 
	`MMIO32
(
RTC_BASE
 + 0x1c)

	)

68 
	#RTC_ALRMBR
 
	`MMIO32
(
RTC_BASE
 + 0x20)

	)

71 
	#RTC_WPR
 
	`MMIO32
(
RTC_BASE
 + 0x24)

	)

74 
	#RTC_SSR
 
	`MMIO32
(
RTC_BASE
 + 0x28)

	)

77 
	#RTC_SHIFTR
 
	`MMIO32
(
RTC_BASE
 + 0x2c)

	)

80 
	#RTC_TSTR
 
	`MMIO32
(
RTC_BASE
 + 0x30)

	)

82 
	#RTC_TSDR
 
	`MMIO32
(
RTC_BASE
 + 0x34)

	)

84 
	#RTC_TSSSR
 
	`MMIO32
(
RTC_BASE
 + 0x38)

	)

87 
	#RTC_CALR
 
	`MMIO32
(
RTC_BASE
 + 0x3c)

	)

90 
	#RTC_TAFCR
 
	`MMIO32
(
RTC_BASE
 + 0x40)

	)

93 
	#RTC_ALRMASSR
 
	`MMIO32
(
RTC_BASE
 + 0x44)

	)

94 
	#RTC_ALRMBSSR
 
	`MMIO32
(
RTC_BASE
 + 0x48)

	)

97 
	#RTC_BKP_BASE
 (
RTC_BASE
 + 0x50)

	)

98 
	#RTC_BKPXR
(
ªg
Ë
	`MMIO32
(
RTC_BKP_BASE
 + (4 * (ªg)))

	)

104 
	#RTC_TR_PM
 (1 << 22Ë

	)

105 
	#RTC_TR_HT_SHIFT
 (20Ë

	)

106 
	#RTC_TR_HT_MASK
 (0x3Ë

	)

107 
	#RTC_TR_HU_SHIFT
 (16Ë

	)

108 
	#RTC_TR_HU_MASK
 (0xfË

	)

109 
	#RTC_TR_MNT_SHIFT
 (12Ë

	)

110 
	#RTC_TR_MNT_MASK
 (0x7Ë

	)

111 
	#RTC_TR_MNU_SHIFT
 (8Ë

	)

112 
	#RTC_TR_MNU_MASK
 (0xfË

	)

113 
	#RTC_TR_ST_SHIFT
 (4Ë

	)

114 
	#RTC_TR_ST_MASK
 (0x7Ë

	)

115 
	#RTC_TR_SU_SHIFT
 (0Ë

	)

116 
	#RTC_TR_SU_MASK
 (0xfË

	)

121 
	#RTC_DR_YT_SHIFT
 (20Ë

	)

122 
	#RTC_DR_YT_MASK
 (0xfË

	)

123 
	#RTC_DR_YU_SHIFT
 (16Ë

	)

124 
	#RTC_DR_YU_MASK
 (0xfË

	)

125 
	#RTC_DR_WDU_SHIFT
 (13Ë

	)

126 
	#RTC_DR_WDU_MASK
 (0x7Ë

	)

127 
	#RTC_DR_MT
 (1<<12Ë

	)

128 
	#RTC_DR_MT_SHIFT
 (12Ë

	)

129 
	#RTC_DR_MU_SHIFT
 (8Ë

	)

130 
	#RTC_DR_MU_MASK
 (0xfË

	)

131 
	#RTC_DR_DT_SHIFT
 (4Ë

	)

132 
	#RTC_DR_DT_MASK
 (0x3Ë

	)

133 
	#RTC_DR_DU_SHIFT
 (0Ë

	)

134 
	#RTC_DR_DU_MASK
 (0xfË

	)

144 
	#RTC_CR_COE
 (1<<23Ë

	)

150 
	#RTC_CR_OSEL_SHIFT
 21

	)

151 
	#RTC_CR_OSEL_MASK
 (0x3)

	)

152 
	#RTC_CR_OSEL_DISABLED
 (0x0)

	)

153 
	#RTC_CR_OSEL_ALARMA
 (0x1)

	)

154 
	#RTC_CR_OSEL_ALARMB
 (0x2)

	)

155 
	#RTC_CR_OSEL_WAKEUP
 (0x3)

	)

157 
	#RTC_CR_POL
 (1<<20Ë

	)

158 
	#RTC_CR_COSEL
 (1<<19Ë

	)

160 
	#RTC_CR_BKP
 (1<<18Ë

	)

161 
	#RTC_CR_SUB1H
 (1<<17Ë

	)

163 
	#RTC_CR_ADD1H
 (1<<16Ë

	)

165 
	#RTC_CR_TSIE
 (1<<15Ë

	)

167 
	#RTC_CR_WUTIE
 (1<<14Ë

	)

169 
	#RTC_CR_ALRBIE
 (1<<13Ë

	)

171 
	#RTC_CR_ALRAIE
 (1<<12Ë

	)

173 
	#RTC_CR_TSE
 (1<<11Ë

	)

174 
	#RTC_CR_WUTE
 (1<<10Ë

	)

175 
	#RTC_CR_ALRBE
 (1<<9Ë

	)

176 
	#RTC_CR_ALRAE
 (1<<8Ë

	)

177 
	#RTC_CR_DCE
 (1<<7Ë

	)

179 
	#RTC_CR_FMT
 (1<<6Ë

	)

180 
	#RTC_CR_BYPSHAD
 (1<<5Ë

	)

182 
	#RTC_CR_REFCKON
 (1<<4Ë

	)

184 
	#RTC_CR_TSEDGE
 (1<<3Ë

	)

188 
	#RTC_CR_WUCLKSEL_SHIFT
 (0)

	)

189 
	#RTC_CR_WUCLKSEL_MASK
 (0x7)

	)

190 
	#RTC_CR_WUCLKSEL_RTC_DIV16
 (0x0)

	)

191 
	#RTC_CR_WUCLKSEL_RTC_DIV8
 (0x1)

	)

192 
	#RTC_CR_WUCLKSEL_RTC_DIV4
 (0x2)

	)

193 
	#RTC_CR_WUCLKSEL_RTC_DIV2
 (0x3)

	)

194 
	#RTC_CR_WUCLKSEL_SPRE
 (0x4)

	)

195 
	#RTC_CR_WUCLKSEL_SPRE_216
 (0x6)

	)

200 
	#RTC_ISR_RECALPF
 (1<<16Ë

	)

201 
	#RTC_ISR_TAMP3F
 (1<<15Ë

	)

203 
	#RTC_ISR_TAMP2F
 (1<<14Ë

	)

204 
	#RTC_ISR_TAMP1F
 (1<<13Ë

	)

205 
	#RTC_ISR_TSOVF
 (1<<12Ë

	)

206 
	#RTC_ISR_TSF
 (1<<11Ë

	)

207 
	#RTC_ISR_WUTF
 (1<<10Ë

	)

208 
	#RTC_ISR_ALRBF
 (1<<9Ë

	)

209 
	#RTC_ISR_ALRAF
 (1<<8Ë

	)

210 
	#RTC_ISR_INIT
 (1<<7Ë

	)

211 
	#RTC_ISR_INITF
 (1<<6Ë

	)

212 
	#RTC_ISR_RSF
 (1<<5Ë

	)

213 
	#RTC_ISR_INITS
 (1<<4Ë

	)

214 
	#RTC_ISR_SHPF
 (1<<3Ë

	)

215 
	#RTC_ISR_WUTWF
 (1<<2Ë

	)

216 
	#RTC_ISR_ALRBWF
 (1<<1Ë

	)

217 
	#RTC_ISR_ALRAWF
 (1<<0Ë

	)

220 
	#RTC_PRER_PREDIV_A_SHIFT
 (16Ë

	)

221 
	#RTC_PRER_PREDIV_A_MASK
 (0x7fË

	)

222 
	#RTC_PRER_PREDIV_S_SHIFT
 (0Ë

	)

223 
	#RTC_PRER_PREDIV_S_MASK
 (0x7fffË

	)

230 
	#RTC_ALRMXR_MSK4
 (1<<31)

	)

231 
	#RTC_ALRMXR_WDSEL
 (1<<30)

	)

232 
	#RTC_ALRMXR_DT_SHIFT
 (28)

	)

233 
	#RTC_ALRMXR_DT_MASK
 (0x3)

	)

234 
	#RTC_ALRMXR_DU_SHIFT
 (24)

	)

235 
	#RTC_ALRMXR_DU_MASK
 (0xf)

	)

236 
	#RTC_ALRMXR_MSK3
 (1<<23)

	)

237 
	#RTC_ALRMXR_PM
 (1<<22)

	)

238 
	#RTC_ALRMXR_HT_SHIFT
 (20)

	)

239 
	#RTC_ALRMXR_HT_MASK
 (0x3)

	)

240 
	#RTC_ALRMXR_HU_SHIFT
 (16)

	)

241 
	#RTC_ALRMXR_HU_MASK
 (0xf)

	)

242 
	#RTC_ALRMXR_MSK2
 (1<<15)

	)

243 
	#RTC_ALRMXR_MNT_SHIFT
 (12)

	)

244 
	#RTC_ALRMXR_MNT_MASK
 (0x7)

	)

245 
	#RTC_ALRMXR_MNU_SHIFT
 (8)

	)

246 
	#RTC_ALRMXR_MNU_MASK
 (0xf)

	)

247 
	#RTC_ALRMXR_MSK1
 (1<<7)

	)

248 
	#RTC_ALRMXR_ST_SHIFT
 (4)

	)

249 
	#RTC_ALRMXR_ST_MASK
 (0x7)

	)

250 
	#RTC_ALRMXR_SU_SHIFT
 (0)

	)

251 
	#RTC_ALRMXR_SU_MASK
 (0xf)

	)

257 
	#RTC_TSTR_PM
 (1<<22)

	)

258 
	#RTC_TSTR_HT_SHIFT
 (20)

	)

259 
	#RTC_TSTR_HT_MASK
 (0x3)

	)

260 
	#RTC_TSTR_HU_SHIFT
 (16)

	)

261 
	#RTC_TSTR_HU_MASK
 (0xf)

	)

262 
	#RTC_TSTR_MNT_SHIFT
 (12)

	)

263 
	#RTC_TSTR_MNT_MASK
 (0x7)

	)

264 
	#RTC_TSTR_MNU_SHIFT
 (8)

	)

265 
	#RTC_TSTR_MNU_MASK
 (0xf)

	)

266 
	#RTC_TSTR_ST_SHIFT
 (4)

	)

267 
	#RTC_TSTR_ST_MASK
 (0x7)

	)

268 
	#RTC_TSTR_SU_SHIFT
 (0)

	)

269 
	#RTC_TSTR_SU_MASK
 (0xf)

	)

272 
	#RTC_TSDR_WDU_SHIFT
 (13)

	)

273 
	#RTC_TSDR_WDU_MASK
 (0x7)

	)

274 
	#RTC_TSDR_MT
 (1<<12)

	)

275 
	#RTC_TSDR_MU_SHIFT
 (8)

	)

276 
	#RTC_TSDR_MU_MASK
 (0xf)

	)

277 
	#RTC_TSDR_DT_SHIFT
 (4)

	)

278 
	#RTC_TSDR_DT_MASK
 (0x3)

	)

279 
	#RTC_TSDR_DU_SHIFT
 (0)

	)

280 
	#RTC_TSDR_DU_MASK
 (0xf)

	)

286 
	#RTC_TAFCR_ALARMOUTTYPE
 (1<<18)

	)

287 
	#RTC_TAFCR_TAMPPUDIS
 (1<<15)

	)

289 
	#RTC_TAFCR_TAMPPRCH_SHIFT
 (13)

	)

290 
	#RTC_TAFCR_TAMPPRCH_MASK
 (0x3)

	)

291 
	#RTC_TAFCR_TAMPPRCH_1RTC
 (0x0)

	)

292 
	#RTC_TAFCR_TAMPPRCH_2RTC
 (0x1)

	)

293 
	#RTC_TAFCR_TAMPPRCH_4RTC
 (0x2)

	)

294 
	#RTC_TAFCR_TAMPPRCH_8RTC
 (0x3)

	)

296 
	#RTC_TAFCR_TAMPFLT_SHIFT
 (11)

	)

297 
	#RTC_TAFCR_TAMPFLT_MASK
 (0x3)

	)

298 
	#RTC_TAFCR_TAMPFLT_EDGE1
 (0x0)

	)

299 
	#RTC_TAFCR_TAMPFLT_EDGE2
 (0x1)

	)

300 
	#RTC_TAFCR_TAMPFLT_EDGE4
 (0x2)

	)

301 
	#RTC_TAFCR_TAMPFLT_EDGE8
 (0x3)

	)

303 
	#RTC_TAFCR_TAMPFREQ_SHIFT
 (8)

	)

304 
	#RTC_TAFCR_TAMPFREQ_MASK
 (0x7)

	)

305 
	#RTC_TAFCR_TAMPFREQ_RTCDIV32K
 (0x0)

	)

306 
	#RTC_TAFCR_TAMPFREQ_RTCDIV16K
 (0x1)

	)

307 
	#RTC_TAFCR_TAMPFREQ_RTCDIV8K
 (0x2)

	)

308 
	#RTC_TAFCR_TAMPFREQ_RTCDIV4K
 (0x3)

	)

309 
	#RTC_TAFCR_TAMPFREQ_RTCDIV2K
 (0x4)

	)

310 
	#RTC_TAFCR_TAMPFREQ_RTCDIV1K
 (0x5)

	)

311 
	#RTC_TAFCR_TAMPFREQ_RTCDIV512
 (0x6)

	)

312 
	#RTC_TAFCR_TAMPFREQ_RTCDIV256
 (0x7)

	)

314 
	#RTC_TAFCR_TAMPTS
 (1<<7)

	)

315 
	#RTC_TAFCR_TAMP3TRG
 (1<<6)

	)

316 
	#RTC_TAFCR_TAMP3E
 (1<<5)

	)

317 
	#RTC_TAFCR_TAMP2TRG
 (1<<4)

	)

318 
	#RTC_TAFCR_TAMP2E
 (1<<3)

	)

319 
	#RTC_TAFCR_TAMPIE
 (1<<2)

	)

320 
	#RTC_TAFCR_TAMP1TRG
 (1<<1)

	)

321 
	#RTC_TAFCR_TAMP1E
 (1<<0)

	)

328 
BEGIN_DECLS


330 
πc_£t_¥esˇÀr
(
uöt32_t
 
sync
, uöt32_à
async
);

331 
πc_waô_f‹_synchro
();

332 
πc_lock
();

333 
πc_u∆ock
();

334 
πc_£t_wakeup_time
(
uöt16_t
 
wkup_time
, 
uöt8_t
 
πc_¸_wuck£l
);

335 
πc_˛ór_wakeup_Êag
();

337 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/spi_common_all.h

30 #i‡
deföed
(
LIBOPENCM3_SPI_H
)

32 #i‚de‡
LIBOPENCM3_SPI_COMMON_ALL_H


33 
	#LIBOPENCM3_SPI_COMMON_ALL_H


	)

46 
	#SPI1
 
SPI1_BASE


	)

47 
	#SPI2
 
SPI2_BASE


	)

48 
	#SPI3
 
SPI3_BASE


	)

49 
	#SPI4
 
SPI4_BASE


	)

50 
	#SPI5
 
SPI5_BASE


	)

51 
	#SPI6
 
SPI6_BASE


	)

58 
	#SPI_CR1
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x00)

	)

59 
	#SPI1_CR1
 
	`SPI_CR1
(
SPI1_BASE
)

	)

60 
	#SPI2_CR1
 
	`SPI_CR1
(
SPI2_BASE
)

	)

61 
	#SPI3_CR1
 
	`SPI_CR1
(
SPI3_BASE
)

	)

64 
	#SPI_CR2
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x04)

	)

65 
	#SPI1_CR2
 
	`SPI_CR2
(
SPI1_BASE
)

	)

66 
	#SPI2_CR2
 
	`SPI_CR2
(
SPI2_BASE
)

	)

67 
	#SPI3_CR2
 
	`SPI_CR2
(
SPI3_BASE
)

	)

70 
	#SPI_SR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x08)

	)

71 
	#SPI1_SR
 
	`SPI_SR
(
SPI1_BASE
)

	)

72 
	#SPI2_SR
 
	`SPI_SR
(
SPI2_BASE
)

	)

73 
	#SPI3_SR
 
	`SPI_SR
(
SPI3_BASE
)

	)

76 
	#SPI_DR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x0c)

	)

77 
	#SPI1_DR
 
	`SPI_DR
(
SPI1_BASE
)

	)

78 
	#SPI2_DR
 
	`SPI_DR
(
SPI2_BASE
)

	)

79 
	#SPI3_DR
 
	`SPI_DR
(
SPI3_BASE
)

	)

83 
	#SPI_CRCPR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x10)

	)

84 
	#SPI1_CRCPR
 
	`SPI_CRCPR
(
SPI1_BASE
)

	)

85 
	#SPI2_CRCPR
 
	`SPI_CRCPR
(
SPI2_BASE
)

	)

86 
	#SPI3_CRCPR
 
	`SPI_CRCPR
(
SPI3_BASE
)

	)

90 
	#SPI_RXCRCR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x14)

	)

91 
	#SPI1_RXCRCR
 
	`SPI_RXCRCR
(
SPI1_BASE
)

	)

92 
	#SPI2_RXCRCR
 
	`SPI_RXCRCR
(
SPI2_BASE
)

	)

93 
	#SPI3_RXCRCR
 
	`SPI_RXCRCR
(
SPI3_BASE
)

	)

97 
	#SPI_TXCRCR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x18)

	)

98 
	#SPI1_TXCRCR
 
	`SPI_TXCRCR
(
SPI1_BASE
)

	)

99 
	#SPI2_TXCRCR
 
	`SPI_TXCRCR
(
SPI2_BASE
)

	)

100 
	#SPI3_TXCRCR
 
	`SPI_TXCRCR
(
SPI3_BASE
)

	)

103 
	#SPI_I2SCFGR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x1c)

	)

104 
	#SPI1_I2SCFGR
 
	`SPI_I2SCFGR
(
SPI1_BASE
)

	)

105 
	#SPI2_I2SCFGR
 
	`SPI_I2SCFGR
(
SPI2_BASE
)

	)

106 
	#SPI3_I2SCFGR
 
	`SPI_I2SCFGR
(
SPI3_BASE
)

	)

109 
	#SPI_I2SPR
(
•i_ba£
Ë
	`MMIO32
((•i_ba£Ë+ 0x20)

	)

110 
	#SPI1_I2SPR
 
	`SPI_I2SPR
(
SPI1_BASE
)

	)

111 
	#SPI2_I2SPR
 
	`SPI_I2SPR
(
SPI2_BASE
)

	)

112 
	#SPI3_I2SPR
 
	`SPI_I2SPR
(
SPI3_BASE
)

	)

119 
	#SPI_CR1_BIDIMODE_2LINE_UNIDIR
 (0 << 15)

	)

120 
	#SPI_CR1_BIDIMODE_1LINE_BIDIR
 (1 << 15)

	)

121 
	#SPI_CR1_BIDIMODE
 (1 << 15)

	)

124 
	#SPI_CR1_BIDIOE
 (1 << 14)

	)

127 
	#SPI_CR1_CRCEN
 (1 << 13)

	)

130 
	#SPI_CR1_CRCNEXT
 (1 << 12)

	)

133 
	#SPI_CR1_RXONLY
 (1 << 10)

	)

136 
	#SPI_CR1_SSM
 (1 << 9)

	)

139 
	#SPI_CR1_SSI
 (1 << 8)

	)

147 
	#SPI_CR1_MSBFIRST
 (0 << 7)

	)

148 
	#SPI_CR1_LSBFIRST
 (1 << 7)

	)

152 
	#SPI_CR1_SPE
 (1 << 6)

	)

160 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_2
 (0x00 << 3)

	)

161 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_4
 (0x01 << 3)

	)

162 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_8
 (0x02 << 3)

	)

163 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_16
 (0x03 << 3)

	)

164 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_32
 (0x04 << 3)

	)

165 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_64
 (0x05 << 3)

	)

166 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_128
 (0x06 << 3)

	)

167 
	#SPI_CR1_BAUDRATE_FPCLK_DIV_256
 (0x07 << 3)

	)

174 
	#SPI_CR1_BR_FPCLK_DIV_2
 0x0

	)

175 
	#SPI_CR1_BR_FPCLK_DIV_4
 0x1

	)

176 
	#SPI_CR1_BR_FPCLK_DIV_8
 0x2

	)

177 
	#SPI_CR1_BR_FPCLK_DIV_16
 0x3

	)

178 
	#SPI_CR1_BR_FPCLK_DIV_32
 0x4

	)

179 
	#SPI_CR1_BR_FPCLK_DIV_64
 0x5

	)

180 
	#SPI_CR1_BR_FPCLK_DIV_128
 0x6

	)

181 
	#SPI_CR1_BR_FPCLK_DIV_256
 0x7

	)

185 
	#SPI_CR1_MSTR
 (1 << 2)

	)

193 
	#SPI_CR1_CPOL_CLK_TO_0_WHEN_IDLE
 (0 << 1)

	)

194 
	#SPI_CR1_CPOL_CLK_TO_1_WHEN_IDLE
 (1 << 1)

	)

196 
	#SPI_CR1_CPOL
 (1 << 1)

	)

204 
	#SPI_CR1_CPHA_CLK_TRANSITION_1
 (0 << 0)

	)

205 
	#SPI_CR1_CPHA_CLK_TRANSITION_2
 (1 << 0)

	)

207 
	#SPI_CR1_CPHA
 (1 << 0)

	)

214 
	#SPI_CR2_TXEIE
 (1 << 7)

	)

217 
	#SPI_CR2_RXNEIE
 (1 << 6)

	)

220 
	#SPI_CR2_ERRIE
 (1 << 5)

	)

226 
	#SPI_CR2_SSOE
 (1 << 2)

	)

229 
	#SPI_CR2_TXDMAEN
 (1 << 1)

	)

232 
	#SPI_CR2_RXDMAEN
 (1 << 0)

	)

239 
	#SPI_SR_BSY
 (1 << 7)

	)

242 
	#SPI_SR_OVR
 (1 << 6)

	)

246 
	#SPI_SR_MODF
 (1 << 5)

	)

250 
	#SPI_SR_CRCERR
 (1 << 4)

	)

254 
	#SPI_SR_UDR
 (1 << 3)

	)

258 
	#SPI_SR_CHSIDE
 (1 << 2)

	)

261 
	#SPI_SR_TXE
 (1 << 1)

	)

264 
	#SPI_SR_RXNE
 (1 << 0)

	)

292 
	#SPI_I2SCFGR_I2SMOD
 (1 << 11)

	)

295 
	#SPI_I2SCFGR_I2SE
 (1 << 10)

	)

298 
	#SPI_I2SCFGR_I2SCFG_LSB
 8

	)

299 
	#SPI_I2SCFGR_I2SCFG_SLAVE_TRANSMIT
 0x0

	)

300 
	#SPI_I2SCFGR_I2SCFG_SLAVE_RECEIVE
 0x1

	)

301 
	#SPI_I2SCFGR_I2SCFG_MASTER_TRANSMIT
 0x2

	)

302 
	#SPI_I2SCFGR_I2SCFG_MASTER_RECEIVE
 0x3

	)

305 
	#SPI_I2SCFGR_PCMSYNC
 (1 << 7)

	)

310 
	#SPI_I2SCFGR_I2SSTD_LSB
 4

	)

311 
	#SPI_I2SCFGR_I2SSTD_I2S_PHILIPS
 0x0

	)

312 
	#SPI_I2SCFGR_I2SSTD_MSB_JUSTIFIED
 0x1

	)

313 
	#SPI_I2SCFGR_I2SSTD_LSB_JUSTIFIED
 0x2

	)

314 
	#SPI_I2SCFGR_I2SSTD_PCM
 0x3

	)

317 
	#SPI_I2SCFGR_CKPOL
 (1 << 3)

	)

320 
	#SPI_I2SCFGR_DATLEN_LSB
 1

	)

321 
	#SPI_I2SCFGR_DATLEN_16BIT
 0x0

	)

322 
	#SPI_I2SCFGR_DATLEN_24BIT
 0x1

	)

323 
	#SPI_I2SCFGR_DATLEN_32BIT
 0x2

	)

326 
	#SPI_I2SCFGR_CHLEN
 (1 << 0)

	)

335 
	#SPI_I2SPR_MCKOE
 (1 << 9)

	)

338 
	#SPI_I2SPR_ODD
 (1 << 8)

	)

345 
BEGIN_DECLS


347 
•i_ª£t
(
uöt32_t
 
•i_≥rùhîÆ
);

348 
•i_íabÀ
(
uöt32_t
 
•i
);

349 
•i_dißbÀ
(
uöt32_t
 
•i
);

350 
uöt16_t
 
•i_˛ón_dißbÀ
(
uöt32_t
 
•i
);

351 
•i_wrôe
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a
);

352 
•i_£nd
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a
);

353 
uöt16_t
 
•i_ªad
(
uöt32_t
 
•i
);

354 
uöt16_t
 
•i_x„r
(
uöt32_t
 
•i
, uöt16_à
d©a
);

355 
•i_£t_bidúe˘i⁄Æ_mode
(
uöt32_t
 
•i
);

356 
•i_£t_unidúe˘i⁄Æ_mode
(
uöt32_t
 
•i
);

357 
•i_£t_bidúe˘i⁄Æ_ª˚ive_⁄ly_mode
(
uöt32_t
 
•i
);

358 
•i_£t_bidúe˘i⁄Æ_å™smô_⁄ly_mode
(
uöt32_t
 
•i
);

359 
•i_íabÀ_¸c
(
uöt32_t
 
•i
);

360 
•i_dißbÀ_¸c
(
uöt32_t
 
•i
);

361 
•i_£t_√xt_tx_‰om_buf„r
(
uöt32_t
 
•i
);

362 
•i_£t_√xt_tx_‰om_¸c
(
uöt32_t
 
•i
);

363 
•i_£t_fuŒ_du∂ex_mode
(
uöt32_t
 
•i
);

364 
•i_£t_ª˚ive_⁄ly_mode
(
uöt32_t
 
•i
);

365 
•i_dißbÀ_so·w¨e_¶ave_m™agemít
(
uöt32_t
 
•i
);

366 
•i_íabÀ_so·w¨e_¶ave_m™agemít
(
uöt32_t
 
•i
);

367 
•i_£t_nss_high
(
uöt32_t
 
•i
);

368 
•i_£t_nss_low
(
uöt32_t
 
•i
);

369 
•i_£nd_lsb_fú°
(
uöt32_t
 
•i
);

370 
•i_£nd_msb_fú°
(
uöt32_t
 
•i
);

371 
•i_£t_baudøã_¥esˇÀr
(
uöt32_t
 
•i
, 
uöt8_t
 
baudøã
);

372 
•i_£t_ma°î_mode
(
uöt32_t
 
•i
);

373 
•i_£t_¶ave_mode
(
uöt32_t
 
•i
);

374 
•i_£t_˛ock_pﬁ¨ôy_1
(
uöt32_t
 
•i
);

375 
•i_£t_˛ock_pﬁ¨ôy_0
(
uöt32_t
 
•i
);

376 
•i_£t_˛ock_pha£_1
(
uöt32_t
 
•i
);

377 
•i_£t_˛ock_pha£_0
(
uöt32_t
 
•i
);

378 
•i_íabÀ_tx_buf„r_em±y_öãºu±
(
uöt32_t
 
•i
);

379 
•i_dißbÀ_tx_buf„r_em±y_öãºu±
(
uöt32_t
 
•i
);

380 
•i_íabÀ_rx_buf„r_nŸ_em±y_öãºu±
(
uöt32_t
 
•i
);

381 
•i_dißbÀ_rx_buf„r_nŸ_em±y_öãºu±
(
uöt32_t
 
•i
);

382 
•i_íabÀ_îr‹_öãºu±
(
uöt32_t
 
•i
);

383 
•i_dißbÀ_îr‹_öãºu±
(
uöt32_t
 
•i
);

384 
•i_íabÀ_ss_ouçut
(
uöt32_t
 
•i
);

385 
•i_dißbÀ_ss_ouçut
(
uöt32_t
 
•i
);

386 
•i_íabÀ_tx_dma
(
uöt32_t
 
•i
);

387 
•i_dißbÀ_tx_dma
(
uöt32_t
 
•i
);

388 
•i_íabÀ_rx_dma
(
uöt32_t
 
•i
);

389 
•i_dißbÀ_rx_dma
(
uöt32_t
 
•i
);

390 
•i_£t_°™d¨d_mode
(
uöt32_t
 
•i
, 
uöt8_t
 
mode
);

392 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/spi_common_v1.h

30 #ifde‡
LIBOPENCM3_SPI_H


32 #¥agm®
⁄˚


36 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_Æl.h
>

45 
	#SPI_CR1_DFF_8BIT
 (0 << 11)

	)

46 
	#SPI_CR1_DFF_16BIT
 (1 << 11)

	)

50 
	#SPI_CR1_DFF
 (1 << 11)

	)

54 
BEGIN_DECLS


56 
•i_öô_ma°î
(
uöt32_t
 
•i
, uöt32_à
br
, uöt32_à
˝ﬁ
, uöt32_à
˝ha
,

57 
uöt32_t
 
dff
, uöt32_à
lsbfú°
);

58 
•i_£t_dff_8bô
(
uöt32_t
 
•i
);

59 
•i_£t_dff_16bô
(
uöt32_t
 
•i
);

61 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/spi_common_v1_frf.h

30 #ifde‡
LIBOPENCM3_SPI_H


32 #¥agm®
⁄˚


36 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_v1.h
>

42 
	#SPI_CR2_FRF
 (1 << 4)

	)

43 
	#SPI_CR2_FRF_MOTOROLA_MODE
 (0 << 4)

	)

44 
	#SPI_CR2_FRF_TI_MODE
 (1 << 4)

	)

49 
	#SPI_SR_TIFRFE
 (1 << 8)

50 
	#SPI_SR_FRE
 (1 << 8)

51 

	)

54 
BEGIN_DECLS


56 
•i_£t_‰f_ti
(
uöt32_t
 
•i
);

57 
•i_£t_‰f_mŸ‹ﬁa
(
uöt32_t
 
•i
);

59 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/spi_common_v2.h

26 #ifde‡
LIBOPENCM3_SPI_H


28 #¥agm®
⁄˚


32 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_Æl.h
>

34 
	#SPI_DR8
(
•i_ba£
Ë
	`MMIO8
((•i_ba£Ë+ 0x0c)

	)

35 
	#SPI1_DR8
 
	`SPI_DR8
(
SPI1_BASE
)

	)

36 
	#SPI2_DR8
 
	`SPI_DR8
(
SPI2_BASE
)

	)

37 
	#SPI3_DR8
 
	`SPI_DR8
(
SPI3_BASE
)

	)

46 
	#SPI_CR1_CRCL_8BIT
 (0 << 11)

	)

47 
	#SPI_CR1_CRCL_16BIT
 (1 << 11)

	)

49 
	#SPI_CR1_CRCL
 (1 << 11)

	)

54 
	#SPI_CR2_LDMA_TX
 (1 << 14)

	)

57 
	#SPI_CR2_LDMA_RX
 (1 << 13)

	)

60 
	#SPI_CR2_FRXTH
 (1 << 12)

	)

68 
	#SPI_CR2_DS_4BIT
 (0x3 << 8)

	)

69 
	#SPI_CR2_DS_5BIT
 (0x4 << 8)

	)

70 
	#SPI_CR2_DS_6BIT
 (0x5 << 8)

	)

71 
	#SPI_CR2_DS_7BIT
 (0x6 << 8)

	)

72 
	#SPI_CR2_DS_8BIT
 (0x7 << 8)

	)

73 
	#SPI_CR2_DS_9BIT
 (0x8 << 8)

	)

74 
	#SPI_CR2_DS_10BIT
 (0x9 << 8)

	)

75 
	#SPI_CR2_DS_11BIT
 (0xA << 8)

	)

76 
	#SPI_CR2_DS_12BIT
 (0xB << 8)

	)

77 
	#SPI_CR2_DS_13BIT
 (0xC << 8)

	)

78 
	#SPI_CR2_DS_14BIT
 (0xD << 8)

	)

79 
	#SPI_CR2_DS_15BIT
 (0xE << 8)

	)

80 
	#SPI_CR2_DS_16BIT
 (0xF << 8)

	)

82 
	#SPI_CR2_DS_MASK
 (0xF << 8)

	)

85 
	#SPI_CR2_NSSP
 (1 << 3)

	)

90 
	#SPI_SR_FTLVL_FIFO_EMPTY
 (0x0 << 11)

	)

91 
	#SPI_SR_FTLVL_QUARTER_FIFO
 (0x1 << 11)

	)

92 
	#SPI_SR_FTLVL_HALF_FIFO
 (0x2 << 11)

	)

93 
	#SPI_SR_FTLVL_FIFO_FULL
 (0x3 << 11)

	)

96 
	#SPI_SR_FRLVL_FIFO_EMPTY
 (0x0 << 9)

	)

97 
	#SPI_SR_FRLVL_QUARTER_FIFO
 (0x1 << 9)

	)

98 
	#SPI_SR_FRLVL_HALF_FIFO
 (0x2 << 9)

	)

99 
	#SPI_SR_FRLVL_FIFO_FULL
 (0x3 << 9)

	)

103 
BEGIN_DECLS


104 
•i_öô_ma°î
(
uöt32_t
 
•i
, uöt32_à
br
, uöt32_à
˝ﬁ
, uöt32_à
˝ha
,

105 
uöt32_t
 
lsbfú°
);

106 
•i_£t_¸˛_8bô
(
uöt32_t
 
•i
);

107 
•i_£t_¸˛_16bô
(
uöt32_t
 
•i
);

108 
•i_£t_d©a_size
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a_s
);

109 
•i_fifo_ª˚±i⁄_thªshﬁd_8bô
(
uöt32_t
 
•i
);

110 
•i_fifo_ª˚±i⁄_thªshﬁd_16bô
(
uöt32_t
 
•i
);

111 
•i_i2s_mode_•i_mode
(
uöt32_t
 
•i
);

112 
•i_£nd8
(
uöt32_t
 
•i
, 
uöt8_t
 
d©a
);

113 
uöt8_t
 
•i_ªad8
(
uöt32_t
 
•i
);

115 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/st_usbfs_common.h

42 #ifde‡
LIBOPENCM3_ST_USBFS_H


44 #i‚de‡
LIBOPENCM3_ST_USBFS_COMMON_H


45 
	#LIBOPENCM3_ST_USBFS_COMMON_H


	)

47 
	~<lib›ícm3/°m32/toﬁs.h
>

60 
	#USB_CNTR_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x40))

	)

62 
	#USB_ISTR_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x44))

	)

64 
	#USB_FNR_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x48))

	)

66 
	#USB_DADDR_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x4C))

	)

68 
	#USB_BTABLE_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x50))

	)

71 
	#USB_EP_REG
(
EP
Ë(&
	`MMIO32
(
USB_DEV_FS_BASE
Ë+ (EP))

	)

81 
	#USB_CNTR_CTRM
 0x8000

	)

82 
	#USB_CNTR_PMAOVRM
 0x4000

	)

83 
	#USB_CNTR_ERRM
 0x2000

	)

84 
	#USB_CNTR_WKUPM
 0x1000

	)

85 
	#USB_CNTR_SUSPM
 0x0800

	)

86 
	#USB_CNTR_RESETM
 0x0400

	)

87 
	#USB_CNTR_SOFM
 0x0200

	)

88 
	#USB_CNTR_ESOFM
 0x0100

	)

91 
	#USB_CNTR_RESUME
 0x0010

	)

92 
	#USB_CNTR_FSUSP
 0x0008

	)

93 
	#USB_CNTR_LP_MODE
 0x0004

	)

94 
	#USB_CNTR_PWDN
 0x0002

	)

95 
	#USB_CNTR_FRES
 0x0001

	)

99 
	#USB_ISTR_CTR
 0x8000

	)

100 
	#USB_ISTR_PMAOVR
 0x4000

	)

101 
	#USB_ISTR_ERR
 0x2000

	)

102 
	#USB_ISTR_WKUP
 0x1000

	)

103 
	#USB_ISTR_SUSP
 0x0800

	)

104 
	#USB_ISTR_RESET
 0x0400

	)

105 
	#USB_ISTR_SOF
 0x0200

	)

106 
	#USB_ISTR_ESOF
 0x0100

	)

107 
	#USB_ISTR_DIR
 0x0010

	)

108 
	#USB_ISTR_EP_ID
 0x000F

	)

113 
	#USB_CLR_ISTR_PMAOVR
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_PMAOVR
)

	)

114 
	#USB_CLR_ISTR_ERR
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_ERR
)

	)

115 
	#USB_CLR_ISTR_WKUP
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_WKUP
)

	)

116 
	#USB_CLR_ISTR_SUSP
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_SUSP
)

	)

117 
	#USB_CLR_ISTR_RESET
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_RESET
)

	)

118 
	#USB_CLR_ISTR_SOF
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_SOF
)

	)

119 
	#USB_CLR_ISTR_ESOF
(Ë
	`CLR_REG_BIT
(
USB_ISTR_REG
, 
USB_ISTR_ESOF
)

	)

123 
	#USB_FNR_RXDP
 (1 << 15)

	)

124 
	#USB_FNR_RXDM
 (1 << 14)

	)

125 
	#USB_FNR_LCK
 (1 << 13)

	)

127 
	#USB_FNR_LSOF_SHIFT
 11

	)

128 
	#USB_FNR_LSOF
 (3 << 
USB_FNR_LSOF_SHIFT
)

	)

130 
	#USB_FNR_FN
 (0x7FF << 0)

	)

134 
	#USB_DADDR_EF
 (1 << 7)

	)

135 
	#USB_DADDR_ADDR
 0x007F

	)

139 
	#USB_BTABLE_BTABLE
 0xFFF8

	)

145 
	#USB_EP0
 0

	)

146 
	#USB_EP1
 1

	)

147 
	#USB_EP2
 2

	)

148 
	#USB_EP3
 3

	)

149 
	#USB_EP4
 4

	)

150 
	#USB_EP5
 5

	)

151 
	#USB_EP6
 6

	)

152 
	#USB_EP7
 7

	)

157 
	#USB_EP_RX_CTR
 0x8000

	)

158 
	#USB_EP_RX_DTOG
 0x4000

	)

159 
	#USB_EP_RX_STAT
 0x3000

	)

161 
	#USB_EP_SETUP
 0x0800

	)

162 
	#USB_EP_TYPE
 0x0600

	)

163 
	#USB_EP_KIND
 0x0100

	)

168 
	#USB_EP_TX_CTR
 0x0080

	)

169 
	#USB_EP_TX_DTOG
 0x0040

	)

170 
	#USB_EP_TX_STAT
 0x0030

	)

172 
	#USB_EP_ADDR
 0x000F

	)

175 
	#USB_EP_NTOGGLE_MSK
 (
USB_EP_RX_CTR
 | \

176 
USB_EP_SETUP
 | \

177 
USB_EP_TYPE
 | \

178 
USB_EP_KIND
 | \

179 
USB_EP_TX_CTR
 | \

180 
USB_EP_ADDR
)

	)

183 
	#USB_EP_RX_STAT_TOG_MSK
 (
USB_EP_RX_STAT
 | 
USB_EP_NTOGGLE_MSK
)

	)

185 
	#USB_EP_TX_STAT_TOG_MSK
 (
USB_EP_TX_STAT
 | 
USB_EP_NTOGGLE_MSK
)

	)

188 
	#USB_EP_RX_STAT_DISABLED
 0x0000

	)

189 
	#USB_EP_RX_STAT_STALL
 0x1000

	)

190 
	#USB_EP_RX_STAT_NAK
 0x2000

	)

191 
	#USB_EP_RX_STAT_VALID
 0x3000

	)

194 
	#USB_EP_TX_STAT_DISABLED
 0x0000

	)

195 
	#USB_EP_TX_STAT_STALL
 0x0010

	)

196 
	#USB_EP_TX_STAT_NAK
 0x0020

	)

197 
	#USB_EP_TX_STAT_VALID
 0x0030

	)

200 
	#USB_EP_TYPE_BULK
 0x0000

	)

201 
	#USB_EP_TYPE_CONTROL
 0x0200

	)

202 
	#USB_EP_TYPE_ISO
 0x0400

	)

203 
	#USB_EP_TYPE_INTERRUPT
 0x0600

	)

213 
	#USB_SET_EP_RX_STAT
(
EP
, 
STAT
) \

214 
	`TOG_SET_REG_BIT_MSK_AND_SET
(
	`USB_EP_REG
(
EP
), \

215 
USB_EP_RX_STAT_TOG_MSK
, 
STAT
, 
USB_EP_RX_CTR
 | 
USB_EP_TX_CTR
)

	)

217 
	#USB_SET_EP_TX_STAT
(
EP
, 
STAT
) \

218 
	`TOG_SET_REG_BIT_MSK_AND_SET
(
	`USB_EP_REG
(
EP
), \

219 
USB_EP_TX_STAT_TOG_MSK
, 
STAT
, 
USB_EP_RX_CTR
 | 
USB_EP_TX_CTR
)

	)

228 
	#USB_CLR_EP_NTOGGLE_BIT_AND_SET
(
EP
, 
BIT
, 
EXTRA_BITS
) \

229 
	`CLR_REG_BIT_MSK_AND_SET
(
	`USB_EP_REG
(
EP
), \

230 
USB_EP_NTOGGLE_MSK
, 
BIT
, 
EXTRA_BITS
)

	)

232 
	#USB_CLR_EP_RX_CTR
(
EP
) \

233 
	`USB_CLR_EP_NTOGGLE_BIT_AND_SET
(
EP
, 
USB_EP_RX_CTR
, 
USB_EP_TX_CTR
)

	)

235 
	#USB_CLR_EP_TX_CTR
(
EP
) \

236 
	`USB_CLR_EP_NTOGGLE_BIT_AND_SET
(
EP
, 
USB_EP_TX_CTR
, 
USB_EP_RX_CTR
)

	)

239 
	#USB_SET_EP_TYPE
(
EP
, 
TYPE
) \

240 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

241 (
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

242 (
USB_EP_NTOGGLE_MSK
 & \

243 (~
USB_EP_TYPE
))Ë| 
TYPE
)

	)

245 
	#USB_SET_EP_KIND
(
EP
) \

246 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

247 (
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

248 (
USB_EP_NTOGGLE_MSK
 & \

249 (~
USB_EP_KIND
))Ë| USB_EP_KIND)

	)

251 
	#USB_CLR_EP_KIND
(
EP
) \

252 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

253 (
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

254 (
USB_EP_NTOGGLE_MSK
 & (~
USB_EP_KIND
))))

	)

256 
	#USB_SET_EP_STAT_OUT
(
EP
Ë
	`USB_SET_EP_KIND
(EP)

	)

257 
	#USB_CLR_EP_STAT_OUT
(
EP
Ë
	`USB_CLR_EP_KIND
(EP)

	)

259 
	#USB_SET_EP_ADDR
(
EP
, 
ADDR
) \

260 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

261 ((
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

262 (
USB_EP_NTOGGLE_MSK
 & \

263 (~
USB_EP_ADDR
))Ë| 
ADDR
))

	)

266 
	#USB_CLR_EP_TX_DTOG
(
EP
) \

267 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

268 
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

269 (
USB_EP_NTOGGLE_MSK
 | 
USB_EP_TX_DTOG
))

	)

271 
	#USB_CLR_EP_RX_DTOG
(
EP
) \

272 
	`SET_REG
(
	`USB_EP_REG
(
EP
), \

273 
	`GET_REG
(
	`USB_EP_REG
(
EP
)) & \

274 (
USB_EP_NTOGGLE_MSK
 | 
USB_EP_RX_DTOG
))

	)

279 
	#USB_GET_BTABLE
 
	`GET_REG
(
USB_BTABLE_REG
)

	)

283 
	#USB_GET_EP_TX_ADDR
(
EP
Ë
	`GET_REG
(
	`USB_EP_TX_ADDR
(EP))

	)

284 
	#USB_GET_EP_TX_COUNT
(
EP
Ë
	`GET_REG
(
	`USB_EP_TX_COUNT
(EP))

	)

285 
	#USB_GET_EP_RX_ADDR
(
EP
Ë
	`GET_REG
(
	`USB_EP_RX_ADDR
(EP))

	)

286 
	#USB_GET_EP_RX_COUNT
(
EP
Ë
	`GET_REG
(
	`USB_EP_RX_COUNT
(EP))

	)

287 
	#USB_SET_EP_TX_ADDR
(
EP
, 
ADDR
Ë
	`SET_REG
(
	`USB_EP_TX_ADDR
(EP), ADDR)

	)

288 
	#USB_SET_EP_TX_COUNT
(
EP
, 
COUNT
Ë
	`SET_REG
(
	`USB_EP_TX_COUNT
(EP), COUNT)

	)

289 
	#USB_SET_EP_RX_ADDR
(
EP
, 
ADDR
Ë
	`SET_REG
(
	`USB_EP_RX_ADDR
(EP), ADDR)

	)

290 
	#USB_SET_EP_RX_COUNT
(
EP
, 
COUNT
Ë
	`SET_REG
(
	`USB_EP_RX_COUNT
(EP), COUNT)

	)

	@libopencm3/include/libopencm3/stm32/common/st_usbfs_v1.h

32 #ifde‡
LIBOPENCM3_ST_USBFS_H


34 #i‚de‡
LIBOPENCM3_ST_USBFS_V1_H


35 
	#LIBOPENCM3_ST_USBFS_V1_H


	)

37 
	~<lib›ícm3/°m32/comm⁄/°_usbfs_comm⁄.h
>

41 
	#USB_EP_TX_ADDR
(
EP
) \

42 ((
uöt32_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + 
EP
 * 8 + 0Ë* 2))

	)

44 
	#USB_EP_TX_COUNT
(
EP
) \

45 ((
uöt32_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + 
EP
 * 8 + 2Ë* 2))

	)

47 
	#USB_EP_RX_ADDR
(
EP
) \

48 ((
uöt32_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + 
EP
 * 8 + 4Ë* 2))

	)

50 
	#USB_EP_RX_COUNT
(
EP
) \

51 ((
uöt32_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + 
EP
 * 8 + 6Ë* 2))

	)

55 
	#USB_GET_EP_TX_BUFF
(
EP
) \

56 (
USB_PMA_BASE
 + (
uöt8_t
 *)(
	`USB_GET_EP_TX_ADDR
(
EP
Ë* 2))

	)

58 
	#USB_GET_EP_RX_BUFF
(
EP
) \

59 (
USB_PMA_BASE
 + (
uöt8_t
 *)(
	`USB_GET_EP_RX_ADDR
(
EP
Ë* 2))

	)

	@libopencm3/include/libopencm3/stm32/common/st_usbfs_v2.h

29 #ifde‡
LIBOPENCM3_ST_USBFS_H


31 #i‚de‡
LIBOPENCM3_ST_USBFS_V2_H


32 
	#LIBOPENCM3_ST_USBFS_V2_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/°_usbfs_comm⁄.h
>

44 
	#USB_LPMCSR_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x54))

	)

45 
	#USB_BCDR_REG
 (&
	`MMIO32
(
USB_DEV_FS_BASE
 + 0x58))

	)

53 
	#USB_CNTR_L1REQM
 (1 << 7)

	)

54 
	#USB_CNTR_L1RESUME
 (1 << 5)

	)

58 
	#USB_ISTR_L1REQ
 (1 << 7)

	)

62 
	#USB_LPMCSR_BESL_SHIFT
 4

	)

63 
	#USB_LPMCSR_BESL
 (15 << 
USB_LPMCSR_BESL_SHIFT
)

	)

65 
	#USB_LPMCSR_REMWAKE
 (1 << 3)

	)

66 
	#USB_LPMCSR_LPMACK
 (1 << 1)

	)

67 
	#USB_LPMCSR_LPMEN
 (1 << 0)

	)

71 
	#USB_BCDR_DPPU
 (1 << 15)

	)

72 
	#USB_BCDR_PS2DET
 (1 << 7)

	)

73 
	#USB_BCDR_SDET
 (1 << 6)

	)

74 
	#USB_BCDR_PDET
 (1 << 5)

	)

75 
	#USB_BCDR_DCDET
 (1 << 4)

	)

76 
	#USB_BCDR_SDEN
 (1 << 3)

	)

77 
	#USB_BCDR_PDEN
 (1 << 2)

	)

78 
	#USB_BCDR_DCDEN
 (1 << 1)

	)

79 
	#USB_BCDR_BCDEN
 (1 << 0)

	)

83 
	#USB_EP_TX_ADDR
(
ï
) \

84 ((
uöt16_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + (
ï
Ë* 8 + 0Ë* 1))

	)

86 
	#USB_EP_TX_COUNT
(
ï
) \

87 ((
uöt16_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + (
ï
Ë* 8 + 2Ë* 1))

	)

89 
	#USB_EP_RX_ADDR
(
ï
) \

90 ((
uöt16_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + (
ï
Ë* 8 + 4Ë* 1))

	)

92 
	#USB_EP_RX_COUNT
(
ï
) \

93 ((
uöt16_t
 *)(
USB_PMA_BASE
 + (
USB_GET_BTABLE
 + (
ï
Ë* 8 + 6Ë* 1))

	)

97 
	#USB_GET_EP_TX_BUFF
(
ï
) \

98 (
USB_PMA_BASE
 + (
uöt8_t
 *)(
	`USB_GET_EP_TX_ADDR
(
ï
Ë* 1))

	)

100 
	#USB_GET_EP_RX_BUFF
(
ï
) \

101 (
USB_PMA_BASE
 + (
uöt8_t
 *)(
	`USB_GET_EP_RX_ADDR
(
ï
Ë* 1))

	)

	@libopencm3/include/libopencm3/stm32/common/syscfg_common_l1f234.h

31 #i‡
deföed
(
LIBOPENCM3_SYSCFG_H
)

33 #i‚de‡
LIBOPENCM3_SYSCFG_COMMON_L1F234_H


34 
	#LIBOPENCM3_SYSCFG_COMMON_L1F234_H


	)

40 
	#SYSCFG_MEMRM
 
	`MMIO32
(
SYSCFG_BASE
 + 0x00)

	)

42 
	#SYSCFG_PMC
 
	`MMIO32
(
SYSCFG_BASE
 + 0x04)

	)

45 
	#SYSCFG_EXTICR
(
i
Ë
	`MMIO32
(
SYSCFG_BASE
 + 0x08 + (i)*4)

	)

46 
	#SYSCFG_EXTICR1
 
	`SYSCFG_EXTICR
(0)

	)

47 
	#SYSCFG_EXTICR2
 
	`SYSCFG_EXTICR
(1)

	)

48 
	#SYSCFG_EXTICR3
 
	`SYSCFG_EXTICR
(2)

	)

49 
	#SYSCFG_EXTICR4
 
	`SYSCFG_EXTICR
(3)

	)

51 
	#SYSCFG_CMPCR
 
	`MMIO32
(
SYSCFG_BASE
 + 0x20)

	)

	@libopencm3/include/libopencm3/stm32/common/timer_common_all.h

32 #i‡
deföed
(
LIBOPENCM3_TIMER_H
)

34 #i‚de‡
LIBOPENCM3_TIMER_COMMON_H


35 
	#LIBOPENCM3_TIMER_COMMON_H


	)

45 
	#TIM1
 
TIM1_BASE


	)

46 
	#TIM2
 
TIM2_BASE


	)

47 
	#TIM3
 
TIM3_BASE


	)

48 #i‡
deföed
(
TIM4_BASE
)

49 
	#TIM4
 
TIM4_BASE


	)

51 
	#TIM5
 
TIM5_BASE


	)

52 
	#TIM6
 
TIM6_BASE


	)

53 
	#TIM7
 
TIM7_BASE


	)

54 #i‡
deföed
(
TIM8_BASE
)

55 
	#TIM8
 
TIM8_BASE


	)

57 #i‡
deföed
(
TIM9_BASE
)

58 
	#TIM9
 
TIM9_BASE


	)

60 #i‡
deföed
(
TIM10_BASE
)

61 
	#TIM10
 
TIM10_BASE


	)

63 #i‡
deföed
(
TIM11_BASE
)

64 
	#TIM11
 
TIM11_BASE


	)

66 #i‡
deföed
(
TIM12_BASE
)

67 
	#TIM12
 
TIM12_BASE


	)

69 #i‡
deföed
(
TIM13_BASE
)

70 
	#TIM13
 
TIM13_BASE


	)

72 #i‡
deföed
(
TIM14_BASE
)

73 
	#TIM14
 
TIM14_BASE


	)

75 #i‡
deföed
(
TIM15_BASE
)

76 
	#TIM15
 
TIM15_BASE


	)

78 #i‡
deföed
(
TIM16_BASE
)

79 
	#TIM16
 
TIM16_BASE


	)

81 #i‡
deföed
(
TIM17_BASE
)

82 
	#TIM17
 
TIM17_BASE


	)

89 
	#TIM_CR1
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x00)

	)

90 
	#TIM1_CR1
 
	`TIM_CR1
(
TIM1
)

	)

91 
	#TIM2_CR1
 
	`TIM_CR1
(
TIM2
)

	)

92 
	#TIM3_CR1
 
	`TIM_CR1
(
TIM3
)

	)

93 
	#TIM4_CR1
 
	`TIM_CR1
(
TIM4
)

	)

94 
	#TIM5_CR1
 
	`TIM_CR1
(
TIM5
)

	)

95 
	#TIM6_CR1
 
	`TIM_CR1
(
TIM6
)

	)

96 
	#TIM7_CR1
 
	`TIM_CR1
(
TIM7
)

	)

97 
	#TIM8_CR1
 
	`TIM_CR1
(
TIM8
)

	)

98 
	#TIM9_CR1
 
	`TIM_CR1
(
TIM9
)

	)

99 
	#TIM10_CR1
 
	`TIM_CR1
(
TIM10
)

	)

100 
	#TIM11_CR1
 
	`TIM_CR1
(
TIM11
)

	)

101 
	#TIM12_CR1
 
	`TIM_CR1
(
TIM12
)

	)

102 
	#TIM13_CR1
 
	`TIM_CR1
(
TIM13
)

	)

103 
	#TIM14_CR1
 
	`TIM_CR1
(
TIM14
)

	)

104 
	#TIM15_CR1
 
	`TIM_CR1
(
TIM15
)

	)

105 
	#TIM16_CR1
 
	`TIM_CR1
(
TIM16
)

	)

106 
	#TIM17_CR1
 
	`TIM_CR1
(
TIM17
)

	)

109 
	#TIM_CR2
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x04)

	)

110 
	#TIM1_CR2
 
	`TIM_CR2
(
TIM1
)

	)

111 
	#TIM2_CR2
 
	`TIM_CR2
(
TIM2
)

	)

112 
	#TIM3_CR2
 
	`TIM_CR2
(
TIM3
)

	)

113 
	#TIM4_CR2
 
	`TIM_CR2
(
TIM4
)

	)

114 
	#TIM5_CR2
 
	`TIM_CR2
(
TIM5
)

	)

115 
	#TIM6_CR2
 
	`TIM_CR2
(
TIM6
)

	)

116 
	#TIM7_CR2
 
	`TIM_CR2
(
TIM7
)

	)

117 
	#TIM8_CR2
 
	`TIM_CR2
(
TIM8
)

	)

118 
	#TIM15_CR2
 
	`TIM_CR2
(
TIM15
)

	)

119 
	#TIM16_CR2
 
	`TIM_CR2
(
TIM16
)

	)

120 
	#TIM17_CR2
 
	`TIM_CR2
(
TIM17
)

	)

123 
	#TIM_SMCR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x08)

	)

124 
	#TIM1_SMCR
 
	`TIM_SMCR
(
TIM1
)

	)

125 
	#TIM2_SMCR
 
	`TIM_SMCR
(
TIM2
)

	)

126 
	#TIM3_SMCR
 
	`TIM_SMCR
(
TIM3
)

	)

127 
	#TIM4_SMCR
 
	`TIM_SMCR
(
TIM4
)

	)

128 
	#TIM5_SMCR
 
	`TIM_SMCR
(
TIM5
)

	)

129 
	#TIM8_SMCR
 
	`TIM_SMCR
(
TIM8
)

	)

130 
	#TIM9_SMCR
 
	`TIM_SMCR
(
TIM9
)

	)

131 
	#TIM12_SMCR
 
	`TIM_SMCR
(
TIM12
)

	)

132 
	#TIM15_SMCR
 
	`TIM_SMCR
(
TIM15
)

	)

135 
	#TIM_DIER
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x0C)

	)

136 
	#TIM1_DIER
 
	`TIM_DIER
(
TIM1
)

	)

137 
	#TIM2_DIER
 
	`TIM_DIER
(
TIM2
)

	)

138 
	#TIM3_DIER
 
	`TIM_DIER
(
TIM3
)

	)

139 
	#TIM4_DIER
 
	`TIM_DIER
(
TIM4
)

	)

140 
	#TIM5_DIER
 
	`TIM_DIER
(
TIM5
)

	)

141 
	#TIM6_DIER
 
	`TIM_DIER
(
TIM6
)

	)

142 
	#TIM7_DIER
 
	`TIM_DIER
(
TIM7
)

	)

143 
	#TIM8_DIER
 
	`TIM_DIER
(
TIM8
)

	)

144 
	#TIM9_DIER
 
	`TIM_DIER
(
TIM9
)

	)

145 
	#TIM10_DIER
 
	`TIM_DIER
(
TIM10
)

	)

146 
	#TIM11_DIER
 
	`TIM_DIER
(
TIM11
)

	)

147 
	#TIM12_DIER
 
	`TIM_DIER
(
TIM12
)

	)

148 
	#TIM13_DIER
 
	`TIM_DIER
(
TIM13
)

	)

149 
	#TIM14_DIER
 
	`TIM_DIER
(
TIM14
)

	)

150 
	#TIM15_DIER
 
	`TIM_DIER
(
TIM15
)

	)

151 
	#TIM16_DIER
 
	`TIM_DIER
(
TIM16
)

	)

152 
	#TIM17_DIER
 
	`TIM_DIER
(
TIM17
)

	)

155 
	#TIM_SR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x10)

	)

156 
	#TIM1_SR
 
	`TIM_SR
(
TIM1
)

	)

157 
	#TIM2_SR
 
	`TIM_SR
(
TIM2
)

	)

158 
	#TIM3_SR
 
	`TIM_SR
(
TIM3
)

	)

159 
	#TIM4_SR
 
	`TIM_SR
(
TIM4
)

	)

160 
	#TIM5_SR
 
	`TIM_SR
(
TIM5
)

	)

161 
	#TIM6_SR
 
	`TIM_SR
(
TIM6
)

	)

162 
	#TIM7_SR
 
	`TIM_SR
(
TIM7
)

	)

163 
	#TIM8_SR
 
	`TIM_SR
(
TIM8
)

	)

164 
	#TIM9_SR
 
	`TIM_SR
(
TIM9
)

	)

165 
	#TIM10_SR
 
	`TIM_SR
(
TIM10
)

	)

166 
	#TIM11_SR
 
	`TIM_SR
(
TIM11
)

	)

167 
	#TIM12_SR
 
	`TIM_SR
(
TIM12
)

	)

168 
	#TIM13_SR
 
	`TIM_SR
(
TIM13
)

	)

169 
	#TIM14_SR
 
	`TIM_SR
(
TIM14
)

	)

170 
	#TIM15_SR
 
	`TIM_SR
(
TIM15
)

	)

171 
	#TIM16_SR
 
	`TIM_SR
(
TIM16
)

	)

172 
	#TIM17_SR
 
	`TIM_SR
(
TIM17
)

	)

175 
	#TIM_EGR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x14)

	)

176 
	#TIM1_EGR
 
	`TIM_EGR
(
TIM1
)

	)

177 
	#TIM2_EGR
 
	`TIM_EGR
(
TIM2
)

	)

178 
	#TIM3_EGR
 
	`TIM_EGR
(
TIM3
)

	)

179 
	#TIM4_EGR
 
	`TIM_EGR
(
TIM4
)

	)

180 
	#TIM5_EGR
 
	`TIM_EGR
(
TIM5
)

	)

181 
	#TIM6_EGR
 
	`TIM_EGR
(
TIM6
)

	)

182 
	#TIM7_EGR
 
	`TIM_EGR
(
TIM7
)

	)

183 
	#TIM8_EGR
 
	`TIM_EGR
(
TIM8
)

	)

184 
	#TIM9_EGR
 
	`TIM_EGR
(
TIM9
)

	)

185 
	#TIM10_EGR
 
	`TIM_EGR
(
TIM10
)

	)

186 
	#TIM11_EGR
 
	`TIM_EGR
(
TIM11
)

	)

187 
	#TIM12_EGR
 
	`TIM_EGR
(
TIM12
)

	)

188 
	#TIM13_EGR
 
	`TIM_EGR
(
TIM13
)

	)

189 
	#TIM14_EGR
 
	`TIM_EGR
(
TIM14
)

	)

190 
	#TIM15_EGR
 
	`TIM_EGR
(
TIM15
)

	)

191 
	#TIM16_EGR
 
	`TIM_EGR
(
TIM16
)

	)

192 
	#TIM17_EGR
 
	`TIM_EGR
(
TIM17
)

	)

195 
	#TIM_CCMR1
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x18)

	)

196 
	#TIM1_CCMR1
 
	`TIM_CCMR1
(
TIM1
)

	)

197 
	#TIM2_CCMR1
 
	`TIM_CCMR1
(
TIM2
)

	)

198 
	#TIM3_CCMR1
 
	`TIM_CCMR1
(
TIM3
)

	)

199 
	#TIM4_CCMR1
 
	`TIM_CCMR1
(
TIM4
)

	)

200 
	#TIM5_CCMR1
 
	`TIM_CCMR1
(
TIM5
)

	)

201 
	#TIM8_CCMR1
 
	`TIM_CCMR1
(
TIM8
)

	)

202 
	#TIM9_CCMR1
 
	`TIM_CCMR1
(
TIM9
)

	)

203 
	#TIM10_CCMR1
 
	`TIM_CCMR1
(
TIM10
)

	)

204 
	#TIM11_CCMR1
 
	`TIM_CCMR1
(
TIM11
)

	)

205 
	#TIM12_CCMR1
 
	`TIM_CCMR1
(
TIM12
)

	)

206 
	#TIM13_CCMR1
 
	`TIM_CCMR1
(
TIM13
)

	)

207 
	#TIM14_CCMR1
 
	`TIM_CCMR1
(
TIM14
)

	)

208 
	#TIM15_CCMR1
 
	`TIM_CCMR1
(
TIM15
)

	)

209 
	#TIM16_CCMR1
 
	`TIM_CCMR1
(
TIM16
)

	)

210 
	#TIM17_CCMR1
 
	`TIM_CCMR1
(
TIM17
)

	)

213 
	#TIM_CCMR2
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x1C)

	)

214 
	#TIM1_CCMR2
 
	`TIM_CCMR2
(
TIM1
)

	)

215 
	#TIM2_CCMR2
 
	`TIM_CCMR2
(
TIM2
)

	)

216 
	#TIM3_CCMR2
 
	`TIM_CCMR2
(
TIM3
)

	)

217 
	#TIM4_CCMR2
 
	`TIM_CCMR2
(
TIM4
)

	)

218 
	#TIM5_CCMR2
 
	`TIM_CCMR2
(
TIM5
)

	)

219 
	#TIM8_CCMR2
 
	`TIM_CCMR2
(
TIM8
)

	)

222 
	#TIM_CCER
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x20)

	)

223 
	#TIM1_CCER
 
	`TIM_CCER
(
TIM1
)

	)

224 
	#TIM2_CCER
 
	`TIM_CCER
(
TIM2
)

	)

225 
	#TIM3_CCER
 
	`TIM_CCER
(
TIM3
)

	)

226 
	#TIM4_CCER
 
	`TIM_CCER
(
TIM4
)

	)

227 
	#TIM5_CCER
 
	`TIM_CCER
(
TIM5
)

	)

228 
	#TIM8_CCER
 
	`TIM_CCER
(
TIM8
)

	)

229 
	#TIM9_CCER
 
	`TIM_CCER
(
TIM9
)

	)

230 
	#TIM10_CCER
 
	`TIM_CCER
(
TIM10
)

	)

231 
	#TIM11_CCER
 
	`TIM_CCER
(
TIM11
)

	)

232 
	#TIM12_CCER
 
	`TIM_CCER
(
TIM12
)

	)

233 
	#TIM13_CCER
 
	`TIM_CCER
(
TIM13
)

	)

234 
	#TIM14_CCER
 
	`TIM_CCER
(
TIM14
)

	)

235 
	#TIM15_CCER
 
	`TIM_CCER
(
TIM15
)

	)

236 
	#TIM16_CCER
 
	`TIM_CCER
(
TIM16
)

	)

237 
	#TIM17_CCER
 
	`TIM_CCER
(
TIM17
)

	)

240 
	#TIM_CNT
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x24)

	)

241 
	#TIM1_CNT
 
	`TIM_CNT
(
TIM1
)

	)

242 
	#TIM2_CNT
 
	`TIM_CNT
(
TIM2
)

	)

243 
	#TIM3_CNT
 
	`TIM_CNT
(
TIM3
)

	)

244 
	#TIM4_CNT
 
	`TIM_CNT
(
TIM4
)

	)

245 
	#TIM5_CNT
 
	`TIM_CNT
(
TIM5
)

	)

246 
	#TIM6_CNT
 
	`TIM_CNT
(
TIM6
)

	)

247 
	#TIM7_CNT
 
	`TIM_CNT
(
TIM7
)

	)

248 
	#TIM8_CNT
 
	`TIM_CNT
(
TIM8
)

	)

249 
	#TIM9_CNT
 
	`TIM_CNT
(
TIM9
)

	)

250 
	#TIM10_CNT
 
	`TIM_CNT
(
TIM10
)

	)

251 
	#TIM11_CNT
 
	`TIM_CNT
(
TIM11
)

	)

252 
	#TIM12_CNT
 
	`TIM_CNT
(
TIM12
)

	)

253 
	#TIM13_CNT
 
	`TIM_CNT
(
TIM13
)

	)

254 
	#TIM14_CNT
 
	`TIM_CNT
(
TIM14
)

	)

255 
	#TIM15_CNT
 
	`TIM_CNT
(
TIM15
)

	)

256 
	#TIM16_CNT
 
	`TIM_CNT
(
TIM16
)

	)

257 
	#TIM17_CNT
 
	`TIM_CNT
(
TIM17
)

	)

260 
	#TIM_PSC
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x28)

	)

261 
	#TIM1_PSC
 
	`TIM_PSC
(
TIM1
)

	)

262 
	#TIM2_PSC
 
	`TIM_PSC
(
TIM2
)

	)

263 
	#TIM3_PSC
 
	`TIM_PSC
(
TIM3
)

	)

264 
	#TIM4_PSC
 
	`TIM_PSC
(
TIM4
)

	)

265 
	#TIM5_PSC
 
	`TIM_PSC
(
TIM5
)

	)

266 
	#TIM6_PSC
 
	`TIM_PSC
(
TIM6
)

	)

267 
	#TIM7_PSC
 
	`TIM_PSC
(
TIM7
)

	)

268 
	#TIM8_PSC
 
	`TIM_PSC
(
TIM8
)

	)

269 
	#TIM9_PSC
 
	`TIM_PSC
(
TIM9
)

	)

270 
	#TIM10_PSC
 
	`TIM_PSC
(
TIM10
)

	)

271 
	#TIM11_PSC
 
	`TIM_PSC
(
TIM11
)

	)

272 
	#TIM12_PSC
 
	`TIM_PSC
(
TIM12
)

	)

273 
	#TIM13_PSC
 
	`TIM_PSC
(
TIM13
)

	)

274 
	#TIM14_PSC
 
	`TIM_PSC
(
TIM14
)

	)

275 
	#TIM15_PSC
 
	`TIM_PSC
(
TIM15
)

	)

276 
	#TIM16_PSC
 
	`TIM_PSC
(
TIM16
)

	)

277 
	#TIM17_PSC
 
	`TIM_PSC
(
TIM17
)

	)

280 
	#TIM_ARR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x2C)

	)

281 
	#TIM1_ARR
 
	`TIM_ARR
(
TIM1
)

	)

282 
	#TIM2_ARR
 
	`TIM_ARR
(
TIM2
)

	)

283 
	#TIM3_ARR
 
	`TIM_ARR
(
TIM3
)

	)

284 
	#TIM4_ARR
 
	`TIM_ARR
(
TIM4
)

	)

285 
	#TIM5_ARR
 
	`TIM_ARR
(
TIM5
)

	)

286 
	#TIM6_ARR
 
	`TIM_ARR
(
TIM6
)

	)

287 
	#TIM7_ARR
 
	`TIM_ARR
(
TIM7
)

	)

288 
	#TIM8_ARR
 
	`TIM_ARR
(
TIM8
)

	)

289 
	#TIM9_ARR
 
	`TIM_ARR
(
TIM9
)

	)

290 
	#TIM10_ARR
 
	`TIM_ARR
(
TIM10
)

	)

291 
	#TIM11_ARR
 
	`TIM_ARR
(
TIM11
)

	)

292 
	#TIM12_ARR
 
	`TIM_ARR
(
TIM12
)

	)

293 
	#TIM13_ARR
 
	`TIM_ARR
(
TIM13
)

	)

294 
	#TIM14_ARR
 
	`TIM_ARR
(
TIM14
)

	)

295 
	#TIM15_ARR
 
	`TIM_ARR
(
TIM15
)

	)

296 
	#TIM16_ARR
 
	`TIM_ARR
(
TIM16
)

	)

297 
	#TIM17_ARR
 
	`TIM_ARR
(
TIM17
)

	)

300 
	#TIM_RCR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x30)

	)

301 
	#TIM1_RCR
 
	`TIM_RCR
(
TIM1
)

	)

302 
	#TIM8_RCR
 
	`TIM_RCR
(
TIM8
)

	)

303 
	#TIM15_RCR
 
	`TIM_RCR
(
TIM15
)

	)

304 
	#TIM16_RCR
 
	`TIM_RCR
(
TIM16
)

	)

305 
	#TIM17_RCR
 
	`TIM_RCR
(
TIM17
)

	)

308 
	#TIM_CCR1
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x34)

	)

309 
	#TIM1_CCR1
 
	`TIM_CCR1
(
TIM1
)

	)

310 
	#TIM2_CCR1
 
	`TIM_CCR1
(
TIM2
)

	)

311 
	#TIM3_CCR1
 
	`TIM_CCR1
(
TIM3
)

	)

312 
	#TIM4_CCR1
 
	`TIM_CCR1
(
TIM4
)

	)

313 
	#TIM5_CCR1
 
	`TIM_CCR1
(
TIM5
)

	)

314 
	#TIM8_CCR1
 
	`TIM_CCR1
(
TIM8
)

	)

315 
	#TIM9_CCR1
 
	`TIM_CCR1
(
TIM9
)

	)

316 
	#TIM10_CCR1
 
	`TIM_CCR1
(
TIM10
)

	)

317 
	#TIM11_CCR1
 
	`TIM_CCR1
(
TIM11
)

	)

318 
	#TIM12_CCR1
 
	`TIM_CCR1
(
TIM12
)

	)

319 
	#TIM13_CCR1
 
	`TIM_CCR1
(
TIM13
)

	)

320 
	#TIM14_CCR1
 
	`TIM_CCR1
(
TIM14
)

	)

321 
	#TIM15_CCR1
 
	`TIM_CCR1
(
TIM15
)

	)

322 
	#TIM16_CCR1
 
	`TIM_CCR1
(
TIM16
)

	)

323 
	#TIM17_CCR1
 
	`TIM_CCR1
(
TIM17
)

	)

326 
	#TIM_CCR2
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x38)

	)

327 
	#TIM1_CCR2
 
	`TIM_CCR2
(
TIM1
)

	)

328 
	#TIM2_CCR2
 
	`TIM_CCR2
(
TIM2
)

	)

329 
	#TIM3_CCR2
 
	`TIM_CCR2
(
TIM3
)

	)

330 
	#TIM4_CCR2
 
	`TIM_CCR2
(
TIM4
)

	)

331 
	#TIM5_CCR2
 
	`TIM_CCR2
(
TIM5
)

	)

332 
	#TIM8_CCR2
 
	`TIM_CCR2
(
TIM8
)

	)

333 
	#TIM9_CCR2
 
	`TIM_CCR2
(
TIM9
)

	)

334 
	#TIM12_CCR2
 
	`TIM_CCR2
(
TIM12
)

	)

335 
	#TIM15_CCR2
 
	`TIM_CCR2
(
TIM15
)

	)

338 
	#TIM_CCR3
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x3C)

	)

339 
	#TIM1_CCR3
 
	`TIM_CCR3
(
TIM1
)

	)

340 
	#TIM2_CCR3
 
	`TIM_CCR3
(
TIM2
)

	)

341 
	#TIM3_CCR3
 
	`TIM_CCR3
(
TIM3
)

	)

342 
	#TIM4_CCR3
 
	`TIM_CCR3
(
TIM4
)

	)

343 
	#TIM5_CCR3
 
	`TIM_CCR3
(
TIM5
)

	)

344 
	#TIM8_CCR3
 
	`TIM_CCR3
(
TIM8
)

	)

347 
	#TIM_CCR4
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x40)

	)

348 
	#TIM1_CCR4
 
	`TIM_CCR4
(
TIM1
)

	)

349 
	#TIM2_CCR4
 
	`TIM_CCR4
(
TIM2
)

	)

350 
	#TIM3_CCR4
 
	`TIM_CCR4
(
TIM3
)

	)

351 
	#TIM4_CCR4
 
	`TIM_CCR4
(
TIM4
)

	)

352 
	#TIM5_CCR4
 
	`TIM_CCR4
(
TIM5
)

	)

353 
	#TIM8_CCR4
 
	`TIM_CCR4
(
TIM8
)

	)

356 
	#TIM_BDTR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x44)

	)

357 
	#TIM1_BDTR
 
	`TIM_BDTR
(
TIM1
)

	)

358 
	#TIM8_BDTR
 
	`TIM_BDTR
(
TIM8
)

	)

359 
	#TIM15_BDTR
 
	`TIM_BDTR
(
TIM15
)

	)

360 
	#TIM16_BDTR
 
	`TIM_BDTR
(
TIM16
)

	)

361 
	#TIM17_BDTR
 
	`TIM_BDTR
(
TIM17
)

	)

364 
	#TIM_DCR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x48)

	)

365 
	#TIM1_DCR
 
	`TIM_DCR
(
TIM1
)

	)

366 
	#TIM2_DCR
 
	`TIM_DCR
(
TIM2
)

	)

367 
	#TIM3_DCR
 
	`TIM_DCR
(
TIM3
)

	)

368 
	#TIM4_DCR
 
	`TIM_DCR
(
TIM4
)

	)

369 
	#TIM5_DCR
 
	`TIM_DCR
(
TIM5
)

	)

370 
	#TIM8_DCR
 
	`TIM_DCR
(
TIM8
)

	)

371 
	#TIM15_DCR
 
	`TIM_DCR
(
TIM15
)

	)

372 
	#TIM16_DCR
 
	`TIM_DCR
(
TIM16
)

	)

373 
	#TIM17_DCR
 
	`TIM_DCR
(
TIM17
)

	)

376 
	#TIM_DMAR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x4C)

	)

377 
	#TIM1_DMAR
 
	`TIM_DMAR
(
TIM1
)

	)

378 
	#TIM2_DMAR
 
	`TIM_DMAR
(
TIM2
)

	)

379 
	#TIM3_DMAR
 
	`TIM_DMAR
(
TIM3
)

	)

380 
	#TIM4_DMAR
 
	`TIM_DMAR
(
TIM4
)

	)

381 
	#TIM5_DMAR
 
	`TIM_DMAR
(
TIM5
)

	)

382 
	#TIM8_DMAR
 
	`TIM_DMAR
(
TIM8
)

	)

383 
	#TIM15_DMAR
 
	`TIM_DMAR
(
TIM15
)

	)

384 
	#TIM16_DMAR
 
	`TIM_DMAR
(
TIM16
)

	)

385 
	#TIM17_DMAR
 
	`TIM_DMAR
(
TIM17
)

	)

395 
	#TIM_CR1_CKD_CK_INT
 (0x0 << 8)

	)

396 
	#TIM_CR1_CKD_CK_INT_MUL_2
 (0x1 << 8)

	)

397 
	#TIM_CR1_CKD_CK_INT_MUL_4
 (0x2 << 8)

	)

398 
	#TIM_CR1_CKD_CK_INT_MASK
 (0x3 << 8)

	)

402 
	#TIM_CR1_ARPE
 (1 << 7)

	)

410 
	#TIM_CR1_CMS_EDGE
 (0x0 << 5)

	)

411 
	#TIM_CR1_CMS_CENTER_1
 (0x1 << 5)

	)

412 
	#TIM_CR1_CMS_CENTER_2
 (0x2 << 5)

	)

413 
	#TIM_CR1_CMS_CENTER_3
 (0x3 << 5)

	)

414 
	#TIM_CR1_CMS_MASK
 (0x3 << 5)

	)

423 
	#TIM_CR1_DIR_UP
 (0 << 4)

	)

424 
	#TIM_CR1_DIR_DOWN
 (1 << 4)

	)

428 
	#TIM_CR1_OPM
 (1 << 3)

	)

431 
	#TIM_CR1_URS
 (1 << 2)

	)

434 
	#TIM_CR1_UDIS
 (1 << 1)

	)

437 
	#TIM_CR1_CEN
 (1 << 0)

	)

447 
	#TIM_CR2_OIS4
 (1 << 14)

	)

450 
	#TIM_CR2_OIS3N
 (1 << 13)

	)

453 
	#TIM_CR2_OIS3
 (1 << 12)

	)

456 
	#TIM_CR2_OIS2N
 (1 << 11)

	)

459 
	#TIM_CR2_OIS2
 (1 << 10)

	)

462 
	#TIM_CR2_OIS1N
 (1 << 9)

	)

465 
	#TIM_CR2_OIS1
 (1 << 8)

	)

466 
	#TIM_CR2_OIS_MASK
 (0x7‡<< 8)

	)

470 
	#TIM_CR2_TI1S
 (1 << 7)

	)

478 
	#TIM_CR2_MMS_RESET
 (0x0 << 4)

	)

479 
	#TIM_CR2_MMS_ENABLE
 (0x1 << 4)

	)

480 
	#TIM_CR2_MMS_UPDATE
 (0x2 << 4)

	)

481 
	#TIM_CR2_MMS_COMPARE_PULSE
 (0x3 << 4)

	)

482 
	#TIM_CR2_MMS_COMPARE_OC1REF
 (0x4 << 4)

	)

483 
	#TIM_CR2_MMS_COMPARE_OC2REF
 (0x5 << 4)

	)

484 
	#TIM_CR2_MMS_COMPARE_OC3REF
 (0x6 << 4)

	)

485 
	#TIM_CR2_MMS_COMPARE_OC4REF
 (0x7 << 4)

	)

486 
	#TIM_CR2_MMS_MASK
 (0x7 << 4)

	)

490 
	#TIM_CR2_CCDS
 (1 << 3)

	)

493 
	#TIM_CR2_CCUS
 (1 << 2)

	)

496 
	#TIM_CR2_CCPC
 (1 << 0)

	)

501 
	#TIM_SMCR_ETP
 (1 << 15)

	)

504 
	#TIM_SMCR_ECE
 (1 << 14)

	)

507 
	#TIM_SMCR_ETPS_OFF
 (0x0 << 12)

	)

508 
	#TIM_SMCR_ETPS_ETRP_DIV_2
 (0x1 << 12)

	)

509 
	#TIM_SMCR_ETPS_ETRP_DIV_4
 (0x2 << 12)

	)

510 
	#TIM_SMCR_ETPS_ETRP_DIV_8
 (0x3 << 12)

	)

511 
	#TIM_SMCR_ETPS_MASK
 (0X3 << 12)

	)

514 
	#TIM_SMCR_ETF_OFF
 (0x0 << 8)

	)

515 
	#TIM_SMCR_ETF_CK_INT_N_2
 (0x1 << 8)

	)

516 
	#TIM_SMCR_ETF_CK_INT_N_4
 (0x2 << 8)

	)

517 
	#TIM_SMCR_ETF_CK_INT_N_8
 (0x3 << 8)

	)

518 
	#TIM_SMCR_ETF_DTS_DIV_2_N_6
 (0x4 << 8)

	)

519 
	#TIM_SMCR_ETF_DTS_DIV_2_N_8
 (0x5 << 8)

	)

520 
	#TIM_SMCR_ETF_DTS_DIV_4_N_6
 (0x6 << 8)

	)

521 
	#TIM_SMCR_ETF_DTS_DIV_4_N_8
 (0x7 << 8)

	)

522 
	#TIM_SMCR_ETF_DTS_DIV_8_N_6
 (0x8 << 8)

	)

523 
	#TIM_SMCR_ETF_DTS_DIV_8_N_8
 (0x9 << 8)

	)

524 
	#TIM_SMCR_ETF_DTS_DIV_16_N_5
 (0xA << 8)

	)

525 
	#TIM_SMCR_ETF_DTS_DIV_16_N_6
 (0xB << 8)

	)

526 
	#TIM_SMCR_ETF_DTS_DIV_16_N_8
 (0xC << 8)

	)

527 
	#TIM_SMCR_ETF_DTS_DIV_32_N_5
 (0xD << 8)

	)

528 
	#TIM_SMCR_ETF_DTS_DIV_32_N_6
 (0xE << 8)

	)

529 
	#TIM_SMCR_ETF_DTS_DIV_32_N_8
 (0xF << 8)

	)

530 
	#TIM_SMCR_ETF_MASK
 (0xF << 8)

	)

533 
	#TIM_SMCR_MSM
 (1 << 7)

	)

541 
	#TIM_SMCR_TS_ITR0
 (0x0 << 4)

	)

543 
	#TIM_SMCR_TS_ITR1
 (0x1 << 4)

	)

545 
	#TIM_SMCR_TS_ITR2
 (0x2 << 4)

	)

547 
	#TIM_SMCR_TS_ITR3
 (0x3 << 4)

	)

549 
	#TIM_SMCR_TS_TI1F_ED
 (0x4 << 4)

	)

551 
	#TIM_SMCR_TS_TI1FP1
 (0x5 << 4)

	)

553 
	#TIM_SMCR_TS_TI2FP2
 (0x6 << 4)

	)

555 
	#TIM_SMCR_TS_ETRF
 (0x7 << 4)

	)

556 
	#TIM_SMCR_TS_MASK
 (0x7 << 4)

	)

565 
	#TIM_SMCR_SMS_OFF
 (0x0 << 0)

	)

568 
	#TIM_SMCR_SMS_EM1
 (0x1 << 0)

	)

571 
	#TIM_SMCR_SMS_EM2
 (0x2 << 0)

	)

574 
	#TIM_SMCR_SMS_EM3
 (0x3 << 0)

	)

578 
	#TIM_SMCR_SMS_RM
 (0x4 << 0)

	)

582 
	#TIM_SMCR_SMS_GM
 (0x5 << 0)

	)

584 
	#TIM_SMCR_SMS_TM
 (0x6 << 0)

	)

588 
	#TIM_SMCR_SMS_ECM1
 (0x7 << 0)

	)

589 
	#TIM_SMCR_SMS_MASK
 (0x7 << 0)

	)

600 
	#TIM_DIER_TDE
 (1 << 14)

	)

603 
	#TIM_DIER_COMDE
 (1 << 13)

	)

606 
	#TIM_DIER_CC4DE
 (1 << 12)

	)

609 
	#TIM_DIER_CC3DE
 (1 << 11)

	)

612 
	#TIM_DIER_CC2DE
 (1 << 10)

	)

615 
	#TIM_DIER_CC1DE
 (1 << 9)

	)

618 
	#TIM_DIER_UDE
 (1 << 8)

	)

621 
	#TIM_DIER_BIE
 (1 << 7)

	)

624 
	#TIM_DIER_TIE
 (1 << 6)

	)

627 
	#TIM_DIER_COMIE
 (1 << 5)

	)

630 
	#TIM_DIER_CC4IE
 (1 << 4)

	)

633 
	#TIM_DIER_CC3IE
 (1 << 3)

	)

636 
	#TIM_DIER_CC2IE
 (1 << 2)

	)

639 
	#TIM_DIER_CC1IE
 (1 << 1)

	)

642 
	#TIM_DIER_UIE
 (1 << 0)

	)

653 
	#TIM_SR_CC4OF
 (1 << 12)

	)

656 
	#TIM_SR_CC3OF
 (1 << 11)

	)

659 
	#TIM_SR_CC2OF
 (1 << 10)

	)

662 
	#TIM_SR_CC1OF
 (1 << 9)

	)

665 
	#TIM_SR_BIF
 (1 << 7)

	)

668 
	#TIM_SR_TIF
 (1 << 6)

	)

671 
	#TIM_SR_COMIF
 (1 << 5)

	)

674 
	#TIM_SR_CC4IF
 (1 << 4)

	)

677 
	#TIM_SR_CC3IF
 (1 << 3)

	)

680 
	#TIM_SR_CC2IF
 (1 << 2)

	)

683 
	#TIM_SR_CC1IF
 (1 << 1)

	)

686 
	#TIM_SR_UIF
 (1 << 0)

	)

698 
	#TIM_EGR_BG
 (1 << 7)

	)

701 
	#TIM_EGR_TG
 (1 << 6)

	)

704 
	#TIM_EGR_COMG
 (1 << 5)

	)

707 
	#TIM_EGR_CC4G
 (1 << 4)

	)

710 
	#TIM_EGR_CC3G
 (1 << 3)

	)

713 
	#TIM_EGR_CC2G
 (1 << 2)

	)

716 
	#TIM_EGR_CC1G
 (1 << 1)

	)

719 
	#TIM_EGR_UG
 (1 << 0)

	)

727 
	#TIM_CCMR1_OC2CE
 (1 << 15)

	)

730 
	#TIM_CCMR1_OC2M_FROZEN
 (0x0 << 12)

	)

731 
	#TIM_CCMR1_OC2M_ACTIVE
 (0x1 << 12)

	)

732 
	#TIM_CCMR1_OC2M_INACTIVE
 (0x2 << 12)

	)

733 
	#TIM_CCMR1_OC2M_TOGGLE
 (0x3 << 12)

	)

734 
	#TIM_CCMR1_OC2M_FORCE_LOW
 (0x4 << 12)

	)

735 
	#TIM_CCMR1_OC2M_FORCE_HIGH
 (0x5 << 12)

	)

736 
	#TIM_CCMR1_OC2M_PWM1
 (0x6 << 12)

	)

737 
	#TIM_CCMR1_OC2M_PWM2
 (0x7 << 12)

	)

738 
	#TIM_CCMR1_OC2M_MASK
 (0x7 << 12)

	)

741 
	#TIM_CCMR1_OC2PE
 (1 << 11)

	)

744 
	#TIM_CCMR1_OC2FE
 (1 << 10)

	)

749 
	#TIM_CCMR1_CC2S_OUT
 (0x0 << 8)

	)

750 
	#TIM_CCMR1_CC2S_IN_TI2
 (0x1 << 8)

	)

751 
	#TIM_CCMR1_CC2S_IN_TI1
 (0x2 << 8)

	)

752 
	#TIM_CCMR1_CC2S_IN_TRC
 (0x3 << 8)

	)

753 
	#TIM_CCMR1_CC2S_MASK
 (0x3 << 8)

	)

756 
	#TIM_CCMR1_OC1CE
 (1 << 7)

	)

759 
	#TIM_CCMR1_OC1M_FROZEN
 (0x0 << 4)

	)

760 
	#TIM_CCMR1_OC1M_ACTIVE
 (0x1 << 4)

	)

761 
	#TIM_CCMR1_OC1M_INACTIVE
 (0x2 << 4)

	)

762 
	#TIM_CCMR1_OC1M_TOGGLE
 (0x3 << 4)

	)

763 
	#TIM_CCMR1_OC1M_FORCE_LOW
 (0x4 << 4)

	)

764 
	#TIM_CCMR1_OC1M_FORCE_HIGH
 (0x5 << 4)

	)

765 
	#TIM_CCMR1_OC1M_PWM1
 (0x6 << 4)

	)

766 
	#TIM_CCMR1_OC1M_PWM2
 (0x7 << 4)

	)

767 
	#TIM_CCMR1_OC1M_MASK
 (0x7 << 4)

	)

770 
	#TIM_CCMR1_OC1PE
 (1 << 3)

	)

773 
	#TIM_CCMR1_OC1FE
 (1 << 2)

	)

778 
	#TIM_CCMR1_CC1S_OUT
 (0x0 << 0)

	)

779 
	#TIM_CCMR1_CC1S_IN_TI2
 (0x2 << 0)

	)

780 
	#TIM_CCMR1_CC1S_IN_TI1
 (0x1 << 0)

	)

781 
	#TIM_CCMR1_CC1S_IN_TRC
 (0x3 << 0)

	)

782 
	#TIM_CCMR1_CC1S_MASK
 (0x3 << 0)

	)

787 
	#TIM_CCMR1_IC2F_OFF
 (0x0 << 12)

	)

788 
	#TIM_CCMR1_IC2F_CK_INT_N_2
 (0x1 << 12)

	)

789 
	#TIM_CCMR1_IC2F_CK_INT_N_4
 (0x2 << 12)

	)

790 
	#TIM_CCMR1_IC2F_CK_INT_N_8
 (0x3 << 12)

	)

791 
	#TIM_CCMR1_IC2F_DTF_DIV_2_N_6
 (0x4 << 12)

	)

792 
	#TIM_CCMR1_IC2F_DTF_DIV_2_N_8
 (0x5 << 12)

	)

793 
	#TIM_CCMR1_IC2F_DTF_DIV_4_N_6
 (0x6 << 12)

	)

794 
	#TIM_CCMR1_IC2F_DTF_DIV_4_N_8
 (0x7 << 12)

	)

795 
	#TIM_CCMR1_IC2F_DTF_DIV_8_N_6
 (0x8 << 12)

	)

796 
	#TIM_CCMR1_IC2F_DTF_DIV_8_N_8
 (0x9 << 12)

	)

797 
	#TIM_CCMR1_IC2F_DTF_DIV_16_N_5
 (0xA << 12)

	)

798 
	#TIM_CCMR1_IC2F_DTF_DIV_16_N_6
 (0xB << 12)

	)

799 
	#TIM_CCMR1_IC2F_DTF_DIV_16_N_8
 (0xC << 12)

	)

800 
	#TIM_CCMR1_IC2F_DTF_DIV_32_N_5
 (0xD << 12)

	)

801 
	#TIM_CCMR1_IC2F_DTF_DIV_32_N_6
 (0xE << 12)

	)

802 
	#TIM_CCMR1_IC2F_DTF_DIV_32_N_8
 (0xF << 12)

	)

803 
	#TIM_CCMR1_IC2F_MASK
 (0xF << 12)

	)

806 
	#TIM_CCMR1_IC2PSC_OFF
 (0x0 << 10)

	)

807 
	#TIM_CCMR1_IC2PSC_2
 (0x1 << 10)

	)

808 
	#TIM_CCMR1_IC2PSC_4
 (0x2 << 10)

	)

809 
	#TIM_CCMR1_IC2PSC_8
 (0x3 << 10)

	)

810 
	#TIM_CCMR1_IC2PSC_MASK
 (0x3 << 10)

	)

813 
	#TIM_CCMR1_IC1F_OFF
 (0x0 << 4)

	)

814 
	#TIM_CCMR1_IC1F_CK_INT_N_2
 (0x1 << 4)

	)

815 
	#TIM_CCMR1_IC1F_CK_INT_N_4
 (0x2 << 4)

	)

816 
	#TIM_CCMR1_IC1F_CK_INT_N_8
 (0x3 << 4)

	)

817 
	#TIM_CCMR1_IC1F_DTF_DIV_2_N_6
 (0x4 << 4)

	)

818 
	#TIM_CCMR1_IC1F_DTF_DIV_2_N_8
 (0x5 << 4)

	)

819 
	#TIM_CCMR1_IC1F_DTF_DIV_4_N_6
 (0x6 << 4)

	)

820 
	#TIM_CCMR1_IC1F_DTF_DIV_4_N_8
 (0x7 << 4)

	)

821 
	#TIM_CCMR1_IC1F_DTF_DIV_8_N_6
 (0x8 << 4)

	)

822 
	#TIM_CCMR1_IC1F_DTF_DIV_8_N_8
 (0x9 << 4)

	)

823 
	#TIM_CCMR1_IC1F_DTF_DIV_16_N_5
 (0xA << 4)

	)

824 
	#TIM_CCMR1_IC1F_DTF_DIV_16_N_6
 (0xB << 4)

	)

825 
	#TIM_CCMR1_IC1F_DTF_DIV_16_N_8
 (0xC << 4)

	)

826 
	#TIM_CCMR1_IC1F_DTF_DIV_32_N_5
 (0xD << 4)

	)

827 
	#TIM_CCMR1_IC1F_DTF_DIV_32_N_6
 (0xE << 4)

	)

828 
	#TIM_CCMR1_IC1F_DTF_DIV_32_N_8
 (0xF << 4)

	)

829 
	#TIM_CCMR1_IC1F_MASK
 (0xF << 4)

	)

832 
	#TIM_CCMR1_IC1PSC_OFF
 (0x0 << 2)

	)

833 
	#TIM_CCMR1_IC1PSC_2
 (0x1 << 2)

	)

834 
	#TIM_CCMR1_IC1PSC_4
 (0x2 << 2)

	)

835 
	#TIM_CCMR1_IC1PSC_8
 (0x3 << 2)

	)

836 
	#TIM_CCMR1_IC1PSC_MASK
 (0x3 << 2)

	)

843 
	#TIM_CCMR2_OC4CE
 (1 << 15)

	)

846 
	#TIM_CCMR2_OC4M_FROZEN
 (0x0 << 12)

	)

847 
	#TIM_CCMR2_OC4M_ACTIVE
 (0x1 << 12)

	)

848 
	#TIM_CCMR2_OC4M_INACTIVE
 (0x2 << 12)

	)

849 
	#TIM_CCMR2_OC4M_TOGGLE
 (0x3 << 12)

	)

850 
	#TIM_CCMR2_OC4M_FORCE_LOW
 (0x4 << 12)

	)

851 
	#TIM_CCMR2_OC4M_FORCE_HIGH
 (0x5 << 12)

	)

852 
	#TIM_CCMR2_OC4M_PWM1
 (0x6 << 12)

	)

853 
	#TIM_CCMR2_OC4M_PWM2
 (0x7 << 12)

	)

854 
	#TIM_CCMR2_OC4M_MASK
 (0x7 << 12)

	)

857 
	#TIM_CCMR2_OC4PE
 (1 << 11)

	)

860 
	#TIM_CCMR2_OC4FE
 (1 << 10)

	)

865 
	#TIM_CCMR2_CC4S_OUT
 (0x0 << 8)

	)

866 
	#TIM_CCMR2_CC4S_IN_TI4
 (0x1 << 8)

	)

867 
	#TIM_CCMR2_CC4S_IN_TI3
 (0x2 << 8)

	)

868 
	#TIM_CCMR2_CC4S_IN_TRC
 (0x3 << 8)

	)

869 
	#TIM_CCMR2_CC4S_MASK
 (0x3 << 8)

	)

872 
	#TIM_CCMR2_OC3CE
 (1 << 7)

	)

875 
	#TIM_CCMR2_OC3M_FROZEN
 (0x0 << 4)

	)

876 
	#TIM_CCMR2_OC3M_ACTIVE
 (0x1 << 4)

	)

877 
	#TIM_CCMR2_OC3M_INACTIVE
 (0x2 << 4)

	)

878 
	#TIM_CCMR2_OC3M_TOGGLE
 (0x3 << 4)

	)

879 
	#TIM_CCMR2_OC3M_FORCE_LOW
 (0x4 << 4)

	)

880 
	#TIM_CCMR2_OC3M_FORCE_HIGH
 (0x5 << 4)

	)

881 
	#TIM_CCMR2_OC3M_PWM1
 (0x6 << 4)

	)

882 
	#TIM_CCMR2_OC3M_PWM2
 (0x7 << 4)

	)

883 
	#TIM_CCMR2_OC3M_MASK
 (0x7 << 4)

	)

886 
	#TIM_CCMR2_OC3PE
 (1 << 3)

	)

889 
	#TIM_CCMR2_OC3FE
 (1 << 2)

	)

894 
	#TIM_CCMR2_CC3S_OUT
 (0x0 << 0)

	)

895 
	#TIM_CCMR2_CC3S_IN_TI3
 (0x1 << 0)

	)

896 
	#TIM_CCMR2_CC3S_IN_TI4
 (0x2 << 0)

	)

897 
	#TIM_CCMR2_CC3S_IN_TRC
 (0x3 << 0)

	)

898 
	#TIM_CCMR2_CC3S_MASK
 (0x3 << 0)

	)

903 
	#TIM_CCMR2_IC4F_OFF
 (0x0 << 12)

	)

904 
	#TIM_CCMR2_IC4F_CK_INT_N_2
 (0x1 << 12)

	)

905 
	#TIM_CCMR2_IC4F_CK_INT_N_4
 (0x2 << 12)

	)

906 
	#TIM_CCMR2_IC4F_CK_INT_N_8
 (0x3 << 12)

	)

907 
	#TIM_CCMR2_IC4F_DTF_DIV_2_N_6
 (0x4 << 12)

	)

908 
	#TIM_CCMR2_IC4F_DTF_DIV_2_N_8
 (0x5 << 12)

	)

909 
	#TIM_CCMR2_IC4F_DTF_DIV_4_N_6
 (0x6 << 12)

	)

910 
	#TIM_CCMR2_IC4F_DTF_DIV_4_N_8
 (0x7 << 12)

	)

911 
	#TIM_CCMR2_IC4F_DTF_DIV_8_N_6
 (0x8 << 12)

	)

912 
	#TIM_CCMR2_IC4F_DTF_DIV_8_N_8
 (0x9 << 12)

	)

913 
	#TIM_CCMR2_IC4F_DTF_DIV_16_N_5
 (0xA << 12)

	)

914 
	#TIM_CCMR2_IC4F_DTF_DIV_16_N_6
 (0xB << 12)

	)

915 
	#TIM_CCMR2_IC4F_DTF_DIV_16_N_8
 (0xC << 12)

	)

916 
	#TIM_CCMR2_IC4F_DTF_DIV_32_N_5
 (0xD << 12)

	)

917 
	#TIM_CCMR2_IC4F_DTF_DIV_32_N_6
 (0xE << 12)

	)

918 
	#TIM_CCMR2_IC4F_DTF_DIV_32_N_8
 (0xF << 12)

	)

919 
	#TIM_CCMR2_IC4F_MASK
 (0xF << 12)

	)

922 
	#TIM_CCMR2_IC4PSC_OFF
 (0x0 << 10)

	)

923 
	#TIM_CCMR2_IC4PSC_2
 (0x1 << 10)

	)

924 
	#TIM_CCMR2_IC4PSC_4
 (0x2 << 10)

	)

925 
	#TIM_CCMR2_IC4PSC_8
 (0x3 << 10)

	)

926 
	#TIM_CCMR2_IC4PSC_MASK
 (0x3 << 10)

	)

929 
	#TIM_CCMR2_IC3F_OFF
 (0x0 << 4)

	)

930 
	#TIM_CCMR2_IC3F_CK_INT_N_2
 (0x1 << 4)

	)

931 
	#TIM_CCMR2_IC3F_CK_INT_N_4
 (0x2 << 4)

	)

932 
	#TIM_CCMR2_IC3F_CK_INT_N_8
 (0x3 << 4)

	)

933 
	#TIM_CCMR2_IC3F_DTF_DIV_2_N_6
 (0x4 << 4)

	)

934 
	#TIM_CCMR2_IC3F_DTF_DIV_2_N_8
 (0x5 << 4)

	)

935 
	#TIM_CCMR2_IC3F_DTF_DIV_4_N_6
 (0x6 << 4)

	)

936 
	#TIM_CCMR2_IC3F_DTF_DIV_4_N_8
 (0x7 << 4)

	)

937 
	#TIM_CCMR2_IC3F_DTF_DIV_8_N_6
 (0x8 << 4)

	)

938 
	#TIM_CCMR2_IC3F_DTF_DIV_8_N_8
 (0x9 << 4)

	)

939 
	#TIM_CCMR2_IC3F_DTF_DIV_16_N_5
 (0xA << 4)

	)

940 
	#TIM_CCMR2_IC3F_DTF_DIV_16_N_6
 (0xB << 4)

	)

941 
	#TIM_CCMR2_IC3F_DTF_DIV_16_N_8
 (0xC << 4)

	)

942 
	#TIM_CCMR2_IC3F_DTF_DIV_32_N_5
 (0xD << 4)

	)

943 
	#TIM_CCMR2_IC3F_DTF_DIV_32_N_6
 (0xE << 4)

	)

944 
	#TIM_CCMR2_IC3F_DTF_DIV_32_N_8
 (0xF << 4)

	)

945 
	#TIM_CCMR2_IC3F_MASK
 (0xF << 4)

	)

948 
	#TIM_CCMR2_IC3PSC_OFF
 (0x0 << 2)

	)

949 
	#TIM_CCMR2_IC3PSC_2
 (0x1 << 2)

	)

950 
	#TIM_CCMR2_IC3PSC_4
 (0x2 << 2)

	)

951 
	#TIM_CCMR2_IC3PSC_8
 (0x3 << 2)

	)

952 
	#TIM_CCMR2_IC3PSC_MASK
 (0x3 << 2)

	)

957 
	#TIM_CCER_CC4NP
 (1 << 15)

	)

960 
	#TIM_CCER_CC4P
 (1 << 13)

	)

963 
	#TIM_CCER_CC4E
 (1 << 12)

	)

966 
	#TIM_CCER_CC3NP
 (1 << 11)

	)

969 
	#TIM_CCER_CC3NE
 (1 << 10)

	)

972 
	#TIM_CCER_CC3P
 (1 << 9)

	)

975 
	#TIM_CCER_CC3E
 (1 << 8)

	)

978 
	#TIM_CCER_CC2NP
 (1 << 7)

	)

981 
	#TIM_CCER_CC2NE
 (1 << 6)

	)

984 
	#TIM_CCER_CC2P
 (1 << 5)

	)

987 
	#TIM_CCER_CC2E
 (1 << 4)

	)

990 
	#TIM_CCER_CC1NP
 (1 << 3)

	)

993 
	#TIM_CCER_CC1NE
 (1 << 2)

	)

996 
	#TIM_CCER_CC1P
 (1 << 1)

	)

999 
	#TIM_CCER_CC1E
 (1 << 0)

	)

1036 
	#TIM_BDTR_MOE
 (1 << 15)

	)

1039 
	#TIM_BDTR_AOE
 (1 << 14)

	)

1042 
	#TIM_BDTR_BKP
 (1 << 13)

	)

1045 
	#TIM_BDTR_BKE
 (1 << 12)

	)

1048 
	#TIM_BDTR_OSSR
 (1 << 11)

	)

1051 
	#TIM_BDTR_OSSI
 (1 << 10)

	)

1059 
	#TIM_BDTR_LOCK_OFF
 (0x0 << 8)

	)

1060 
	#TIM_BDTR_LOCK_LEVEL_1
 (0x1 << 8)

	)

1061 
	#TIM_BDTR_LOCK_LEVEL_2
 (0x2 << 8)

	)

1062 
	#TIM_BDTR_LOCK_LEVEL_3
 (0x3 << 8)

	)

1063 
	#TIM_BDTR_LOCK_MASK
 (0x3 << 8)

	)

1067 
	#TIM_BDTR_DTG_MASK
 0x00FF

	)

1072 
	#TIM_BDTR_DBL_MASK
 (0x1F << 8)

	)

1075 
	#TIM_BDTR_DBA_MASK
 (0x1F << 0)

	)

1084 
	etim_oc_id
 {

1085 
	mTIM_OC1
 = 0,

1086 
	mTIM_OC1N
,

1087 
	mTIM_OC2
,

1088 
	mTIM_OC2N
,

1089 
	mTIM_OC3
,

1090 
	mTIM_OC3N
,

1091 
	mTIM_OC4
,

1095 
	etim_oc_mode
 {

1096 
	mTIM_OCM_FROZEN
,

1097 
	mTIM_OCM_ACTIVE
,

1098 
	mTIM_OCM_INACTIVE
,

1099 
	mTIM_OCM_TOGGLE
,

1100 
	mTIM_OCM_FORCE_LOW
,

1101 
	mTIM_OCM_FORCE_HIGH
,

1102 
	mTIM_OCM_PWM1
,

1103 
	mTIM_OCM_PWM2
,

1107 
	etim_ic_id
 {

1108 
	mTIM_IC1
,

1109 
	mTIM_IC2
,

1110 
	mTIM_IC3
,

1111 
	mTIM_IC4
,

1121 
	etim_ic_fûãr
 {

1122 
	mTIM_IC_OFF
,

1123 
	mTIM_IC_CK_INT_N_2
,

1124 
	mTIM_IC_CK_INT_N_4
,

1125 
	mTIM_IC_CK_INT_N_8
,

1126 
	mTIM_IC_DTF_DIV_2_N_6
,

1127 
	mTIM_IC_DTF_DIV_2_N_8
,

1128 
	mTIM_IC_DTF_DIV_4_N_6
,

1129 
	mTIM_IC_DTF_DIV_4_N_8
,

1130 
	mTIM_IC_DTF_DIV_8_N_6
,

1131 
	mTIM_IC_DTF_DIV_8_N_8
,

1132 
	mTIM_IC_DTF_DIV_16_N_5
,

1133 
	mTIM_IC_DTF_DIV_16_N_6
,

1134 
	mTIM_IC_DTF_DIV_16_N_8
,

1135 
	mTIM_IC_DTF_DIV_32_N_5
,

1136 
	mTIM_IC_DTF_DIV_32_N_6
,

1137 
	mTIM_IC_DTF_DIV_32_N_8
,

1143 
	etim_ic_psc
 {

1144 
	mTIM_IC_PSC_OFF
,

1145 
	mTIM_IC_PSC_2
,

1146 
	mTIM_IC_PSC_4
,

1147 
	mTIM_IC_PSC_8
,

1154 
	etim_ic_öput
 {

1155 
	mTIM_IC_OUT
 = 0,

1156 
	mTIM_IC_IN_TI1
 = 1,

1157 
	mTIM_IC_IN_TI2
 = 2,

1158 
	mTIM_IC_IN_TRC
 = 3,

1159 
	mTIM_IC_IN_TI3
 = 5,

1160 
	mTIM_IC_IN_TI4
 = 6,

1164 
	etim_ë_pﬁ
 {

1165 
	mTIM_ET_RISING
,

1166 
	mTIM_ET_FALLING
,

1171 
BEGIN_DECLS


1173 
timî_íabÀ_úq
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
úq
);

1174 
timî_dißbÀ_úq
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
úq
);

1175 
boﬁ
 
timî_öãºu±_sour˚
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
);

1176 
boﬁ
 
timî_gë_Êag
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
);

1177 
timî_˛ór_Êag
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
);

1178 
timî_£t_mode
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
˛ock_div
,

1179 
uöt32_t
 
Æignmít
, uöt32_à
dúe˘i⁄
);

1180 
timî_£t_˛ock_divisi⁄
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
˛ock_div
);

1181 
timî_íabÀ_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
);

1182 
timî_dißbÀ_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
);

1183 
timî_£t_Æignmít
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Æignmít
);

1184 
timî_dúe˘i⁄_up
(
uöt32_t
 
timî_≥rùhîÆ
);

1185 
timî_dúe˘i⁄_down
(
uöt32_t
 
timî_≥rùhîÆ
);

1186 
timî_⁄e_shŸ_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1187 
timî_c⁄töuous_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1188 
timî_upd©e_⁄_™y
(
uöt32_t
 
timî_≥rùhîÆ
);

1189 
timî_upd©e_⁄_ovîÊow
(
uöt32_t
 
timî_≥rùhîÆ
);

1190 
timî_íabÀ_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
);

1191 
timî_dißbÀ_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
);

1192 
timî_íabÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
);

1193 
timî_dißbÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
);

1194 
timî_£t_ouçut_idÀ_°©e
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
ouçuts
);

1195 
timî_ª£t_ouçut_idÀ_°©e
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
ouçuts
);

1196 
timî_£t_ti1_ch123_x‹
(
uöt32_t
 
timî_≥rùhîÆ
);

1197 
timî_£t_ti1_ch1
(
uöt32_t
 
timî_≥rùhîÆ
);

1198 
timî_£t_ma°î_mode
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
mode
);

1199 
timî_£t_dma_⁄_com∑ª_evít
(
uöt32_t
 
timî_≥rùhîÆ
);

1200 
timî_£t_dma_⁄_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
);

1201 
timî_íabÀ_com∑ª_c⁄åﬁ_upd©e_⁄_åiggî
(
uöt32_t
 
timî_≥rùhîÆ
);

1202 
timî_dißbÀ_com∑ª_c⁄åﬁ_upd©e_⁄_åiggî
(
uöt32_t
 
timî_≥rùhîÆ
);

1203 
timî_íabÀ_¥ñﬂd_com∂emíåy_íabÀ_bôs
(
uöt32_t
 
timî_≥rùhîÆ
);

1204 
timî_dißbÀ_¥ñﬂd_com∂emíåy_íabÀ_bôs
(
uöt32_t
 
timî_≥rùhîÆ
);

1205 
timî_£t_¥esˇÀr
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
vÆue
);

1206 
timî_£t_ª≥tôi⁄_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
vÆue
);

1207 
timî_£t_≥riod
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
≥riod
);

1208 
timî_íabÀ_oc_˛ór
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1209 
timî_dißbÀ_oc_˛ór
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1210 
timî_£t_oc_Á°_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1211 
timî_£t_oc_¶ow_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1212 
timî_£t_oc_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
,

1213 
tim_oc_mode
 
oc_mode
);

1214 
timî_íabÀ_oc_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1215 
timî_dißbÀ_oc_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1216 
timî_£t_oc_pﬁ¨ôy_high
(
uöt32_t
 
timî_≥rùhîÆ
,

1217 
tim_oc_id
 
oc_id
);

1218 
timî_£t_oc_pﬁ¨ôy_low
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1219 
timî_íabÀ_oc_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1220 
timî_dißbÀ_oc_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
);

1221 
timî_£t_oc_idÀ_°©e_£t
(
uöt32_t
 
timî_≥rùhîÆ
,

1222 
tim_oc_id
 
oc_id
);

1223 
timî_£t_oc_idÀ_°©e_un£t
(
uöt32_t
 
timî_≥rùhîÆ
,

1224 
tim_oc_id
 
oc_id
);

1225 
timî_£t_oc_vÆue
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
,

1226 
uöt32_t
 
vÆue
);

1227 
timî_íabÀ_bªak_maö_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
);

1228 
timî_dißbÀ_bªak_maö_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
);

1229 
timî_íabÀ_bªak_autom©ic_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
);

1230 
timî_dißbÀ_bªak_autom©ic_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
);

1231 
timî_£t_bªak_pﬁ¨ôy_high
(
uöt32_t
 
timî_≥rùhîÆ
);

1232 
timî_£t_bªak_pﬁ¨ôy_low
(
uöt32_t
 
timî_≥rùhîÆ
);

1233 
timî_íabÀ_bªak
(
uöt32_t
 
timî_≥rùhîÆ
);

1234 
timî_dißbÀ_bªak
(
uöt32_t
 
timî_≥rùhîÆ
);

1235 
timî_£t_íabÀd_off_°©e_ö_run_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1236 
timî_£t_dißbÀd_off_°©e_ö_run_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1237 
timî_£t_íabÀd_off_°©e_ö_idÀ_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1238 
timî_£t_dißbÀd_off_°©e_ö_idÀ_mode
(
uöt32_t
 
timî_≥rùhîÆ
);

1239 
timî_£t_bªak_lock
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
lock
);

1240 
timî_£t_dódtime
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
dódtime
);

1241 
timî_gíî©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
evít
);

1242 
uöt32_t
 
timî_gë_cou¡î
(uöt32_à
timî_≥rùhîÆ
);

1243 
timî_£t_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
cou¡
);

1245 
timî_ic_£t_fûãr
(
uöt32_t
 
timî
, 
tim_ic_id
 
ic
,

1246 
tim_ic_fûãr
 
Êt
);

1247 
timî_ic_£t_¥esˇÀr
(
uöt32_t
 
timî
, 
tim_ic_id
 
ic
,

1248 
tim_ic_psc
 
psc
);

1249 
timî_ic_£t_öput
(
uöt32_t
 
timî
, 
tim_ic_id
 
ic
,

1250 
tim_ic_öput
 
ö
);

1251 
timî_ic_íabÀ
(
uöt32_t
 
timî
, 
tim_ic_id
 
ic
);

1252 
timî_ic_dißbÀ
(
uöt32_t
 
timî
, 
tim_ic_id
 
ic
);

1254 
timî_¶ave_£t_fûãr
(
uöt32_t
 
timî
, 
tim_ic_fûãr
 
Êt
);

1255 
timî_¶ave_£t_¥esˇÀr
(
uöt32_t
 
timî
, 
tim_ic_psc
 
psc
);

1256 
timî_¶ave_£t_pﬁ¨ôy
(
uöt32_t
 
timî
, 
tim_ë_pﬁ
 
pﬁ
);

1257 
timî_¶ave_£t_mode
(
uöt32_t
 
timî
, 
uöt8_t
 
mode
);

1258 
timî_¶ave_£t_åiggî
(
uöt32_t
 
timî
, 
uöt8_t
 
åiggî
);

1260 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/timer_common_f24.h

31 #ifde‡
LIBOPENCM3_TIMER_H


33 #i‚de‡
LIBOPENCM3_TIMER_COMMON_F24_H


34 
	#LIBOPENCM3_TIMER_COMMON_F24_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/timî_comm⁄_Æl.h
>

44 
	#TIM_OR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x50)

	)

45 
	#TIM2_OR
 
	`TIM_OR
(
TIM2
)

	)

46 
	#TIM5_OR
 
	`TIM_OR
(
TIM5
)

	)

60 
	#TIM2_OR_ITR1_RMP_TIM8_TRGOU
 (0x0 << 10)

	)

62 
	#TIM2_OR_ITR1_RMP_PTP
 (0x1 << 10)

	)

64 
	#TIM2_OR_ITR1_RMP_OTG_FS_SOF
 (0x2 << 10)

	)

66 
	#TIM2_OR_ITR1_RMP_OTG_HS_SOF
 (0x3 << 10)

	)

68 
	#TIM2_OR_ITR1_RMP_MASK
 (0x3 << 10)

	)

81 
	#TIM5_OR_TI4_RMP_GPIO
 (0x0 << 6)

	)

83 
	#TIM5_OR_TI4_RMP_LSI
 (0x1 << 6)

	)

85 
	#TIM5_OR_TI4_RMP_LSE
 (0x2 << 6)

	)

87 
	#TIM5_OR_TI4_RMP_RTC
 (0x3 << 6)

	)

89 
	#TIM5_OR_TI4_RMP_MASK
 (0x3 << 6)

	)

92 
	etim_ic_pﬁ
 {

93 
	mTIM_IC_RISING
,

94 
	mTIM_IC_FALLING
,

95 
	mTIM_IC_BOTH
,

100 
BEGIN_DECLS


102 
timî_£t_›ti⁄
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
›ti⁄
);

103 
timî_ic_£t_pﬁ¨ôy
(
uöt32_t
 
timî
, 
tim_ic_id
 
ic
,

104 
tim_ic_pﬁ
 
pﬁ
);

106 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/usart_common_all.h

32 #i‡
deföed
(
LIBOPENCM3_USART_H
)

34 #i‚de‡
LIBOPENCM3_USART_COMMON_ALL_H


35 
	#LIBOPENCM3_USART_COMMON_ALL_H


	)

46 
	#USART_PARITY_NONE
 0x00

	)

47 
	#USART_PARITY_EVEN
 
USART_CR1_PCE


	)

48 
	#USART_PARITY_ODD
 (
USART_CR1_PS
 | 
USART_CR1_PCE
)

	)

50 
	#USART_PARITY_MASK
 (
USART_CR1_PS
 | 
USART_CR1_PCE
)

	)

58 
	#USART_MODE_RX
 
USART_CR1_RE


	)

59 
	#USART_MODE_TX
 
USART_CR1_TE


	)

60 
	#USART_MODE_TX_RX
 (
USART_CR1_RE
 | 
USART_CR1_TE
)

	)

62 
	#USART_MODE_MASK
 (
USART_CR1_RE
 | 
USART_CR1_TE
)

	)

69 
	#USART_STOPBITS_1
 
USART_CR2_STOPBITS_1


	)

70 
	#USART_STOPBITS_0_5
 
USART_CR2_STOPBITS_0_5


	)

71 
	#USART_STOPBITS_2
 
USART_CR2_STOPBITS_2


	)

72 
	#USART_STOPBITS_1_5
 
USART_CR2_STOPBITS_1_5


	)

76 
	#USART_CR2_STOPBITS_1
 (0x00 << 12Ë

	)

77 
	#USART_CR2_STOPBITS_0_5
 (0x01 << 12Ë

	)

78 
	#USART_CR2_STOPBITS_2
 (0x02 << 12Ë

	)

79 
	#USART_CR2_STOPBITS_1_5
 (0x03 << 12Ë

	)

80 
	#USART_CR2_STOPBITS_MASK
 (0x03 << 12)

	)

81 
	#USART_CR2_STOPBITS_SHIFT
 12

	)

90 
	#USART_FLOWCONTROL_NONE
 0x00

	)

91 
	#USART_FLOWCONTROL_RTS
 
USART_CR3_RTSE


	)

92 
	#USART_FLOWCONTROL_CTS
 
USART_CR3_CTSE


	)

93 
	#USART_FLOWCONTROL_RTS_CTS
 (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
)

	)

95 
	#USART_FLOWCONTROL_MASK
 (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
)

	)

99 
BEGIN_DECLS


101 
ußπ_£t_baudøã
(
uöt32_t
 
ußπ
, uöt32_à
baud
);

102 
ußπ_£t_d©abôs
(
uöt32_t
 
ußπ
, uöt32_à
bôs
);

103 
ußπ_£t_°›bôs
(
uöt32_t
 
ußπ
, uöt32_à
°›bôs
);

104 
ußπ_£t_∑rôy
(
uöt32_t
 
ußπ
, uöt32_à
∑rôy
);

105 
ußπ_£t_mode
(
uöt32_t
 
ußπ
, uöt32_à
mode
);

106 
ußπ_£t_Êow_c⁄åﬁ
(
uöt32_t
 
ußπ
, uöt32_à
Êowc⁄åﬁ
);

107 
ußπ_íabÀ
(
uöt32_t
 
ußπ
);

108 
ußπ_dißbÀ
(
uöt32_t
 
ußπ
);

109 
ußπ_£nd
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
);

110 
uöt16_t
 
ußπ_ªcv
(
uöt32_t
 
ußπ
);

111 
ußπ_waô_£nd_ªady
(
uöt32_t
 
ußπ
);

112 
ußπ_waô_ªcv_ªady
(
uöt32_t
 
ußπ
);

113 
ußπ_£nd_blockög
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
);

114 
uöt16_t
 
ußπ_ªcv_blockög
(
uöt32_t
 
ußπ
);

115 
ußπ_íabÀ_rx_dma
(
uöt32_t
 
ußπ
);

116 
ußπ_dißbÀ_rx_dma
(
uöt32_t
 
ußπ
);

117 
ußπ_íabÀ_tx_dma
(
uöt32_t
 
ußπ
);

118 
ußπ_dißbÀ_tx_dma
(
uöt32_t
 
ußπ
);

119 
ußπ_íabÀ_rx_öãºu±
(
uöt32_t
 
ußπ
);

120 
ußπ_dißbÀ_rx_öãºu±
(
uöt32_t
 
ußπ
);

121 
ußπ_íabÀ_tx_öãºu±
(
uöt32_t
 
ußπ
);

122 
ußπ_dißbÀ_tx_öãºu±
(
uöt32_t
 
ußπ
);

123 
ußπ_íabÀ_îr‹_öãºu±
(
uöt32_t
 
ußπ
);

124 
ußπ_dißbÀ_îr‹_öãºu±
(
uöt32_t
 
ußπ
);

125 
boﬁ
 
ußπ_gë_Êag
(
uöt32_t
 
ußπ
, uöt32_à
Êag
);

127 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/common/usart_common_f124.h

33 #i‡
deföed
(
LIBOPENCM3_USART_H
)

35 #i‚de‡
LIBOPENCM3_USART_COMMON_F124_H


36 
	#LIBOPENCM3_USART_COMMON_F124_H


	)

38 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_Æl.h
>

46 
	#USART1
 
USART1_BASE


	)

47 
	#USART2
 
USART2_BASE


	)

48 
	#USART3
 
USART3_BASE


	)

49 
	#UART4
 
UART4_BASE


	)

50 
	#UART5
 
UART5_BASE


	)

56 
	#USART_SR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x00)

	)

57 
	#USART1_SR
 
	`USART_SR
(
USART1_BASE
)

	)

58 
	#USART2_SR
 
	`USART_SR
(
USART2_BASE
)

	)

59 
	#USART3_SR
 
	`USART_SR
(
USART3_BASE
)

	)

60 
	#UART4_SR
 
	`USART_SR
(
UART4_BASE
)

	)

61 
	#UART5_SR
 
	`USART_SR
(
UART5_BASE
)

	)

64 
	#USART_DR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x04)

	)

65 
	#USART1_DR
 
	`USART_DR
(
USART1_BASE
)

	)

66 
	#USART2_DR
 
	`USART_DR
(
USART2_BASE
)

	)

67 
	#USART3_DR
 
	`USART_DR
(
USART3_BASE
)

	)

68 
	#UART4_DR
 
	`USART_DR
(
UART4_BASE
)

	)

69 
	#UART5_DR
 
	`USART_DR
(
UART5_BASE
)

	)

72 
	#USART_BRR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x08)

	)

73 
	#USART1_BRR
 
	`USART_BRR
(
USART1_BASE
)

	)

74 
	#USART2_BRR
 
	`USART_BRR
(
USART2_BASE
)

	)

75 
	#USART3_BRR
 
	`USART_BRR
(
USART3_BASE
)

	)

76 
	#UART4_BRR
 
	`USART_BRR
(
UART4_BASE
)

	)

77 
	#UART5_BRR
 
	`USART_BRR
(
UART5_BASE
)

	)

80 
	#USART_CR1
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x0c)

	)

81 
	#USART1_CR1
 
	`USART_CR1
(
USART1_BASE
)

	)

82 
	#USART2_CR1
 
	`USART_CR1
(
USART2_BASE
)

	)

83 
	#USART3_CR1
 
	`USART_CR1
(
USART3_BASE
)

	)

84 
	#UART4_CR1
 
	`USART_CR1
(
UART4_BASE
)

	)

85 
	#UART5_CR1
 
	`USART_CR1
(
UART5_BASE
)

	)

88 
	#USART_CR2
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x10)

	)

89 
	#USART1_CR2
 
	`USART_CR2
(
USART1_BASE
)

	)

90 
	#USART2_CR2
 
	`USART_CR2
(
USART2_BASE
)

	)

91 
	#USART3_CR2
 
	`USART_CR2
(
USART3_BASE
)

	)

92 
	#UART4_CR2
 
	`USART_CR2
(
UART4_BASE
)

	)

93 
	#UART5_CR2
 
	`USART_CR2
(
UART5_BASE
)

	)

96 
	#USART_CR3
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x14)

	)

97 
	#USART1_CR3
 
	`USART_CR3
(
USART1_BASE
)

	)

98 
	#USART2_CR3
 
	`USART_CR3
(
USART2_BASE
)

	)

99 
	#USART3_CR3
 
	`USART_CR3
(
USART3_BASE
)

	)

100 
	#UART4_CR3
 
	`USART_CR3
(
UART4_BASE
)

	)

101 
	#UART5_CR3
 
	`USART_CR3
(
UART5_BASE
)

	)

104 
	#USART_GTPR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x18)

	)

105 
	#USART1_GTPR
 
	`USART_GTPR
(
USART1_BASE
)

	)

106 
	#USART2_GTPR
 
	`USART_GTPR
(
USART2_BASE
)

	)

107 
	#USART3_GTPR
 
	`USART_GTPR
(
USART3_BASE
)

	)

108 
	#UART4_GTPR
 
	`USART_GTPR
(
UART4_BASE
)

	)

109 
	#UART5_GTPR
 
	`USART_GTPR
(
UART5_BASE
)

	)

118 
	#USART_FLAG_PE
 
USART_SR_PE


	)

119 
	#USART_FLAG_FE
 
USART_SR_FE


	)

120 
	#USART_FLAG_NF
 
USART_SR_NF


	)

121 
	#USART_FLAG_ORE
 
USART_SR_ORE


	)

122 
	#USART_FLAG_IDLE
 
USART_SR_IDLE


	)

123 
	#USART_FLAG_RXNE
 
USART_SR_RXNE


	)

124 
	#USART_FLAG_TC
 
USART_SR_TC


	)

125 
	#USART_FLAG_TXE
 
USART_SR_TXE


	)

137 
	#USART_SR_CTS
 (1 << 9)

	)

140 
	#USART_SR_LBD
 (1 << 8)

	)

143 
	#USART_SR_TXE
 (1 << 7)

	)

146 
	#USART_SR_TC
 (1 << 6)

	)

149 
	#USART_SR_RXNE
 (1 << 5)

	)

152 
	#USART_SR_IDLE
 (1 << 4)

	)

155 
	#USART_SR_ORE
 (1 << 3)

	)

158 
	#USART_SR_NE
 (1 << 2)

	)

161 
	#USART_SR_FE
 (1 << 1)

	)

164 
	#USART_SR_PE
 (1 << 0)

	)

170 
	#USART_DR_MASK
 0x1FF

	)

175 
	#USART_BRR_DIV_MANTISSA_MASK
 (0xFFF << 4)

	)

177 
	#USART_BRR_DIV_FRACTION_MASK
 0xF

	)

182 
	#USART_CR1_UE
 (1 << 13)

	)

185 
	#USART_CR1_M
 (1 << 12)

	)

188 
	#USART_CR1_WAKE
 (1 << 11)

	)

191 
	#USART_CR1_PCE
 (1 << 10)

	)

194 
	#USART_CR1_PS
 (1 << 9)

	)

197 
	#USART_CR1_PEIE
 (1 << 8)

	)

200 
	#USART_CR1_TXEIE
 (1 << 7)

	)

203 
	#USART_CR1_TCIE
 (1 << 6)

	)

206 
	#USART_CR1_RXNEIE
 (1 << 5)

	)

209 
	#USART_CR1_IDLEIE
 (1 << 4)

	)

212 
	#USART_CR1_TE
 (1 << 3)

	)

215 
	#USART_CR1_RE
 (1 << 2)

	)

218 
	#USART_CR1_RWU
 (1 << 1)

	)

221 
	#USART_CR1_SBK
 (1 << 0)

	)

226 
	#USART_CR2_LINEN
 (1 << 14)

	)

229 
	#USART_CR2_CLKEN
 (1 << 11)

	)

232 
	#USART_CR2_CPOL
 (1 << 10)

	)

235 
	#USART_CR2_CPHA
 (1 << 9)

	)

238 
	#USART_CR2_LBCL
 (1 << 8)

	)

241 
	#USART_CR2_LBDIE
 (1 << 6)

	)

244 
	#USART_CR2_LBDL
 (1 << 5)

	)

247 
	#USART_CR2_ADD_MASK
 0xF

	)

253 
	#USART_CR3_CTSIE
 (1 << 10)

	)

257 
	#USART_CR3_CTSE
 (1 << 9)

	)

261 
	#USART_CR3_RTSE
 (1 << 8)

	)

265 
	#USART_CR3_DMAT
 (1 << 7)

	)

269 
	#USART_CR3_DMAR
 (1 << 6)

	)

273 
	#USART_CR3_SCEN
 (1 << 5)

	)

277 
	#USART_CR3_NACK
 (1 << 4)

	)

280 
	#USART_CR3_HDSEL
 (1 << 3)

	)

283 
	#USART_CR3_IRLP
 (1 << 2)

	)

286 
	#USART_CR3_IREN
 (1 << 1)

	)

289 
	#USART_CR3_EIE
 (1 << 0)

	)

295 
	#USART_GTPR_GT_MASK
 (0xFF << 8)

	)

299 
	#USART_GTPR_PSC_MASK
 0xFF

	)

	@libopencm3/include/libopencm3/stm32/common/usart_common_f24.h

32 #ifde‡
LIBOPENCM3_USART_H


34 #i‚de‡
LIBOPENCM3_USART_COMMON_F24_H


35 
	#LIBOPENCM3_USART_COMMON_F24_H


	)

37 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_f124.h
>

41 
	#USART6
 
USART6_BASE


	)

42 
	#UART7
 
UART7_BASE


	)

43 
	#UART8
 
UART8_BASE


	)

48 
	#USART6_SR
 
	`USART_SR
(
USART6_BASE
)

	)

49 
	#UART7_SR
 
	`USART_SR
(
UART7
)

	)

50 
	#UART8_SR
 
	`USART_SR
(
UART8
)

	)

53 
	#USART6_DR
 
	`USART_DR
(
USART6_BASE
)

	)

54 
	#UART7_DR
 
	`USART_DR
(
UART7
)

	)

55 
	#UART8_DR
 
	`USART_DR
(
UART8
)

	)

58 
	#USART6_BRR
 
	`USART_BRR
(
USART6_BASE
)

	)

59 
	#UART7_BRR
 
	`USART_BRR
(
UART7
)

	)

60 
	#UART8_BRR
 
	`USART_BRR
(
UART8
)

	)

63 
	#USART6_CR1
 
	`USART_CR1
(
USART6_BASE
)

	)

64 
	#UART7_CR1
 
	`USART_CR1
(
UART7
)

	)

65 
	#UART8_CR1
 
	`USART_CR1
(
UART8
)

	)

68 
	#USART6_CR2
 
	`USART_CR2
(
USART6_BASE
)

	)

69 
	#UART7_CR2
 
	`USART_CR2
(
UART7
)

	)

70 
	#UART8_CR2
 
	`USART_CR2
(
UART8
)

	)

73 
	#USART6_CR3
 
	`USART_CR3
(
USART6_BASE
)

	)

74 
	#UART7_CR3
 
	`USART_CR3
(
UART7
)

	)

75 
	#UART8_CR3
 
	`USART_CR3
(
UART8
)

	)

78 
	#USART6_GTPR
 
	`USART_GTPR
(
USART6_BASE
)

	)

79 
	#UART7_GTPR
 
	`USART_GTPR
(
UART7
)

	)

80 
	#UART8_GTPR
 
	`USART_GTPR
(
UART8
)

	)

85 
	#USART_CR1_OVER8
 (1 << 15)

	)

90 
	#USART_CR3_ONEBIT
 (1 << 11)

	)

	@libopencm3/include/libopencm3/stm32/common/usart_common_v2.h

26 #¥agm®
⁄˚


33 
	#USART_CR1
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x00)

	)

34 
	#USART1_CR1
 
	`USART_CR1
(
USART1_BASE
)

	)

35 
	#USART2_CR1
 
	`USART_CR1
(
USART2_BASE
)

	)

36 
	#USART3_CR1
 
	`USART_CR1
(
USART3_BASE
)

	)

37 #i‡
deföed
(
USART4_BASE
)

38 
	#USART4_CR1
 
	`USART_CR1
(
USART4_BASE
)

	)

40 #i‡
deföed
(
UART4_BASE
)

41 
	#UART4_CR1
 
	`USART_CR1
(
UART4_BASE
)

	)

43 #i‡
deföed
(
UART5_BASE
)

44 
	#UART5_CR1
 
	`USART_CR1
(
UART5_BASE
)

	)

48 
	#USART_CR2
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x04)

	)

49 
	#USART1_CR2
 
	`USART_CR2
(
USART1_BASE
)

	)

50 
	#USART2_CR2
 
	`USART_CR2
(
USART2_BASE
)

	)

51 
	#USART3_CR2
 
	`USART_CR2
(
USART3_BASE
)

	)

52 #i‡
deföed
(
USART4_BASE
)

53 
	#USART4_CR2
 
	`USART_CR2
(
USART4_BASE
)

	)

55 #i‡
deföed
(
UART4_BASE
)

56 
	#UART4_CR2
 
	`USART_CR2
(
UART4_BASE
)

	)

58 #i‡
deföed
(
UART5_BASE
)

59 
	#UART5_CR2
 
	`USART_CR2
(
UART5_BASE
)

	)

63 
	#USART_CR3
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x08)

	)

64 
	#USART1_CR3
 
	`USART_CR3
(
USART1_BASE
)

	)

65 
	#USART2_CR3
 
	`USART_CR3
(
USART2_BASE
)

	)

66 
	#USART3_CR3
 
	`USART_CR3
(
USART3_BASE
)

	)

67 #i‡
deföed
(
USART4_BASE
)

68 
	#USART4_CR3
 
	`USART_CR3
(
USART4_BASE
)

	)

70 #i‡
deföed
(
UART4_BASE
)

71 
	#UART4_CR3
 
	`USART_CR3
(
UART4_BASE
)

	)

73 #i‡
deföed
(
UART5_BASE
)

74 
	#UART5_CR3
 
	`USART_CR3
(
UART5_BASE
)

	)

78 
	#USART_BRR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x0C)

	)

79 
	#USART1_BRR
 
	`USART_BRR
(
USART1_BASE
)

	)

80 
	#USART2_BRR
 
	`USART_BRR
(
USART2_BASE
)

	)

81 
	#USART3_BRR
 
	`USART_BRR
(
USART3_BASE
)

	)

82 #i‡
deföed
(
USART4_BASE
)

83 
	#USART4_BRR
 
	`USART_BRR
(
USART4_BASE
)

	)

85 #i‡
deföed
(
UART4_BASE
)

86 
	#UART4_BRR
 
	`USART_BRR
(
UART4_BASE
)

	)

88 #i‡
deföed
(
UART5_BASE
)

89 
	#UART5_BRR
 
	`USART_BRR
(
UART5_BASE
)

	)

93 
	#USART_GTPR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x10)

	)

94 
	#USART1_GTPR
 
	`USART_GTPR
(
USART1_BASE
)

	)

95 
	#USART2_GTPR
 
	`USART_GTPR
(
USART2_BASE
)

	)

96 
	#USART3_GTPR
 
	`USART_GTPR
(
USART3_BASE
)

	)

97 #i‡
deföed
(
USART4_BASE
)

98 
	#USART4_GTPR
 
	`USART_GTPR
(
USART4_BASE
)

	)

100 #i‡
deföed
(
UART4_BASE
)

101 
	#UART4_GTPR
 
	`USART_GTPR
(
UART4_BASE
)

	)

103 #i‡
deföed
(
UART5_BASE
)

104 
	#UART5_GTPR
 
	`USART_GTPR
(
UART5_BASE
)

	)

108 
	#USART_RTOR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x14)

	)

109 
	#USART1_RTOR
 
	`USART_RTOR
(
USART1_BASE
)

	)

110 
	#USART2_RTOR
 
	`USART_RTOR
(
USART2_BASE
)

	)

111 
	#USART3_RTOR
 
	`USART_RTOR
(
USART3_BASE
)

	)

112 #i‡
deföed
(
USART4_BASE
)

113 
	#USART4_RTOR
 
	`USART_RTOR
(
USART4_BASE
)

	)

115 #i‡
deföed
(
UART4_BASE
)

116 
	#UART4_RTOR
 
	`USART_RTOR
(
UART4_BASE
)

	)

118 #i‡
deföed
(
UART5_BASE
)

119 
	#UART5_RTOR
 
	`USART_RTOR
(
UART5_BASE
)

	)

123 
	#USART_RQR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x18)

	)

124 
	#USART1_RQR
 
	`USART_RQR
(
USART1_BASE
)

	)

125 
	#USART2_RQR
 
	`USART_RQR
(
USART2_BASE
)

	)

126 
	#USART3_RQR
 
	`USART_RQR
(
USART3_BASE
)

	)

127 #i‡
deföed
(
USART4_BASE
)

128 
	#USART4_RQR
 
	`USART_RQR
(
USART4_BASE
)

	)

130 #i‡
deföed
(
UART4_BASE
)

131 
	#UART4_RQR
 
	`USART_RQR
(
UART4_BASE
)

	)

133 #i‡
deföed
(
UART5_BASE
)

134 
	#UART5_RQR
 
	`USART_RQR
(
UART5_BASE
)

	)

138 
	#USART_ISR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x1C)

	)

139 
	#USART1_ISR
 
	`USART_ISR
(
USART1_BASE
)

	)

140 
	#USART2_ISR
 
	`USART_ISR
(
USART2_BASE
)

	)

141 
	#USART3_ISR
 
	`USART_ISR
(
USART3_BASE
)

	)

142 #i‡
deföed
(
USART4_BASE
)

143 
	#USART4_ISR
 
	`USART_ISR
(
USART4_BASE
)

	)

145 #i‡
deföed
(
UART4_BASE
)

146 
	#UART4_ISR
 
	`USART_ISR
(
UART4_BASE
)

	)

148 #i‡
deföed
(
UART5_BASE
)

149 
	#UART5_ISR
 
	`USART_ISR
(
UART5_BASE
)

	)

153 
	#USART_ICR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x20)

	)

154 
	#USART1_ICR
 
	`USART_ICR
(
USART1_BASE
)

	)

155 
	#USART2_ICR
 
	`USART_ICR
(
USART2_BASE
)

	)

156 
	#USART3_ICR
 
	`USART_ICR
(
USART3_BASE
)

	)

157 #i‡
deföed
(
USART4_BASE
)

158 
	#USART4_ICR
 
	`USART_ICR
(
USART4_BASE
)

	)

160 #i‡
deföed
(
UART4_BASE
)

161 
	#UART4_ICR
 
	`USART_ICR
(
UART4_BASE
)

	)

163 #i‡
deföed
(
UART5_BASE
)

164 
	#UART5_ICR
 
	`USART_ICR
(
UART5_BASE
)

	)

168 
	#USART_RDR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x24)

	)

169 
	#USART1_RDR
 
	`USART_RDR
(
USART1_BASE
)

	)

170 
	#USART2_RDR
 
	`USART_RDR
(
USART2_BASE
)

	)

171 
	#USART3_RDR
 
	`USART_RDR
(
USART3_BASE
)

	)

172 #i‡
deföed
(
USART4_BASE
)

173 
	#USART4_RDR
 
	`USART_RDR
(
USART4_BASE
)

	)

175 #i‡
deföed
(
UART4_BASE
)

176 
	#UART4_RDR
 
	`USART_RDR
(
UART4_BASE
)

	)

178 #i‡
deföed
(
UART5_BASE
)

179 
	#UART5_RDR
 
	`USART_RDR
(
UART5_BASE
)

	)

183 
	#USART_TDR
(
ußπ_ba£
Ë
	`MMIO32
((ußπ_ba£Ë+ 0x28)

	)

184 
	#USART1_TDR
 
	`USART_TDR
(
USART1_BASE
)

	)

185 
	#USART2_TDR
 
	`USART_TDR
(
USART2_BASE
)

	)

186 
	#USART3_TDR
 
	`USART_TDR
(
USART3_BASE
)

	)

187 #i‡
deföed
(
USART4_BASE
)

188 
	#USART4_TDR
 
	`USART_TDR
(
USART4_BASE
)

	)

190 #i‡
deföed
(
UART4_BASE
)

191 
	#UART4_TDR
 
	`USART_TDR
(
UART4_BASE
)

	)

193 #i‡
deföed
(
UART5_BASE
)

194 
	#UART5_TDR
 
	`USART_TDR
(
UART5_BASE
)

	)

206 
	#USART_FLAG_PE
 
USART_ISR_PE


	)

207 
	#USART_FLAG_FE
 
USART_ISR_FE


	)

208 
	#USART_FLAG_NF
 
USART_ISR_NF


	)

209 
	#USART_FLAG_ORE
 
USART_ISR_ORE


	)

210 
	#USART_FLAG_IDLE
 
USART_ISR_IDLE


	)

211 
	#USART_FLAG_RXNE
 
USART_ISR_RXNE


	)

212 
	#USART_FLAG_TC
 
USART_ISR_TC


	)

213 
	#USART_FLAG_TXE
 
USART_ISR_TXE


	)

226 
	#USART_CR1_M1
 (1 << 28Ë

	)

229 
	#USART_CR1_EOBIE
 (1 << 27)

	)

232 
	#USART_CR1_RTOIE
 (1 << 26)

	)

234 
	#USART_CR1_DEAT_SHIFT
 21

	)

235 
	#USART_CR1_DEAT
 (0x1F << 
USART_CR1_DEAT_SHIFT
)

	)

237 
	#USART_CR1_DEAT_VAL
(
x
Ë((xË<< 
USART_CR1_DEAT_SHIFT
)

	)

239 
	#USART_CR1_DEDT_SHIFT
 16

	)

240 
	#USART_CR1_DEDT
 (0x1F << 
USART_CR1_DEDT_SHIFT
)

	)

242 
	#USART_CR1_DEDT_VAL
(
x
Ë((xË<< 
USART_CR1_DEDT_SHIFT
)

	)

245 
	#USART_CR1_OVER8
 (1 << 15)

	)

248 
	#USART_CR1_CMIE
 (1 << 14)

	)

251 
	#USART_CR1_MME
 (1 << 13)

	)

254 
	#USART_CR1_M0
 (1 << 12)

	)

256 
	#USART_CR1_M
 
USART_CR1_M0


	)

259 
	#USART_CR1_WAKE
 (1 << 11)

	)

262 
	#USART_CR1_PCE
 (1 << 10)

	)

265 
	#USART_CR1_PS
 (1 << 9)

	)

268 
	#USART_CR1_PEIE
 (1 << 8)

	)

271 
	#USART_CR1_TXEIE
 (1 << 7)

	)

274 
	#USART_CR1_TCIE
 (1 << 6)

	)

277 
	#USART_CR1_RXNEIE
 (1 << 5)

	)

280 
	#USART_CR1_IDLEIE
 (1 << 4)

	)

283 
	#USART_CR1_TE
 (1 << 3)

	)

286 
	#USART_CR1_RE
 (1 << 2)

	)

289 
	#USART_CR1_UESM
 (1 << 1)

	)

292 
	#USART_CR1_UE
 (1 << 0)

	)

301 
	#USART_CR2_ADD_SHIFT
 24

	)

302 
	#USART_CR2_ADD
 (0xFF << 
USART_CR2_ADD_SHIFT
)

	)

303 
	#USART_CR2_ADD_VAL
(
x
Ë((xË<< 
USART_CR2_ADD_SHIFT
)

	)

305 
	#USART_CR2_ABRMOD_MASK
 3

	)

306 
	#USART_CR2_ABRMOD_SHIFT
 21

	)

312 
	#USART_CR2_ABRMOD_STARTBIT
 (0x0 << 
USART_CR2_ABRMOD_SHIFT
)

	)

313 
	#USART_CR2_ABRMOD_FALL_EDGE
 (0x1 << 
USART_CR2_ABRMOD_SHIFT
)

	)

314 
	#USART_CR2_ABRMOD_FRAME_0x7F
 (0x2 << 
USART_CR2_ABRMOD_SHIFT
)

	)

315 
	#USART_CR2_ABRMOD_FRAME_0x55
 (0x3 << 
USART_CR2_ABRMOD_SHIFT
)

	)

319 
	#USART_CR2_RTOEN
 (1 << 23)

	)

322 
	#USART_CR2_ABREN
 (1 << 20)

	)

325 
	#USART_CR2_MSBFIRST
 (1 << 19)

	)

328 
	#USART_CR2_DATAINV
 (1 << 18)

	)

331 
	#USART_CR2_TXINV
 (1 << 17)

	)

334 
	#USART_CR2_RXINV
 (1 << 16)

	)

337 
	#USART_CR2_SWAP
 (1 << 15)

	)

340 
	#USART_CR2_LINEN
 (1 << 14)

	)

343 
	#USART_CR2_CLKEN
 (1 << 11)

	)

346 
	#USART_CR2_CPOL
 (1 << 10)

	)

349 
	#USART_CR2_CPHA
 (1 << 9)

	)

352 
	#USART_CR2_LBCL
 (1 << 8)

	)

355 
	#USART_CR2_LBDIE
 (1 << 6)

	)

358 
	#USART_CR2_LBDL
 (1 << 5)

	)

361 
	#USART_CR2_ADDM7
 (1 << 4)

	)

370 
	#USART_CR3_WUFIE
 (1 << 22)

	)

373 
	#USART_CR3_WUS_ADDRMATCH
 (0x0 << 20)

	)

374 
	#USART_CR3_WUS_START_BIT
 (0x2 << 20)

	)

375 
	#USART_CR3_WUS_RXNE
 (0x3 << 20)

	)

377 
	#USART_CR3_SCARCNT_SHIFT
 17

	)

378 
	#USART_CR3_SCARCNT_MASK
 0x7

	)

380 
	#USART_CR3_SCARCNT_DISABLE
 (0 << 
USART_CR3_SCARCNT_SHIFT
)

	)

381 
	#USART_CR3_SCARCNT_VAL
(
x
Ë((xË<< 
USART_CR3_SCARCNT_SHIFT
)

	)

384 
	#USART_CR3_DEP
 (1 << 15)

	)

387 
	#USART_CR3_DEM
 (1 << 14)

	)

390 
	#USART_CR3_DDRE
 (1 << 13)

	)

393 
	#USART_CR3_OVRDIS
 (1 << 12)

	)

396 
	#USART_CR3_ONEBIT
 (1 << 11)

	)

399 
	#USART_CR3_CTSIE
 (1 << 10)

	)

402 
	#USART_CR3_CTSE
 (1 << 9)

	)

405 
	#USART_CR3_RTSE
 (1 << 8)

	)

408 
	#USART_CR3_DMAT
 (1 << 7)

	)

411 
	#USART_CR3_DMAR
 (1 << 6)

	)

414 
	#USART_CR3_SCEN
 (1 << 5)

	)

417 
	#USART_CR3_NACK
 (1 << 4)

	)

420 
	#USART_CR3_HDSEL
 (1 << 3)

	)

423 
	#USART_CR3_IRLP
 (1 << 2)

	)

426 
	#USART_CR3_IREN
 (1 << 1)

	)

429 
	#USART_CR3_EIE
 (1 << 0)

	)

437 
	#USART_GTPR_GT_SHIFT
 8

	)

438 
	#USART_GTPR_GT
 (0xFF << 
USART_GTPR_GT_SHIFT
)

	)

439 
	#USART_GTPR_GT_VAL
(
x
Ë((xË<< 
USART_GTPR_GT_SHIFT
)

	)

441 
	#USART_GTPR_PSC_SHIFT
 0

	)

442 
	#USART_GTPR_PSC
 (0xFF << 
USART_GTPR_PSC_SHIFT
)

	)

443 
	#USART_GTPR_PSC_VAL
(
x
Ë((xË<< 
USART_GTPR_PSC_SHIFT
)

	)

452 
	#USART_RTOR_BLEN_SHIFT
 24

	)

453 
	#USART_RTOR_BLEN_MASK
 (0xFF << 
USART_RTOR_BLEN_SHIFT
)

	)

454 
	#USART_RTOR_BLEN_VAL
(
x
Ë((xË<< 
USART_RTOR_BLEN_SHIFT
)

	)

457 
	#USART_RTOR_RTO_SHIFT
 0

	)

458 
	#USART_RTOR_RTO_MASK
 (0xFFFFF << 
USART_RTOR_RTO_SHIFT
)

	)

459 
	#USART_RTOR_RTO_VAL
(
x
Ë((xË<< 
USART_RTOR_RTO_SHIFT
)

	)

469 
	#USART_RQR_TXFRQ
 (1 << 4)

	)

472 
	#USART_RQR_RXFRQ
 (1 << 3)

	)

475 
	#USART_RQR_MMRQ
 (1 << 2)

	)

478 
	#USART_RQR_SBKRQ
 (1 << 1)

	)

481 
	#USART_RQR_ABKRQ
 (1 << 0)

	)

492 
	#USART_ISR_REACK
 (1 << 22)

	)

495 
	#USART_ISR_TEACK
 (1 << 21)

	)

498 
	#USART_ISR_WUF
 (1 << 20)

	)

501 
	#USART_ISR_RWU
 (1 << 19)

	)

504 
	#USART_ISR_SBKF
 (1 << 18)

	)

507 
	#USART_ISR_CMF
 (1 << 17)

	)

510 
	#USART_ISR_BUSY
 (1 << 16)

	)

513 
	#USART_ISR_ABRF
 (1 << 15)

	)

516 
	#USART_ISR_ABRE
 (1 << 14)

	)

519 
	#USART_ISR_EOBF
 (1 << 12)

	)

522 
	#USART_ISR_RTOF
 (1 << 11)

	)

525 
	#USART_ISR_CTS
 (1 << 10)

	)

528 
	#USART_ISR_CTSIF
 (1 << 9)

	)

531 
	#USART_ISR_LBDF
 (1 << 8)

	)

534 
	#USART_ISR_TXE
 (1 << 7)

	)

537 
	#USART_ISR_TC
 (1 << 6)

	)

540 
	#USART_ISR_RXNE
 (1 << 5)

	)

543 
	#USART_ISR_IDLE
 (1 << 4)

	)

546 
	#USART_ISR_ORE
 (1 << 3)

	)

549 
	#USART_ISR_NF
 (1 << 2)

	)

552 
	#USART_ISR_FE
 (1 << 1)

	)

555 
	#USART_ISR_PE
 (1 << 0)

	)

566 
	#USART_ICR_WUCF
 (1 << 20)

	)

569 
	#USART_ICR_CMCF
 (1 << 17)

	)

572 
	#USART_ICR_EOBCF
 (1 << 12)

	)

575 
	#USART_ICR_RTOCF
 (1 << 11)

	)

578 
	#USART_ICR_CTSCF
 (1 << 9)

	)

581 
	#USART_ICR_LBDCF
 (1 << 8)

	)

584 
	#USART_ICR_TCCF
 (1 << 6)

	)

587 
	#USART_ICR_IDLECF
 (1 << 4)

	)

590 
	#USART_ICR_ORECF
 (1 << 3)

	)

593 
	#USART_ICR_NCF
 (1 << 2)

	)

596 
	#USART_ICR_FECF
 (1 << 1)

	)

599 
	#USART_ICR_PECF
 (1 << 0)

	)

608 
	#USART_RDR_MASK
 (0x1FF << 0)

	)

610 
	#USART_TDR_MASK
 (0x1FF << 0)

	)

616 
BEGIN_DECLS


618 
ußπ_íabÀ_d©a_övîsi⁄
(
uöt32_t
 
ußπ
);

619 
ußπ_dißbÀ_d©a_övîsi⁄
(
uöt32_t
 
ußπ
);

620 
ußπ_íabÀ_tx_övîsi⁄
(
uöt32_t
 
ußπ
);

621 
ußπ_dißbÀ_tx_övîsi⁄
(
uöt32_t
 
ußπ
);

622 
ußπ_íabÀ_rx_övîsi⁄
(
uöt32_t
 
ußπ
);

623 
ußπ_dißbÀ_rx_övîsi⁄
(
uöt32_t
 
ußπ
);

624 
ußπ_íabÀ_hÆfdu∂ex
(
uöt32_t
 
ußπ
);

625 
ußπ_dißbÀ_hÆfdu∂ex
(
uöt32_t
 
ußπ
);

627 
ußπ_£t_rx_timeout_vÆue
(
uöt32_t
 
ußπ
, uöt32_à
vÆue
);

628 
ußπ_íabÀ_rx_timeout
(
uöt32_t
 
ußπ
);

629 
ußπ_dißbÀ_rx_timeout
(
uöt32_t
 
ußπ
);

630 
ußπ_íabÀ_rx_timeout_öãºu±
(
uöt32_t
 
ußπ
);

631 
ußπ_dißbÀ_rx_timeout_öãºu±
(
uöt32_t
 
ußπ
);

633 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/comparator.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/com∑øt‹.h
>

	@libopencm3/include/libopencm3/stm32/crc.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/¸c.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/¸c.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/¸c.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/¸c.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/¸c.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/¸c.h
>

35 #ñi‡
deföed
(
STM32L4
)

36 
	~<lib›ícm3/°m32/l4/¸c.h
>

	@libopencm3/include/libopencm3/stm32/crs.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/comm⁄/¸s_comm⁄_Æl.h
>

25 #ñi‡
deföed
(
STM32L0
)

26 
	~<lib›ícm3/°m32/comm⁄/¸s_comm⁄_Æl.h
>

27 #ñi‡
deföed
(
STM32L4
)

28 
	~<lib›ícm3/°m32/comm⁄/¸s_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/crypto.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F2
)

24 
	~<lib›ícm3/°m32/f2/¸y±o.h
>

25 #ñi‡
deföed
(
STM32F4
)

26 
	~<lib›ícm3/°m32/f4/¸y±o.h
>

	@libopencm3/include/libopencm3/stm32/dac.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/dac.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/dac.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/dac.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/dac.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/dac.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/dac.h
>

	@libopencm3/include/libopencm3/stm32/dbgmcu.h

20 #i‚de‡
LIBOPENCM3_STM32_DBGMCU_H


21 
	#LIBOPENCM3_STM32_DBGMCU_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

29 
	#DBGMCU_IDCODE
 
	`MMIO32
(
DBGMCU_BASE
 + 0x00)

	)

33 
	#DBGMCU_CR
 
	`MMIO32
(
DBGMCU_BASE
 + 0x04)

	)

37 
	#DBGMCU_IDCODE_DEV_ID_MASK
 0x00000fff

	)

38 
	#DBGMCU_IDCODE_REV_ID_MASK
 0xffff0000

	)

48 
	#DBGMCU_CR_SLEEP
 0x00000001

	)

49 
	#DBGMCU_CR_STOP
 0x00000002

	)

50 
	#DBGMCU_CR_STANDBY
 0x00000004

	)

51 
	#DBGMCU_CR_TRACE_IOEN
 0x00000020

	)

52 
	#DBGMCU_CR_TRACE_MODE_MASK
 0x000000C0

	)

53 
	#DBGMCU_CR_TRACE_MODE_ASYNC
 0x00000000

	)

54 
	#DBGMCU_CR_TRACE_MODE_SYNC_1
 0x00000040

	)

55 
	#DBGMCU_CR_TRACE_MODE_SYNC_2
 0x00000080

	)

56 
	#DBGMCU_CR_TRACE_MODE_SYNC_4
 0x000000C0

	)

57 
	#DBGMCU_CR_IWDG_STOP
 0x00000100

	)

58 
	#DBGMCU_CR_WWDG_STOP
 0x00000200

	)

59 
	#DBGMCU_CR_TIM1_STOP
 0x00000400

	)

60 
	#DBGMCU_CR_TIM2_STOP
 0x00000800

	)

61 
	#DBGMCU_CR_TIM3_STOP
 0x00001000

	)

62 
	#DBGMCU_CR_TIM4_STOP
 0x00002000

	)

63 
	#DBGMCU_CR_CAN1_STOP
 0x00004000

	)

64 
	#DBGMCU_CR_I2C1_SMBUS_TIMEOUT
 0x00008000

	)

65 
	#DBGMCU_CR_I2C2_SMBUS_TIMEOUT
 0x00010000

	)

66 
	#DBGMCU_CR_TIM8_STOP
 0x00020000

	)

67 
	#DBGMCU_CR_TIM5_STOP
 0x00040000

	)

68 
	#DBGMCU_CR_TIM6_STOP
 0x00080000

	)

69 
	#DBGMCU_CR_TIM7_STOP
 0x00100000

	)

70 
	#DBGMCU_CR_CAN2_STOP
 0x00200000

	)

	@libopencm3/include/libopencm3/stm32/dcmi.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F4
)

24 
	~<lib›ícm3/°m32/f4/dcmi.h
>

	@libopencm3/include/libopencm3/stm32/desig.h

20 #i‚de‡
LIBOPENCM3_DESIG_H


21 
	#LIBOPENCM3_DESIG_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

29 
	#DESIG_FLASH_SIZE
 
	`MMIO16
(
DESIG_FLASH_SIZE_BASE
 + 0x00)

	)

31 
BEGIN_DECLS


37 
uöt16_t
 
desig_gë_Êash_size
();

44 
desig_gë_unique_id
(
uöt32_t
 *
ªsu…
);

52 
desig_gë_unique_id_as_°rög
(*
°rög
,

53 
°rög_Àn
);

61 
desig_gë_unique_id_as_dfu
(*
°rög
);

63 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/dma.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/dma.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/dma.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/dma.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/dma.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/dma.h
>

33 #ñi‡
deföed
(
STM32L0
)

34 
	~<lib›ícm3/°m32/l0/dma.h
>

35 #ñi‡
deföed
(
STM32L1
)

36 
	~<lib›ícm3/°m32/l1/dma.h
>

37 #ñi‡
deföed
(
STM32L4
)

38 
	~<lib›ícm3/°m32/l4/dma.h
>

	@libopencm3/include/libopencm3/stm32/dma2d.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F4
)

24 
	~<lib›ícm3/°m32/f4/dma2d.h
>

	@libopencm3/include/libopencm3/stm32/dsi.h

20 #i‡
deföed
(
STM32F4
)

21 
	~<lib›ícm3/°m32/f4/dsi.h
>

	@libopencm3/include/libopencm3/stm32/exti.h

22 
	~<lib›ícm3/cm3/comm⁄.h
>

23 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

25 #i‡
deföed
(
STM32F0
)

26 
	~<lib›ícm3/°m32/f0/exti.h
>

27 #ñi‡
deföed
(
STM32F1
)

28 
	~<lib›ícm3/°m32/f1/exti.h
>

29 #ñi‡
deföed
(
STM32F2
)

30 
	~<lib›ícm3/°m32/f2/exti.h
>

31 #ñi‡
deföed
(
STM32F3
)

32 
	~<lib›ícm3/°m32/f3/exti.h
>

33 #ñi‡
deföed
(
STM32F4
)

34 
	~<lib›ícm3/°m32/f4/exti.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/exti.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/exti.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/exti.h
>

	@libopencm3/include/libopencm3/stm32/f0/adc.h

33 #i‚de‡
LIBOPENCM3_ADC_H


34 
	#LIBOPENCM3_ADC_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v2.h
>

37 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v2_sögÀ.h
>

47 
	#ADC
 
ADC_BASE


	)

48 
	#ADC1
 
ADC_BASE


	)

55 
	#ADC1_ISR
 
	`ADC_ISR
(
ADC
)

	)

56 
	#ADC1_IER
 
	`ADC_IER
(
ADC
)

	)

57 
	#ADC1_CR
 
	`ADC_CR
(
ADC
)

	)

58 
	#ADC1_CFGR1
 
	`ADC_CFGR1
(
ADC
)

	)

59 
	#ADC1_CFGR2
 
	`ADC_CFGR2
(
ADC
)

	)

60 
	#ADC1_SMPR1
 
	`ADC_SMPR1
(
ADC
)

	)

61 
	#ADC_SMPR
(
adc
Ë
	`ADC_SMPR1
◊dcË

	)

62 
	#ADC1_SMPR
 
	`ADC_SMPR1
(
ADC
Ë

	)

63 
	#ADC1_TR1
 
	`ADC_TR1
(
ADC
)

	)

64 
	#ADC_TR
(
adc
Ë
	`ADC_TR1
◊dcË

	)

65 
	#ADC1_TR
 
	`ADC1_TR
(
ADC
Ë

	)

66 
	#ADC1_CHSELR
 
	`ADC_CHSELR
(
ADC
)

	)

67 
	#ADC1_DR
 
	`ADC_DR
(
ADC
)

	)

68 
	#ADC1_CCR
 
	`ADC_CCR
(
ADC
)

	)

76 
	#ADC_CFGR2_CKMODE_SHIFT
 30

	)

77 
	#ADC_CFGR2_CKMODE
 (3 << 
ADC_CFGR2_CKMODE_SHIFT
)

	)

78 
	#ADC_CFGR2_CKMODE_CK_ADC
 (0 << 
ADC_CFGR2_CKMODE_SHIFT
)

	)

79 
	#ADC_CFGR2_CKMODE_PCLK_DIV2
 (1 << 
ADC_CFGR2_CKMODE_SHIFT
)

	)

80 
	#ADC_CFGR2_CKMODE_PCLK_DIV4
 (2 << 
ADC_CFGR2_CKMODE_SHIFT
)

	)

84 
	#ADC_SMPR_SMP_SHIFT
 0

	)

85 
	#ADC_SMPR_SMP
 (7 << 
ADC_SMPR_SMP_SHIFT
)

	)

86 
	#ADC_SMPR_SMP_001DOT5
 (0 << 
ADC_SMPR_SMP_SHIFT
)

	)

87 
	#ADC_SMPR_SMP_007DOT5
 (1 << 
ADC_SMPR_SMP_SHIFT
)

	)

88 
	#ADC_SMPR_SMP_013DOT5
 (2 << 
ADC_SMPR_SMP_SHIFT
)

	)

89 
	#ADC_SMPR_SMP_028DOT5
 (3 << 
ADC_SMPR_SMP_SHIFT
)

	)

90 
	#ADC_SMPR_SMP_041DOT5
 (4 << 
ADC_SMPR_SMP_SHIFT
)

	)

91 
	#ADC_SMPR_SMP_055DOT5
 (5 << 
ADC_SMPR_SMP_SHIFT
)

	)

92 
	#ADC_SMPR_SMP_071DOT5
 (6 << 
ADC_SMPR_SMP_SHIFT
)

	)

93 
	#ADC_SMPR_SMP_239DOT5
 (7 << 
ADC_SMPR_SMP_SHIFT
)

	)

104 
	#ADC_RESOLUTION_12BIT
 
ADC_CFGR1_RES_12_BIT


	)

105 
	#ADC_RESOLUTION_10BIT
 
ADC_CFGR1_RES_10_BIT


	)

106 
	#ADC_RESOLUTION_8BIT
 
ADC_CFGR1_RES_8_BIT


	)

107 
	#ADC_RESOLUTION_6BIT
 
ADC_CFGR1_RES_6_BIT


	)

114 
	#ADC_SMPTIME_001DOT5
 
ADC_SMPR_SMP_001DOT5


	)

115 
	#ADC_SMPTIME_007DOT5
 
ADC_SMPR_SMP_007DOT5


	)

116 
	#ADC_SMPTIME_013DOT5
 
ADC_SMPR_SMP_013DOT5


	)

117 
	#ADC_SMPTIME_028DOT5
 
ADC_SMPR_SMP_028DOT5


	)

118 
	#ADC_SMPTIME_041DOT5
 
ADC_SMPR_SMP_041DOT5


	)

119 
	#ADC_SMPTIME_055DOT5
 
ADC_SMPR_SMP_055DOT5


	)

120 
	#ADC_SMPTIME_071DOT5
 
ADC_SMPR_SMP_071DOT5


	)

121 
	#ADC_SMPTIME_239DOT5
 
ADC_SMPR_SMP_239DOT5


	)

128 
	#ADC_CLKSOURCE_ADC
 
ADC_CFGR2_CKMODE_CK_ADC


	)

129 
	#ADC_CLKSOURCE_PCLK_DIV2
 
ADC_CFGR2_CKMODE_PCLK_DIV2


	)

130 
	#ADC_CLKSOURCE_PCLK_DIV4
 
ADC_CFGR2_CKMODE_PCLK_DIV4


	)

137 
	#ADC_CHANNEL_TEMP
 16

	)

138 
	#ADC_CHANNEL_VREF
 17

	)

139 
	#ADC_CHANNEL_VBAT
 18

	)

146 
	eadc_›mode
 {

147 
	mADC_MODE_SEQUENTIAL
,

148 
	mADC_MODE_SCAN
,

149 
	mADC_MODE_SCAN_INFINITE
,

158 
BEGIN_DECLS


161 
adc_íabÀ_disc⁄töuous_mode
(
uöt32_t
 
adc
);

162 
adc_dißbÀ_disc⁄töuous_mode
(
uöt32_t
 
adc
);

163 
adc_£t_›î©i⁄_mode
(
uöt32_t
 
adc
, 
adc_›mode
 
›mode
);

166 
adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

167 
uöt32_t
 
pﬁ¨ôy
);

168 
adc_dißbÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
);

171 
adc_íabÀ_w©chdog_öãºu±
(
uöt32_t
 
adc
);

172 
adc_dißbÀ_w©chdog_öãºu±
(
uöt32_t
 
adc
);

173 
boﬁ
 
adc_gë_w©chdog_Êag
(
uöt32_t
 
adc
);

174 
adc_˛ór_w©chdog_Êag
(
uöt32_t
 
adc
);

175 
adc_íabÀ_eoc_£quí˚_öãºu±
(
uöt32_t
 
adc
);

176 
adc_dißbÀ_eoc_£quí˚_öãºu±
(
uöt32_t
 
adc
);

177 
boﬁ
 
adc_gë_eoc_£quí˚_Êag
(
uöt32_t
 
adc
);

180 
adc_£t_˛k_sour˚
(
uöt32_t
 
adc
, uöt32_à
sour˚
);

181 
adc_íabÀ_vb©_£ns‹
();

182 
adc_dißbÀ_vb©_£ns‹
();

183 
	$adc_ˇlibøã_°¨t
(
uöt32_t
 
adc
)

184 
	`LIBOPENCM3_DEPRECATED
("seeádc_calibrate/_async");

185 
	$adc_ˇlibøã_waô_föish
(
uöt32_t
 
adc
)

186 
	`LIBOPENCM3_DEPRECATED
("seeádc_is_calibrating");

189 
	`adc_íabÀ_™Æog_w©chdog_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
);

190 
	`adc_íabÀ_™Æog_w©chdog_⁄_£À˘ed_ch™√l
(
uöt32_t
 
adc
, 
uöt8_t
 
ch™
);

191 
	`adc_dißbÀ_™Æog_w©chdog
(
uöt32_t
 
adc
);

192 
	`adc_£t_w©chdog_high_thªshﬁd
(
uöt32_t
 
adc
, 
uöt8_t
 
thªshﬁd
);

193 
	`adc_£t_w©chdog_low_thªshﬁd
(
uöt32_t
 
adc
, 
uöt8_t
 
thªshﬁd
);

195 
END_DECLS


	@libopencm3/include/libopencm3/stm32/f0/cec.h

32 #i‚de‡
LIBOPENCM3_CEC_H


33 
	#LIBOPENCM3_CEC_H


	)

40 
	#CEC
 
CEC_BASE


	)

46 
	#CEC_CR
 
	`MMIO32
(
CEC_BASE
 + 0x00)

	)

47 
	#CEC_CFGR
 
	`MMIO32
(
CEC_BASE
 + 0x04)

	)

48 
	#CEC_TXDR
 
	`MMIO32
(
CEC_BASE
 + 0x08)

	)

49 
	#CEC_RXDR
 
	`MMIO32
(
CEC_BASE
 + 0x0c)

	)

50 
	#CEC_ISR
 
	`MMIO32
(
CEC_BASE
 + 0x10)

	)

51 
	#CEC_IER
 
	`MMIO32
(
CEC_BASE
 + 0x14)

	)

59 
	#CEC_CR_TXEOM
 (1 << 2)

	)

60 
	#CEC_CR_TXSOM
 (1 << 1)

	)

61 
	#CEC_CR_CECEN
 (1 << 0)

	)

65 
	#CEC_CFGR_LSTN
 (1 << 31)

	)

67 
	#CEC_CFGR_OAR_SHIFT
 16

	)

68 
	#CEC_CFGR_OAR
 (0x3FFF << 
CEC_CFGR_OAR_SHIFT
)

	)

70 
	#CEC_CFGR_SFTOPT
 (1 << 8)

	)

71 
	#CEC_CFGR_BRDNOGEN
 (1 << 7)

	)

72 
	#CEC_CFGR_LBPEGEN
 (1 << 6)

	)

73 
	#CEC_CFGR_BREGEN
 (1 << 5)

	)

74 
	#CEC_CFGR_BRESTP
 (1 << 4)

	)

75 
	#CEC_CFGR_RXTOL
 (1 << 3)

	)

77 
	#CEC_CFGR_SFT_SHIFT
 0

	)

78 
	#CEC_CFGR_SFT
 (7 >> 
CEC_CFGR_SFT_SHIFT
)

	)

82 
	#CEC_ISR_TXACKE
 (1 << 12)

	)

83 
	#CEC_ISR_TXERR
 (1 << 11)

	)

84 
	#CEC_ISR_TXUDR
 (1 << 10)

	)

85 
	#CEC_ISR_TXEND
 (1 << 9)

	)

86 
	#CEC_ISR_TXBR
 (1 << 8)

	)

87 
	#CEC_ISR_ARBLST
 (1 << 7)

	)

88 
	#CEC_ISR_RXACKE
 (1 << 6)

	)

89 
	#CEC_ISR_LBPE
 (1 << 5)

	)

90 
	#CEC_ISR_SBPE
 (1 << 4)

	)

91 
	#CEC_ISR_BRE
 (1 << 3)

	)

92 
	#CEC_ISR_RXOVR
 (1 << 2)

	)

93 
	#CEC_ISR_RXEND
 (1 << 1)

	)

94 
	#CEC_ISR_RXBR
 (1 << 0)

	)

98 
	#CEC_IER_TXACKIE
 (1 << 12)

	)

99 
	#CEC_IER_TXERRIE
 (1 << 11)

	)

100 
	#CEC_IER_TXUDRIE
 (1 << 10)

	)

101 
	#CEC_IER_TXENDIE
 (1 << 9)

	)

102 
	#CEC_IER_TXBRIE
 (1 << 8)

	)

103 
	#CEC_IER_ARBLSTIE
 (1 << 7)

	)

104 
	#CEC_IER_RXACKIE
 (1 << 6)

	)

105 
	#CEC_IER_LBPEIE
 (1 << 5)

	)

106 
	#CEC_IER_SBPEIE
 (1 << 4)

	)

107 
	#CEC_IER_BREIE
 (1 << 3)

	)

108 
	#CEC_IER_RXOVRIE
 (1 << 2)

	)

109 
	#CEC_IER_RXENDIE
 (1 << 1)

	)

110 
	#CEC_IER_RXBRIE
 (1 << 0)

	)

120 
BEGIN_DECLS


122 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f0/comparator.h

33 #i‚de‡
LIBOPENCM3_COMP_H


34 
	#LIBOPENCM3_COMP_H


	)

41 
	#COMP1
 0

	)

42 
	#COMP2
 1

	)

48 
	#COMP_CSR
(
i
Ë
	`MMIO16
(
SYSCFG_COMP_BASE
 + 0x1¯+ (i)*2)

	)

49 
	#COMP_CSR1
 
	`COMP_CSR
(
COMP1
)

	)

50 
	#COMP_CSR2
 
	`COMP_CSR
(
COMP2
)

	)

58 
	#COMP_CSR_LOCK
 (1 << 15)

	)

59 
	#COMP_CSR_OUT
 (1 << 14)

	)

61 
	#COMP_CSR_HYST_SHIFT
 12

	)

62 
	#COMP_CSR_HYST
 (3 << 
COMP_CSR_HYST_SHIFT
)

	)

63 
	#COMP_CSR_HYST_NO
 (0 << 
COMP_CSR_HYST_SHIFT
)

	)

64 
	#COMP_CSR_HYST_LOW
 (1 << 
COMP_CSR_HYST_SHIFT
)

	)

65 
	#COMP_CSR_HYST_MED
 (2 << 
COMP_CSR_HYST_SHIFT
)

	)

66 
	#COMP_CSR_HYST_HIGH
 (3 << 
COMP_CSR_HYST_SHIFT
)

	)

68 
	#COMP_CSR_POL
 (1 << 11)

	)

70 
	#COMP_CSR_OUTSEL_SHIFT
 8

	)

71 
	#COMP_CSR_OUTSEL
 (7 << 
COMP_CSR_OUTSEL_SHIFT
)

	)

72 
	#COMP_CSR_OUTSEL_NONE
 (0 << 
COMP_CSR_OUTSEL_SHIFT
)

	)

73 
	#COMP_CSR_OUTSEL_TIM1_BRK
 (1 << 
COMP_CSR_OUTSEL_SHIFT
)

	)

74 
	#COMP_CSR_OUTSEL_TIM1_IC1
 (2 << 
COMP_CSR_OUTSEL_SHIFT
)

	)

75 
	#COMP_CSR_OUTSEL_TIM1_OCRCLR
 (3 << 
COMP_CSR_OUTSEL_SHIFT
)

	)

76 
	#COMP_CSR_OUTSEL_TIM2_IC4
 (4 << 
COMP_CSR_OUTSEL_SHIFT
)

	)

77 
	#COMP_CSR_OUTSEL_TIM2_OCRCLR
 (5 << 
COMP_CSR_OUTSEL_SHIFT
)

	)

78 
	#COMP_CSR_OUTSEL_TIM3_IC1
 (6 << 
COMP_CSR_OUTSEL_SHIFT
)

	)

79 
	#COMP_CSR_OUTSEL_TIM3_OCRCLR
 (7 << 
COMP_CSR_OUTSEL_SHIFT
)

	)

81 
	#COMP_CSR_WINDWEN
 (1 << 23)

	)

83 
	#COMP_CSR_INSEL_SHIFT
 4

	)

84 
	#COMP_CSR_INSEL
 (7 << 
COMP_CSR_INSEL_SHIFT
)

	)

85 
	#COMP_CSR_INSEL_1_4_VREFINT
 (0 << 
COMP_CSR_INSEL_SHIFT
)

	)

86 
	#COMP_CSR_INSEL_2_4_VREFINT
 (1 << 
COMP_CSR_INSEL_SHIFT
)

	)

87 
	#COMP_CSR_INSEL_3_4_VREFINT
 (2 << 
COMP_CSR_INSEL_SHIFT
)

	)

88 
	#COMP_CSR_INSEL_4_4_VREFINT
 (3 << 
COMP_CSR_INSEL_SHIFT
)

	)

89 
	#COMP_CSR_INSEL_VREFINT
 (3 << 
COMP_CSR_INSEL_SHIFT
)

	)

90 
	#COMP_CSR_INSEL_INM4
 (4 << 
COMP_CSR_INSEL_SHIFT
)

	)

91 
	#COMP_CSR_INSEL_INM5
 (5 << 
COMP_CSR_INSEL_SHIFT
)

	)

92 
	#COMP_CSR_INSEL_INM6
 (6 << 
COMP_CSR_INSEL_SHIFT
)

	)

94 
	#COMP_CSR_SPEED_SHIFT
 2

	)

95 
	#COMP_CSR_SPEED
 (3 << 
COMP_CSR_SPEED_SHIFT
)

	)

96 
	#COMP_CSR_SPEED_HIGH
 (0 << 
COMP_CSR_SPEED_SHIFT
)

	)

97 
	#COMP_CSR_SPEED_MED
 (1 << 
COMP_CSR_SPEED_SHIFT
)

	)

98 
	#COMP_CSR_SPEED_LOW
 (2 << 
COMP_CSR_SPEED_SHIFT
)

	)

99 
	#COMP_CSR_SPEED_VERYLOW
 (3 << 
COMP_CSR_SPEED_SHIFT
)

	)

101 
	#COMP_CSR_SW1
 (1 << 1)

	)

102 
	#COMP_CSR_EN
 (1 << 0)

	)

112 
BEGIN_DECLS


114 
comp_íabÀ
(
uöt8_t
 
id
);

115 
comp_dißbÀ
(
uöt8_t
 
id
);

116 
comp_£À˘_öput
(
uöt8_t
 
id
, 
uöt32_t
 
öput
);

117 
comp_£À˘_ouçut
(
uöt8_t
 
id
, 
uöt32_t
 
ouçut
);

118 
comp_£À˘_hy°
(
uöt8_t
 
id
, 
uöt32_t
 
hy°
);

119 
comp_£À˘_•ìd
(
uöt8_t
 
id
, 
uöt32_t
 
•ìd
);

121 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f0/crc.h

33 #i‚de‡
LIBOPENCM3_CRC_H


34 
	#LIBOPENCM3_CRC_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/¸c_v2.h
>

	@libopencm3/include/libopencm3/stm32/f0/dac.h

33 #i‚de‡
LIBOPENCM3_DAC_H


34 
	#LIBOPENCM3_DAC_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/dac_comm⁄_Æl.h
>

42 
	#DAC
 
DAC_BASE


	)

48 
	#DAC_CR
 
	`MMIO32
(
DAC_BASE
 + 0x00)

	)

49 
	#DAC_SWTRIGR
 
	`MMIO32
(
DAC_BASE
 + 0x04)

	)

50 
	#DAC_DHR12R1
 
	`MMIO32
(
DAC_BASE
 + 0x08)

	)

51 
	#DAC_DHR12L1
 
	`MMIO32
(
DAC_BASE
 + 0x0C)

	)

52 
	#DAC_DHR8R1
 
	`MMIO32
(
DAC_BASE
 + 0x10)

	)

53 
	#DAC_DOR1
 
	`MMIO32
(
DAC_BASE
 + 0x2C)

	)

54 
	#DAC_SR
 
	`MMIO32
(
DAC_BASE
 + 0x34)

	)

63 
	#DAC_CR_DMAUDRIE1
 (1 << 13)

	)

64 
	#DAC_CR_DMAEN1
 (1 << 12)

	)

66 
	#DAC_CR_TSEL1_SHIFT
 3

	)

67 
	#DAC_CR_TSEL1
 (7 << 
DAC_CR_TSEL1_SHIFT
)

	)

68 
	#DAC_CR_TSEL1_TIM6_TRGO
 (0 << 
DAC_CR_TSEL1_SHIFT
)

	)

69 
	#DAC_CR_TSEL1_TIM8_TRGO
 (1 << 
DAC_CR_TSEL1_SHIFT
)

	)

70 
	#DAC_CR_TSEL1_TIM7_TRGO
 (2 << 
DAC_CR_TSEL1_SHIFT
)

	)

71 
	#DAC_CR_TSEL1_TIM5_TRGO
 (3 << 
DAC_CR_TSEL1_SHIFT
)

	)

72 
	#DAC_CR_TSEL1_TIM2_TRGO
 (4 << 
DAC_CR_TSEL1_SHIFT
)

	)

73 
	#DAC_CR_TSEL1_TIM4_TRGO
 (5 << 
DAC_CR_TSEL1_SHIFT
)

	)

74 
	#DAC_CR_TSEL1_EXT_9
 (6 << 
DAC_CR_TSEL1_SHIFT
)

	)

75 
	#DAC_CR_TSEL1_SWTRG
 (7 << 
DAC_CR_TSEL1_SHIFT
)

	)

77 
	#DAC_CR_TEN1
 (1 << 2)

	)

78 
	#DAC_CR_BOFF1
 (1 << 1)

	)

79 
	#DAC_CR_EN1
 (1 << 0)

	)

83 
	#DAC_SWTRIGR_SWTRIG1
 (1 << 0)

	)

87 
	#DAC_DHR12R1_DACC1DHR
 0xFFF

	)

91 
	#DAC_DHR12L1_DACC1DHR
 (0xFFF << 4)

	)

95 
	#DAC_DHR8R1_DACC1DHR
 0xFF

	)

99 
	#DAC_DOR1_DACC1DOR
 0xFFF

	)

103 
	#DAC_SR_DMAUDR1
 (1 << 13)

	)

113 
BEGIN_DECLS


115 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f0/dma.h

31 #i‚de‡
LIBOPENCM3_DMA_H


32 
	#LIBOPENCM3_DMA_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dma_comm⁄_l1f013.h
>

	@libopencm3/include/libopencm3/stm32/f0/doc-stm32f0.h

	@libopencm3/include/libopencm3/stm32/f0/exti.h

33 #i‚de‡
LIBOPENCM3_EXTI_H


34 
	#LIBOPENCM3_EXTI_H


	)

37 
	~<lib›ícm3/°m32/comm⁄/exti_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f0/flash.h

35 #i‚de‡
LIBOPENCM3_FLASH_H


36 
	#LIBOPENCM3_FLASH_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/Êash_comm⁄_f01.h
>

46 
	#FLASH_OPTION_BYTE_0
 
	`FLASH_OPTION_BYTE
(0)

	)

47 
	#FLASH_OPTION_BYTE_1
 
	`FLASH_OPTION_BYTE
(1)

	)

48 
	#FLASH_OPTION_BYTE_2
 
	`FLASH_OPTION_BYTE
(2)

	)

49 
	#FLASH_OPTION_BYTE_3
 
	`FLASH_OPTION_BYTE
(3)

	)

50 
	#FLASH_OPTION_BYTE_4
 
	`FLASH_OPTION_BYTE
(4)

	)

51 
	#FLASH_OPTION_BYTE_5
 
	`FLASH_OPTION_BYTE
(5)

	)

63 
	#FLASH_ACR_LATENCY_000_024MHZ
 0

	)

64 
	#FLASH_ACR_LATENCY_024_048MHZ
 1

	)

65 
	#FLASH_ACR_LATENCY_0WS
 0

	)

66 
	#FLASH_ACR_LATENCY_1WS
 1

	)

71 
	#FLASH_SR_EOP
 (1 << 5)

	)

72 
	#FLASH_SR_WRPRTERR
 (1 << 4)

	)

73 
	#FLASH_SR_PGERR
 (1 << 2)

	)

74 
	#FLASH_SR_BSY
 (1 << 0)

	)

78 
	#FLASH_CR_OBL_LAUNCH
 (1 << 13)

	)

82 
	#FLASH_OBR_DATA1_SHIFT
 24

	)

83 
	#FLASH_OBR_DATA1
 (0xFF << 
FLASH_OBR_DATA1_SHIFT
)

	)

84 
	#FLASH_OBR_DATA0_SHIFT
 16

	)

85 
	#FLASH_OBR_DATA0
 (0xFF << 
FLASH_OBR_DATA0_SHIFT
)

	)

87 
	#FLASH_OBR_BOOT_SEL
 (1 << 15)

	)

88 
	#FLASH_OBR_RAM_PARITY_CHECK
 (1 << 14)

	)

89 
	#FLASH_OBR_VDDA_MONITOR
 (1 << 13)

	)

90 
	#FLASH_OBR_NBOOT1
 (1 << 12)

	)

91 
	#FLASH_OBR_NBOOT0
 (1 << 11)

	)

92 
	#FLASH_OBR_NRST_STDBY
 (1 << 10)

	)

93 
	#FLASH_OBR_NRST_STOP
 (1 << 9)

	)

94 
	#FLASH_OBR_WDG_SW
 (1 << 8)

	)

95 
	#FLASH_OBR_RDPRT
 (3 << 
FLASH_OBR_RDPRT_SHIFT
)

	)

96 
	#FLASH_OBR_RDPRT_L0
 (0 << 
FLASH_OBR_RDPRT_SHIFT
)

	)

97 
	#FLASH_OBR_RDPRT_L1
 (1 << 
FLASH_OBR_RDPRT_SHIFT
)

	)

98 
	#FLASH_OBR_RDPRT_L2
 (3 << 
FLASH_OBR_RDPRT_SHIFT
)

	)

105 
	#FLASH_RDP_L0
 ((
uöt8_t
)0xØ)

	)

106 
	#FLASH_RDP_L1
 ((
uöt8_t
)0xf0Ë

	)

107 
	#FLASH_RDP_L2
 ((
uöt8_t
)0xcc)

	)

113 
BEGIN_DECLS


115 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f0/gpio.h

31 #i‚de‡
LIBOPENCM3_GPIO_H


32 
	#LIBOPENCM3_GPIO_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_f24.h
>

44 
	#GPIO_BRR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x28)

	)

45 
	#GPIOA_BRR
 
	`GPIO_BRR
(
GPIOA
)

	)

46 
	#GPIOB_BRR
 
	`GPIO_BRR
(
GPIOB
)

	)

47 
	#GPIOC_BRR
 
	`GPIO_BRR
(
GPIOC
)

	)

48 
	#GPIOD_BRR
 
	`GPIO_BRR
(
GPIOD
)

	)

49 
	#GPIOF_BRR
 
	`GPIO_BRR
(
GPIOF
)

	)

58 
	#GPIO_OSPEED_LOW
 0x0

	)

59 
	#GPIO_OSPEED_MED
 0x1

	)

60 
	#GPIO_OSPEED_HIGH
 0x3

	)

71 
BEGIN_DECLS


73 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f0/i2c.h

32 #i‚de‡
LIBOPENCM3_I2C_H


33 
	#LIBOPENCM3_I2C_H


	)

35 
	~<lib›ícm3/°m32/comm⁄/i2c_comm⁄_v2.h
>

	@libopencm3/include/libopencm3/stm32/f0/iwdg.h

33 #i‚de‡
LIBOPENCM3_IWDG_H


34 
	#LIBOPENCM3_IWDG_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/iwdg_comm⁄_v2.h
>

	@libopencm3/include/libopencm3/stm32/f0/memorymap.h

22 #i‚de‡
LIBOPENCM3_MEMORYMAP_H


23 
	#LIBOPENCM3_MEMORYMAP_H


	)

25 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

30 
	#FLASH_BASE
 (0x08000000U)

	)

31 
	#PERIPH_BASE
 (0x40000000U)

	)

32 
	#INFO_BASE
 (0x1ffff000U)

	)

33 
	#PERIPH_BASE_APB
 (
PERIPH_BASE
 + 0x00000000)

	)

34 
	#PERIPH_BASE_AHB1
 (
PERIPH_BASE
 + 0x00020000)

	)

35 
	#PERIPH_BASE_AHB2
 (
PERIPH_BASE
 + 0x08000000)

	)

40 
	#TIM2_BASE
 (
PERIPH_BASE_APB
 + 0x0000)

	)

41 
	#TIM3_BASE
 (
PERIPH_BASE_APB
 + 0x0400)

	)

43 
	#TIM6_BASE
 (
PERIPH_BASE_APB
 + 0x1000)

	)

44 
	#TIM7_BASE
 (
PERIPH_BASE_APB
 + 0x1400)

	)

46 
	#TIM14_BASE
 (
PERIPH_BASE_APB
 + 0x2000)

	)

48 
	#RTC_BASE
 (
PERIPH_BASE_APB
 + 0x2800)

	)

49 
	#WWDG_BASE
 (
PERIPH_BASE_APB
 + 0x2c00)

	)

50 
	#IWDG_BASE
 (
PERIPH_BASE_APB
 + 0x3000)

	)

52 
	#SPI2_BASE
 (
PERIPH_BASE_APB
 + 0x3800)

	)

54 
	#USART2_BASE
 (
PERIPH_BASE_APB
 + 0x4400)

	)

55 
	#USART3_BASE
 (
PERIPH_BASE_APB
 + 0x4800)

	)

56 
	#USART4_BASE
 (
PERIPH_BASE_APB
 + 0x4C00)

	)

58 
	#I2C1_BASE
 (
PERIPH_BASE_APB
 + 0x5400)

	)

59 
	#I2C2_BASE
 (
PERIPH_BASE_APB
 + 0x5800)

	)

60 
	#USB_DEV_FS_BASE
 (
PERIPH_BASE_APB
 + 0x5C00)

	)

61 
	#USB_PMA_BASE
 (
PERIPH_BASE_APB
 + 0x6000)

	)

62 
	#BX_CAN1_BASE
 (
PERIPH_BASE_APB
 + 0x6400)

	)

64 
	#CRS_BASE
 (
PERIPH_BASE_APB
 + 0x6C00)

	)

65 
	#POWER_CONTROL_BASE
 (
PERIPH_BASE_APB
 + 0x7000)

	)

66 
	#DAC_BASE
 (
PERIPH_BASE_APB
 + 0x7400)

	)

67 
	#CEC_BASE
 (
PERIPH_BASE_APB
 + 0x7800)

	)

69 
	#SYSCFG_COMP_BASE
 (
PERIPH_BASE_APB
 + 0x10000)

	)

70 
	#EXTI_BASE
 (
PERIPH_BASE_APB
 + 0x10400)

	)

72 
	#ADC_BASE
 (
PERIPH_BASE_APB
 + 0x12400)

	)

73 
	#TIM1_BASE
 (
PERIPH_BASE_APB
 + 0x12C00)

	)

74 
	#SPI1_BASE
 (
PERIPH_BASE_APB
 + 0x13000)

	)

76 
	#USART1_BASE
 (
PERIPH_BASE_APB
 + 0x13800)

	)

77 
	#TIM15_BASE
 (
PERIPH_BASE_APB
 + 0x14000)

	)

78 
	#TIM16_BASE
 (
PERIPH_BASE_APB
 + 0x14400)

	)

79 
	#TIM17_BASE
 (
PERIPH_BASE_APB
 + 0x14800)

	)

81 
	#DBGMCU_BASE
 (
PERIPH_BASE_APB
 + 0x15800)

	)

84 
	#DMA_BASE
 (
PERIPH_BASE_AHB1
 + 0x0000)

	)

86 
	#DMA1_BASE
 
DMA_BASE


	)

88 
	#RCC_BASE
 (
PERIPH_BASE_AHB1
 + 0x1000)

	)

90 
	#FLASH_MEM_INTERFACE_BASE
 (
PERIPH_BASE_AHB1
 + 0x2000)

	)

92 
	#CRC_BASE
 (
PERIPH_BASE_AHB1
 + 0x3000)

	)

94 
	#TSC_BASE
 (
PERIPH_BASE_AHB1
 + 0x4000)

	)

97 
	#GPIO_PORT_A_BASE
 (
PERIPH_BASE_AHB2
 + 0x0000)

	)

98 
	#GPIO_PORT_B_BASE
 (
PERIPH_BASE_AHB2
 + 0x0400)

	)

99 
	#GPIO_PORT_C_BASE
 (
PERIPH_BASE_AHB2
 + 0x0800)

	)

100 
	#GPIO_PORT_D_BASE
 (
PERIPH_BASE_AHB2
 + 0x0C00)

	)

101 
	#GPIO_PORT_E_BASE
 (
PERIPH_BASE_AHB2
 + 0x1000)

	)

102 
	#GPIO_PORT_F_BASE
 (
PERIPH_BASE_AHB2
 + 0x1400)

	)

105 
	#DESIG_FLASH_SIZE_BASE
 (0x1FFFF7CCU)

	)

106 
	#DESIG_UNIQUE_ID_BASE
 (0x1FFFF7ACU)

	)

107 
	#DESIG_UNIQUE_ID0
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
)

	)

108 
	#DESIG_UNIQUE_ID1
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 4)

	)

109 
	#DESIG_UNIQUE_ID2
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 8)

	)

112 
	#ST_VREFINT_CAL
 
	`MMIO16
(0x1FFFF7BA)

	)

113 
	#ST_TSENSE_CAL1_30C
 
	`MMIO16
(0x1FFFF7B8)

	)

114 
	#ST_TSENSE_CAL2_110C
 
	`MMIO16
(0x1FFFF7C2)

	)

	@libopencm3/include/libopencm3/stm32/f0/nvic.h

6 #i‚de‡
LIBOPENCM3_STM32_F0_NVIC_H


7 
	#LIBOPENCM3_STM32_F0_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_WWDG_IRQ
 0

	)

17 
	#NVIC_PVD_IRQ
 1

	)

18 
	#NVIC_RTC_IRQ
 2

	)

19 
	#NVIC_FLASH_IRQ
 3

	)

20 
	#NVIC_RCC_IRQ
 4

	)

21 
	#NVIC_EXTI0_1_IRQ
 5

	)

22 
	#NVIC_EXTI2_3_IRQ
 6

	)

23 
	#NVIC_EXTI4_15_IRQ
 7

	)

24 
	#NVIC_TSC_IRQ
 8

	)

25 
	#NVIC_DMA1_CHANNEL1_IRQ
 9

	)

26 
	#NVIC_DMA1_CHANNEL2_3_IRQ
 10

	)

27 
	#NVIC_DMA1_CHANNEL4_5_IRQ
 11

	)

28 
	#NVIC_ADC_COMP_IRQ
 12

	)

29 
	#NVIC_TIM1_BRK_UP_TRG_COM_IRQ
 13

	)

30 
	#NVIC_TIM1_CC_IRQ
 14

	)

31 
	#NVIC_TIM2_IRQ
 15

	)

32 
	#NVIC_TIM3_IRQ
 16

	)

33 
	#NVIC_TIM6_DAC_IRQ
 17

	)

34 
	#NVIC_TIM7_IRQ
 18

	)

35 
	#NVIC_TIM14_IRQ
 19

	)

36 
	#NVIC_TIM15_IRQ
 20

	)

37 
	#NVIC_TIM16_IRQ
 21

	)

38 
	#NVIC_TIM17_IRQ
 22

	)

39 
	#NVIC_I2C1_IRQ
 23

	)

40 
	#NVIC_I2C2_IRQ
 24

	)

41 
	#NVIC_SPI1_IRQ
 25

	)

42 
	#NVIC_SPI2_IRQ
 26

	)

43 
	#NVIC_USART1_IRQ
 27

	)

44 
	#NVIC_USART2_IRQ
 28

	)

45 
	#NVIC_USART3_4_IRQ
 29

	)

46 
	#NVIC_CEC_CAN_IRQ
 30

	)

47 
	#NVIC_USB_IRQ
 31

	)

49 
	#NVIC_IRQ_COUNT
 32

	)

58 
BEGIN_DECLS


60 
wwdg_i§
();

61 
pvd_i§
();

62 
πc_i§
();

63 
Êash_i§
();

64 
rcc_i§
();

65 
exti0_1_i§
();

66 
exti2_3_i§
();

67 
exti4_15_i§
();

68 
tsc_i§
();

69 
dma1_ch™√l1_i§
();

70 
dma1_ch™√l2_3_i§
();

71 
dma1_ch™√l4_5_i§
();

72 
adc_comp_i§
();

73 
tim1_brk_up_åg_com_i§
();

74 
tim1_cc_i§
();

75 
tim2_i§
();

76 
tim3_i§
();

77 
tim6_dac_i§
();

78 
tim7_i§
();

79 
tim14_i§
();

80 
tim15_i§
();

81 
tim16_i§
();

82 
tim17_i§
();

83 
i2c1_i§
();

84 
i2c2_i§
();

85 
•i1_i§
();

86 
•i2_i§
();

87 
ußπ1_i§
();

88 
ußπ2_i§
();

89 
ußπ3_4_i§
();

90 
˚c_ˇn_i§
();

91 
usb_i§
();

93 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f0/pwr.h

31 #i‚de‡
LIBOPENCM3_PWR_H


32 
	#LIBOPENCM3_PWR_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/pwr_comm⁄_v1.h
>

49 
	#PWR_CSR_EWUP2
 (1 << 9)

	)

52 
	#PWR_CSR_EWUP1
 (1 << 8)

	)

62 
BEGIN_DECLS


64 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f0/rcc.h

37 #i‚de‡
LIBOPENCM3_RCC_H


38 
	#LIBOPENCM3_RCC_H


	)

48 
	#RCC_CR
 
	`MMIO32
(
RCC_BASE
 + 0x00)

	)

49 
	#RCC_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x04)

	)

50 
	#RCC_CIR
 
	`MMIO32
(
RCC_BASE
 + 0x08)

	)

51 
	#RCC_APB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x0c)

	)

52 
	#RCC_APB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x10)

	)

53 
	#RCC_AHBENR
 
	`MMIO32
(
RCC_BASE
 + 0x14)

	)

54 
	#RCC_APB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x18)

	)

55 
	#RCC_APB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x1c)

	)

56 
	#RCC_BDCR
 
	`MMIO32
(
RCC_BASE
 + 0x20)

	)

57 
	#RCC_CSR
 
	`MMIO32
(
RCC_BASE
 + 0x24)

	)

58 
	#RCC_AHBRSTR
 
	`MMIO32
(
RCC_BASE
 + 0x28)

	)

59 
	#RCC_CFGR2
 
	`MMIO32
(
RCC_BASE
 + 0x2c)

	)

60 
	#RCC_CFGR3
 
	`MMIO32
(
RCC_BASE
 + 0x30)

	)

61 
	#RCC_CR2
 
	`MMIO32
(
RCC_BASE
 + 0x34)

	)

69 
	#RCC_CR_PLLRDY
 (1 << 25)

	)

70 
	#RCC_CR_PLLON
 (1 << 24)

	)

71 
	#RCC_CR_CSSON
 (1 << 19)

	)

72 
	#RCC_CR_HSEBYP
 (1 << 18)

	)

73 
	#RCC_CR_HSERDY
 (1 << 17)

	)

74 
	#RCC_CR_HSEON
 (1 << 16)

	)

75 
	#RCC_CR_HSICAL_SHIFT
 8

	)

76 
	#RCC_CR_HSICAL
 (0xFF << 
RCC_CR_HSICAL_SHIFT
)

	)

77 
	#RCC_CR_HSITRIM_SHIFT
 3

	)

78 
	#RCC_CR_HSITRIM
 (0x1F << 
RCC_CR_HSITRIM_SHIFT
)

	)

79 
	#RCC_CR_HSIRDY
 (1 << 1)

	)

80 
	#RCC_CR_HSION
 (1 << 0)

	)

84 
	#RCC_CFGR_PLLNODIV
 (1 << 31)

	)

86 
	#RCC_CFGR_MCOPRE_SHIFT
 28

	)

87 
	#RCC_CFGR_MCOPRE
 (7 << 
RCC_CFGR_MCOPRE_SHIFT
)

	)

88 
	#RCC_CFGR_MCOPRE_DIV1
 (0 << 
RCC_CFGR_MCOPRE_SHIFT
)

	)

89 
	#RCC_CFGR_MCOPRE_DIV2
 (1 << 
RCC_CFGR_MCOPRE_SHIFT
)

	)

90 
	#RCC_CFGR_MCOPRE_DIV4
 (2 << 
RCC_CFGR_MCOPRE_SHIFT
)

	)

91 
	#RCC_CFGR_MCOPRE_DIV8
 (3 << 
RCC_CFGR_MCOPRE_SHIFT
)

	)

92 
	#RCC_CFGR_MCOPRE_DIV16
 (4 << 
RCC_CFGR_MCOPRE_SHIFT
)

	)

93 
	#RCC_CFGR_MCOPRE_DIV32
 (5 << 
RCC_CFGR_MCOPRE_SHIFT
)

	)

94 
	#RCC_CFGR_MCOPRE_DIV64
 (6 << 
RCC_CFGR_MCOPRE_SHIFT
)

	)

95 
	#RCC_CFGR_MCOPRE_DIV128
 (7 << 
RCC_CFGR_MCOPRE_SHIFT
)

	)

97 
	#RCC_CFGR_MCO_SHIFT
 24

	)

98 
	#RCC_CFGR_MCO_MASK
 0xf

	)

99 
	#RCC_CFGR_MCO_NOCLK
 0

	)

100 
	#RCC_CFGR_MCO_HSI14
 1

	)

101 
	#RCC_CFGR_MCO_LSI
 2

	)

102 
	#RCC_CFGR_MCO_LSE
 3

	)

103 
	#RCC_CFGR_MCO_SYSCLK
 4

	)

104 
	#RCC_CFGR_MCO_HSI
 5

	)

105 
	#RCC_CFGR_MCO_HSE
 6

	)

106 
	#RCC_CFGR_MCO_PLL
 7

	)

107 
	#RCC_CFGR_MCO_HSI48
 8

	)

109 
	#RCC_CFGR_PLLMUL_SHIFT
 18

	)

110 
	#RCC_CFGR_PLLMUL
 (0x0F << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

111 
	#RCC_CFGR_PLLMUL_MUL2
 (0x00 << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

112 
	#RCC_CFGR_PLLMUL_MUL3
 (0x01 << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

113 
	#RCC_CFGR_PLLMUL_MUL4
 (0x02 << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

114 
	#RCC_CFGR_PLLMUL_MUL5
 (0x03 << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

115 
	#RCC_CFGR_PLLMUL_MUL6
 (0x04 << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

116 
	#RCC_CFGR_PLLMUL_MUL7
 (0x05 << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

117 
	#RCC_CFGR_PLLMUL_MUL8
 (0x06 << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

118 
	#RCC_CFGR_PLLMUL_MUL9
 (0x07 << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

119 
	#RCC_CFGR_PLLMUL_MUL10
 (0x08 << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

120 
	#RCC_CFGR_PLLMUL_MUL11
 (0x09 << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

121 
	#RCC_CFGR_PLLMUL_MUL12
 (0x0A << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

122 
	#RCC_CFGR_PLLMUL_MUL13
 (0x0B << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

123 
	#RCC_CFGR_PLLMUL_MUL14
 (0x0C << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

124 
	#RCC_CFGR_PLLMUL_MUL15
 (0x0D << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

125 
	#RCC_CFGR_PLLMUL_MUL16
 (0x0E << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

127 
	#RCC_CFGR_PLLXTPRE
 (1<<17)

	)

128 
	#RCC_CFGR_PLLXTPRE_HSE_CLK
 0x0

	)

129 
	#RCC_CFGR_PLLXTPRE_HSE_CLK_DIV2
 0x1

	)

131 
	#RCC_CFGR_PLLSRC
 (1<<16)

	)

132 
	#RCC_CFGR_PLLSRC_HSI_CLK_DIV2
 0x0

	)

133 
	#RCC_CFGR_PLLSRC_HSE_CLK
 0x1

	)

135 
	#RCC_CFGR_PLLSRC0
 (1<<15)

	)

136 
	#RCC_CFGR_ADCPRE
 (1<<14)

	)

138 
	#RCC_CFGR_PPRE_SHIFT
 8

	)

139 
	#RCC_CFGR_PPRE
 (7 << 
RCC_CFGR_PPRE_SHIFT
)

	)

140 
	#RCC_CFGR_PPRE_NODIV
 (0 << 
RCC_CFGR_PPRE_SHIFT
)

	)

141 
	#RCC_CFGR_PPRE_DIV2
 (4 << 
RCC_CFGR_PPRE_SHIFT
)

	)

142 
	#RCC_CFGR_PPRE_DIV4
 (5 << 
RCC_CFGR_PPRE_SHIFT
)

	)

143 
	#RCC_CFGR_PPRE_DIV8
 (6 << 
RCC_CFGR_PPRE_SHIFT
)

	)

144 
	#RCC_CFGR_PPRE_DIV16
 (7 << 
RCC_CFGR_PPRE_SHIFT
)

	)

146 
	#RCC_CFGR_HPRE_SHIFT
 4

	)

147 
	#RCC_CFGR_HPRE
 (0x‡<< 
RCC_CFGR_HPRE_SHIFT
)

	)

148 
	#RCC_CFGR_HPRE_NODIV
 (0x0 << 
RCC_CFGR_HPRE_SHIFT
)

	)

149 
	#RCC_CFGR_HPRE_DIV2
 (0x8 << 
RCC_CFGR_HPRE_SHIFT
)

	)

150 
	#RCC_CFGR_HPRE_DIV4
 (0x9 << 
RCC_CFGR_HPRE_SHIFT
)

	)

151 
	#RCC_CFGR_HPRE_DIV8
 (0x®<< 
RCC_CFGR_HPRE_SHIFT
)

	)

152 
	#RCC_CFGR_HPRE_DIV16
 (0xb << 
RCC_CFGR_HPRE_SHIFT
)

	)

153 
	#RCC_CFGR_HPRE_DIV64
 (0x¯<< 
RCC_CFGR_HPRE_SHIFT
)

	)

154 
	#RCC_CFGR_HPRE_DIV128
 (0xd << 
RCC_CFGR_HPRE_SHIFT
)

	)

155 
	#RCC_CFGR_HPRE_DIV256
 (0xê<< 
RCC_CFGR_HPRE_SHIFT
)

	)

156 
	#RCC_CFGR_HPRE_DIV512
 (0x‡<< 
RCC_CFGR_HPRE_SHIFT
)

	)

158 
	#RCC_CFGR_SWS_SHIFT
 2

	)

159 
	#RCC_CFGR_SWS
 (3 << 
RCC_CFGR_SWS_SHIFT
)

	)

160 
	#RCC_CFGR_SWS_HSI
 (0 << 
RCC_CFGR_SWS_SHIFT
)

	)

161 
	#RCC_CFGR_SWS_HSE
 (1 << 
RCC_CFGR_SWS_SHIFT
)

	)

162 
	#RCC_CFGR_SWS_PLL
 (2 << 
RCC_CFGR_SWS_SHIFT
)

	)

163 
	#RCC_CFGR_SWS_HSI48
 (3 << 
RCC_CFGR_SWS_SHIFT
)

	)

165 
	#RCC_CFGR_SW_SHIFT
 0

	)

166 
	#RCC_CFGR_SW
 (3 << 
RCC_CFGR_SW_SHIFT
)

	)

167 
	#RCC_CFGR_SW_HSI
 (0 << 
RCC_CFGR_SW_SHIFT
)

	)

168 
	#RCC_CFGR_SW_HSE
 (1 << 
RCC_CFGR_SW_SHIFT
)

	)

169 
	#RCC_CFGR_SW_PLL
 (2 << 
RCC_CFGR_SW_SHIFT
)

	)

170 
	#RCC_CFGR_SW_HSI48
 (3 << 
RCC_CFGR_SW_SHIFT
)

	)

174 
	#RCC_CIR_CSSC
 (1 << 23)

	)

175 
	#RCC_CIR_HSI48RDYC
 (1 << 22)

	)

176 
	#RCC_CIR_HSI14RDYC
 (1 << 21)

	)

177 
	#RCC_CIR_PLLRDYC
 (1 << 20)

	)

178 
	#RCC_CIR_HSERDYC
 (1 << 19)

	)

179 
	#RCC_CIR_HSIRDYC
 (1 << 18)

	)

180 
	#RCC_CIR_LSERDYC
 (1 << 17)

	)

181 
	#RCC_CIR_LSIRDYC
 (1 << 16)

	)

182 
	#RCC_CIR_HSI48RDYIE
 (1 << 14)

	)

183 
	#RCC_CIR_HSI14RDYIE
 (1 << 13)

	)

184 
	#RCC_CIR_PLLRDYIE
 (1 << 12)

	)

185 
	#RCC_CIR_HSERDYIE
 (1 << 11)

	)

186 
	#RCC_CIR_HSIRDYIE
 (1 << 10)

	)

187 
	#RCC_CIR_LSERDYIE
 (1 << 9)

	)

188 
	#RCC_CIR_LSIRDYIE
 (1 << 8)

	)

189 
	#RCC_CIR_CSSF
 (1 << 7)

	)

190 
	#RCC_CIR_HSI48RDYF
 (1 << 6)

	)

191 
	#RCC_CIR_HSI14RDYF
 (1 << 5)

	)

192 
	#RCC_CIR_PLLRDYF
 (1 << 4)

	)

193 
	#RCC_CIR_HSERDYF
 (1 << 3)

	)

194 
	#RCC_CIR_HSIRDYF
 (1 << 2)

	)

195 
	#RCC_CIR_LSERDYF
 (1 << 1)

	)

196 
	#RCC_CIR_LSIRDYF
 (1 << 0)

	)

200 
	#RCC_APB2RSTR_DBGMCURST
 (1 << 22)

	)

201 
	#RCC_APB2RSTR_TIM17RST
 (1 << 18)

	)

202 
	#RCC_APB2RSTR_TIM16RST
 (1 << 17)

	)

203 
	#RCC_APB2RSTR_TIM15RST
 (1 << 16)

	)

204 
	#RCC_APB2RSTR_USART1RST
 (1 << 14)

	)

205 
	#RCC_APB2RSTR_SPI1RST
 (1 << 12)

	)

206 
	#RCC_APB2RSTR_TIM1RST
 (1 << 11)

	)

207 
	#RCC_APB2RSTR_ADCRST
 (1 << 9)

	)

208 
	#RCC_APB2RSTR_SYSCFGRST
 (1 << 0)

	)

212 
	#RCC_APB1RSTR_CECRST
 (1 << 30)

	)

213 
	#RCC_APB1RSTR_DACRST
 (1 << 29)

	)

214 
	#RCC_APB1RSTR_PWRRST
 (1 << 28)

	)

215 
	#RCC_APB1RSTR_CRSRST
 (1 << 27)

	)

216 
	#RCC_APB1RSTR_CANRST
 (1 << 25)

	)

217 
	#RCC_APB1RSTR_USBRST
 (1 << 23)

	)

218 
	#RCC_APB1RSTR_I2C2RST
 (1 << 22)

	)

219 
	#RCC_APB1RSTR_I2C1RST
 (1 << 21)

	)

220 
	#RCC_APB1RSTR_USART4RST
 (1 << 19)

	)

221 
	#RCC_APB1RSTR_USART3RST
 (1 << 18)

	)

222 
	#RCC_APB1RSTR_USART2RST
 (1 << 17)

	)

223 
	#RCC_APB1RSTR_SPI2RST
 (1 << 14)

	)

224 
	#RCC_APB1RSTR_WWDGRST
 (1 << 11)

	)

225 
	#RCC_APB1RSTR_TIM14RST
 (1 << 8)

	)

226 
	#RCC_APB1RSTR_TIM7RST
 (1 << 5)

	)

227 
	#RCC_APB1RSTR_TIM6RST
 (1 << 4)

	)

228 
	#RCC_APB1RSTR_TIM3RST
 (1 << 1)

	)

229 
	#RCC_APB1RSTR_TIM2RST
 (1 << 0)

	)

233 
	#RCC_AHBENR_TSCEN
 (1 << 24)

	)

234 
	#RCC_AHBENR_GPIOFEN
 (1 << 22)

	)

235 
	#RCC_AHBENR_GPIOEEN
 (1 << 21)

	)

236 
	#RCC_AHBENR_GPIODEN
 (1 << 20)

	)

237 
	#RCC_AHBENR_GPIOCEN
 (1 << 19)

	)

238 
	#RCC_AHBENR_GPIOBEN
 (1 << 18)

	)

239 
	#RCC_AHBENR_GPIOAEN
 (1 << 17)

	)

240 
	#RCC_AHBENR_CRCEN
 (1 << 6)

	)

241 
	#RCC_AHBENR_FLTFEN
 (1 << 4)

	)

242 
	#RCC_AHBENR_SRAMEN
 (1 << 2)

	)

243 
	#RCC_AHBENR_DMAEN
 (1 << 0)

	)

247 
	#RCC_APB2ENR_DBGMCUEN
 (1 << 22)

	)

248 
	#RCC_APB2ENR_TIM17EN
 (1 << 18)

	)

249 
	#RCC_APB2ENR_TIM16EN
 (1 << 17)

	)

250 
	#RCC_APB2ENR_TIM15EN
 (1 << 16)

	)

251 
	#RCC_APB2ENR_USART1EN
 (1 << 14)

	)

252 
	#RCC_APB2ENR_SPI1EN
 (1 << 12)

	)

253 
	#RCC_APB2ENR_TIM1EN
 (1 << 11)

	)

254 
	#RCC_APB2ENR_ADCEN
 (1 << 9)

	)

255 
	#RCC_APB2ENR_SYSCFGCOMPEN
 (1 << 0)

	)

259 
	#RCC_APB1ENR_CECEN
 (1 << 30)

	)

260 
	#RCC_APB1ENR_DACEN
 (1 << 29)

	)

261 
	#RCC_APB1ENR_PWREN
 (1 << 28)

	)

262 
	#RCC_APB1ENR_CRSEN
 (1 << 27)

	)

263 
	#RCC_APB1ENR_CANEN
 (1 << 25)

	)

264 
	#RCC_APB1ENR_USBEN
 (1 << 23)

	)

265 
	#RCC_APB1ENR_I2C2EN
 (1 << 22)

	)

266 
	#RCC_APB1ENR_I2C1EN
 (1 << 21)

	)

267 
	#RCC_APB1ENR_USART4EN
 (1 << 19)

	)

268 
	#RCC_APB1ENR_USART3EN
 (1 << 18)

	)

269 
	#RCC_APB1ENR_USART2EN
 (1 << 17)

	)

270 
	#RCC_APB1ENR_SPI2EN
 (1 << 14)

	)

271 
	#RCC_APB1ENR_WWDGEN
 (1 << 11)

	)

272 
	#RCC_APB1ENR_TIM14EN
 (1 << 8)

	)

273 
	#RCC_APB1ENR_TIM7EN
 (1 << 5)

	)

274 
	#RCC_APB1ENR_TIM6EN
 (1 << 4)

	)

275 
	#RCC_APB1ENR_TIM3EN
 (1 << 1)

	)

276 
	#RCC_APB1ENR_TIM2EN
 (1 << 0)

	)

280 
	#RCC_BDCR_BDRST
 (1 << 16)

	)

281 
	#RCC_BDCR_RTCEN
 (1 << 15)

	)

282 
	#RCC_BDCR_RTCSEL_SHIFT
 8

	)

283 
	#RCC_BDCR_RTCSEL
 (3 << 
RCC_BDCR_RTCSEL_SHIFT
)

	)

284 
	#RCC_BDCR_RTCSEL_NOCLK
 (0 << 
RCC_BDCR_RTCSEL_SHIFT
)

	)

285 
	#RCC_BDCR_RTCSEL_LSE
 (1 << 
RCC_BDCR_RTCSEL_SHIFT
)

	)

286 
	#RCC_BDCR_RTCSEL_LSI
 (2 << 
RCC_BDCR_RTCSEL_SHIFT
)

	)

287 
	#RCC_BDCR_RTCSEL_HSE
 (3 << 
RCC_BDCR_RTCSEL_SHIFT
)

	)

288 
	#RCC_BDCR_LSEDRV_SHIFT
 3

	)

289 
	#RCC_BDCR_LSEDRV
 (3 << 
RCC_BDCR_LSEDRV_SHIFT
)

	)

290 
	#RCC_BDCR_LSEDRV_LOW
 (0 << 
RCC_BDCR_LSEDRV_SHIFT
)

	)

291 
	#RCC_BDCR_LSEDRV_MEDLO
 (1 << 
RCC_BDCR_LSEDRV_SHIFT
)

	)

292 
	#RCC_BDCR_LSEDRV_MEDHI
 (2 << 
RCC_BDCR_LSEDRV_SHIFT
)

	)

293 
	#RCC_BDCR_LSEDRV_HIGH
 (3 << 
RCC_BDCR_LSEDRV_SHIFT
)

	)

294 
	#RCC_BDCR_LSEBYP
 (1 << 2)

	)

295 
	#RCC_BDCR_LSERDY
 (1 << 1)

	)

296 
	#RCC_BDCR_LSEON
 (1 << 0)

	)

300 
	#RCC_CSR_LPWRRSTF
 (1 << 31)

	)

301 
	#RCC_CSR_WWDGRSTF
 (1 << 30)

	)

302 
	#RCC_CSR_IWDGRSTF
 (1 << 29)

	)

303 
	#RCC_CSR_SFTRSTF
 (1 << 28)

	)

304 
	#RCC_CSR_PORRSTF
 (1 << 27)

	)

305 
	#RCC_CSR_PINRSTF
 (1 << 26)

	)

306 
	#RCC_CSR_OBLRSTF
 (1 << 25)

	)

307 
	#RCC_CSR_RMVF
 (1 << 24)

	)

308 
	#RCC_CSR_RESET_FLAGS
 (
RCC_CSR_LPWRRSTF
 | 
RCC_CSR_WWDGRSTF
 |\

309 
RCC_CSR_IWDGRSTF
 | 
RCC_CSR_SFTRSTF
 | 
RCC_CSR_PORRSTF
 |\

310 
RCC_CSR_PINRSTF
 | 
RCC_CSR_OBLRSTF
)

	)

311 
	#RCC_CSR_V18PWRRSTF
 (1 << 23)

	)

312 
	#RCC_CSR_LSIRDY
 (1 << 1)

	)

313 
	#RCC_CSR_LSION
 (1 << 0)

	)

317 
	#RCC_AHBRSTR_TSCRST
 (1 << 24)

	)

318 
	#RCC_AHBRSTR_IOPFRST
 (1 << 22)

	)

319 
	#RCC_AHBRSTR_IOPERST
 (1 << 21)

	)

320 
	#RCC_AHBRSTR_IOPDRST
 (1 << 20)

	)

321 
	#RCC_AHBRSTR_IOPCRST
 (1 << 19)

	)

322 
	#RCC_AHBRSTR_IOPBRST
 (1 << 18)

	)

323 
	#RCC_AHBRSTR_IOPARST
 (1 << 17)

	)

328 
	#RCC_CFGR2_PREDIV
 0xf

	)

332 
	#RCC_CFGR2_PREDIV_NODIV
 0x0

	)

333 
	#RCC_CFGR2_PREDIV_DIV2
 0x1

	)

334 
	#RCC_CFGR2_PREDIV_DIV3
 0x2

	)

335 
	#RCC_CFGR2_PREDIV_DIV4
 0x3

	)

336 
	#RCC_CFGR2_PREDIV_DIV5
 0x4

	)

337 
	#RCC_CFGR2_PREDIV_DIV6
 0x5

	)

338 
	#RCC_CFGR2_PREDIV_DIV7
 0x6

	)

339 
	#RCC_CFGR2_PREDIV_DIV8
 0x7

	)

340 
	#RCC_CFGR2_PREDIV_DIV9
 0x8

	)

341 
	#RCC_CFGR2_PREDIV_DIV10
 0x9

	)

342 
	#RCC_CFGR2_PREDIV_DIV11
 0xa

	)

343 
	#RCC_CFGR2_PREDIV_DIV12
 0xb

	)

344 
	#RCC_CFGR2_PREDIV_DIV13
 0xc

	)

345 
	#RCC_CFGR2_PREDIV_DIV14
 0xd

	)

346 
	#RCC_CFGR2_PREDIV_DIV15
 0xe

	)

347 
	#RCC_CFGR2_PREDIV_DIV16
 0xf

	)

352 
	#RCC_CFGR3_USART2SW_SHIFT
 16

	)

353 
	#RCC_CFGR3_USART2SW
 (3 << 
RCC_CFGR3_USART2SW_SHIFT
)

	)

354 
	#RCC_CFGR3_USART2SW_PCLK
 (0 << 
RCC_CFGR3_USART2SW_SHIFT
)

	)

355 
	#RCC_CFGR3_USART2SW_SYSCLK
 (1 << 
RCC_CFGR3_USART2SW_SHIFT
)

	)

356 
	#RCC_CFGR3_USART2SW_LSE
 (2 << 
RCC_CFGR3_USART2SW_SHIFT
)

	)

357 
	#RCC_CFGR3_USART2SW_HSI
 (3 << 
RCC_CFGR3_USART2SW_SHIFT
)

	)

359 
	#RCC_CFGR3_ADCSW
 (1 << 8)

	)

360 
	#RCC_CFGR3_USBSW
 (1 << 7)

	)

361 
	#RCC_CFGR3_CECSW
 (1 << 6)

	)

362 
	#RCC_CFGR3_I2C1SW
 (1 << 4)

	)

364 
	#RCC_CFGR3_USART1SW_SHIFT
 0

	)

365 
	#RCC_CFGR3_USART1SW
 (3 << 
RCC_CFGR3_USART1SW_SHIFT
)

	)

366 
	#RCC_CFGR3_USART1SW_PCLK
 (0 << 
RCC_CFGR3_USART1SW_SHIFT
)

	)

367 
	#RCC_CFGR3_USART1SW_SYSCLK
 (1 << 
RCC_CFGR3_USART1SW_SHIFT
)

	)

368 
	#RCC_CFGR3_USART1SW_LSE
 (2 << 
RCC_CFGR3_USART1SW_SHIFT
)

	)

369 
	#RCC_CFGR3_USART1SW_HSI
 (3 << 
RCC_CFGR3_USART1SW_SHIFT
)

	)

373 
	#RCC_CR2_HSI48CAL_SHIFT
 24

	)

374 
	#RCC_CR2_HSI48CAL
 (0xFF << 
RCC_CR2_HSI48CAL_SHIFT
)

	)

375 
	#RCC_CR2_HSI48RDY
 (1 << 17)

	)

376 
	#RCC_CR2_HSI48ON
 (1 << 16)

	)

377 
	#RCC_CR2_HSI14CAL_SHIFT
 8

	)

378 
	#RCC_CR2_HSI14CAL
 (0xFF << 
RCC_CR2_HSI14CAL_SHIFT
)

	)

379 
	#RCC_CR2_HSI14TRIM_SHIFT
 3

	)

380 
	#RCC_CR2_HSI14TRIM
 (31 << 
RCC_CR2_HSI14TRIM_SHIFT
)

	)

381 
	#RCC_CR2_HSI14DIS
 (1 << 2)

	)

382 
	#RCC_CR2_HSI14RDY
 (1 << 1)

	)

383 
	#RCC_CR2_HSI14ON
 (1 << 0)

	)

390 
uöt32_t
 
rcc_ahb_‰equícy
;

391 
uöt32_t
 
rcc_≠b1_‰equícy
;

395 
	#rcc_≠b2_‰equícy
 
rcc_≠b1_‰equícy


	)

397 
	ercc_osc
 {

398 
	mRCC_HSI14
, 
	mRCC_HSI
, 
	mRCC_HSE
, 
	mRCC_PLL
, 
	mRCC_LSI
, 
	mRCC_LSE
, 
	mRCC_HSI48


401 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

403 
	ercc_≥rùh_˛kí
 {

405 
	mRCC_DMA
 = 
_REG_BIT
(0x14, 0),

406 
	mRCC_DMA1
 = 
_REG_BIT
(0x14, 0),

407 
	mRCC_DMA2
 = 
_REG_BIT
(0x14, 1),

408 
	mRCC_SRAM
 = 
_REG_BIT
(0x14, 2),

409 
	mRCC_FLTIF
 = 
_REG_BIT
(0x14, 4),

410 
	mRCC_CRC
 = 
_REG_BIT
(0x14, 6),

411 
	mRCC_GPIOA
 = 
_REG_BIT
(0x14, 17),

412 
	mRCC_GPIOB
 = 
_REG_BIT
(0x14, 18),

413 
	mRCC_GPIOC
 = 
_REG_BIT
(0x14, 19),

414 
	mRCC_GPIOD
 = 
_REG_BIT
(0x14, 20),

415 
	mRCC_GPIOE
 = 
_REG_BIT
(0x14, 21),

416 
	mRCC_GPIOF
 = 
_REG_BIT
(0x14, 22),

417 
	mRCC_TSC
 = 
_REG_BIT
(0x14, 24),

420 
	mRCC_SYSCFG_COMP
 = 
_REG_BIT
(0x18, 0),

421 
	mRCC_ADC
 = 
_REG_BIT
(0x18, 9),

422 
	mRCC_ADC1
 = 
_REG_BIT
(0x18, 9),

423 
	mRCC_TIM1
 = 
_REG_BIT
(0x18, 11),

424 
	mRCC_SPI1
 = 
_REG_BIT
(0x18, 12),

425 
	mRCC_USART1
 = 
_REG_BIT
(0x18, 14),

426 
	mRCC_TIM15
 = 
_REG_BIT
(0x18, 16),

427 
	mRCC_TIM16
 = 
_REG_BIT
(0x18, 17),

428 
	mRCC_TIM17
 = 
_REG_BIT
(0x18, 18),

429 
	mRCC_DBGMCU
 = 
_REG_BIT
(0x18, 22),

432 
	mRCC_TIM2
 = 
_REG_BIT
(0x1C, 0),

433 
	mRCC_TIM3
 = 
_REG_BIT
(0x1C, 1),

434 
	mRCC_TIM6
 = 
_REG_BIT
(0x1C, 4),

435 
	mRCC_TIM7
 = 
_REG_BIT
(0x1C, 5),

436 
	mRCC_TIM14
 = 
_REG_BIT
(0x1C, 8),

437 
	mRCC_WWDG
 = 
_REG_BIT
(0x1C, 11),

438 
	mRCC_SPI2
 = 
_REG_BIT
(0x1C, 14),

439 
	mRCC_USART2
 = 
_REG_BIT
(0x1C, 17),

440 
	mRCC_USART3
 = 
_REG_BIT
(0x1C, 18),

441 
	mRCC_USART4
 = 
_REG_BIT
(0x1C, 19),

442 
	mRCC_I2C1
 = 
_REG_BIT
(0x1C, 21),

443 
	mRCC_I2C2
 = 
_REG_BIT
(0x1C, 22),

444 
	mRCC_USB
 = 
_REG_BIT
(0x1C, 23),

445 
	mRCC_CAN
 = 
_REG_BIT
(0x1C, 25),

446 
	mRCC_CAN1
 = 
_REG_BIT
(0x1C, 25),

447 
	mRCC_CRS
 = 
_REG_BIT
(0x1C, 27),

448 
	mRCC_PWR
 = 
_REG_BIT
(0x1C, 28),

449 
	mRCC_DAC
 = 
_REG_BIT
(0x1C, 29),

450 
	mRCC_DAC1
 = 
_REG_BIT
(0x1C, 29),

451 
	mRCC_CEC
 = 
_REG_BIT
(0x1C, 30),

454 
	mRCC_RTC
 = 
_REG_BIT
(0x20, 15),

457 
	ercc_≥rùh_r°
 {

459 
	mRST_SYSCFG
 = 
_REG_BIT
(0x0C, 0),

460 
	mRST_ADC
 = 
_REG_BIT
(0x0C, 9),

461 
	mRST_ADC1
 = 
_REG_BIT
(0x0C, 9),

462 
	mRST_TIM1
 = 
_REG_BIT
(0x0C, 11),

463 
	mRST_SPI1
 = 
_REG_BIT
(0x0C, 12),

464 
	mRST_USART1
 = 
_REG_BIT
(0x0C, 14),

465 
	mRST_TIM15
 = 
_REG_BIT
(0x0C, 16),

466 
	mRST_TIM16
 = 
_REG_BIT
(0x0C, 17),

467 
	mRST_TIM17
 = 
_REG_BIT
(0x0C, 18),

468 
	mRST_DBGMCU
 = 
_REG_BIT
(0x0C, 22),

471 
	mRST_TIM2
 = 
_REG_BIT
(0x10, 0),

472 
	mRST_TIM3
 = 
_REG_BIT
(0x10, 1),

473 
	mRST_TIM6
 = 
_REG_BIT
(0x10, 4),

474 
	mRST_TIM7
 = 
_REG_BIT
(0x10, 5),

475 
	mRST_TIM14
 = 
_REG_BIT
(0x10, 8),

476 
	mRST_WWDG
 = 
_REG_BIT
(0x10, 11),

477 
	mRST_SPI2
 = 
_REG_BIT
(0x10, 14),

478 
	mRST_USART2
 = 
_REG_BIT
(0x10, 17),

479 
	mRST_USART3
 = 
_REG_BIT
(0x10, 18),

480 
	mRST_USART4
 = 
_REG_BIT
(0x10, 19),

481 
	mRST_I2C1
 = 
_REG_BIT
(0x10, 21),

482 
	mRST_I2C2
 = 
_REG_BIT
(0x10, 22),

483 
	mRST_USB
 = 
_REG_BIT
(0x10, 23),

484 
	mRST_CAN
 = 
_REG_BIT
(0x10, 25),

485 
	mRST_CAN1
 = 
_REG_BIT
(0x10, 25),

486 
	mRST_CRS
 = 
_REG_BIT
(0x10, 27),

487 
	mRST_PWR
 = 
_REG_BIT
(0x10, 28),

488 
	mRST_DAC
 = 
_REG_BIT
(0x10, 29),

489 
	mRST_DAC1
 = 
_REG_BIT
(0x10, 29),

490 
	mRST_CEC
 = 
_REG_BIT
(0x10, 30),

493 
	mRST_BACKUPDOMAIN
 = 
_REG_BIT
(0x20, 16),

496 
	mRST_GPIOA
 = 
_REG_BIT
(0x28, 17),

497 
	mRST_GPIOB
 = 
_REG_BIT
(0x28, 18),

498 
	mRST_GPIOC
 = 
_REG_BIT
(0x28, 19),

499 
	mRST_GPIOD
 = 
_REG_BIT
(0x28, 20),

500 
	mRST_GPIOE
 = 
_REG_BIT
(0x28, 21),

501 
	mRST_GPIOF
 = 
_REG_BIT
(0x28, 22),

502 
	mRST_TSC
 = 
_REG_BIT
(0x28, 24),

504 #unde‡
_REG_BIT


510 
	~<lib›ícm3/°m32/comm⁄/rcc_comm⁄_Æl.h
>

512 
BEGIN_DECLS


514 
rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
);

515 
rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
);

516 
rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
);

517 
rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
);

518 
rcc_osc_⁄
(
rcc_osc
 
osc
);

519 
rcc_osc_off
(
rcc_osc
 
osc
);

520 
rcc_css_íabÀ
();

521 
rcc_css_dißbÀ
();

522 
rcc_css_öt_˛ór
();

523 
rcc_css_öt_Êag
();

524 
rcc_£t_sys˛k_sour˚
(
rcc_osc
 
˛k
);

525 
rcc_£t_usb˛k_sour˚
(
rcc_osc
 
˛k
);

526 
rcc_£t_πc_˛ock_sour˚
(
rcc_osc
 
˛k
);

527 
rcc_íabÀ_πc_˛ock
();

528 
rcc_dißbÀ_πc_˛ock
();

529 
rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
);

530 
rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
);

531 
rcc_£t_∂lxçª
(
uöt32_t
 
∂lxçª
);

532 
rcc_£t_µª
(
uöt32_t
 
µª
);

533 
rcc_£t_h¥e
(
uöt32_t
 
h¥e
);

534 
rcc_£t_¥ediv
(
uöt32_t
 
¥ediv
);

535 
rcc_osc
 
rcc_sy°em_˛ock_sour˚
();

536 
rcc_£t_i2c_˛ock_hsi
(
uöt32_t
 
i2c
);

537 
rcc_£t_i2c_˛ock_sys˛k
(
uöt32_t
 
i2c
);

538 
uöt32_t
 
rcc_gë_i2c_˛ocks
();

539 
rcc_osc
 
rcc_usb_˛ock_sour˚
();

540 
rcc_˛ock_£tup_ö_h£_8mhz_out_48mhz
();

541 
rcc_˛ock_£tup_ö_hsi_out_48mhz
();

542 
rcc_˛ock_£tup_ö_hsi48_out_48mhz
();

544 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f0/rtc.h

31 #i‚de‡
LIBOPENCM3_RTC_H


32 
	#LIBOPENCM3_RTC_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/πc_comm⁄_l1f024.h
>

	@libopencm3/include/libopencm3/stm32/f0/spi.h

31 #i‚de‡
LIBOPENCM3_SPI_H


32 
	#LIBOPENCM3_SPI_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_v2.h
>

	@libopencm3/include/libopencm3/stm32/f0/st_usbfs.h

21 #i‚de‡
LIBOPENCM3_ST_USBFS_H


22 #îr‹ 
Do
 
nŸ
 
ö˛ude
 
dúe˘ly
 !

25 
	~<lib›ícm3/°m32/comm⁄/°_usbfs_v2.h
>

	@libopencm3/include/libopencm3/stm32/f0/syscfg.h

35 #i‚de‡
LIBOPENCM3_SYSCFG_H


36 
	#LIBOPENCM3_SYSCFG_H


	)

47 
	#SYSCFG_CFGR1
 
	`MMIO32
(
SYSCFG_COMP_BASE
 + 0x00)

	)

48 
	#SYSCFG_EXTICR
(
i
Ë
	`MMIO32
(
SYSCFG_COMP_BASE
 + 0x08 + (i)*4)

	)

49 
	#SYSCFG_EXTICR1
 
	`SYSCFG_EXTICR
(0)

	)

50 
	#SYSCFG_EXTICR2
 
	`SYSCFG_EXTICR
(1)

	)

51 
	#SYSCFG_EXTICR3
 
	`SYSCFG_EXTICR
(2)

	)

52 
	#SYSCFG_EXTICR4
 
	`SYSCFG_EXTICR
(3)

	)

53 
	#SYSCFG_CFGR2
 
	`MMIO32
(
SYSCFG_COMP_BASE
 + 0x18)

	)

61 
	#SYSCFG_CFGR1_MEM_MODE_SHIFT
 0

	)

62 
	#SYSCFG_CFGR1_MEM_MODE
 (3 << 
SYSCFG_CFGR1_MEM_MODE_SHIFT
)

	)

63 
	#SYSCFG_CFGR1_MEM_MODE_FLASH
 (0 << 
SYSCFG_CFGR1_MEM_MODE_SHIFT
)

	)

64 
	#SYSCFG_CFGR1_MEM_MODE_SYSTEM
 (1 << 
SYSCFG_CFGR1_MEM_MODE_SHIFT
)

	)

65 
	#SYSCFG_CFGR1_MEM_MODE_SRAM
 (3 << 
SYSCFG_CFGR1_MEM_MODE_SHIFT
)

	)

67 
	#SYSCFG_CFGR1_PA11_PA12_RMP
 (1 << 4)

	)

68 
	#SYSCFG_CFGR1_ADC_DMA_RMP
 (1 << 8)

	)

69 
	#SYSCFG_CFGR1_USART1_TX_DMA_RMP
 (1 << 9)

	)

70 
	#SYSCFG_CFGR1_USART1_RX_DMA_RMP
 (1 << 10)

	)

71 
	#SYSCFG_CFGR1_TIM16_DMA_RMP
 (1 << 11)

	)

72 
	#SYSCFG_CFGR1_TIM17_DMA_RMP
 (1 << 12)

	)

73 
	#SYSCFG_CFGR1_TIM16_DMA_RMP2
 (1 << 13)

	)

74 
	#SYSCFG_CFGR1_TIM17_DMA_RMP2
 (1 << 14)

	)

76 
	#SYSCFG_CFGR1_I2C_PB6_FMP
 (1 << 16)

	)

77 
	#SYSCFG_CFGR1_I2C_PB7_FMP
 (1 << 17)

	)

78 
	#SYSCFG_CFGR1_I2C_PB8_FMP
 (1 << 18)

	)

79 
	#SYSCFG_CFGR1_I2C_PB9_FMP
 (1 << 19)

	)

80 
	#SYSCFG_CFGR1_I2C1_FMP
 (1 << 20)

	)

81 
	#SYSCFG_CFGR1_I2C2_FMP
 (1 << 21)

	)

82 
	#SYSCFG_CFGR1_I2C_PA9_FMP
 (1 << 22)

	)

83 
	#SYSCFG_CFGR1_I2C_PA10_FMP
 (1 << 23)

	)

84 
	#SYSCFG_CFGR1_SPI2_DMA_RMP
 (1 << 24)

	)

85 
	#SYSCFG_CFGR1_USART2_DMA_RMP
 (1 << 25)

	)

86 
	#SYSCFG_CFGR1_USART3_DMA_RMP
 (1 << 26)

	)

87 
	#SYSCFG_CFGR1_I2C1_DMA_RMP
 (1 << 27)

	)

88 
	#SYSCFG_CFGR1_TIM1_DMA_RMP
 (1 << 28)

	)

89 
	#SYSCFG_CFGR1_TIM2_DMA_RMP
 (1 << 29)

	)

90 
	#SYSCFG_CFGR1_TIM3_DMA_RMP
 (1 << 30)

	)

94 
	#SYSCFG_EXTICR_SKIP
 4

	)

95 
	#SYSCFG_EXTICR_GPIOA
 0

	)

96 
	#SYSCFG_EXTICR_GPIOB
 1

	)

97 
	#SYSCFG_EXTICR_GPIOC
 2

	)

98 
	#SYSCFG_EXTICR_GPIOD
 3

	)

99 
	#SYSCFG_EXTICR_GPIOF
 5

	)

103 
	#SYSCFG_CFGR2_LOCKUP_LOCK
 (1 << 0)

	)

104 
	#SYSCFG_CFGR2_SRAM_PARITY_LOCK
 (1 << 1)

	)

105 
	#SYSCFG_CFGR2_PVD_LOCK
 (1 << 2)

	)

106 
	#SYSCFG_CFGR2_SRAM_PEF
 (1 << 8)

	)

116 
BEGIN_DECLS


118 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f0/timer.h

32 #i‚de‡
LIBOPENCM3_TIMER_H


33 
	#LIBOPENCM3_TIMER_H


	)

35 
	~<lib›ícm3/°m32/comm⁄/timî_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f0/tsc.h

32 #i‚de‡
LIBOPENCM3_TSC_H


33 
	#LIBOPENCM3_TSC_H


	)

40 
	#TSC
 
TSC_BASE


	)

46 
	#TSC_CR
 
	`MMIO32
(
TSC_BASE
 + 0x00)

	)

47 
	#TSC_IER
 
	`MMIO32
(
TSC_BASE
 + 0x04)

	)

48 
	#TSC_ICR
 
	`MMIO32
(
TSC_BASE
 + 0x08)

	)

49 
	#TSC_ISR
 
	`MMIO32
(
TSC_BASE
 + 0x0c)

	)

50 
	#TSC_IOHCR
 
	`MMIO32
(
TSC_BASE
 + 0x10)

	)

51 
	#TSC_IOASCR
 
	`MMIO32
(
TSC_BASE
 + 0x18)

	)

52 
	#TSC_IOSCR
 
	`MMIO32
(
TSC_BASE
 + 0x20)

	)

53 
	#TSC_IOCCR
 
	`MMIO32
(
TSC_BASE
 + 0x28)

	)

54 
	#TSC_IOGCSR
 
	`MMIO32
(
TSC_BASE
 + 0x30)

	)

55 
	#TSC_IOGxCR
(
x
Ë
	`MMIO32
(
TSC_BASE
 + 0x34 + ((x)-1)*4)

	)

63 
	#TSC_CR_CTPH_SHIFT
 28

	)

64 
	#TSC_CR_CTPH
 (0xF << 
TSC_CR_CTPH_SHIFT
)

	)

66 
	#TSC_CR_CTPL_SHIFT
 24

	)

67 
	#TSC_CR_CTPL
 (0x0F << 
TSC_CR_CTPL_SHIFT
)

	)

69 
	#TSC_CR_SSD_SHIFT
 17

	)

70 
	#TSC_CR_SSD
 (0x7F << 
TSC_CR_SSD_SHIFT
)

	)

72 
	#TSC_CR_SSE
 (1 << 16)

	)

73 
	#TSC_CR_SSPSC
 (1 << 15)

	)

75 
	#TSC_CR_PGPSC_SHIFT
 12

	)

76 
	#TSC_CR_PGPSC
 (7 << 
TSC_CR_PGPSC_SHIFT
)

	)

78 
	#TSC_CR_MCV_SHIFT
 5

	)

79 
	#TSC_CR_MCV
 (7 << 
TSC_CR_MCV_SHIFT
)

	)

81 
	#TSC_CR_IODEF
 (1 << 4)

	)

82 
	#TSC_CR_SYNCPOL
 (1 << 3)

	)

83 
	#TSC_CR_AM
 (1 << 2)

	)

84 
	#TSC_CR_START
 (1 << 1)

	)

85 
	#TSC_CR_TSCE
 (1 << 0)

	)

89 
	#TSC_IER_MCEIE
 (1 << 1)

	)

90 
	#TSC_IER_EOAIE
 (1 << 0)

	)

94 
	#TSC_ICR_MCEIC
 (1 << 1)

	)

95 
	#TSC_ICR_EOAIC
 (1 << 0)

	)

99 
	#TSC_ISR_MCEF
 (1 << 1)

	)

100 
	#TSC_ISR_EOAF
 (1 << 0)

	)

105 
	#TSC_IOBIT_VAL
(
g
, 
io
Ë((1 << ((io)-1)Ë<< (((g)-1)*4))

	)

107 
	#TSC_IOHCR_G1
(
io
Ë
	`TSC_IOBIT_VAL
(1, io)

	)

108 
	#TSC_IOHCR_G2
(
io
Ë
	`TSC_IOBIT_VAL
(2, io)

	)

109 
	#TSC_IOHCR_G3
(
io
Ë
	`TSC_IOBIT_VAL
(3, io)

	)

110 
	#TSC_IOHCR_G4
(
io
Ë
	`TSC_IOBIT_VAL
(4, io)

	)

111 
	#TSC_IOHCR_G5
(
io
Ë
	`TSC_IOBIT_VAL
(5, io)

	)

112 
	#TSC_IOHCR_G6
(
io
Ë
	`TSC_IOBIT_VAL
(6, io)

	)

116 
	#TSC_IOASCR_G1
(
io
Ë
	`TSC_IOBIT_VAL
(1, io)

	)

117 
	#TSC_IOASCR_G2
(
io
Ë
	`TSC_IOBIT_VAL
(2, io)

	)

118 
	#TSC_IOASCR_G3
(
io
Ë
	`TSC_IOBIT_VAL
(3, io)

	)

119 
	#TSC_IOASCR_G4
(
io
Ë
	`TSC_IOBIT_VAL
(4, io)

	)

120 
	#TSC_IOASCR_G5
(
io
Ë
	`TSC_IOBIT_VAL
(5, io)

	)

121 
	#TSC_IOASCR_G6
(
io
Ë
	`TSC_IOBIT_VAL
(6, io)

	)

125 
	#TSC_IOSCR_G1
(
io
Ë
	`TSC_IOBIT_VAL
(1, io)

	)

126 
	#TSC_IOSCR_G2
(
io
Ë
	`TSC_IOBIT_VAL
(2, io)

	)

127 
	#TSC_IOSCR_G3
(
io
Ë
	`TSC_IOBIT_VAL
(3, io)

	)

128 
	#TSC_IOSCR_G4
(
io
Ë
	`TSC_IOBIT_VAL
(4, io)

	)

129 
	#TSC_IOSCR_G5
(
io
Ë
	`TSC_IOBIT_VAL
(5, io)

	)

130 
	#TSC_IOSCR_G6
(
io
Ë
	`TSC_IOBIT_VAL
(6, io)

	)

134 
	#TSC_IOCCR_G1
(
io
Ë
	`TSC_IOBIT_VAL
(1, io)

	)

135 
	#TSC_IOCCR_G2
(
io
Ë
	`TSC_IOBIT_VAL
(2, io)

	)

136 
	#TSC_IOCCR_G3
(
io
Ë
	`TSC_IOBIT_VAL
(3, io)

	)

137 
	#TSC_IOCCR_G4
(
io
Ë
	`TSC_IOBIT_VAL
(4, io)

	)

138 
	#TSC_IOCCR_G5
(
io
Ë
	`TSC_IOBIT_VAL
(5, io)

	)

139 
	#TSC_IOCCR_G6
(
io
Ë
	`TSC_IOBIT_VAL
(6, io)

	)

143 
	#TSC_IOGCSR_GxE
(
x
Ë(1 << ((x)-1))

	)

144 
	#TSC_IOGCSR_GxS
(
x
Ë(1 << ((x)+15))

	)

154 
BEGIN_DECLS


156 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f0/usart.h

31 #i‚de‡
LIBOPENCM3_USART_H


32 
	#LIBOPENCM3_USART_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_Æl.h
>

35 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_v2.h
>

41 
	#USART1
 
USART1_BASE


	)

42 
	#USART2
 
USART2_BASE


	)

43 
	#USART3
 
USART3_BASE


	)

44 
	#USART4
 
USART4_BASE


	)

54 
BEGIN_DECLS


56 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f1/adc.h

38 #i‚de‡
LIBOPENCM3_ADC_H


39 
	#LIBOPENCM3_ADC_H


	)

41 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v1.h
>

46 
	#ADC_JOFR1
(
block
Ë
	`MMIO32
((blockË+ 0x14)

	)

47 
	#ADC_JOFR2
(
block
Ë
	`MMIO32
((blockË+ 0x18)

	)

48 
	#ADC_JOFR3
(
block
Ë
	`MMIO32
((blockË+ 0x1c)

	)

49 
	#ADC_JOFR4
(
block
Ë
	`MMIO32
((blockË+ 0x20)

	)

52 
	#ADC_HTR
(
block
Ë
	`MMIO32
((blockË+ 0x24)

	)

55 
	#ADC_LTR
(
block
Ë
	`MMIO32
((blockË+ 0x28)

	)

58 
	#ADC_SQR1
(
block
Ë
	`MMIO32
((blockË+ 0x2c)

	)

61 
	#ADC_SQR2
(
block
Ë
	`MMIO32
((blockË+ 0x30)

	)

64 
	#ADC_SQR3
(
block
Ë
	`MMIO32
((blockË+ 0x34)

	)

67 
	#ADC_JSQR
(
block
Ë
	`MMIO32
((blockË+ 0x38)

	)

70 
	#ADC_JDR1
(
block
Ë
	`MMIO32
((blockË+ 0x3c)

	)

71 
	#ADC_JDR2
(
block
Ë
	`MMIO32
((blockË+ 0x40)

	)

72 
	#ADC_JDR3
(
block
Ë
	`MMIO32
((blockË+ 0x44)

	)

73 
	#ADC_JDR4
(
block
Ë
	`MMIO32
((blockË+ 0x48)

	)

76 
	#ADC_DR
(
block
Ë
	`MMIO32
((blockË+ 0x4c)

	)

103 
	#ADC_CR1_DUALMOD_IND
 (0x0 << 16)

	)

105 
	#ADC_CR1_DUALMOD_CRSISM
 (0x1 << 16)

	)

107 
	#ADC_CR1_DUALMOD_CRSATM
 (0x2 << 16)

	)

109 
	#ADC_CR1_DUALMOD_CISFIM
 (0x3 << 16)

	)

111 
	#ADC_CR1_DUALMOD_CISSIM
 (0x4 << 16)

	)

113 
	#ADC_CR1_DUALMOD_ISM
 (0x5 << 16)

	)

115 
	#ADC_CR1_DUALMOD_RSM
 (0x6 << 16)

	)

117 
	#ADC_CR1_DUALMOD_FIM
 (0x7 << 16)

	)

119 
	#ADC_CR1_DUALMOD_SIM
 (0x8 << 16)

	)

121 
	#ADC_CR1_DUALMOD_ATM
 (0x9 << 16)

	)

123 
	#ADC_CR1_DUALMOD_MASK
 (0xF << 16)

	)

124 
	#ADC_CR1_DUALMOD_SHIFT
 16

	)

126 
	#ADC_CR1_AWDCH_MAX
 17

	)

131 
	#ADC_CR2_TSVREFE
 (1 << 23)

	)

134 
	#ADC_CR2_SWSTART
 (1 << 22)

	)

137 
	#ADC_CR2_JSWSTART
 (1 << 21)

	)

140 
	#ADC_CR2_EXTTRIG
 (1 << 20)

	)

151 
	#ADC_CR2_EXTSEL_TIM1_CC1
 (0x0 << 17)

	)

153 
	#ADC_CR2_EXTSEL_TIM1_CC2
 (0x1 << 17)

	)

155 
	#ADC_CR2_EXTSEL_TIM1_CC3
 (0x2 << 17)

	)

157 
	#ADC_CR2_EXTSEL_TIM2_CC2
 (0x3 << 17)

	)

159 
	#ADC_CR2_EXTSEL_TIM3_TRGO
 (0x4 << 17)

	)

161 
	#ADC_CR2_EXTSEL_TIM4_CC4
 (0x5 << 17)

	)

163 
	#ADC_CR2_EXTSEL_EXTI11
 (0x6 << 17)

	)

165 
	#ADC_CR2_EXTSEL_SWSTART
 (0x7 << 17)

	)

176 
	#ADC_CR2_EXTSEL_TIM3_CC1
 (0x0 << 17)

	)

178 
	#ADC_CR2_EXTSEL_TIM2_CC3
 (0x1 << 17)

	)

180 
	#ADC_CR2_EXTSEL_TIM1_CC3
 (0x2 << 17)

	)

182 
	#ADC_CR2_EXTSEL_TIM8_CC1
 (0x3 << 17)

	)

184 
	#ADC_CR2_EXTSEL_TIM8_TRGO
 (0x4 << 17)

	)

186 
	#ADC_CR2_EXTSEL_TIM5_CC1
 (0x5 << 17)

	)

188 
	#ADC_CR2_EXTSEL_TIM5_CC3
 (0x6 << 17)

	)

191 
	#ADC_CR2_EXTSEL_MASK
 (0x7 << 17)

	)

192 
	#ADC_CR2_EXTSEL_SHIFT
 17

	)

197 
	#ADC_CR2_JEXTTRIG
 (1 << 15)

	)

209 
	#ADC_CR2_JEXTSEL_TIM1_TRGO
 (0x0 << 12)

	)

211 
	#ADC_CR2_JEXTSEL_TIM1_CC4
 (0x1 << 12)

	)

213 
	#ADC_CR2_JEXTSEL_TIM2_TRGO
 (0x2 << 12)

	)

215 
	#ADC_CR2_JEXTSEL_TIM2_CC1
 (0x3 << 12)

	)

217 
	#ADC_CR2_JEXTSEL_TIM3_CC4
 (0x4 << 12)

	)

219 
	#ADC_CR2_JEXTSEL_TIM4_TRGO
 (0x5 << 12)

	)

221 
	#ADC_CR2_JEXTSEL_EXTI15
 (0x6 << 12)

	)

223 
	#ADC_CR2_JEXTSEL_JSWSTART
 (0x7 << 12Ë

	)

234 
	#ADC_CR2_JEXTSEL_TIM1_TRGO
 (0x0 << 12)

	)

236 
	#ADC_CR2_JEXTSEL_TIM1_CC4
 (0x1 << 12)

	)

238 
	#ADC_CR2_JEXTSEL_TIM4_CC3
 (0x2 << 12)

	)

240 
	#ADC_CR2_JEXTSEL_TIM8_CC2
 (0x3 << 12)

	)

242 
	#ADC_CR2_JEXTSEL_TIM8_CC4
 (0x4 << 12)

	)

244 
	#ADC_CR2_JEXTSEL_TIM5_TRGO
 (0x5 << 12)

	)

246 
	#ADC_CR2_JEXTSEL_TIM5_CC4
 (0x6 << 12)

	)

248 
	#ADC_CR2_JEXTSEL_JSWSTART
 (0x7 << 12Ë

	)

251 
	#ADC_CR2_JEXTSEL_MASK
 (0x7 << 12)

	)

252 
	#ADC_CR2_JEXTSEL_SHIFT
 12

	)

255 
	#ADC_CR2_ALIGN_RIGHT
 (0 << 11)

	)

256 
	#ADC_CR2_ALIGN_LEFT
 (1 << 11)

	)

257 
	#ADC_CR2_ALIGN
 (1 << 11)

	)

262 
	#ADC_CR2_DMA
 (1 << 8)

	)

267 
	#ADC_CR2_RSTCAL
 (1 << 3)

	)

270 
	#ADC_CR2_CAL
 (1 << 2)

	)

273 
	#ADC_CR2_CONT
 (1 << 1)

	)

281 
	#ADC_CR2_ADON
 (1 << 0)

	)

284 
	#ADC_SMPR1_SMP17_LSB
 21

	)

285 
	#ADC_SMPR1_SMP16_LSB
 18

	)

286 
	#ADC_SMPR1_SMP15_LSB
 15

	)

287 
	#ADC_SMPR1_SMP14_LSB
 12

	)

288 
	#ADC_SMPR1_SMP13_LSB
 9

	)

289 
	#ADC_SMPR1_SMP12_LSB
 6

	)

290 
	#ADC_SMPR1_SMP11_LSB
 3

	)

291 
	#ADC_SMPR1_SMP10_LSB
 0

	)

292 
	#ADC_SMPR1_SMP17_MSK
 (0x7 << 
ADC_SMPR1_SMP17_LSB
)

	)

293 
	#ADC_SMPR1_SMP16_MSK
 (0x7 << 
ADC_SMPR1_SMP16_LSB
)

	)

294 
	#ADC_SMPR1_SMP15_MSK
 (0x7 << 
ADC_SMPR1_SMP15_LSB
)

	)

295 
	#ADC_SMPR1_SMP14_MSK
 (0x7 << 
ADC_SMPR1_SMP14_LSB
)

	)

296 
	#ADC_SMPR1_SMP13_MSK
 (0x7 << 
ADC_SMPR1_SMP13_LSB
)

	)

297 
	#ADC_SMPR1_SMP12_MSK
 (0x7 << 
ADC_SMPR1_SMP12_LSB
)

	)

298 
	#ADC_SMPR1_SMP11_MSK
 (0x7 << 
ADC_SMPR1_SMP11_LSB
)

	)

299 
	#ADC_SMPR1_SMP10_MSK
 (0x7 << 
ADC_SMPR1_SMP10_LSB
)

	)

303 
	#ADC_SMPR2_SMP9_LSB
 27

	)

304 
	#ADC_SMPR2_SMP8_LSB
 24

	)

305 
	#ADC_SMPR2_SMP7_LSB
 21

	)

306 
	#ADC_SMPR2_SMP6_LSB
 18

	)

307 
	#ADC_SMPR2_SMP5_LSB
 15

	)

308 
	#ADC_SMPR2_SMP4_LSB
 12

	)

309 
	#ADC_SMPR2_SMP3_LSB
 9

	)

310 
	#ADC_SMPR2_SMP2_LSB
 6

	)

311 
	#ADC_SMPR2_SMP1_LSB
 3

	)

312 
	#ADC_SMPR2_SMP0_LSB
 0

	)

313 
	#ADC_SMPR2_SMP9_MSK
 (0x7 << 
ADC_SMPR2_SMP9_LSB
)

	)

314 
	#ADC_SMPR2_SMP8_MSK
 (0x7 << 
ADC_SMPR2_SMP8_LSB
)

	)

315 
	#ADC_SMPR2_SMP7_MSK
 (0x7 << 
ADC_SMPR2_SMP7_LSB
)

	)

316 
	#ADC_SMPR2_SMP6_MSK
 (0x7 << 
ADC_SMPR2_SMP6_LSB
)

	)

317 
	#ADC_SMPR2_SMP5_MSK
 (0x7 << 
ADC_SMPR2_SMP5_LSB
)

	)

318 
	#ADC_SMPR2_SMP4_MSK
 (0x7 << 
ADC_SMPR2_SMP4_LSB
)

	)

319 
	#ADC_SMPR2_SMP3_MSK
 (0x7 << 
ADC_SMPR2_SMP3_LSB
)

	)

320 
	#ADC_SMPR2_SMP2_MSK
 (0x7 << 
ADC_SMPR2_SMP2_LSB
)

	)

321 
	#ADC_SMPR2_SMP1_MSK
 (0x7 << 
ADC_SMPR2_SMP1_LSB
)

	)

322 
	#ADC_SMPR2_SMP0_MSK
 (0x7 << 
ADC_SMPR2_SMP0_LSB
)

	)

331 
	#ADC_SMPR_SMP_1DOT5CYC
 0x0

	)

332 
	#ADC_SMPR_SMP_7DOT5CYC
 0x1

	)

333 
	#ADC_SMPR_SMP_13DOT5CYC
 0x2

	)

334 
	#ADC_SMPR_SMP_28DOT5CYC
 0x3

	)

335 
	#ADC_SMPR_SMP_41DOT5CYC
 0x4

	)

336 
	#ADC_SMPR_SMP_55DOT5CYC
 0x5

	)

337 
	#ADC_SMPR_SMP_71DOT5CYC
 0x6

	)

338 
	#ADC_SMPR_SMP_239DOT5CYC
 0x7

	)

344 
	#ADC_SQR_MAX_CHANNELS_REGULAR
 16

	)

346 
	#ADC_SQR1_SQ16_LSB
 15

	)

347 
	#ADC_SQR1_SQ15_LSB
 10

	)

348 
	#ADC_SQR1_SQ14_LSB
 5

	)

349 
	#ADC_SQR1_SQ13_LSB
 0

	)

350 
	#ADC_SQR1_L_MSK
 (0x‡<< 
ADC_SQR1_L_LSB
)

	)

351 
	#ADC_SQR1_SQ16_MSK
 (0x1‡<< 
ADC_SQR1_SQ16_LSB
)

	)

352 
	#ADC_SQR1_SQ15_MSK
 (0x1‡<< 
ADC_SQR1_SQ15_LSB
)

	)

353 
	#ADC_SQR1_SQ14_MSK
 (0x1‡<< 
ADC_SQR1_SQ14_LSB
)

	)

354 
	#ADC_SQR1_SQ13_MSK
 (0x1‡<< 
ADC_SQR1_SQ13_LSB
)

	)

358 
	#ADC_SQR2_SQ12_LSB
 25

	)

359 
	#ADC_SQR2_SQ11_LSB
 20

	)

360 
	#ADC_SQR2_SQ10_LSB
 15

	)

361 
	#ADC_SQR2_SQ9_LSB
 10

	)

362 
	#ADC_SQR2_SQ8_LSB
 5

	)

363 
	#ADC_SQR2_SQ7_LSB
 0

	)

364 
	#ADC_SQR2_SQ12_MSK
 (0x1‡<< 
ADC_SQR2_SQ12_LSB
)

	)

365 
	#ADC_SQR2_SQ11_MSK
 (0x1‡<< 
ADC_SQR2_SQ11_LSB
)

	)

366 
	#ADC_SQR2_SQ10_MSK
 (0x1‡<< 
ADC_SQR2_SQ10_LSB
)

	)

367 
	#ADC_SQR2_SQ9_MSK
 (0x1‡<< 
ADC_SQR2_SQ9_LSB
)

	)

368 
	#ADC_SQR2_SQ8_MSK
 (0x1‡<< 
ADC_SQR2_SQ8_LSB
)

	)

369 
	#ADC_SQR2_SQ7_MSK
 (0x1‡<< 
ADC_SQR2_SQ7_LSB
)

	)

373 
	#ADC_SQR3_SQ6_LSB
 25

	)

374 
	#ADC_SQR3_SQ5_LSB
 20

	)

375 
	#ADC_SQR3_SQ4_LSB
 15

	)

376 
	#ADC_SQR3_SQ3_LSB
 10

	)

377 
	#ADC_SQR3_SQ2_LSB
 5

	)

378 
	#ADC_SQR3_SQ1_LSB
 0

	)

379 
	#ADC_SQR3_SQ6_MSK
 (0x1‡<< 
ADC_SQR3_SQ6_LSB
)

	)

380 
	#ADC_SQR3_SQ5_MSK
 (0x1‡<< 
ADC_SQR3_SQ5_LSB
)

	)

381 
	#ADC_SQR3_SQ4_MSK
 (0x1‡<< 
ADC_SQR3_SQ4_LSB
)

	)

382 
	#ADC_SQR3_SQ3_MSK
 (0x1‡<< 
ADC_SQR3_SQ3_LSB
)

	)

383 
	#ADC_SQR3_SQ2_MSK
 (0x1‡<< 
ADC_SQR3_SQ2_LSB
)

	)

384 
	#ADC_SQR3_SQ1_MSK
 (0x1‡<< 
ADC_SQR3_SQ1_LSB
)

	)

388 
	#ADC_JDATA_LSB
 0

	)

389 
	#ADC_DATA_LSB
 0

	)

390 
	#ADC_ADC2DATA_LSB
 16

	)

391 
	#ADC_JDATA_MSK
 (0xfff‡<< 
ADC_JDATA_LSB
)

	)

392 
	#ADC_DATA_MSK
 (0xfff‡<< 
ADC_DA
)

	)

393 
	#ADC_ADC2DATA_MSK
 (0xfff‡<< 
ADC_ADC2DATA_LSB
)

	)

400 
	#ADC_CHANNEL_TEMP
 16

	)

401 
	#ADC_CHANNEL_VREF
 17

	)

406 
BEGIN_DECLS


408 
adc_°¨t_c⁄vîsi⁄_dúe˘
(
uöt32_t
 
adc
);

409 
adc_£t_duÆ_mode
(
uöt32_t
 
mode
);

410 
adc_íabÀ_ãm≥øtuª_£ns‹
();

411 
adc_dißbÀ_ãm≥øtuª_£ns‹
();

412 
adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
);

413 
adc_íabÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
, uöt32_à
åiggî
);

414 
adc_ª£t_ˇlibøti⁄
(
uöt32_t
 
adc
);

415 
	$adc_ˇlibøti⁄
(
uöt32_t
 
adc
)

416 
	`LIBOPENCM3_DEPRECATED
("seeádc_calibrate/_async");

417 
	`adc_ˇlibøã_async
(
uöt32_t
 
adc
);

418 
boﬁ
 
	`adc_is_ˇlibøtög
(
uöt32_t
 
adc
);

419 
	`adc_ˇlibøã
(
uöt32_t
 
adc
);

421 
END_DECLS


	@libopencm3/include/libopencm3/stm32/f1/bkp.h

24 #i‚de‡
LIBOPENCM3_BKP_H


25 
	#LIBOPENCM3_BKP_H


	)

31 
	#BKP_DR1
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x04)

	)

34 
	#BKP_DR2
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x08)

	)

37 
	#BKP_DR3
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x0C)

	)

40 
	#BKP_DR4
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x10)

	)

43 
	#BKP_DR5
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x14)

	)

46 
	#BKP_DR6
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x18)

	)

49 
	#BKP_DR7
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x1C)

	)

52 
	#BKP_DR8
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x20)

	)

55 
	#BKP_DR9
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x24)

	)

58 
	#BKP_DR10
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x28)

	)

61 
	#BKP_RTCCR
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x2C)

	)

64 
	#BKP_CR
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x30)

	)

67 
	#BKP_CSR
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x34)

	)

70 
	#BKP_DR11
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x40)

	)

73 
	#BKP_DR12
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x44)

	)

76 
	#BKP_DR13
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x48)

	)

79 
	#BKP_DR14
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x4C)

	)

82 
	#BKP_DR15
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x50)

	)

85 
	#BKP_DR16
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x54)

	)

88 
	#BKP_DR17
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x58)

	)

91 
	#BKP_DR18
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x5C)

	)

94 
	#BKP_DR19
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x60)

	)

97 
	#BKP_DR20
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x64)

	)

100 
	#BKP_DR21
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x68)

	)

103 
	#BKP_DR22
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x6C)

	)

106 
	#BKP_DR23
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x70)

	)

109 
	#BKP_DR24
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x74)

	)

112 
	#BKP_DR25
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x78)

	)

115 
	#BKP_DR26
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x7C)

	)

118 
	#BKP_DR27
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x80)

	)

121 
	#BKP_DR28
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x84)

	)

124 
	#BKP_DR29
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x88)

	)

127 
	#BKP_DR30
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x8C)

	)

130 
	#BKP_DR31
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x90)

	)

133 
	#BKP_DR32
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x94)

	)

136 
	#BKP_DR33
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x98)

	)

139 
	#BKP_DR34
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0x9C)

	)

142 
	#BKP_DR35
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xA0)

	)

145 
	#BKP_DR36
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xA4)

	)

148 
	#BKP_DR37
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xA8)

	)

151 
	#BKP_DR38
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xAC)

	)

154 
	#BKP_DR39
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xB0)

	)

157 
	#BKP_DR40
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xB4)

	)

160 
	#BKP_DR41
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xB8)

	)

163 
	#BKP_DR42
 
	`MMIO32
(
BACKUP_REGS_BASE
 + 0xBC)

	)

170 
	#BKP_RTCCR_ASOS
 (1 << 9)

	)

173 
	#BKP_RTCCR_ASOE
 (1 << 8)

	)

176 
	#BKP_RTCCR_CCO
 (1 << 7)

	)

179 
	#BKP_RTCCR_CAL_LSB
 0

	)

186 
	#BKP_CR_TPAL
 (1 << 1)

	)

189 
	#BKP_CR_TPE
 (1 << 0)

	)

196 
	#BKP_CSR_TIF
 (1 << 9)

	)

199 
	#BKP_CSR_TEF
 (1 << 8)

	)

202 
	#BKP_CSR_TPIE
 (1 << 2)

	)

205 
	#BKP_CSR_CTI
 (1 << 1)

	)

208 
	#BKP_CSR_CTE
 (1 << 0)

	)

	@libopencm3/include/libopencm3/stm32/f1/crc.h

33 #i‚de‡
LIBOPENCM3_CRC_H


34 
	#LIBOPENCM3_CRC_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/¸c_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f1/dac.h

31 #i‚de‡
LIBOPENCM3_DAC_H


32 
	#LIBOPENCM3_DAC_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dac_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f1/dma.h

31 #i‚de‡
LIBOPENCM3_DMA_H


32 
	#LIBOPENCM3_DMA_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dma_comm⁄_l1f013.h
>

	@libopencm3/include/libopencm3/stm32/f1/doc-stm32f1.h

	@libopencm3/include/libopencm3/stm32/f1/exti.h

36 #i‚de‡
LIBOPENCM3_EXTI_H


37 
	#LIBOPENCM3_EXTI_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/exti_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f1/flash.h

41 #i‚de‡
LIBOPENCM3_FLASH_H


42 
	#LIBOPENCM3_FLASH_H


	)

46 
	~<lib›ícm3/°m32/comm⁄/Êash_comm⁄_f01.h
>

53 
	#FLASH_OPTION_BYTE_0
 
	`FLASH_OPTION_BYTE
(0)

	)

54 
	#FLASH_OPTION_BYTE_1
 
	`FLASH_OPTION_BYTE
(1)

	)

55 
	#FLASH_OPTION_BYTE_2
 
	`FLASH_OPTION_BYTE
(2)

	)

56 
	#FLASH_OPTION_BYTE_3
 
	`FLASH_OPTION_BYTE
(3)

	)

57 
	#FLASH_OPTION_BYTE_4
 
	`FLASH_OPTION_BYTE
(4)

	)

58 
	#FLASH_OPTION_BYTE_5
 
	`FLASH_OPTION_BYTE
(5)

	)

59 
	#FLASH_OPTION_BYTE_6
 
	`FLASH_OPTION_BYTE
(6)

	)

60 
	#FLASH_OPTION_BYTE_7
 
	`FLASH_OPTION_BYTE
(7)

	)

72 
	#FLASH_ACR_LATENCY_0WS
 0x00

	)

73 
	#FLASH_ACR_LATENCY_1WS
 0x01

	)

74 
	#FLASH_ACR_LATENCY_2WS
 0x02

	)

76 
	#FLASH_ACR_HLFCYA
 (1 << 3)

	)

80 
	#FLASH_SR_EOP
 (1 << 5)

	)

81 
	#FLASH_SR_WRPRTERR
 (1 << 4)

	)

82 
	#FLASH_SR_PGERR
 (1 << 2)

	)

83 
	#FLASH_SR_BSY
 (1 << 0)

	)

91 
	#FLASH_OBR_NRST_STDBY
 (1 << 4)

	)

92 
	#FLASH_OBR_NRST_STOP
 (1 << 3)

	)

93 
	#FLASH_OBR_WDG_SW
 (1 << 2)

	)

94 
	#FLASH_OBR_RDPRT_EN
 (1 << 
FLASH_OBR_RDPRT_SHIFT
)

	)

101 
	#FLASH_RDP_KEY
 ((
uöt16_t
)0x00a5)

	)

105 
BEGIN_DECLS


107 
Êash_hÆfcy˛e_íabÀ
();

108 
Êash_hÆfcy˛e_dißbÀ
();

109 
Êash_u∆ock_uµî
();

110 
Êash_lock_uµî
();

111 
Êash_˛ór_pgîr_Êag_uµî
();

112 
Êash_˛ór_e›_Êag_uµî
();

113 
Êash_˛ór_wΩπîr_Êag_uµî
();

114 
Êash_˛ór_bsy_Êag_uµî
();

116 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f1/gpio.h

36 #i‚de‡
LIBOPENCM3_GPIO_H


37 
	#LIBOPENCM3_GPIO_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_Æl.h
>

49 
	#GPIOA
 
GPIO_PORT_A_BASE


	)

50 
	#GPIOB
 
GPIO_PORT_B_BASE


	)

51 
	#GPIOC
 
GPIO_PORT_C_BASE


	)

52 
	#GPIOD
 
GPIO_PORT_D_BASE


	)

53 
	#GPIOE
 
GPIO_PORT_E_BASE


	)

54 
	#GPIOF
 
GPIO_PORT_F_BASE


	)

55 
	#GPIOG
 
GPIO_PORT_G_BASE


	)

63 
	#GPIO_CAN1_RX
 
GPIO11


	)

64 
	#GPIO_CAN1_TX
 
GPIO12


	)

65 
	#GPIO_CAN_RX
 
GPIO_CAN1_RX


	)

66 
	#GPIO_CAN_TX
 
GPIO_CAN1_TX


	)

68 
	#GPIO_CAN_PB_RX
 
GPIO8


	)

69 
	#GPIO_CAN_PB_TX
 
GPIO9


	)

70 
	#GPIO_CAN1_PB_RX
 
GPIO_CAN_PB_RX


	)

71 
	#GPIO_CAN1_PB_TX
 
GPIO_CAN_PB_TX


	)

73 
	#GPIO_CAN_PD_RX
 
GPIO0


	)

74 
	#GPIO_CAN_PD_TX
 
GPIO1


	)

75 
	#GPIO_CAN1_PD_RX
 
GPIO_CAN_PD_RX


	)

76 
	#GPIO_CAN1_PD_TX
 
GPIO_CAN_PD_TX


	)

79 
	#GPIO_BANK_CAN1_RX
 
GPIOA


	)

80 
	#GPIO_BANK_CAN1_TX
 
GPIOA


	)

81 
	#GPIO_BANK_CAN_RX
 
GPIO_BANK_CAN1_RX


	)

82 
	#GPIO_BANK_CAN_TX
 
GPIO_BANK_CAN1_TX


	)

84 
	#GPIO_BANK_CAN_PB_RX
 
GPIOB


	)

85 
	#GPIO_BANK_CAN_PB_TX
 
GPIOB


	)

86 
	#GPIO_BANK_CAN1_PB_RX
 
GPIO_BANK_CAN_PB_RX


	)

87 
	#GPIO_BANK_CAN1_PB_TX
 
GPIO_BANK_CAN_PB_TX


	)

89 
	#GPIO_BANK_CAN_PD_RX
 
GPIOD


	)

90 
	#GPIO_BANK_CAN_PD_TX
 
GPIOD


	)

91 
	#GPIO_BANK_CAN1_PD_RX
 
GPIO_BANK_CAN_PD_RX


	)

92 
	#GPIO_BANK_CAN1_PD_TX
 
GPIO_BANK_CAN_PD_TX


	)

95 
	#GPIO_CAN2_RX
 
GPIO12


	)

96 
	#GPIO_CAN2_TX
 
GPIO13


	)

98 
	#GPIO_CAN2_RE_RX
 
GPIO5


	)

99 
	#GPIO_CAN2_RE_TX
 
GPIO6


	)

102 
	#GPIO_BANK_CAN2_RX
 
GPIOB


	)

103 
	#GPIO_BANK_CAN2_TX
 
GPIOB


	)

105 
	#GPIO_BANK_CAN2_RE_RX
 
GPIOB


	)

106 
	#GPIO_BANK_CAN2_RE_TX
 
GPIOB


	)

109 
	#GPIO_JTMS_SWDIO
 
GPIO13


	)

110 
	#GPIO_JTCK_SWCLK
 
GPIO14


	)

111 
	#GPIO_JTDI
 
GPIO15


	)

112 
	#GPIO_JTDO_TRACESWO
 
GPIO3


	)

113 
	#GPIO_JNTRST
 
GPIO4


	)

114 
	#GPIO_TRACECK
 
GPIO2


	)

115 
	#GPIO_TRACED0
 
GPIO3


	)

116 
	#GPIO_TRACED1
 
GPIO4


	)

117 
	#GPIO_TRACED2
 
GPIO5


	)

118 
	#GPIO_TRACED3
 
GPIO6


	)

121 
	#GPIO_BANK_JTMS_SWDIO
 
GPIOA


	)

122 
	#GPIO_BANK_JTCK_SWCLK
 
GPIOA


	)

123 
	#GPIO_BANK_JTDI
 
GPIOA


	)

124 
	#GPIO_BANK_JTDO_TRACESWO
 
GPIOB


	)

125 
	#GPIO_BANK_JNTRST
 
GPIOB


	)

126 
	#GPIO_BANK_TRACECK
 
GPIOE


	)

127 
	#GPIO_BANK_TRACED0
 
GPIOE


	)

128 
	#GPIO_BANK_TRACED1
 
GPIOE


	)

129 
	#GPIO_BANK_TRACED2
 
GPIOE


	)

130 
	#GPIO_BANK_TRACED3
 
GPIOE


	)

133 
	#GPIO_TIM5_CH1
 
GPIO0


	)

134 
	#GPIO_TIM5_CH2
 
GPIO1


	)

135 
	#GPIO_TIM5_CH3
 
GPIO2


	)

136 
	#GPIO_TIM5_CH4
 
GPIO3


	)

139 
	#GPIO_BANK_TIM5_CH1
 
GPIOA


	)

140 
	#GPIO_BANK_TIM5_CH2
 
GPIOA


	)

141 
	#GPIO_BANK_TIM5_CH3
 
GPIOA


	)

142 
	#GPIO_BANK_TIM5_CH4
 
GPIOA


	)

143 
	#GPIO_BANK_TIM5
 
GPIOA


	)

146 
	#GPIO_TIM4_CH1
 
GPIO6


	)

147 
	#GPIO_TIM4_CH2
 
GPIO7


	)

148 
	#GPIO_TIM4_CH3
 
GPIO8


	)

149 
	#GPIO_TIM4_CH4
 
GPIO9


	)

151 
	#GPIO_TIM4_RE_CH1
 
GPIO12


	)

152 
	#GPIO_TIM4_RE_CH2
 
GPIO13


	)

153 
	#GPIO_TIM4_RE_CH3
 
GPIO14


	)

154 
	#GPIO_TIM4_RE_CH4
 
GPIO15


	)

157 
	#GPIO_BANK_TIM4_CH1
 
GPIOB


	)

158 
	#GPIO_BANK_TIM4_CH2
 
GPIOB


	)

159 
	#GPIO_BANK_TIM4_CH3
 
GPIOB


	)

160 
	#GPIO_BANK_TIM4_CH4
 
GPIOB


	)

161 
	#GPIO_BANK_TIM4
 
GPIOB


	)

163 
	#GPIO_BANK_TIM4_RE_CH1
 
GPIOD


	)

164 
	#GPIO_BANK_TIM4_RE_CH2
 
GPIOD


	)

165 
	#GPIO_BANK_TIM4_RE_CH3
 
GPIOD


	)

166 
	#GPIO_BANK_TIM4_RE_CH4
 
GPIOD


	)

167 
	#GPIO_BANK_TIM4_RE
 
GPIOD


	)

170 
	#GPIO_TIM3_CH1
 
GPIO6


	)

171 
	#GPIO_TIM3_CH2
 
GPIO7


	)

172 
	#GPIO_TIM3_CH3
 
GPIO0


	)

173 
	#GPIO_TIM3_CH4
 
GPIO1


	)

175 
	#GPIO_TIM3_PR_CH1
 
GPIO4


	)

176 
	#GPIO_TIM3_PR_CH2
 
GPIO5


	)

177 
	#GPIO_TIM3_PR_CH3
 
GPIO0


	)

178 
	#GPIO_TIM3_PR_CH4
 
GPIO1


	)

180 
	#GPIO_TIM3_FR_CH1
 
GPIO6


	)

181 
	#GPIO_TIM3_FR_CH2
 
GPIO7


	)

182 
	#GPIO_TIM3_FR_CH3
 
GPIO8


	)

183 
	#GPIO_TIM3_FR_CH4
 
GPIO9


	)

186 
	#GPIO_BANK_TIM3_CH1
 
GPIOA


	)

187 
	#GPIO_BANK_TIM3_CH2
 
GPIOA


	)

188 
	#GPIO_BANK_TIM3_CH3
 
GPIOB


	)

189 
	#GPIO_BANK_TIM3_CH4
 
GPIOB


	)

190 
	#GPIO_BANK_TIM3_CH12
 
GPIOA


	)

191 
	#GPIO_BANK_TIM3_CH34
 
GPIOB


	)

193 
	#GPIO_BANK_TIM3_PR_CH1
 
GPIOB


	)

194 
	#GPIO_BANK_TIM3_PR_CH2
 
GPIOB


	)

195 
	#GPIO_BANK_TIM3_PR_CH3
 
GPIOB


	)

196 
	#GPIO_BANK_TIM3_PR_CH4
 
GPIOB


	)

197 
	#GPIO_BANK_TIM3_PR
 
GPIOB


	)

199 
	#GPIO_BANK_TIM3_FR_CH1
 
GPIOC


	)

200 
	#GPIO_BANK_TIM3_FR_CH2
 
GPIOC


	)

201 
	#GPIO_BANK_TIM3_FR_CH3
 
GPIOC


	)

202 
	#GPIO_BANK_TIM3_FR_CH4
 
GPIOC


	)

203 
	#GPIO_BANK_TIM3_FR
 
GPIOC


	)

206 
	#GPIO_TIM2_CH1_ETR
 
GPIO0


	)

207 
	#GPIO_TIM2_CH2
 
GPIO1


	)

208 
	#GPIO_TIM2_CH3
 
GPIO2


	)

209 
	#GPIO_TIM2_CH4
 
GPIO3


	)

211 
	#GPIO_TIM2_PR1_CH1_ETR
 
GPIO15


	)

212 
	#GPIO_TIM2_PR1_CH2
 
GPIO3


	)

213 
	#GPIO_TIM2_PR1_CH3
 
GPIO2


	)

214 
	#GPIO_TIM2_PR1_CH4
 
GPIO3


	)

216 
	#GPIO_TIM2_PR2_CH1_ETR
 
GPIO0


	)

217 
	#GPIO_TIM2_PR2_CH2
 
GPIO1


	)

218 
	#GPIO_TIM2_PR2_CH3
 
GPIO10


	)

219 
	#GPIO_TIM2_PR2_CH4
 
GPIO11


	)

221 
	#GPIO_TIM2_FR_CH1_ETR
 
GPIO15


	)

222 
	#GPIO_TIM2_FR_CH2
 
GPIO3


	)

223 
	#GPIO_TIM2_FR_CH3
 
GPIO10


	)

224 
	#GPIO_TIM2_FR_CH4
 
GPIO11


	)

227 
	#GPIO_BANK_TIM2_CH1_ETR
 
GPIOA


	)

228 
	#GPIO_BANK_TIM2_CH2
 
GPIOA


	)

229 
	#GPIO_BANK_TIM2_CH3
 
GPIOA


	)

230 
	#GPIO_BANK_TIM2_CH4
 
GPIOA


	)

231 
	#GPIO_BANK_TIM2
 
GPIOA


	)

233 
	#GPIO_BANK_TIM2_PR1_CH1_ETR
 
GPIOA


	)

234 
	#GPIO_BANK_TIM2_PR1_CH2
 
GPIOB


	)

235 
	#GPIO_BANK_TIM2_PR1_CH3
 
GPIOA


	)

236 
	#GPIO_BANK_TIM2_PR1_CH4
 
GPIOA


	)

237 
	#GPIO_BANK_TIM2_PR1_CH134
 
GPIOA


	)

239 
	#GPIO_BANK_TIM2_PR2_CH1_ETR
 
GPIOA


	)

240 
	#GPIO_BANK_TIM2_PR2_CH2
 
GPIOA


	)

241 
	#GPIO_BANK_TIM2_PR2_CH3
 
GPIOB


	)

242 
	#GPIO_BANK_TIM2_PR2_CH4
 
GPIOB


	)

243 
	#GPIO_BANK_TIM2_PR2_CH12
 
GPIOA


	)

244 
	#GPIO_BANK_TIM2_PR2_CH34
 
GPIOB


	)

246 
	#GPIO_BANK_TIM2_FR_CH1_ETR
 
GPIOA


	)

247 
	#GPIO_BANK_TIM2_FR_CH2
 
GPIOB


	)

248 
	#GPIO_BANK_TIM2_FR_CH3
 
GPIOB


	)

249 
	#GPIO_BANK_TIM2_FR_CH4
 
GPIOB


	)

250 
	#GPIO_BANK_TIM2_FR_CH234
 
GPIOB


	)

253 
	#GPIO_TIM1_ETR
 
GPIO12


	)

254 
	#GPIO_TIM1_CH1
 
GPIO8


	)

255 
	#GPIO_TIM1_CH2
 
GPIO9


	)

256 
	#GPIO_TIM1_CH3
 
GPIO10


	)

257 
	#GPIO_TIM1_CH4
 
GPIO11


	)

258 
	#GPIO_TIM1_BKIN
 
GPIO12


	)

259 
	#GPIO_TIM1_CH1N
 
GPIO13


	)

260 
	#GPIO_TIM1_CH2N
 
GPIO14


	)

261 
	#GPIO_TIM1_CH3N
 
GPIO15


	)

263 
	#GPIO_TIM1_PR_ETR
 
GPIO12


	)

264 
	#GPIO_TIM1_PR_CH1
 
GPIO8


	)

265 
	#GPIO_TIM1_PR_CH2
 
GPIO9


	)

266 
	#GPIO_TIM1_PR_CH3
 
GPIO10


	)

267 
	#GPIO_TIM1_PR_CH4
 
GPIO11


	)

268 
	#GPIO_TIM1_PR_BKIN
 
GPIO6


	)

269 
	#GPIO_TIM1_PR_CH1N
 
GPIO7


	)

270 
	#GPIO_TIM1_PR_CH2N
 
GPIO0


	)

271 
	#GPIO_TIM1_PR_CH3N
 
GPIO1


	)

273 
	#GPIO_TIM1_FR_ETR
 
GPIO7


	)

274 
	#GPIO_TIM1_FR_CH1
 
GPIO9


	)

275 
	#GPIO_TIM1_FR_CH2
 
GPIO11


	)

276 
	#GPIO_TIM1_FR_CH3
 
GPIO13


	)

277 
	#GPIO_TIM1_FR_CH4
 
GPIO14


	)

278 
	#GPIO_TIM1_FR_BKIN
 
GPIO15


	)

279 
	#GPIO_TIM1_FR_CH1N
 
GPIO8


	)

280 
	#GPIO_TIM1_FR_CH2N
 
GPIO10


	)

281 
	#GPIO_TIM1_FR_CH3N
 
GPIO12


	)

284 
	#GPIO_BANK_TIM1_ETR
 
GPIOA


	)

285 
	#GPIO_BANK_TIM1_CH1
 
GPIOA


	)

286 
	#GPIO_BANK_TIM1_CH2
 
GPIOA


	)

287 
	#GPIO_BANK_TIM1_CH3
 
GPIOA


	)

288 
	#GPIO_BANK_TIM1_CH4
 
GPIOA


	)

289 
	#GPIO_BANK_TIM1_BKIN
 
GPIOB


	)

290 
	#GPIO_BANK_TIM1_CH1N
 
GPIOB


	)

291 
	#GPIO_BANK_TIM1_CH2N
 
GPIOB


	)

292 
	#GPIO_BANK_TIM1_CH3N
 
GPIOB


	)

293 
	#GPIO_BANK_TIM1_ETR_CH1234
 
GPIOA


	)

294 
	#GPIO_BANK_TIM1_BKIN_CH123N
 
GPIOB


	)

296 
	#GPIO_BANK_TIM1_PR_ETR
 
GPIOA


	)

297 
	#GPIO_BANK_TIM1_PR_CH1
 
GPIOA


	)

298 
	#GPIO_BANK_TIM1_PR_CH2
 
GPIOA


	)

299 
	#GPIO_BANK_TIM1_PR_CH3
 
GPIOA


	)

300 
	#GPIO_BANK_TIM1_PR_CH4
 
GPIOA


	)

301 
	#GPIO_BANK_TIM1_PR_BKIN
 
GPIOA


	)

302 
	#GPIO_BANK_TIM1_PR_CH1N
 
GPIOA


	)

303 
	#GPIO_BANK_TIM1_PR_CH2N
 
GPIOB


	)

304 
	#GPIO_BANK_TIM1_PR_CH3N
 
GPIOB


	)

305 
	#GPIO_BANK_TIM1_PR_ETR_CH1234_BKIN_CH1N
 
GPIOA


	)

306 
	#GPIO_BANK_TIM1_PR_CH23N
 
GPIOB


	)

308 
	#GPIO_BANK_TIM1_FR_ETR
 
GPIOE


	)

309 
	#GPIO_BANK_TIM1_FR_CH1
 
GPIOE


	)

310 
	#GPIO_BANK_TIM1_FR_CH2
 
GPIOE


	)

311 
	#GPIO_BANK_TIM1_FR_CH3
 
GPIOE


	)

312 
	#GPIO_BANK_TIM1_FR_CH4
 
GPIOE


	)

313 
	#GPIO_BANK_TIM1_FR_BKIN
 
GPIOE


	)

314 
	#GPIO_BANK_TIM1_FR_CH1N
 
GPIOE


	)

315 
	#GPIO_BANK_TIM1_FR_CH2N
 
GPIOE


	)

316 
	#GPIO_BANK_TIM1_FR_CH3N
 
GPIOE


	)

317 
	#GPIO_BANK_TIM1_FR
 
GPIOE


	)

320 
	#GPIO_UART5_TX
 
GPIO12


	)

321 
	#GPIO_UART5_RX
 
GPIO2


	)

324 
	#GPIO_BANK_UART5_TX
 
GPIOC


	)

325 
	#GPIO_BANK_UART5_RX
 
GPIOD


	)

328 
	#GPIO_UART4_TX
 
GPIO10


	)

329 
	#GPIO_UART4_RX
 
GPIO11


	)

332 
	#GPIO_BANK_UART4_TX
 
GPIOC


	)

333 
	#GPIO_BANK_UART4_RX
 
GPIOC


	)

336 
	#GPIO_USART3_TX
 
GPIO10


	)

337 
	#GPIO_USART3_RX
 
GPIO11


	)

338 
	#GPIO_USART3_CK
 
GPIO12


	)

339 
	#GPIO_USART3_CTS
 
GPIO13


	)

340 
	#GPIO_USART3_RTS
 
GPIO14


	)

342 
	#GPIO_USART3_PR_TX
 
GPIO10


	)

343 
	#GPIO_USART3_PR_RX
 
GPIO11


	)

344 
	#GPIO_USART3_PR_CK
 
GPIO12


	)

345 
	#GPIO_USART3_PR_CTS
 
GPIO13


	)

346 
	#GPIO_USART3_PR_RTS
 
GPIO14


	)

348 
	#GPIO_USART3_FR_TX
 
GPIO8


	)

349 
	#GPIO_USART3_FR_RX
 
GPIO9


	)

350 
	#GPIO_USART3_FR_CK
 
GPIO10


	)

351 
	#GPIO_USART3_FR_CTS
 
GPIO11


	)

352 
	#GPIO_USART3_FR_RTS
 
GPIO12


	)

355 
	#GPIO_BANK_USART3_TX
 
GPIOB


	)

356 
	#GPIO_BANK_USART3_RX
 
GPIOB


	)

357 
	#GPIO_BANK_USART3_CK
 
GPIOB


	)

358 
	#GPIO_BANK_USART3_CTS
 
GPIOB


	)

359 
	#GPIO_BANK_USART3_RTS
 
GPIOB


	)

361 
	#GPIO_BANK_USART3_PR_TX
 
GPIOC


	)

362 
	#GPIO_BANK_USART3_PR_RX
 
GPIOC


	)

363 
	#GPIO_BANK_USART3_PR_CK
 
GPIOC


	)

364 
	#GPIO_BANK_USART3_PR_CTS
 
GPIOB


	)

365 
	#GPIO_BANK_USART3_PR_RTS
 
GPIOB


	)

367 
	#GPIO_BANK_USART3_FR_TX
 
GPIOD


	)

368 
	#GPIO_BANK_USART3_FR_RX
 
GPIOD


	)

369 
	#GPIO_BANK_USART3_FR_CK
 
GPIOD


	)

370 
	#GPIO_BANK_USART3_FR_CTS
 
GPIOD


	)

371 
	#GPIO_BANK_USART3_FR_RTS
 
GPIOD


	)

374 
	#GPIO_USART2_CTS
 
GPIO0


	)

375 
	#GPIO_USART2_RTS
 
GPIO1


	)

376 
	#GPIO_USART2_TX
 
GPIO2


	)

377 
	#GPIO_USART2_RX
 
GPIO3


	)

378 
	#GPIO_USART2_CK
 
GPIO4


	)

380 
	#GPIO_USART2_RE_CTS
 
GPIO3


	)

381 
	#GPIO_USART2_RE_RTS
 
GPIO4


	)

382 
	#GPIO_USART2_RE_TX
 
GPIO5


	)

383 
	#GPIO_USART2_RE_RX
 
GPIO6


	)

384 
	#GPIO_USART2_RE_CK
 
GPIO7


	)

387 
	#GPIO_BANK_USART2_CTS
 
GPIOA


	)

388 
	#GPIO_BANK_USART2_RTS
 
GPIOA


	)

389 
	#GPIO_BANK_USART2_TX
 
GPIOA


	)

390 
	#GPIO_BANK_USART2_RX
 
GPIOA


	)

391 
	#GPIO_BANK_USART2_CK
 
GPIOA


	)

393 
	#GPIO_BANK_USART2_RE_CTS
 
GPIOD


	)

394 
	#GPIO_BANK_USART2_RE_RTS
 
GPIOD


	)

395 
	#GPIO_BANK_USART2_RE_TX
 
GPIOD


	)

396 
	#GPIO_BANK_USART2_RE_RX
 
GPIOD


	)

397 
	#GPIO_BANK_USART2_RE_CK
 
GPIOD


	)

400 
	#GPIO_USART1_TX
 
GPIO9


	)

401 
	#GPIO_USART1_RX
 
GPIO10


	)

403 
	#GPIO_USART1_RE_TX
 
GPIO6


	)

404 
	#GPIO_USART1_RE_RX
 
GPIO7


	)

407 
	#GPIO_BANK_USART1_TX
 
GPIOA


	)

408 
	#GPIO_BANK_USART1_RX
 
GPIOA


	)

410 
	#GPIO_BANK_USART1_RE_TX
 
GPIOB


	)

411 
	#GPIO_BANK_USART1_RE_RX
 
GPIOB


	)

414 
	#GPIO_I2C1_SMBAI
 
GPIO5


	)

415 
	#GPIO_I2C1_SCL
 
GPIO6


	)

416 
	#GPIO_I2C1_SDA
 
GPIO7


	)

418 
	#GPIO_I2C1_RE_SMBAI
 
GPIO5


	)

419 
	#GPIO_I2C1_RE_SCL
 
GPIO8


	)

420 
	#GPIO_I2C1_RE_SDA
 
GPIO9


	)

423 
	#GPIO_BANK_I2C1_SMBAI
 
GPIOB


	)

424 
	#GPIO_BANK_I2C1_SCL
 
GPIOB


	)

425 
	#GPIO_BANK_I2C1_SDA
 
GPIOB


	)

427 
	#GPIO_BANK_I2C1_RE_SMBAI
 
GPIOB


	)

428 
	#GPIO_BANK_I2C1_RE_SCL
 
GPIOB


	)

429 
	#GPIO_BANK_I2C1_RE_SDA
 
GPIOB


	)

432 
	#GPIO_I2C2_SCL
 
GPIO10


	)

433 
	#GPIO_I2C2_SDA
 
GPIO11


	)

434 
	#GPIO_I2C2_SMBAI
 
GPIO12


	)

437 
	#GPIO_BANK_I2C2_SCL
 
GPIOB


	)

438 
	#GPIO_BANK_I2C2_SDA
 
GPIOB


	)

439 
	#GPIO_BANK_I2C2_SMBAI
 
GPIOB


	)

442 
	#GPIO_SPI1_NSS
 
GPIO4


	)

443 
	#GPIO_SPI1_SCK
 
GPIO5


	)

444 
	#GPIO_SPI1_MISO
 
GPIO6


	)

445 
	#GPIO_SPI1_MOSI
 
GPIO7


	)

447 
	#GPIO_SPI1_RE_NSS
 
GPIO15


	)

448 
	#GPIO_SPI1_RE_SCK
 
GPIO3


	)

449 
	#GPIO_SPI1_RE_MISO
 
GPIO4


	)

450 
	#GPIO_SPI1_RE_MOSI
 
GPIO5


	)

453 
	#GPIO_BANK_SPI1_NSS
 
GPIOA


	)

454 
	#GPIO_BANK_SPI1_SCK
 
GPIOA


	)

455 
	#GPIO_BANK_SPI1_MISO
 
GPIOA


	)

456 
	#GPIO_BANK_SPI1_MOSI
 
GPIOA


	)

458 
	#GPIO_BANK_SPI1_RE_NSS
 
GPIOA


	)

459 
	#GPIO_BANK_SPI1_RE_SCK
 
GPIOB


	)

460 
	#GPIO_BANK_SPI1_RE_MISO
 
GPIOB


	)

461 
	#GPIO_BANK_SPI1_RE_MOSI
 
GPIOB


	)

464 
	#GPIO_SPI2_NSS
 
GPIO12


	)

465 
	#GPIO_SPI2_SCK
 
GPIO13


	)

466 
	#GPIO_SPI2_MISO
 
GPIO14


	)

467 
	#GPIO_SPI2_MOSI
 
GPIO15


	)

470 
	#GPIO_BANK_SPI2_NSS
 
GPIOB


	)

471 
	#GPIO_BANK_SPI2_SCK
 
GPIOB


	)

472 
	#GPIO_BANK_SPI2_MISO
 
GPIOB


	)

473 
	#GPIO_BANK_SPI2_MOSI
 
GPIOB


	)

476 
	#GPIO_SPI3_NSS
 
GPIO15


	)

477 
	#GPIO_SPI3_SCK
 
GPIO3


	)

478 
	#GPIO_SPI3_MISO
 
GPIO4


	)

479 
	#GPIO_SPI3_MOSI
 
GPIO5


	)

481 
	#GPIO_SPI3_RE_NSS
 
GPIO4


	)

482 
	#GPIO_SPI3_RE_SCK
 
GPIO10


	)

483 
	#GPIO_SPI3_RE_MISO
 
GPIO11


	)

484 
	#GPIO_SPI3_RE_MOSI
 
GPIO12


	)

487 
	#GPIO_BANK_SPI3_NSS
 
GPIOA


	)

488 
	#GPIO_BANK_SPI3_SCK
 
GPIOB


	)

489 
	#GPIO_BANK_SPI3_MISO
 
GPIOB


	)

490 
	#GPIO_BANK_SPI3_MOSI
 
GPIOB


	)

492 
	#GPIO_BANK_SPI3_RE_NSS
 
GPIOA


	)

493 
	#GPIO_BANK_SPI3_RE_SCK
 
GPIOC


	)

494 
	#GPIO_BANK_SPI3_RE_MISO
 
GPIOC


	)

495 
	#GPIO_BANK_SPI3_RE_MOSI
 
GPIOC


	)

498 
	#GPIO_ETH_RX_DV_CRS_DV
 
GPIO7


	)

499 
	#GPIO_ETH_RXD0
 
GPIO4


	)

500 
	#GPIO_ETH_RXD1
 
GPIO5


	)

501 
	#GPIO_ETH_RXD2
 
GPIO0


	)

502 
	#GPIO_ETH_RXD3
 
GPIO1


	)

504 
	#GPIO_ETH_RE_RX_DV_CRS_DV
 
GPIO8


	)

505 
	#GPIO_ETH_RE_RXD0
 
GPIO9


	)

506 
	#GPIO_ETH_RE_RXD1
 
GPIO10


	)

507 
	#GPIO_ETH_RE_RXD2
 
GPIO11


	)

508 
	#GPIO_ETH_RE_RXD3
 
GPIO12


	)

511 
	#GPIO_BANK_ETH_RX_DV_CRS_DV
 
GPIOA


	)

512 
	#GPIO_BANK_ETH_RXD0
 
GPIOC


	)

513 
	#GPIO_BANK_ETH_RXD1
 
GPIOC


	)

514 
	#GPIO_BANK_ETH_RXD2
 
GPIOB


	)

515 
	#GPIO_BANK_ETH_RXD3
 
GPIOB


	)

517 
	#GPIO_BANK_ETH_RE_RX_DV_CRS_DV
 
GPIOD


	)

518 
	#GPIO_BANK_ETH_RE_RXD0
 
GPIOD


	)

519 
	#GPIO_BANK_ETH_RE_RXD1
 
GPIOD


	)

520 
	#GPIO_BANK_ETH_RE_RXD2
 
GPIOD


	)

521 
	#GPIO_BANK_ETH_RE_RXD3
 
GPIOD


	)

526 
	#GPIO_CRL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00)

	)

527 
	#GPIOA_CRL
 
	`GPIO_CRL
(
GPIOA
)

	)

528 
	#GPIOB_CRL
 
	`GPIO_CRL
(
GPIOB
)

	)

529 
	#GPIOC_CRL
 
	`GPIO_CRL
(
GPIOC
)

	)

530 
	#GPIOD_CRL
 
	`GPIO_CRL
(
GPIOD
)

	)

531 
	#GPIOE_CRL
 
	`GPIO_CRL
(
GPIOE
)

	)

532 
	#GPIOF_CRL
 
	`GPIO_CRL
(
GPIOF
)

	)

533 
	#GPIOG_CRL
 
	`GPIO_CRL
(
GPIOG
)

	)

536 
	#GPIO_CRH
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x04)

	)

537 
	#GPIOA_CRH
 
	`GPIO_CRH
(
GPIOA
)

	)

538 
	#GPIOB_CRH
 
	`GPIO_CRH
(
GPIOB
)

	)

539 
	#GPIOC_CRH
 
	`GPIO_CRH
(
GPIOC
)

	)

540 
	#GPIOD_CRH
 
	`GPIO_CRH
(
GPIOD
)

	)

541 
	#GPIOE_CRH
 
	`GPIO_CRH
(
GPIOE
)

	)

542 
	#GPIOF_CRH
 
	`GPIO_CRH
(
GPIOF
)

	)

543 
	#GPIOG_CRH
 
	`GPIO_CRH
(
GPIOG
)

	)

546 
	#GPIO_IDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x08)

	)

547 
	#GPIOA_IDR
 
	`GPIO_IDR
(
GPIOA
)

	)

548 
	#GPIOB_IDR
 
	`GPIO_IDR
(
GPIOB
)

	)

549 
	#GPIOC_IDR
 
	`GPIO_IDR
(
GPIOC
)

	)

550 
	#GPIOD_IDR
 
	`GPIO_IDR
(
GPIOD
)

	)

551 
	#GPIOE_IDR
 
	`GPIO_IDR
(
GPIOE
)

	)

552 
	#GPIOF_IDR
 
	`GPIO_IDR
(
GPIOF
)

	)

553 
	#GPIOG_IDR
 
	`GPIO_IDR
(
GPIOG
)

	)

556 
	#GPIO_ODR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0c)

	)

557 
	#GPIOA_ODR
 
	`GPIO_ODR
(
GPIOA
)

	)

558 
	#GPIOB_ODR
 
	`GPIO_ODR
(
GPIOB
)

	)

559 
	#GPIOC_ODR
 
	`GPIO_ODR
(
GPIOC
)

	)

560 
	#GPIOD_ODR
 
	`GPIO_ODR
(
GPIOD
)

	)

561 
	#GPIOE_ODR
 
	`GPIO_ODR
(
GPIOE
)

	)

562 
	#GPIOF_ODR
 
	`GPIO_ODR
(
GPIOF
)

	)

563 
	#GPIOG_ODR
 
	`GPIO_ODR
(
GPIOG
)

	)

566 
	#GPIO_BSRR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x10)

	)

567 
	#GPIOA_BSRR
 
	`GPIO_BSRR
(
GPIOA
)

	)

568 
	#GPIOB_BSRR
 
	`GPIO_BSRR
(
GPIOB
)

	)

569 
	#GPIOC_BSRR
 
	`GPIO_BSRR
(
GPIOC
)

	)

570 
	#GPIOD_BSRR
 
	`GPIO_BSRR
(
GPIOD
)

	)

571 
	#GPIOE_BSRR
 
	`GPIO_BSRR
(
GPIOE
)

	)

572 
	#GPIOF_BSRR
 
	`GPIO_BSRR
(
GPIOF
)

	)

573 
	#GPIOG_BSRR
 
	`GPIO_BSRR
(
GPIOG
)

	)

576 
	#GPIO_BRR
(
p‹t
Ë
	`MMIO16
(’‹tË+ 0x14)

	)

577 
	#GPIOA_BRR
 
	`GPIO_BRR
(
GPIOA
)

	)

578 
	#GPIOB_BRR
 
	`GPIO_BRR
(
GPIOB
)

	)

579 
	#GPIOC_BRR
 
	`GPIO_BRR
(
GPIOC
)

	)

580 
	#GPIOD_BRR
 
	`GPIO_BRR
(
GPIOD
)

	)

581 
	#GPIOE_BRR
 
	`GPIO_BRR
(
GPIOE
)

	)

582 
	#GPIOF_BRR
 
	`GPIO_BRR
(
GPIOF
)

	)

583 
	#GPIOG_BRR
 
	`GPIO_BRR
(
GPIOG
)

	)

586 
	#GPIO_LCKR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x18)

	)

587 
	#GPIOA_LCKR
 
	`GPIO_LCKR
(
GPIOA
)

	)

588 
	#GPIOB_LCKR
 
	`GPIO_LCKR
(
GPIOB
)

	)

589 
	#GPIOC_LCKR
 
	`GPIO_LCKR
(
GPIOC
)

	)

590 
	#GPIOD_LCKR
 
	`GPIO_LCKR
(
GPIOD
)

	)

591 
	#GPIOE_LCKR
 
	`GPIO_LCKR
(
GPIOE
)

	)

592 
	#GPIOF_LCKR
 
	`GPIO_LCKR
(
GPIOF
)

	)

593 
	#GPIOG_LCKR
 
	`GPIO_LCKR
(
GPIOG
)

	)

612 
	#GPIO_CNF_INPUT_ANALOG
 0x00

	)

614 
	#GPIO_CNF_INPUT_FLOAT
 0x01

	)

616 
	#GPIO_CNF_INPUT_PULL_UPDOWN
 0x02

	)

619 
	#GPIO_CNF_OUTPUT_PUSHPULL
 0x00

	)

621 
	#GPIO_CNF_OUTPUT_OPENDRAIN
 0x01

	)

623 
	#GPIO_CNF_OUTPUT_ALTFN_PUSHPULL
 0x02

	)

625 
	#GPIO_CNF_OUTPUT_ALTFN_OPENDRAIN
 0x03

	)

636 
	#GPIO_MODE_INPUT
 0x00

	)

637 
	#GPIO_MODE_OUTPUT_10_MHZ
 0x01

	)

638 
	#GPIO_MODE_OUTPUT_2_MHZ
 0x02

	)

639 
	#GPIO_MODE_OUTPUT_50_MHZ
 0x03

	)

662 
	#AFIO_EVCR
 
	`MMIO32
(
AFIO_BASE
 + 0x00)

	)

665 
	#AFIO_MAPR
 
	`MMIO32
(
AFIO_BASE
 + 0x04)

	)

668 
	#AFIO_EXTICR
(
i
Ë
	`MMIO32
(
AFIO_BASE
 + 0x08 + (i)*4)

	)

669 
	#AFIO_EXTICR1
 
	`AFIO_EXTICR
(0)

	)

670 
	#AFIO_EXTICR2
 
	`AFIO_EXTICR
(1)

	)

671 
	#AFIO_EXTICR3
 
	`AFIO_EXTICR
(2)

	)

672 
	#AFIO_EXTICR4
 
	`AFIO_EXTICR
(3)

	)

675 
	#AFIO_MAPR2
 
	`MMIO32
(
AFIO_BASE
 + 0x1C)

	)

680 
	#AFIO_EVCR_EVOE
 (1 << 7)

	)

687 
	#AFIO_EVCR_PORT_PA
 (0x0 << 4)

	)

688 
	#AFIO_EVCR_PORT_PB
 (0x1 << 4)

	)

689 
	#AFIO_EVCR_PORT_PC
 (0x2 << 4)

	)

690 
	#AFIO_EVCR_PORT_PD
 (0x3 << 4)

	)

691 
	#AFIO_EVCR_PORT_PE
 (0x4 << 4)

	)

699 
	#AFIO_EVCR_PIN_Px0
 (0x0 << 0)

	)

700 
	#AFIO_EVCR_PIN_Px1
 (0x1 << 0)

	)

701 
	#AFIO_EVCR_PIN_Px2
 (0x2 << 0)

	)

702 
	#AFIO_EVCR_PIN_Px3
 (0x3 << 0)

	)

703 
	#AFIO_EVCR_PIN_Px4
 (0x4 << 0)

	)

704 
	#AFIO_EVCR_PIN_Px5
 (0x5 << 0)

	)

705 
	#AFIO_EVCR_PIN_Px6
 (0x6 << 0)

	)

706 
	#AFIO_EVCR_PIN_Px7
 (0x7 << 0)

	)

707 
	#AFIO_EVCR_PIN_Px8
 (0x8 << 0)

	)

708 
	#AFIO_EVCR_PIN_Px9
 (0x9 << 0)

	)

709 
	#AFIO_EVCR_PIN_Px10
 (0xA << 0)

	)

710 
	#AFIO_EVCR_PIN_Px11
 (0xB << 0)

	)

711 
	#AFIO_EVCR_PIN_Px12
 (0xC << 0)

	)

712 
	#AFIO_EVCR_PIN_Px13
 (0xD << 0)

	)

713 
	#AFIO_EVCR_PIN_Px14
 (0xE << 0)

	)

714 
	#AFIO_EVCR_PIN_Px15
 (0xF << 0)

	)

728 
	#AFIO_MAPR_PTP_PPS_REMAP
 (1 << 30)

	)

732 
	#AFIO_MAPR_TIM2ITR1_IREMAP
 (1 << 29)

	)

736 
	#AFIO_MAPR_SPI3_REMAP
 (1 << 28)

	)

740 
	#AFIO_MAPR_MII_RMII_SEL
 (1 << 23)

	)

744 
	#AFIO_MAPR_CAN2_REMAP
 (1 << 22)

	)

748 
	#AFIO_MAPR_ETH_REMAP
 (1 << 21)

	)

759 
	#AFIO_MAPR_SWJ_MASK
 (0x7 << 24)

	)

761 
	#AFIO_MAPR_SWJ_CFG_FULL_SWJ
 (0x0 << 24)

	)

763 
	#AFIO_MAPR_SWJ_CFG_FULL_SWJ_NO_JNTRST
 (0x1 << 24)

	)

765 
	#AFIO_MAPR_SWJ_CFG_JTAG_OFF_SW_ON
 (0x2 << 24)

	)

767 
	#AFIO_MAPR_SWJ_CFG_JTAG_OFF_SW_OFF
 (0x4 << 24)

	)

779 
	#AFIO_MAPR_ADC2_ETRGREG_REMAP
 (1 << 20)

	)

786 
	#AFIO_MAPR_ADC2_ETRGINJ_REMAP
 (1 << 19)

	)

793 
	#AFIO_MAPR_ADC1_ETRGREG_REMAP
 (1 << 18)

	)

800 
	#AFIO_MAPR_ADC1_ETRGINJ_REMAP
 (1 << 17)

	)

804 
	#AFIO_MAPR_TIM5CH4_IREMAP
 (1 << 16)

	)

808 
	#AFIO_MAPR_PD01_REMAP
 (1 << 15)

	)

812 
	#AFIO_MAPR_TIM4_REMAP
 (1 << 12)

	)

816 
	#AFIO_MAPR_USART2_REMAP
 (1 << 3)

	)

820 
	#AFIO_MAPR_USART1_REMAP
 (1 << 2)

	)

824 
	#AFIO_MAPR_I2C1_REMAP
 (1 << 1)

	)

828 
	#AFIO_MAPR_SPI1_REMAP
 (1 << 0)

	)

836 
	#AFIO_MAPR_CAN1_REMAP_PORTA
 (0x0 << 13)

	)

837 
	#AFIO_MAPR_CAN1_REMAP_PORTB
 (0x2 << 13Ë

	)

838 
	#AFIO_MAPR_CAN1_REMAP_PORTD
 (0x3 << 13)

	)

846 
	#AFIO_MAPR_TIM3_REMAP_NO_REMAP
 (0x0 << 10)

	)

847 
	#AFIO_MAPR_TIM3_REMAP_PARTIAL_REMAP
 (0x2 << 10)

	)

848 
	#AFIO_MAPR_TIM3_REMAP_FULL_REMAP
 (0x3 << 10)

	)

856 
	#AFIO_MAPR_TIM2_REMAP_NO_REMAP
 (0x0 << 8)

	)

857 
	#AFIO_MAPR_TIM2_REMAP_PARTIAL_REMAP1
 (0x1 << 8)

	)

858 
	#AFIO_MAPR_TIM2_REMAP_PARTIAL_REMAP2
 (0x2 << 8)

	)

859 
	#AFIO_MAPR_TIM2_REMAP_FULL_REMAP
 (0x3 << 8)

	)

867 
	#AFIO_MAPR_TIM1_REMAP_NO_REMAP
 (0x0 << 6)

	)

868 
	#AFIO_MAPR_TIM1_REMAP_PARTIAL_REMAP
 (0x1 << 6)

	)

869 
	#AFIO_MAPR_TIM1_REMAP_FULL_REMAP
 (0x3 << 6)

	)

877 
	#AFIO_MAPR_USART3_REMAP_NO_REMAP
 (0x0 << 4)

	)

878 
	#AFIO_MAPR_USART3_REMAP_PARTIAL_REMAP
 (0x1 << 4)

	)

879 
	#AFIO_MAPR_USART3_REMAP_FULL_REMAP
 (0x3 << 4)

	)

887 
	#AFIO_MAPR2_MISC_REMAP
 (1 << 13)

	)

890 
	#AFIO_MAPR2_TIM12_REMAP
 (1 << 12)

	)

893 
	#AFIO_MAPR2_TIM76_DAC_DMA_REMAPE
 (1 << 11)

	)

897 
	#AFIO_MAPR2_FSMC_NADV_DISCONNECT
 (1 << 10)

	)

901 
	#AFIO_MAPR2_TIM14_REMAP
 (1 << 9)

	)

905 
	#AFIO_MAPR2_TIM13_REMAP
 (1 << 8)

	)

909 
	#AFIO_MAPR2_TIM11_REMAP
 (1 << 7)

	)

913 
	#AFIO_MAPR2_TIM10_REMAP
 (1 << 6)

	)

917 
	#AFIO_MAPR2_TIM9_REMAP
 (1 << 5)

	)

920 
	#AFIO_MAPR2_TIM1_DMA_REMAP
 (1 << 4)

	)

923 
	#AFIO_MAPR2_CEC_REMAP
 (1 << 3)

	)

926 
	#AFIO_MAPR2_TIM17_REMAP
 (1 << 2)

	)

929 
	#AFIO_MAPR2_TIM16_REMAP
 (1 << 1)

	)

932 
	#AFIO_MAPR1_TIM16_REMAP
 (1 << 0)

	)

946 
	#AFIO_EXTI0
 0

	)

947 
	#AFIO_EXTI1
 1

	)

948 
	#AFIO_EXTI2
 2

	)

949 
	#AFIO_EXTI3
 3

	)

950 
	#AFIO_EXTI4
 4

	)

951 
	#AFIO_EXTI5
 5

	)

952 
	#AFIO_EXTI6
 6

	)

953 
	#AFIO_EXTI7
 7

	)

954 
	#AFIO_EXTI8
 8

	)

955 
	#AFIO_EXTI9
 9

	)

956 
	#AFIO_EXTI10
 10

	)

957 
	#AFIO_EXTI11
 11

	)

958 
	#AFIO_EXTI12
 12

	)

959 
	#AFIO_EXTI13
 13

	)

960 
	#AFIO_EXTI14
 14

	)

961 
	#AFIO_EXTI15
 15

	)

967 
BEGIN_DECLS


969 
gpio_£t_mode
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
mode
, uöt8_à
˙f
,

970 
uöt16_t
 
gpios
);

971 
gpio_£t_evítout
(
uöt8_t
 
evouç‹t
, uöt8_à
evouçö
);

972 
gpio_¥im¨y_ªm≠
(
uöt32_t
 
swjíabÀ
, uöt32_à
m≠s
);

973 
gpio_£c⁄d¨y_ªm≠
(
uöt32_t
 
m≠s
);

975 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f1/i2c.h

31 #i‚de‡
LIBOPENCM3_I2C_H


32 
	#LIBOPENCM3_I2C_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/i2c_comm⁄_v1.h
>

	@libopencm3/include/libopencm3/stm32/f1/iwdg.h

33 #i‚de‡
LIBOPENCM3_IWDG_H


34 
	#LIBOPENCM3_IWDG_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/iwdg_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f1/memorymap.h

20 #i‚de‡
LIBOPENCM3_MEMORYMAP_H


21 
	#LIBOPENCM3_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

28 
	#FLASH_BASE
 (0x08000000U)

	)

29 
	#PERIPH_BASE
 (0x40000000U)

	)

30 
	#INFO_BASE
 (0x1ffff000U)

	)

31 
	#PERIPH_BASE_APB1
 (
PERIPH_BASE
 + 0x00000)

	)

32 
	#PERIPH_BASE_APB2
 (
PERIPH_BASE
 + 0x10000)

	)

33 
	#PERIPH_BASE_AHB
 (
PERIPH_BASE
 + 0x18000)

	)

38 
	#TIM2_BASE
 (
PERIPH_BASE_APB1
 + 0x0000)

	)

39 
	#TIM3_BASE
 (
PERIPH_BASE_APB1
 + 0x0400)

	)

40 
	#TIM4_BASE
 (
PERIPH_BASE_APB1
 + 0x0800)

	)

41 
	#TIM5_BASE
 (
PERIPH_BASE_APB1
 + 0x0c00)

	)

42 
	#TIM6_BASE
 (
PERIPH_BASE_APB1
 + 0x1000)

	)

43 
	#TIM7_BASE
 (
PERIPH_BASE_APB1
 + 0x1400)

	)

44 
	#TIM12_BASE
 (
PERIPH_BASE_APB1
 + 0x1800)

	)

45 
	#TIM13_BASE
 (
PERIPH_BASE_APB1
 + 0x1c00)

	)

46 
	#TIM14_BASE
 (
PERIPH_BASE_APB1
 + 0x2000)

	)

48 
	#RTC_BASE
 (
PERIPH_BASE_APB1
 + 0x2800)

	)

49 
	#WWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x2c00)

	)

50 
	#IWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x3000)

	)

52 
	#SPI2_BASE
 (
PERIPH_BASE_APB1
 + 0x3800)

	)

53 
	#SPI3_BASE
 (
PERIPH_BASE_APB1
 + 0x3c00)

	)

55 
	#USART2_BASE
 (
PERIPH_BASE_APB1
 + 0x4400)

	)

56 
	#USART3_BASE
 (
PERIPH_BASE_APB1
 + 0x4800)

	)

57 
	#UART4_BASE
 (
PERIPH_BASE_APB1
 + 0x4c00)

	)

58 
	#UART5_BASE
 (
PERIPH_BASE_APB1
 + 0x5000)

	)

59 
	#I2C1_BASE
 (
PERIPH_BASE_APB1
 + 0x5400)

	)

60 
	#I2C2_BASE
 (
PERIPH_BASE_APB1
 + 0x5800)

	)

61 
	#USB_DEV_FS_BASE
 (
PERIPH_BASE_APB1
 + 0x5c00)

	)

62 
	#USB_PMA_BASE
 (
PERIPH_BASE_APB1
 + 0x6000)

	)

63 
	#USB_CAN_SRAM_BASE
 (
PERIPH_BASE_APB1
 + 0x6000)

	)

64 
	#BX_CAN1_BASE
 (
PERIPH_BASE_APB1
 + 0x6400)

	)

65 
	#BX_CAN2_BASE
 (
PERIPH_BASE_APB1
 + 0x6800)

	)

67 
	#BACKUP_REGS_BASE
 (
PERIPH_BASE_APB1
 + 0x6c00)

	)

68 
	#POWER_CONTROL_BASE
 (
PERIPH_BASE_APB1
 + 0x7000)

	)

69 
	#DAC_BASE
 (
PERIPH_BASE_APB1
 + 0x7400)

	)

70 
	#CEC_BASE
 (
PERIPH_BASE_APB1
 + 0x7800)

	)

74 
	#AFIO_BASE
 (
PERIPH_BASE_APB2
 + 0x0000)

	)

75 
	#EXTI_BASE
 (
PERIPH_BASE_APB2
 + 0x0400)

	)

76 
	#GPIO_PORT_A_BASE
 (
PERIPH_BASE_APB2
 + 0x0800)

	)

77 
	#GPIO_PORT_B_BASE
 (
PERIPH_BASE_APB2
 + 0x0c00)

	)

78 
	#GPIO_PORT_C_BASE
 (
PERIPH_BASE_APB2
 + 0x1000)

	)

79 
	#GPIO_PORT_D_BASE
 (
PERIPH_BASE_APB2
 + 0x1400)

	)

80 
	#GPIO_PORT_E_BASE
 (
PERIPH_BASE_APB2
 + 0x1800)

	)

81 
	#GPIO_PORT_F_BASE
 (
PERIPH_BASE_APB2
 + 0x1c00)

	)

82 
	#GPIO_PORT_G_BASE
 (
PERIPH_BASE_APB2
 + 0x2000)

	)

83 
	#ADC1_BASE
 (
PERIPH_BASE_APB2
 + 0x2400)

	)

84 
	#ADC2_BASE
 (
PERIPH_BASE_APB2
 + 0x2800)

	)

85 
	#TIM1_BASE
 (
PERIPH_BASE_APB2
 + 0x2c00)

	)

86 
	#SPI1_BASE
 (
PERIPH_BASE_APB2
 + 0x3000)

	)

87 
	#TIM8_BASE
 (
PERIPH_BASE_APB2
 + 0x3400)

	)

88 
	#USART1_BASE
 (
PERIPH_BASE_APB2
 + 0x3800)

	)

89 
	#ADC3_BASE
 (
PERIPH_BASE_APB2
 + 0x3c00)

	)

90 
	#TIM15_BASE
 (
PERIPH_BASE_APB2
 + 0x4000)

	)

91 
	#TIM16_BASE
 (
PERIPH_BASE_APB2
 + 0x4400)

	)

92 
	#TIM17_BASE
 (
PERIPH_BASE_APB2
 + 0x4800)

	)

93 
	#TIM9_BASE
 (
PERIPH_BASE_APB2
 + 0x4c00)

	)

94 
	#TIM10_BASE
 (
PERIPH_BASE_APB2
 + 0x5000)

	)

95 
	#TIM11_BASE
 (
PERIPH_BASE_APB2
 + 0x5400)

	)

99 
	#SDIO_BASE
 (
PERIPH_BASE_AHB
 + 0x00000)

	)

101 
	#DMA1_BASE
 (
PERIPH_BASE_AHB
 + 0x08000)

	)

102 
	#DMA2_BASE
 (
PERIPH_BASE_AHB
 + 0x08400)

	)

104 
	#RCC_BASE
 (
PERIPH_BASE_AHB
 + 0x09000)

	)

106 
	#FLASH_MEM_INTERFACE_BASE
 (
PERIPH_BASE_AHB
 + 0x0a000)

	)

107 
	#CRC_BASE
 (
PERIPH_BASE_AHB
 + 0x0b000)

	)

109 
	#ETHERNET_BASE
 (
PERIPH_BASE_AHB
 + 0x10000)

	)

111 
	#USB_OTG_FS_BASE
 (
PERIPH_BASE_AHB
 + 0xf„8000)

	)

114 
	#DBGMCU_BASE
 (
PPBI_BASE
 + 0x00042000)

	)

117 
	#FSMC_BASE
 (
PERIPH_BASE
 + 0x60000000)

	)

120 
	#DESIG_FLASH_SIZE_BASE
 (
INFO_BASE
 + 0x7e0)

	)

121 
	#DESIG_UNIQUE_ID_BASE
 (
INFO_BASE
 + 0x7e8)

	)

123 
	#DESIG_UNIQUE_ID0
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
)

	)

124 
	#DESIG_UNIQUE_ID1
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 4)

	)

125 
	#DESIG_UNIQUE_ID2
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 8)

	)

	@libopencm3/include/libopencm3/stm32/f1/nvic.h

6 #i‚de‡
LIBOPENCM3_STM32_F1_NVIC_H


7 
	#LIBOPENCM3_STM32_F1_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_WWDG_IRQ
 0

	)

17 
	#NVIC_PVD_IRQ
 1

	)

18 
	#NVIC_TAMPER_IRQ
 2

	)

19 
	#NVIC_RTC_IRQ
 3

	)

20 
	#NVIC_FLASH_IRQ
 4

	)

21 
	#NVIC_RCC_IRQ
 5

	)

22 
	#NVIC_EXTI0_IRQ
 6

	)

23 
	#NVIC_EXTI1_IRQ
 7

	)

24 
	#NVIC_EXTI2_IRQ
 8

	)

25 
	#NVIC_EXTI3_IRQ
 9

	)

26 
	#NVIC_EXTI4_IRQ
 10

	)

27 
	#NVIC_DMA1_CHANNEL1_IRQ
 11

	)

28 
	#NVIC_DMA1_CHANNEL2_IRQ
 12

	)

29 
	#NVIC_DMA1_CHANNEL3_IRQ
 13

	)

30 
	#NVIC_DMA1_CHANNEL4_IRQ
 14

	)

31 
	#NVIC_DMA1_CHANNEL5_IRQ
 15

	)

32 
	#NVIC_DMA1_CHANNEL6_IRQ
 16

	)

33 
	#NVIC_DMA1_CHANNEL7_IRQ
 17

	)

34 
	#NVIC_ADC1_2_IRQ
 18

	)

35 
	#NVIC_USB_HP_CAN_TX_IRQ
 19

	)

36 
	#NVIC_USB_LP_CAN_RX0_IRQ
 20

	)

37 
	#NVIC_CAN_RX1_IRQ
 21

	)

38 
	#NVIC_CAN_SCE_IRQ
 22

	)

39 
	#NVIC_EXTI9_5_IRQ
 23

	)

40 
	#NVIC_TIM1_BRK_IRQ
 24

	)

41 
	#NVIC_TIM1_UP_IRQ
 25

	)

42 
	#NVIC_TIM1_TRG_COM_IRQ
 26

	)

43 
	#NVIC_TIM1_CC_IRQ
 27

	)

44 
	#NVIC_TIM2_IRQ
 28

	)

45 
	#NVIC_TIM3_IRQ
 29

	)

46 
	#NVIC_TIM4_IRQ
 30

	)

47 
	#NVIC_I2C1_EV_IRQ
 31

	)

48 
	#NVIC_I2C1_ER_IRQ
 32

	)

49 
	#NVIC_I2C2_EV_IRQ
 33

	)

50 
	#NVIC_I2C2_ER_IRQ
 34

	)

51 
	#NVIC_SPI1_IRQ
 35

	)

52 
	#NVIC_SPI2_IRQ
 36

	)

53 
	#NVIC_USART1_IRQ
 37

	)

54 
	#NVIC_USART2_IRQ
 38

	)

55 
	#NVIC_USART3_IRQ
 39

	)

56 
	#NVIC_EXTI15_10_IRQ
 40

	)

57 
	#NVIC_RTC_ALARM_IRQ
 41

	)

58 
	#NVIC_USB_WAKEUP_IRQ
 42

	)

59 
	#NVIC_TIM8_BRK_IRQ
 43

	)

60 
	#NVIC_TIM8_UP_IRQ
 44

	)

61 
	#NVIC_TIM8_TRG_COM_IRQ
 45

	)

62 
	#NVIC_TIM8_CC_IRQ
 46

	)

63 
	#NVIC_ADC3_IRQ
 47

	)

64 
	#NVIC_FSMC_IRQ
 48

	)

65 
	#NVIC_SDIO_IRQ
 49

	)

66 
	#NVIC_TIM5_IRQ
 50

	)

67 
	#NVIC_SPI3_IRQ
 51

	)

68 
	#NVIC_UART4_IRQ
 52

	)

69 
	#NVIC_UART5_IRQ
 53

	)

70 
	#NVIC_TIM6_IRQ
 54

	)

71 
	#NVIC_TIM7_IRQ
 55

	)

72 
	#NVIC_DMA2_CHANNEL1_IRQ
 56

	)

73 
	#NVIC_DMA2_CHANNEL2_IRQ
 57

	)

74 
	#NVIC_DMA2_CHANNEL3_IRQ
 58

	)

75 
	#NVIC_DMA2_CHANNEL4_5_IRQ
 59

	)

76 
	#NVIC_DMA2_CHANNEL5_IRQ
 60

	)

77 
	#NVIC_ETH_IRQ
 61

	)

78 
	#NVIC_ETH_WKUP_IRQ
 62

	)

79 
	#NVIC_CAN2_TX_IRQ
 63

	)

80 
	#NVIC_CAN2_RX0_IRQ
 64

	)

81 
	#NVIC_CAN2_RX1_IRQ
 65

	)

82 
	#NVIC_CAN2_SCE_IRQ
 66

	)

83 
	#NVIC_OTG_FS_IRQ
 67

	)

85 
	#NVIC_IRQ_COUNT
 68

	)

94 
BEGIN_DECLS


96 
wwdg_i§
();

97 
pvd_i§
();

98 
èm≥r_i§
();

99 
πc_i§
();

100 
Êash_i§
();

101 
rcc_i§
();

102 
exti0_i§
();

103 
exti1_i§
();

104 
exti2_i§
();

105 
exti3_i§
();

106 
exti4_i§
();

107 
dma1_ch™√l1_i§
();

108 
dma1_ch™√l2_i§
();

109 
dma1_ch™√l3_i§
();

110 
dma1_ch™√l4_i§
();

111 
dma1_ch™√l5_i§
();

112 
dma1_ch™√l6_i§
();

113 
dma1_ch™√l7_i§
();

114 
adc1_2_i§
();

115 
usb_hp_ˇn_tx_i§
();

116 
usb_Õ_ˇn_rx0_i§
();

117 
ˇn_rx1_i§
();

118 
ˇn_s˚_i§
();

119 
exti9_5_i§
();

120 
tim1_brk_i§
();

121 
tim1_up_i§
();

122 
tim1_åg_com_i§
();

123 
tim1_cc_i§
();

124 
tim2_i§
();

125 
tim3_i§
();

126 
tim4_i§
();

127 
i2c1_ev_i§
();

128 
i2c1_î_i§
();

129 
i2c2_ev_i§
();

130 
i2c2_î_i§
();

131 
•i1_i§
();

132 
•i2_i§
();

133 
ußπ1_i§
();

134 
ußπ2_i§
();

135 
ußπ3_i§
();

136 
exti15_10_i§
();

137 
πc_Æ¨m_i§
();

138 
usb_wakeup_i§
();

139 
tim8_brk_i§
();

140 
tim8_up_i§
();

141 
tim8_åg_com_i§
();

142 
tim8_cc_i§
();

143 
adc3_i§
();

144 
fsmc_i§
();

145 
sdio_i§
();

146 
tim5_i§
();

147 
•i3_i§
();

148 
u¨t4_i§
();

149 
u¨t5_i§
();

150 
tim6_i§
();

151 
tim7_i§
();

152 
dma2_ch™√l1_i§
();

153 
dma2_ch™√l2_i§
();

154 
dma2_ch™√l3_i§
();

155 
dma2_ch™√l4_5_i§
();

156 
dma2_ch™√l5_i§
();

157 
ëh_i§
();

158 
ëh_wkup_i§
();

159 
ˇn2_tx_i§
();

160 
ˇn2_rx0_i§
();

161 
ˇn2_rx1_i§
();

162 
ˇn2_s˚_i§
();

163 
Ÿg_fs_i§
();

165 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f1/pwr.h

31 #i‚de‡
LIBOPENCM3_PWR_H


32 
	#LIBOPENCM3_PWR_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/pwr_comm⁄_v1.h
>

	@libopencm3/include/libopencm3/stm32/f1/rcc.h

40 #i‚de‡
LIBOPENCM3_RCC_H


41 
	#LIBOPENCM3_RCC_H


	)

48 
	#RCC_CR
 
	`MMIO32
(
RCC_BASE
 + 0x00)

	)

49 
	#RCC_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x04)

	)

50 
	#RCC_CIR
 
	`MMIO32
(
RCC_BASE
 + 0x08)

	)

51 
	#RCC_APB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x0c)

	)

52 
	#RCC_APB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x10)

	)

53 
	#RCC_AHBENR
 
	`MMIO32
(
RCC_BASE
 + 0x14)

	)

54 
	#RCC_APB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x18)

	)

55 
	#RCC_APB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x1c)

	)

56 
	#RCC_BDCR
 
	`MMIO32
(
RCC_BASE
 + 0x20)

	)

57 
	#RCC_CSR
 
	`MMIO32
(
RCC_BASE
 + 0x24)

	)

58 
	#RCC_AHBRSTR
 
	`MMIO32
(
RCC_BASE
 + 0x28Ë

	)

59 
	#RCC_CFGR2
 
	`MMIO32
(
RCC_BASE
 + 0x2cË

	)

63 
	#RCC_CR_PLL3RDY
 (1 << 29Ë

	)

64 
	#RCC_CR_PLL3ON
 (1 << 28Ë

	)

65 
	#RCC_CR_PLL2RDY
 (1 << 27Ë

	)

66 
	#RCC_CR_PLL2ON
 (1 << 26Ë

	)

67 
	#RCC_CR_PLLRDY
 (1 << 25)

	)

68 
	#RCC_CR_PLLON
 (1 << 24)

	)

69 
	#RCC_CR_CSSON
 (1 << 19)

	)

70 
	#RCC_CR_HSEBYP
 (1 << 18)

	)

71 
	#RCC_CR_HSERDY
 (1 << 17)

	)

72 
	#RCC_CR_HSEON
 (1 << 16)

	)

75 
	#RCC_CR_HSIRDY
 (1 << 1)

	)

76 
	#RCC_CR_HSION
 (1 << 0)

	)

80 
	#RCC_CFGR_OTGFSPRE
 (1 << 22Ë

	)

81 
	#RCC_CFGR_USBPRE
 (1 << 22Ë

	)

83 
	#RCC_CFGR_PLLMUL_SHIFT
 18

	)

84 
	#RCC_CFGR_PLLMUL
 (0xF << 
RCC_CFGR_PLLMUL_SHIFT
)

	)

86 
	#RCC_CFGR_PLLXTPRE
 (1 << 17)

	)

87 
	#RCC_CFGR_PLLSRC
 (1 << 16)

	)

89 
	#RCC_CFGR_ADCPRE_SHIFT
 14

	)

90 
	#RCC_CFGR_ADCPRE
 (3 << 
RCC_CFGR_ADCPRE_SHIFT
)

	)

92 
	#RCC_CFGR_PPRE2_SHIFT
 11

	)

93 
	#RCC_CFGR_PPRE2
 (7 << 
RCC_CFGR_PPRE2_SHIFT
)

	)

95 
	#RCC_CFGR_PPRE1_SHIFT
 8

	)

96 
	#RCC_CFGR_PPRE1
 (7 << 
RCC_CFGR_PPRE1_SHIFT
)

	)

98 
	#RCC_CFGR_HPRE_SHIFT
 4

	)

99 
	#RCC_CFGR_HPRE
 (0xF << 
RCC_CFGR_HPRE_SHIFT
)

	)

101 
	#RCC_CFGR_SWS_SHIFT
 2

	)

102 
	#RCC_CFGR_SWS
 (3 << 
RCC_CFGR_SWS_SHIFT
)

	)

104 
	#RCC_CFGR_SW_SHIFT
 0

	)

105 
	#RCC_CFGR_SW
 (3 << 
RCC_CFGR_SW_SHIFT
)

	)

112 
	#RCC_CFGR_MCO_SHIFT
 24

	)

113 
	#RCC_CFGR_MCO_MASK
 0xf

	)

114 
	#RCC_CFGR_MCO_NOCLK
 0x0

	)

115 
	#RCC_CFGR_MCO_SYSCLK
 0x4

	)

116 
	#RCC_CFGR_MCO_HSI
 0x5

	)

117 
	#RCC_CFGR_MCO_HSE
 0x6

	)

118 
	#RCC_CFGR_MCO_PLL_DIV2
 0x7

	)

119 
	#RCC_CFGR_MCO_PLL2
 0x8

	)

120 
	#RCC_CFGR_MCO_PLL3_DIV2
 0x9

	)

121 
	#RCC_CFGR_MCO_XT1
 0x®

	)

122 
	#RCC_CFGR_MCO_PLL3
 0xb

	)

130 
	#RCC_CFGR_USBPRE_PLL_CLK_DIV1_5
 0x0

	)

131 
	#RCC_CFGR_USBPRE_PLL_CLK_NODIV
 0x1

	)

135 
	#RCC_CFGR_USBPRE_PLL_VCO_CLK_DIV3
 0x0

	)

136 
	#RCC_CFGR_USBPRE_PLL_VCO_CLK_DIV2
 0x1

	)

143 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL2
 0x0

	)

144 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL3
 0x1

	)

145 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL4
 0x2

	)

146 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL5
 0x3

	)

147 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL6
 0x4

	)

148 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL7
 0x5

	)

149 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL8
 0x6

	)

150 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL9
 0x7

	)

151 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL10
 0x8

	)

152 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL11
 0x9

	)

153 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL12
 0x®

	)

154 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL13
 0xb

	)

155 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL14
 0x¯

	)

156 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL15
 0xd

	)

157 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL6_5
 0xd

	)

159 
	#RCC_CFGR_PLLMUL_PLL_CLK_MUL16
 0xê

	)

169 
	#RCC_CFGR_PLLXTPRE_HSE_CLK
 0x0

	)

170 
	#RCC_CFGR_PLLXTPRE_HSE_CLK_DIV2
 0x1

	)

178 
	#RCC_CFGR_PLLSRC_HSI_CLK_DIV2
 0x0

	)

179 
	#RCC_CFGR_PLLSRC_HSE_CLK
 0x1

	)

180 
	#RCC_CFGR_PLLSRC_PREDIV1_CLK
 0x1

	)

189 
	#RCC_CFGR_ADCPRE_PCLK2_DIV2
 0x0

	)

190 
	#RCC_CFGR_ADCPRE_PCLK2_DIV4
 0x1

	)

191 
	#RCC_CFGR_ADCPRE_PCLK2_DIV6
 0x2

	)

192 
	#RCC_CFGR_ADCPRE_PCLK2_DIV8
 0x3

	)

200 
	#RCC_CFGR_PPRE2_HCLK_NODIV
 0x0

	)

201 
	#RCC_CFGR_PPRE2_HCLK_DIV2
 0x4

	)

202 
	#RCC_CFGR_PPRE2_HCLK_DIV4
 0x5

	)

203 
	#RCC_CFGR_PPRE2_HCLK_DIV8
 0x6

	)

204 
	#RCC_CFGR_PPRE2_HCLK_DIV16
 0x7

	)

212 
	#RCC_CFGR_PPRE1_HCLK_NODIV
 0x0

	)

213 
	#RCC_CFGR_PPRE1_HCLK_DIV2
 0x4

	)

214 
	#RCC_CFGR_PPRE1_HCLK_DIV4
 0x5

	)

215 
	#RCC_CFGR_PPRE1_HCLK_DIV8
 0x6

	)

216 
	#RCC_CFGR_PPRE1_HCLK_DIV16
 0x7

	)

224 
	#RCC_CFGR_HPRE_SYSCLK_NODIV
 0x0

	)

225 
	#RCC_CFGR_HPRE_SYSCLK_DIV2
 0x8

	)

226 
	#RCC_CFGR_HPRE_SYSCLK_DIV4
 0x9

	)

227 
	#RCC_CFGR_HPRE_SYSCLK_DIV8
 0xa

	)

228 
	#RCC_CFGR_HPRE_SYSCLK_DIV16
 0xb

	)

229 
	#RCC_CFGR_HPRE_SYSCLK_DIV64
 0xc

	)

230 
	#RCC_CFGR_HPRE_SYSCLK_DIV128
 0xd

	)

231 
	#RCC_CFGR_HPRE_SYSCLK_DIV256
 0xe

	)

232 
	#RCC_CFGR_HPRE_SYSCLK_DIV512
 0xf

	)

236 
	#RCC_CFGR_SWS_SYSCLKSEL_HSICLK
 0x0

	)

237 
	#RCC_CFGR_SWS_SYSCLKSEL_HSECLK
 0x1

	)

238 
	#RCC_CFGR_SWS_SYSCLKSEL_PLLCLK
 0x2

	)

245 
	#RCC_CFGR_SW_SYSCLKSEL_HSICLK
 0x0

	)

246 
	#RCC_CFGR_SW_SYSCLKSEL_HSECLK
 0x1

	)

247 
	#RCC_CFGR_SW_SYSCLKSEL_PLLCLK
 0x2

	)

253 
	#RCC_CIR_CSSC
 (1 << 23)

	)

256 
	#RCC_CIR_PLL3RDYC
 (1 << 22Ë

	)

257 
	#RCC_CIR_PLL2RDYC
 (1 << 21Ë

	)

258 
	#RCC_CIR_PLLRDYC
 (1 << 20)

	)

259 
	#RCC_CIR_HSERDYC
 (1 << 19)

	)

260 
	#RCC_CIR_HSIRDYC
 (1 << 18)

	)

261 
	#RCC_CIR_LSERDYC
 (1 << 17)

	)

262 
	#RCC_CIR_LSIRDYC
 (1 << 16)

	)

265 
	#RCC_CIR_PLL3RDYIE
 (1 << 14Ë

	)

266 
	#RCC_CIR_PLL2RDYIE
 (1 << 13Ë

	)

267 
	#RCC_CIR_PLLRDYIE
 (1 << 12)

	)

268 
	#RCC_CIR_HSERDYIE
 (1 << 11)

	)

269 
	#RCC_CIR_HSIRDYIE
 (1 << 10)

	)

270 
	#RCC_CIR_LSERDYIE
 (1 << 9)

	)

271 
	#RCC_CIR_LSIRDYIE
 (1 << 8)

	)

274 
	#RCC_CIR_CSSF
 (1 << 7)

	)

277 
	#RCC_CIR_PLL3RDYF
 (1 << 6Ë

	)

278 
	#RCC_CIR_PLL2RDYF
 (1 << 5Ë

	)

279 
	#RCC_CIR_PLLRDYF
 (1 << 4)

	)

280 
	#RCC_CIR_HSERDYF
 (1 << 3)

	)

281 
	#RCC_CIR_HSIRDYF
 (1 << 2)

	)

282 
	#RCC_CIR_LSERDYF
 (1 << 1)

	)

283 
	#RCC_CIR_LSIRDYF
 (1 << 0)

	)

291 
	#RCC_APB2RSTR_TIM17RST
 (1 << 18)

	)

292 
	#RCC_APB2RSTR_TIM16RST
 (1 << 17)

	)

293 
	#RCC_APB2RSTR_TIM15RST
 (1 << 16)

	)

294 
	#RCC_APB2RSTR_ADC3RST
 (1 << 15Ë

	)

295 
	#RCC_APB2RSTR_USART1RST
 (1 << 14)

	)

296 
	#RCC_APB2RSTR_TIM8RST
 (1 << 13Ë

	)

297 
	#RCC_APB2RSTR_SPI1RST
 (1 << 12)

	)

298 
	#RCC_APB2RSTR_TIM1RST
 (1 << 11)

	)

299 
	#RCC_APB2RSTR_ADC2RST
 (1 << 10)

	)

300 
	#RCC_APB2RSTR_ADC1RST
 (1 << 9)

	)

301 
	#RCC_APB2RSTR_IOPGRST
 (1 << 8Ë

	)

302 
	#RCC_APB2RSTR_IOPFRST
 (1 << 7Ë

	)

303 
	#RCC_APB2RSTR_IOPERST
 (1 << 6)

	)

304 
	#RCC_APB2RSTR_IOPDRST
 (1 << 5)

	)

305 
	#RCC_APB2RSTR_IOPCRST
 (1 << 4)

	)

306 
	#RCC_APB2RSTR_IOPBRST
 (1 << 3)

	)

307 
	#RCC_APB2RSTR_IOPARST
 (1 << 2)

	)

308 
	#RCC_APB2RSTR_AFIORST
 (1 << 0)

	)

317 
	#RCC_APB1RSTR_DACRST
 (1 << 29)

	)

318 
	#RCC_APB1RSTR_PWRRST
 (1 << 28)

	)

319 
	#RCC_APB1RSTR_BKPRST
 (1 << 27)

	)

320 
	#RCC_APB1RSTR_CAN2RST
 (1 << 26Ë

	)

321 
	#RCC_APB1RSTR_CAN1RST
 (1 << 25Ë

	)

322 
	#RCC_APB1RSTR_CANRST
 (1 << 25Ë

	)

324 
	#RCC_APB1RSTR_USBRST
 (1 << 23Ë

	)

325 
	#RCC_APB1RSTR_I2C2RST
 (1 << 22)

	)

326 
	#RCC_APB1RSTR_I2C1RST
 (1 << 21)

	)

327 
	#RCC_APB1RSTR_UART5RST
 (1 << 20)

	)

328 
	#RCC_APB1RSTR_UART4RST
 (1 << 19)

	)

329 
	#RCC_APB1RSTR_USART3RST
 (1 << 18)

	)

330 
	#RCC_APB1RSTR_USART2RST
 (1 << 17)

	)

331 
	#RCC_APB1RSTR_SPI3RST
 (1 << 15)

	)

332 
	#RCC_APB1RSTR_SPI2RST
 (1 << 14)

	)

333 
	#RCC_APB1RSTR_WWDGRST
 (1 << 11)

	)

334 
	#RCC_APB1RSTR_TIM7RST
 (1 << 5)

	)

335 
	#RCC_APB1RSTR_TIM6RST
 (1 << 4)

	)

336 
	#RCC_APB1RSTR_TIM5RST
 (1 << 3)

	)

337 
	#RCC_APB1RSTR_TIM4RST
 (1 << 2)

	)

338 
	#RCC_APB1RSTR_TIM3RST
 (1 << 1)

	)

339 
	#RCC_APB1RSTR_TIM2RST
 (1 << 0)

	)

348 
	#RCC_AHBENR_ETHMACENRX
 (1 << 16)

	)

349 
	#RCC_AHBENR_ETHMACENTX
 (1 << 15)

	)

350 
	#RCC_AHBENR_ETHMACEN
 (1 << 14)

	)

351 
	#RCC_AHBENR_OTGFSEN
 (1 << 12)

	)

352 
	#RCC_AHBENR_SDIOEN
 (1 << 10)

	)

353 
	#RCC_AHBENR_FSMCEN
 (1 << 8)

	)

354 
	#RCC_AHBENR_CRCEN
 (1 << 6)

	)

355 
	#RCC_AHBENR_FLITFEN
 (1 << 4)

	)

356 
	#RCC_AHBENR_SRAMEN
 (1 << 2)

	)

357 
	#RCC_AHBENR_DMA2EN
 (1 << 1)

	)

358 
	#RCC_AHBENR_DMA1EN
 (1 << 0)

	)

367 
	#RCC_APB2ENR_TIM17EN
 (1 << 18)

	)

368 
	#RCC_APB2ENR_TIM16EN
 (1 << 17)

	)

369 
	#RCC_APB2ENR_TIM15EN
 (1 << 16)

	)

370 
	#RCC_APB2ENR_ADC3EN
 (1 << 15Ë

	)

371 
	#RCC_APB2ENR_USART1EN
 (1 << 14)

	)

372 
	#RCC_APB2ENR_TIM8EN
 (1 << 13Ë

	)

373 
	#RCC_APB2ENR_SPI1EN
 (1 << 12)

	)

374 
	#RCC_APB2ENR_TIM1EN
 (1 << 11)

	)

375 
	#RCC_APB2ENR_ADC2EN
 (1 << 10)

	)

376 
	#RCC_APB2ENR_ADC1EN
 (1 << 9)

	)

377 
	#RCC_APB2ENR_IOPGEN
 (1 << 8Ë

	)

378 
	#RCC_APB2ENR_IOPFEN
 (1 << 7Ë

	)

379 
	#RCC_APB2ENR_IOPEEN
 (1 << 6)

	)

380 
	#RCC_APB2ENR_IOPDEN
 (1 << 5)

	)

381 
	#RCC_APB2ENR_IOPCEN
 (1 << 4)

	)

382 
	#RCC_APB2ENR_IOPBEN
 (1 << 3)

	)

383 
	#RCC_APB2ENR_IOPAEN
 (1 << 2)

	)

384 
	#RCC_APB2ENR_AFIOEN
 (1 << 0)

	)

393 
	#RCC_APB1ENR_DACEN
 (1 << 29)

	)

394 
	#RCC_APB1ENR_PWREN
 (1 << 28)

	)

395 
	#RCC_APB1ENR_BKPEN
 (1 << 27)

	)

396 
	#RCC_APB1ENR_CAN2EN
 (1 << 26Ë

	)

397 
	#RCC_APB1ENR_CAN1EN
 (1 << 25Ë

	)

398 
	#RCC_APB1ENR_CANEN
 (1 << 25Ë

	)

400 
	#RCC_APB1ENR_USBEN
 (1 << 23Ë

	)

401 
	#RCC_APB1ENR_I2C2EN
 (1 << 22)

	)

402 
	#RCC_APB1ENR_I2C1EN
 (1 << 21)

	)

403 
	#RCC_APB1ENR_UART5EN
 (1 << 20)

	)

404 
	#RCC_APB1ENR_UART4EN
 (1 << 19)

	)

405 
	#RCC_APB1ENR_USART3EN
 (1 << 18)

	)

406 
	#RCC_APB1ENR_USART2EN
 (1 << 17)

	)

407 
	#RCC_APB1ENR_SPI3EN
 (1 << 15)

	)

408 
	#RCC_APB1ENR_SPI2EN
 (1 << 14)

	)

409 
	#RCC_APB1ENR_WWDGEN
 (1 << 11)

	)

410 
	#RCC_APB1ENR_TIM7EN
 (1 << 5)

	)

411 
	#RCC_APB1ENR_TIM6EN
 (1 << 4)

	)

412 
	#RCC_APB1ENR_TIM5EN
 (1 << 3)

	)

413 
	#RCC_APB1ENR_TIM4EN
 (1 << 2)

	)

414 
	#RCC_APB1ENR_TIM3EN
 (1 << 1)

	)

415 
	#RCC_APB1ENR_TIM2EN
 (1 << 0)

	)

420 
	#RCC_BDCR_BDRST
 (1 << 16)

	)

421 
	#RCC_BDCR_RTCEN
 (1 << 15)

	)

423 
	#RCC_BDCR_LSEBYP
 (1 << 2)

	)

424 
	#RCC_BDCR_LSERDY
 (1 << 1)

	)

425 
	#RCC_BDCR_LSEON
 (1 << 0)

	)

429 
	#RCC_CSR_LPWRRSTF
 (1 << 31)

	)

430 
	#RCC_CSR_WWDGRSTF
 (1 << 30)

	)

431 
	#RCC_CSR_IWDGRSTF
 (1 << 29)

	)

432 
	#RCC_CSR_SFTRSTF
 (1 << 28)

	)

433 
	#RCC_CSR_PORRSTF
 (1 << 27)

	)

434 
	#RCC_CSR_PINRSTF
 (1 << 26)

	)

435 
	#RCC_CSR_RMVF
 (1 << 24)

	)

436 
	#RCC_CSR_RESET_FLAGS
 (
RCC_CSR_LPWRRSTF
 | 
RCC_CSR_WWDGRSTF
 |\

437 
RCC_CSR_IWDGRSTF
 | 
RCC_CSR_SFTRSTF
 | 
RCC_CSR_PORRSTF
 |\

438 
RCC_CSR_PINRSTF
)

	)

439 
	#RCC_CSR_LSIRDY
 (1 << 1)

	)

440 
	#RCC_CSR_LSION
 (1 << 0)

	)

448 
	#RCC_AHBRSTR_ETHMACRST
 (1 << 14)

	)

449 
	#RCC_AHBRSTR_OTGFSRST
 (1 << 12)

	)

455 
	#RCC_CFGR2_I2S3SRC_SYSCLK
 0x0

	)

456 
	#RCC_CFGR2_I2S3SRC_PLL3_VCO_CLK
 0x1

	)

459 
	#RCC_CFGR2_I2S2SRC_SYSCLK
 0x0

	)

460 
	#RCC_CFGR2_I2S2SRC_PLL3_VCO_CLK
 0x1

	)

461 
	#RCC_CFGR2_I2S2SRC
 (1 << 17)

	)

464 
	#RCC_CFGR2_PREDIV1SRC_HSE_CLK
 0x0

	)

465 
	#RCC_CFGR2_PREDIV1SRC_PLL2_CLK
 0x1

	)

466 
	#RCC_CFGR2_PREDIV1SRC
 (1 << 16)

	)

468 
	#RCC_CFGR2_PLL3MUL_SHIFT
 12

	)

469 
	#RCC_CFGR2_PLL3MUL
 (0xF << 
RCC_CFGR2_PLL3MUL_SHIFT
)

	)

471 
	#RCC_CFGR2_PLL2MUL_SHIFT
 8

	)

472 
	#RCC_CFGR2_PLL2MUL
 (0xF << 
RCC_CFGR2_PLL2MUL_SHIFT
)

	)

474 
	#RCC_CFGR2_PREDIV2_SHIFT
 4

	)

475 
	#RCC_CFGR2_PREDIV2
 (0xF << 
RCC_CFGR2_PREDIV2_SHIFT
)

	)

477 
	#RCC_CFGR2_PREDIV1_SHIFT
 0

	)

478 
	#RCC_CFGR2_PREDIV1
 (0xF << 
RCC_CFGR2_PREDIV1_SHIFT
)

	)

481 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL8
 0x6

	)

482 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL9
 0x7

	)

483 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL10
 0x8

	)

484 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL11
 0x9

	)

485 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL12
 0xa

	)

486 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL13
 0xb

	)

487 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL14
 0xc

	)

488 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL16
 0xe

	)

489 
	#RCC_CFGR2_PLL3MUL_PLL3_CLK_MUL20
 0xf

	)

492 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL8
 0x6

	)

493 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL9
 0x7

	)

494 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL10
 0x8

	)

495 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL11
 0x9

	)

496 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL12
 0xa

	)

497 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL13
 0xb

	)

498 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL14
 0xc

	)

499 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL16
 0xe

	)

500 
	#RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL20
 0xf

	)

503 
	#RCC_CFGR2_PREDIV_NODIV
 0x0

	)

504 
	#RCC_CFGR2_PREDIV_DIV2
 0x1

	)

505 
	#RCC_CFGR2_PREDIV_DIV3
 0x2

	)

506 
	#RCC_CFGR2_PREDIV_DIV4
 0x3

	)

507 
	#RCC_CFGR2_PREDIV_DIV5
 0x4

	)

508 
	#RCC_CFGR2_PREDIV_DIV6
 0x5

	)

509 
	#RCC_CFGR2_PREDIV_DIV7
 0x6

	)

510 
	#RCC_CFGR2_PREDIV_DIV8
 0x7

	)

511 
	#RCC_CFGR2_PREDIV_DIV9
 0x8

	)

512 
	#RCC_CFGR2_PREDIV_DIV10
 0x9

	)

513 
	#RCC_CFGR2_PREDIV_DIV11
 0xa

	)

514 
	#RCC_CFGR2_PREDIV_DIV12
 0xb

	)

515 
	#RCC_CFGR2_PREDIV_DIV13
 0xc

	)

516 
	#RCC_CFGR2_PREDIV_DIV14
 0xd

	)

517 
	#RCC_CFGR2_PREDIV_DIV15
 0xe

	)

518 
	#RCC_CFGR2_PREDIV_DIV16
 0xf

	)

521 
	#RCC_CFGR2_PREDIV2_NODIV
 0x0

	)

522 
	#RCC_CFGR2_PREDIV2_DIV2
 0x1

	)

523 
	#RCC_CFGR2_PREDIV2_DIV3
 0x2

	)

524 
	#RCC_CFGR2_PREDIV2_DIV4
 0x3

	)

525 
	#RCC_CFGR2_PREDIV2_DIV5
 0x4

	)

526 
	#RCC_CFGR2_PREDIV2_DIV6
 0x5

	)

527 
	#RCC_CFGR2_PREDIV2_DIV7
 0x6

	)

528 
	#RCC_CFGR2_PREDIV2_DIV8
 0x7

	)

529 
	#RCC_CFGR2_PREDIV2_DIV9
 0x8

	)

530 
	#RCC_CFGR2_PREDIV2_DIV10
 0x9

	)

531 
	#RCC_CFGR2_PREDIV2_DIV11
 0xa

	)

532 
	#RCC_CFGR2_PREDIV2_DIV12
 0xb

	)

533 
	#RCC_CFGR2_PREDIV2_DIV13
 0xc

	)

534 
	#RCC_CFGR2_PREDIV2_DIV14
 0xd

	)

535 
	#RCC_CFGR2_PREDIV2_DIV15
 0xe

	)

536 
	#RCC_CFGR2_PREDIV2_DIV16
 0xf

	)

539 
uöt32_t
 
rcc_ahb_‰equícy
;

540 
uöt32_t
 
rcc_≠b1_‰equícy
;

541 
uöt32_t
 
rcc_≠b2_‰equícy
;

545 
	ercc_osc
 {

546 
	mRCC_PLL
, 
	mRCC_PLL2
, 
	mRCC_PLL3
, 
	mRCC_HSE
, 
	mRCC_HSI
, 
	mRCC_LSE
, 
	mRCC_LSI


549 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

555 
	ercc_≥rùh_˛kí
 {

558 
	mRCC_DMA1
 = 
_REG_BIT
(0x14, 0),

559 
	mRCC_DMA2
 = 
_REG_BIT
(0x14, 1),

560 
	mRCC_SRAM
 = 
_REG_BIT
(0x14, 2),

561 
	mRCC_FLTF
 = 
_REG_BIT
(0x14, 4),

562 
	mRCC_CRC
 = 
_REG_BIT
(0x14, 6),

563 
	mRCC_FSMC
 = 
_REG_BIT
(0x14, 8),

564 
	mRCC_SDIO
 = 
_REG_BIT
(0x14, 10),

565 
	mRCC_OTGFS
 = 
_REG_BIT
(0x14, 12),

566 
	mRCC_ETHMAC
 = 
_REG_BIT
(0x14, 14),

567 
	mRCC_ETHMACTX
 = 
_REG_BIT
(0x14, 15),

568 
	mRCC_ETHMACRX
 = 
_REG_BIT
(0x14, 16),

571 
	mRCC_AFIO
 = 
_REG_BIT
(0x18, 0),

572 
	mRCC_GPIOA
 = 
_REG_BIT
(0x18, 2),

573 
	mRCC_GPIOB
 = 
_REG_BIT
(0x18, 3),

574 
	mRCC_GPIOC
 = 
_REG_BIT
(0x18, 4),

575 
	mRCC_GPIOD
 = 
_REG_BIT
(0x18, 5),

576 
	mRCC_GPIOE
 = 
_REG_BIT
(0x18, 6),

577 
	mRCC_GPIOF
 = 
_REG_BIT
(0x18, 7),

578 
	mRCC_GPIOG
 = 
_REG_BIT
(0x18, 8),

579 
	mRCC_ADC1
 = 
_REG_BIT
(0x18, 9),

580 
	mRCC_ADC2
 = 
_REG_BIT
(0x18, 10),

581 
	mRCC_TIM1
 = 
_REG_BIT
(0x18, 11),

582 
	mRCC_SPI1
 = 
_REG_BIT
(0x18, 12),

583 
	mRCC_TIM8
 = 
_REG_BIT
(0x18, 13),

584 
	mRCC_USART1
 = 
_REG_BIT
(0x18, 14),

585 
	mRCC_ADC3
 = 
_REG_BIT
(0x18, 15),

586 
	mRCC_TIM15
 = 
_REG_BIT
(0x18, 16),

587 
	mRCC_TIM16
 = 
_REG_BIT
(0x18, 17),

588 
	mRCC_TIM17
 = 
_REG_BIT
(0x18, 18),

589 
	mRCC_TIM9
 = 
_REG_BIT
(0x18, 19),

590 
	mRCC_TIM10
 = 
_REG_BIT
(0x18, 20),

591 
	mRCC_TIM11
 = 
_REG_BIT
(0x18, 21),

594 
	mRCC_TIM2
 = 
_REG_BIT
(0x1C, 0),

595 
	mRCC_TIM3
 = 
_REG_BIT
(0x1C, 1),

596 
	mRCC_TIM4
 = 
_REG_BIT
(0x1C, 2),

597 
	mRCC_TIM5
 = 
_REG_BIT
(0x1C, 3),

598 
	mRCC_TIM6
 = 
_REG_BIT
(0x1C, 4),

599 
	mRCC_TIM7
 = 
_REG_BIT
(0x1C, 5),

600 
	mRCC_TIM12
 = 
_REG_BIT
(0x1C, 6),

601 
	mRCC_TIM13
 = 
_REG_BIT
(0x1C, 7),

602 
	mRCC_TIM14
 = 
_REG_BIT
(0x1C, 8),

603 
	mRCC_WWDG
 = 
_REG_BIT
(0x1C, 11),

604 
	mRCC_SPI2
 = 
_REG_BIT
(0x1C, 14),

605 
	mRCC_SPI3
 = 
_REG_BIT
(0x1C, 15),

606 
	mRCC_USART2
 = 
_REG_BIT
(0x1C, 17),

607 
	mRCC_USART3
 = 
_REG_BIT
(0x1C, 18),

608 
	mRCC_UART4
 = 
_REG_BIT
(0x1C, 19),

609 
	mRCC_UART5
 = 
_REG_BIT
(0x1C, 20),

610 
	mRCC_I2C1
 = 
_REG_BIT
(0x1C, 21),

611 
	mRCC_I2C2
 = 
_REG_BIT
(0x1C, 22),

612 
	mRCC_USB
 = 
_REG_BIT
(0x1C, 23),

613 
	mRCC_CAN
 = 
_REG_BIT
(0x1C, 25),

614 
	mRCC_CAN1
 = 
_REG_BIT
(0x1C, 25),

615 
	mRCC_CAN2
 = 
_REG_BIT
(0x1C, 26),

616 
	mRCC_BKP
 = 
_REG_BIT
(0x1C, 27),

617 
	mRCC_PWR
 = 
_REG_BIT
(0x1C, 28),

618 
	mRCC_DAC
 = 
_REG_BIT
(0x1C, 29),

619 
	mRCC_CEC
 = 
_REG_BIT
(0x1C, 30),

622 
	ercc_≥rùh_r°
 {

625 
	mRST_OTGFS
 = 
_REG_BIT
(0x28, 12),

626 
	mRST_ETHMAC
 = 
_REG_BIT
(0x28, 14),

629 
	mRST_AFIO
 = 
_REG_BIT
(0x0c, 0),

630 
	mRST_GPIOA
 = 
_REG_BIT
(0x0c, 2),

631 
	mRST_GPIOB
 = 
_REG_BIT
(0x0c, 3),

632 
	mRST_GPIOC
 = 
_REG_BIT
(0x0c, 4),

633 
	mRST_GPIOD
 = 
_REG_BIT
(0x0c, 5),

634 
	mRST_GPIOE
 = 
_REG_BIT
(0x0c, 6),

635 
	mRST_GPIOF
 = 
_REG_BIT
(0x0c, 7),

636 
	mRST_GPIOG
 = 
_REG_BIT
(0x0c, 8),

637 
	mRST_ADC1
 = 
_REG_BIT
(0x0c, 9),

638 
	mRST_ADC2
 = 
_REG_BIT
(0x0c, 10),

639 
	mRST_TIM1
 = 
_REG_BIT
(0x0c, 11),

640 
	mRST_SPI1
 = 
_REG_BIT
(0x0c, 12),

641 
	mRST_TIM8
 = 
_REG_BIT
(0x0c, 13),

642 
	mRST_USART1
 = 
_REG_BIT
(0x0c, 14),

643 
	mRST_ADC3
 = 
_REG_BIT
(0x0c, 15),

644 
	mRST_TIM15
 = 
_REG_BIT
(0x0c, 16),

645 
	mRST_TIM16
 = 
_REG_BIT
(0x0c, 17),

646 
	mRST_TIM17
 = 
_REG_BIT
(0x0c, 18),

647 
	mRST_TIM9
 = 
_REG_BIT
(0x0c, 19),

648 
	mRST_TIM10
 = 
_REG_BIT
(0x0c, 20),

649 
	mRST_TIM11
 = 
_REG_BIT
(0x0c, 21),

652 
	mRST_TIM2
 = 
_REG_BIT
(0x10, 0),

653 
	mRST_TIM3
 = 
_REG_BIT
(0x10, 1),

654 
	mRST_TIM4
 = 
_REG_BIT
(0x10, 2),

655 
	mRST_TIM5
 = 
_REG_BIT
(0x10, 3),

656 
	mRST_TIM6
 = 
_REG_BIT
(0x10, 4),

657 
	mRST_TIM7
 = 
_REG_BIT
(0x10, 5),

658 
	mRST_TIM12
 = 
_REG_BIT
(0x10, 6),

659 
	mRST_TIM13
 = 
_REG_BIT
(0x10, 7),

660 
	mRST_TIM14
 = 
_REG_BIT
(0x10, 8),

661 
	mRST_WWDG
 = 
_REG_BIT
(0x10, 11),

662 
	mRST_SPI2
 = 
_REG_BIT
(0x10, 14),

663 
	mRST_SPI3
 = 
_REG_BIT
(0x10, 15),

664 
	mRST_USART2
 = 
_REG_BIT
(0x10, 17),

665 
	mRST_USART3
 = 
_REG_BIT
(0x10, 18),

666 
	mRST_UART4
 = 
_REG_BIT
(0x10, 19),

667 
	mRST_UART5
 = 
_REG_BIT
(0x10, 20),

668 
	mRST_I2C1
 = 
_REG_BIT
(0x10, 21),

669 
	mRST_I2C2
 = 
_REG_BIT
(0x10, 22),

670 
	mRST_USB
 = 
_REG_BIT
(0x10, 23),

671 
	mRST_CAN
 = 
_REG_BIT
(0x10, 25),

672 
	mRST_CAN1
 = 
_REG_BIT
(0x10, 25),

673 
	mRST_CAN2
 = 
_REG_BIT
(0x10, 26),

674 
	mRST_BKP
 = 
_REG_BIT
(0x10, 27),

675 
	mRST_PWR
 = 
_REG_BIT
(0x10, 28),

676 
	mRST_DAC
 = 
_REG_BIT
(0x10, 29),

677 
	mRST_CEC
 = 
_REG_BIT
(0x10, 30),

680 
	~<lib›ícm3/°m32/comm⁄/rcc_comm⁄_Æl.h
>

682 
BEGIN_DECLS


684 
rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
);

685 
rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
);

686 
rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
);

687 
rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
);

688 
rcc_css_öt_˛ór
();

689 
rcc_css_öt_Êag
();

690 
rcc_osc_⁄
(
rcc_osc
 
osc
);

691 
rcc_osc_off
(
rcc_osc
 
osc
);

692 
rcc_css_íabÀ
();

693 
rcc_css_dißbÀ
();

694 
rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
);

695 
rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
);

696 
rcc_£t_∂l2_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
);

697 
rcc_£t_∂l3_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
);

698 
rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
);

699 
rcc_£t_∂lxçª
(
uöt32_t
 
∂lxçª
);

700 
uöt32_t
 
rcc_πc_˛ock_íabÀd_Êag
();

701 
rcc_íabÀ_πc_˛ock
();

702 
rcc_£t_πc_˛ock_sour˚
(
rcc_osc
 
˛ock_sour˚
);

703 
rcc_£t_ad˝ª
(
uöt32_t
 
ad˝ª
);

704 
rcc_£t_µª2
(
uöt32_t
 
µª2
);

705 
rcc_£t_µª1
(
uöt32_t
 
µª1
);

706 
rcc_£t_h¥e
(
uöt32_t
 
h¥e
);

707 
rcc_£t_usb¥e
(
uöt32_t
 
usb¥e
);

708 
rcc_£t_¥ediv1
(
uöt32_t
 
¥ediv
);

709 
rcc_£t_¥ediv2
(
uöt32_t
 
¥ediv
);

710 
rcc_£t_¥ediv1_sour˚
(
uöt32_t
 
rcc§c
);

711 
uöt32_t
 
rcc_sy°em_˛ock_sour˚
();

712 
rcc_˛ock_£tup_ö_hsi_out_64mhz
();

713 
rcc_˛ock_£tup_ö_hsi_out_48mhz
();

714 
rcc_˛ock_£tup_ö_hsi_out_24mhz
();

715 
rcc_˛ock_£tup_ö_h£_8mhz_out_24mhz
();

716 
rcc_˛ock_£tup_ö_h£_8mhz_out_72mhz
();

717 
rcc_˛ock_£tup_ö_h£_12mhz_out_72mhz
();

718 
rcc_˛ock_£tup_ö_h£_16mhz_out_72mhz
();

719 
rcc_˛ock_£tup_ö_h£_25mhz_out_72mhz
();

720 
rcc_backupdomaö_ª£t
();

722 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f1/rtc.h

39 #i‚de‡
LIBOPENCM3_RTC_H


40 
	#LIBOPENCM3_RTC_H


	)

43 
	~<lib›ícm3/°m32/pwr.h
>

44 
	~<lib›ícm3/°m32/rcc.h
>

49 
	#RTC_CRH
 
	`MMIO32
(
RTC_BASE
 + 0x00)

	)

52 
	#RTC_CRL
 
	`MMIO32
(
RTC_BASE
 + 0x04)

	)

55 
	#RTC_PRLH
 
	`MMIO32
(
RTC_BASE
 + 0x08)

	)

56 
	#RTC_PRLL
 
	`MMIO32
(
RTC_BASE
 + 0x0c)

	)

59 
	#RTC_DIVH
 
	`MMIO32
(
RTC_BASE
 + 0x10)

	)

60 
	#RTC_DIVL
 
	`MMIO32
(
RTC_BASE
 + 0x14)

	)

63 
	#RTC_CNTH
 
	`MMIO32
(
RTC_BASE
 + 0x18)

	)

64 
	#RTC_CNTL
 
	`MMIO32
(
RTC_BASE
 + 0x1c)

	)

67 
	#RTC_ALRH
 
	`MMIO32
(
RTC_BASE
 + 0x20)

	)

68 
	#RTC_ALRL
 
	`MMIO32
(
RTC_BASE
 + 0x24)

	)

75 
	#RTC_CRH_OWIE
 (1 << 2)

	)

78 
	#RTC_CRH_ALRIE
 (1 << 1)

	)

81 
	#RTC_CRH_SECIE
 (1 << 0)

	)

88 
	#RTC_CRL_RTOFF
 (1 << 5)

	)

91 
	#RTC_CRL_CNF
 (1 << 4)

	)

94 
	#RTC_CRL_RSF
 (1 << 3)

	)

97 
	#RTC_CRL_OWF
 (1 << 2)

	)

100 
	#RTC_CRL_ALRF
 (1 << 1)

	)

103 
	#RTC_CRL_SECF
 (1 << 0)

	)

144 
	mRTC_SEC
,

146 
	mRTC_ALR
,

148 
	mRTC_OW
,

149 } 
	tπcÊag_t
;

153 
BEGIN_DECLS


155 
πc_awake_‰om_off
(
rcc_osc
 
˛ock_sour˚
);

156 
πc_íãr_c⁄fig_mode
();

157 
πc_exô_c⁄fig_mode
();

158 
πc_£t_Æ¨m_time
(
uöt32_t
 
Æ¨m_time
);

159 
πc_íabÀ_Æ¨m
();

160 
πc_dißbÀ_Æ¨m
();

161 
πc_£t_¥esˇÀ_vÆ
(
uöt32_t
 
¥esˇÀ_vÆ
);

162 
uöt32_t
 
πc_gë_cou¡î_vÆ
();

163 
uöt32_t
 
πc_gë_¥esˇÀ_div_vÆ
();

164 
uöt32_t
 
πc_gë_Æ¨m_vÆ
();

165 
πc_£t_cou¡î_vÆ
(
uöt32_t
 
cou¡î_vÆ
);

166 
πc_öãºu±_íabÀ
(
πcÊag_t
 
Êag_vÆ
);

167 
πc_öãºu±_dißbÀ
(
πcÊag_t
 
Êag_vÆ
);

168 
πc_˛ór_Êag
(
πcÊag_t
 
Êag_vÆ
);

169 
uöt32_t
 
πc_check_Êag
(
πcÊag_t
 
Êag_vÆ
);

170 
πc_awake_‰om_°™dby
();

171 
πc_auto_awake
(
rcc_osc
 
˛ock_sour˚
, 
uöt32_t
 
¥esˇÀ_vÆ
);

173 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f1/spi.h

31 #i‚de‡
LIBOPENCM3_SPI_H


32 
	#LIBOPENCM3_SPI_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_v1.h
>

	@libopencm3/include/libopencm3/stm32/f1/st_usbfs.h

21 #i‚de‡
LIBOPENCM3_ST_USBFS_H


22 #îr‹ 
Do
 
nŸ
 
ö˛ude
 
dúe˘ly
 !

25 
	~<lib›ícm3/°m32/comm⁄/°_usbfs_v1.h
>

	@libopencm3/include/libopencm3/stm32/f1/timer.h

35 #i‚de‡
LIBOPENCM3_TIMER_H


36 
	#LIBOPENCM3_TIMER_H


	)

38 
	~<lib›ícm3/°m32/comm⁄/timî_comm⁄_Æl.h
>

41 
	etim_ic_pﬁ
 {

42 
	mTIM_IC_RISING
,

43 
	mTIM_IC_FALLING
,

48 
BEGIN_DECLS


50 
timî_ic_£t_pﬁ¨ôy
(
uöt32_t
 
timî
,

51 
tim_ic_id
 
ic
,

52 
tim_ic_pﬁ
 
pﬁ
);

54 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f1/usart.h

31 #i‚de‡
LIBOPENCM3_USART_H


32 
	#LIBOPENCM3_USART_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_f124.h
>

	@libopencm3/include/libopencm3/stm32/f2/crc.h

33 #i‚de‡
LIBOPENCM3_CRC_H


34 
	#LIBOPENCM3_CRC_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/¸c_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f2/crypto.h

31 #i‚de‡
LIBOPENCM3_CRYPTO_H


32 
	#LIBOPENCM3_CRYPTO_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/¸y±o_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f2/dac.h

31 #i‚de‡
LIBOPENCM3_DAC_H


32 
	#LIBOPENCM3_DAC_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dac_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f2/dma.h

31 #i‚de‡
LIBOPENCM3_DMA_H


32 
	#LIBOPENCM3_DMA_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dma_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f2/doc-stm32f2.h

	@libopencm3/include/libopencm3/stm32/f2/exti.h

36 #i‚de‡
LIBOPENCM3_EXTI_H


37 
	#LIBOPENCM3_EXTI_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/exti_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f2/flash.h

31 #i‚de‡
LIBOPENCM3_FLASH_H


32 
	#LIBOPENCM3_FLASH_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/Êash_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f2/gpio.h

31 #i‚de‡
LIBOPENCM3_GPIO_H


32 
	#LIBOPENCM3_GPIO_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f2/hash.h

31 #i‚de‡
LIBOPENCM3_HASH_H


32 
	#LIBOPENCM3_HASH_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/hash_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f2/i2c.h

31 #i‚de‡
LIBOPENCM3_I2C_H


32 
	#LIBOPENCM3_I2C_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/i2c_comm⁄_v1.h
>

38 
	#I2C3
 
I2C3_BASE


	)

	@libopencm3/include/libopencm3/stm32/f2/iwdg.h

33 #i‚de‡
LIBOPENCM3_IWDG_H


34 
	#LIBOPENCM3_IWDG_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/iwdg_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f2/memorymap.h

20 #i‚de‡
LIBOPENCM3_MEMORYMAP_H


21 
	#LIBOPENCM3_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

28 
	#PERIPH_BASE
 (0x40000000U)

	)

29 
	#PERIPH_BASE_APB1
 (
PERIPH_BASE
 + 0x00000)

	)

30 
	#PERIPH_BASE_APB2
 (
PERIPH_BASE
 + 0x10000)

	)

31 
	#PERIPH_BASE_AHB1
 (
PERIPH_BASE
 + 0x20000)

	)

32 
	#PERIPH_BASE_AHB2
 (0x50000000U)

	)

33 
	#PERIPH_BASE_AHB3
 (0x60000000U)

	)

38 
	#TIM2_BASE
 (
PERIPH_BASE_APB1
 + 0x0000)

	)

39 
	#TIM3_BASE
 (
PERIPH_BASE_APB1
 + 0x0400)

	)

40 
	#TIM4_BASE
 (
PERIPH_BASE_APB1
 + 0x0800)

	)

41 
	#TIM5_BASE
 (
PERIPH_BASE_APB1
 + 0x0c00)

	)

42 
	#TIM6_BASE
 (
PERIPH_BASE_APB1
 + 0x1000)

	)

43 
	#TIM7_BASE
 (
PERIPH_BASE_APB1
 + 0x1400)

	)

44 
	#TIM12_BASE
 (
PERIPH_BASE_APB1
 + 0x1800)

	)

45 
	#TIM13_BASE
 (
PERIPH_BASE_APB1
 + 0x1c00)

	)

46 
	#TIM14_BASE
 (
PERIPH_BASE_APB1
 + 0x2000)

	)

48 
	#RTC_BASE
 (
PERIPH_BASE_APB1
 + 0x2800)

	)

49 
	#WWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x2c00)

	)

50 
	#IWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x3000)

	)

52 
	#SPI2_BASE
 (
PERIPH_BASE_APB1
 + 0x3800)

	)

53 
	#SPI3_BASE
 (
PERIPH_BASE_APB1
 + 0x3c00)

	)

55 
	#USART2_BASE
 (
PERIPH_BASE_APB1
 + 0x4400)

	)

56 
	#USART3_BASE
 (
PERIPH_BASE_APB1
 + 0x4800)

	)

57 
	#UART4_BASE
 (
PERIPH_BASE_APB1
 + 0x4c00)

	)

58 
	#UART5_BASE
 (
PERIPH_BASE_APB1
 + 0x5000)

	)

59 
	#I2C1_BASE
 (
PERIPH_BASE_APB1
 + 0x5400)

	)

60 
	#I2C2_BASE
 (
PERIPH_BASE_APB1
 + 0x5800)

	)

61 
	#I2C3_BASE
 (
PERIPH_BASE_APB1
 + 0x5C00)

	)

63 
	#BX_CAN1_BASE
 (
PERIPH_BASE_APB1
 + 0x6400)

	)

64 
	#BX_CAN2_BASE
 (
PERIPH_BASE_APB1
 + 0x6800)

	)

66 
	#POWER_CONTROL_BASE
 (
PERIPH_BASE_APB1
 + 0x7000)

	)

67 
	#DAC_BASE
 (
PERIPH_BASE_APB1
 + 0x7400)

	)

71 
	#TIM1_BASE
 (
PERIPH_BASE_APB2
 + 0x0000)

	)

72 
	#TIM8_BASE
 (
PERIPH_BASE_APB2
 + 0x0400)

	)

74 
	#USART1_BASE
 (
PERIPH_BASE_APB2
 + 0x1000)

	)

75 
	#USART6_BASE
 (
PERIPH_BASE_APB2
 + 0x1400)

	)

77 
	#ADC1_BASE
 (
PERIPH_BASE_APB2
 + 0x2000)

	)

78 
	#ADC2_BASE
 (
PERIPH_BASE_APB2
 + 0x2000)

	)

79 
	#ADC3_BASE
 (
PERIPH_BASE_APB2
 + 0x2000)

	)

81 
	#SDIO_BASE
 (
PERIPH_BASE_APB2
 + 0x2C00)

	)

83 
	#SPI1_BASE
 (
PERIPH_BASE_APB2
 + 0x3000)

	)

85 
	#SYSCFG_BASE
 (
PERIPH_BASE_APB2
 + 0x3800)

	)

86 
	#EXTI_BASE
 (
PERIPH_BASE_APB2
 + 0x3C00)

	)

87 
	#TIM9_BASE
 (
PERIPH_BASE_APB2
 + 0x4000)

	)

88 
	#TIM10_BASE
 (
PERIPH_BASE_APB2
 + 0x4400)

	)

89 
	#TIM11_BASE
 (
PERIPH_BASE_APB2
 + 0x4800)

	)

93 
	#GPIO_PORT_A_BASE
 (
PERIPH_BASE_AHB1
 + 0x0000)

	)

94 
	#GPIO_PORT_B_BASE
 (
PERIPH_BASE_AHB1
 + 0x0400)

	)

95 
	#GPIO_PORT_C_BASE
 (
PERIPH_BASE_AHB1
 + 0x0800)

	)

96 
	#GPIO_PORT_D_BASE
 (
PERIPH_BASE_AHB1
 + 0x0C00)

	)

97 
	#GPIO_PORT_E_BASE
 (
PERIPH_BASE_AHB1
 + 0x1000)

	)

98 
	#GPIO_PORT_F_BASE
 (
PERIPH_BASE_AHB1
 + 0x1400)

	)

99 
	#GPIO_PORT_G_BASE
 (
PERIPH_BASE_AHB1
 + 0x1800)

	)

100 
	#GPIO_PORT_H_BASE
 (
PERIPH_BASE_AHB1
 + 0x1C00)

	)

101 
	#GPIO_PORT_I_BASE
 (
PERIPH_BASE_AHB1
 + 0x2000)

	)

103 
	#CRC_BASE
 (
PERIPH_BASE_AHB1
 + 0x3000)

	)

105 
	#RCC_BASE
 (
PERIPH_BASE_AHB1
 + 0x3800)

	)

106 
	#FLASH_MEM_INTERFACE_BASE
 (
PERIPH_BASE_AHB1
 + 0x3C00)

	)

107 
	#BKPSRAM_BASE
 (
PERIPH_BASE_AHB1
 + 0x4000)

	)

109 
	#DMA1_BASE
 (
PERIPH_BASE_AHB1
 + 0x6000)

	)

110 
	#DMA2_BASE
 (
PERIPH_BASE_AHB1
 + 0x6400)

	)

112 
	#ETHERNET_BASE
 (
PERIPH_BASE_AHB1
 + 0x8000)

	)

114 
	#USB_OTG_HS_BASE
 (
PERIPH_BASE_AHB1
 + 0x20000)

	)

118 
	#USB_OTG_FS_BASE
 (
PERIPH_BASE_AHB2
 + 0x0000)

	)

120 
	#DCMI_BASE
 (
PERIPH_BASE_AHB2
 + 0x50000)

	)

122 
	#CRYP_BASE
 (
PERIPH_BASE_AHB2
 + 0x60000)

	)

123 
	#HASH_BASE
 (
PERIPH_BASE_AHB2
 + 0x60400)

	)

124 
	#RNG_BASE
 (
PERIPH_BASE_AHB2
 + 0x60800)

	)

128 
	#FSMC_BASE
 (
PERIPH_BASE_AHB3
 + 0x40000000)

	)

131 
	#DBGMCU_BASE
 (
PPBI_BASE
 + 0x00042000)

	)

134 
	#DESIG_FLASH_SIZE_BASE
 (0x1FFF7A22U)

	)

135 
	#DESIG_UNIQUE_ID_BASE
 (0x1FFF7A10U)

	)

136 
	#DESIG_UNIQUE_ID0
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
)

	)

137 
	#DESIG_UNIQUE_ID1
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 4)

	)

138 
	#DESIG_UNIQUE_ID2
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 8)

	)

	@libopencm3/include/libopencm3/stm32/f2/nvic.h

6 #i‚de‡
LIBOPENCM3_STM32_F2_NVIC_H


7 
	#LIBOPENCM3_STM32_F2_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_NVIC_WWDG_IRQ
 0

	)

17 
	#NVIC_PVD_IRQ
 1

	)

18 
	#NVIC_TAMP_STAMP_IRQ
 2

	)

19 
	#NVIC_RTC_WKUP_IRQ
 3

	)

20 
	#NVIC_FLASH_IRQ
 4

	)

21 
	#NVIC_RCC_IRQ
 5

	)

22 
	#NVIC_EXTI0_IRQ
 6

	)

23 
	#NVIC_EXTI1_IRQ
 7

	)

24 
	#NVIC_EXTI2_IRQ
 8

	)

25 
	#NVIC_EXTI3_IRQ
 9

	)

26 
	#NVIC_EXTI4_IRQ
 10

	)

27 
	#NVIC_DMA1_STREAM0_IRQ
 11

	)

28 
	#NVIC_DMA1_STREAM1_IRQ
 12

	)

29 
	#NVIC_DMA1_STREAM2_IRQ
 13

	)

30 
	#NVIC_DMA1_STREAM3_IRQ
 14

	)

31 
	#NVIC_DMA1_STREAM4_IRQ
 15

	)

32 
	#NVIC_DMA1_STREAM5_IRQ
 16

	)

33 
	#NVIC_DMA1_STREAM6_IRQ
 17

	)

34 
	#NVIC_ADC_IRQ
 18

	)

35 
	#NVIC_CAN1_TX_IRQ
 19

	)

36 
	#NVIC_CAN1_RX0_IRQ
 20

	)

37 
	#NVIC_CAN1_RX1_IRQ
 21

	)

38 
	#NVIC_CAN1_SCE_IRQ
 22

	)

39 
	#NVIC_EXTI9_5_IRQ
 23

	)

40 
	#NVIC_TIM1_BRK_TIM9_IRQ
 24

	)

41 
	#NVIC_TIM1_UP_TIM10_IRQ
 25

	)

42 
	#NVIC_TIM1_TRG_COM_TIM11_IRQ
 26

	)

43 
	#NVIC_TIM1_CC_IRQ
 27

	)

44 
	#NVIC_TIM2_IRQ
 28

	)

45 
	#NVIC_TIM3_IRQ
 29

	)

46 
	#NVIC_TIM4_IRQ
 30

	)

47 
	#NVIC_I2C1_EV_IRQ
 31

	)

48 
	#NVIC_I2C1_ER_IRQ
 32

	)

49 
	#NVIC_I2C2_EV_IRQ
 33

	)

50 
	#NVIC_I2C2_ER_IRQ
 34

	)

51 
	#NVIC_SPI1_IRQ
 35

	)

52 
	#NVIC_SPI2_IRQ
 36

	)

53 
	#NVIC_USART1_IRQ
 37

	)

54 
	#NVIC_USART2_IRQ
 38

	)

55 
	#NVIC_USART3_IRQ
 39

	)

56 
	#NVIC_EXTI15_10_IRQ
 40

	)

57 
	#NVIC_RTC_ALARM_IRQ
 41

	)

58 
	#NVIC_USB_FS_WKUP_IRQ
 42

	)

59 
	#NVIC_TIM8_BRK_TIM12_IRQ
 43

	)

60 
	#NVIC_TIM8_UP_TIM13_IRQ
 44

	)

61 
	#NVIC_TIM8_TRG_COM_TIM14_IRQ
 45

	)

62 
	#NVIC_TIM8_CC_IRQ
 46

	)

63 
	#NVIC_DMA1_STREAM7_IRQ
 47

	)

64 
	#NVIC_FSMC_IRQ
 48

	)

65 
	#NVIC_SDIO_IRQ
 49

	)

66 
	#NVIC_TIM5_IRQ
 50

	)

67 
	#NVIC_SPI3_IRQ
 51

	)

68 
	#NVIC_UART4_IRQ
 52

	)

69 
	#NVIC_UART5_IRQ
 53

	)

70 
	#NVIC_TIM6_DAC_IRQ
 54

	)

71 
	#NVIC_TIM7_IRQ
 55

	)

72 
	#NVIC_DMA2_STREAM0_IRQ
 56

	)

73 
	#NVIC_DMA2_STREAM1_IRQ
 57

	)

74 
	#NVIC_DMA2_STREAM2_IRQ
 58

	)

75 
	#NVIC_DMA2_STREAM3_IRQ
 59

	)

76 
	#NVIC_DMA2_STREAM4_IRQ
 60

	)

77 
	#NVIC_ETH_IRQ
 61

	)

78 
	#NVIC_ETH_WKUP_IRQ
 62

	)

79 
	#NVIC_CAN2_TX_IRQ
 63

	)

80 
	#NVIC_CAN2_RX0_IRQ
 64

	)

81 
	#NVIC_CAN2_RX1_IRQ
 65

	)

82 
	#NVIC_CAN2_SCE_IRQ
 66

	)

83 
	#NVIC_OTG_FS_IRQ
 67

	)

84 
	#NVIC_DMA2_STREAM5_IRQ
 68

	)

85 
	#NVIC_DMA2_STREAM6_IRQ
 69

	)

86 
	#NVIC_DMA2_STREAM7_IRQ
 70

	)

87 
	#NVIC_USART6_IRQ
 71

	)

88 
	#NVIC_I2C3_EV_IRQ
 72

	)

89 
	#NVIC_I2C3_ER_IRQ
 73

	)

90 
	#NVIC_OTG_HS_EP1_OUT_IRQ
 74

	)

91 
	#NVIC_OTG_HS_EP1_IN_IRQ
 75

	)

92 
	#NVIC_OTG_HS_WKUP_IRQ
 76

	)

93 
	#NVIC_OTG_HS_IRQ
 77

	)

94 
	#NVIC_DCMI_IRQ
 78

	)

95 
	#NVIC_CRYP_IRQ
 79

	)

96 
	#NVIC_HASH_RNG_IRQ
 80

	)

98 
	#NVIC_IRQ_COUNT
 81

	)

107 
BEGIN_DECLS


109 
nvic_wwdg_i§
();

110 
pvd_i§
();

111 
èmp_°amp_i§
();

112 
πc_wkup_i§
();

113 
Êash_i§
();

114 
rcc_i§
();

115 
exti0_i§
();

116 
exti1_i§
();

117 
exti2_i§
();

118 
exti3_i§
();

119 
exti4_i§
();

120 
dma1_°ªam0_i§
();

121 
dma1_°ªam1_i§
();

122 
dma1_°ªam2_i§
();

123 
dma1_°ªam3_i§
();

124 
dma1_°ªam4_i§
();

125 
dma1_°ªam5_i§
();

126 
dma1_°ªam6_i§
();

127 
adc_i§
();

128 
ˇn1_tx_i§
();

129 
ˇn1_rx0_i§
();

130 
ˇn1_rx1_i§
();

131 
ˇn1_s˚_i§
();

132 
exti9_5_i§
();

133 
tim1_brk_tim9_i§
();

134 
tim1_up_tim10_i§
();

135 
tim1_åg_com_tim11_i§
();

136 
tim1_cc_i§
();

137 
tim2_i§
();

138 
tim3_i§
();

139 
tim4_i§
();

140 
i2c1_ev_i§
();

141 
i2c1_î_i§
();

142 
i2c2_ev_i§
();

143 
i2c2_î_i§
();

144 
•i1_i§
();

145 
•i2_i§
();

146 
ußπ1_i§
();

147 
ußπ2_i§
();

148 
ußπ3_i§
();

149 
exti15_10_i§
();

150 
πc_Æ¨m_i§
();

151 
usb_fs_wkup_i§
();

152 
tim8_brk_tim12_i§
();

153 
tim8_up_tim13_i§
();

154 
tim8_åg_com_tim14_i§
();

155 
tim8_cc_i§
();

156 
dma1_°ªam7_i§
();

157 
fsmc_i§
();

158 
sdio_i§
();

159 
tim5_i§
();

160 
•i3_i§
();

161 
u¨t4_i§
();

162 
u¨t5_i§
();

163 
tim6_dac_i§
();

164 
tim7_i§
();

165 
dma2_°ªam0_i§
();

166 
dma2_°ªam1_i§
();

167 
dma2_°ªam2_i§
();

168 
dma2_°ªam3_i§
();

169 
dma2_°ªam4_i§
();

170 
ëh_i§
();

171 
ëh_wkup_i§
();

172 
ˇn2_tx_i§
();

173 
ˇn2_rx0_i§
();

174 
ˇn2_rx1_i§
();

175 
ˇn2_s˚_i§
();

176 
Ÿg_fs_i§
();

177 
dma2_°ªam5_i§
();

178 
dma2_°ªam6_i§
();

179 
dma2_°ªam7_i§
();

180 
ußπ6_i§
();

181 
i2c3_ev_i§
();

182 
i2c3_î_i§
();

183 
Ÿg_hs_ï1_out_i§
();

184 
Ÿg_hs_ï1_ö_i§
();

185 
Ÿg_hs_wkup_i§
();

186 
Ÿg_hs_i§
();

187 
dcmi_i§
();

188 
¸yp_i§
();

189 
hash_∫g_i§
();

191 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f2/pwr.h

33 #i‚de‡
LIBOPENCM3_PWR_H


34 
	#LIBOPENCM3_PWR_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/pwr_comm⁄_v1.h
>

48 
	#PWR_CR_FPDS
 (1 << 9)

	)

55 
	#PWR_CSR_BRE
 (1 << 9)

	)

	@libopencm3/include/libopencm3/stm32/f2/rcc.h

43 #i‚de‡
LIBOPENCM3_RCC_H


44 
	#LIBOPENCM3_RCC_H


	)

48 
	#RCC_CR
 
	`MMIO32
(
RCC_BASE
 + 0x00)

	)

49 
	#RCC_PLLCFGR
 
	`MMIO32
(
RCC_BASE
 + 0x04)

	)

50 
	#RCC_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x08)

	)

51 
	#RCC_CIR
 
	`MMIO32
(
RCC_BASE
 + 0x0c)

	)

52 
	#RCC_AHB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x10)

	)

53 
	#RCC_AHB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x14)

	)

54 
	#RCC_AHB3RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x18)

	)

56 
	#RCC_APB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x20)

	)

57 
	#RCC_APB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x24)

	)

60 
	#RCC_AHB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x30)

	)

61 
	#RCC_AHB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x34)

	)

62 
	#RCC_AHB3ENR
 
	`MMIO32
(
RCC_BASE
 + 0x38)

	)

64 
	#RCC_APB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x40)

	)

65 
	#RCC_APB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x44)

	)

68 
	#RCC_AHB1LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x50)

	)

69 
	#RCC_AHB2LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x54)

	)

70 
	#RCC_AHB3LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x58)

	)

72 
	#RCC_APB1LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x60)

	)

73 
	#RCC_APB2LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x64)

	)

76 
	#RCC_BDCR
 
	`MMIO32
(
RCC_BASE
 + 0x70)

	)

77 
	#RCC_CSR
 
	`MMIO32
(
RCC_BASE
 + 0x74)

	)

80 
	#RCC_SSCGR
 
	`MMIO32
(
RCC_BASE
 + 0x80)

	)

81 
	#RCC_PLLI2SCFGR
 
	`MMIO32
(
RCC_BASE
 + 0x84)

	)

85 
	#RCC_CR_PLLI2SRDY
 (1 << 27)

	)

86 
	#RCC_CR_PLLI2SON
 (1 << 26)

	)

87 
	#RCC_CR_PLLRDY
 (1 << 25)

	)

88 
	#RCC_CR_PLLON
 (1 << 24)

	)

89 
	#RCC_CR_CSSON
 (1 << 19)

	)

90 
	#RCC_CR_HSEBYP
 (1 << 18)

	)

91 
	#RCC_CR_HSERDY
 (1 << 17)

	)

92 
	#RCC_CR_HSEON
 (1 << 16)

	)

95 
	#RCC_CR_HSIRDY
 (1 << 1)

	)

96 
	#RCC_CR_HSION
 (1 << 0)

	)

101 
	#RCC_PLLCFGR_PLLQ_SHIFT
 24

	)

102 
	#RCC_PLLCFGR_PLLSRC
 (1 << 22)

	)

104 
	#RCC_PLLCFGR_PLLP_SHIFT
 16

	)

106 
	#RCC_PLLCFGR_PLLN_SHIFT
 6

	)

108 
	#RCC_PLLCFGR_PLLM_SHIFT
 0

	)

113 
	#RCC_CFGR_MCO2_SHIFT
 30

	)

114 
	#RCC_CFGR_MCO2_SYSCLK
 0x0

	)

115 
	#RCC_CFGR_MCO2_PLLI2S
 0x1

	)

116 
	#RCC_CFGR_MCO2_HSE
 0x2

	)

117 
	#RCC_CFGR_MCO2_PLL
 0x3

	)

120 
	#RCC_CFGR_MCO2PRE_SHIFT
 27

	)

121 
	#RCC_CFGR_MCO1PRE_SHIFT
 24

	)

122 
	#RCC_CFGR_MCOPRE_DIV_NONE
 0x0

	)

123 
	#RCC_CFGR_MCOPRE_DIV_2
 0x4

	)

124 
	#RCC_CFGR_MCOPRE_DIV_3
 0x5

	)

125 
	#RCC_CFGR_MCOPRE_DIV_4
 0x6

	)

126 
	#RCC_CFGR_MCOPRE_DIV_5
 0x7

	)

129 
	#RCC_CFGR_I2SSRC
 (1 << 23)

	)

132 
	#RCC_CFGR_MCO1_SHIFT
 21

	)

133 
	#RCC_CFGR_MCO1_MASK
 0x3

	)

134 
	#RCC_CFGR_MCO1_HSI
 0x0

	)

135 
	#RCC_CFGR_MCO1_LSE
 0x1

	)

136 
	#RCC_CFGR_MCO1_HSE
 0x2

	)

137 
	#RCC_CFGR_MCO1_PLL
 0x3

	)

138 
	#RCC_CFGR_MCO_SHIFT
 
RCC_CFGR_MCO1_SHIFT


	)

139 
	#RCC_CFGR_MCO_MASK
 
RCC_CFGR_MCO1_MASK


	)

142 
	#RCC_CFGR_RTCPRE_SHIFT
 16

	)

143 
	#RCC_CFGR_RTCPRE_MASK
 0x1f

	)

146 
	#RCC_CFGR_PPRE2_SHIFT
 13

	)

147 
	#RCC_CFGR_PPRE1_SHIFT
 10

	)

148 
	#RCC_CFGR_PPRE_DIV_NONE
 0x0

	)

149 
	#RCC_CFGR_PPRE_DIV_2
 0x4

	)

150 
	#RCC_CFGR_PPRE_DIV_4
 0x5

	)

151 
	#RCC_CFGR_PPRE_DIV_8
 0x6

	)

152 
	#RCC_CFGR_PPRE_DIV_16
 0x7

	)

155 
	#RCC_CFGR_HPRE_SHIFT
 4

	)

156 
	#RCC_CFGR_HPRE_DIV_NONE
 0x0

	)

157 
	#RCC_CFGR_HPRE_DIV_2
 (0x8 + 0)

	)

158 
	#RCC_CFGR_HPRE_DIV_4
 (0x8 + 1)

	)

159 
	#RCC_CFGR_HPRE_DIV_8
 (0x8 + 2)

	)

160 
	#RCC_CFGR_HPRE_DIV_16
 (0x8 + 3)

	)

161 
	#RCC_CFGR_HPRE_DIV_64
 (0x8 + 4)

	)

162 
	#RCC_CFGR_HPRE_DIV_128
 (0x8 + 5)

	)

163 
	#RCC_CFGR_HPRE_DIV_256
 (0x8 + 6)

	)

164 
	#RCC_CFGR_HPRE_DIV_512
 (0x8 + 7)

	)

167 
	#RCC_CFGR_SWS_SHIFT
 2

	)

168 
	#RCC_CFGR_SWS_MASK
 0x3

	)

169 
	#RCC_CFGR_SWS_HSI
 0x0

	)

170 
	#RCC_CFGR_SWS_HSE
 0x1

	)

171 
	#RCC_CFGR_SWS_PLL
 0x2

	)

174 
	#RCC_CFGR_SW_SHIFT
 0

	)

175 
	#RCC_CFGR_SW_HSI
 0x0

	)

176 
	#RCC_CFGR_SW_HSE
 0x1

	)

177 
	#RCC_CFGR_SW_PLL
 0x2

	)

182 
	#RCC_CIR_CSSC
 (1 << 23)

	)

185 
	#RCC_CIR_PLLI2SRDYC
 (1 << 21)

	)

186 
	#RCC_CIR_PLLRDYC
 (1 << 20)

	)

187 
	#RCC_CIR_HSERDYC
 (1 << 19)

	)

188 
	#RCC_CIR_HSIRDYC
 (1 << 18)

	)

189 
	#RCC_CIR_LSERDYC
 (1 << 17)

	)

190 
	#RCC_CIR_LSIRDYC
 (1 << 16)

	)

193 
	#RCC_CIR_PLLI2SRDYIE
 (1 << 13)

	)

194 
	#RCC_CIR_PLLRDYIE
 (1 << 12)

	)

195 
	#RCC_CIR_HSERDYIE
 (1 << 11)

	)

196 
	#RCC_CIR_HSIRDYIE
 (1 << 10)

	)

197 
	#RCC_CIR_LSERDYIE
 (1 << 9)

	)

198 
	#RCC_CIR_LSIRDYIE
 (1 << 8)

	)

201 
	#RCC_CIR_CSSF
 (1 << 7)

	)

204 
	#RCC_CIR_PLLI2SRDYF
 (1 << 5)

	)

205 
	#RCC_CIR_PLLRDYF
 (1 << 4)

	)

206 
	#RCC_CIR_HSERDYF
 (1 << 3)

	)

207 
	#RCC_CIR_HSIRDYF
 (1 << 2)

	)

208 
	#RCC_CIR_LSERDYF
 (1 << 1)

	)

209 
	#RCC_CIR_LSIRDYF
 (1 << 0)

	)

213 
	#RCC_AHB1RSTR_OTGHSRST
 (1 << 29)

	)

214 
	#RCC_AHB1RSTR_ETHMACRST
 (1 << 25)

	)

215 
	#RCC_AHB1RSTR_DMA2RST
 (1 << 22)

	)

216 
	#RCC_AHB1RSTR_DMA1RST
 (1 << 21)

	)

217 
	#RCC_AHB1RSTR_CRCRST
 (1 << 12)

	)

218 
	#RCC_AHB1RSTR_GPIOIRST
 (1 << 8)

	)

219 
	#RCC_AHB1RSTR_GPIOHRST
 (1 << 7)

	)

220 
	#RCC_AHB1RSTR_GPIOGRST
 (1 << 6)

	)

221 
	#RCC_AHB1RSTR_GPIOFRST
 (1 << 5)

	)

222 
	#RCC_AHB1RSTR_GPIOERST
 (1 << 4)

	)

223 
	#RCC_AHB1RSTR_GPIODRST
 (1 << 3)

	)

224 
	#RCC_AHB1RSTR_GPIOCRST
 (1 << 2)

	)

225 
	#RCC_AHB1RSTR_GPIOBRST
 (1 << 1)

	)

226 
	#RCC_AHB1RSTR_GPIOARST
 (1 << 0)

	)

232 
	#RCC_AHB1RSTR_IOPIRST
 
RCC_AHB1RSTR_GPIOIRST


	)

233 
	#RCC_AHB1RSTR_IOPHRST
 
RCC_AHB1RSTR_GPIOHRST


	)

234 
	#RCC_AHB1RSTR_IOPGRST
 
RCC_AHB1RSTR_GPIOGRST


	)

235 
	#RCC_AHB1RSTR_IOPFRST
 
RCC_AHB1RSTR_GPIOFRST


	)

236 
	#RCC_AHB1RSTR_IOPERST
 
RCC_AHB1RSTR_GPIOERST


	)

237 
	#RCC_AHB1RSTR_IOPDRST
 
RCC_AHB1RSTR_GPIODRST


	)

238 
	#RCC_AHB1RSTR_IOPCRST
 
RCC_AHB1RSTR_GPIOCRST


	)

239 
	#RCC_AHB1RSTR_IOPBRST
 
RCC_AHB1RSTR_GPIOBRST


	)

240 
	#RCC_AHB1RSTR_IOPARST
 
RCC_AHB1RSTR_GPIOARST


	)

245 
	#RCC_AHB2RSTR_OTGFSRST
 (1 << 7)

	)

246 
	#RCC_AHB2RSTR_RNGRST
 (1 << 6)

	)

247 
	#RCC_AHB2RSTR_HASHRST
 (1 << 5)

	)

248 
	#RCC_AHB2RSTR_CRYPRST
 (1 << 4)

	)

249 
	#RCC_AHB2RSTR_DCMIRST
 (1 << 0)

	)

253 
	#RCC_AHB3RSTR_FSMCRST
 (1 << 0)

	)

257 
	#RCC_APB1RSTR_DACRST
 (1 << 29)

	)

258 
	#RCC_APB1RSTR_PWRRST
 (1 << 28)

	)

259 
	#RCC_APB1RSTR_CAN2RST
 (1 << 26)

	)

260 
	#RCC_APB1RSTR_CAN1RST
 (1 << 25)

	)

261 
	#RCC_APB1RSTR_I2C3RST
 (1 << 23)

	)

262 
	#RCC_APB1RSTR_I2C2RST
 (1 << 22)

	)

263 
	#RCC_APB1RSTR_I2C1RST
 (1 << 21)

	)

264 
	#RCC_APB1RSTR_UART5RST
 (1 << 20)

	)

265 
	#RCC_APB1RSTR_UART4RST
 (1 << 19)

	)

266 
	#RCC_APB1RSTR_USART3RST
 (1 << 18)

	)

267 
	#RCC_APB1RSTR_USART2RST
 (1 << 17)

	)

268 
	#RCC_APB1RSTR_SPI3RST
 (1 << 15)

	)

269 
	#RCC_APB1RSTR_SPI2RST
 (1 << 14)

	)

270 
	#RCC_APB1RSTR_WWDGRST
 (1 << 11)

	)

271 
	#RCC_APB1RSTR_TIM14RST
 (1 << 8)

	)

272 
	#RCC_APB1RSTR_TIM13RST
 (1 << 7)

	)

273 
	#RCC_APB1RSTR_TIM12RST
 (1 << 6)

	)

274 
	#RCC_APB1RSTR_TIM7RST
 (1 << 5)

	)

275 
	#RCC_APB1RSTR_TIM6RST
 (1 << 4)

	)

276 
	#RCC_APB1RSTR_TIM5RST
 (1 << 3)

	)

277 
	#RCC_APB1RSTR_TIM4RST
 (1 << 2)

	)

278 
	#RCC_APB1RSTR_TIM3RST
 (1 << 1)

	)

279 
	#RCC_APB1RSTR_TIM2RST
 (1 << 0)

	)

283 
	#RCC_APB2RSTR_TIM11RST
 (1 << 18)

	)

284 
	#RCC_APB2RSTR_TIM10RST
 (1 << 17)

	)

285 
	#RCC_APB2RSTR_TIM9RST
 (1 << 16)

	)

286 
	#RCC_APB2RSTR_SYSCFGRST
 (1 << 14)

	)

287 
	#RCC_APB2RSTR_SPI1RST
 (1 << 12)

	)

288 
	#RCC_APB2RSTR_SDIORST
 (1 << 11)

	)

289 
	#RCC_APB2RSTR_ADCRST
 (1 << 8)

	)

290 
	#RCC_APB2RSTR_USART6RST
 (1 << 5)

	)

291 
	#RCC_APB2RSTR_USART1RST
 (1 << 4)

	)

292 
	#RCC_APB2RSTR_TIM8RST
 (1 << 1)

	)

293 
	#RCC_APB2RSTR_TIM1RST
 (1 << 0)

	)

297 
	#RCC_AHB1ENR_OTGHSULPIEN
 (1 << 30)

	)

298 
	#RCC_AHB1ENR_OTGHSEN
 (1 << 29)

	)

299 
	#RCC_AHB1ENR_ETHMACPTPEN
 (1 << 28)

	)

300 
	#RCC_AHB1ENR_ETHMACRXEN
 (1 << 27)

	)

301 
	#RCC_AHB1ENR_ETHMACTXEN
 (1 << 26)

	)

302 
	#RCC_AHB1ENR_ETHMACEN
 (1 << 25)

	)

303 
	#RCC_AHB1ENR_DMA2EN
 (1 << 22)

	)

304 
	#RCC_AHB1ENR_DMA1EN
 (1 << 21)

	)

305 
	#RCC_AHB1ENR_BKPSRAMEN
 (1 << 18)

	)

306 
	#RCC_AHB1ENR_CRCEN
 (1 << 12)

	)

307 
	#RCC_AHB1ENR_GPIOIEN
 (1 << 8)

	)

308 
	#RCC_AHB1ENR_GPIOHEN
 (1 << 7)

	)

309 
	#RCC_AHB1ENR_GPIOGEN
 (1 << 6)

	)

310 
	#RCC_AHB1ENR_GPIOFEN
 (1 << 5)

	)

311 
	#RCC_AHB1ENR_GPIOEEN
 (1 << 4)

	)

312 
	#RCC_AHB1ENR_GPIODEN
 (1 << 3)

	)

313 
	#RCC_AHB1ENR_GPIOCEN
 (1 << 2)

	)

314 
	#RCC_AHB1ENR_GPIOBEN
 (1 << 1)

	)

315 
	#RCC_AHB1ENR_GPIOAEN
 (1 << 0)

	)

321 
	#RCC_AHB1ENR_IOPIEN
 
RCC_AHB1ENR_GPIOIEN


	)

322 
	#RCC_AHB1ENR_IOPHEN
 
RCC_AHB1ENR_GPIOHEN


	)

323 
	#RCC_AHB1ENR_IOPGEN
 
RCC_AHB1ENR_GPIOGEN


	)

324 
	#RCC_AHB1ENR_IOPFEN
 
RCC_AHB1ENR_GPIOFEN


	)

325 
	#RCC_AHB1ENR_IOPEEN
 
RCC_AHB1ENR_GPIOEEN


	)

326 
	#RCC_AHB1ENR_IOPDEN
 
RCC_AHB1ENR_GPIODEN


	)

327 
	#RCC_AHB1ENR_IOPCEN
 
RCC_AHB1ENR_GPIOCEN


	)

328 
	#RCC_AHB1ENR_IOPBEN
 
RCC_AHB1ENR_GPIOBEN


	)

329 
	#RCC_AHB1ENR_IOPAEN
 
RCC_AHB1ENR_GPIOAEN


	)

334 
	#RCC_AHB2ENR_OTGFSEN
 (1 << 7)

	)

335 
	#RCC_AHB2ENR_RNGEN
 (1 << 6)

	)

336 
	#RCC_AHB2ENR_HASHEN
 (1 << 5)

	)

337 
	#RCC_AHB2ENR_CRYPEN
 (1 << 4)

	)

338 
	#RCC_AHB2ENR_DCMIEN
 (1 << 0)

	)

342 
	#RCC_AHB3ENR_FSMCEN
 (1 << 0)

	)

346 
	#RCC_APB1ENR_DACEN
 (1 << 29)

	)

347 
	#RCC_APB1ENR_PWREN
 (1 << 28)

	)

348 
	#RCC_APB1ENR_CAN2EN
 (1 << 26)

	)

349 
	#RCC_APB1ENR_CAN1EN
 (1 << 25)

	)

350 
	#RCC_APB1ENR_I2C3EN
 (1 << 23)

	)

351 
	#RCC_APB1ENR_I2C2EN
 (1 << 22)

	)

352 
	#RCC_APB1ENR_I2C1EN
 (1 << 21)

	)

353 
	#RCC_APB1ENR_UART5EN
 (1 << 20)

	)

354 
	#RCC_APB1ENR_UART4EN
 (1 << 19)

	)

355 
	#RCC_APB1ENR_USART3EN
 (1 << 18)

	)

356 
	#RCC_APB1ENR_USART2EN
 (1 << 17)

	)

357 
	#RCC_APB1ENR_SPI3EN
 (1 << 15)

	)

358 
	#RCC_APB1ENR_SPI2EN
 (1 << 14)

	)

359 
	#RCC_APB1ENR_WWDGEN
 (1 << 11)

	)

360 
	#RCC_APB1ENR_TIM14EN
 (1 << 8)

	)

361 
	#RCC_APB1ENR_TIM13EN
 (1 << 7)

	)

362 
	#RCC_APB1ENR_TIM12EN
 (1 << 6)

	)

363 
	#RCC_APB1ENR_TIM7EN
 (1 << 5)

	)

364 
	#RCC_APB1ENR_TIM6EN
 (1 << 4)

	)

365 
	#RCC_APB1ENR_TIM5EN
 (1 << 3)

	)

366 
	#RCC_APB1ENR_TIM4EN
 (1 << 2)

	)

367 
	#RCC_APB1ENR_TIM3EN
 (1 << 1)

	)

368 
	#RCC_APB1ENR_TIM2EN
 (1 << 0)

	)

372 
	#RCC_APB2ENR_TIM11EN
 (1 << 18)

	)

373 
	#RCC_APB2ENR_TIM10EN
 (1 << 17)

	)

374 
	#RCC_APB2ENR_TIM9EN
 (1 << 16)

	)

375 
	#RCC_APB2ENR_SYSCFGEN
 (1 << 14)

	)

376 
	#RCC_APB2ENR_SPI1EN
 (1 << 12)

	)

377 
	#RCC_APB2ENR_SDIOEN
 (1 << 11)

	)

378 
	#RCC_APB2ENR_ADC3EN
 (1 << 10)

	)

379 
	#RCC_APB2ENR_ADC2EN
 (1 << 9)

	)

380 
	#RCC_APB2ENR_ADC1EN
 (1 << 8)

	)

381 
	#RCC_APB2ENR_USART6EN
 (1 << 5)

	)

382 
	#RCC_APB2ENR_USART1EN
 (1 << 4)

	)

383 
	#RCC_APB2ENR_TIM8EN
 (1 << 1)

	)

384 
	#RCC_APB2ENR_TIM1EN
 (1 << 0)

	)

388 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 (1 << 30)

	)

389 
	#RCC_AHB1LPENR_OTGHSLPEN
 (1 << 29)

	)

390 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 (1 << 28)

	)

391 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 (1 << 27)

	)

392 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 (1 << 26)

	)

393 
	#RCC_AHB1LPENR_ETHMACLPEN
 (1 << 25)

	)

394 
	#RCC_AHB1LPENR_DMA2LPEN
 (1 << 22)

	)

395 
	#RCC_AHB1LPENR_DMA1LPEN
 (1 << 21)

	)

396 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 (1 << 18)

	)

397 
	#RCC_AHB1LPENR_SRAM2LPEN
 (1 << 17)

	)

398 
	#RCC_AHB1LPENR_SRAM1LPEN
 (1 << 16)

	)

399 
	#RCC_AHB1LPENR_FLITFLPEN
 (1 << 15)

	)

400 
	#RCC_AHB1LPENR_CRCLPEN
 (1 << 12)

	)

401 
	#RCC_AHB1LPENR_GPIOILPEN
 (1 << 8)

	)

402 
	#RCC_AHB1LPENR_GPIOHLPEN
 (1 << 7)

	)

403 
	#RCC_AHB1LPENR_GPIOGLPEN
 (1 << 6)

	)

404 
	#RCC_AHB1LPENR_GPIOFLPEN
 (1 << 5)

	)

405 
	#RCC_AHB1LPENR_GPIOELPEN
 (1 << 4)

	)

406 
	#RCC_AHB1LPENR_GPIODLPEN
 (1 << 3)

	)

407 
	#RCC_AHB1LPENR_GPIOCLPEN
 (1 << 2)

	)

408 
	#RCC_AHB1LPENR_GPIOBLPEN
 (1 << 1)

	)

409 
	#RCC_AHB1LPENR_GPIOALPEN
 (1 << 0)

	)

415 
	#RCC_AHB1LPENR_IOPILPEN
 
RCC_AHB1LPENR_GPIOILPEN


	)

416 
	#RCC_AHB1LPENR_IOPHLPEN
 
RCC_AHB1LPENR_GPIOHLPEN


	)

417 
	#RCC_AHB1LPENR_IOPGLPEN
 
RCC_AHB1LPENR_GPIOGLPEN


	)

418 
	#RCC_AHB1LPENR_IOPFLPEN
 
RCC_AHB1LPENR_GPIOFLPEN


	)

419 
	#RCC_AHB1LPENR_IOPELPEN
 
RCC_AHB1LPENR_GPIOELPEN


	)

420 
	#RCC_AHB1LPENR_IOPDLPEN
 
RCC_AHB1LPENR_GPIODLPEN


	)

421 
	#RCC_AHB1LPENR_IOPCLPEN
 
RCC_AHB1LPENR_GPIOCLPEN


	)

422 
	#RCC_AHB1LPENR_IOPBLPEN
 
RCC_AHB1LPENR_GPIOBLPEN


	)

423 
	#RCC_AHB1LPENR_IOPALPEN
 
RCC_AHB1LPENR_GPIOALPEN


	)

428 
	#RCC_AHB2LPENR_OTGFSLPEN
 (1 << 7)

	)

429 
	#RCC_AHB2LPENR_RNGLPEN
 (1 << 6)

	)

430 
	#RCC_AHB2LPENR_HASHLPEN
 (1 << 5)

	)

431 
	#RCC_AHB2LPENR_CRYPLPEN
 (1 << 4)

	)

432 
	#RCC_AHB2LPENR_DCMILPEN
 (1 << 0)

	)

436 
	#RCC_AHB3LPENR_FSMCLPEN
 (1 << 0)

	)

440 
	#RCC_APB1LPENR_DACLPEN
 (1 << 29)

	)

441 
	#RCC_APB1LPENR_PWRLPEN
 (1 << 28)

	)

442 
	#RCC_APB1LPENR_CAN2LPEN
 (1 << 26)

	)

443 
	#RCC_APB1LPENR_CAN1LPEN
 (1 << 25)

	)

444 
	#RCC_APB1LPENR_I2C3LPEN
 (1 << 23)

	)

445 
	#RCC_APB1LPENR_I2C2LPEN
 (1 << 22)

	)

446 
	#RCC_APB1LPENR_I2C1LPEN
 (1 << 21)

	)

447 
	#RCC_APB1LPENR_UART5LPEN
 (1 << 20)

	)

448 
	#RCC_APB1LPENR_UART4LPEN
 (1 << 19)

	)

449 
	#RCC_APB1LPENR_USART3LPEN
 (1 << 18)

	)

450 
	#RCC_APB1LPENR_USART2LPEN
 (1 << 17)

	)

451 
	#RCC_APB1LPENR_SPI3LPEN
 (1 << 15)

	)

452 
	#RCC_APB1LPENR_SPI2LPEN
 (1 << 14)

	)

453 
	#RCC_APB1LPENR_WWDGLPEN
 (1 << 11)

	)

454 
	#RCC_APB1LPENR_TIM14LPEN
 (1 << 8)

	)

455 
	#RCC_APB1LPENR_TIM13LPEN
 (1 << 7)

	)

456 
	#RCC_APB1LPENR_TIM12LPEN
 (1 << 6)

	)

457 
	#RCC_APB1LPENR_TIM7LPEN
 (1 << 5)

	)

458 
	#RCC_APB1LPENR_TIM6LPEN
 (1 << 4)

	)

459 
	#RCC_APB1LPENR_TIM5LPEN
 (1 << 3)

	)

460 
	#RCC_APB1LPENR_TIM4LPEN
 (1 << 2)

	)

461 
	#RCC_APB1LPENR_TIM3LPEN
 (1 << 1)

	)

462 
	#RCC_APB1LPENR_TIM2LPEN
 (1 << 0)

	)

466 
	#RCC_APB2LPENR_TIM11LPEN
 (1 << 18)

	)

467 
	#RCC_APB2LPENR_TIM10LPEN
 (1 << 17)

	)

468 
	#RCC_APB2LPENR_TIM9LPEN
 (1 << 16)

	)

469 
	#RCC_APB2LPENR_SYSCFGLPEN
 (1 << 14)

	)

470 
	#RCC_APB2LPENR_SPI1LPEN
 (1 << 12)

	)

471 
	#RCC_APB2LPENR_SDIOLPEN
 (1 << 11)

	)

472 
	#RCC_APB2LPENR_ADC3LPEN
 (1 << 10)

	)

473 
	#RCC_APB2LPENR_ADC2LPEN
 (1 << 9)

	)

474 
	#RCC_APB2LPENR_ADC1LPEN
 (1 << 8)

	)

475 
	#RCC_APB2LPENR_USART6LPEN
 (1 << 5)

	)

476 
	#RCC_APB2LPENR_USART1LPEN
 (1 << 4)

	)

477 
	#RCC_APB2LPENR_TIM8LPEN
 (1 << 1)

	)

478 
	#RCC_APB2LPENR_TIM1LPEN
 (1 << 0)

	)

482 
	#RCC_BDCR_BDRST
 (1 << 16)

	)

483 
	#RCC_BDCR_RTCEN
 (1 << 15)

	)

485 
	#RCC_BDCR_LSEBYP
 (1 << 2)

	)

486 
	#RCC_BDCR_LSERDY
 (1 << 1)

	)

487 
	#RCC_BDCR_LSEON
 (1 << 0)

	)

491 
	#RCC_CSR_LPWRRSTF
 (1 << 31)

	)

492 
	#RCC_CSR_WWDGRSTF
 (1 << 30)

	)

493 
	#RCC_CSR_IWDGRSTF
 (1 << 29)

	)

494 
	#RCC_CSR_SFTRSTF
 (1 << 28)

	)

495 
	#RCC_CSR_PORRSTF
 (1 << 27)

	)

496 
	#RCC_CSR_PINRSTF
 (1 << 26)

	)

497 
	#RCC_CSR_BORRSTF
 (1 << 25)

	)

498 
	#RCC_CSR_RMVF
 (1 << 24)

	)

499 
	#RCC_CSR_RESET_FLAGS
 (
RCC_CSR_LPWRRSTF
 | 
RCC_CSR_WWDGRSTF
 |\

500 
RCC_CSR_IWDGRSTF
 | 
RCC_CSR_SFTRSTF
 | 
RCC_CSR_PORRSTF
 |\

501 
RCC_CSR_PINRSTF
 | 
RCC_CSR_BORRSTF
)

	)

502 
	#RCC_CSR_LSIRDY
 (1 << 1)

	)

503 
	#RCC_CSR_LSION
 (1 << 0)

	)

509 
	#RCC_SSCGR_SSCGEN
 (1 << 31)

	)

510 
	#RCC_SSCGR_SPREADSEL
 (1 << 30)

	)

512 
	#RCC_SSCGR_INCSTEP_SHIFT
 16

	)

514 
	#RCC_SSCGR_MODPER_SHIFT
 15

	)

519 
	#RCC_PLLI2SCFGR_PLLI2SR_SHIFT
 28

	)

521 
	#RCC_PLLI2SCFGR_PLLI2SN_SHIFT
 6

	)

524 
uöt32_t
 
rcc_ahb_‰equícy
;

525 
uöt32_t
 
rcc_≠b1_‰equícy
;

526 
uöt32_t
 
rcc_≠b2_‰equícy
;

530 
	ercc_˛ock_3v3
 {

531 
	mRCC_CLOCK_3V3_120MHZ
,

532 
	mRCC_CLOCK_3V3_END


535 
	srcc_˛ock_sˇÀ
 {

536 
uöt8_t
 
	m∂lm
;

537 
uöt16_t
 
	m∂ 
;

538 
uöt8_t
 
	m∂Õ
;

539 
uöt8_t
 
	m∂lq
;

540 
uöt32_t
 
	mÊash_c⁄fig
;

541 
uöt8_t
 
	mh¥e
;

542 
uöt8_t
 
	mµª1
;

543 
uöt8_t
 
	mµª2
;

544 
uöt32_t
 
	m≠b1_‰equícy
;

545 
uöt32_t
 
	m≠b2_‰equícy
;

548 c⁄° 
rcc_˛ock_sˇÀ
 
rcc_h£_8mhz_3v3
[
RCC_CLOCK_3V3_END
];

550 
	ercc_osc
 {

551 
	mRCC_PLL
,

552 
	mRCC_HSE
,

553 
	mRCC_HSI
,

554 
	mRCC_LSE
,

555 
	mRCC_LSI


558 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

560 
	ercc_≥rùh_˛kí
 {

562 
	mRCC_GPIOA
 = 
_REG_BIT
(0x30, 0),

563 
	mRCC_GPIOB
 = 
_REG_BIT
(0x30, 1),

564 
	mRCC_GPIOC
 = 
_REG_BIT
(0x30, 2),

565 
	mRCC_GPIOD
 = 
_REG_BIT
(0x30, 3),

566 
	mRCC_GPIOE
 = 
_REG_BIT
(0x30, 4),

567 
	mRCC_GPIOF
 = 
_REG_BIT
(0x30, 5),

568 
	mRCC_GPIOG
 = 
_REG_BIT
(0x30, 6),

569 
	mRCC_GPIOH
 = 
_REG_BIT
(0x30, 7),

570 
	mRCC_GPIOI
 = 
_REG_BIT
(0x30, 8),

571 
	mRCC_CRC
 = 
_REG_BIT
(0x30, 12),

572 
	mRCC_BKPSRAM
 = 
_REG_BIT
(0x30, 18),

573 
	mRCC_DMA1
 = 
_REG_BIT
(0x30, 21),

574 
	mRCC_DMA2
 = 
_REG_BIT
(0x30, 22),

575 
	mRCC_ETHMAC
 = 
_REG_BIT
(0x30, 25),

576 
	mRCC_ETHMACTX
 = 
_REG_BIT
(0x30, 26),

577 
	mRCC_ETHMACRX
 = 
_REG_BIT
(0x30, 27),

578 
	mRCC_ETHMACPTP
 = 
_REG_BIT
(0x30, 28),

579 
	mRCC_OTGHS
 = 
_REG_BIT
(0x30, 29),

580 
	mRCC_OTGHSULPI
 = 
_REG_BIT
(0x30, 30),

583 
	mRCC_DCMI
 = 
_REG_BIT
(0x34, 0),

584 
	mRCC_CRYP
 = 
_REG_BIT
(0x34, 4),

585 
	mRCC_HASH
 = 
_REG_BIT
(0x34, 5),

586 
	mRCC_RNG
 = 
_REG_BIT
(0x34, 6),

587 
	mRCC_OTGFS
 = 
_REG_BIT
(0x34, 7),

590 
	mRCC_FSMC
 = 
_REG_BIT
(0x38, 0),

593 
	mRCC_TIM2
 = 
_REG_BIT
(0x40, 0),

594 
	mRCC_TIM3
 = 
_REG_BIT
(0x40, 1),

595 
	mRCC_TIM4
 = 
_REG_BIT
(0x40, 2),

596 
	mRCC_TIM5
 = 
_REG_BIT
(0x40, 3),

597 
	mRCC_TIM6
 = 
_REG_BIT
(0x40, 4),

598 
	mRCC_TIM7
 = 
_REG_BIT
(0x40, 5),

599 
	mRCC_TIM12
 = 
_REG_BIT
(0x40, 6),

600 
	mRCC_TIM13
 = 
_REG_BIT
(0x40, 7),

601 
	mRCC_TIM14
 = 
_REG_BIT
(0x40, 8),

602 
	mRCC_WWDG
 = 
_REG_BIT
(0x40, 11),

603 
	mRCC_SPI2
 = 
_REG_BIT
(0x40, 14),

604 
	mRCC_SPI3
 = 
_REG_BIT
(0x40, 15),

605 
	mRCC_USART2
 = 
_REG_BIT
(0x40, 17),

606 
	mRCC_USART3
 = 
_REG_BIT
(0x40, 18),

607 
	mRCC_UART4
 = 
_REG_BIT
(0x40, 19),

608 
	mRCC_UART5
 = 
_REG_BIT
(0x40, 20),

609 
	mRCC_I2C1
 = 
_REG_BIT
(0x40, 21),

610 
	mRCC_I2C2
 = 
_REG_BIT
(0x40, 22),

611 
	mRCC_I2C3
 = 
_REG_BIT
(0x40, 23),

612 
	mRCC_CAN1
 = 
_REG_BIT
(0x40, 25),

613 
	mRCC_CAN2
 = 
_REG_BIT
(0x40, 26),

614 
	mRCC_PWR
 = 
_REG_BIT
(0x40, 28),

615 
	mRCC_DAC
 = 
_REG_BIT
(0x40, 29),

618 
	mRCC_TIM1
 = 
_REG_BIT
(0x44, 0),

619 
	mRCC_TIM8
 = 
_REG_BIT
(0x44, 1),

620 
	mRCC_USART1
 = 
_REG_BIT
(0x44, 4),

621 
	mRCC_USART6
 = 
_REG_BIT
(0x44, 5),

622 
	mRCC_ADC1
 = 
_REG_BIT
(0x44, 8),

623 
	mRCC_ADC2
 = 
_REG_BIT
(0x44, 9),

624 
	mRCC_ADC3
 = 
_REG_BIT
(0x44, 10),

625 
	mRCC_SDIO
 = 
_REG_BIT
(0x44, 11),

626 
	mRCC_SPI1
 = 
_REG_BIT
(0x44, 12),

627 
	mRCC_SYSCFG
 = 
_REG_BIT
(0x44, 14),

628 
	mRCC_TIM9
 = 
_REG_BIT
(0x44, 16),

629 
	mRCC_TIM10
 = 
_REG_BIT
(0x44, 17),

630 
	mRCC_TIM11
 = 
_REG_BIT
(0x44, 18),

633 
	mRCC_RTC
 = 
_REG_BIT
(0x70, 15),

636 
	mSCC_GPIOA
 = 
_REG_BIT
(0x50, 0),

637 
	mSCC_GPIOB
 = 
_REG_BIT
(0x50, 1),

638 
	mSCC_GPIOC
 = 
_REG_BIT
(0x50, 2),

639 
	mSCC_GPIOD
 = 
_REG_BIT
(0x50, 3),

640 
	mSCC_GPIOE
 = 
_REG_BIT
(0x50, 4),

641 
	mSCC_GPIOF
 = 
_REG_BIT
(0x50, 5),

642 
	mSCC_GPIOG
 = 
_REG_BIT
(0x50, 6),

643 
	mSCC_GPIOH
 = 
_REG_BIT
(0x50, 7),

644 
	mSCC_GPIOI
 = 
_REG_BIT
(0x50, 8),

645 
	mSCC_CRC
 = 
_REG_BIT
(0x50, 12),

646 
	mSCC_FLTIF
 = 
_REG_BIT
(0x50, 15),

647 
	mSCC_SRAM1
 = 
_REG_BIT
(0x50, 16),

648 
	mSCC_SRAM2
 = 
_REG_BIT
(0x50, 17),

649 
	mSCC_BKPSRAM
 = 
_REG_BIT
(0x50, 18),

650 
	mSCC_DMA1
 = 
_REG_BIT
(0x50, 21),

651 
	mSCC_DMA2
 = 
_REG_BIT
(0x50, 22),

652 
	mSCC_ETHMAC
 = 
_REG_BIT
(0x50, 25),

653 
	mSCC_ETHMACTX
 = 
_REG_BIT
(0x50, 26),

654 
	mSCC_ETHMACRX
 = 
_REG_BIT
(0x50, 27),

655 
	mSCC_ETHMACPTP
 = 
_REG_BIT
(0x50, 28),

656 
	mSCC_OTGHS
 = 
_REG_BIT
(0x50, 29),

657 
	mSCC_OTGHSULPI
 = 
_REG_BIT
(0x50, 30),

660 
	mSCC_DCMI
 = 
_REG_BIT
(0x54, 0),

661 
	mSCC_CRYP
 = 
_REG_BIT
(0x54, 4),

662 
	mSCC_HASH
 = 
_REG_BIT
(0x54, 5),

663 
	mSCC_RNG
 = 
_REG_BIT
(0x54, 6),

664 
	mSCC_OTGFS
 = 
_REG_BIT
(0x54, 7),

667 
	mSCC_FSMC
 = 
_REG_BIT
(0x58, 0),

670 
	mSCC_TIM2
 = 
_REG_BIT
(0x60, 0),

671 
	mSCC_TIM3
 = 
_REG_BIT
(0x60, 1),

672 
	mSCC_TIM4
 = 
_REG_BIT
(0x60, 2),

673 
	mSCC_TIM5
 = 
_REG_BIT
(0x60, 3),

674 
	mSCC_TIM6
 = 
_REG_BIT
(0x60, 4),

675 
	mSCC_TIM7
 = 
_REG_BIT
(0x60, 5),

676 
	mSCC_TIM12
 = 
_REG_BIT
(0x60, 6),

677 
	mSCC_TIM13
 = 
_REG_BIT
(0x60, 7),

678 
	mSCC_TIM14
 = 
_REG_BIT
(0x60, 8),

679 
	mSCC_WWDG
 = 
_REG_BIT
(0x60, 11),

680 
	mSCC_SPI2
 = 
_REG_BIT
(0x60, 14),

681 
	mSCC_SPI3
 = 
_REG_BIT
(0x60, 15),

682 
	mSCC_USART2
 = 
_REG_BIT
(0x60, 17),

683 
	mSCC_USART3
 = 
_REG_BIT
(0x60, 18),

684 
	mSCC_UART4
 = 
_REG_BIT
(0x60, 19),

685 
	mSCC_UART5
 = 
_REG_BIT
(0x60, 20),

686 
	mSCC_I2C1
 = 
_REG_BIT
(0x60, 21),

687 
	mSCC_I2C2
 = 
_REG_BIT
(0x60, 22),

688 
	mSCC_I2C3
 = 
_REG_BIT
(0x60, 23),

689 
	mSCC_CAN1
 = 
_REG_BIT
(0x60, 25),

690 
	mSCC_CAN2
 = 
_REG_BIT
(0x60, 26),

691 
	mSCC_PWR
 = 
_REG_BIT
(0x60, 28),

692 
	mSCC_DAC
 = 
_REG_BIT
(0x60, 29),

695 
	mSCC_TIM1
 = 
_REG_BIT
(0x64, 0),

696 
	mSCC_TIM8
 = 
_REG_BIT
(0x64, 1),

697 
	mSCC_USART1
 = 
_REG_BIT
(0x64, 4),

698 
	mSCC_USART6
 = 
_REG_BIT
(0x64, 5),

699 
	mSCC_ADC1
 = 
_REG_BIT
(0x64, 8),

700 
	mSCC_ADC2
 = 
_REG_BIT
(0x64, 9),

701 
	mSCC_ADC3
 = 
_REG_BIT
(0x64, 10),

702 
	mSCC_SDIO
 = 
_REG_BIT
(0x64, 11),

703 
	mSCC_SPI1
 = 
_REG_BIT
(0x64, 12),

704 
	mSCC_SYSCFG
 = 
_REG_BIT
(0x64, 14),

705 
	mSCC_TIM9
 = 
_REG_BIT
(0x64, 16),

706 
	mSCC_TIM10
 = 
_REG_BIT
(0x64, 17),

707 
	mSCC_TIM11
 = 
_REG_BIT
(0x64, 18),

710 
	ercc_≥rùh_r°
 {

712 
	mRST_GPIOA
 = 
_REG_BIT
(0x10, 0),

713 
	mRST_GPIOB
 = 
_REG_BIT
(0x10, 1),

714 
	mRST_GPIOC
 = 
_REG_BIT
(0x10, 2),

715 
	mRST_GPIOD
 = 
_REG_BIT
(0x10, 3),

716 
	mRST_GPIOE
 = 
_REG_BIT
(0x10, 4),

717 
	mRST_GPIOF
 = 
_REG_BIT
(0x10, 5),

718 
	mRST_GPIOG
 = 
_REG_BIT
(0x10, 6),

719 
	mRST_GPIOH
 = 
_REG_BIT
(0x10, 7),

720 
	mRST_GPIOI
 = 
_REG_BIT
(0x10, 8),

721 
	mRST_CRC
 = 
_REG_BIT
(0x10, 12),

722 
	mRST_DMA1
 = 
_REG_BIT
(0x10, 21),

723 
	mRST_DMA2
 = 
_REG_BIT
(0x10, 22),

724 
	mRST_ETHMAC
 = 
_REG_BIT
(0x10, 25),

725 
	mRST_OTGHS
 = 
_REG_BIT
(0x10, 29),

728 
	mRST_DCMI
 = 
_REG_BIT
(0x14, 0),

729 
	mRST_CRYP
 = 
_REG_BIT
(0x14, 4),

730 
	mRST_HASH
 = 
_REG_BIT
(0x14, 5),

731 
	mRST_RNG
 = 
_REG_BIT
(0x14, 6),

732 
	mRST_OTGFS
 = 
_REG_BIT
(0x14, 7),

735 
	mRST_FSMC
 = 
_REG_BIT
(0x18, 0),

738 
	mRST_TIM2
 = 
_REG_BIT
(0x20, 0),

739 
	mRST_TIM3
 = 
_REG_BIT
(0x20, 1),

740 
	mRST_TIM4
 = 
_REG_BIT
(0x20, 2),

741 
	mRST_TIM5
 = 
_REG_BIT
(0x20, 3),

742 
	mRST_TIM6
 = 
_REG_BIT
(0x20, 4),

743 
	mRST_TIM7
 = 
_REG_BIT
(0x20, 5),

744 
	mRST_TIM12
 = 
_REG_BIT
(0x20, 6),

745 
	mRST_TIM13
 = 
_REG_BIT
(0x20, 7),

746 
	mRST_TIM14
 = 
_REG_BIT
(0x20, 8),

747 
	mRST_WWDG
 = 
_REG_BIT
(0x20, 11),

748 
	mRST_SPI2
 = 
_REG_BIT
(0x20, 14),

749 
	mRST_SPI3
 = 
_REG_BIT
(0x20, 15),

750 
	mRST_USART2
 = 
_REG_BIT
(0x20, 17),

751 
	mRST_USART3
 = 
_REG_BIT
(0x20, 18),

752 
	mRST_UART4
 = 
_REG_BIT
(0x20, 19),

753 
	mRST_UART5
 = 
_REG_BIT
(0x20, 20),

754 
	mRST_I2C1
 = 
_REG_BIT
(0x20, 21),

755 
	mRST_I2C2
 = 
_REG_BIT
(0x20, 22),

756 
	mRST_I2C3
 = 
_REG_BIT
(0x20, 23),

757 
	mRST_CAN1
 = 
_REG_BIT
(0x20, 25),

758 
	mRST_CAN2
 = 
_REG_BIT
(0x20, 26),

759 
	mRST_PWR
 = 
_REG_BIT
(0x20, 28),

760 
	mRST_DAC
 = 
_REG_BIT
(0x20, 29),

763 
	mRST_TIM1
 = 
_REG_BIT
(0x24, 0),

764 
	mRST_TIM8
 = 
_REG_BIT
(0x24, 1),

765 
	mRST_USART1
 = 
_REG_BIT
(0x24, 4),

766 
	mRST_USART6
 = 
_REG_BIT
(0x24, 5),

767 
	mRST_ADC
 = 
_REG_BIT
(0x24, 8),

768 
	mRST_SDIO
 = 
_REG_BIT
(0x24, 11),

769 
	mRST_SPI1
 = 
_REG_BIT
(0x24, 12),

770 
	mRST_SYSCFG
 = 
_REG_BIT
(0x24, 14),

771 
	mRST_TIM9
 = 
_REG_BIT
(0x24, 16),

772 
	mRST_TIM10
 = 
_REG_BIT
(0x24, 17),

773 
	mRST_TIM11
 = 
_REG_BIT
(0x24, 18),

776 #unde‡
_REG_BIT


778 
	~<lib›ícm3/°m32/comm⁄/rcc_comm⁄_Æl.h
>

780 
BEGIN_DECLS


782 
rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
);

783 
rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
);

784 
rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
);

785 
rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
);

786 
rcc_css_öt_˛ór
();

787 
rcc_css_öt_Êag
();

788 
rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
);

789 
rcc_osc_⁄
(
rcc_osc
 
osc
);

790 
rcc_osc_off
(
rcc_osc
 
osc
);

791 
rcc_css_íabÀ
();

792 
rcc_css_dißbÀ
();

793 
rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
);

794 
rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
);

795 
rcc_£t_µª2
(
uöt32_t
 
µª2
);

796 
rcc_£t_µª1
(
uöt32_t
 
µª1
);

797 
rcc_£t_h¥e
(
uöt32_t
 
h¥e
);

798 
rcc_£t_π˝ª
(
uöt32_t
 
π˝ª
);

799 
rcc_£t_maö_∂l_hsi
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

800 
uöt32_t
 
∂lq
);

801 
rcc_£t_maö_∂l_h£
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

802 
uöt32_t
 
∂lq
);

803 
uöt32_t
 
rcc_sy°em_˛ock_sour˚
();

804 
rcc_˛ock_£tup_h£_3v3
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
);

805 
rcc_backupdomaö_ª£t
();

807 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f2/rng.h

18 #i‚de‡
LIBOPENCM3_RNG_H


19 
	#LIBOPENCM3_RNG_H


	)

21 
	~<lib›ícm3/°m32/comm⁄/∫g_comm⁄_v1.h
>

	@libopencm3/include/libopencm3/stm32/f2/rtc.h

31 #i‚de‡
LIBOPENCM3_RTC_H


32 
	#LIBOPENCM3_RTC_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/πc_comm⁄_l1f024.h
>

	@libopencm3/include/libopencm3/stm32/f2/spi.h

31 #i‚de‡
LIBOPENCM3_SPI_H


32 
	#LIBOPENCM3_SPI_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_v1_‰f.h
>

	@libopencm3/include/libopencm3/stm32/f2/syscfg.h

37 #i‚de‡
LIBOPENCM3_SYSCFG_H


38 
	#LIBOPENCM3_SYSCFG_H


	)

40 
	~<lib›ícm3/°m32/comm⁄/syscfg_comm⁄_l1f234.h
>

	@libopencm3/include/libopencm3/stm32/f2/timer.h

34 #i‚de‡
LIBOPENCM3_TIMER_H


35 
	#LIBOPENCM3_TIMER_H


	)

37 
	~<lib›ícm3/°m32/comm⁄/timî_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f2/usart.h

31 #i‚de‡
LIBOPENCM3_USART_H


32 
	#LIBOPENCM3_USART_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f3/adc.h

34 #i‚de‡
LIBOPENCM3_ADC_H


35 
	#LIBOPENCM3_ADC_H


	)

37 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v2.h
>

38 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v2_mu…i.h
>

43 
	#ADC1
 
ADC1_BASE


	)

44 
	#ADC2
 
ADC2_BASE


	)

45 
	#ADC3
 
ADC3_BASE


	)

46 
	#ADC4
 
ADC4_BASE


	)

54 
	#ADC1_ISR
 
	`ADC_ISR
(
ADC1_BASE
)

	)

55 
	#ADC2_ISR
 
	`ADC_ISR
(
ADC2_BASE
)

	)

56 
	#ADC3_ISR
 
	`ADC_ISR
(
ADC3_BASE
)

	)

57 
	#ADC4_ISR
 
	`ADC_ISR
(
ADC4_BASE
)

	)

59 
	#ADC1_IER
 
	`ADC_IER
(
ADC1_BASE
)

	)

60 
	#ADC2_IER
 
	`ADC_IER
(
ADC2_BASE
)

	)

61 
	#ADC3_IER
 
	`ADC_IER
(
ADC3_BASE
)

	)

62 
	#ADC4_IER
 
	`ADC_IER
(
ADC4_BASE
)

	)

64 
	#ADC1_CR
 
	`ADC_CR
(
ADC1_BASE
)

	)

65 
	#ADC2_CR
 
	`ADC_CR
(
ADC2_BASE
)

	)

66 
	#ADC3_CR
 
	`ADC_CR
(
ADC3_BASE
)

	)

67 
	#ADC4_CR
 
	`ADC_CR
(
ADC4_BASE
)

	)

69 
	#ADC1_CFGR1
 
	`ADC_CFGR1
(
ADC1_BASE
)

	)

70 
	#ADC2_CFGR1
 
	`ADC_CFGR1
(
ADC2_BASE
)

	)

71 
	#ADC3_CFGR1
 
	`ADC_CFGR1
(
ADC3_BASE
)

	)

72 
	#ADC4_CFGR1
 
	`ADC_CFGR1
(
ADC4_BASE
)

	)

74 
	#ADC_CFGR
(
adc
Ë
	`ADC_CFGR1
◊dc)

	)

75 
	#ADC1_CFGR
 
	`ADC_CFGR1
(
ADC1_BASE
)

	)

76 
	#ADC2_CFGR
 
	`ADC_CFGR1
(
ADC2_BASE
)

	)

77 
	#ADC3_CFGR
 
	`ADC_CFGR1
(
ADC3_BASE
)

	)

78 
	#ADC4_CFGR
 
	`ADC_CFGR1
(
ADC4_BASE
)

	)

80 
	#ADC1_SMPR1
 
	`ADC_SMPR1
(
ADC1_BASE
)

	)

81 
	#ADC2_SMPR1
 
	`ADC_SMPR1
(
ADC2_BASE
)

	)

82 
	#ADC3_SMPR1
 
	`ADC_SMPR1
(
ADC3_BASE
)

	)

83 
	#ADC4_SMPR1
 
	`ADC_SMPR1
(
ADC4_BASE
)

	)

85 
	#ADC1_SMPR2
 
	`ADC_SMPR2
(
ADC1_BASE
)

	)

86 
	#ADC2_SMPR2
 
	`ADC_SMPR2
(
ADC2_BASE
)

	)

87 
	#ADC3_SMPR2
 
	`ADC_SMPR2
(
ADC3_BASE
)

	)

88 
	#ADC4_SMPR2
 
	`ADC_SMPR2
(
ADC4_BASE
)

	)

90 
	#ADC1_TR1
 
	`ADC_TR1
(
ADC1_BASE
)

	)

91 
	#ADC2_TR1
 
	`ADC_TR1
(
ADC2_BASE
)

	)

92 
	#ADC3_TR1
 
	`ADC_TR1
(
ADC3_BASE
)

	)

93 
	#ADC4_TR1
 
	`ADC_TR1
(
ADC4_BASE
)

	)

95 
	#ADC1_TR2
 
	`ADC_TR2
(
ADC1_BASE
)

	)

96 
	#ADC2_TR2
 
	`ADC_TR2
(
ADC2_BASE
)

	)

97 
	#ADC3_TR2
 
	`ADC_TR2
(
ADC3_BASE
)

	)

98 
	#ADC4_TR2
 
	`ADC_TR2
(
ADC4_BASE
)

	)

100 
	#ADC1_TR3
 
	`ADC_TR3
(
ADC1_BASE
)

	)

101 
	#ADC2_TR3
 
	`ADC_TR3
(
ADC2_BASE
)

	)

102 
	#ADC3_TR3
 
	`ADC_TR3
(
ADC3_BASE
)

	)

103 
	#ADC4_TR3
 
	`ADC_TR3
(
ADC4_BASE
)

	)

105 
	#ADC1_SQR1
 
	`ADC_SQR1
(
ADC1_BASE
)

	)

106 
	#ADC2_SQR1
 
	`ADC_SQR1
(
ADC2_BASE
)

	)

107 
	#ADC3_SQR1
 
	`ADC_SQR1
(
ADC3_BASE
)

	)

108 
	#ADC4_SQR1
 
	`ADC_SQR1
(
ADC4_BASE
)

	)

110 
	#ADC1_SQR2
 
	`ADC_SQR2
(
ADC1_BASE
)

	)

111 
	#ADC2_SQR2
 
	`ADC_SQR2
(
ADC2_BASE
)

	)

112 
	#ADC3_SQR2
 
	`ADC_SQR2
(
ADC3_BASE
)

	)

113 
	#ADC4_SQR2
 
	`ADC_SQR2
(
ADC4_BASE
)

	)

115 
	#ADC1_SQR3
 
	`ADC_SQR3
(
ADC1_BASE
)

	)

116 
	#ADC2_SQR3
 
	`ADC_SQR3
(
ADC2_BASE
)

	)

117 
	#ADC3_SQR3
 
	`ADC_SQR3
(
ADC3_BASE
)

	)

118 
	#ADC4_SQR3
 
	`ADC_SQR3
(
ADC4_BASE
)

	)

120 
	#ADC1_SQR4
 
	`ADC_SQR4
(
ADC1_BASE
)

	)

121 
	#ADC2_SQR4
 
	`ADC_SQR4
(
ADC2_BASE
)

	)

122 
	#ADC3_SQR4
 
	`ADC_SQR4
(
ADC3_BASE
)

	)

123 
	#ADC4_SQR4
 
	`ADC_SQR4
(
ADC4_BASE
)

	)

125 
	#ADC1_DR
 
	`ADC_DR
(
ADC1_BASE
)

	)

126 
	#ADC2_DR
 
	`ADC_DR
(
ADC2_BASE
)

	)

127 
	#ADC3_DR
 
	`ADC_DR
(
ADC3_BASE
)

	)

128 
	#ADC4_DR
 
	`ADC_DR
(
ADC4_BASE
)

	)

130 
	#ADC1_JSQR
 
	`ADC_JSQR
(
ADC1_BASE
)

	)

131 
	#ADC2_JSQR
 
	`ADC_JSQR
(
ADC2_BASE
)

	)

132 
	#ADC3_JSQR
 
	`ADC_JSQR
(
ADC3_BASE
)

	)

133 
	#ADC4_JSQR
 
	`ADC_JSQR
(
ADC4_BASE
)

	)

135 
	#ADC1_OFR1
 
	`ADC_OFR1
(
ADC1_BASE
)

	)

136 
	#ADC2_OFR1
 
	`ADC_OFR1
(
ADC2_BASE
)

	)

137 
	#ADC3_OFR1
 
	`ADC_OFR1
(
ADC3_BASE
)

	)

138 
	#ADC4_OFR1
 
	`ADC_OFR1
(
ADC4_BASE
)

	)

140 
	#ADC1_OFR2
 
	`ADC_OFR2
(
ADC1_BASE
)

	)

141 
	#ADC2_OFR2
 
	`ADC_OFR2
(
ADC2_BASE
)

	)

142 
	#ADC3_OFR2
 
	`ADC_OFR2
(
ADC3_BASE
)

	)

143 
	#ADC4_OFR2
 
	`ADC_OFR2
(
ADC4_BASE
)

	)

145 
	#ADC1_OFR3
 
	`ADC_OFR3
(
ADC1_BASE
)

	)

146 
	#ADC2_OFR3
 
	`ADC_OFR3
(
ADC2_BASE
)

	)

147 
	#ADC3_OFR3
 
	`ADC_OFR3
(
ADC3_BASE
)

	)

148 
	#ADC4_OFR3
 
	`ADC_OFR3
(
ADC4_BASE
)

	)

150 
	#ADC1_OFR4
 
	`ADC_OFR4
(
ADC1_BASE
)

	)

151 
	#ADC2_OFR4
 
	`ADC_OFR4
(
ADC2_BASE
)

	)

152 
	#ADC3_OFR4
 
	`ADC_OFR4
(
ADC3_BASE
)

	)

153 
	#ADC4_OFR4
 
	`ADC_OFR4
(
ADC4_BASE
)

	)

155 
	#ADC1_JDR1
 
	`ADC_JDR1
(
ADC1_BASE
)

	)

156 
	#ADC2_JDR1
 
	`ADC_JDR1
(
ADC2_BASE
)

	)

157 
	#ADC3_JDR1
 
	`ADC_JDR1
(
ADC3_BASE
)

	)

158 
	#ADC4_JDR1
 
	`ADC_JDR1
(
ADC4_BASE
)

	)

160 
	#ADC1_JDR2
 
	`ADC_JDR2
(
ADC1_BASE
)

	)

161 
	#ADC2_JDR2
 
	`ADC_JDR2
(
ADC2_BASE
)

	)

162 
	#ADC3_JDR2
 
	`ADC_JDR2
(
ADC3_BASE
)

	)

163 
	#ADC4_JDR2
 
	`ADC_JDR2
(
ADC4_BASE
)

	)

165 
	#ADC1_JDR3
 
	`ADC_JDR3
(
ADC1_BASE
)

	)

166 
	#ADC2_JDR3
 
	`ADC_JDR3
(
ADC2_BASE
)

	)

167 
	#ADC3_JDR3
 
	`ADC_JDR3
(
ADC3_BASE
)

	)

168 
	#ADC4_JDR3
 
	`ADC_JDR3
(
ADC4_BASE
)

	)

170 
	#ADC1_JDR4
 
	`ADC_JDR4
(
ADC1_BASE
)

	)

171 
	#ADC2_JDR4
 
	`ADC_JDR4
(
ADC2_BASE
)

	)

172 
	#ADC3_JDR4
 
	`ADC_JDR4
(
ADC3_BASE
)

	)

173 
	#ADC4_JDR4
 
	`ADC_JDR4
(
ADC4_BASE
)

	)

175 
	#ADC1_AWD2CR
 
	`ADC_AWD2CR
(
ADC1_BASE
)

	)

176 
	#ADC2_AWD2CR
 
	`ADC_AWD2CR
(
ADC2_BASE
)

	)

177 
	#ADC3_AWD2CR
 
	`ADC_AWD2CR
(
ADC3_BASE
)

	)

178 
	#ADC4_AWD2CR
 
	`ADC_AWD2CR
(
ADC4_BASE
)

	)

180 
	#ADC1_AWD3CR
 
	`ADC_AWD3CR
(
ADC1_BASE
)

	)

181 
	#ADC2_AWD3CR
 
	`ADC_AWD3CR
(
ADC2_BASE
)

	)

182 
	#ADC3_AWD3CR
 
	`ADC_AWD3CR
(
ADC3_BASE
)

	)

183 
	#ADC4_AWD3CR
 
	`ADC_AWD3CR
(
ADC4_BASE
)

	)

185 
	#ADC1_DIFSEL
 
	`ADC_DIFSEL
(
ADC1_BASE
)

	)

186 
	#ADC2_DIFSEL
 
	`ADC_DIFSEL
(
ADC2_BASE
)

	)

187 
	#ADC3_DIFSEL
 
	`ADC_DIFSEL
(
ADC3_BASE
)

	)

188 
	#ADC4_DIFSEL
 
	`ADC_DIFSEL
(
ADC4_BASE
)

	)

190 
	#ADC1_CALFACT
 
	`ADC_CALFACT
(
ADC1_BASE
)

	)

191 
	#ADC2_CALFACT
 
	`ADC_CALFACT
(
ADC2_BASE
)

	)

192 
	#ADC3_CALFACT
 
	`ADC_CALFACT
(
ADC3_BASE
)

	)

193 
	#ADC4_CALFACT
 
	`ADC_CALFACT
(
ADC4_BASE
)

	)

195 
	#ADC12_CSR
 
	`ADC_CSR
(
ADC1
)

	)

196 
	#ADC12_CCR
 
	`ADC_CCR
(
ADC1
)

	)

197 
	#ADC12_CDR
 
	`ADC_CDR
(
ADC1
)

	)

198 
	#ADC34_CSR
 
	`ADC_CSR
(
ADC3
)

	)

199 
	#ADC34_CCR
 
	`ADC_CCR
(
ADC3
)

	)

200 
	#ADC34_CDR
 
	`ADC_CDR
(
ADC3
)

	)

206 
	#ADC_CR_ADVREGEN_ENABLE
 (0x1 << 28)

	)

207 
	#ADC_CR_ADVREGEN_DISABLE
 (0x2 << 28)

	)

208 
	#ADC_CR_ADVREGEN_MASK
 (0x3 << 28)

	)

216 
	#ADC_SMPR_SMP_1DOT5CYC
 0x0

	)

217 
	#ADC_SMPR_SMP_2DOT5CYC
 0x1

	)

218 
	#ADC_SMPR_SMP_4DOT5CYC
 0x2

	)

219 
	#ADC_SMPR_SMP_7DOT5CYC
 0x3

	)

220 
	#ADC_SMPR_SMP_19DOT5CYC
 0x4

	)

221 
	#ADC_SMPR_SMP_61DOT5CYC
 0x5

	)

222 
	#ADC_SMPR_SMP_181DOT5CYC
 0x6

	)

223 
	#ADC_SMPR_SMP_601DOT5CYC
 0x7

	)

249 
	#ADC_JSQR_JL_LSB
 0

	)

250 
	#ADC_JSQR_JL_SHIFT
 0

	)

251 
	#ADC_JSQR_JSQ4_LSB
 26

	)

252 
	#ADC_JSQR_JSQ3_LSB
 20

	)

253 
	#ADC_JSQR_JSQ2_LSB
 14

	)

254 
	#ADC_JSQR_JSQ1_LSB
 8

	)

256 
	#ADC_JSQR_JSQ_VAL
(
n
, 
vÆ
Ë((vÆË<< ((“Ë- 1Ë* 6 + 8))

	)

257 
	#ADC_JSQR_JL_VAL
(
vÆ
Ë(((vÆË- 1Ë<< 
ADC_JSQR_JL_SHIFT
)

	)

271 
	#ADC_JSQR_JEXTEN_DISABLED
 (0x0 << 6)

	)

272 
	#ADC_JSQR_JEXTEN_RISING_EDGE
 (0x1 << 6)

	)

273 
	#ADC_JSQR_JEXTEN_FALLING_EDGE
 (0x2 << 6)

	)

274 
	#ADC_JSQR_JEXTEN_BOTH_EDGES
 (0x3 << 6)

	)

276 
	#ADC_JSQR_JEXTEN_MASK
 (0x3 << 6)

	)

279 
	#ADC_JSQR_JEXTSEL_EVENT_0
 (0x0 << 2)

	)

280 
	#ADC_JSQR_JEXTSEL_EVENT_1
 (0x1 << 2)

	)

281 
	#ADC_JSQR_JEXTSEL_EVENT_2
 (0x2 << 2)

	)

282 
	#ADC_JSQR_JEXTSEL_EVENT_3
 (0x3 << 2)

	)

283 
	#ADC_JSQR_JEXTSEL_EVENT_4
 (0x4 << 2)

	)

284 
	#ADC_JSQR_JEXTSEL_EVENT_5
 (0x5 << 2)

	)

285 
	#ADC_JSQR_JEXTSEL_EVENT_6
 (0x6 << 2)

	)

286 
	#ADC_JSQR_JEXTSEL_EVENT_7
 (0x7 << 2)

	)

287 
	#ADC_JSQR_JEXTSEL_EVENT_8
 (0x8 << 2)

	)

288 
	#ADC_JSQR_JEXTSEL_EVENT_9
 (0x9 << 2)

	)

289 
	#ADC_JSQR_JEXTSEL_EVENT_10
 (0xA << 2)

	)

290 
	#ADC_JSQR_JEXTSEL_EVENT_11
 (0xB << 2)

	)

291 
	#ADC_JSQR_JEXTSEL_EVENT_12
 (0xC << 2)

	)

292 
	#ADC_JSQR_JEXTSEL_EVENT_13
 (0xD << 2)

	)

293 
	#ADC_JSQR_JEXTSEL_EVENT_14
 (0xE << 2)

	)

294 
	#ADC_JSQR_JEXTSEL_EVENT_15
 (0xF << 2)

	)

296 
	#ADC_JSQR_JEXTSEL_MASK
 (0xF << 2)

	)

299 
	#ADC_JSQR_JL_1_CONVERSION
 (0x0 << 0)

	)

300 
	#ADC_JSQR_JL_2_CONVERSIONS
 (0x1 << 0)

	)

301 
	#ADC_JSQR_JL_3_CONVERSIONS
 (0x2 << 0)

	)

302 
	#ADC_JSQR_JL_4_CONVERSIONS
 (0x3 << 0)

	)

308 
	#ADC_OFR1_OFFSET1_EN
 (1 << 31)

	)

321 
	#ADC_OFR2_OFFSET2_EN
 (1 << 31)

	)

334 
	#ADC_OFR3_OFFSET3_EN
 (1 << 31)

	)

347 
	#ADC_OFR4_OFFSET4_EN
 (1 << 31)

	)

389 
	#ADC_CSR_JQOVF_SLV
 (1 << 26)

	)

392 
	#ADC_CSR_AWD3_SLV
 (1 << 25)

	)

395 
	#ADC_CSR_AWD2_SLV
 (1 << 24)

	)

398 
	#ADC_CSR_AWD1_SLV
 (1 << 23)

	)

401 
	#ADC_CSR_JEOS_SLV
 (1 << 22)

	)

404 
	#ADC_CSR_JEOC_SLV
 (1 << 21)

	)

407 
	#ADC_CSR_OVR_SLV
 (1 << 20)

	)

410 
	#ADC_CSR_EOS_SLV
 (1 << 19)

	)

413 
	#ADC_CSR_EOC_SLV
 (1 << 18)

	)

416 
	#ADC_CSR_EOSMP_SLV
 (1 << 17)

	)

419 
	#ADC_CSR_ADRDY_SLV
 (1 << 16)

	)

422 
	#ADC_CSR_JQOVF_MST
 (1 << 10)

	)

425 
	#ADC_CSR_AWD3_MST
 (1 << 9)

	)

428 
	#ADC_CSR_AWD2_MST
 (1 << 8)

	)

431 
	#ADC_CSR_AWD1_MST
 (1 << 7)

	)

434 
	#ADC_CSR_JEOS_MST
 (1 << 6)

	)

437 
	#ADC_CSR_JEOC_MST
 (1 << 5)

	)

440 
	#ADC_CSR_OVR_MST
 (1 << 4)

	)

443 
	#ADC_CSR_EOS_MST
 (1 << 3)

	)

446 
	#ADC_CSR_EOC_MST
 (1 << 2)

	)

449 
	#ADC_CSR_EOSMP_MST
 (1 << 1)

	)

452 
	#ADC_CSR_ADRDY_MST
 (1 << 0)

	)

458 
	#ADC_CCR_VBATEN
 (1 << 24)

	)

461 
	#ADC_CCR_TSEN
 (1 << 23)

	)

464 
	#ADC_CCR_VREFEN
 (1 << 22)

	)

467 
	#ADC_CCR_CKMODE_CKX
 (0x0 << 16)

	)

468 
	#ADC_CCR_CKMODE_DIV1
 (0x1 << 16)

	)

469 
	#ADC_CCR_CKMODE_DIV2
 (0x2 << 16)

	)

470 
	#ADC_CCR_CKMODE_DIV4
 (0x3 << 16)

	)

472 
	#ADC_CCR_CKMODE_MASK
 (0x3 << 16)

	)

475 
	#ADC_CCR_MDMA_DISABLE
 (0x0 << 14)

	)

477 
	#ADC_CCR_MDMA_12_10_BIT
 (0x2 << 14)

	)

478 
	#ADC_CCR_MDMA_8_6_BIT
 (0x3 << 14)

	)

481 
	#ADC_CCR_DMACFG
 (1 << 13)

	)

484 
	#ADC_CCR_DELAY_SHIFT
 8

	)

487 
	#ADC_CCR_DUAL_SHIFT
 0

	)

500 
	#ADC_CHANNEL_TEMP
 16

	)

501 
	#ADC_CHANNEL_VBAT
 17

	)

502 
	#ADC_CHANNEL_VREF
 18

	)

506 
BEGIN_DECLS


508 
adc_íabÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
);

509 
adc_dißbÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
);

510 
adc_íabÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
);

511 
adc_dißbÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
);

512 
adc_íabÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
);

513 
adc_dißbÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
);

514 
adc_íabÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
);

515 
adc_dißbÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
);

516 
adc_íabÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
);

517 
adc_dißbÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
);

518 
adc_íabÀ_™Æog_w©chdog_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
);

519 
adc_íabÀ_™Æog_w©chdog_⁄_£À˘ed_ch™√l
(
uöt32_t
 
adc
,

520 
uöt8_t
 
ch™√l
);

523 
adc_íabÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
);

524 
adc_dißbÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
);

525 
adc_íabÀ_eos_öãºu±_öje˘ed
(
uöt32_t
 
adc
);

526 
adc_dißbÀ_eos_öãºu±_öje˘ed
(
uöt32_t
 
adc
);

527 
adc_íabÀ_Æl_awd_öãºu±
(
uöt32_t
 
adc
);

528 
adc_dißbÀ_Æl_awd_öãºu±
(
uöt32_t
 
adc
);

529 
adc_íabÀ_eos_öãºu±
(
uöt32_t
 
adc
);

530 
adc_dißbÀ_eos_öãºu±
(
uöt32_t
 
adc
);

531 
adc_°¨t_c⁄vîsi⁄_öje˘ed
(
uöt32_t
 
adc
);

532 
adc_dißbÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
);

533 
adc_dißbÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
);

534 
adc_£t_w©chdog_high_thªshﬁd
(
uöt32_t
 
adc
, 
uöt8_t
 
thªshﬁd
);

535 
adc_£t_w©chdog_low_thªshﬁd
(
uöt32_t
 
adc
, 
uöt8_t
 
thªshﬁd
);

536 
adc_£t_öje˘ed_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[]);

537 
boﬁ
 
adc_eoc_öje˘ed
(
uöt32_t
 
adc
);

538 
boﬁ
 
adc_eos_öje˘ed
(
uöt32_t
 
adc
);

539 
uöt32_t
 
adc_ªad_öje˘ed
(uöt32_à
adc
, 
uöt8_t
 
ªg
);

540 
adc_£t_öje˘ed_off£t
(
uöt32_t
 
adc
, 
uöt8_t
 
ªg
, uöt32_à
off£t
);

542 
adc_£t_˛k_¥esˇÀ
(
uöt32_t
 
adc
, uöt32_à
¥esˇÀr
);

543 
adc_£t_mu…i_mode
(
uöt32_t
 
adc
, uöt32_à
mode
);

544 
adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

545 
uöt32_t
 
pﬁ¨ôy
);

546 
adc_íabÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

547 
uöt32_t
 
pﬁ¨ôy
);

548 
boﬁ
 
adc_awd
(
uöt32_t
 
adc
);

552 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f3/crc.h

32 #i‚de‡
LIBOPENCM3_CRC_H


33 
	#LIBOPENCM3_CRC_H


	)

35 
	~<lib›ícm3/°m32/comm⁄/¸c_v2.h
>

	@libopencm3/include/libopencm3/stm32/f3/dac.h

31 #i‚de‡
LIBOPENCM3_DAC_H


32 
	#LIBOPENCM3_DAC_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dac_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f3/dma.h

31 #i‚de‡
LIBOPENCM3_DMA_H


32 
	#LIBOPENCM3_DMA_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dma_comm⁄_l1f013.h
>

	@libopencm3/include/libopencm3/stm32/f3/doc-stm32f3.h

	@libopencm3/include/libopencm3/stm32/f3/exti.h

36 #i‚de‡
LIBOPENCM3_EXTI_H


37 
	#LIBOPENCM3_EXTI_H


	)

40 
	~<lib›ícm3/°m32/comm⁄/exti_comm⁄_Æl.h
>

43 
	#EXTI_IMR2
 
	`MMIO32
(
EXTI_BASE
 + 0x18)

	)

44 
	#EXTI_EMR2
 
	`MMIO32
(
EXTI_BASE
 + 0x1C)

	)

45 
	#EXTI_RTSR2
 
	`MMIO32
(
EXTI_BASE
 + 0x20)

	)

46 
	#EXTI_FTSR2
 
	`MMIO32
(
EXTI_BASE
 + 0x24)

	)

47 
	#EXTI_SWIER2
 
	`MMIO32
(
EXTI_BASE
 + 0x28)

	)

48 
	#EXTI_PR2
 
	`MMIO32
(
EXTI_BASE
 + 0x2C)

	)

	@libopencm3/include/libopencm3/stm32/f3/flash.h

31 #i‚de‡
LIBOPENCM3_FLASH_H


32 
	#LIBOPENCM3_FLASH_H


	)

35 
	~<lib›ícm3/°m32/comm⁄/Êash_comm⁄_f234.h
>

39 
	#FLASH_AR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x14)

	)

40 
	#FLASH_OBR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x1C)

	)

41 
	#FLASH_WRPR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x20)

	)

45 
	#FLASH_ACR_PRFTBS
 (1 << 5)

	)

46 
	#FLASH_ACR_PRFTBE
 (1 << 4)

	)

47 
	#FLASH_ACR_HLFCYA
 (1 << 3)

	)

51 
	#FLASH_SR_BSY
 (1 << 0)

	)

52 
	#FLASH_SR_ERLYBSY
 (1 << 1)

	)

53 
	#FLASH_SR_PGPERR
 (1 << 2)

	)

54 
	#FLASH_SR_WRPRTERR
 (1 << 4)

	)

55 
	#FLASH_SR_EOP
 (1 << 5)

	)

59 
	#FLASH_CR_OBL_LAUNCH
 (1 << 13)

	)

60 
	#FLASH_CR_EOPIE
 (1 << 12)

	)

61 
	#FLASH_CR_ERRIE
 (1 << 10)

	)

62 
	#FLASH_CR_OPTWRE
 (1 << 9)

	)

63 
	#FLASH_CR_LOCK
 (1 << 7)

	)

64 
	#FLASH_CR_STRT
 (1 << 6)

	)

65 
	#FLASH_CR_OPTER
 (1 << 5)

	)

66 
	#FLASH_CR_OPTPG
 (1 << 4)

	)

67 
	#FLASH_CR_MER
 (1 << 2)

	)

68 
	#FLASH_CR_PER
 (1 << 1)

	)

69 
	#FLASH_CR_PG
 (1 << 0)

	)

71 
BEGIN_DECLS


73 
Êash_¥e„tch_íabÀ
();

74 
Êash_¥e„tch_dißbÀ
();

76 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f3/gpio.h

32 #i‚de‡
LIBOPENCM3_GPIO_H


33 
	#LIBOPENCM3_GPIO_H


	)

35 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_f234.h
>

	@libopencm3/include/libopencm3/stm32/f3/hrtim.h

31 #i‚de‡
LIBOPENCM3_HRTIM_H


32 
	#LIBOPENCM3_HRTIM_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/hπim_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f3/i2c.h

31 #i‚de‡
LIBOPENCM3_I2C_H


32 
	#LIBOPENCM3_I2C_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/i2c_comm⁄_v2.h
>

	@libopencm3/include/libopencm3/stm32/f3/iwdg.h

33 #i‚de‡
LIBOPENCM3_IWDG_H


34 
	#LIBOPENCM3_IWDG_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/iwdg_comm⁄_v2.h
>

	@libopencm3/include/libopencm3/stm32/f3/memorymap.h

22 #i‚de‡
LIBOPENCM3_MEMORYMAP_H


23 
	#LIBOPENCM3_MEMORYMAP_H


	)

25 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

30 
	#PERIPH_BASE
 (0x40000000U)

	)

31 
	#PERIPH_BASE_APB1
 (
PERIPH_BASE
 + 0x00000)

	)

32 
	#PERIPH_BASE_APB2
 (
PERIPH_BASE
 + 0x10000)

	)

33 
	#PERIPH_BASE_AHB1
 (
PERIPH_BASE
 + 0x20000)

	)

34 
	#PERIPH_BASE_AHB2
 (0x48000000U)

	)

35 
	#PERIPH_BASE_AHB3
 (0x50000000U)

	)

40 
	#TIM2_BASE
 (
PERIPH_BASE_APB1
 + 0x0000)

	)

41 
	#TIM3_BASE
 (
PERIPH_BASE_APB1
 + 0x0400)

	)

42 
	#TIM4_BASE
 (
PERIPH_BASE_APB1
 + 0x0800)

	)

44 
	#TIM6_BASE
 (
PERIPH_BASE_APB1
 + 0x1000)

	)

45 
	#TIM7_BASE
 (
PERIPH_BASE_APB1
 + 0x1400)

	)

47 
	#RTC_BASE
 (
PERIPH_BASE_APB1
 + 0x2800)

	)

48 
	#WWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x2c00)

	)

49 
	#IWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x3000)

	)

50 
	#I2S2_EXT_BASE
 (
PERIPH_BASE_APB1
 + 0x3400)

	)

51 
	#SPI2_BASE
 (
PERIPH_BASE_APB1
 + 0x3800)

	)

52 
	#SPI3_BASE
 (
PERIPH_BASE_APB1
 + 0x3c00)

	)

53 
	#I2S3_EXT_BASE
 (
PERIPH_BASE_APB1
 + 0x4000)

	)

54 
	#USART2_BASE
 (
PERIPH_BASE_APB1
 + 0x4400)

	)

55 
	#USART3_BASE
 (
PERIPH_BASE_APB1
 + 0x4800)

	)

56 
	#UART4_BASE
 (
PERIPH_BASE_APB1
 + 0x4c00)

	)

57 
	#UART5_BASE
 (
PERIPH_BASE_APB1
 + 0x5000)

	)

58 
	#I2C1_BASE
 (
PERIPH_BASE_APB1
 + 0x5400)

	)

59 
	#I2C2_BASE
 (
PERIPH_BASE_APB1
 + 0x5800)

	)

60 
	#USB_DEV_FS_BASE
 (
PERIPH_BASE_APB1
 + 0x5C00)

	)

61 
	#USB_PMA_BASE
 (
PERIPH_BASE_APB1
 + 0x6000)

	)

62 
	#BX_CAN1_BASE
 (
PERIPH_BASE_APB1
 + 0x6400)

	)

65 
	#POWER_CONTROL_BASE
 (
PERIPH_BASE_APB1
 + 0x7000)

	)

66 
	#DAC_BASE
 (
PERIPH_BASE_APB1
 + 0x7400)

	)

71 
	#HRTIM_BASE
 (
PERIPH_BASE_APB2
 + 0x7400)

	)

72 
	#TIM17_BASE
 (
PERIPH_BASE_APB2
 + 0x4800)

	)

73 
	#TIM16_BASE
 (
PERIPH_BASE_APB2
 + 0x4400)

	)

74 
	#TIM15_BASE
 (
PERIPH_BASE_APB2
 + 0x4000)

	)

76 
	#USART1_BASE
 (
PERIPH_BASE_APB2
 + 0x3800)

	)

77 
	#TIM8_BASE
 (
PERIPH_BASE_APB2
 + 0x3400)

	)

78 
	#SPI1_BASE
 (
PERIPH_BASE_APB2
 + 0x3000)

	)

79 
	#TIM1_BASE
 (
PERIPH_BASE_APB2
 + 0x2C00)

	)

81 
	#EXTI_BASE
 (
PERIPH_BASE_APB2
 + 0x0400)

	)

82 
	#SYSCFG_BASE
 (
PERIPH_BASE_APB2
 + 0x0000)

	)

83 
	#COMP_BASE
 (
PERIPH_BASE_APB2
 + 0x0000)

	)

84 
	#OPAMP_BASE
 (
PERIPH_BASE_APB2
 + 0x0000)

	)

88 
	#GPIO_PORT_A_BASE
 (
PERIPH_BASE_AHB2
 + 0x0000)

	)

89 
	#GPIO_PORT_B_BASE
 (
PERIPH_BASE_AHB2
 + 0x0400)

	)

90 
	#GPIO_PORT_C_BASE
 (
PERIPH_BASE_AHB2
 + 0x0800)

	)

91 
	#GPIO_PORT_D_BASE
 (
PERIPH_BASE_AHB2
 + 0x0C00)

	)

92 
	#GPIO_PORT_E_BASE
 (
PERIPH_BASE_AHB2
 + 0x1000)

	)

93 
	#GPIO_PORT_F_BASE
 (
PERIPH_BASE_AHB2
 + 0x1400)

	)

97 
	#TSC_BASE
 (
PERIPH_BASE_AHB1
 + 0x4000)

	)

99 
	#CRC_BASE
 (
PERIPH_BASE_AHB1
 + 0x3000)

	)

101 
	#FLASH_MEM_INTERFACE_BASE
 (
PERIPH_BASE_AHB1
 + 0x2000)

	)

103 
	#RCC_BASE
 (
PERIPH_BASE_AHB1
 + 0x1000)

	)

105 
	#DMA1_BASE
 (
PERIPH_BASE_AHB1
 + 0x0000)

	)

106 
	#DMA2_BASE
 (
PERIPH_BASE_AHB1
 + 0x0400)

	)

110 
	#ADC3_BASE
 (
PERIPH_BASE_AHB3
 + 0x0400)

	)

111 
	#ADC4_BASE
 (
PERIPH_BASE_AHB3
 + 0x0500)

	)

112 
	#ADC1_BASE
 (
PERIPH_BASE_AHB3
 + 0x0000)

	)

113 
	#ADC2_BASE
 (
PERIPH_BASE_AHB3
 + 0x0100)

	)

116 
	#DBGMCU_BASE
 (
PPBI_BASE
 + 0x00042000)

	)

119 
	#DESIG_FLASH_SIZE_BASE
 (0x1FFFF7CCU)

	)

120 
	#DESIG_UNIQUE_ID_BASE
 (0x1FFFF7ACU)

	)

121 
	#DESIG_UNIQUE_ID0
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
)

	)

122 
	#DESIG_UNIQUE_ID1
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 4)

	)

123 
	#DESIG_UNIQUE_ID2
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 8)

	)

126 
	#ST_VREFINT_CAL
 
	`MMIO16
(0x1FFFF7BA)

	)

127 
	#ST_TSENSE_CAL1_30C
 
	`MMIO16
(0x1FFFF7B8)

	)

128 
	#ST_TSENSE_CAL2_110C
 
	`MMIO16
(0x1FFFF7C2)

	)

	@libopencm3/include/libopencm3/stm32/f3/nvic.h

6 #i‚de‡
LIBOPENCM3_STM32_F3_NVIC_H


7 
	#LIBOPENCM3_STM32_F3_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_NVIC_WWDG_IRQ
 0

	)

17 
	#NVIC_PVD_IRQ
 1

	)

18 
	#NVIC_TAMP_STAMP_IRQ
 2

	)

19 
	#NVIC_RTC_WKUP_IRQ
 3

	)

20 
	#NVIC_FLASH_IRQ
 4

	)

21 
	#NVIC_RCC_IRQ
 5

	)

22 
	#NVIC_EXTI0_IRQ
 6

	)

23 
	#NVIC_EXTI1_IRQ
 7

	)

24 
	#NVIC_EXTI2_TSC_IRQ
 8

	)

25 
	#NVIC_EXTI3_IRQ
 9

	)

26 
	#NVIC_EXTI4_IRQ
 10

	)

27 
	#NVIC_DMA1_CHANNEL1_IRQ
 11

	)

28 
	#NVIC_DMA1_CHANNEL2_IRQ
 12

	)

29 
	#NVIC_DMA1_CHANNEL3_IRQ
 13

	)

30 
	#NVIC_DMA1_CHANNEL4_IRQ
 14

	)

31 
	#NVIC_DMA1_CHANNEL5_IRQ
 15

	)

32 
	#NVIC_DMA1_CHANNEL6_IRQ
 16

	)

33 
	#NVIC_DMA1_CHANNEL7_IRQ
 17

	)

34 
	#NVIC_ADC1_2_IRQ
 18

	)

35 
	#NVIC_USB_HP_CAN1_TX_IRQ
 19

	)

36 
	#NVIC_USB_LP_CAN1_RX0_IRQ
 20

	)

37 
	#NVIC_CAN1_RX1_IRQ
 21

	)

38 
	#NVIC_CAN1_SCE_IRQ
 22

	)

39 
	#NVIC_EXTI9_5_IRQ
 23

	)

40 
	#NVIC_TIM1_BRK_TIM15_IRQ
 24

	)

41 
	#NVIC_TIM1_UP_TIM16_IRQ
 25

	)

42 
	#NVIC_TIM1_TRG_COM_TIM17_IRQ
 26

	)

43 
	#NVIC_TIM1_CC_IRQ
 27

	)

44 
	#NVIC_TIM2_IRQ
 28

	)

45 
	#NVIC_TIM3_IRQ
 29

	)

46 
	#NVIC_TIM4_IRQ
 30

	)

47 
	#NVIC_I2C1_EV_EXTI23_IRQ
 31

	)

48 
	#NVIC_I2C1_ER_IRQ
 32

	)

49 
	#NVIC_I2C2_EV_EXTI24_IRQ
 33

	)

50 
	#NVIC_I2C2_ER_IRQ
 34

	)

51 
	#NVIC_SPI1_IRQ
 35

	)

52 
	#NVIC_SPI2_IRQ
 36

	)

53 
	#NVIC_USART1_EXTI25_IRQ
 37

	)

54 
	#NVIC_USART2_EXTI26_IRQ
 38

	)

55 
	#NVIC_USART3_EXTI28_IRQ
 39

	)

56 
	#NVIC_EXTI15_10_IRQ
 40

	)

57 
	#NVIC_RTC_ALARM_IRQ
 41

	)

58 
	#NVIC_USB_WKUP_A_IRQ
 42

	)

59 
	#NVIC_TIM8_BRK_IRQ
 43

	)

60 
	#NVIC_TIM8_UP_IRQ
 44

	)

61 
	#NVIC_TIM8_TRG_COM_IRQ
 45

	)

62 
	#NVIC_TIM8_CC_IRQ
 46

	)

63 
	#NVIC_ADC3_IRQ
 47

	)

64 
	#NVIC_RESERVED_1_IRQ
 48

	)

65 
	#NVIC_RESERVED_2_IRQ
 49

	)

66 
	#NVIC_RESERVED_3_IRQ
 50

	)

67 
	#NVIC_SPI3_IRQ
 51

	)

68 
	#NVIC_UART4_EXTI34_IRQ
 52

	)

69 
	#NVIC_UART5_EXTI35_IRQ
 53

	)

70 
	#NVIC_TIM6_DAC_IRQ
 54

	)

71 
	#NVIC_TIM7_IRQ
 55

	)

72 
	#NVIC_DMA2_CHANNEL1_IRQ
 56

	)

73 
	#NVIC_DMA2_CHANNEL2_IRQ
 57

	)

74 
	#NVIC_DMA2_CHANNEL3_IRQ
 58

	)

75 
	#NVIC_DMA2_CHANNEL4_IRQ
 59

	)

76 
	#NVIC_DMA2_CHANNEL5_IRQ
 60

	)

77 
	#NVIC_ETH_IRQ
 61

	)

78 
	#NVIC_RESERVED_4_IRQ
 62

	)

79 
	#NVIC_RESERVED_5_IRQ
 63

	)

80 
	#NVIC_COMP123_IRQ
 64

	)

81 
	#NVIC_COMP456_IRQ
 65

	)

82 
	#NVIC_COMP7_IRQ
 66

	)

83 
	#NVIC_HRTIM_MASTER_IRQ
 67

	)

84 
	#NVIC_HRTIM_TIMA_IRQ
 68

	)

85 
	#NVIC_HRTIM_TIMB_IRQ
 69

	)

86 
	#NVIC_HRTIM_TIMC_IRQ
 70

	)

87 
	#NVIC_HRTIM_TIMD_IRQ
 71

	)

88 
	#NVIC_HRTIM_TIME_IRQ
 72

	)

89 
	#NVIC_HRTIM_FLT_IRQ
 73

	)

90 
	#NVIC_USB_HP_IRQ
 74

	)

91 
	#NVIC_USB_LP_IRQ
 75

	)

92 
	#NVIC_USB_WKUP_IRQ
 76

	)

93 
	#NVIC_RESERVED_13_IRQ
 77

	)

94 
	#NVIC_RESERVED_14_IRQ
 78

	)

95 
	#NVIC_RESERVED_15_IRQ
 79

	)

96 
	#NVIC_RESERVED_16_IRQ
 80

	)

98 
	#NVIC_IRQ_COUNT
 81

	)

107 
BEGIN_DECLS


109 
nvic_wwdg_i§
();

110 
pvd_i§
();

111 
èmp_°amp_i§
();

112 
πc_wkup_i§
();

113 
Êash_i§
();

114 
rcc_i§
();

115 
exti0_i§
();

116 
exti1_i§
();

117 
exti2_tsc_i§
();

118 
exti3_i§
();

119 
exti4_i§
();

120 
dma1_ch™√l1_i§
();

121 
dma1_ch™√l2_i§
();

122 
dma1_ch™√l3_i§
();

123 
dma1_ch™√l4_i§
();

124 
dma1_ch™√l5_i§
();

125 
dma1_ch™√l6_i§
();

126 
dma1_ch™√l7_i§
();

127 
adc1_2_i§
();

128 
usb_hp_ˇn1_tx_i§
();

129 
usb_Õ_ˇn1_rx0_i§
();

130 
ˇn1_rx1_i§
();

131 
ˇn1_s˚_i§
();

132 
exti9_5_i§
();

133 
tim1_brk_tim15_i§
();

134 
tim1_up_tim16_i§
();

135 
tim1_åg_com_tim17_i§
();

136 
tim1_cc_i§
();

137 
tim2_i§
();

138 
tim3_i§
();

139 
tim4_i§
();

140 
i2c1_ev_exti23_i§
();

141 
i2c1_î_i§
();

142 
i2c2_ev_exti24_i§
();

143 
i2c2_î_i§
();

144 
•i1_i§
();

145 
•i2_i§
();

146 
ußπ1_exti25_i§
();

147 
ußπ2_exti26_i§
();

148 
ußπ3_exti28_i§
();

149 
exti15_10_i§
();

150 
πc_Æ¨m_i§
();

151 
usb_wkup_a_i§
();

152 
tim8_brk_i§
();

153 
tim8_up_i§
();

154 
tim8_åg_com_i§
();

155 
tim8_cc_i§
();

156 
adc3_i§
();

157 
ª£rved_1_i§
();

158 
ª£rved_2_i§
();

159 
ª£rved_3_i§
();

160 
•i3_i§
();

161 
u¨t4_exti34_i§
();

162 
u¨t5_exti35_i§
();

163 
tim6_dac_i§
();

164 
tim7_i§
();

165 
dma2_ch™√l1_i§
();

166 
dma2_ch™√l2_i§
();

167 
dma2_ch™√l3_i§
();

168 
dma2_ch™√l4_i§
();

169 
dma2_ch™√l5_i§
();

170 
ëh_i§
();

171 
ª£rved_4_i§
();

172 
ª£rved_5_i§
();

173 
comp123_i§
();

174 
comp456_i§
();

175 
comp7_i§
();

176 
hπim_ma°î_i§
();

177 
hπim_tima_i§
();

178 
hπim_timb_i§
();

179 
hπim_timc_i§
();

180 
hπim_timd_i§
();

181 
hπim_time_i§
();

182 
hπim_Êt_i§
();

183 
usb_hp_i§
();

184 
usb_Õ_i§
();

185 
usb_wkup_i§
();

186 
ª£rved_13_i§
();

187 
ª£rved_14_i§
();

188 
ª£rved_15_i§
();

189 
ª£rved_16_i§
();

191 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f3/pwr.h

41 #i‚de‡
LIBOPENCM3_PWR_H


42 
	#LIBOPENCM3_PWR_H


	)

44 
	~<lib›ícm3/°m32/comm⁄/pwr_comm⁄_v1.h
>

49 
	#PWR_CSR_EWUP3
 (1 << 10)

	)

51 
	#PWR_CSR_EWUP2
 (1 << 9)

	)

53 
	#PWR_CSR_EWUP1
 
PWR_CSR_EWUP


	)

	@libopencm3/include/libopencm3/stm32/f3/rcc.h

51 #i‚de‡
LIBOPENCM3_RCC_H


52 
	#LIBOPENCM3_RCC_H


	)

54 
	~<°dboﬁ.h
>

58 
	#RCC_CR
 
	`MMIO32
(
RCC_BASE
 + 0x00)

	)

59 
	#RCC_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x04)

	)

60 
	#RCC_CIR
 
	`MMIO32
(
RCC_BASE
 + 0x08)

	)

61 
	#RCC_APB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x0C)

	)

62 
	#RCC_APB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x10)

	)

63 
	#RCC_AHBENR
 
	`MMIO32
(
RCC_BASE
 + 0x14)

	)

64 
	#RCC_APB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x18)

	)

65 
	#RCC_APB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x1C)

	)

66 
	#RCC_BDCR
 
	`MMIO32
(
RCC_BASE
 + 0x20)

	)

67 
	#RCC_CSR
 
	`MMIO32
(
RCC_BASE
 + 0x24)

	)

68 
	#RCC_AHBRSTR
 
	`MMIO32
(
RCC_BASE
 + 0x28)

	)

69 
	#RCC_CFGR2
 
	`MMIO32
(
RCC_BASE
 + 0x2C)

	)

70 
	#RCC_CFGR3
 
	`MMIO32
(
RCC_BASE
 + 0x30)

	)

74 
	#RCC_CR_PLLRDY
 (1 << 25)

	)

75 
	#RCC_CR_PLLON
 (1 << 24)

	)

76 
	#RCC_CR_CSSON
 (1 << 19)

	)

77 
	#RCC_CR_HSEBYP
 (1 << 18)

	)

78 
	#RCC_CR_HSERDY
 (1 << 17)

	)

79 
	#RCC_CR_HSEON
 (1 << 16)

	)

82 
	#RCC_CR_HSIRDY
 (1 << 1)

	)

83 
	#RCC_CR_HSION
 (1 << 0)

	)

86 
	#RCC_CFGR_MCOF
 (1 << 28)

	)

87 
	#RCC_CFGR_I2SSRC
 (1 << 23)

	)

88 
	#RCC_CFGR_USBPRES
 (1 << 22)

	)

89 
	#RCC_CFGR_PLLXTPRE
 (1 << 17)

	)

90 
	#RCC_CFGR_PLLSRC
 (1 << 16)

	)

93 
	#RCC_CFGR_MCO_SHIFT
 24

	)

94 
	#RCC_CFGR_MCO_MASK
 0x7

	)

95 
	#RCC_CFGR_MCO_NOCLK
 0x0

	)

97 
	#RCC_CFGR_MCO_LSI
 0x2

	)

98 
	#RCC_CFGR_MCO_LSE
 0x3

	)

99 
	#RCC_CFGR_MCO_SYSCLK
 0x4

	)

100 
	#RCC_CFGR_MCO_HSI
 0x5

	)

101 
	#RCC_CFGR_MCO_HSE
 0x6

	)

102 
	#RCC_CFGR_MCO_PLL
 0x7

	)

105 
	#RCC_CFGR_PLLSRC_HSI_DIV2
 0

	)

106 
	#RCC_CFGR_PLLSRC_HSE_PREDIV
 1

	)

109 
	#RCC_CFGR_PLLMUL_SHIFT
 18

	)

110 
	#RCC_CFGR_PLLMUL_MASK
 0xF

	)

111 
	#RCC_CFGR_PLLMUL_MUL2
 0x0

	)

112 
	#RCC_CFGR_PLLMUL_MUL3
 0x1

	)

113 
	#RCC_CFGR_PLLMUL_MUL4
 0x2

	)

114 
	#RCC_CFGR_PLLMUL_MUL5
 0x3

	)

115 
	#RCC_CFGR_PLLMUL_MUL6
 0x4

	)

116 
	#RCC_CFGR_PLLMUL_MUL7
 0x5

	)

117 
	#RCC_CFGR_PLLMUL_MUL8
 0x6

	)

118 
	#RCC_CFGR_PLLMUL_MUL9
 0x7

	)

119 
	#RCC_CFGR_PLLMUL_MUL10
 0x8

	)

120 
	#RCC_CFGR_PLLMUL_MUL11
 0x9

	)

121 
	#RCC_CFGR_PLLMUL_MUL12
 0xA

	)

122 
	#RCC_CFGR_PLLMUL_MUL13
 0xB

	)

123 
	#RCC_CFGR_PLLMUL_MUL14
 0xC

	)

124 
	#RCC_CFGR_PLLMUL_MUL15
 0xD

	)

125 
	#RCC_CFGR_PLLMUL_MUL16
 0xE

	)

128 
	#RCC_CFGR_PPRE2_SHIFT
 11

	)

129 
	#RCC_CFGR_PPRE2_MASK
 0x7

	)

131 
	#RCC_CFGR_PPRE2_DIV_NONE
 0x0

	)

133 
	#RCC_CFGR_PPRE2_DIV_2
 0x4

	)

134 
	#RCC_CFGR_PPRE2_DIV_4
 0x5

	)

135 
	#RCC_CFGR_PPRE2_DIV_8
 0x6

	)

136 
	#RCC_CFGR_PPRE2_DIV_16
 0x7

	)

139 
	#RCC_CFGR_PPRE1_SHIFT
 8

	)

140 
	#RCC_CFGR_PPRE1_MASK
 0x7

	)

142 
	#RCC_CFGR_PPRE1_DIV_NONE
 0x0

	)

143 
	#RCC_CFGR_PPRE1_DIV_2
 0x4

	)

144 
	#RCC_CFGR_PPRE1_DIV_4
 0x5

	)

145 
	#RCC_CFGR_PPRE1_DIV_8
 0x6

	)

146 
	#RCC_CFGR_PPRE1_DIV_16
 0x7

	)

149 
	#RCC_CFGR_HPRE_SHIFT
 4

	)

150 
	#RCC_CFGR_HPRE_MASK
 0xf

	)

152 
	#RCC_CFGR_HPRE_DIV_NONE
 0x0

	)

153 
	#RCC_CFGR_HPRE_DIV_2
 0x8

	)

154 
	#RCC_CFGR_HPRE_DIV_4
 0x9

	)

155 
	#RCC_CFGR_HPRE_DIV_8
 0xA

	)

156 
	#RCC_CFGR_HPRE_DIV_16
 0xB

	)

157 
	#RCC_CFGR_HPRE_DIV_64
 0xC

	)

158 
	#RCC_CFGR_HPRE_DIV_128
 0xD

	)

159 
	#RCC_CFGR_HPRE_DIV_256
 0xE

	)

160 
	#RCC_CFGR_HPRE_DIV_512
 0xF

	)

163 
	#RCC_CFGR_SWS_SHIFT
 2

	)

164 
	#RCC_CFGR_SWS_MASK
 0x3

	)

165 
	#RCC_CFGR_SWS_HSI
 0x0

	)

166 
	#RCC_CFGR_SWS_HSE
 0x1

	)

167 
	#RCC_CFGR_SWS_PLL
 0x2

	)

170 
	#RCC_CFGR_SW_SHIFT
 0

	)

171 
	#RCC_CFGR_SW_HSI
 0x0

	)

172 
	#RCC_CFGR_SW_HSE
 0x1

	)

173 
	#RCC_CFGR_SW_PLL
 0x2

	)

178 
	#RCC_CIR_CSSC
 (1 << 23)

	)

181 
	#RCC_CIR_PLLRDYC
 (1 << 20)

	)

182 
	#RCC_CIR_HSERDYC
 (1 << 19)

	)

183 
	#RCC_CIR_HSIRDYC
 (1 << 18)

	)

184 
	#RCC_CIR_LSERDYC
 (1 << 17)

	)

185 
	#RCC_CIR_LSIRDYC
 (1 << 16)

	)

188 
	#RCC_CIR_PLLRDYIE
 (1 << 12)

	)

189 
	#RCC_CIR_HSERDYIE
 (1 << 11)

	)

190 
	#RCC_CIR_HSIRDYIE
 (1 << 10)

	)

191 
	#RCC_CIR_LSERDYIE
 (1 << 9)

	)

192 
	#RCC_CIR_LSIRDYIE
 (1 << 8)

	)

195 
	#RCC_CIR_CSSF
 (1 << 7)

	)

198 
	#RCC_CIR_PLLRDYF
 (1 << 4)

	)

199 
	#RCC_CIR_HSERDYF
 (1 << 3)

	)

200 
	#RCC_CIR_HSIRDYF
 (1 << 2)

	)

201 
	#RCC_CIR_LSERDYF
 (1 << 1)

	)

202 
	#RCC_CIR_LSIRDYF
 (1 << 0)

	)

206 
	#RCC_APB2RSTR_TIM20RST
 (1 << 20)

	)

207 
	#RCC_APB2RSTR_TIM17RST
 (1 << 18)

	)

208 
	#RCC_APB2RSTR_TIM16RST
 (1 << 17)

	)

209 
	#RCC_APB2RSTR_TIM15RST
 (1 << 16)

	)

210 
	#RCC_APB2RSTR_SPI4RST
 (1 << 15)

	)

211 
	#RCC_APB2RSTR_USART1RST
 (1 << 14)

	)

212 
	#RCC_APB2RSTR_TIM8RST
 (1 << 13)

	)

213 
	#RCC_APB2RSTR_SPI1RST
 (1 << 12)

	)

214 
	#RCC_APB2RSTR_TIM1RST
 (1 << 11)

	)

215 
	#RCC_APB2RSTR_SYSCFGRST
 (1 << 0)

	)

219 
	#RCC_APB1RSTR_I2C3RST
 (1 << 30)

	)

220 
	#RCC_APB1RSTR_DAC1RST
 (1 << 29)

	)

221 
	#RCC_APB1RSTR_PWRRST
 (1 << 28)

	)

222 
	#RCC_APB1RSTR_DAC2RST
 (1 << 26)

	)

223 
	#RCC_APB1RSTR_CAN1RST
 (1 << 25)

	)

224 
	#RCC_APB1RSTR_USBRST
 (1 << 23)

	)

225 
	#RCC_APB1RSTR_I2C2RST
 (1 << 22)

	)

226 
	#RCC_APB1RSTR_I2C1RST
 (1 << 21)

	)

227 
	#RCC_APB1RSTR_UART5RST
 (1 << 20)

	)

228 
	#RCC_APB1RSTR_UART4RST
 (1 << 19)

	)

229 
	#RCC_APB1RSTR_USART3RST
 (1 << 18)

	)

230 
	#RCC_APB1RSTR_USART2RST
 (1 << 17)

	)

231 
	#RCC_APB1RSTR_SPI3RST
 (1 << 15)

	)

232 
	#RCC_APB1RSTR_SPI2RST
 (1 << 14)

	)

233 
	#RCC_APB1RSTR_WWDGRST
 (1 << 11)

	)

234 
	#RCC_APB1RSTR_TIM7RST
 (1 << 5)

	)

235 
	#RCC_APB1RSTR_TIM6RST
 (1 << 4)

	)

236 
	#RCC_APB1RSTR_TIM4RST
 (1 << 2)

	)

237 
	#RCC_APB1RSTR_TIM3RST
 (1 << 1)

	)

238 
	#RCC_APB1RSTR_TIM2RST
 (1 << 0)

	)

241 
	#RCC_AHBENR_ADC34EN
 (1 << 29)

	)

242 
	#RCC_AHBENR_ADC12EN
 (1 << 28)

	)

243 
	#RCC_AHBENR_TSCEN
 (1 << 24)

	)

244 
	#RCC_AHBENR_IOPGEN
 (1 << 23)

	)

245 
	#RCC_AHBENR_IOPFEN
 (1 << 22)

	)

246 
	#RCC_AHBENR_IOPEEN
 (1 << 21)

	)

247 
	#RCC_AHBENR_IOPDEN
 (1 << 20)

	)

248 
	#RCC_AHBENR_IOPCEN
 (1 << 19)

	)

249 
	#RCC_AHBENR_IOPBEN
 (1 << 18)

	)

250 
	#RCC_AHBENR_IOPAEN
 (1 << 17)

	)

251 
	#RCC_AHBENR_IOPHEN
 (1 << 16)

	)

252 
	#RCC_AHBENR_CRCEN
 (1 << 6)

	)

253 
	#RCC_AHBENR_FMCEN
 (1 << 5)

	)

254 
	#RCC_AHBENR_FLITFEN
 (1 << 4)

	)

255 
	#RCC_AHBENR_SRAMEN
 (1 << 2)

	)

256 
	#RCC_AHBENR_DMA2EN
 (1 << 1)

	)

257 
	#RCC_AHBENR_DMA1EN
 (1 << 0)

	)

261 
	#RCC_APB2ENR_TIM20EN
 (1 << 20)

	)

262 
	#RCC_APB2ENR_TIM17EN
 (1 << 18)

	)

263 
	#RCC_APB2ENR_TIM16EN
 (1 << 17)

	)

264 
	#RCC_APB2ENR_TIM15EN
 (1 << 16)

	)

265 
	#RCC_APB2ENR_SPI4EN
 (1 << 15)

	)

266 
	#RCC_APB2ENR_USART1EN
 (1 << 14)

	)

267 
	#RCC_APB2ENR_TIM8EN
 (1 << 13)

	)

268 
	#RCC_APB2ENR_SPI1EN
 (1 << 12)

	)

269 
	#RCC_APB2ENR_TIM1EN
 (1 << 11)

	)

270 
	#RCC_APB2ENR_SYSCFGEN
 (1 << 0)

	)

274 
	#RCC_APB1ENR_I2C3EN
 (1 << 30)

	)

275 
	#RCC_APB1ENR_DAC1EN
 (1 << 29)

	)

276 
	#RCC_APB1ENR_PWREN
 (1 << 28)

	)

277 
	#RCC_APB1ENR_DAC2EN
 (1 << 26)

	)

278 
	#RCC_APB1ENR_CANEN
 (1 << 25)

	)

279 
	#RCC_APB1ENR_USBEN
 (1 << 23)

	)

280 
	#RCC_APB1ENR_I2C2EN
 (1 << 22)

	)

281 
	#RCC_APB1ENR_I2C1EN
 (1 << 21)

	)

282 
	#RCC_APB1ENR_USART5EN
 (1 << 20)

	)

283 
	#RCC_APB1ENR_USART4EN
 (1 << 19)

	)

284 
	#RCC_APB1ENR_USART3EN
 (1 << 18)

	)

285 
	#RCC_APB1ENR_USART2EN
 (1 << 17)

	)

286 
	#RCC_APB1ENR_SPI3EN
 (1 << 15)

	)

287 
	#RCC_APB1ENR_SPI2EN
 (1 << 14)

	)

288 
	#RCC_APB1ENR_WWDGEN
 (1 << 11)

	)

289 
	#RCC_APB1ENR_TIM7EN
 (1 << 5)

	)

290 
	#RCC_APB1ENR_TIM6EN
 (1 << 4)

	)

291 
	#RCC_APB1ENR_TIM4EN
 (1 << 2)

	)

292 
	#RCC_APB1ENR_TIM3EN
 (1 << 1)

	)

293 
	#RCC_APB1ENR_TIM2EN
 (1 << 0)

	)

297 
	#RCC_BDCR_BDRST
 (1 << 16)

	)

298 
	#RCC_BDCR_RTCEN
 (1 << 15)

	)

301 
	#RCC_BDCR_LSEBYP
 (1 << 2)

	)

302 
	#RCC_BDCR_LSERDY
 (1 << 1)

	)

303 
	#RCC_BDCR_LSEON
 (1 << 0)

	)

307 
	#RCC_CSR_LPWRRSTF
 (1 << 31)

	)

308 
	#RCC_CSR_WWDGRSTF
 (1 << 30)

	)

309 
	#RCC_CSR_IWDGRSTF
 (1 << 29)

	)

310 
	#RCC_CSR_SFTRSTF
 (1 << 28)

	)

311 
	#RCC_CSR_PORRSTF
 (1 << 27)

	)

312 
	#RCC_CSR_PINRSTF
 (1 << 26)

	)

313 
	#RCC_CSR_OBLRSTF
 (1 << 25)

	)

314 
	#RCC_CSR_RMVF
 (1 << 24)

	)

315 
	#RCC_CSR_LSIRDY
 (1 << 1)

	)

316 
	#RCC_CSR_LSION
 (1 << 0)

	)

319 
	#RCC_AHBRSTR_ADC34RST
 (1 << 29)

	)

320 
	#RCC_AHBRSTR_ADC12RST
 (1 << 28)

	)

321 
	#RCC_AHBRSTR_TSCRST
 (1 << 24)

	)

322 
	#RCC_AHBRSTR_IOPGRST
 (1 << 23)

	)

323 
	#RCC_AHBRSTR_IOPFRST
 (1 << 22)

	)

324 
	#RCC_AHBRSTR_IOPERST
 (1 << 21)

	)

325 
	#RCC_AHBRSTR_IOPDRST
 (1 << 20)

	)

326 
	#RCC_AHBRSTR_IOPCRST
 (1 << 19)

	)

327 
	#RCC_AHBRSTR_IOPBRST
 (1 << 18)

	)

328 
	#RCC_AHBRSTR_IOPARST
 (1 << 17)

	)

329 
	#RCC_AHBRSTR_IOPHRST
 (1 << 16)

	)

330 
	#RCC_AHBRSTR_FMCRST
 (1 << 5)

	)

334 
	#RCC_CFGR2_ADC34PRES_SHIFT
 9

	)

335 
	#RCC_CFGR2_ADC12PRES_SHIFT
 4

	)

336 
	#RCC_CFGR2_ADCxPRES_MASK
 0x1f

	)

337 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_1
 0x10

	)

338 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_2
 0x11

	)

339 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_4
 0x12

	)

340 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_6
 0x13

	)

341 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_8
 0x14

	)

342 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_10
 0x15

	)

343 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_12
 0x16

	)

344 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_16
 0x17

	)

345 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_32
 0x18

	)

346 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_64
 0x19

	)

347 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_128
 0x1A

	)

348 
	#RCC_CFGR2_ADCxPRES_PLL_CLK_DIV_256
 0x1B

	)

350 
	#RCC_CFGR2_PREDIV
 0xf

	)

354 
	#RCC_CFGR2_PREDIV_NODIV
 0x0

	)

355 
	#RCC_CFGR2_PREDIV_DIV2
 0x1

	)

356 
	#RCC_CFGR2_PREDIV_DIV3
 0x2

	)

357 
	#RCC_CFGR2_PREDIV_DIV4
 0x3

	)

358 
	#RCC_CFGR2_PREDIV_DIV5
 0x4

	)

359 
	#RCC_CFGR2_PREDIV_DIV6
 0x5

	)

360 
	#RCC_CFGR2_PREDIV_DIV7
 0x6

	)

361 
	#RCC_CFGR2_PREDIV_DIV8
 0x7

	)

362 
	#RCC_CFGR2_PREDIV_DIV9
 0x8

	)

363 
	#RCC_CFGR2_PREDIV_DIV10
 0x9

	)

364 
	#RCC_CFGR2_PREDIV_DIV11
 0xa

	)

365 
	#RCC_CFGR2_PREDIV_DIV12
 0xb

	)

366 
	#RCC_CFGR2_PREDIV_DIV13
 0xc

	)

367 
	#RCC_CFGR2_PREDIV_DIV14
 0xd

	)

368 
	#RCC_CFGR2_PREDIV_DIV15
 0xe

	)

369 
	#RCC_CFGR2_PREDIV_DIV16
 0xf

	)

373 
	#RCC_CFGR3_TIM8SW
 (1 << 9)

	)

374 
	#RCC_CFGR3_TIM1SW
 (1 << 8)

	)

375 
	#RCC_CFGR3_I2C2SW
 (1 << 5)

	)

376 
	#RCC_CFGR3_I2C1SW
 (1 << 4)

	)

378 
	#RCC_CFGR3_UART5SW_SHIFT
 22

	)

379 
	#RCC_CFGR3_UART5SW_PCLK
 0x0

	)

380 
	#RCC_CFGR3_UART5SW_SYSCLK
 0x1

	)

381 
	#RCC_CFGR3_UART5SW_LSE
 0x2

	)

382 
	#RCC_CFGR3_UART5SW_HSI
 0x3

	)

384 
	#RCC_CFGR3_UART4SW_SHIFT
 20

	)

385 
	#RCC_CFGR3_UART4SW_PCLK
 0x0

	)

386 
	#RCC_CFGR3_UART4SW_SYSCLK
 0x1

	)

387 
	#RCC_CFGR3_UART4SW_LSE
 0x2

	)

388 
	#RCC_CFGR3_UART4SW_HSI
 0x3

	)

390 
	#RCC_CFGR3_UART3SW_SHIFT
 18

	)

391 
	#RCC_CFGR3_UART3SW_PCLK
 0x0

	)

392 
	#RCC_CFGR3_UART3SW_SYSCLK
 0x1

	)

393 
	#RCC_CFGR3_UART3SW_LSE
 0x2

	)

394 
	#RCC_CFGR3_UART3SW_HSI
 0x3

	)

396 
	#RCC_CFGR3_UART2SW_SHIFT
 16

	)

397 
	#RCC_CFGR3_UART2SW_PCLK
 0x0

	)

398 
	#RCC_CFGR3_UART2SW_SYSCLK
 0x1

	)

399 
	#RCC_CFGR3_UART2SW_LSE
 0x2

	)

400 
	#RCC_CFGR3_UART2SW_HSI
 0x3

	)

402 
	#RCC_CFGR3_UART1SW_SHIFT
 0

	)

403 
	#RCC_CFGR3_UART1SW_PCLK
 0x0

	)

404 
	#RCC_CFGR3_UART1SW_SYSCLK
 0x1

	)

405 
	#RCC_CFGR3_UART1SW_LSE
 0x2

	)

406 
	#RCC_CFGR3_UART1SW_HSI
 0x3

	)

410 
uöt32_t
 
rcc_ahb_‰equícy
;

411 
uöt32_t
 
rcc_≠b1_‰equícy
;

412 
uöt32_t
 
rcc_≠b2_‰equícy
;

416 
	ercc_˛ock_hsi
 {

417 
	mRCC_CLOCK_HSI_48MHZ
,

418 
	mRCC_CLOCK_HSI_64MHZ
,

419 
	mRCC_CLOCK_HSI_END


421 
	ercc_˛ock_h£8
 {

422 
	mRCC_CLOCK_HSE8_72MHZ
,

423 
	mRCC_CLOCK_HSE8_END


427 
	srcc_˛ock_sˇÀ
 {

428 
uöt8_t
 
	m∂l§c
;

429 
uöt8_t
 
	m∂lmul
;

430 
uöt8_t
 
	m∂ldiv
;

431 
boﬁ
 
	musbdiv1
;

432 
uöt32_t
 
	mÊash_waô°©es
;

433 
uöt8_t
 
	mh¥e
;

434 
uöt8_t
 
	mµª1
;

435 
uöt8_t
 
	mµª2
;

436 
uöt8_t
 
	mpowî_ßve
;

437 
uöt32_t
 
	mahb_‰equícy
;

438 
uöt32_t
 
	m≠b1_‰equícy
;

439 
uöt32_t
 
	m≠b2_‰equícy
;

442 c⁄° 
rcc_˛ock_sˇÀ
 
rcc_c⁄figs
[
RCC_CLOCK_HSI_END
];

443 c⁄° 
rcc_˛ock_sˇÀ
 
rcc_h£8mhz_c⁄figs
[
RCC_CLOCK_HSE8_END
];

445 
	ercc_osc
 {

446 
	mRCC_PLL
, 
	mRCC_HSE
, 
	mRCC_HSI
, 
	mRCC_LSE
, 
	mRCC_LSI


449 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

457 
	ercc_≥rùh_˛kí
 {

459 
	mRCC_DMA1
 = 
_REG_BIT
(0x14, 0),

460 
	mRCC_DMA2
 = 
_REG_BIT
(0x14, 1),

461 
	mRCC_SRAM
 = 
_REG_BIT
(0x14, 2),

462 
	mRCC_FLTIF
 = 
_REG_BIT
(0x14, 4),

463 
	mRCC_FMC
 = 
_REG_BIT
(0x14, 5),

464 
	mRCC_CRC
 = 
_REG_BIT
(0x14, 6),

465 
	mRCC_GPIOH
 = 
_REG_BIT
(0x14, 16),

466 
	mRCC_GPIOA
 = 
_REG_BIT
(0x14, 17),

467 
	mRCC_GPIOB
 = 
_REG_BIT
(0x14, 18),

468 
	mRCC_GPIOC
 = 
_REG_BIT
(0x14, 19),

469 
	mRCC_GPIOD
 = 
_REG_BIT
(0x14, 20),

470 
	mRCC_GPIOE
 = 
_REG_BIT
(0x14, 21),

471 
	mRCC_GPIOF
 = 
_REG_BIT
(0x14, 22),

472 
	mRCC_GPIOG
 = 
_REG_BIT
(0x14, 23),

473 
	mRCC_TSC
 = 
_REG_BIT
(0x14, 24),

474 
	mRCC_ADC12
 = 
_REG_BIT
(0x14, 28),

475 
	mRCC_ADC34
 = 
_REG_BIT
(0x14, 29),

478 
	mRCC_SYSCFG
 = 
_REG_BIT
(0x18, 0),

479 
	mRCC_ADC
 = 
_REG_BIT
(0x18, 9),

480 
	mRCC_TIM1
 = 
_REG_BIT
(0x18, 11),

481 
	mRCC_SPI1
 = 
_REG_BIT
(0x18, 12),

482 
	mRCC_TIM8
 = 
_REG_BIT
(0x18, 13),

483 
	mRCC_USART1
 = 
_REG_BIT
(0x18, 14),

484 
	mRCC_SPI4
 = 
_REG_BIT
(0x18, 15),

485 
	mRCC_TIM15
 = 
_REG_BIT
(0x18, 16),

486 
	mRCC_TIM16
 = 
_REG_BIT
(0x18, 17),

487 
	mRCC_TIM17
 = 
_REG_BIT
(0x18, 18),

488 
	mRCC_TIM19
 = 
_REG_BIT
(0x18, 19),

489 
	mRCC_TIM20
 = 
_REG_BIT
(0x18, 20),

490 
	mRCC_DBGMCU
 = 
_REG_BIT
(0x18, 22),

491 
	mRCC_SDADC1
 = 
_REG_BIT
(0x18, 24),

492 
	mRCC_SDADC2
 = 
_REG_BIT
(0x18, 25),

493 
	mRCC_SDADC3
 = 
_REG_BIT
(0x18, 26),

494 
	mRCC_HRTIM
 = 
_REG_BIT
(0x18, 29),

497 
	mRCC_TIM2
 = 
_REG_BIT
(0x1C, 0),

498 
	mRCC_TIM3
 = 
_REG_BIT
(0x1C, 1),

499 
	mRCC_TIM4
 = 
_REG_BIT
(0x1C, 2),

500 
	mRCC_TIM5
 = 
_REG_BIT
(0x1C, 3),

501 
	mRCC_TIM6
 = 
_REG_BIT
(0x1C, 4),

502 
	mRCC_TIM7
 = 
_REG_BIT
(0x1C, 5),

503 
	mRCC_TIM12
 = 
_REG_BIT
(0x1C, 6),

504 
	mRCC_TIM13
 = 
_REG_BIT
(0x1C, 7),

505 
	mRCC_TIM14
 = 
_REG_BIT
(0x1C, 8),

506 
	mRCC_TIM18
 = 
_REG_BIT
(0x1C, 9),

507 
	mRCC_WWDG
 = 
_REG_BIT
(0x1C, 11),

508 
	mRCC_SPI2
 = 
_REG_BIT
(0x1C, 14),

509 
	mRCC_SPI3
 = 
_REG_BIT
(0x1C, 15),

510 
	mRCC_USART2
 = 
_REG_BIT
(0x1C, 17),

511 
	mRCC_USART3
 = 
_REG_BIT
(0x1C, 18),

512 
	mRCC_UART4
 = 
_REG_BIT
(0x1C, 19),

513 
	mRCC_UART5
 = 
_REG_BIT
(0x1C, 20),

514 
	mRCC_I2C1
 = 
_REG_BIT
(0x1C, 21),

515 
	mRCC_I2C2
 = 
_REG_BIT
(0x1C, 22),

516 
	mRCC_USB
 = 
_REG_BIT
(0x1C, 23),

517 
	mRCC_CAN
 = 
_REG_BIT
(0x1C, 25),

518 
	mRCC_CAN1
 = 
_REG_BIT
(0x1C, 25),

519 
	mRCC_DAC2
 = 
_REG_BIT
(0x1C, 26),

520 
	mRCC_PWR
 = 
_REG_BIT
(0x1C, 28),

521 
	mRCC_DAC1
 = 
_REG_BIT
(0x1C, 29),

522 
	mRCC_CEC
 = 
_REG_BIT
(0x1C, 30),

523 
	mRCC_I2C3
 = 
_REG_BIT
(0x1C, 30),

526 
	ercc_≥rùh_r°
 {

528 
	mRST_SYSCFG
 = 
_REG_BIT
(0x0C, 0),

529 
	mRST_ADC
 = 
_REG_BIT
(0x0C, 9),

530 
	mRST_TIM1
 = 
_REG_BIT
(0x0C, 11),

531 
	mRST_SPI1
 = 
_REG_BIT
(0x0C, 12),

532 
	mRST_TIM8
 = 
_REG_BIT
(0x0C, 13),

533 
	mRST_USART1
 = 
_REG_BIT
(0x0C, 14),

534 
	mRST_SPI4
 = 
_REG_BIT
(0x0C, 15),

535 
	mRST_TIM15
 = 
_REG_BIT
(0x0C, 16),

536 
	mRST_TIM16
 = 
_REG_BIT
(0x0C, 17),

537 
	mRST_TIM17
 = 
_REG_BIT
(0x0C, 18),

538 
	mRST_TIM19
 = 
_REG_BIT
(0x0C, 19),

539 
	mRST_TIM20
 = 
_REG_BIT
(0x0C, 20),

540 
	mRST_SDADC1
 = 
_REG_BIT
(0x0C, 24),

541 
	mRST_SDADC2
 = 
_REG_BIT
(0x0C, 25),

542 
	mRST_SDADC3
 = 
_REG_BIT
(0x0C, 26),

543 
	mRST_HRTIM
 = 
_REG_BIT
(0x0C, 29),

546 
	mRST_TIM2
 = 
_REG_BIT
(0x10, 0),

547 
	mRST_TIM3
 = 
_REG_BIT
(0x10, 1),

548 
	mRST_TIM4
 = 
_REG_BIT
(0x10, 2),

549 
	mRST_TIM5
 = 
_REG_BIT
(0x10, 3),

550 
	mRST_TIM6
 = 
_REG_BIT
(0x10, 4),

551 
	mRST_TIM7
 = 
_REG_BIT
(0x10, 5),

552 
	mRST_TIM12
 = 
_REG_BIT
(0x10, 6),

553 
	mRST_TIM13
 = 
_REG_BIT
(0x10, 7),

554 
	mRST_TIM14
 = 
_REG_BIT
(0x10, 8),

555 
	mRST_TIM18
 = 
_REG_BIT
(0x10, 9),

556 
	mRST_WWDG
 = 
_REG_BIT
(0x10, 11),

557 
	mRST_SPI2
 = 
_REG_BIT
(0x10, 14),

558 
	mRST_SPI3
 = 
_REG_BIT
(0x10, 15),

559 
	mRST_USART2
 = 
_REG_BIT
(0x10, 17),

560 
	mRST_USART3
 = 
_REG_BIT
(0x10, 18),

561 
	mRST_UART4
 = 
_REG_BIT
(0x10, 19),

562 
	mRST_UART5
 = 
_REG_BIT
(0x10, 20),

563 
	mRST_I2C1
 = 
_REG_BIT
(0x10, 21),

564 
	mRST_I2C2
 = 
_REG_BIT
(0x10, 22),

565 
	mRST_USB
 = 
_REG_BIT
(0x10, 23),

566 
	mRST_CAN
 = 
_REG_BIT
(0x10, 25),

567 
	mRST_CAN1
 = 
_REG_BIT
(0x10, 25),

568 
	mRST_DAC2
 = 
_REG_BIT
(0x10, 26),

569 
	mRST_PWR
 = 
_REG_BIT
(0x10, 28),

570 
	mRST_DAC1
 = 
_REG_BIT
(0x10, 29),

571 
	mRST_CEC
 = 
_REG_BIT
(0x10, 30),

572 
	mRST_I2C3
 = 
_REG_BIT
(0x10, 30),

575 
	mRST_FMC
 = 
_REG_BIT
(0x28, 5),

576 
	mRST_GPIOH
 = 
_REG_BIT
(0x28, 16),

577 
	mRST_GPIOA
 = 
_REG_BIT
(0x28, 17),

578 
	mRST_GPIOB
 = 
_REG_BIT
(0x28, 18),

579 
	mRST_GPIOC
 = 
_REG_BIT
(0x28, 19),

580 
	mRST_GPIOD
 = 
_REG_BIT
(0x28, 20),

581 
	mRST_GPIOE
 = 
_REG_BIT
(0x28, 21),

582 
	mRST_GPIOF
 = 
_REG_BIT
(0x28, 22),

583 
	mRST_GPIOG
 = 
_REG_BIT
(0x28, 23),

584 
	mRST_TSC
 = 
_REG_BIT
(0x28, 24),

585 
	mRST_ADC12
 = 
_REG_BIT
(0x28, 28),

586 
	mRST_ADC34
 = 
_REG_BIT
(0x28, 29),

589 
	mRST_BD
 = 
_REG_BIT
(0x20, 16),

592 #unde‡
_REG_BIT


594 
	~<lib›ícm3/°m32/comm⁄/rcc_comm⁄_Æl.h
>

596 
BEGIN_DECLS


598 
rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
);

599 
rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
);

600 
rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
);

601 
rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
);

602 
rcc_css_öt_˛ór
();

603 
rcc_css_öt_Êag
();

604 
rcc_waô_f‹_osc_nŸ_ªady
(
rcc_osc
 
osc
);

605 
rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
);

606 
rcc_osc_⁄
(
rcc_osc
 
osc
);

607 
rcc_osc_off
(
rcc_osc
 
osc
);

608 
rcc_css_íabÀ
();

609 
rcc_css_dißbÀ
();

610 
rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
);

611 
rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
);

612 
rcc_£t_µª2
(
uöt32_t
 
µª2
);

613 
rcc_£t_µª1
(
uöt32_t
 
µª1
);

614 
rcc_£t_h¥e
(
uöt32_t
 
h¥e
);

615 
rcc_£t_¥ediv
(
uöt32_t
 
¥ediv
);

616 
rcc_£t_∂l_mu…ùlõr
(
uöt32_t
 
∂l
);

617 
uöt32_t
 
rcc_gë_sy°em_˛ock_sour˚
();

618 
rcc_backupdomaö_ª£t
();

619 
rcc_˛ock_£tup_∂l
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
);

620 
rcc_˛ock_£tup_hsi
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
);

621 
rcc_£t_i2c_˛ock_hsi
(
uöt32_t
 
i2c
);

622 
rcc_£t_i2c_˛ock_sys˛k
(
uöt32_t
 
i2c
);

623 
uöt32_t
 
rcc_gë_i2c_˛ocks
();

624 
rcc_usb_¥esˇÀ_1_5
();

625 
rcc_usb_¥esˇÀ_1
();

626 
rcc_adc_¥esˇÀ
(
uöt32_t
 
¥esˇÀ1
, uöt32_à
¥esˇÀ2
);

628 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f3/rtc.h

35 #i‚de‡
LIBOPENCM3_RTC_F3_H


36 
	#LIBOPENCM3_RTC_F3_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/πc_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f3/spi.h

31 #i‚de‡
LIBOPENCM3_SPI_H


32 
	#LIBOPENCM3_SPI_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_v2.h
>

	@libopencm3/include/libopencm3/stm32/f3/st_usbfs.h

21 #i‚de‡
LIBOPENCM3_ST_USBFS_H


22 #îr‹ 
Do
 
nŸ
 
ö˛ude
 
dúe˘ly
 !

25 
	~<lib›ícm3/°m32/comm⁄/°_usbfs_v1.h
>

	@libopencm3/include/libopencm3/stm32/f3/syscfg.h

36 #i‚de‡
LIBOPENCM3_SYSCFG_H


37 
	#LIBOPENCM3_SYSCFG_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/syscfg_comm⁄_l1f234.h
>

	@libopencm3/include/libopencm3/stm32/f3/timer.h

34 #i‚de‡
LIBOPENCM3_TIMER_H


35 
	#LIBOPENCM3_TIMER_H


	)

37 
	~<lib›ícm3/°m32/comm⁄/timî_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f3/usart.h

31 #i‚de‡
LIBOPENCM3_USART_H


32 
	#LIBOPENCM3_USART_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_Æl.h
>

35 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_v2.h
>

43 
	#USART1
 
USART1_BASE


	)

44 
	#USART2
 
USART2_BASE


	)

45 
	#USART3
 
USART3_BASE


	)

46 
	#UART4
 
UART4_BASE


	)

47 
	#UART5
 
UART5_BASE


	)

50 
BEGIN_DECLS


52 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f4/adc.h

39 #i‚de‡
LIBOPENCM3_ADC_H


40 
	#LIBOPENCM3_ADC_H


	)

42 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v1.h
>

47 
	#ADC_JOFR1
(
block
Ë
	`MMIO32
((blockË+ 0x14)

	)

48 
	#ADC_JOFR2
(
block
Ë
	`MMIO32
((blockË+ 0x18)

	)

49 
	#ADC_JOFR3
(
block
Ë
	`MMIO32
((blockË+ 0x1c)

	)

50 
	#ADC_JOFR4
(
block
Ë
	`MMIO32
((blockË+ 0x20)

	)

53 
	#ADC_HTR
(
block
Ë
	`MMIO32
((blockË+ 0x24)

	)

56 
	#ADC_LTR
(
block
Ë
	`MMIO32
((blockË+ 0x28)

	)

59 
	#ADC_SQR1
(
block
Ë
	`MMIO32
((blockË+ 0x2c)

	)

62 
	#ADC_SQR2
(
block
Ë
	`MMIO32
((blockË+ 0x30)

	)

65 
	#ADC_SQR3
(
block
Ë
	`MMIO32
((blockË+ 0x34)

	)

68 
	#ADC_JSQR
(
block
Ë
	`MMIO32
((blockË+ 0x38)

	)

71 
	#ADC_JDR1
(
block
Ë
	`MMIO32
((blockË+ 0x3c)

	)

72 
	#ADC_JDR2
(
block
Ë
	`MMIO32
((blockË+ 0x40)

	)

73 
	#ADC_JDR3
(
block
Ë
	`MMIO32
((blockË+ 0x44)

	)

74 
	#ADC_JDR4
(
block
Ë
	`MMIO32
((blockË+ 0x48)

	)

77 
	#ADC_DR
(
block
Ë
	`MMIO32
((blockË+ 0x4c)

	)

80 
	#ADC_COMMON_REGISTERS_BASE
 (
ADC1_BASE
+0x300)

	)

81 
	#ADC_CSR
 
	`MMIO32
(
ADC_COMMON_REGISTERS_BASE
 + 0x0)

	)

82 
	#ADC_CCR
 
	`MMIO32
(
ADC_COMMON_REGISTERS_BASE
 + 0x4)

	)

83 
	#ADC_CDR
 
	`MMIO32
(
ADC_COMMON_REGISTERS_BASE
 + 0x8)

	)

91 
	#ADC_CHANNEL_TEMP_F40
 16

	)

92 
	#ADC_CHANNEL_TEMP_F42
 18

	)

93 
	#ADC_CHANNEL_VREF
 17

	)

94 
	#ADC_CHANNEL_VBAT
 18

	)

99 
	#ADC_SR_OVR
 (1 << 5)

	)

104 
	#ADC_CR1_OVRIE
 (1 << 26)

	)

112 
	#ADC_CR1_RES_12BIT
 (0x0 << 24)

	)

113 
	#ADC_CR1_RES_10BIT
 (0x1 << 24)

	)

114 
	#ADC_CR1_RES_8BIT
 (0x2 << 24)

	)

115 
	#ADC_CR1_RES_6BIT
 (0x3 << 24)

	)

117 
	#ADC_CR1_RES_MASK
 (0x3 << 24)

	)

118 
	#ADC_CR1_RES_SHIFT
 24

	)

123 
	#ADC_CR1_AWDCH_MAX
 18

	)

129 
	#ADC_CR2_SWSTART
 (1 << 30)

	)

137 
	#ADC_CR2_EXTEN_DISABLED
 (0x0 << 28)

	)

138 
	#ADC_CR2_EXTEN_RISING_EDGE
 (0x1 << 28)

	)

139 
	#ADC_CR2_EXTEN_FALLING_EDGE
 (0x2 << 28)

	)

140 
	#ADC_CR2_EXTEN_BOTH_EDGES
 (0x3 << 28)

	)

142 
	#ADC_CR2_EXTEN_MASK
 (0x3 << 28)

	)

143 
	#ADC_CR2_EXTEN_SHIFT
 28

	)

152 
	#ADC_CR2_EXTSEL_TIM1_CC1
 (0x0 << 24)

	)

154 
	#ADC_CR2_EXTSEL_TIM1_CC2
 (0x1 << 24)

	)

156 
	#ADC_CR2_EXTSEL_TIM1_CC3
 (0x2 << 24)

	)

158 
	#ADC_CR2_EXTSEL_TIM2_CC2
 (0x3 << 24)

	)

160 
	#ADC_CR2_EXTSEL_TIM2_CC3
 (0x4 << 24)

	)

162 
	#ADC_CR2_EXTSEL_TIM2_CC4
 (0x5 << 24)

	)

164 
	#ADC_CR2_EXTSEL_TIM2_TRGO
 (0x6 << 24)

	)

166 
	#ADC_CR2_EXTSEL_TIM3_CC1
 (0x7 << 24)

	)

168 
	#ADC_CR2_EXTSEL_TIM3_TRGO
 (0x8 << 24)

	)

170 
	#ADC_CR2_EXTSEL_TIM4_CC4
 (0x9 << 24)

	)

172 
	#ADC_CR2_EXTSEL_TIM5_CC1
 (0xA << 24)

	)

174 
	#ADC_CR2_EXTSEL_TIM5_CC2
 (0xB << 24)

	)

176 
	#ADC_CR2_EXTSEL_TIM5_CC3
 (0xC << 24)

	)

178 
	#ADC_CR2_EXTSEL_TIM8_CC1
 (0xD << 24)

	)

180 
	#ADC_CR2_EXTSEL_TIM8_TRGO
 (0xE << 24)

	)

182 
	#ADC_CR2_EXTSEL_EXTI_LINE_11
 (0xF << 24)

	)

184 
	#ADC_CR2_EXTSEL_MASK
 (0xF << 24)

	)

185 
	#ADC_CR2_EXTSEL_SHIFT
 24

	)

190 
	#ADC_CR2_JSWSTART
 (1 << 22)

	)

198 
	#ADC_CR2_JEXTEN_DISABLED
 (0x0 << 20)

	)

199 
	#ADC_CR2_JEXTEN_RISING_EDGE
 (0x1 << 20)

	)

200 
	#ADC_CR2_JEXTEN_FALLING_EDGE
 (0x2 << 20)

	)

201 
	#ADC_CR2_JEXTEN_BOTH_EDGES
 (0x3 << 20)

	)

203 
	#ADC_CR2_JEXTEN_MASK
 (0x3 << 20)

	)

204 
	#ADC_CR2_JEXTEN_SHIFT
 20

	)

212 
	#ADC_CR2_JEXTSEL_TIM1_CC4
 (0x0 << 16)

	)

213 
	#ADC_CR2_JEXTSEL_TIM1_TRGO
 (0x1 << 16)

	)

214 
	#ADC_CR2_JEXTSEL_TIM2_CC1
 (0x2 << 16)

	)

215 
	#ADC_CR2_JEXTSEL_TIM2_TRGO
 (0x3 << 16)

	)

216 
	#ADC_CR2_JEXTSEL_TIM3_CC2
 (0x4 << 16)

	)

217 
	#ADC_CR2_JEXTSEL_TIM3_CC4
 (0x5 << 16)

	)

218 
	#ADC_CR2_JEXTSEL_TIM4_CC1
 (0x6 << 16)

	)

219 
	#ADC_CR2_JEXTSEL_TIM4_CC2
 (0x7 << 16)

	)

220 
	#ADC_CR2_JEXTSEL_TIM4_CC3
 (0x8 << 16)

	)

221 
	#ADC_CR2_JEXTSEL_TIM4_TRGO
 (0x9 << 16)

	)

222 
	#ADC_CR2_JEXTSEL_TIM5_CC4
 (0xA << 16)

	)

223 
	#ADC_CR2_JEXTSEL_TIM5_TRGO
 (0xB << 16)

	)

224 
	#ADC_CR2_JEXTSEL_TIM8_CC2
 (0xC << 16)

	)

225 
	#ADC_CR2_JEXTSEL_TIM8_CC3
 (0xD << 16)

	)

226 
	#ADC_CR2_JEXTSEL_TIM8_CC4
 (0xE << 16)

	)

227 
	#ADC_CR2_JEXTSEL_EXTI_LINE_15
 (0xF << 16)

	)

229 
	#ADC_CR2_JEXTSEL_MASK
 (0xF << 16)

	)

230 
	#ADC_CR2_JEXTSEL_SHIFT
 16

	)

233 
	#ADC_CR2_ALIGN_RIGHT
 (0 << 11)

	)

234 
	#ADC_CR2_ALIGN_LEFT
 (1 << 11)

	)

235 
	#ADC_CR2_ALIGN
 (1 << 11)

	)

238 
	#ADC_CR2_EOCS
 (1 << 10)

	)

241 
	#ADC_CR2_DDS
 (1 << 9)

	)

244 
	#ADC_CR2_DMA
 (1 << 8)

	)

249 
	#ADC_CR2_CONT
 (1 << 1)

	)

257 
	#ADC_CR2_ADON
 (1 << 0)

	)

261 
	#ADC_SMPR1_SMP17_LSB
 21

	)

262 
	#ADC_SMPR1_SMP16_LSB
 18

	)

263 
	#ADC_SMPR1_SMP15_LSB
 15

	)

264 
	#ADC_SMPR1_SMP14_LSB
 12

	)

265 
	#ADC_SMPR1_SMP13_LSB
 9

	)

266 
	#ADC_SMPR1_SMP12_LSB
 6

	)

267 
	#ADC_SMPR1_SMP11_LSB
 3

	)

268 
	#ADC_SMPR1_SMP10_LSB
 0

	)

269 
	#ADC_SMPR1_SMP17_MSK
 (0x7 << 
ADC_SMPR1_SMP17_LSB
)

	)

270 
	#ADC_SMPR1_SMP16_MSK
 (0x7 << 
ADC_SMPR1_SMP16_LSB
)

	)

271 
	#ADC_SMPR1_SMP15_MSK
 (0x7 << 
ADC_SMPR1_SMP15_LSB
)

	)

272 
	#ADC_SMPR1_SMP14_MSK
 (0x7 << 
ADC_SMPR1_SMP14_LSB
)

	)

273 
	#ADC_SMPR1_SMP13_MSK
 (0x7 << 
ADC_SMPR1_SMP13_LSB
)

	)

274 
	#ADC_SMPR1_SMP12_MSK
 (0x7 << 
ADC_SMPR1_SMP12_LSB
)

	)

275 
	#ADC_SMPR1_SMP11_MSK
 (0x7 << 
ADC_SMPR1_SMP11_LSB
)

	)

276 
	#ADC_SMPR1_SMP10_MSK
 (0x7 << 
ADC_SMPR1_SMP10_LSB
)

	)

280 
	#ADC_SMPR2_SMP9_LSB
 27

	)

281 
	#ADC_SMPR2_SMP8_LSB
 24

	)

282 
	#ADC_SMPR2_SMP7_LSB
 21

	)

283 
	#ADC_SMPR2_SMP6_LSB
 18

	)

284 
	#ADC_SMPR2_SMP5_LSB
 15

	)

285 
	#ADC_SMPR2_SMP4_LSB
 12

	)

286 
	#ADC_SMPR2_SMP3_LSB
 9

	)

287 
	#ADC_SMPR2_SMP2_LSB
 6

	)

288 
	#ADC_SMPR2_SMP1_LSB
 3

	)

289 
	#ADC_SMPR2_SMP0_LSB
 0

	)

290 
	#ADC_SMPR2_SMP9_MSK
 (0x7 << 
ADC_SMPR2_SMP9_LSB
)

	)

291 
	#ADC_SMPR2_SMP8_MSK
 (0x7 << 
ADC_SMPR2_SMP8_LSB
)

	)

292 
	#ADC_SMPR2_SMP7_MSK
 (0x7 << 
ADC_SMPR2_SMP7_LSB
)

	)

293 
	#ADC_SMPR2_SMP6_MSK
 (0x7 << 
ADC_SMPR2_SMP6_LSB
)

	)

294 
	#ADC_SMPR2_SMP5_MSK
 (0x7 << 
ADC_SMPR2_SMP5_LSB
)

	)

295 
	#ADC_SMPR2_SMP4_MSK
 (0x7 << 
ADC_SMPR2_SMP4_LSB
)

	)

296 
	#ADC_SMPR2_SMP3_MSK
 (0x7 << 
ADC_SMPR2_SMP3_LSB
)

	)

297 
	#ADC_SMPR2_SMP2_MSK
 (0x7 << 
ADC_SMPR2_SMP2_LSB
)

	)

298 
	#ADC_SMPR2_SMP1_MSK
 (0x7 << 
ADC_SMPR2_SMP1_LSB
)

	)

299 
	#ADC_SMPR2_SMP0_MSK
 (0x7 << 
ADC_SMPR2_SMP0_LSB
)

	)

308 
	#ADC_SMPR_SMP_3CYC
 0x0

	)

309 
	#ADC_SMPR_SMP_15CYC
 0x1

	)

310 
	#ADC_SMPR_SMP_28CYC
 0x2

	)

311 
	#ADC_SMPR_SMP_56CYC
 0x3

	)

312 
	#ADC_SMPR_SMP_84CYC
 0x4

	)

313 
	#ADC_SMPR_SMP_112CYC
 0x5

	)

314 
	#ADC_SMPR_SMP_144CYC
 0x6

	)

315 
	#ADC_SMPR_SMP_480CYC
 0x7

	)

320 
	#ADC_SQR_MAX_CHANNELS_REGULAR
 16

	)

322 
	#ADC_SQR1_SQ16_LSB
 15

	)

323 
	#ADC_SQR1_SQ15_LSB
 10

	)

324 
	#ADC_SQR1_SQ14_LSB
 5

	)

325 
	#ADC_SQR1_SQ13_LSB
 0

	)

326 
	#ADC_SQR1_L_MSK
 (0x‡<< 
ADC_SQR1_L_LSB
)

	)

327 
	#ADC_SQR1_SQ16_MSK
 (0x1‡<< 
ADC_SQR1_SQ16_LSB
)

	)

328 
	#ADC_SQR1_SQ15_MSK
 (0x1‡<< 
ADC_SQR1_SQ15_LSB
)

	)

329 
	#ADC_SQR1_SQ14_MSK
 (0x1‡<< 
ADC_SQR1_SQ14_LSB
)

	)

330 
	#ADC_SQR1_SQ13_MSK
 (0x1‡<< 
ADC_SQR1_SQ13_LSB
)

	)

334 
	#ADC_SQR2_SQ12_LSB
 25

	)

335 
	#ADC_SQR2_SQ11_LSB
 20

	)

336 
	#ADC_SQR2_SQ10_LSB
 15

	)

337 
	#ADC_SQR2_SQ9_LSB
 10

	)

338 
	#ADC_SQR2_SQ8_LSB
 5

	)

339 
	#ADC_SQR2_SQ7_LSB
 0

	)

340 
	#ADC_SQR2_SQ12_MSK
 (0x1‡<< 
ADC_SQR2_SQ12_LSB
)

	)

341 
	#ADC_SQR2_SQ11_MSK
 (0x1‡<< 
ADC_SQR2_SQ11_LSB
)

	)

342 
	#ADC_SQR2_SQ10_MSK
 (0x1‡<< 
ADC_SQR2_SQ10_LSB
)

	)

343 
	#ADC_SQR2_SQ9_MSK
 (0x1‡<< 
ADC_SQR2_SQ9_LSB
)

	)

344 
	#ADC_SQR2_SQ8_MSK
 (0x1‡<< 
ADC_SQR2_SQ8_LSB
)

	)

345 
	#ADC_SQR2_SQ7_MSK
 (0x1‡<< 
ADC_SQR2_SQ7_LSB
)

	)

349 
	#ADC_SQR3_SQ6_LSB
 25

	)

350 
	#ADC_SQR3_SQ5_LSB
 20

	)

351 
	#ADC_SQR3_SQ4_LSB
 15

	)

352 
	#ADC_SQR3_SQ3_LSB
 10

	)

353 
	#ADC_SQR3_SQ2_LSB
 5

	)

354 
	#ADC_SQR3_SQ1_LSB
 0

	)

355 
	#ADC_SQR3_SQ6_MSK
 (0x1‡<< 
ADC_SQR3_SQ6_LSB
)

	)

356 
	#ADC_SQR3_SQ5_MSK
 (0x1‡<< 
ADC_SQR3_SQ5_LSB
)

	)

357 
	#ADC_SQR3_SQ4_MSK
 (0x1‡<< 
ADC_SQR3_SQ4_LSB
)

	)

358 
	#ADC_SQR3_SQ3_MSK
 (0x1‡<< 
ADC_SQR3_SQ3_LSB
)

	)

359 
	#ADC_SQR3_SQ2_MSK
 (0x1‡<< 
ADC_SQR3_SQ2_LSB
)

	)

360 
	#ADC_SQR3_SQ1_MSK
 (0x1‡<< 
ADC_SQR3_SQ1_LSB
)

	)

364 
	#ADC_JDATA_LSB
 0

	)

365 
	#ADC_DATA_LSB
 0

	)

366 
	#ADC_JDATA_MSK
 (0xfff‡<< 
ADC_JDATA_LSB
)

	)

367 
	#ADC_DATA_MSK
 (0xfff‡<< 
ADC_DA
)

	)

374 
	#ADC_CSR_OVR3
 (1 << 21)

	)

377 
	#ADC_CSR_STRT3
 (1 << 20)

	)

380 
	#ADC_CSR_JSTRT3
 (1 << 19)

	)

383 
	#ADC_CSR_JEOC3
 (1 << 18)

	)

386 
	#ADC_CSR_EOC3
 (1 << 17)

	)

389 
	#ADC_CSR_AWD3
 (1 << 16)

	)

394 
	#ADC_CSR_OVR2
 (1 << 13)

	)

397 
	#ADC_CSR_STRT2
 (1 << 12)

	)

400 
	#ADC_CSR_JSTRT2
 (1 << 11)

	)

403 
	#ADC_CSR_JEOC2
 (1 << 10)

	)

406 
	#ADC_CSR_EOC2
 (1 << 9)

	)

409 
	#ADC_CSR_AWD2
 (1 << 8)

	)

414 
	#ADC_CSR_OVR1
 (1 << 5)

	)

417 
	#ADC_CSR_STRT1
 (1 << 4)

	)

420 
	#ADC_CSR_JSTRT1
 (1 << 3)

	)

423 
	#ADC_CSR_JEOC1
 (1 << 2)

	)

426 
	#ADC_CSR_EOC1
 (1 << 1)

	)

429 
	#ADC_CSR_AWD1
 (1 << 0)

	)

434 
	#ADC_CCR_TSVREFE
 (1 << 23)

	)

437 
	#ADC_CCR_VBATE
 (1 << 22)

	)

447 
	#ADC_CCR_ADCPRE_BY2
 (0x0 << 16)

	)

448 
	#ADC_CCR_ADCPRE_BY4
 (0x1 << 16)

	)

449 
	#ADC_CCR_ADCPRE_BY6
 (0x2 << 16)

	)

450 
	#ADC_CCR_ADCPRE_BY8
 (0x3 << 16)

	)

452 
	#ADC_CCR_ADCPRE_MASK
 (0x3 << 16)

	)

453 
	#ADC_CCR_ADCPRE_SHIFT
 16

	)

461 
	#ADC_CCR_DMA_DISABLE
 (0x0 << 14)

	)

462 
	#ADC_CCR_DMA_MODE_1
 (0x1 << 14)

	)

463 
	#ADC_CCR_DMA_MODE_2
 (0x2 << 14)

	)

464 
	#ADC_CCR_DMA_MODE_3
 (0x3 << 14)

	)

466 
	#ADC_CCR_DMA_MASK
 (0x3 << 14)

	)

467 
	#ADC_CCR_DMA_SHIFT
 14

	)

470 
	#ADC_CCR_DDS
 (1 << 13)

	)

480 
	#ADC_CCR_DELAY_5ADCCLK
 (0x0 << 8)

	)

481 
	#ADC_CCR_DELAY_6ADCCLK
 (0x1 << 8)

	)

482 
	#ADC_CCR_DELAY_7ADCCLK
 (0x2 << 8)

	)

483 
	#ADC_CCR_DELAY_8ADCCLK
 (0x3 << 8)

	)

484 
	#ADC_CCR_DELAY_9ADCCLK
 (0x4 << 8)

	)

485 
	#ADC_CCR_DELAY_10ADCCLK
 (0x5 << 8)

	)

486 
	#ADC_CCR_DELAY_11ADCCLK
 (0x6 << 8)

	)

487 
	#ADC_CCR_DELAY_12ADCCLK
 (0x7 << 8)

	)

488 
	#ADC_CCR_DELAY_13ADCCLK
 (0x8 << 8)

	)

489 
	#ADC_CCR_DELAY_14ADCCLK
 (0x9 << 8)

	)

490 
	#ADC_CCR_DELAY_15ADCCLK
 (0x®<< 8)

	)

491 
	#ADC_CCR_DELAY_16ADCCLK
 (0xb << 8)

	)

492 
	#ADC_CCR_DELAY_17ADCCLK
 (0x¯<< 8)

	)

493 
	#ADC_CCR_DELAY_18ADCCLK
 (0xd << 8)

	)

494 
	#ADC_CCR_DELAY_19ADCCLK
 (0xê<< 8)

	)

495 
	#ADC_CCR_DELAY_20ADCCLK
 (0x‡<< 8)

	)

497 
	#ADC_CCR_DELAY_MASK
 (0x‡<< 8)

	)

498 
	#ADC_CCR_DELAY_SHIFT
 8

	)

510 
	#ADC_CCR_MULTI_INDEPENDENT
 (0x00 << 0)

	)

517 
	#ADC_CCR_MULTI_DUAL_REG_SIMUL_AND_INJECTED_SIMUL
 (0x01 << 0)

	)

522 
	#ADC_CCR_MULTI_DUAL_REG_SIMUL_AND_ALTERNATE_TRIG
 (0x02 << 0)

	)

524 
	#ADC_CCR_MULTI_DUAL_INJECTED_SIMUL
 (0x05 << 0)

	)

526 
	#ADC_CCR_MULTI_DUAL_REGULAR_SIMUL
 (0x06 << 0)

	)

528 
	#ADC_CCR_MULTI_DUAL_INTERLEAVED
 (0x07 << 0)

	)

530 
	#ADC_CCR_MULTI_DUAL_ALTERNATE_TRIG
 (0x09 << 0)

	)

537 
	#ADC_CCR_MULTI_TRIPLE_REG_SIMUL_AND_INJECTED_SIMUL
 (0x11 << 0)

	)

542 
	#ADC_CCR_MULTI_TRIPLE_REG_SIMUL_AND_ALTERNATE_TRIG
 (0x12 << 0)

	)

544 
	#ADC_CCR_MULTI_TRIPLE_INJECTED_SIMUL
 (0x15 << 0)

	)

546 
	#ADC_CCR_MULTI_TRIPLE_REGULAR_SIMUL
 (0x16 << 0)

	)

548 
	#ADC_CCR_MULTI_TRIPLE_INTERLEAVED
 (0x17 << 0)

	)

550 
	#ADC_CCR_MULTI_TRIPLE_ALTERNATE_TRIG
 (0x19 << 0)

	)

553 
	#ADC_CCR_MULTI_MASK
 (0x1‡<< 0)

	)

554 
	#ADC_CCR_MULTI_SHIFT
 0

	)

558 
	#ADC_CDR_DATA2_MASK
 (0xfff‡<< 16)

	)

559 
	#ADC_CDR_DATA2_SHIFT
 16

	)

561 
	#ADC_CDR_DATA1_MASK
 (0xfff‡<< 0)

	)

562 
	#ADC_CDR_DATA1_SHIFT
 0

	)

564 
BEGIN_DECLS


566 
adc_£t_˛k_¥esˇÀ
(
uöt32_t
 
¥esˇÀr
);

567 
adc_£t_mu…i_mode
(
uöt32_t
 
mode
);

568 
adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

569 
uöt32_t
 
pﬁ¨ôy
);

570 
adc_íabÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

571 
uöt32_t
 
pﬁ¨ôy
);

572 
adc_£t_ªsﬁuti⁄
(
uöt32_t
 
adc
, uöt32_à
ªsﬁuti⁄
);

573 
adc_íabÀ_ovîrun_öãºu±
(
uöt32_t
 
adc
);

574 
adc_dißbÀ_ovîrun_öãºu±
(
uöt32_t
 
adc
);

575 
boﬁ
 
adc_gë_ovîrun_Êag
(
uöt32_t
 
adc
);

576 
adc_˛ór_ovîrun_Êag
(
uöt32_t
 
adc
);

577 
boﬁ
 
adc_awd
(
uöt32_t
 
adc
);

578 
adc_eoc_a·î_óch
(
uöt32_t
 
adc
);

579 
adc_eoc_a·î_group
(
uöt32_t
 
adc
);

580 
adc_£t_dma_c⁄töue
(
uöt32_t
 
adc
);

581 
adc_£t_dma_ãrmö©e
(
uöt32_t
 
adc
);

583 
adc_íabÀ_ãm≥øtuª_£ns‹
();

584 
adc_dißbÀ_ãm≥øtuª_£ns‹
();

586 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f4/crc.h

33 #i‚de‡
LIBOPENCM3_CRC_H


34 
	#LIBOPENCM3_CRC_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/¸c_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f4/crypto.h

31 #i‚de‡
LIBOPENCM3_CRYPTO_H


32 
	#LIBOPENCM3_CRYPTO_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/¸y±o_comm⁄_f24.h
>

48 
	#CRYP_CSGCMCCMR
(
i
Ë
	`MMIO32
(
CRYP_BASE
 + 0x50 + (iË* 4)

	)

51 
	#CRYP_CSGCMR
(
i
Ë
	`MMIO32
(
CRYP_BASE
 + 0x70 + (iË* 4)

	)

58 
	#CRYP_CR_GCM_CMPH_SHIFT
 16

	)

59 
	#CRYP_CR_GCM_CMPH
 (3 << 
CRYP_CR_GCM_CMPH_SHIFT
)

	)

60 
	#CRYP_CR_GCM_CMPH_INIT
 (0 << 
CRYP_CR_GCM_CMPH_SHIFT
)

	)

61 
	#CRYP_CR_GCM_CMPH_HEADER
 (1 << 
CRYP_CR_GCM_CMPH_SHIFT
)

	)

62 
	#CRYP_CR_GCM_CMPH_PAYLOAD
 (2 << 
CRYP_CR_GCM_CMPH_SHIFT
)

	)

63 
	#CRYP_CR_GCM_CMPH_FINAL
 (3 << 
CRYP_CR_GCM_CMPH_SHIFT
)

	)

66 
	#CRYP_CR_ALGOMODE3
 (1 << 19)

	)

80 
	e¸y±o_mode_mac
 {

81 
	mENCRYPT_GCM
 = 
CRYP_CR_ALGOMODE_TDES_ECB
 | 
CRYP_CR_ALGOMODE3
,

82 
	mENCRYPT_CCM
 = 
CRYP_CR_ALGOMODE_TDES_CBC
 | 
CRYP_CR_ALGOMODE3
,

83 
	mDECRYPT_GCM
 = 
CRYP_CR_ALGOMODE_TDES_ECB
 | 
CRYP_CR_ALGOMODE3
 |

84 
CRYP_CR_ALGODIR
,

85 
	mDECRYPT_CCM
 = 
CRYP_CR_ALGOMODE_TDES_CBC
 | 
CRYP_CR_ALGOMODE3
 |

86 
CRYP_CR_ALGODIR
,

89 
BEGIN_DECLS


91 
¸y±o_c⁄ãxt_sw≠
(
uöt32_t
 *
buf
);

92 
¸y±o_£t_mac_Æg‹ôhm
(
¸y±o_mode_mac
 
mode
);

94 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f4/dac.h

31 #i‚de‡
LIBOPENCM3_DAC_H


32 
	#LIBOPENCM3_DAC_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dac_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f4/dcmi.h

36 
	~<lib›ícm3/cm3/comm⁄.h
>

37 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

39 #¥agm®
⁄˚


46 
	#DCMI_CR
 
	`MMIO32
(
DCMI_BASE
 + 0x0U)

	)

52 
	#DCMI_CR_EN
 (1 << 14)

	)

53 
	#DCMI_CR_EDM1
 (1 << 11)

	)

54 
	#DCMI_CR_EDM0
 (1 << 10)

	)

55 
	#DCMI_CR_FCRC1
 (1 << 9)

	)

56 
	#DCMI_CR_FCRC0
 (1 << 8)

	)

57 
	#DCMI_CR_VSPOL
 (1 << 7)

	)

58 
	#DCMI_CR_HSPOL
 (1 << 6)

	)

59 
	#DCMI_CR_PCKPOL
 (1 << 5)

	)

60 
	#DCMI_CR_ESS
 (1 << 4)

	)

61 
	#DCMI_CR_JPEG
 (1 << 3)

	)

62 
	#DCMI_CR_CROP
 (1 << 2)

	)

63 
	#DCMI_CR_CM
 (1 << 1)

	)

64 
	#DCMI_CR_CAPTURE
 (1 << 0)

	)

70 
	#DCMI_SR
 
	`MMIO32
(
DCMI_BASE
 + 0x04U)

	)

79 
	#DCMI_RIS
 
	`MMIO32
(
DCMI_BASE
 + 0x08U)

	)

85 
	#DCMI_RIS_LINE
 (1 << 4)

	)

86 
	#DCMI_RIS_VSYNC
 (1 << 3)

	)

87 
	#DCMI_RIS_ERR
 (1 << 2)

	)

88 
	#DCMI_RIS_OVR
 (1 << 1)

	)

89 
	#DCMI_RIS_FRAME
 (1 << 0)

	)

98 
	#DCMI_IER
 
	`MMIO32
(
DCMI_BASE
 + 0x0CU)

	)

104 
	#DCMI_IER_LINE
 (1 << 4)

	)

105 
	#DCMI_IER_VSYNC
 (1 << 3)

	)

106 
	#DCMI_IER_ERR
 (1 << 2)

	)

107 
	#DCMI_IER_OVR
 (1 << 1)

	)

108 
	#DCMI_IER_FRAME
 (1 << 0)

	)

119 
	#DCMI_MIS
 
	`MMIO32
(
DCMI_BASE
 + 0x10U)

	)

125 
	#DCMI_MIS_LINE
 (1 << 4)

	)

126 
	#DCMI_MIS_VSYNC
 (1 << 3)

	)

127 
	#DCMI_MIS_ERR
 (1 << 2)

	)

128 
	#DCMI_MIS_OVR
 (1 << 1)

	)

129 
	#DCMI_MIS_FRAME
 (1 << 0)

	)

138 
	#DCMI_ICR
 
	`MMIO32
(
DCMI_BASE
 + 0x14U)

	)

144 
	#DCMI_ICR_LINE
 (1 << 4)

	)

145 
	#DCMI_ICR_VSYNC
 (1 << 3)

	)

146 
	#DCMI_ICR_ERR
 (1 << 2)

	)

147 
	#DCMI_ICR_OVR
 (1 << 1)

	)

148 
	#DCMI_ICR_FRAME
 (1 << 0)

	)

154 
	#DCMI_ESCR
 
	`MMIO32
(
DCMI_BASE
 + 0x18U)

	)

160 
	#DCMI_ESCR_FEC_SHIFT
 24

	)

161 
	#DCMI_ESCR_FEC_MASK
 0xff

	)

162 
	#DCMI_ESCR_LEC_SHIFT
 16

	)

163 
	#DCMI_ESCR_LEC_MASK
 0xff

	)

164 
	#DCMI_ESCR_LSC_SHIFT
 8

	)

165 
	#DCMI_ESCR_LSC_MASK
 0xff

	)

166 
	#DCMI_ESCR_FSC_SHIFT
 0

	)

167 
	#DCMI_ESCR_FSC_MASK
 0xff

	)

174 
	#DCMI_ESUR
 
	`MMIO32
(
DCMI_BASE
 + 0x1CU)

	)

180 
	#DCMI_ESUR_FEU_SHIFT
 24

	)

181 
	#DCMI_ESUR_FEU_MASK
 0xff

	)

182 
	#DCMI_ESUR_LEU_SHIFT
 16

	)

183 
	#DCMI_ESUR_LEU_MASK
 0xff

	)

184 
	#DCMI_ESUR_LSU_SHIFT
 8

	)

185 
	#DCMI_ESUR_LSU_MASK
 0xff

	)

186 
	#DCMI_ESUR_FSU_SHIFT
 0

	)

187 
	#DCMI_ESUR_FSU_MASK
 0xff

	)

193 
	#DCMI_CWSTRT
 
	`MMIO32
(
DCMI_BASE
 + 0x20U)

	)

199 
	#DCMI_CWSTRT_VST_SHIFT
 16

	)

200 
	#DCMI_CWSTRT_VST_MASK
 0x1fff

	)

201 
	#DCMI_CWSTRT_HOFFCNT_SHIFT
 0

	)

202 
	#DCMI_CWSTRT_HOFFCNT_MASK
 0x3fff

	)

208 
	#DCMI_CWSIZE
 
	`MMIO32
(
DCMI_BASE
 + 0x24U)

	)

214 
	#DCMI_CWSIZE_VLINE_SHIFT
 16

	)

215 
	#DCMI_CWSIZE_VLINE_MASK
 0x3fff

	)

216 
	#DCMI_CWSIZE_CAPCNT_SHIFT
 0

	)

217 
	#DCMI_CWSIZE_CAPCNT_MASK
 0x3fff

	)

227 
	#DCMI_DR
 
	`MMIO32
(
DCMI_BASE
 + 0x28U)

	)

	@libopencm3/include/libopencm3/stm32/f4/dma.h

31 #i‚de‡
LIBOPENCM3_DMA_H


32 
	#LIBOPENCM3_DMA_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dma_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f4/dma2d.h

35 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

36 
	~<°döt.h
>

38 #i‚de‡
DMA2D_H


39 
	#DMA2D_H


	)

44 
	#DMA2D_CR
 
	`MMIO32
(
DMA2D_BASE
 + 0x0U)

	)

45 
	#DMA2D_CR_MODE_SHIFT
 16

	)

46 
	#DMA2D_CR_MODE_MASK
 0x3

	)

47 
	#DMA2D_CR_MODE_M2M
 0

	)

48 
	#DMA2D_CR_MODE_M2MWPFC
 1

	)

49 
	#DMA2D_CR_MODE_M2MWB
 2

	)

50 
	#DMA2D_CR_MODE_R2M
 3

	)

51 
	#DMA2D_CR_CEIE
 (1 << 13)

	)

52 
	#DMA2D_CR_CTCIE
 (1 << 12)

	)

53 
	#DMA2D_CR_CAEIE
 (1 << 11)

	)

54 
	#DMA2D_CR_TWIE
 (1 << 10)

	)

55 
	#DMA2D_CR_TCIE
 (1 << 9)

	)

56 
	#DMA2D_CR_TEIE
 (1 << 8)

	)

57 
	#DMA2D_CR_ABORT
 (1 << 2)

	)

58 
	#DMA2D_CR_SUSP
 (1 << 1)

	)

59 
	#DMA2D_CR_START
 (1 << 0)

	)

62 
	#DMA2D_ISR
 
	`MMIO32
(
DMA2D_BASE
 + 0x4U)

	)

63 
	#DMA2D_ISR_CEIF
 (1 << 5)

	)

64 
	#DMA2D_ISR_CTCIF
 (1 << 4)

	)

65 
	#DMA2D_ISR_CAEIF
 (1 << 3)

	)

66 
	#DMA2D_ISR_TWIF
 (1 << 2)

	)

67 
	#DMA2D_ISR_TCIF
 (1 << 1)

	)

68 
	#DMA2D_ISR_TEIF
 (1 << 0)

	)

71 
	#DMA2D_IFCR
 
	`MMIO32
(
DMA2D_BASE
 + 0x8U)

	)

72 
	#DMA2D_IFCR_CCEIF
 (1 << 5)

	)

73 
	#DMA2D_IFCR_CCTCIF
 (1 << 4)

	)

74 
	#DMA2D_IFCR_CCAEIF
 (1 << 3)

	)

75 
	#DMA2D_IFCR_CTWIF
 (1 << 2)

	)

76 
	#DMA2D_IFCR_CTCIF
 (1 << 1)

	)

77 
	#DMA2D_IFCR_CTEIF
 (1 << 0)

	)

80 
	#DMA2D_FGMAR
 
	`MMIO32
(
DMA2D_BASE
 + 0xCU)

	)

83 
	#DMA2D_FGOR
 
	`MMIO32
(
DMA2D_BASE
 + 0x10U)

	)

84 
	#DMA2D_FGOR_LO_SHIFT
 0

	)

85 
	#DMA2D_FGOR_LO_MASK
 0x3fff

	)

88 
	#DMA2D_BGMAR
 
	`MMIO32
(
DMA2D_BASE
 + 0x14U)

	)

91 
	#DMA2D_BGOR
 
	`MMIO32
(
DMA2D_BASE
 + 0x18U)

	)

92 
	#DMA2D_BGOR_LO_SHIFT
 0

	)

93 
	#DMA2D_BGOR_LO_MASK
 0x3fff

	)

96 
	#DMA2D_FGPFCCR
 
	`MMIO32
(
DMA2D_BASE
 + 0x1cU)

	)

97 
	#DMA2D_BGPFCCR
 
	`MMIO32
(
DMA2D_BASE
 + 0x24U)

	)

99 
	#DMA2D_xPFCCR_ALPHA_SHIFT
 24

	)

100 
	#DMA2D_xPFCCR_ALPHA_MASK
 0xff

	)

101 
	#DMA2D_xPFCCR_AM_SHIFT
 16

	)

102 
	#DMA2D_xPFCCR_AM_MASK
 0x3

	)

103 
	#DMA2D_xPFCCR_AM_NONE
 0

	)

104 
	#DMA2D_xPFCCR_AM_FORCE
 1

	)

105 
	#DMA2D_xPFCCR_AM_PRODUCT
 2

	)

106 
	#DMA2D_xPFCCR_CS_SHIFT
 8

	)

107 
	#DMA2D_xPFCCR_CS_MASK
 0xff

	)

108 
	#DMA2D_xPFCCR_START
 (1 << 5)

	)

109 
	#DMA2D_xPFCCR_CCM_ARGB8888
 (0 << 4)

	)

110 
	#DMA2D_xPFCCR_CCM_RGB888
 (1 << 4)

	)

111 
	#DMA2D_xPFCCR_CM_SHIFT
 0

	)

112 
	#DMA2D_xPFCCR_CM_MASK
 0xf

	)

113 
	#DMA2D_xPFCCR_CM_ARGB8888
 0

	)

114 
	#DMA2D_xPFCCR_CM_RGB888
 1

	)

115 
	#DMA2D_xPFCCR_CM_RGB565
 2

	)

116 
	#DMA2D_xPFCCR_CM_ARGB1555
 3

	)

117 
	#DMA2D_xPFCCR_CM_ARGB4444
 4

	)

118 
	#DMA2D_xPFCCR_CM_L8
 5

	)

119 
	#DMA2D_xPFCCR_CM_AL44
 6

	)

120 
	#DMA2D_xPFCCR_CM_AL88
 7

	)

121 
	#DMA2D_xPFCCR_CM_L4
 8

	)

122 
	#DMA2D_xPFCCR_CM_A8
 9

	)

123 
	#DMA2D_xPFCCR_CM_A4
 10

	)

126 
	#DMA2D_FGCOLR
 
	`MMIO32
(
DMA2D_BASE
 + 0x20U)

	)

127 
	#DMA2D_BGCOLR
 
	`MMIO32
(
DMA2D_BASE
 + 0x28U)

	)

128 
	#DMA2D_xCOLR_RED_SHIFT
 16

	)

129 
	#DMA2D_xCOLR_RED_MASK
 0xff

	)

130 
	#DMA2D_xCOLR_GREEN_SHIFT
 8

	)

131 
	#DMA2D_xCOLR_GREEN_MASK
 0xff

	)

132 
	#DMA2D_xCOLR_BLUE_SHIFT
 0

	)

133 
	#DMA2D_xCOLR_BLUE_MASK
 0xff

	)

136 
	#DMA2D_FGCMAR
 
	`MMIO32
(
DMA2D_BASE
 + 0x2CU)

	)

139 
	#DMA2D_BGCMAR
 
	`MMIO32
(
DMA2D_BASE
 + 0x30U)

	)

142 
	#DMA2D_OPFCCR
 
	`MMIO32
(
DMA2D_BASE
 + 0x34U)

	)

143 
	#DMA2D_OPFCCR_CM_SHIFT
 0

	)

144 
	#DMA2D_OPFCCR_CM_MASK
 0x3

	)

145 
	#DMA2D_OPFCCR_CM_ARGB8888
 0

	)

146 
	#DMA2D_OPFCCR_CM_RGB888
 1

	)

147 
	#DMA2D_OPFCCR_CM_RGB565
 2

	)

148 
	#DMA2D_OPFCCR_CM_ARGB4444
 3

	)

152 
	#DMA2D_OCOLR
 
	`MMIO32
(
DMA2D_BASE
 + 0x38U)

	)

155 
	#DMA2D_OMAR
 
	`MMIO32
(
DMA2D_BASE
 + 0x3CU)

	)

158 
	#DMA2D_OOR
 
	`MMIO32
(
DMA2D_BASE
 + 0x40U)

	)

159 
	#DMA2D_OOR_LO_SHIFT
 0

	)

160 
	#DMA2D_OOR_LO_MASK
 0x3fff

	)

163 
	#DMA2D_NLR
 
	`MMIO32
(
DMA2D_BASE
 + 0x44U)

	)

164 
	#DMA2D_NLR_PL_SHIFT
 16

	)

165 
	#DMA2D_NLR_PL_MASK
 0x3fff

	)

166 
	#DMA2D_NLR_NL_SHIFT
 0

	)

167 
	#DMA2D_NLR_NL_MASK
 0xffff

	)

170 
	#DMA2D_LWR
 
	`MMIO32
(
DMA2D_BASE
 + 0x48U)

	)

171 
	#DMA2D_LWR_LW_SHIFT
 0

	)

172 
	#DMA2D_LWR_LW_MASK
 0xffff

	)

175 
	#DMA2D_AMTCR
 
	`MMIO32
(
DMA2D_BASE
 + 0x4CU)

	)

176 
	#DMA2D_AMTCR_DT_SHIFT
 8

	)

177 
	#DMA2D_AMTCR_DT_MASK
 0xff

	)

178 
	#DMA2D_AMTCR_EN
 (1 << 0)

	)

181 
	#DMA2D_FG_CLUT
 (
uöt32_t
 *)(
DMA2D_BASE
 + 0x400U)

	)

184 
	#DMA2D_BG_CLUT
 (
uöt32_t
 *)(
DMA2D_BASE
 + 0x800U)

	)

	@libopencm3/include/libopencm3/stm32/f4/doc-stm32f4.h

	@libopencm3/include/libopencm3/stm32/f4/dsi.h

36 
	~<lib›ícm3/cm3/comm⁄.h
>

37 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

39 #i‚de‡
DSI_H


40 
	#DSI_H


	)

48 
	#DSI_VR
 
	`MMIO32
(
DSI_BASE
 + 0x0U)

	)

53 
	#DSI_CR
 
	`MMIO32
(
DSI_BASE
 + 0x4U)

	)

54 
	#DSI_CR_EN
 (1 << 0)

	)

59 
	#DSI_CCR
 
	`MMIO32
(
DSI_BASE
 + 0x8U)

	)

60 
	#DSI_CCR_TOCKDIV_SHIFT
 8

	)

61 
	#DSI_CCR_TOCKDIV_MASK
 0xff

	)

62 
	#DSI_CCR_TXECKDIV_SHIFT
 0

	)

63 
	#DSI_CCR_TXECKDIV_MASK
 0xff

	)

68 
	#DSI_LVCIDR
 
	`MMIO32
(
DSI_BASE
 + 0xcU)

	)

69 
	#DSI_LVCIDR_VCID_SHIFT
 0

	)

70 
	#DSI_LVCIDR_VCID_MASK
 0x3

	)

75 
	#DSI_LCOLCR
 
	`MMIO32
(
DSI_BASE
 + 0x10U)

	)

76 
	#DSI_LCOLCR_LPE
 (1 << 8)

	)

77 
	#DSI_LCOLCR_COLC_SHIFT
 0

	)

78 
	#DSI_LCOLCR_COLC_MASK
 0xf

	)

83 
	#DSI_LPCR
 
	`MMIO32
(
DSI_BASE
 + 0x14U)

	)

84 
	#DSI_LPCR_HSP
 (1 << 2)

	)

85 
	#DSI_LPCR_VSP
 (1 << 1)

	)

86 
	#DSI_LPCR_DEP
 (1 << 0)

	)

91 
	#DSI_LPMCR
 
	`MMIO32
(
DSI_BASE
 + 0x18U)

	)

92 
	#DSI_LPMCR_LPSIZE_SHIFT
 16

	)

93 
	#DSI_LPMCR_LPSIZE_MASK
 0xff

	)

94 
	#DSI_LPMCR_VLPSIZE_SHIFT
 0

	)

95 
	#DSI_LPMCR_VLPSIZE_MASK
 0xff

	)

100 
	#DSI_PCR
 
	`MMIO32
(
DSI_BASE
 + 0x2cU)

	)

101 
	#DSI_PCR_CRCRXE
 (1 << 4)

	)

102 
	#DSI_PCR_ECCRXE
 (1 << 3)

	)

103 
	#DSI_PCR_BTAE
 (1 << 2)

	)

104 
	#DSI_PCR_ETRXE
 (1 << 1)

	)

105 
	#DSI_PCR_ETTXE
 (1 << 0)

	)

110 
	#DSI_GVCIDR
 
	`MMIO32
(
DSI_BASE
 + 0x30U)

	)

111 
	#DSI_GVCIDR_VCID_SHIFT
 0

	)

112 
	#DSI_GVCIDR_VCID_MASK
 0x3

	)

117 
	#DSI_MCR
 
	`MMIO32
(
DSI_BASE
 + 0x34U)

	)

118 
	#DSI_MCR_CMDM
 (1 << 0)

	)

123 
	#DSI_VMCR
 
	`MMIO32
(
DSI_BASE
 + 0x38U)

	)

124 
	#DSI_VMCR_PGO
 (1 << 24)

	)

125 
	#DSI_VMCR_PGM
 (1 << 20)

	)

126 
	#DSI_VMCR_PGE
 (1 << 16)

	)

127 
	#DSI_VMCR_LPCE
 (1 << 15)

	)

128 
	#DSI_VMCR_FBTAAE
 (1 << 14)

	)

129 
	#DSI_VMCR_LPHFE
 (1 << 13)

	)

130 
	#DSI_VMCR_LPHBPE
 (1 << 12)

	)

131 
	#DSI_VMCR_LPVAE
 (1 << 11)

	)

132 
	#DSI_VMCR_LPVFPE
 (1 << 10)

	)

133 
	#DSI_VMCR_LPVBPE
 (1 << 9)

	)

134 
	#DSI_VMCR_LPVSAE
 (1 << 8)

	)

135 
	#DSI_VMCR_VMT_SHIFT
 0

	)

136 
	#DSI_VMCR_VMT_MASK
 0x3

	)

137 
	#DSI_VMCR_VMT_NON_BURST_PULSE
 0x0

	)

138 
	#DSI_VMCR_VMT_NON_BURSE_EVENT
 0x1

	)

139 
	#DSI_VMCR_VMT_BURST
 0x2

	)

144 
	#DSI_VPCR
 
	`MMIO32
(
DSI_BASE
 + 0x3CU)

	)

145 
	#DSI_VPCR_VPSIZE_SHIFT
 0

	)

146 
	#DSI_VPCR_VPSIZE_MASK
 0x3fff

	)

151 
	#DSI_VCCR
 
	`MMIO32
(
DSI_BASE
 + 0x40U)

	)

152 
	#DSI_VCCR_NUMC_SHIFT
 0

	)

153 
	#DSI_VCCR_NUMC_MASK
 0x1fff

	)

158 
	#DSI_VNPCR
 
	`MMIO32
(
DSI_BASE
 + 0x44U)

	)

159 
	#DSI_VNPCR_NPSIZE_SHIFT
 0

	)

160 
	#DSI_VNPCR_NPSIZE_MASK
 0x1fff

	)

165 
	#DSI_VHSACR
 
	`MMIO32
(
DSI_BASE
 + 0x48U)

	)

166 
	#DSI_VHSACR_HSA_SHIFT
 0

	)

167 
	#DSI_VHSACR_HSA_MASK
 0xfff

	)

172 
	#DSI_VHBPCR
 
	`MMIO32
(
DSI_BASE
 + 0x4CU)

	)

173 
	#DSI_VHBPCR_HBP_SHIFT
 0

	)

174 
	#DSI_VHBPCR_HBP_MASK
 0xfff

	)

179 
	#DSI_VLCR
 
	`MMIO32
(
DSI_BASE
 + 0x50U)

	)

180 
	#DSI_VLCR_HLINE_SHIFT
 0

	)

181 
	#DSI_VLCR_HLINE_MASK
 0x7fff

	)

186 
	#DSI_VVSACR
 
	`MMIO32
(
DSI_BASE
 + 0x54U)

	)

187 
	#DSI_VVSACR_VSA_SHIFT
 0

	)

188 
	#DSI_VVSACR_VSA_MASK
 0x3ff

	)

193 
	#DSI_VVBPCR
 
	`MMIO32
(
DSI_BASE
 + 0x58U)

	)

194 
	#DSI_VVBPCR_VBP_SHIFT
 0

	)

195 
	#DSI_VVBPCR_VBP_MASK
 0x3ff

	)

200 
	#DSI_VVFPCR
 
	`MMIO32
(
DSI_BASE
 + 0x5CU)

	)

201 
	#DSI_VVFPCR_VFP_SHIFT
 0

	)

202 
	#DSI_VVFPCR_VFP_MASK
 0x3ff

	)

207 
	#DSI_VVACR
 
	`MMIO32
(
DSI_BASE
 + 0x60U)

	)

208 
	#DSI_VVACR_VA_SHIFT
 0

	)

209 
	#DSI_VVACR_VA_MASK
 0x3fff

	)

214 
	#DSI_LCCR
 
	`MMIO32
(
DSI_BASE
 + 0x64U)

	)

215 
	#DSI_LCCR_CMDSIZE_SHIFT
 0

	)

216 
	#DSI_LCCR_CMDSIZE_MASK
 0xffff

	)

221 
	#DSI_CMCR
 
	`MMIO32
(
DSI_BASE
 + 0x68U)

	)

222 
	#DSI_CMCR_MRDPS
 (1 << 24)

	)

223 
	#DSI_CMCR_DLWTX
 (1 << 19)

	)

224 
	#DSI_CMCR_DSR0TX
 (1 << 18)

	)

225 
	#DSI_CMCR_DSW1TX
 (1 << 17)

	)

226 
	#DSI_CMCR_DSW0TX
 (1 << 16)

	)

228 
	#DSI_CMCR_GLWTX
 (1 << 14)

	)

229 
	#DSI_CMCR_GSR2TX
 (1 << 13)

	)

230 
	#DSI_CMCR_GSR1TX
 (1 << 12)

	)

231 
	#DSI_CMCR_GSR0TX
 (1 << 11)

	)

232 
	#DSI_CMCR_GSW2TX
 (1 << 10)

	)

233 
	#DSI_CMCR_GSW1TX
 (1 << 9)

	)

234 
	#DSI_CMCR_GSW0TX
 (1 << 8)

	)

236 
	#DSI_CMCR_ARE
 (1 << 1)

	)

237 
	#DSI_CMCR_TEARE
 (1 << 0)

	)

242 
	#DSI_GHCR
 
	`MMIO32
(
DSI_BASE
 + 0x6CU)

	)

243 
	#DSI_GHCR_WCMSB_SHIFT
 16

	)

244 
	#DSI_GHCR_WCMSB_MASK
 0xff

	)

245 
	#DSI_GHCR_WCLSB_SHIFT
 8

	)

246 
	#DSI_GHCR_WCLSB_MASK
 0xff

	)

247 
	#DSI_GHCR_DATA1_SHIFT
 16

	)

248 
	#DSI_GHCR_DATA1_MASK
 0xff

	)

249 
	#DSI_GHCR_DATA0_SHIFT
 8

	)

250 
	#DSI_GHCR_DATA0_MASK
 0xff

	)

251 
	#DSI_GHCR_VCID_SHIFT
 6

	)

252 
	#DSI_GHCR_VCID_MASK
 0x3

	)

253 
	#DSI_GHCR_DT_SHIFT
 0

	)

254 
	#DSI_GHCR_DT_MASK
 0x3f

	)

259 
	#DSI_GPDR
 
	`MMIO32
(
DSI_BASE
 + 0x70U)

	)

260 
	#DSI_GPDR_BYTE4_SHIFT
 24

	)

261 
	#DSI_GPDR_BYTE4_MASK
 0xff

	)

262 
	#DSI_GPDR_BYTE3_SHIFT
 16

	)

263 
	#DSI_GPDR_BYTE3_MASK
 0xff

	)

264 
	#DSI_GPDR_BYTE2_SHIFT
 8

	)

265 
	#DSI_GPDR_BYTE2_MASK
 0xff

	)

266 
	#DSI_GPDR_BYTE1_SHIFT
 0

	)

267 
	#DSI_GPDR_BYTE1_MASK
 0xff

	)

272 
	#DSI_GPSR
 
	`MMIO32
(
DSI_BASE
 + 0x74U)

	)

274 
	#DSI_GPSR_RCB
 (1 << 6)

	)

275 
	#DSI_GPSR_PRDFF
 (1 << 5)

	)

276 
	#DSI_GPSR_PRDFE
 (1 << 4)

	)

277 
	#DSI_GPSR_PWRFF
 (1 << 3)

	)

278 
	#DSI_GPSR_PWRFE
 (1 << 2)

	)

279 
	#DSI_GPSR_CMDFF
 (1 << 1)

	)

280 
	#DSI_GPSR_CMDFE
 (1 << 0)

	)

285 
	#DSI_TCCR0
 
	`MMIO32
(
DSI_BASE
 + 0x78U)

	)

286 
	#DSI_TCCR0_HSTX_TOCNT_SHIFT
 16

	)

287 
	#DSI_TCCR0_HSTX_TOCNT_MASK
 0xffff

	)

288 
	#DSI_TCCR0_LPRX_TOCNT_SHIFT
 0

	)

289 
	#DSI_TCCR0_LPRX_TOCNT_MASK
 0xffff

	)

294 
	#DSI_TCCR1
 
	`MMIO32
(
DSI_BASE
 + 0x7CU)

	)

295 
	#DSI_TCCR1_HSRD_TOCNT_SHIFT
 0

	)

296 
	#DSI_TCCR1_HSRD_TOCNT_MASK
 0xffff

	)

301 
	#DSI_TCCR2
 
	`MMIO32
(
DSI_BASE
 + 0x80U)

	)

302 
	#DSI_TCCR2_LPRD_TOCNT_SHIFT
 0

	)

303 
	#DSI_TCCR2_LPRD_TOCNT_MASK
 0xffff

	)

308 
	#DSI_TCCR3
 
	`MMIO32
(
DSI_BASE
 + 0x84U)

	)

309 
	#DSI_TCCR3_PM
 (1 << 24)

	)

310 
	#DSI_TCCR3_HSWR_TOCNT_SHIFT
 0

	)

311 
	#DSI_TCCR3_HSWR_TOCNT_MASK
 0xffff

	)

316 
	#DSI_TCCR4
 
	`MMIO32
(
DSI_BASE
 + 0x88U)

	)

317 
	#DSI_TCCR4_LSWR_TOCNT_SHIFT
 0

	)

318 
	#DSI_TCCR4_LSWR_TOCNT_MASK
 0xffff

	)

323 
	#DSI_TCCR5
 
	`MMIO32
(
DSI_BASE
 + 0x8CU)

	)

324 
	#DSI_TCCR5_BTA_TOCNT_SHIFT
 0

	)

325 
	#DSI_TCCR5_BTA_TOCNT_MASK
 0xffff

	)

330 
	#DSI_CLCR
 
	`MMIO32
(
DSI_BASE
 + 0x94U)

	)

331 
	#DSI_CLCR_ACR
 (1 << 1)

	)

332 
	#DSI_CLCR_DPCC
 (1 << 0)

	)

337 
	#DSI_CLTCR
 
	`MMIO32
(
DSI_BASE
 + 0x98U)

	)

338 
	#DSI_CLTCR_HS2LP_TIME_SHIFT
 16

	)

339 
	#DSI_CLTCR_HS2LP_TIME_MASK
 0x3ff

	)

340 
	#DSI_CLTCR_LP2HS_TIME_SHIFT
 0

	)

341 
	#DSI_CLTCR_LP2HS_TIME_MASK
 0x3ff

	)

346 
	#DSI_DLTCR
 
	`MMIO32
(
DSI_BASE
 + 0x9CU)

	)

347 
	#DSI_DLTCR_HS2LP_TIME_SHIFT
 24

	)

348 
	#DSI_DLTCR_HS2LP_TIME_MASK
 0xff

	)

349 
	#DSI_DLTCR_LP2HS_TIME_SHIFT
 16

	)

350 
	#DSI_DLTCR_LP2HS_TIME_MASK
 0xff

	)

351 
	#DSI_DLTCR_MRD_TIME_SHIFT
 0

	)

352 
	#DSI_DLTCR_MRD_TIME_MASK
 0x7fff

	)

357 
	#DSI_PCTLR
 
	`MMIO32
(
DSI_BASE
 + 0xA0U)

	)

358 
	#DSI_PCTLR_CKE
 (1 << 2)

	)

359 
	#DSI_PCTLR_DEN
 (1 << 1)

	)

364 
	#DSI_PCONFR
 
	`MMIO32
(
DSI_BASE
 + 0xA4U)

	)

365 
	#DSI_PCONFR_SW_TIME_SHIFT
 8

	)

366 
	#DSI_PCONFR_SW_TIME_MASK
 0xff

	)

367 
	#DSI_PCONFR_NL_SHIFT
 0

	)

368 
	#DSI_PCONFR_NL_MASK
 0x3

	)

369 
	#DSI_PCONFR_NL_1LANE
 0

	)

370 
	#DSI_PCONFR_NL_2LANE
 1

	)

375 
	#DSI_PUCR
 
	`MMIO32
(
DSI_BASE
 + 0xA8U)

	)

376 
	#DSI_PUCR_UEDL
 (1 << 3)

	)

377 
	#DSI_PUCR_URDL
 (1 << 2)

	)

378 
	#DSI_PUCR_UECL
 (1 << 1)

	)

379 
	#DSI_PUCR_URCL
 (1 << 0)

	)

384 
	#DSI_PTTCR
 
	`MMIO32
(
DSI_BASE
 + 0xACU)

	)

385 
	#DSI_PTTCR_TX_TRIG_SHIFT
 0

	)

386 
	#DSI_PTTCR_TX_TRIG_MASK
 0xf

	)

387 
	#DSI_PTTCR_TX_TRIG_1
 0x1

	)

388 
	#DSI_PTTCR_TX_TRIG_2
 0x2

	)

389 
	#DSI_PTTCR_TX_TRIG_3
 0x4

	)

390 
	#DSI_PTTCR_TX_TRIG_4
 0x8

	)

395 
	#DSI_PSR
 
	`MMIO32
(
DSI_BASE
 + 0xB0U)

	)

396 
	#DSI_PSR_UAN1
 (1 << 8)

	)

397 
	#DSI_PSR_PSS1
 (1 << 7)

	)

398 
	#DSI_PSR_RUE0
 (1 << 6)

	)

399 
	#DSI_PSR_UAN0
 (1 << 5)

	)

400 
	#DSI_PSR_PSS0
 (1 << 4)

	)

401 
	#DSI_PSR_UANC
 (1 << 3)

	)

402 
	#DSI_PSR_PSSC
 (1 << 2)

	)

403 
	#DSI_PSR_PD
 (1 << 1)

	)

408 
	#DSI_ISR0
 
	`MMIO32
(
DSI_BASE
 + 0xBCU)

	)

409 
	#DSI_ISR0_PE4
 (1 << 20)

	)

410 
	#DSI_ISR0_PE3
 (1 << 19)

	)

411 
	#DSI_ISR0_PE2
 (1 << 18)

	)

412 
	#DSI_ISR0_PE1
 (1 << 17)

	)

413 
	#DSI_ISR0_PE0
 (1 << 16)

	)

414 
	#DSI_ISR0_AE15
 (1 << 15)

	)

415 
	#DSI_ISR0_AE14
 (1 << 14)

	)

416 
	#DSI_ISR0_AE13
 (1 << 13)

	)

417 
	#DSI_ISR0_AE12
 (1 << 12)

	)

418 
	#DSI_ISR0_AE11
 (1 << 11)

	)

419 
	#DSI_ISR0_AE10
 (1 << 10)

	)

420 
	#DSI_ISR0_AE9
 (1 << 9)

	)

421 
	#DSI_ISR0_AE8
 (1 << 8)

	)

422 
	#DSI_ISR0_AE7
 (1 << 7)

	)

423 
	#DSI_ISR0_AE6
 (1 << 6)

	)

424 
	#DSI_ISR0_AE5
 (1 << 5)

	)

425 
	#DSI_ISR0_AE4
 (1 << 4)

	)

426 
	#DSI_ISR0_AE3
 (1 << 3)

	)

427 
	#DSI_ISR0_AE2
 (1 << 2)

	)

428 
	#DSI_ISR0_AE1
 (1 << 1)

	)

429 
	#DSI_ISR0_AE0
 (1 << 0)

	)

434 
	#DSI_ISR1
 
	`MMIO32
(
DSI_BASE
 + 0xC0U)

	)

435 
	#DSI_ISR1_GPRXE
 (1 << 12)

	)

436 
	#DSI_ISR1_GPRDE
 (1 << 11)

	)

437 
	#DSI_ISR1_GPTXE
 (1 << 10)

	)

438 
	#DSI_ISR1_GPWRE
 (1 << 9)

	)

439 
	#DSI_ISR1_GCWRE
 (1 << 8)

	)

440 
	#DSI_ISR1_LPWRE
 (1 << 7)

	)

441 
	#DSI_ISR1_EOTPE
 (1 << 6)

	)

442 
	#DSI_ISR1_PSE
 (1 << 5)

	)

443 
	#DSI_ISR1_CRCE
 (1 << 4)

	)

444 
	#DSI_ISR1_ECCME
 (1 << 3)

	)

445 
	#DSI_ISR1_ECCSE
 (1 << 2)

	)

446 
	#DSI_ISR1_TOLPRX
 (1 << 1)

	)

447 
	#DSI_ISR1_TOHSTX
 (1 << 0)

	)

452 
	#DSI_IER0
 
	`MMIO32
(
DSI_BASE
 + 0xC4U)

	)

453 
	#DSI_IER0_PE4IE
 (1 << 20)

	)

454 
	#DSI_IER0_PE3IE
 (1 << 19)

	)

455 
	#DSI_IER0_PE2IE
 (1 << 18)

	)

456 
	#DSI_IER0_PE1IE
 (1 << 17)

	)

457 
	#DSI_IER0_PE0IE
 (1 << 16)

	)

458 
	#DSI_IER0_AE15IE
 (1 << 15)

	)

459 
	#DSI_IER0_AE14IE
 (1 << 14)

	)

460 
	#DSI_IER0_AE13IE
 (1 << 13)

	)

461 
	#DSI_IER0_AE12IE
 (1 << 12)

	)

462 
	#DSI_IER0_AE11IE
 (1 << 11)

	)

463 
	#DSI_IER0_AE10IE
 (1 << 10)

	)

464 
	#DSI_IER0_AE9IE
 (1 << 9)

	)

465 
	#DSI_IER0_AE8IE
 (1 << 8)

	)

466 
	#DSI_IER0_AE7IE
 (1 << 7)

	)

467 
	#DSI_IER0_AE6IE
 (1 << 6)

	)

468 
	#DSI_IER0_AE5IE
 (1 << 5)

	)

469 
	#DSI_IER0_AE4IE
 (1 << 4)

	)

470 
	#DSI_IER0_AE3IE
 (1 << 3)

	)

471 
	#DSI_IER0_AE2IE
 (1 << 2)

	)

472 
	#DSI_IER0_AE1IE
 (1 << 1)

	)

473 
	#DSI_IER0_AE0IE
 (1 << 0)

	)

478 
	#DSI_IER1
 
	`MMIO32
(
DSI_BASE
 + 0xC8U)

	)

479 
	#DSI_IER1_GPRXEIE
 (1 << 12)

	)

480 
	#DSI_IER1_GPRDEIE
 (1 << 11)

	)

481 
	#DSI_IER1_GPTXEIE
 (1 << 10)

	)

482 
	#DSI_IER1_GPWREIE
 (1 << 9)

	)

483 
	#DSI_IER1_GCWREIE
 (1 << 8)

	)

484 
	#DSI_IER1_LPWREIE
 (1 << 7)

	)

485 
	#DSI_IER1_EOTPEIE
 (1 << 6)

	)

486 
	#DSI_IER1_PSEIE
 (1 << 5)

	)

487 
	#DSI_IER1_CRCEIE
 (1 << 4)

	)

488 
	#DSI_IER1_ECCMEIE
 (1 << 3)

	)

489 
	#DSI_IER1_ECCSEIE
 (1 << 2)

	)

490 
	#DSI_IER1_TOLPRXIE
 (1 << 1)

	)

491 
	#DSI_IER1_TOHSTXIE
 (1 << 0)

	)

496 
	#DSI_FIR0
 
	`MMIO32
(
DSI_BASE
 + 0xD8U)

	)

497 
	#DSI_FIR0_FPE4
 (1 << 20)

	)

498 
	#DSI_FIR0_FPE3
 (1 << 19)

	)

499 
	#DSI_FIR0_FPE2
 (1 << 18)

	)

500 
	#DSI_FIR0_FPE1
 (1 << 17)

	)

501 
	#DSI_FIR0_FPE0
 (1 << 16)

	)

502 
	#DSI_FIR0_FAE15
 (1 << 15)

	)

503 
	#DSI_FIR0_FAE14
 (1 << 14)

	)

504 
	#DSI_FIR0_FAE13
 (1 << 13)

	)

505 
	#DSI_FIR0_FAE12
 (1 << 12)

	)

506 
	#DSI_FIR0_FAE11
 (1 << 11)

	)

507 
	#DSI_FIR0_FAE10
 (1 << 10)

	)

508 
	#DSI_FIR0_FAE9
 (1 << 9)

	)

509 
	#DSI_FIR0_FAE8
 (1 << 8)

	)

510 
	#DSI_FIR0_FAE7
 (1 << 7)

	)

511 
	#DSI_FIR0_FAE6
 (1 << 6)

	)

512 
	#DSI_FIR0_FAE5
 (1 << 5)

	)

513 
	#DSI_FIR0_FAE4
 (1 << 4)

	)

514 
	#DSI_FIR0_FAE3
 (1 << 3)

	)

515 
	#DSI_FIR0_FAE2
 (1 << 2)

	)

516 
	#DSI_FIR0_FAE1
 (1 << 1)

	)

517 
	#DSI_FIR0_FAE0
 (1 << 0)

	)

522 
	#DSI_FIR1
 
	`MMIO32
(
DSI_BASE
 + 0xDCU)

	)

523 
	#DSI_FIR1_FGPRXE
 (1 << 12)

	)

524 
	#DSI_FIR1_FGPRDE
 (1 << 11)

	)

525 
	#DSI_FIR1_FGPTXE
 (1 << 10)

	)

526 
	#DSI_FIR1_FGPWRE
 (1 << 9)

	)

527 
	#DSI_FIR1_FGCWRE
 (1 << 8)

	)

528 
	#DSI_FIR1_FLPWRE
 (1 << 7)

	)

529 
	#DSI_FIR1_FEOTPE
 (1 << 6)

	)

530 
	#DSI_FIR1_FPSE
 (1 << 5)

	)

531 
	#DSI_FIR1_FCRCE
 (1 << 4)

	)

532 
	#DSI_FIR1_FECCME
 (1 << 3)

	)

533 
	#DSI_FIR1_FECCSE
 (1 << 2)

	)

534 
	#DSI_FIR1_FTOLPRX
 (1 << 1)

	)

535 
	#DSI_FIR1_FTOHSTX
 (1 << 0)

	)

540 
	#DSI_VSCR
 
	`MMIO32
(
DSI_BASE
 + 0x100U)

	)

541 
	#DSI_VSCR_UR
 (1 << 8)

	)

542 
	#DSI_VSCR_EN
 (1 << 0)

	)

547 
	#DSI_LCVCIDR
 
	`MMIO32
(
DSI_BASE
 + 0x10CU)

	)

548 
	#DSI_LCVCIDR_VCID_SHIFT
 0

	)

549 
	#DSI_LCVCIDR_VCID_MASK
 0x3

	)

554 
	#DSI_LCCCR
 
	`MMIO32
(
DSI_BASE
 + 0x110U)

	)

555 
	#DSI_LCCR_LPE
 (1 << 8)

	)

556 
	#DSI_LCCR_COLC_SHIFT
 0

	)

557 
	#DSI_LCCR_COLC_MASK
 0xf

	)

562 
	#DSI_LPMCCR
 
	`MMIO32
(
DSI_BASE
 + 0x118U)

	)

563 
	#DSI_LPMCCR_LPSIZE_SHIFT
 16

	)

564 
	#DSI_LPMCCR_LPSIZE_MASK
 0xff

	)

565 
	#DSI_LPMCCR_VLPSIZE_SHIFT
 0

	)

566 
	#DSI_LPMCCR_VLPSIZE_MASK
 0xff

	)

571 
	#DSI_VMCCR
 
	`MMIO32
(
DSI_BASE
 + 0x138U)

	)

572 
	#DSI_VMCCR_LPCE
 (1 << 9)

	)

573 
	#DSI_VMCCR_FBTAAE
 (1 << 8)

	)

574 
	#DSI_VMCCR_LPHFE
 (1 << 7)

	)

575 
	#DSI_VMCCR_LPHBPE
 (1 << 6)

	)

576 
	#DSI_VMCCR_LPVAE
 (1 << 5)

	)

577 
	#DSI_VMCCR_LPVFPE
 (1 << 4)

	)

578 
	#DSI_VMCCR_LPVBPE
 (1 << 3)

	)

579 
	#DSI_VMCCR_LPVSAE
 (1 << 2)

	)

580 
	#DSI_VMCCR_VMT_SHIFT
 0

	)

581 
	#DSI_VMCCR_VMT_MASK
 0x3

	)

586 
	#DSI_VPCCR
 
	`MMIO32
(
DSI_BASE
 + 0x13CU)

	)

587 
	#DSI_VPCCR_VPSIZE_SHIFT
 0

	)

588 
	#DSI_VPCCR_VPSIZE_MASK
 0x3fff

	)

593 
	#DSI_VCCCR
 
	`MMIO32
(
DSI_BASE
 + 0x140U)

	)

594 
	#DSI_VCCCR_NUMC_SHIFT
 0

	)

595 
	#DSI_VCCCR_NUMC_MASK
 0x1fff

	)

600 
	#DSI_VNPCCR
 
	`MMIO32
(
DSI_BASE
 + 0x144U)

	)

601 
	#DSI_VNPCCR_NPSIZE_SHIFT
 0

	)

602 
	#DSI_VNPCCR_NPSIZE_MASK
 0x1fff

	)

607 
	#DSI_VHSACCR
 
	`MMIO32
(
DSI_BASE
 + 0x148U)

	)

608 
	#DSI_VHSACCR_HSA_SHIFT
 0

	)

609 
	#DSI_VHSACCR_HSA_MASK
 0xfff

	)

614 
	#DSI_VHBPCCR
 
	`MMIO32
(
DSI_BASE
 + 0x14CU)

	)

615 
	#DSI_VHBPCCR_HBP_SHIFT
 0

	)

616 
	#DSI_VHBPCCR_HBP_MASK
 0xfff

	)

621 
	#DSI_VLCCR
 
	`MMIO32
(
DSI_BASE
 + 0x150U)

	)

622 
	#DSI_VLCCR_HLINE_SHIFT
 0

	)

623 
	#DSI_VLCCR_HLINE_MASK
 0x7fff

	)

628 
	#DSI_VVSACCR
 
	`MMIO32
(
DSI_BASE
 + 0x154U)

	)

629 
	#DSI_VVSACCR_VSA_SHIFT
 0

	)

630 
	#DSI_VVSACCR_VSA_MASK
 0x3ff

	)

635 
	#DSI_VVBPCCR
 
	`MMIO32
(
DSI_BASE
 + 0x0158U)

	)

636 
	#DSI_VVBPCCR_VBP_SHIFT
 0

	)

637 
	#DSI_VVBPCCR_VBP_MAST
 0x3ff

	)

642 
	#DSI_VVFPCCR
 
	`MMIO32
(
DSI_BASE
 + 0x15CU)

	)

643 
	#DSI_VVFPCCR_VFP_SHIFT
 0

	)

644 
	#DSI_VVFPCCR_VFP_MASK
 0x3ff

	)

649 
	#DSI_VVACCR
 
	`MMIO32
(
DSI_BASE
 + 0x160U)

	)

650 
	#DSI_VVACCR_VA_SHIFT
 0

	)

651 
	#DSI_VVACCR_VA_MASK
 0x3fff

	)

656 
	#DSI_WCFGR
 
	`MMIO32
(
DSI_BASE
 + 0x400U)

	)

657 
	#DSI_WCFGR_VSPOL
 (1 << 7)

	)

658 
	#DSI_WCFGR_AR
 (1 << 6)

	)

659 
	#DSI_WCFGR_TEPOL
 (1 << 5)

	)

660 
	#DSI_WCFGR_TESRC
 (1 << 4)

	)

661 
	#DSI_WCFGR_COLMUX_SHIFT
 1

	)

662 
	#DSI_WCFGR_COLMUX_MASK
 7

	)

663 
	#DSI_WCFGR_DSIM
 (1 << 0)

	)

668 
	#DSI_WCR
 
	`MMIO32
(
DSI_BASE
 + 0x404U)

	)

669 
	#DSI_WCR_DSIEN
 (1 << 3)

	)

670 
	#DSI_WCR_LTDCEN
 (1 << 2)

	)

671 
	#DSI_WCR_SHTDN
 (1 << 1)

	)

672 
	#DSI_SCR_COLM
 (1 << 0)

	)

677 
	#DSI_WIER
 
	`MMIO32
(
DSI_BASE
 + 0x408U)

	)

678 
	#DSI_WIER_RRIE
 (1 << 13)

	)

679 
	#DSI_WIER_PLLUIE
 (1 << 10)

	)

680 
	#DSI_WIER_PLLLIE
 (1 << 9)

	)

681 
	#DSI_WIER_ERIE
 (1 << 1)

	)

682 
	#DSI_WIER_TEIE
 (1 << 0)

	)

687 
	#DSI_WISR
 
	`MMIO32
(
DSI_BASE
 + 0x40CU)

	)

689 
	#DSI_WISR_RRIF
 (1 << 13)

	)

690 
	#DSI_WISR_RRS
 (1 << 12)

	)

691 
	#DSI_WISR_PLLUIF
 (1 << 10)

	)

692 
	#DSI_WISR_PLLLIF
 (1 << 9)

	)

693 
	#DSI_WISR_PLLLS
 (1 << 8)

	)

695 
	#DSI_WISR_BUSY
 (1 << 2)

	)

696 
	#DSI_WISR_ERIF
 (1 << 1)

	)

697 
	#DSI_WISR_TEIF
 (1 << 0)

	)

702 
	#DSI_WIFCR
 
	`MMIO32
(
DSI_BASE
 + 0x410U)

	)

704 
	#DSI_WIFCR_CRRIF
 (1 << 13)

	)

706 
	#DSI_WIFCR_CPLLUIF
 (1 << 10)

	)

707 
	#DSI_WIFCR_CPLLLIF
 (1 << 9)

	)

709 
	#DSI_WIFCR_CERIF
 (1 << 1)

	)

710 
	#DSI_WIFCR_CTEIF
 (1 << 0)

	)

715 
	#DSI_WPCR0
 
	`MMIO32
(
DSI_BASE
 + 0x418U)

	)

716 
	#DSI_WPCR0_TCLKPOSTEN
 (1 << 27)

	)

717 
	#DSI_WPCR0_TLPXCEN
 (1 << 26)

	)

718 
	#DSI_WPCR0_THSEXITEN
 (1 << 25)

	)

719 
	#DSI_WPCR0_TLPXDEN
 (1 << 24)

	)

720 
	#DSI_WPCR0_THSZEROEN
 (1 << 23)

	)

721 
	#DSI_WPCR0_THSTRAILEN
 (1 << 22)

	)

722 
	#DSI_WPCR0_THSPREPEN
 (1 << 21)

	)

723 
	#DSI_WPCR0_TCLKZEROEN
 (1 << 20)

	)

724 
	#DSI_WPCR0_TCLKPREPEN
 (1 << 19)

	)

725 
	#DSI_WPCR0_PDEN
 (1 << 18)

	)

726 
	#DSI_WPCR0_TDDL
 (1 << 16)

	)

727 
	#DSI_WPCR0_CDOFFDL
 (1 << 14)

	)

728 
	#DSI_WPCR0_FTXSMDL
 (1 << 13)

	)

729 
	#DSI_WPCR0_FTXSMCL
 (1 << 12)

	)

730 
	#DSI_WPCR0_HSIDL1
 (1 << 11)

	)

731 
	#DSI_WPCR0_HSIDL0
 (1 << 10)

	)

732 
	#DSI_WPCR0_HSICL
 (1 << 9)

	)

733 
	#DSI_WPCR0_SWDL1
 (1 << 8)

	)

734 
	#DSI_WPCR0_SWDL0
 (1 << 7)

	)

735 
	#DSI_WPCR0_SWCL
 (1 << 6)

	)

736 
	#DSI_WPCR0_UIX4_SHIFT
 0

	)

737 
	#DSI_WPCR0_UIX4_MASK
 0x3f

	)

742 
	#DSI_WPCR1
 
	`MMIO32
(
DSI_BASE
 + 0x41CU)

	)

743 
	#DSI_WPCR1_LPRXFT_SHIFT
 25

	)

744 
	#DSI_WPCR1_LPRXFT_MASK
 0x3

	)

745 
	#DSI_WPCR1_FLPRXLPM
 (1 << 22)

	)

746 
	#DSI_WPCR1_HSTXSRCDL_SHIFT
 18

	)

747 
	#DSI_WPCR1_HSTXSRCDL_MASK
 0x3

	)

748 
	#DSI_WPCR1_HSTXSRCCL_SHIFT
 16

	)

749 
	#DSI_WPCR1_HSTXSRCCL_MASK
 0x3

	)

750 
	#DSI_WPCR1_SDDC
 (1 << 12)

	)

751 
	#DSI_WPCR1_LPSRCDL_SHIFT
 8

	)

752 
	#DSI_WPCR1_LPSRCDL_MASK
 0x3

	)

753 
	#DSI_WPCR1_HSTXDDL_SHIFT
 2

	)

754 
	#DSI_WPCR1_HSTXDDL_MASK
 0x3

	)

755 
	#DSI_WPCR1_HSTXDCL_SHIFT
 0

	)

756 
	#DSI_WPCR1_HSTXDCL_MASK
 0x3

	)

761 
	#DSI_WPCR2
 
	`MMIO32
(
DSI_BASE
 + 0x420U)

	)

762 
	#DSI_WPCR2_THSTRAIL_SHIFT
 24

	)

763 
	#DSI_WPCR2_THSTRAIL_MASK
 0xff

	)

764 
	#DSI_WPCR2_THSPREP_SHIFT
 16

	)

765 
	#DSI_WPCR2_THSPREP_MASK
 0xff

	)

766 
	#DSI_WPCR2_TCLKZERO_SHIFT
 8

	)

767 
	#DSI_WPCR2_TCLKZERO_MASK
 0xff

	)

768 
	#DSI_WPCR2_TCLKPREP_SHIF
 0

	)

769 
	#DSI_WPCR2_TCLKPREP_MASK
 0xff

	)

774 
	#DSI_WPCR3
 
	`MMIO32
(
DSI_BASE
 + 0x424U)

	)

775 
	#DSI_WPCR3_TLPXC_SHIFT
 24

	)

776 
	#DSI_WPCR3_TLPXC_MASK
 0xff

	)

777 
	#DSI_WPCR3_THSEXIT_SHIFT
 16

	)

778 
	#DSI_WPCR3_THSEXIT_MASK
 0xff

	)

779 
	#DSI_WPCR3_TLPXD_SHIFT
 8

	)

780 
	#DSI_WPCR3_TLPXD_MASK
 0xff

	)

781 
	#DSI_WPCR3_THSZERO_SHIFT
 0

	)

782 
	#DSI_WPCR3_THSZERO_MASK
 0xff

	)

787 
	#DSI_WPCR4
 
	`MMIO32
(
DSI_BASE
 + 0x428U)

	)

788 
	#DSI_WPCR4_TCLKPOST_SHIFT
 0

	)

789 
	#DSI_WPCR4_TCLKPOST_MASK
 0xff

	)

794 
	#DSI_WRPCR
 
	`MMIO32
(
DSI_BASE
 + 0x430U)

	)

795 
	#DSI_WRPCR_REGEN
 (1 << 24)

	)

796 
	#DSI_WRPCR_ODF_SHIFT
 16

	)

797 
	#DSI_WRPCR_ODF_MASK
 0x3

	)

798 
	#DSI_WRPCR_ODF_DIV_1
 0

	)

799 
	#DSI_WRPCR_ODF_DIV_2
 1

	)

800 
	#DSI_WRPCR_ODF_DIV_4
 2

	)

801 
	#DSI_WRPCR_ODF_DIV_8
 3

	)

802 
	#DSI_WRPCR_IDF_SHIFT
 11

	)

803 
	#DSI_WRPCR_IDF_MASK
 0xf

	)

804 
	#DSI_WRPCR_IDF_DIV_1
 1

	)

805 
	#DSI_WRPCR_IDF_DIV_2
 2

	)

806 
	#DSI_WRPCR_IDF_DIV_3
 3

	)

807 
	#DSI_WRPCR_IDF_DIV_4
 4

	)

808 
	#DSI_WRPCR_IDF_DIV_5
 5

	)

809 
	#DSI_WRPCR_IDF_DIV_6
 6

	)

810 
	#DSI_WRPCR_IDF_DIV_7
 7

	)

812 
	#DSI_WRPCR_NDIV_SHIFT
 2

	)

813 
	#DSI_WRPCR_NDIV_MASK
 0x7f

	)

814 
	#DSI_WRPCR_PLLEN
 (1 << 0)

	)

	@libopencm3/include/libopencm3/stm32/f4/exti.h

36 #i‚de‡
LIBOPENCM3_EXTI_H


37 
	#LIBOPENCM3_EXTI_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/exti_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f4/flash.h

31 #i‚de‡
LIBOPENCM3_FLASH_H


32 
	#LIBOPENCM3_FLASH_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/Êash_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f4/fmc.h

20 #i‚de‡
LIBOPENCM3_FMC_H


21 
	#LIBOPENCM3_FMC_H


	)

23 #i‚de‡
LIBOPENCM3_FSMC_H


24 
	gîr‹
 "This file shouldÇot be included directly, it is included with fsmc.h"

29 
	#FMC_BANK5_BASE
 0xa0000000U

	)

30 
	#FMC_BANK6_BASE
 0xb0000000U

	)

31 
	#FMC_BANK7_BASE
 0xc0000000U

	)

32 
	#FMC_BANK8_BASE
 0xd0000000U

	)

37 
	#FMC_SDCR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x140 + 4 * (x))

	)

38 
	#FMC_SDCR1
 
	`FMC_SDCR
(0)

	)

39 
	#FMC_SDCR2
 
	`FMC_SDCR
(1)

	)

43 
	#FMC_SDTR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x148 + 4 * (x))

	)

44 
	#FMC_SDTR1
 
	`FMC_SDTR
(0)

	)

45 
	#FMC_SDTR2
 
	`FMC_SDTR
(1)

	)

48 
	#FMC_SDCMR
 
	`MMIO32
(
FSMC_BASE
 + (
uöt32_t
Ë0x150)

	)

51 
	#FMC_SDRTR
 
	`MMIO32
(
FSMC_BASE
 + 0x154)

	)

54 
	#FMC_SDSR
 
	`MMIO32
(
FSMC_BASE
 + (
uöt32_t
Ë0x158)

	)

61 
	#FMC_SDCR_RPIPE_SHIFT
 13

	)

62 
	#FMC_SDCR_RPIPE_MASK
 (3 << 
FMC_SDCR_RPIPE_SHIFT
)

	)

63 
	#FMC_SDCR_RPIPE_NONE
 (0 << 
FMC_SDCR_RPIPE_SHIFT
)

	)

64 
	#FMC_SDCR_RPIPE_1CLK
 (1 << 
FMC_SDCR_RPIPE_SHIFT
)

	)

65 
	#FMC_SDCR_RPIPE_2CLK
 (2 << 
FMC_SDCR_RPIPE_SHIFT
)

	)

68 
	#FMC_SDCR_RBURST
 (1 << 12)

	)

71 
	#FMC_SDCR_SDCLK_SHIFT
 10

	)

72 
	#FMC_SDCR_SDCLK_MASK
 (3 << 
FMC_SDCR_SDCLK_SHIFT
)

	)

73 
	#FMC_SDCR_SDCLK_DISABLE
 (0 << 
FMC_SDCR_SDCLK_SHIFT
)

	)

74 
	#FMC_SDCR_SDCLK_2HCLK
 (2 << 
FMC_SDCR_SDCLK_SHIFT
)

	)

75 
	#FMC_SDCR_SDCLK_3HCLK
 (3 << 
FMC_SDCR_SDCLK_SHIFT
)

	)

78 
	#FMC_SDCR_WP_ENABLE
 (1 << 9)

	)

81 
	#FMC_SDCR_CAS_SHIFT
 7

	)

82 
	#FMC_SDCR_CAS_1CYC
 (1 << 
FMC_SDCR_CAS_SHIFT
)

	)

83 
	#FMC_SDCR_CAS_2CYC
 (2 << 
FMC_SDCR_CAS_SHIFT
)

	)

84 
	#FMC_SDCR_CAS_3CYC
 (3 << 
FMC_SDCR_CAS_SHIFT
)

	)

87 
	#FMC_SDCR_NB2
 0

	)

88 
	#FMC_SDCR_NB4
 (1 << 6)

	)

91 
	#FMC_SDCR_MWID_SHIFT
 4

	)

92 
	#FMC_SDCR_MWID_8b
 (0 << 
FMC_SDCR_MWID_SHIFT
)

	)

93 
	#FMC_SDCR_MWID_16b
 (1 << 
FMC_SDCR_MWID_SHIFT
)

	)

94 
	#FMC_SDCR_MWID_32b
 (2 << 
FMC_SDCR_MWID_SHIFT
)

	)

97 
	#FMC_SDCR_NR_SHIFT
 2

	)

98 
	#FMC_SDCR_NR_11
 (0 << 
FMC_SDCR_NR_SHIFT
)

	)

99 
	#FMC_SDCR_NR_12
 (1 << 
FMC_SDCR_NR_SHIFT
)

	)

100 
	#FMC_SDCR_NR_13
 (2 << 
FMC_SDCR_NR_SHIFT
)

	)

103 
	#FMC_SDCR_NC_SHIFT
 0

	)

104 
	#FMC_SDCR_NC_8
 (0 << 
FMC_SDCR_NC_SHIFT
)

	)

105 
	#FMC_SDCR_NC_9
 (1 << 
FMC_SDCR_NC_SHIFT
)

	)

106 
	#FMC_SDCR_NC_10
 (2 << 
FMC_SDCR_NC_SHIFT
)

	)

107 
	#FMC_SDCR_NC_11
 (3 << 
FMC_SDCR_NC_SHIFT
)

	)

114 
	#FMC_SDTR_TRCD_SHIFT
 24

	)

115 
	#FMC_SDTR_TRCD_MASK
 (15 << 
FMC_SDTR_TRCD_SHIFT
)

	)

118 
	#FMC_SDTR_TRP_SHIFT
 20

	)

119 
	#FMC_SDTR_TRP_MASK
 (15 << 
FMC_SDTR_TRP_SHIFT
)

	)

122 
	#FMC_SDTR_TWR_SHIFT
 16

	)

123 
	#FMC_SDTR_TWR_MASK
 (15 << 
FMC_SDTR_TWR_SHIFT
)

	)

126 
	#FMC_SDTR_TRC_SHIFT
 12

	)

127 
	#FMC_SDTR_TRC_MASK
 (15 << 
FMC_SDTR_TRC_SHIFT
)

	)

130 
	#FMC_SDTR_TRAS_SHIFT
 8

	)

131 
	#FMC_SDTR_TRAS_MASK
 (15 << 
FMC_SDTR_TRAS_SHIFT
)

	)

134 
	#FMC_SDTR_TXSR_SHIFT
 4

	)

135 
	#FMC_SDTR_TXSR_MASK
 (15 << 
FMC_SDTR_TXSR_SHIFT
)

	)

138 
	#FMC_SDTR_TMRD_SHIFT
 0

	)

139 
	#FMC_SDTR_TMRD_MASK
 (15 << 
FMC_SDTR_TMRD_SHIFT
)

	)

147 
	#FMC_SDTR_DNC_MASK
 (
FMC_SDTR_TRP_MASK
 | 
FMC_SDTR_TRC_MASK
)

	)

148 
	#FMC_SDCR_DNC_MASK
 (
FMC_SDCR_SDCLK_MASK
 | \

149 
FMC_SDCR_RPIPE_MASK
 | \

150 
FMC_SDCR_RBURST
)

	)

157 
	#FMC_SDCMR_MRD_SHIFT
 9

	)

158 
	#FMC_SDCMR_MRD_MASK
 (0x1ff‡<< 
FMC_SDCMR_MRD_SHIFT
)

	)

161 
	#FMC_SDCMR_NRFS_SHIFT
 5

	)

162 
	#FMC_SDCMR_NRFS_MASK
 (15 << 
FMC_SDCMR_NRFS_SHIFT
)

	)

165 
	#FMC_SDCMR_CTB1
 (1 << 4)

	)

168 
	#FMC_SDCMR_CTB2
 (1 << 3)

	)

171 
	#FMC_SDCMR_MODE_SHIFT
 0

	)

172 
	#FMC_SDCMR_MODE_MASK
 7

	)

173 
	#FMC_SDCMR_MODE_NORMAL
 0

	)

174 
	#FMC_SDCMR_MODE_CLOCK_CONFIG_ENA
 1

	)

175 
	#FMC_SDCMR_MODE_PALL
 2

	)

176 
	#FMC_SDCMR_MODE_AUTO_REFRESH
 3

	)

177 
	#FMC_SDCMR_MODE_LOAD_MODE_REGISTER
 4

	)

178 
	#FMC_SDCMR_MODE_SELF_REFRESH
 5

	)

179 
	#FMC_SDCMR_MODE_POWER_DOWN
 6

	)

186 
	#FMC_SDRTR_REIE
 (1 << 14)

	)

189 
	#FMC_SDRTR_COUNT_SHIFT
 1

	)

190 
	#FMC_SDRTR_COUNT_MASK
 (0x1ff‡<< 
FMC_SDRTR_COUNT_SHIFT
)

	)

193 
	#FMC_SDRTR_CRE
 (1 << 0)

	)

200 
	#FMC_SDSR_BUSY
 (1 << 5)

	)

203 
	#FMC_SDSR_MODE_NORMAL
 0

	)

204 
	#FMC_SDSR_MODE_SELF_REFRESH
 1

	)

205 
	#FMC_SDSR_MODE_POWER_DOWN
 2

	)

208 
	#FMC_SDSR_MODE2_SHIFT
 3

	)

209 
	#FMC_SDSR_MODE1_SHIFT
 1

	)

212 
	#FMC_SDSR_RE
 (1 << 0)

	)

215 
	ssdøm_timög
 {

216 
	måcd
;

217 
	måp
;

218 
	mtwr
;

219 
	måc
;

220 
	måas
;

221 
	mtx§
;

222 
	mtmrd
;

226 
	#SDRAM_MODE_BURST_LENGTH_1
 ((
uöt16_t
)0x0000)

	)

227 
	#SDRAM_MODE_BURST_LENGTH_2
 ((
uöt16_t
)0x0001)

	)

228 
	#SDRAM_MODE_BURST_LENGTH_4
 ((
uöt16_t
)0x0002)

	)

229 
	#SDRAM_MODE_BURST_LENGTH_8
 ((
uöt16_t
)0x0004)

	)

230 
	#SDRAM_MODE_BURST_TYPE_SEQUENTIAL
 ((
uöt16_t
)0x0000)

	)

231 
	#SDRAM_MODE_BURST_TYPE_INTERLEAVED
 ((
uöt16_t
)0x0008)

	)

232 
	#SDRAM_MODE_CAS_LATENCY_2
 ((
uöt16_t
)0x0020)

	)

233 
	#SDRAM_MODE_CAS_LATENCY_3
 ((
uöt16_t
)0x0030)

	)

234 
	#SDRAM_MODE_OPERATING_MODE_STANDARD
 ((
uöt16_t
)0x0000)

	)

235 
	#SDRAM_MODE_WRITEBURST_MODE_PROGRAMMED
 ((
uöt16_t
)0x0000)

	)

236 
	#SDRAM_MODE_WRITEBURST_MODE_SINGLE
 ((
uöt16_t
)0x0200)

	)

238 
	efmc_sdøm_b™k
 { 
	mSDRAM_BANK1
, 
	mSDRAM_BANK2
, 
	mSDRAM_BOTH_BANKS
 };

239 
	efmc_sdøm_comm™d
 { 
	mSDRAM_CLK_CONF
, 
	mSDRAM_NORMAL
, 
	mSDRAM_PALL
,

240 
	mSDRAM_AUTO_REFRESH
, 
	mSDRAM_LOAD_MODE
,

241 
	mSDRAM_SELF_REFRESH
, 
	mSDRAM_POWER_DOWN
 };

246 
uöt32_t
 
sdøm_timög
(sdøm_timög *
t
);

247 
sdøm_comm™d
(
fmc_sdøm_b™k
 
b™k
, 
fmc_sdøm_comm™d
 
cmd
,

248 
aut‹e‰esh
, 
modîeg
);

	@libopencm3/include/libopencm3/stm32/f4/gpio.h

31 #i‚de‡
LIBOPENCM3_GPIO_H


32 
	#LIBOPENCM3_GPIO_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f4/hash.h

31 #i‚de‡
LIBOPENCM3_HASH_H


32 
	#LIBOPENCM3_HASH_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/hash_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f4/i2c.h

31 #i‚de‡
LIBOPENCM3_I2C_H


32 
	#LIBOPENCM3_I2C_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/i2c_comm⁄_v1.h
>

38 
	#I2C3
 
I2C3_BASE


	)

	@libopencm3/include/libopencm3/stm32/f4/iwdg.h

33 #i‚de‡
LIBOPENCM3_IWDG_H


34 
	#LIBOPENCM3_IWDG_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/iwdg_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/f4/ltdc.h

21 #i‚de‡
LIBOPENCM3_STM32_F4_LTDC_H_


22 
	#LIBOPENCM3_STM32_F4_LTDC_H_


	)

25 
	~<°döt.h
>

26 
	~<lib›ícm3/°m32/rcc.h
>

33 
	#LTDC_SSCR
 (
	`MMIO32
(
LTDC_BASE
 + 0x08))

	)

34 
	#LTDC_BPCR
 (
	`MMIO32
(
LTDC_BASE
 + 0x0C))

	)

35 
	#LTDC_AWCR
 (
	`MMIO32
(
LTDC_BASE
 + 0x10))

	)

36 
	#LTDC_TWCR
 (
	`MMIO32
(
LTDC_BASE
 + 0x14))

	)

37 
	#LTDC_GCR
 (
	`MMIO32
(
LTDC_BASE
 + 0x18))

	)

38 
	#LTDC_SRCR
 (
	`MMIO32
(
LTDC_BASE
 + 0x24))

	)

39 
	#LTDC_BCCR
 (
	`MMIO32
(
LTDC_BASE
 + 0x2C))

	)

40 
	#LTDC_IER
 (
	`MMIO32
(
LTDC_BASE
 + 0x34))

	)

41 
	#LTDC_ISR
 (
	`MMIO32
(
LTDC_BASE
 + 0x38))

	)

42 
	#LTDC_ICR
 (
	`MMIO32
(
LTDC_BASE
 + 0x3C))

	)

43 
	#LTDC_LIPCR
 (
	`MMIO32
(
LTDC_BASE
 + 0x40))

	)

44 
	#LTDC_CPSR
 (
	`MMIO32
(
LTDC_BASE
 + 0x44))

	)

45 
	#LTDC_CDSR
 (
	`MMIO32
(
LTDC_BASE
 + 0x48))

	)

48 
	#LTDC_LxCR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0x84 + 0x80 * ((xË- 1)))

	)

49 
	#LTDC_L1CR
 
	`LTDC_LxCR
(
LTDC_LAYER_1
)

	)

50 
	#LTDC_L2CR
 
	`LTDC_LxCR
(
LTDC_LAYER_2
)

	)

52 
	#LTDC_LxWHPCR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0x88 + 0x80 * ((xË- 1)))

	)

53 
	#LTDC_L1WHPCR
 
	`LTDC_LxWHPCR
(
LTDC_LAYER_1
)

	)

54 
	#LTDC_L2WHPCR
 
	`LTDC_LxWHPCR
(
LTDC_LAYER_2
)

	)

56 
	#LTDC_LxWVPCR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0x8C + 0x80 * ((xË- 1)))

	)

57 
	#LTDC_L1WVPCR
 
	`LTDC_LxWVPCR
(
LTDC_LAYER_1
)

	)

58 
	#LTDC_L2WVPCR
 
	`LTDC_LxWVPCR
(
LTDC_LAYER_2
)

	)

60 
	#LTDC_LxCKCR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0x90 + 0x80 * ((xË- 1)))

	)

61 
	#LTDC_L1CKCR
 
	`LTDC_LxCKCR
(
LTDC_LAYER_1
)

	)

62 
	#LTDC_L2CKCR
 
	`LTDC_LxCKCR
(
LTDC_LAYER_2
)

	)

64 
	#LTDC_LxPFCR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0x94 + 0x80 * ((xË- 1)))

	)

65 
	#LTDC_L1PFCR
 
	`LTDC_LxPFCR
(
LTDC_LAYER_1
)

	)

66 
	#LTDC_L2PFCR
 
	`LTDC_LxPFCR
(
LTDC_LAYER_2
)

	)

68 
	#LTDC_LxCACR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0x98 + 0x80 * ((xË- 1)))

	)

69 
	#LTDC_L1CACR
 
	`LTDC_LxCACR
(
LTDC_LAYER_1
)

	)

70 
	#LTDC_L2CACR
 
	`LTDC_LxCACR
(
LTDC_LAYER_2
)

	)

72 
	#LTDC_LxDCCR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0x9C + 0x80 * ((xË- 1)))

	)

73 
	#LTDC_L1DCCR
 
	`LTDC_LxDCCR
(
LTDC_LAYER_1
)

	)

74 
	#LTDC_L2DCCR
 
	`LTDC_LxDCCR
(
LTDC_LAYER_2
)

	)

76 
	#LTDC_LxBFCR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0xA0 + 0x80 * ((xË- 1)))

	)

77 
	#LTDC_L1BFCR
 
	`LTDC_LxBFCR
(
LTDC_LAYER_1
)

	)

78 
	#LTDC_L2BFCR
 
	`LTDC_LxBFCR
(
LTDC_LAYER_2
)

	)

80 
	#LTDC_LxCFBAR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0xAC + 0x80 * ((xË- 1)))

	)

81 
	#LTDC_L1CFBAR
 
	`LTDC_LxCFBAR
(
LTDC_LAYER_1
)

	)

82 
	#LTDC_L2CFBAR
 
	`LTDC_LxCFBAR
(
LTDC_LAYER_2
)

	)

84 
	#LTDC_LxCFBLR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0xB0 + 0x80 * ((xË- 1)))

	)

85 
	#LTDC_L1CFBLR
 
	`LTDC_LxCFBLR
(
LTDC_LAYER_1
)

	)

86 
	#LTDC_L2CFBLR
 
	`LTDC_LxCFBLR
(
LTDC_LAYER_2
)

	)

88 
	#LTDC_LxCFBLNR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0xB4 + 0x80 * ((xË- 1)))

	)

89 
	#LTDC_L1CFBLNR
 
	`LTDC_LxCFBLNR
(
LTDC_LAYER_1
)

	)

90 
	#LTDC_L2CFBLNR
 
	`LTDC_LxCFBLNR
(
LTDC_LAYER_2
)

	)

92 
	#LTDC_LxCLUTWR
(
x
Ë(
	`MMIO32
(
LTDC_BASE
 + 0xC4 + 0x80 * ((xË- 1)))

	)

93 
	#LTDC_L1CLUTWR
 
	`LTDC_LxCLUTWR
(
LTDC_LAYER_1
)

	)

94 
	#LTDC_L2CLUTWR
 
	`LTDC_LxCLUTWR
(
LTDC_LAYER_2
)

	)

97 
	#LTDC_LAYER_1
 1

	)

98 
	#LTDC_LAYER_2
 2

	)

103 
	#LTDC_SSCR_HSW_SHIFT
 16

	)

104 
	#LTDC_SSCR_HSW_MASK
 0xfff

	)

107 
	#LTDC_SSCR_VSH_SHIFT
 0

	)

108 
	#LTDC_SSCR_VSH_MASK
 0x7ff

	)

113 
	#LTDC_BPCR_AHBP_SHIFT
 16

	)

114 
	#LTDC_BPCR_AHBP_MASK
 0xfff

	)

117 
	#LTDC_BPCR_AVBP_SHIFT
 0

	)

118 
	#LTDC_BPCR_AVBP_MASK
 0x7FF

	)

123 
	#LTDC_AWCR_AAW_SHIFT
 16

	)

124 
	#LTDC_AWCR_AAW_MASK
 0xfff

	)

127 
	#LTDC_AWCR_AAH_SHIFT
 0

	)

128 
	#LTDC_AWCR_AAH_MASK
 0x7ff

	)

133 
	#LTDC_TWCR_TOTALW_SHIFT
 16

	)

134 
	#LTDC_TWCR_TOTALW_MASK
 0xfff

	)

137 
	#LTDC_TWCR_TOTALH_SHIFT
 0

	)

138 
	#LTDC_TWCR_TOTALH_MASK
 0x7ff

	)

141 
	#LTDC_GCR_LTDC_ENABLE
 (1<<0)

	)

142 
	#LTDC_GCR_DITHER_ENABLE
 (1<<16)

	)

144 
	#LTDC_GCR_PCPOL_ACTIVE_LOW
 (0<<28)

	)

145 
	#LTDC_GCR_PCPOL_ACTIVE_HIGH
 (1<<28)

	)

147 
	#LTDC_GCR_DEPOL_ACTIVE_LOW
 (0<<29)

	)

148 
	#LTDC_GCR_DEPOL_ACTIVE_HIGH
 (1<<29)

	)

150 
	#LTDC_GCR_VSPOL_ACTIVE_LOW
 (0<<30)

	)

151 
	#LTDC_GCR_VSPOL_ACTIVE_HIGH
 (1<<30)

	)

153 
	#LTDC_GCR_HSPOL_ACTIVE_LOW
 (0<<31)

	)

154 
	#LTDC_GCR_HSPOL_ACTIVE_HIGH
 (1<<31)

	)

157 
	#LTDC_GCR_HSPOL
 (1 << 31)

	)

158 
	#LTDC_GCR_VSPOL
 (1 << 30)

	)

159 
	#LTDC_GCR_DEPOL
 (1 << 29)

	)

160 
	#LTDC_GCR_PCPOL
 (1 << 28)

	)

161 
	#LTDC_GCR_DITHER
 (1 << 16)

	)

162 
	#LTDC_GCR_LTDCEN
 (1 << 0)

	)

167 
	#LTDC_SRCR_VBR
 (1 << 1)

	)

170 
	#LTDC_SRCR_IMR
 (1 << 0)

	)

173 
	#LTDC_SRCR_RELOAD_IMR
 (1<<0)

	)

174 
	#LTDC_SRCR_RELOAD_VBR
 (1<<1)

	)

179 
	#LTDC_IER_RRIE
 (1 << 3)

	)

182 
	#LTDC_IER_TERRIE
 (1 << 2)

	)

185 
	#LTDC_IER_FUIE
 (1 << 1)

	)

188 
	#LTDC_IER_LIE
 (1 << 0)

	)

193 
	#LTDC_ISR_RRIF
 (1 << 3)

	)

196 
	#LTDC_ISR_TERRIF
 (1 << 2)

	)

199 
	#LTDC_ISR_FUIF
 (1 << 1)

	)

202 
	#LTDC_ISR_LIF
 (1 << 0)

	)

207 
	#LTDC_ICR_CRRIF
 (1 << 3)

	)

210 
	#LTDC_ICR_CTERRIF
 (1 << 2)

	)

213 
	#LTDC_ICR_CFUIF
 (1 << 1)

	)

216 
	#LTDC_ICR_CLIF
 (1 << 0)

	)

221 
	#LTDC_LIPCR_LIPOS_SHIFT
 0

	)

222 
	#LTDC_LIPCR_LIPOS_MASK
 0x7ff

	)

227 
	#LTDC_CPSR_CXPOS_SHIFT
 16

	)

228 
	#LTDC_CPSR_CXPOS_MASK
 0xffff

	)

231 
	#LTDC_CPSR_CYPOS_SHIFT
 0

	)

232 
	#LTDC_CPSR_CYPOS_MASK
 0xffff

	)

235 
	#LTDC_CDSR_VDES
 (1<<0)

	)

236 
	#LTDC_CDSR_HDES
 (1<<1)

	)

237 
	#LTDC_CDSR_VSYNCS
 (1<<2)

	)

238 
	#LTDC_CDSR_HSYNCS
 (1<<3)

	)

241 
	#LTDC_LxCR_LAYER_ENABLE
 (1<<0)

	)

242 
	#LTDC_LxCR_COLKEY_ENABLE
 (1<<1)

	)

243 
	#LTDC_LxCR_COLTAB_ENABLE
 (1<<4)

	)

248 
	#LTDC_LxWHPCR_WHSPPOS_SHIFT
 16

	)

249 
	#LTDC_LxWHPCR_WHSPPOS_MASK
 0xfff

	)

252 
	#LTDC_LxWHPCR_WHSTPOS_SHIFT
 0

	)

253 
	#LTDC_LxWHPCR_WHSTPOS_MASK
 0xfff

	)

258 
	#LTDC_LxWVPCR_WVSPPOS_SHIFT
 16

	)

259 
	#LTDC_LxWVPCR_WVSPPOS_MASK
 0x7ff

	)

262 
	#LTDC_LxWVPCR_WVSTPOS_SHIFT
 0

	)

263 
	#LTDC_LxWVPCR_WVSTPOS_MASK
 0x7ff

	)

268 
	#LTDC_LxCKCR_CKRED_SHIFT
 16

	)

269 
	#LTDC_LxCKCR_CKRED_MASK
 0xff

	)

272 
	#LTDC_LxCKCR_CKGREEN_SHIFT
 16

	)

273 
	#LTDC_LxCKCR_CKGREEN_MASK
 0xff

	)

276 
	#LTDC_LxCKCR_CKBLUE_SHIFT
 16

	)

277 
	#LTDC_LxCKCR_CKBLUE_MASK
 0xff

	)

280 
	#LTDC_LxPFCR_ARGB8888
 (0b000)

	)

281 
	#LTDC_LxPFCR_RGB888
 (0b001)

	)

282 
	#LTDC_LxPFCR_RGB565
 (0b010)

	)

283 
	#LTDC_LxPFCR_ARGB1555
 (0b011)

	)

284 
	#LTDC_LxPFCR_ARGB4444
 (0b100)

	)

285 
	#LTDC_LxPFCR_L8
 (0b101)

	)

286 
	#LTDC_LxPFCR_AL44
 (0b110)

	)

287 
	#LTDC_LxPFCR_AL88
 (0b111)

	)

292 
	#LTDC_LxCACR_CONSTA_SHIFT
 0

	)

293 
	#LTDC_LxCACR_CONSTA_MASK
 0xff

	)

298 
	#LTDC_LxDCCR_DCALPHA_SHIFT
 24

	)

299 
	#LTDC_LxDCCR_DCALPHA_MASK
 1

	)

302 
	#LTDC_LxDCCR_DCRED_SHIFT
 16

	)

303 
	#LTDC_LxDCCR_DCRED_MASK
 1

	)

306 
	#LTDC_LxDCCR_DCGREEN_SHIFT
 8

	)

307 
	#LTDC_LxDCCR_DCGREEN_MASK
 1

	)

310 
	#LTDC_LxDCCR_DCBLUE_SHIFT
 0

	)

311 
	#LTDC_LxDCCR_DCBLUE_MASK
 1

	)

314 
	#LTDC_LxBFCR_BF1_CONST_ALPHA
 (0b100)

	)

315 
	#LTDC_LxBFCR_BF1_PIXEL_ALPHA_x_CONST_ALPHA
 (0b110)

	)

317 
	#LTDC_LxBFCR_BF2_CONST_ALPHA
 (0b101)

	)

318 
	#LTDC_LxBFCR_BF2_PIXEL_ALPHA_x_CONST_ALPHA
 (0b111)

	)

323 
	#LTDC_LxCFBAR_CFBAR_SHIFT
 0

	)

324 
	#LTDC_LxCFBAR_CFBAR_MASK
 0xffffffff

	)

329 
	#LTDC_LxCFBLR_CFBP_SHIFT
 16

	)

330 
	#LTDC_LxCFBLR_CFBP_MASK
 0x1fff

	)

333 
	#LTDC_LxCFBLR_CFBLL_SHIFT
 0

	)

334 
	#LTDC_LxCFBLR_CFBLL_MASK
 0x1fff

	)

339 
	#LTDC_LxCFBLNR_CFBLNBR_SHIFT
 0

	)

340 
	#LTDC_LxCFBLNR_CFBLNBR_MASK
 0x3ff

	)

345 
	#LTDC_LxCLUTWR_CLUTADD_SHIFT
 24

	)

346 
	#LTDC_LxCLUTWR_CLUTADD_MASK
 0xff

	)

349 
	#LTDC_LxCLUTWR_RED_SHIFT
 16

	)

350 
	#LTDC_LxCLUTWR_RED_MASK
 0xff

	)

353 
	#LTDC_LxCLUTWR_GREEN_SHIFT
 8

	)

354 
	#LTDC_LxCLUTWR_GREEN_MASK
 0xff

	)

357 
	#LTDC_LxCLUTWR_BLUE_SHIFT
 0

	)

358 
	#LTDC_LxCLUTWR_BLUE_MASK
 0xff

	)

365 
ölöe
 
	$…dc_˘æ_íabÀ
(
uöt32_t
 
˘æ_Êags
)

367 
LTDC_GCR
 |
˘æ_Êags
;

368 
	}
}

370 
ölöe
 
	$…dc_˘æ_dißbÀ
(
uöt32_t
 
˘æ_Êags
)

372 
LTDC_GCR
 &~(
˘æ_Êags
);

373 
	}
}

375 
ölöe
 
	$…dc_ªlﬂd
(
uöt32_t
 
ªlﬂd_Êags
)

377 
LTDC_SRCR
 = 
ªlﬂd_Êags
;

378 
	}
}

380 
ölöe
 
	$…dc_£t_background_cﬁ‹
(
uöt8_t
 
r
, uöt8_à
g
, uöt8_à
b
)

382 
LTDC_BCCR
 = (((
r
)&255)<<16) |

383 (((
g
)&255)<<8) |

384 (((
b
)&255)<<0);

385 
	}
}

387 
ölöe
 
	$…dc_gë_cuºít_posôi⁄
(
uöt16_t
 *
x
, uöt16_à*
y
)

389 
uöt32_t
 
tmp
 = 
LTDC_CPSR
;

390 *
x
 = 
tmp
 >> 16;

391 *
y
 = 
tmp
 &= 0xFFFF;

392 
	}
}

394 
ölöe
 
uöt16_t
 
	$…dc_gë_cuºít_posôi⁄_x
()

396  
LTDC_CPSR
 >> 16;

397 
	}
}

399 
ölöe
 
uöt16_t
 
	$…dc_gë_cuºít_posôi⁄_y
()

401  
LTDC_CPSR
 & 0xffff;

402 
	}
}

404 
ölöe
 
uöt32_t
 
	$…dc_gë_di•œy_°©us
(
uöt32_t
 
°©us_Êags
)

406  
LTDC_CDSR
 & 
°©us_Êags
;

407 
	}
}

410 
ölöe
 
	$…dc_œyî_˘æ_íabÀ
(
uöt32_t
 
œyî
, uöt32_à
˘æ_Êags
)

412 
	`LTDC_LxCR
(
œyî
Ë|
˘æ_Êags
;

413 
	}
}

415 
ölöe
 
	$…dc_œyî_˘æ_dißbÀ
(
uöt32_t
 
œyî
, uöt32_à
˘æ_Êags
)

417 
	`LTDC_LxCR
(
œyî
Ë&~(
˘æ_Êags
);

418 
	}
}

420 
ölöe
 
	$…dc_£t_cﬁ‹_key
(
uöt32_t
 
œyî
,

421 
uöt8_t
 
r
, uöt8_à
g
, uöt8_à
b
)

423 
	`LTDC_LxCKCR
(
œyî
Ë((((
r
)&255)<<16) |

424 (((
g
)&255)<<8) |

425 (((
b
)&255)<<0));

426 
	}
}

428 
ölöe
 
	$…dc_£t_pixñ_f‹m©
(
uöt32_t
 
œyî
, uöt32_à
f‹m©
)

430 
	`LTDC_LxPFCR
(
œyî
Ë
f‹m©
;

431 
	}
}

433 
ölöe
 
	$…dc_£t_c⁄°™t_Æpha
(
uöt32_t
 
œyî
, 
uöt8_t
 
Æpha
)

435 
	`LTDC_LxCACR
(
œyî
Ë((
Æpha
)&255);

436 
	}
}

438 
ölöe
 
	$…dc_£t_deÁu…_cﬁ‹s
(
uöt32_t
 
œyî
,

439 
uöt8_t
 
a
,

440 
uöt8_t
 
r
, uöt8_à
g
, uöt8_à
b
)

442 
	`LTDC_LxDCCR
(
œyî
Ë((((
a
)&255)<<24) |

443 (((
r
)&255)<<16) |

444 (((
g
)&255)<<8) |

445 (((
b
)&255)<<0));

446 
	}
}

448 
ölöe
 
	$…dc_£t_bÀndög_Á˘‹s
(
uöt32_t
 
œyî
,

449 
uöt8_t
 
bf1
, uöt8_à
bf2
)

451 
	`LTDC_LxBFCR
(
œyî
Ë((
bf1
)<<8Ë| ((
bf2
)<<0);

452 
	}
}

454 
ölöe
 
	$…dc_£t_fbuf„r_addªss
(
uöt32_t
 
œyî
, uöt32_à
addªss
)

456 
	`LTDC_LxCFBAR
(
œyî
Ë(
uöt32_t
)
addªss
;

457 
	}
}

459 
ölöe
 
	$…dc_£t_fb_löe_Àngth
(
uöt32_t
 
œyî
,

460 
uöt16_t
 
Àn
, uöt16_à
pôch
)

462 
	`LTDC_LxCFBLR
(
œyî
Ë((((
pôch
)&0x1FFF)<<16Ë| (((
Àn
)&0x1FFF)<<0));

463 
	}
}

465 
ölöe
 
	$…dc_£t_fb_löe_cou¡
(
uöt32_t
 
œyî
, 
uöt16_t
 
löecou¡
)

467 
	`LTDC_LxCFBLNR
(
œyî
Ë(((
löecou¡
)&0x3FF)<<0);

468 
	}
}

473 
…dc_£t_t·_sync_timögs
(

474 
uöt16_t
 
sync_width
, uöt16_à
sync_height
,

475 
uöt16_t
 
h_back_p‹ch
, uöt16_à
v_back_p‹ch
,

476 
uöt16_t
 
a˘ive_width
, uöt16_à
a˘ive_height
,

477 
uöt16_t
 
h_‰⁄t_p‹ch
, uöt16_à
v_‰⁄t_p‹ch


479 
…dc_£tup_wödowög
(

480 
uöt8_t
 
œyî_numbî
,

481 
uöt16_t
 
h_back_p‹ch
, uöt16_à
v_back_p‹ch
,

482 
uöt16_t
 
a˘ive_width
, uöt16_à
a˘ive_height


491 
ölöe
 
boﬁ
 
	$LTDC_SRCR_IS_RELOADING
()

493  (
LTDC_SRCR
 & (
LTDC_SRCR_RELOAD_VBR
 |

494 
LTDC_SRCR_RELOAD_IMR
)) != 0;

495 
	}
}

502 
ölöe
 
uöt16_t
 
	$…dc_gë_rgb888_‰om_rgb565
(
uöt16_t
 
rgb888
)

504  ((((
rgb888
) & 0xF800) >> (11-8))/31)<<16

505 | ((((
rgb888
) & 0x07E0) << (8-5))/63)<<8

506 | ((((
rgb888
) & 0x001F) << (8-0))/31)<<0;

507 
	}
}

	@libopencm3/include/libopencm3/stm32/f4/memorymap.h

20 #i‚de‡
LIBOPENCM3_MEMORYMAP_H


21 
	#LIBOPENCM3_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

28 
	#PERIPH_BASE
 (0x40000000U)

	)

29 
	#PERIPH_BASE_APB1
 (
PERIPH_BASE
 + 0x00000)

	)

30 
	#PERIPH_BASE_APB2
 (
PERIPH_BASE
 + 0x10000)

	)

31 
	#PERIPH_BASE_AHB1
 (
PERIPH_BASE
 + 0x20000)

	)

32 
	#PERIPH_BASE_AHB2
 0x50000000U

	)

33 
	#PERIPH_BASE_AHB3
 0x60000000U

	)

38 
	#TIM2_BASE
 (
PERIPH_BASE_APB1
 + 0x0000)

	)

39 
	#TIM3_BASE
 (
PERIPH_BASE_APB1
 + 0x0400)

	)

40 
	#TIM4_BASE
 (
PERIPH_BASE_APB1
 + 0x0800)

	)

41 
	#TIM5_BASE
 (
PERIPH_BASE_APB1
 + 0x0c00)

	)

42 
	#TIM6_BASE
 (
PERIPH_BASE_APB1
 + 0x1000)

	)

43 
	#TIM7_BASE
 (
PERIPH_BASE_APB1
 + 0x1400)

	)

44 
	#TIM12_BASE
 (
PERIPH_BASE_APB1
 + 0x1800)

	)

45 
	#TIM13_BASE
 (
PERIPH_BASE_APB1
 + 0x1c00)

	)

46 
	#TIM14_BASE
 (
PERIPH_BASE_APB1
 + 0x2000)

	)

48 
	#RTC_BASE
 (
PERIPH_BASE_APB1
 + 0x2800)

	)

49 
	#WWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x2c00)

	)

50 
	#IWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x3000)

	)

51 
	#I2S2_EXT_BASE
 (
PERIPH_BASE_APB1
 + 0x3400)

	)

52 
	#SPI2_BASE
 (
PERIPH_BASE_APB1
 + 0x3800)

	)

53 
	#SPI3_BASE
 (
PERIPH_BASE_APB1
 + 0x3c00)

	)

54 
	#I2S3_EXT_BASE
 (
PERIPH_BASE_APB1
 + 0x4000)

	)

55 
	#USART2_BASE
 (
PERIPH_BASE_APB1
 + 0x4400)

	)

56 
	#USART3_BASE
 (
PERIPH_BASE_APB1
 + 0x4800)

	)

57 
	#UART4_BASE
 (
PERIPH_BASE_APB1
 + 0x4c00)

	)

58 
	#UART5_BASE
 (
PERIPH_BASE_APB1
 + 0x5000)

	)

59 
	#I2C1_BASE
 (
PERIPH_BASE_APB1
 + 0x5400)

	)

60 
	#I2C2_BASE
 (
PERIPH_BASE_APB1
 + 0x5800)

	)

61 
	#I2C3_BASE
 (
PERIPH_BASE_APB1
 + 0x5C00)

	)

63 
	#BX_CAN1_BASE
 (
PERIPH_BASE_APB1
 + 0x6400)

	)

64 
	#BX_CAN2_BASE
 (
PERIPH_BASE_APB1
 + 0x6800)

	)

66 
	#POWER_CONTROL_BASE
 (
PERIPH_BASE_APB1
 + 0x7000)

	)

67 
	#DAC_BASE
 (
PERIPH_BASE_APB1
 + 0x7400)

	)

68 
	#UART7_BASE
 (
PERIPH_BASE_APB1
 + 0x7800)

	)

69 
	#UART8_BASE
 (
PERIPH_BASE_APB1
 + 0x7c00)

	)

73 
	#TIM1_BASE
 (
PERIPH_BASE_APB2
 + 0x0000)

	)

74 
	#TIM8_BASE
 (
PERIPH_BASE_APB2
 + 0x0400)

	)

76 
	#USART1_BASE
 (
PERIPH_BASE_APB2
 + 0x1000)

	)

77 
	#USART6_BASE
 (
PERIPH_BASE_APB2
 + 0x1400)

	)

79 
	#ADC1_BASE
 (
PERIPH_BASE_APB2
 + 0x2000)

	)

80 
	#ADC2_BASE
 (
PERIPH_BASE_APB2
 + 0x2100)

	)

81 
	#ADC3_BASE
 (
PERIPH_BASE_APB2
 + 0x2200)

	)

82 
	#ADC_COMMON_BASE
 (
PERIPH_BASE_APB2
 + 0x2300)

	)

84 
	#SDIO_BASE
 (
PERIPH_BASE_APB2
 + 0x2C00)

	)

86 
	#SPI1_BASE
 (
PERIPH_BASE_APB2
 + 0x3000)

	)

87 
	#SPI4_BASE
 (
PERIPH_BASE_APB2
 + 0x3400)

	)

89 
	#SYSCFG_BASE
 (
PERIPH_BASE_APB2
 + 0x3800)

	)

90 
	#EXTI_BASE
 (
PERIPH_BASE_APB2
 + 0x3C00)

	)

91 
	#TIM9_BASE
 (
PERIPH_BASE_APB2
 + 0x4000)

	)

92 
	#TIM10_BASE
 (
PERIPH_BASE_APB2
 + 0x4400)

	)

93 
	#TIM11_BASE
 (
PERIPH_BASE_APB2
 + 0x4800)

	)

95 
	#SPI5_BASE
 (
PERIPH_BASE_APB2
 + 0x5000)

	)

96 
	#SPI6_BASE
 (
PERIPH_BASE_APB2
 + 0x5400)

	)

97 
	#SAI1_BASE
 (
PERIPH_BASE_APB2
 + 0x5800)

	)

98 
	#LTDC_BASE
 (
PERIPH_BASE_APB2
 + 0x6800)

	)

99 
	#DSI_BASE
 (
PERIPH_BASE_APB2
 + 0x6C00)

	)

103 
	#GPIO_PORT_A_BASE
 (
PERIPH_BASE_AHB1
 + 0x0000)

	)

104 
	#GPIO_PORT_B_BASE
 (
PERIPH_BASE_AHB1
 + 0x0400)

	)

105 
	#GPIO_PORT_C_BASE
 (
PERIPH_BASE_AHB1
 + 0x0800)

	)

106 
	#GPIO_PORT_D_BASE
 (
PERIPH_BASE_AHB1
 + 0x0C00)

	)

107 
	#GPIO_PORT_E_BASE
 (
PERIPH_BASE_AHB1
 + 0x1000)

	)

108 
	#GPIO_PORT_F_BASE
 (
PERIPH_BASE_AHB1
 + 0x1400)

	)

109 
	#GPIO_PORT_G_BASE
 (
PERIPH_BASE_AHB1
 + 0x1800)

	)

110 
	#GPIO_PORT_H_BASE
 (
PERIPH_BASE_AHB1
 + 0x1C00)

	)

111 
	#GPIO_PORT_I_BASE
 (
PERIPH_BASE_AHB1
 + 0x2000)

	)

112 
	#GPIO_PORT_J_BASE
 (
PERIPH_BASE_AHB1
 + 0x2400)

	)

113 
	#GPIO_PORT_K_BASE
 (
PERIPH_BASE_AHB1
 + 0x2800)

	)

115 
	#CRC_BASE
 (
PERIPH_BASE_AHB1
 + 0x3000)

	)

117 
	#RCC_BASE
 (
PERIPH_BASE_AHB1
 + 0x3800)

	)

118 
	#FLASH_MEM_INTERFACE_BASE
 (
PERIPH_BASE_AHB1
 + 0x3C00)

	)

119 
	#BKPSRAM_BASE
 (
PERIPH_BASE_AHB1
 + 0x4000)

	)

121 
	#DMA1_BASE
 (
PERIPH_BASE_AHB1
 + 0x6000)

	)

122 
	#DMA2_BASE
 (
PERIPH_BASE_AHB1
 + 0x6400)

	)

124 
	#ETHERNET_BASE
 (
PERIPH_BASE_AHB1
 + 0x8000)

	)

125 
	#DMA2D_BASE
 (
PERIPH_BASE_AHB1
 + 0xB000U)

	)

127 
	#USB_OTG_HS_BASE
 (
PERIPH_BASE_AHB1
 + 0x20000)

	)

131 
	#USB_OTG_FS_BASE
 (
PERIPH_BASE_AHB2
 + 0x00000)

	)

133 
	#DCMI_BASE
 (
PERIPH_BASE_AHB2
 + 0x50000)

	)

135 
	#CRYP_BASE
 (
PERIPH_BASE_AHB2
 + 0x60000)

	)

136 
	#HASH_BASE
 (
PERIPH_BASE_AHB2
 + 0x60400)

	)

138 
	#RNG_BASE
 (
PERIPH_BASE_AHB2
 + 0x60800)

	)

143 
	#FMC_BANK1
 (
PERIPH_BASE_AHB3
)

	)

145 
	#FMC_BANK2
 (
PERIPH_BASE_AHB3
 + 0x10000000U)

	)

147 
	#FMC_BANK3
 (
PERIPH_BASE_AHB3
 + 0x20000000U)

	)

149 
	#QUADSPI_BANK
 (
PERIPH_BASE_AHB3
 + 0x30000000U)

	)

150 
	#FSMC_BASE
 (
PERIPH_BASE_AHB3
 + 0x40000000U)

	)

151 
	#FMC_BASE
 (
PERIPH_BASE_AHB3
 + 0x40000000U)

	)

152 
	#QUADSPI_BASE
 (
PERIPH_BASE_AHB3
 + 0x40001000U)

	)

154 
	#FMC_BANK5
 (
PERIPH_BASE_AHB3
 + 0x60000000U)

	)

156 
	#FMC_BANK6
 (
PERIPH_BASE_AHB3
 + 0x70000000U)

	)

159 
	#DBGMCU_BASE
 (
PPBI_BASE
 + 0x00042000)

	)

162 
	#DESIG_FLASH_SIZE_BASE
 (0x1FFF7A22U)

	)

163 
	#DESIG_UNIQUE_ID_BASE
 (0x1FFF7A10U)

	)

164 
	#DESIG_UNIQUE_ID0
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
)

	)

165 
	#DESIG_UNIQUE_ID1
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 4)

	)

166 
	#DESIG_UNIQUE_ID2
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 8)

	)

169 
	#ST_VREFINT_CAL
 
	`MMIO16
(0x1FFF7A2A)

	)

170 
	#ST_TSENSE_CAL1_30C
 
	`MMIO16
(0x1FFF7A2C)

	)

171 
	#ST_TSENSE_CAL2_110C
 
	`MMIO16
(0x1FFF7A2E)

	)

	@libopencm3/include/libopencm3/stm32/f4/nvic.h

6 #i‚de‡
LIBOPENCM3_STM32_F4_NVIC_H


7 
	#LIBOPENCM3_STM32_F4_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_NVIC_WWDG_IRQ
 0

	)

17 
	#NVIC_PVD_IRQ
 1

	)

18 
	#NVIC_TAMP_STAMP_IRQ
 2

	)

19 
	#NVIC_RTC_WKUP_IRQ
 3

	)

20 
	#NVIC_FLASH_IRQ
 4

	)

21 
	#NVIC_RCC_IRQ
 5

	)

22 
	#NVIC_EXTI0_IRQ
 6

	)

23 
	#NVIC_EXTI1_IRQ
 7

	)

24 
	#NVIC_EXTI2_IRQ
 8

	)

25 
	#NVIC_EXTI3_IRQ
 9

	)

26 
	#NVIC_EXTI4_IRQ
 10

	)

27 
	#NVIC_DMA1_STREAM0_IRQ
 11

	)

28 
	#NVIC_DMA1_STREAM1_IRQ
 12

	)

29 
	#NVIC_DMA1_STREAM2_IRQ
 13

	)

30 
	#NVIC_DMA1_STREAM3_IRQ
 14

	)

31 
	#NVIC_DMA1_STREAM4_IRQ
 15

	)

32 
	#NVIC_DMA1_STREAM5_IRQ
 16

	)

33 
	#NVIC_DMA1_STREAM6_IRQ
 17

	)

34 
	#NVIC_ADC_IRQ
 18

	)

35 
	#NVIC_CAN1_TX_IRQ
 19

	)

36 
	#NVIC_CAN1_RX0_IRQ
 20

	)

37 
	#NVIC_CAN1_RX1_IRQ
 21

	)

38 
	#NVIC_CAN1_SCE_IRQ
 22

	)

39 
	#NVIC_EXTI9_5_IRQ
 23

	)

40 
	#NVIC_TIM1_BRK_TIM9_IRQ
 24

	)

41 
	#NVIC_TIM1_UP_TIM10_IRQ
 25

	)

42 
	#NVIC_TIM1_TRG_COM_TIM11_IRQ
 26

	)

43 
	#NVIC_TIM1_CC_IRQ
 27

	)

44 
	#NVIC_TIM2_IRQ
 28

	)

45 
	#NVIC_TIM3_IRQ
 29

	)

46 
	#NVIC_TIM4_IRQ
 30

	)

47 
	#NVIC_I2C1_EV_IRQ
 31

	)

48 
	#NVIC_I2C1_ER_IRQ
 32

	)

49 
	#NVIC_I2C2_EV_IRQ
 33

	)

50 
	#NVIC_I2C2_ER_IRQ
 34

	)

51 
	#NVIC_SPI1_IRQ
 35

	)

52 
	#NVIC_SPI2_IRQ
 36

	)

53 
	#NVIC_USART1_IRQ
 37

	)

54 
	#NVIC_USART2_IRQ
 38

	)

55 
	#NVIC_USART3_IRQ
 39

	)

56 
	#NVIC_EXTI15_10_IRQ
 40

	)

57 
	#NVIC_RTC_ALARM_IRQ
 41

	)

58 
	#NVIC_USB_FS_WKUP_IRQ
 42

	)

59 
	#NVIC_TIM8_BRK_TIM12_IRQ
 43

	)

60 
	#NVIC_TIM8_UP_TIM13_IRQ
 44

	)

61 
	#NVIC_TIM8_TRG_COM_TIM14_IRQ
 45

	)

62 
	#NVIC_TIM8_CC_IRQ
 46

	)

63 
	#NVIC_DMA1_STREAM7_IRQ
 47

	)

64 
	#NVIC_FSMC_IRQ
 48

	)

65 
	#NVIC_SDIO_IRQ
 49

	)

66 
	#NVIC_TIM5_IRQ
 50

	)

67 
	#NVIC_SPI3_IRQ
 51

	)

68 
	#NVIC_UART4_IRQ
 52

	)

69 
	#NVIC_UART5_IRQ
 53

	)

70 
	#NVIC_TIM6_DAC_IRQ
 54

	)

71 
	#NVIC_TIM7_IRQ
 55

	)

72 
	#NVIC_DMA2_STREAM0_IRQ
 56

	)

73 
	#NVIC_DMA2_STREAM1_IRQ
 57

	)

74 
	#NVIC_DMA2_STREAM2_IRQ
 58

	)

75 
	#NVIC_DMA2_STREAM3_IRQ
 59

	)

76 
	#NVIC_DMA2_STREAM4_IRQ
 60

	)

77 
	#NVIC_ETH_IRQ
 61

	)

78 
	#NVIC_ETH_WKUP_IRQ
 62

	)

79 
	#NVIC_CAN2_TX_IRQ
 63

	)

80 
	#NVIC_CAN2_RX0_IRQ
 64

	)

81 
	#NVIC_CAN2_RX1_IRQ
 65

	)

82 
	#NVIC_CAN2_SCE_IRQ
 66

	)

83 
	#NVIC_OTG_FS_IRQ
 67

	)

84 
	#NVIC_DMA2_STREAM5_IRQ
 68

	)

85 
	#NVIC_DMA2_STREAM6_IRQ
 69

	)

86 
	#NVIC_DMA2_STREAM7_IRQ
 70

	)

87 
	#NVIC_USART6_IRQ
 71

	)

88 
	#NVIC_I2C3_EV_IRQ
 72

	)

89 
	#NVIC_I2C3_ER_IRQ
 73

	)

90 
	#NVIC_OTG_HS_EP1_OUT_IRQ
 74

	)

91 
	#NVIC_OTG_HS_EP1_IN_IRQ
 75

	)

92 
	#NVIC_OTG_HS_WKUP_IRQ
 76

	)

93 
	#NVIC_OTG_HS_IRQ
 77

	)

94 
	#NVIC_DCMI_IRQ
 78

	)

95 
	#NVIC_CRYP_IRQ
 79

	)

96 
	#NVIC_HASH_RNG_IRQ
 80

	)

97 
	#NVIC_FPU_IRQ
 81

	)

98 
	#NVIC_UART7_IRQ
 82

	)

99 
	#NVIC_UART8_IRQ
 83

	)

100 
	#NVIC_SPI4_IRQ
 84

	)

101 
	#NVIC_SPI5_IRQ
 85

	)

102 
	#NVIC_SPI6_IRQ
 86

	)

103 
	#NVIC_SAI1_IRQ
 87

	)

104 
	#NVIC_LCD_TFT_IRQ
 88

	)

105 
	#NVIC_LCD_TFT_ERR_IRQ
 89

	)

106 
	#NVIC_DMA2D_IRQ
 90

	)

108 
	#NVIC_IRQ_COUNT
 91

	)

117 
BEGIN_DECLS


119 
nvic_wwdg_i§
();

120 
pvd_i§
();

121 
èmp_°amp_i§
();

122 
πc_wkup_i§
();

123 
Êash_i§
();

124 
rcc_i§
();

125 
exti0_i§
();

126 
exti1_i§
();

127 
exti2_i§
();

128 
exti3_i§
();

129 
exti4_i§
();

130 
dma1_°ªam0_i§
();

131 
dma1_°ªam1_i§
();

132 
dma1_°ªam2_i§
();

133 
dma1_°ªam3_i§
();

134 
dma1_°ªam4_i§
();

135 
dma1_°ªam5_i§
();

136 
dma1_°ªam6_i§
();

137 
adc_i§
();

138 
ˇn1_tx_i§
();

139 
ˇn1_rx0_i§
();

140 
ˇn1_rx1_i§
();

141 
ˇn1_s˚_i§
();

142 
exti9_5_i§
();

143 
tim1_brk_tim9_i§
();

144 
tim1_up_tim10_i§
();

145 
tim1_åg_com_tim11_i§
();

146 
tim1_cc_i§
();

147 
tim2_i§
();

148 
tim3_i§
();

149 
tim4_i§
();

150 
i2c1_ev_i§
();

151 
i2c1_î_i§
();

152 
i2c2_ev_i§
();

153 
i2c2_î_i§
();

154 
•i1_i§
();

155 
•i2_i§
();

156 
ußπ1_i§
();

157 
ußπ2_i§
();

158 
ußπ3_i§
();

159 
exti15_10_i§
();

160 
πc_Æ¨m_i§
();

161 
usb_fs_wkup_i§
();

162 
tim8_brk_tim12_i§
();

163 
tim8_up_tim13_i§
();

164 
tim8_åg_com_tim14_i§
();

165 
tim8_cc_i§
();

166 
dma1_°ªam7_i§
();

167 
fsmc_i§
();

168 
sdio_i§
();

169 
tim5_i§
();

170 
•i3_i§
();

171 
u¨t4_i§
();

172 
u¨t5_i§
();

173 
tim6_dac_i§
();

174 
tim7_i§
();

175 
dma2_°ªam0_i§
();

176 
dma2_°ªam1_i§
();

177 
dma2_°ªam2_i§
();

178 
dma2_°ªam3_i§
();

179 
dma2_°ªam4_i§
();

180 
ëh_i§
();

181 
ëh_wkup_i§
();

182 
ˇn2_tx_i§
();

183 
ˇn2_rx0_i§
();

184 
ˇn2_rx1_i§
();

185 
ˇn2_s˚_i§
();

186 
Ÿg_fs_i§
();

187 
dma2_°ªam5_i§
();

188 
dma2_°ªam6_i§
();

189 
dma2_°ªam7_i§
();

190 
ußπ6_i§
();

191 
i2c3_ev_i§
();

192 
i2c3_î_i§
();

193 
Ÿg_hs_ï1_out_i§
();

194 
Ÿg_hs_ï1_ö_i§
();

195 
Ÿg_hs_wkup_i§
();

196 
Ÿg_hs_i§
();

197 
dcmi_i§
();

198 
¸yp_i§
();

199 
hash_∫g_i§
();

200 
Âu_i§
();

201 
u¨t7_i§
();

202 
u¨t8_i§
();

203 
•i4_i§
();

204 
•i5_i§
();

205 
•i6_i§
();

206 
ßi1_i§
();

207 
lcd_t·_i§
();

208 
lcd_t·_îr_i§
();

209 
dma2d_i§
();

211 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f4/pwr.h

34 #i‚de‡
LIBOPENCM3_PWR_H


35 
	#LIBOPENCM3_PWR_H


	)

37 
	~<lib›ícm3/°m32/comm⁄/pwr_comm⁄_v1.h
>

49 
	#PWR_CR_VOS
 (1 << 14)

	)

54 
	#PWR_CR_FPDS
 (1 << 9)

	)

61 
	#PWR_CSR_VOSRDY
 (1 << 14)

	)

66 
	#PWR_CSR_BRE
 (1 << 9)

	)

71 
	#PWR_CSR_BRR
 (1 << 3)

	)

75 
	epwr_vos_sˇÀ
 {

76 
	mPWR_SCALE1
,

77 
	mPWR_SCALE2
,

80 
BEGIN_DECLS


82 
pwr_£t_vos_sˇÀ
(
pwr_vos_sˇÀ
 
sˇÀ
);

84 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f4/quadspi.h

23 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

26 
	#QUADSPI_CR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x0U)

	)

28 
	#QUADSPI_CR_PRESCALE_MASK
 0xff

	)

29 
	#QUADSPI_CR_PRESCALE_SHIFT
 24

	)

30 
	#QUADSPI_CR_PMM
 (1 << 23)

	)

31 
	#QUADSPI_CR_APMS
 (1 << 22)

	)

33 
	#QUADSPI_CR_TOIE
 (1 << 20)

	)

34 
	#QUADSPI_CR_SMIE
 (1 << 19)

	)

35 
	#QUADSPI_CR_FTIE
 (1 << 18)

	)

36 
	#QUADSPI_CR_TCIE
 (1 << 17)

	)

37 
	#QUADSPI_CR_TEIE
 (1 << 16)

	)

40 
	#QUADSPI_CR_FTHRES_MASK
 0x1f

	)

41 
	#QUADSPI_CR_FTHRES_SHIFT
 8

	)

42 
	#QUADSPI_CR_FSEL
 (1 << 7)

	)

43 
	#QUADSPI_CR_DFM
 (1 << 6)

	)

45 
	#QUADSPI_CR_SSHIFT
 (1 << 4)

	)

46 
	#QUADSPI_CR_TCEN
 (1 << 3)

	)

47 
	#QUADSPI_CR_DMAEN
 (1 << 2)

	)

48 
	#QUADSPI_CR_ABORT
 (1 << 1)

	)

49 
	#QUADSPI_CR_EN
 (1 << 0)

	)

52 
	#QUADSPI_DCR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x4U)

	)

55 
	#QUADSPI_DCR_FSIZE_MASK
 0x1f

	)

56 
	#QUADSPI_DCR_FSIZE_SHIFT
 16

	)

58 
	#QUADSPI_DCR_CSHT_MASK
 0x7

	)

59 
	#QUADSPI_DCR_CSHT_SHIFT
 8

	)

61 
	#QUADSPI_DCR_CKMODE
 (1 << 0)

	)

64 
	#QUADSPI_SR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x8U)

	)

67 
	#QUADSPI_SR_FLEVEL_MASK
 0x3f

	)

68 
	#QUADSPI_SR_FLEVEL_SHIFT
 8

	)

71 
	#QUADSPI_SR_BUSY
 (1 << 5)

	)

72 
	#QUADSPI_SR_TOF
 (1 << 4)

	)

73 
	#QUADSPI_SR_SMF
 (1 << 3)

	)

74 
	#QUADSPI_SR_FTF
 (1 << 2)

	)

75 
	#QUADSPI_SR_TCF
 (1 << 1)

	)

76 
	#QUADSPI_SR_TEF
 (1 << 0)

	)

79 
	#QUADSPI_FCR
 
	`MMIO32
(
QUADSPI_BASE
 + 0xCU)

	)

82 
	#QUADSPI_FCR_CTOF
 (1 << 4)

	)

83 
	#QUADSPI_FCR_CSMF
 (1 << 3)

	)

85 
	#QUADSPI_FCR_CTCF
 (1 << 1)

	)

86 
	#QUADSPI_FCR_CTEF
 (1 << 0)

	)

89 
	#QUADSPI_DLR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x10U)

	)

92 
	#QUADSPI_CCR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x14U)

	)

94 
	#QUADSPI_CCR_DDRM
 (1 << 31)

	)

95 
	#QUADSPI_CCR_DHHC
 (1 << 30)

	)

97 
	#QUADSPI_CCR_SIOO
 (1 << 28)

	)

98 
	#QUADSPI_CCR_FMODE_MASK
 0x3

	)

99 
	#QUADSPI_CCR_FMODE_SHIFT
 26

	)

100 
	#QUADSPI_CCR_DMODE_MASK
 0x3

	)

101 
	#QUADSPI_CCR_DMODE_SHIFT
 24

	)

103 
	#QUADSPI_CCR_DCYC_MASK
 0x1f

	)

104 
	#QUADSPI_CCR_DCYC_SHIFT
 18

	)

106 
	#QUADSPI_CCR_ABSIZE_MASK
 0x3

	)

107 
	#QUADSPI_CCR_ABSIZE_SHIFT
 16

	)

109 
	#QUADSPI_CCR_ABMODE_MASK
 0x3

	)

110 
	#QUADSPI_CCR_ABMODE_SHIFT
 14

	)

112 
	#QUADSPI_CCR_ADSIZE_MASK
 0x3

	)

113 
	#QUADSPI_CCR_ADSIZE_SHIFT
 12

	)

115 
	#QUADSPI_CCR_ADMODE_MASK
 0x3

	)

116 
	#QUADSPI_CCR_ADMODE_SHIFT
 10

	)

118 
	#QUADSPI_CCR_IMODE_MASK
 0x3

	)

119 
	#QUADSPI_CCR_IMODE_SHIFT
 8

	)

121 
	#QUADSPI_CCR_INST_MASK
 0xff

	)

122 
	#QUADSPI_CCR_INST_SHIFT
 0

	)

125 
	#QUADSPI_CCR_MODE_NONE
 0

	)

126 
	#QUADSPI_CCR_MODE_1LINE
 1

	)

127 
	#QUADSPI_CCR_MODE_2LINE
 2

	)

128 
	#QUADSPI_CCR_MODE_4LINE
 3

	)

131 
	#QUADSPI_CCR_FMODE_IWRITE
 0

	)

132 
	#QUADSPI_CCR_FMODE_IREAD
 1

	)

133 
	#QUADSPI_CCR_FMODE_APOLL
 2

	)

134 
	#QUADSPI_CCR_FMODE_MEMMAP
 3

	)

138 
	#QUADSPI_AR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x18U)

	)

141 
	#QUADSPI_ABR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x1CU)

	)

144 
	#QUADSPI_DR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x20U)

	)

146 
	#QUADSPI_BYTE_DR
 
	`MMIO8
(
QUADSPI_BASE
 + 0x20U)

	)

149 
	#QUADSPI_PSMKR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x24U)

	)

152 
	#QUADSPI_PSMAR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x28U)

	)

155 
	#QUADSPI_PIR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x2CU)

	)

158 
	#QUADSPI_LPTR
 
	`MMIO32
(
QUADSPI_BASE
 + 0x30U)

	)

	@libopencm3/include/libopencm3/stm32/f4/rcc.h

45 #i‚de‡
LIBOPENCM3_RCC_H


46 
	#LIBOPENCM3_RCC_H


	)

53 
	#RCC_CR
 
	`MMIO32
(
RCC_BASE
 + 0x00)

	)

55 
	#RCC_PLLCFGR
 
	`MMIO32
(
RCC_BASE
 + 0x04)

	)

57 
	#RCC_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x08)

	)

59 
	#RCC_CIR
 
	`MMIO32
(
RCC_BASE
 + 0x0c)

	)

61 
	#RCC_AHB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x10)

	)

63 
	#RCC_AHB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x14)

	)

65 
	#RCC_AHB3RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x18)

	)

68 
	#RCC_APB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x20)

	)

70 
	#RCC_APB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x24)

	)

74 
	#RCC_AHB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x30)

	)

76 
	#RCC_AHB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x34)

	)

78 
	#RCC_AHB3ENR
 
	`MMIO32
(
RCC_BASE
 + 0x38)

	)

81 
	#RCC_APB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x40)

	)

83 
	#RCC_APB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x44)

	)

87 
	#RCC_AHB1LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x50)

	)

89 
	#RCC_AHB2LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x54)

	)

91 
	#RCC_AHB3LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x58)

	)

94 
	#RCC_APB1LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x60)

	)

96 
	#RCC_APB2LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x64)

	)

100 
	#RCC_BDCR
 
	`MMIO32
(
RCC_BASE
 + 0x70)

	)

102 
	#RCC_CSR
 
	`MMIO32
(
RCC_BASE
 + 0x74)

	)

106 
	#RCC_SSCGR
 
	`MMIO32
(
RCC_BASE
 + 0x80)

	)

108 
	#RCC_PLLI2SCFGR
 
	`MMIO32
(
RCC_BASE
 + 0x84)

	)

110 
	#RCC_PLLSAICFGR
 
	`MMIO32
(
RCC_BASE
 + 0x88)

	)

112 
	#RCC_DCKCFGR
 
	`MMIO32
(
RCC_BASE
 + 0x8C)

	)

114 
	#RCC_CKGATENR
 
	`MMIO32
(
RCC_BASE
 + 0x90)

	)

116 
	#RCC_DCKCFGR2
 
	`MMIO32
(
RCC_BASE
 + 0x94)

	)

123 
	#RCC_CR_PLLSAIRDY
 (1 << 29)

	)

124 
	#RCC_CR_PLLSAION
 (1 << 28)

	)

125 
	#RCC_CR_PLLI2SRDY
 (1 << 27)

	)

126 
	#RCC_CR_PLLI2SON
 (1 << 26)

	)

127 
	#RCC_CR_PLLRDY
 (1 << 25)

	)

128 
	#RCC_CR_PLLON
 (1 << 24)

	)

129 
	#RCC_CR_CSSON
 (1 << 19)

	)

130 
	#RCC_CR_HSEBYP
 (1 << 18)

	)

131 
	#RCC_CR_HSERDY
 (1 << 17)

	)

132 
	#RCC_CR_HSEON
 (1 << 16)

	)

135 
	#RCC_CR_HSITRIM_SHIFT
 3

	)

136 
	#RCC_CR_HSITRIM_MASK
 0x1f

	)

137 
	#RCC_CR_HSIRDY
 (1 << 1)

	)

138 
	#RCC_CR_HSION
 (1 << 0)

	)

146 
	#RCC_PLLCFGR_PLLR_SHIFT
 28

	)

147 
	#RCC_PLLCFGR_PLLR_MASK
 0x7

	)

149 
	#RCC_PLLCFGR_PLLQ_SHIFT
 24

	)

150 
	#RCC_PLLCFGR_PLLQ_MASK
 0xf

	)

151 
	#RCC_PLLCFGR_PLLSRC
 (1 << 22)

	)

153 
	#RCC_PLLCFGR_PLLP_SHIFT
 16

	)

154 
	#RCC_PLLCFGR_PLLP_MASK
 0x3

	)

156 
	#RCC_PLLCFGR_PLLN_SHIFT
 6

	)

157 
	#RCC_PLLCFGR_PLLN_MASK
 0x1ff

	)

159 
	#RCC_PLLCFGR_PLLM_SHIFT
 0

	)

160 
	#RCC_PLLCFGR_PLLM_MASK
 0x3f

	)

168 
	#RCC_CFGR_MCO2_SHIFT
 30

	)

169 
	#RCC_CFGR_MC02_MASK
 0x3

	)

170 
	#RCC_CFGR_MCO2_SYSCLK
 0x0

	)

171 
	#RCC_CFGR_MCO2_PLLI2S
 0x1

	)

172 
	#RCC_CFGR_MCO2_HSE
 0x2

	)

173 
	#RCC_CFGR_MCO2_PLL
 0x3

	)

176 
	#RCC_CFGR_MCO2PRE_SHIFT
 27

	)

177 
	#RCC_CFGR_MCO2PRE_MASK
 0x7

	)

178 
	#RCC_CFGR_MCO1PRE_SHIFT
 24

	)

179 
	#RCC_CFGR_MCO1PRE_MASK
 0x7

	)

180 
	#RCC_CFGR_MCOPRE_DIV_NONE
 0x0

	)

181 
	#RCC_CFGR_MCOPRE_DIV_2
 0x4

	)

182 
	#RCC_CFGR_MCOPRE_DIV_3
 0x5

	)

183 
	#RCC_CFGR_MCOPRE_DIV_4
 0x6

	)

184 
	#RCC_CFGR_MCOPRE_DIV_5
 0x7

	)

187 
	#RCC_CFGR_I2SSRC
 (1 << 23)

	)

190 
	#RCC_CFGR_MCO1_SHIFT
 21

	)

191 
	#RCC_CFGR_MCO1_MASK
 0x3

	)

192 
	#RCC_CFGR_MCO1_HSI
 0x0

	)

193 
	#RCC_CFGR_MCO1_LSE
 0x1

	)

194 
	#RCC_CFGR_MCO1_HSE
 0x2

	)

195 
	#RCC_CFGR_MCO1_PLL
 0x3

	)

196 
	#RCC_CFGR_MCO_SHIFT
 
RCC_CFGR_MCO1_SHIFT


	)

197 
	#RCC_CFGR_MCO_MASK
 
RCC_CFGR_MCO1_MASK


	)

200 
	#RCC_CFGR_RTCPRE_SHIFT
 16

	)

201 
	#RCC_CFGR_RTCPRE_MASK
 0x1f

	)

204 
	#RCC_CFGR_PPRE2_SHIFT
 13

	)

205 
	#RCC_CFGR_PPRE2_MASK
 0x7

	)

206 
	#RCC_CFGR_PPRE1_SHIFT
 10

	)

207 
	#RCC_CFGR_PPRE1_MASK
 0x7

	)

208 
	#RCC_CFGR_PPRE_DIV_NONE
 0x0

	)

209 
	#RCC_CFGR_PPRE_DIV_2
 0x4

	)

210 
	#RCC_CFGR_PPRE_DIV_4
 0x5

	)

211 
	#RCC_CFGR_PPRE_DIV_8
 0x6

	)

212 
	#RCC_CFGR_PPRE_DIV_16
 0x7

	)

215 
	#RCC_CFGR_HPRE_SHIFT
 4

	)

216 
	#RCC_CFGR_HPRE_MASK
 0xf

	)

217 
	#RCC_CFGR_HPRE_DIV_NONE
 0x0

	)

218 
	#RCC_CFGR_HPRE_DIV_2
 (0x8 + 0)

	)

219 
	#RCC_CFGR_HPRE_DIV_4
 (0x8 + 1)

	)

220 
	#RCC_CFGR_HPRE_DIV_8
 (0x8 + 2)

	)

221 
	#RCC_CFGR_HPRE_DIV_16
 (0x8 + 3)

	)

222 
	#RCC_CFGR_HPRE_DIV_64
 (0x8 + 4)

	)

223 
	#RCC_CFGR_HPRE_DIV_128
 (0x8 + 5)

	)

224 
	#RCC_CFGR_HPRE_DIV_256
 (0x8 + 6)

	)

225 
	#RCC_CFGR_HPRE_DIV_512
 (0x8 + 7)

	)

228 
	#RCC_CFGR_SWS_SHIFT
 2

	)

229 
	#RCC_CFGR_SWS_MASK
 0x3

	)

230 
	#RCC_CFGR_SWS_HSI
 0x0

	)

231 
	#RCC_CFGR_SWS_HSE
 0x1

	)

232 
	#RCC_CFGR_SWS_PLL
 0x2

	)

235 
	#RCC_CFGR_SW_SHIFT
 0

	)

236 
	#RCC_CFGR_SW_HSI
 0x0

	)

237 
	#RCC_CFGR_SW_HSE
 0x1

	)

238 
	#RCC_CFGR_SW_PLL
 0x2

	)

246 
	#RCC_CIR_CSSC
 (1 << 23)

	)

249 
	#RCC_CIR_PLLSAIRDYC
 (1 << 22)

	)

250 
	#RCC_CIR_PLLI2SRDYC
 (1 << 21)

	)

251 
	#RCC_CIR_PLLRDYC
 (1 << 20)

	)

252 
	#RCC_CIR_HSERDYC
 (1 << 19)

	)

253 
	#RCC_CIR_HSIRDYC
 (1 << 18)

	)

254 
	#RCC_CIR_LSERDYC
 (1 << 17)

	)

255 
	#RCC_CIR_LSIRDYC
 (1 << 16)

	)

258 
	#RCC_CIR_PLLSAIRDYIE
 (1 << 14)

	)

259 
	#RCC_CIR_PLLI2SRDYIE
 (1 << 13)

	)

260 
	#RCC_CIR_PLLRDYIE
 (1 << 12)

	)

261 
	#RCC_CIR_HSERDYIE
 (1 << 11)

	)

262 
	#RCC_CIR_HSIRDYIE
 (1 << 10)

	)

263 
	#RCC_CIR_LSERDYIE
 (1 << 9)

	)

264 
	#RCC_CIR_LSIRDYIE
 (1 << 8)

	)

267 
	#RCC_CIR_CSSF
 (1 << 7)

	)

270 
	#RCC_CIR_PLLSAIRDYF
 (1 << 6)

	)

271 
	#RCC_CIR_PLLI2SRDYF
 (1 << 5)

	)

272 
	#RCC_CIR_PLLRDYF
 (1 << 4)

	)

273 
	#RCC_CIR_HSERDYF
 (1 << 3)

	)

274 
	#RCC_CIR_HSIRDYF
 (1 << 2)

	)

275 
	#RCC_CIR_LSERDYF
 (1 << 1)

	)

276 
	#RCC_CIR_LSIRDYF
 (1 << 0)

	)

285 
	#RCC_AHB1RSTR_OTGHSRST
 (1 << 29)

	)

286 
	#RCC_AHB1RSTR_ETHMACRST
 (1 << 25)

	)

287 
	#RCC_AHB1RSTR_DMA2DRST
 (1 << 23)

	)

288 
	#RCC_AHB1RSTR_DMA2RST
 (1 << 22)

	)

289 
	#RCC_AHB1RSTR_DMA1RST
 (1 << 21)

	)

290 
	#RCC_AHB1RSTR_CRCRST
 (1 << 12)

	)

291 
	#RCC_AHB1RSTR_GPIOKRST
 (1 << 10)

	)

292 
	#RCC_AHB1RSTR_GPIOJRST
 (1 << 9)

	)

293 
	#RCC_AHB1RSTR_GPIOIRST
 (1 << 8)

	)

294 
	#RCC_AHB1RSTR_GPIOHRST
 (1 << 7)

	)

295 
	#RCC_AHB1RSTR_GPIOGRST
 (1 << 6)

	)

296 
	#RCC_AHB1RSTR_GPIOFRST
 (1 << 5)

	)

297 
	#RCC_AHB1RSTR_GPIOERST
 (1 << 4)

	)

298 
	#RCC_AHB1RSTR_GPIODRST
 (1 << 3)

	)

299 
	#RCC_AHB1RSTR_GPIOCRST
 (1 << 2)

	)

300 
	#RCC_AHB1RSTR_GPIOBRST
 (1 << 1)

	)

301 
	#RCC_AHB1RSTR_GPIOARST
 (1 << 0)

	)

307 
	#RCC_AHB1RSTR_IOPKRST
 
RCC_AHB1RSTR_GPIOKRST


	)

308 
	#RCC_AHB1RSTR_IOPJRST
 
RCC_AHB1RSTR_GPIOJRST


	)

309 
	#RCC_AHB1RSTR_IOPIRST
 
RCC_AHB1RSTR_GPIOIRST


	)

310 
	#RCC_AHB1RSTR_IOPHRST
 
RCC_AHB1RSTR_GPIOHRST


	)

311 
	#RCC_AHB1RSTR_IOPGRST
 
RCC_AHB1RSTR_GPIOGRST


	)

312 
	#RCC_AHB1RSTR_IOPFRST
 
RCC_AHB1RSTR_GPIOFRST


	)

313 
	#RCC_AHB1RSTR_IOPERST
 
RCC_AHB1RSTR_GPIOERST


	)

314 
	#RCC_AHB1RSTR_IOPDRST
 
RCC_AHB1RSTR_GPIODRST


	)

315 
	#RCC_AHB1RSTR_IOPCRST
 
RCC_AHB1RSTR_GPIOCRST


	)

316 
	#RCC_AHB1RSTR_IOPBRST
 
RCC_AHB1RSTR_GPIOBRST


	)

317 
	#RCC_AHB1RSTR_IOPARST
 
RCC_AHB1RSTR_GPIOARST


	)

322 
	#RCC_AHB2RSTR_OTGFSRST
 (1 << 7)

	)

323 
	#RCC_AHB2RSTR_RNGRST
 (1 << 6)

	)

324 
	#RCC_AHB2RSTR_HASHRST
 (1 << 5)

	)

325 
	#RCC_AHB2RSTR_CRYPRST
 (1 << 4)

	)

326 
	#RCC_AHB2RSTR_DCMIRST
 (1 << 0)

	)

330 
	#RCC_AHB3RSTR_QSPIRST
 (1 << 1)

	)

331 
	#RCC_AHB3RSTR_FSMCRST
 (1 << 0)

	)

335 
	#RCC_APB1RSTR_UART8RST
 (1 << 31)

	)

336 
	#RCC_APB1RSTR_UART7RST
 (1 << 30)

	)

337 
	#RCC_APB1RSTR_DACRST
 (1 << 29)

	)

338 
	#RCC_APB1RSTR_PWRRST
 (1 << 28)

	)

339 
	#RCC_APB1RSTR_CAN2RST
 (1 << 26)

	)

340 
	#RCC_APB1RSTR_CAN1RST
 (1 << 25)

	)

341 
	#RCC_APB1RSTR_I2C3RST
 (1 << 23)

	)

342 
	#RCC_APB1RSTR_I2C2RST
 (1 << 22)

	)

343 
	#RCC_APB1RSTR_I2C1RST
 (1 << 21)

	)

344 
	#RCC_APB1RSTR_UART5RST
 (1 << 20)

	)

345 
	#RCC_APB1RSTR_UART4RST
 (1 << 19)

	)

346 
	#RCC_APB1RSTR_USART3RST
 (1 << 18)

	)

347 
	#RCC_APB1RSTR_USART2RST
 (1 << 17)

	)

348 
	#RCC_APB1RSTR_SPI3RST
 (1 << 15)

	)

349 
	#RCC_APB1RSTR_SPI2RST
 (1 << 14)

	)

350 
	#RCC_APB1RSTR_WWDGRST
 (1 << 11)

	)

351 
	#RCC_APB1RSTR_TIM14RST
 (1 << 8)

	)

352 
	#RCC_APB1RSTR_TIM13RST
 (1 << 7)

	)

353 
	#RCC_APB1RSTR_TIM12RST
 (1 << 6)

	)

354 
	#RCC_APB1RSTR_TIM7RST
 (1 << 5)

	)

355 
	#RCC_APB1RSTR_TIM6RST
 (1 << 4)

	)

356 
	#RCC_APB1RSTR_TIM5RST
 (1 << 3)

	)

357 
	#RCC_APB1RSTR_TIM4RST
 (1 << 2)

	)

358 
	#RCC_APB1RSTR_TIM3RST
 (1 << 1)

	)

359 
	#RCC_APB1RSTR_TIM2RST
 (1 << 0)

	)

363 
	#RCC_APB2RSTR_DSIRST
 (1 << 27)

	)

364 
	#RCC_APB2RSTR_LTDCRST
 (1 << 26)

	)

365 
	#RCC_APB2RSTR_SAI1RST
 (1 << 22)

	)

366 
	#RCC_APB2RSTR_SPI6RST
 (1 << 21)

	)

367 
	#RCC_APB2RSTR_SPI5RST
 (1 << 20)

	)

368 
	#RCC_APB2RSTR_TIM11RST
 (1 << 18)

	)

369 
	#RCC_APB2RSTR_TIM10RST
 (1 << 17)

	)

370 
	#RCC_APB2RSTR_TIM9RST
 (1 << 16)

	)

371 
	#RCC_APB2RSTR_SYSCFGRST
 (1 << 14)

	)

372 
	#RCC_APB2RSTR_SPI4RST
 (1 << 13)

	)

373 
	#RCC_APB2RSTR_SPI1RST
 (1 << 12)

	)

374 
	#RCC_APB2RSTR_SDIORST
 (1 << 11)

	)

375 
	#RCC_APB2RSTR_ADCRST
 (1 << 8)

	)

376 
	#RCC_APB2RSTR_USART6RST
 (1 << 5)

	)

377 
	#RCC_APB2RSTR_USART1RST
 (1 << 4)

	)

378 
	#RCC_APB2RSTR_TIM8RST
 (1 << 1)

	)

379 
	#RCC_APB2RSTR_TIM1RST
 (1 << 0)

	)

388 
	#RCC_AHB1ENR_OTGHSULPIEN
 (1 << 30)

	)

389 
	#RCC_AHB1ENR_OTGHSEN
 (1 << 29)

	)

390 
	#RCC_AHB1ENR_ETHMACPTPEN
 (1 << 28)

	)

391 
	#RCC_AHB1ENR_ETHMACRXEN
 (1 << 27)

	)

392 
	#RCC_AHB1ENR_ETHMACTXEN
 (1 << 26)

	)

393 
	#RCC_AHB1ENR_ETHMACEN
 (1 << 25)

	)

394 
	#RCC_AHB1ENR_DMA2DEN
 (1 << 23)

	)

395 
	#RCC_AHB1ENR_DMA2EN
 (1 << 22)

	)

396 
	#RCC_AHB1ENR_DMA1EN
 (1 << 21)

	)

397 
	#RCC_AHB1ENR_CCMDATARAMEN
 (1 << 20)

	)

398 
	#RCC_AHB1ENR_BKPSRAMEN
 (1 << 18)

	)

399 
	#RCC_AHB1ENR_CRCEN
 (1 << 12)

	)

400 
	#RCC_AHB1ENR_GPIOKEN
 (1 << 10)

	)

401 
	#RCC_AHB1ENR_GPIOJEN
 (1 << 9)

	)

402 
	#RCC_AHB1ENR_GPIOIEN
 (1 << 8)

	)

403 
	#RCC_AHB1ENR_GPIOHEN
 (1 << 7)

	)

404 
	#RCC_AHB1ENR_GPIOGEN
 (1 << 6)

	)

405 
	#RCC_AHB1ENR_GPIOFEN
 (1 << 5)

	)

406 
	#RCC_AHB1ENR_GPIOEEN
 (1 << 4)

	)

407 
	#RCC_AHB1ENR_GPIODEN
 (1 << 3)

	)

408 
	#RCC_AHB1ENR_GPIOCEN
 (1 << 2)

	)

409 
	#RCC_AHB1ENR_GPIOBEN
 (1 << 1)

	)

410 
	#RCC_AHB1ENR_GPIOAEN
 (1 << 0)

	)

416 
	#RCC_AHB1ENR_IOPKEN
 
RCC_AHB1ENR_GPIOKEN


	)

417 
	#RCC_AHB1ENR_IOPJEN
 
RCC_AHB1ENR_GPIOJEN


	)

418 
	#RCC_AHB1ENR_IOPIEN
 
RCC_AHB1ENR_GPIOIEN


	)

419 
	#RCC_AHB1ENR_IOPHEN
 
RCC_AHB1ENR_GPIOHEN


	)

420 
	#RCC_AHB1ENR_IOPGEN
 
RCC_AHB1ENR_GPIOGEN


	)

421 
	#RCC_AHB1ENR_IOPFEN
 
RCC_AHB1ENR_GPIOFEN


	)

422 
	#RCC_AHB1ENR_IOPEEN
 
RCC_AHB1ENR_GPIOEEN


	)

423 
	#RCC_AHB1ENR_IOPDEN
 
RCC_AHB1ENR_GPIODEN


	)

424 
	#RCC_AHB1ENR_IOPCEN
 
RCC_AHB1ENR_GPIOCEN


	)

425 
	#RCC_AHB1ENR_IOPBEN
 
RCC_AHB1ENR_GPIOBEN


	)

426 
	#RCC_AHB1ENR_IOPAEN
 
RCC_AHB1ENR_GPIOAEN


	)

431 
	#RCC_AHB2ENR_OTGFSEN
 (1 << 7)

	)

432 
	#RCC_AHB2ENR_RNGEN
 (1 << 6)

	)

433 
	#RCC_AHB2ENR_HASHEN
 (1 << 5)

	)

434 
	#RCC_AHB2ENR_CRYPEN
 (1 << 4)

	)

435 
	#RCC_AHB2ENR_DCMIEN
 (1 << 0)

	)

439 
	#RCC_AHB3ENR_QSPIEN
 (1 << 1)

	)

440 
	#RCC_AHB3ENR_FSMCEN
 (1 << 0)

	)

442 
	#RCC_AHB3ENR_FMCEN
 (1 << 0)

	)

446 
	#RCC_APB1ENR_UART8EN
 (1 << 31)

	)

447 
	#RCC_APB1ENR_UART7EN
 (1 << 30)

	)

448 
	#RCC_APB1ENR_DACEN
 (1 << 29)

	)

449 
	#RCC_APB1ENR_PWREN
 (1 << 28)

	)

450 
	#RCC_APB1ENR_CAN2EN
 (1 << 26)

	)

451 
	#RCC_APB1ENR_CAN1EN
 (1 << 25)

	)

452 
	#RCC_APB1ENR_I2C3EN
 (1 << 23)

	)

453 
	#RCC_APB1ENR_I2C2EN
 (1 << 22)

	)

454 
	#RCC_APB1ENR_I2C1EN
 (1 << 21)

	)

455 
	#RCC_APB1ENR_UART5EN
 (1 << 20)

	)

456 
	#RCC_APB1ENR_UART4EN
 (1 << 19)

	)

457 
	#RCC_APB1ENR_USART3EN
 (1 << 18)

	)

458 
	#RCC_APB1ENR_USART2EN
 (1 << 17)

	)

459 
	#RCC_APB1ENR_SPI3EN
 (1 << 15)

	)

460 
	#RCC_APB1ENR_SPI2EN
 (1 << 14)

	)

461 
	#RCC_APB1ENR_WWDGEN
 (1 << 11)

	)

462 
	#RCC_APB1ENR_TIM14EN
 (1 << 8)

	)

463 
	#RCC_APB1ENR_TIM13EN
 (1 << 7)

	)

464 
	#RCC_APB1ENR_TIM12EN
 (1 << 6)

	)

465 
	#RCC_APB1ENR_TIM7EN
 (1 << 5)

	)

466 
	#RCC_APB1ENR_TIM6EN
 (1 << 4)

	)

467 
	#RCC_APB1ENR_TIM5EN
 (1 << 3)

	)

468 
	#RCC_APB1ENR_TIM4EN
 (1 << 2)

	)

469 
	#RCC_APB1ENR_TIM3EN
 (1 << 1)

	)

470 
	#RCC_APB1ENR_TIM2EN
 (1 << 0)

	)

474 
	#RCC_APB2ENR_DSIEN
 (1 << 27)

	)

475 
	#RCC_APB2ENR_LTDCEN
 (1 << 26)

	)

476 
	#RCC_APB2ENR_SAI1EN
 (1 << 22)

	)

477 
	#RCC_APB2ENR_SPI6EN
 (1 << 21)

	)

478 
	#RCC_APB2ENR_SPI5EN
 (1 << 20)

	)

479 
	#RCC_APB2ENR_TIM11EN
 (1 << 18)

	)

480 
	#RCC_APB2ENR_TIM10EN
 (1 << 17)

	)

481 
	#RCC_APB2ENR_TIM9EN
 (1 << 16)

	)

482 
	#RCC_APB2ENR_SYSCFGEN
 (1 << 14)

	)

483 
	#RCC_APB2ENR_SPI4EN
 (1 << 13)

	)

484 
	#RCC_APB2ENR_SPI1EN
 (1 << 12)

	)

485 
	#RCC_APB2ENR_SDIOEN
 (1 << 11)

	)

486 
	#RCC_APB2ENR_ADC3EN
 (1 << 10)

	)

487 
	#RCC_APB2ENR_ADC2EN
 (1 << 9)

	)

488 
	#RCC_APB2ENR_ADC1EN
 (1 << 8)

	)

489 
	#RCC_APB2ENR_USART6EN
 (1 << 5)

	)

490 
	#RCC_APB2ENR_USART1EN
 (1 << 4)

	)

491 
	#RCC_APB2ENR_TIM8EN
 (1 << 1)

	)

492 
	#RCC_APB2ENR_TIM1EN
 (1 << 0)

	)

496 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 (1 << 30)

	)

497 
	#RCC_AHB1LPENR_OTGHSLPEN
 (1 << 29)

	)

498 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 (1 << 28)

	)

499 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 (1 << 27)

	)

500 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 (1 << 26)

	)

501 
	#RCC_AHB1LPENR_ETHMACLPEN
 (1 << 25)

	)

502 
	#RCC_AHB1LPENR_DMA2DLPEN
 (1 << 23)

	)

503 
	#RCC_AHB1LPENR_DMA2LPEN
 (1 << 22)

	)

504 
	#RCC_AHB1LPENR_DMA1LPEN
 (1 << 21)

	)

505 
	#RCC_AHB1LPENR_SRAM3LPEN
 (1 << 19)

	)

506 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 (1 << 18)

	)

507 
	#RCC_AHB1LPENR_SRAM2LPEN
 (1 << 17)

	)

508 
	#RCC_AHB1LPENR_SRAM1LPEN
 (1 << 16)

	)

509 
	#RCC_AHB1LPENR_FLITFLPEN
 (1 << 15)

	)

510 
	#RCC_AHB1LPENR_CRCLPEN
 (1 << 12)

	)

511 
	#RCC_AHB1LPENR_GPIOKLPEN
 (1 << 10)

	)

512 
	#RCC_AHB1LPENR_GPIOJLPEN
 (1 << 9)

	)

513 
	#RCC_AHB1LPENR_GPIOILPEN
 (1 << 8)

	)

514 
	#RCC_AHB1LPENR_GPIOHLPEN
 (1 << 7)

	)

515 
	#RCC_AHB1LPENR_GPIOGLPEN
 (1 << 6)

	)

516 
	#RCC_AHB1LPENR_GPIOFLPEN
 (1 << 5)

	)

517 
	#RCC_AHB1LPENR_GPIOELPEN
 (1 << 4)

	)

518 
	#RCC_AHB1LPENR_GPIODLPEN
 (1 << 3)

	)

519 
	#RCC_AHB1LPENR_GPIOCLPEN
 (1 << 2)

	)

520 
	#RCC_AHB1LPENR_GPIOBLPEN
 (1 << 1)

	)

521 
	#RCC_AHB1LPENR_GPIOALPEN
 (1 << 0)

	)

527 
	#RCC_AHB1LPENR_IOPKLPEN
 
RCC_AHB1LPENR_GPIOKLPEN


	)

528 
	#RCC_AHB1LPENR_IOPJLPEN
 
RCC_AHB1LPENR_GPIOJLPEN


	)

529 
	#RCC_AHB1LPENR_IOPILPEN
 
RCC_AHB1LPENR_GPIOILPEN


	)

530 
	#RCC_AHB1LPENR_IOPHLPEN
 
RCC_AHB1LPENR_GPIOHLPEN


	)

531 
	#RCC_AHB1LPENR_IOPGLPEN
 
RCC_AHB1LPENR_GPIOGLPEN


	)

532 
	#RCC_AHB1LPENR_IOPFLPEN
 
RCC_AHB1LPENR_GPIOFLPEN


	)

533 
	#RCC_AHB1LPENR_IOPELPEN
 
RCC_AHB1LPENR_GPIOELPEN


	)

534 
	#RCC_AHB1LPENR_IOPDLPEN
 
RCC_AHB1LPENR_GPIODLPEN


	)

535 
	#RCC_AHB1LPENR_IOPCLPEN
 
RCC_AHB1LPENR_GPIOCLPEN


	)

536 
	#RCC_AHB1LPENR_IOPBLPEN
 
RCC_AHB1LPENR_GPIOBLPEN


	)

537 
	#RCC_AHB1LPENR_IOPALPEN
 
RCC_AHB1LPENR_GPIOALPEN


	)

542 
	#RCC_AHB2LPENR_OTGFSLPEN
 (1 << 7)

	)

543 
	#RCC_AHB2LPENR_RNGLPEN
 (1 << 6)

	)

544 
	#RCC_AHB2LPENR_HASHLPEN
 (1 << 5)

	)

545 
	#RCC_AHB2LPENR_CRYPLPEN
 (1 << 4)

	)

546 
	#RCC_AHB2LPENR_DCMILPEN
 (1 << 0)

	)

550 
	#RCC_AHB3LPENR_QSPIEN
 (1 << 1)

	)

551 
	#RCC_AHB3LPENR_FSMCLPEN
 (1 << 0)

	)

552 
	#RCC_AHB3LPENR_FMCLPEN
 (1 << 0)

	)

556 
	#RCC_APB1LPENR_UART8EN
 (1 << 31)

	)

557 
	#RCC_APB1LPENR_UART7EN
 (1 << 30)

	)

558 
	#RCC_APB1LPENR_DACLPEN
 (1 << 29)

	)

559 
	#RCC_APB1LPENR_PWRLPEN
 (1 << 28)

	)

560 
	#RCC_APB1LPENR_CAN2LPEN
 (1 << 26)

	)

561 
	#RCC_APB1LPENR_CAN1LPEN
 (1 << 25)

	)

562 
	#RCC_APB1LPENR_I2C3LPEN
 (1 << 23)

	)

563 
	#RCC_APB1LPENR_I2C2LPEN
 (1 << 22)

	)

564 
	#RCC_APB1LPENR_I2C1LPEN
 (1 << 21)

	)

565 
	#RCC_APB1LPENR_UART5LPEN
 (1 << 20)

	)

566 
	#RCC_APB1LPENR_UART4LPEN
 (1 << 19)

	)

567 
	#RCC_APB1LPENR_USART3LPEN
 (1 << 18)

	)

568 
	#RCC_APB1LPENR_USART2LPEN
 (1 << 17)

	)

569 
	#RCC_APB1LPENR_SPI3LPEN
 (1 << 15)

	)

570 
	#RCC_APB1LPENR_SPI2LPEN
 (1 << 14)

	)

571 
	#RCC_APB1LPENR_WWDGLPEN
 (1 << 11)

	)

572 
	#RCC_APB1LPENR_TIM14LPEN
 (1 << 8)

	)

573 
	#RCC_APB1LPENR_TIM13LPEN
 (1 << 7)

	)

574 
	#RCC_APB1LPENR_TIM12LPEN
 (1 << 6)

	)

575 
	#RCC_APB1LPENR_TIM7LPEN
 (1 << 5)

	)

576 
	#RCC_APB1LPENR_TIM6LPEN
 (1 << 4)

	)

577 
	#RCC_APB1LPENR_TIM5LPEN
 (1 << 3)

	)

578 
	#RCC_APB1LPENR_TIM4LPEN
 (1 << 2)

	)

579 
	#RCC_APB1LPENR_TIM3LPEN
 (1 << 1)

	)

580 
	#RCC_APB1LPENR_TIM2LPEN
 (1 << 0)

	)

584 
	#RCC_APB2LPENR_DSILPEN
 (1 << 27)

	)

585 
	#RCC_APB2LPENR_LTDCLPEN
 (1 << 26)

	)

586 
	#RCC_APB2LPENR_SAI1LPEN
 (1 << 22)

	)

587 
	#RCC_APB2LPENR_SPI6LPEN
 (1 << 21)

	)

588 
	#RCC_APB2LPENR_SPI5LPEN
 (1 << 20)

	)

589 
	#RCC_APB2LPENR_TIM11LPEN
 (1 << 18)

	)

590 
	#RCC_APB2LPENR_TIM10LPEN
 (1 << 17)

	)

591 
	#RCC_APB2LPENR_TIM9LPEN
 (1 << 16)

	)

592 
	#RCC_APB2LPENR_SYSCFGLPEN
 (1 << 14)

	)

593 
	#RCC_APB2LPENR_SPI1LPEN
 (1 << 12)

	)

594 
	#RCC_APB2LPENR_SDIOLPEN
 (1 << 11)

	)

595 
	#RCC_APB2LPENR_ADC3LPEN
 (1 << 10)

	)

596 
	#RCC_APB2LPENR_ADC2LPEN
 (1 << 9)

	)

597 
	#RCC_APB2LPENR_ADC1LPEN
 (1 << 8)

	)

598 
	#RCC_APB2LPENR_USART6LPEN
 (1 << 5)

	)

599 
	#RCC_APB2LPENR_USART1LPEN
 (1 << 4)

	)

600 
	#RCC_APB2LPENR_TIM8LPEN
 (1 << 1)

	)

601 
	#RCC_APB2LPENR_TIM1LPEN
 (1 << 0)

	)

608 
	#RCC_BDCR_BDRST
 (1 << 16)

	)

609 
	#RCC_BDCR_RTCEN
 (1 << 15)

	)

611 
	#RCC_BDCR_RTCSEL_SHIFT
 8

	)

612 
	#RCC_BDCR_RTCSEL_MASK
 0x3

	)

613 
	#RCC_BDCR_RTCSEL_NONE
 0

	)

614 
	#RCC_BDCR_RTCSEL_LSE
 1

	)

615 
	#RCC_BDCR_RTCSEL_LSI
 2

	)

616 
	#RCC_BDCR_RTCSEL_HSE
 3

	)

617 
	#RCC_BDCR_LSEMOD
 (1 << 3)

	)

618 
	#RCC_BDCR_LSEBYP
 (1 << 2)

	)

619 
	#RCC_BDCR_LSERDY
 (1 << 1)

	)

620 
	#RCC_BDCR_LSEON
 (1 << 0)

	)

627 
	#RCC_CSR_LPWRRSTF
 (1 << 31)

	)

628 
	#RCC_CSR_WWDGRSTF
 (1 << 30)

	)

629 
	#RCC_CSR_IWDGRSTF
 (1 << 29)

	)

630 
	#RCC_CSR_SFTRSTF
 (1 << 28)

	)

631 
	#RCC_CSR_PORRSTF
 (1 << 27)

	)

632 
	#RCC_CSR_PINRSTF
 (1 << 26)

	)

633 
	#RCC_CSR_BORRSTF
 (1 << 25)

	)

634 
	#RCC_CSR_RMVF
 (1 << 24)

	)

635 
	#RCC_CSR_RESET_FLAGS
 (
RCC_CSR_LPWRRSTF
 | 
RCC_CSR_WWDGRSTF
 |\

636 
RCC_CSR_IWDGRSTF
 | 
RCC_CSR_SFTRSTF
 | 
RCC_CSR_PORRSTF
 |\

637 
RCC_CSR_PINRSTF
 | 
RCC_CSR_BORRSTF
)

	)

638 
	#RCC_CSR_LSIRDY
 (1 << 1)

	)

639 
	#RCC_CSR_LSION
 (1 << 0)

	)

648 
	#RCC_SSCGR_SSCGEN
 (1 << 31)

	)

649 
	#RCC_SSCGR_SPREADSEL
 (1 << 30)

	)

651 
	#RCC_SSCGR_INCSTEP_SHIFT
 13

	)

652 
	#RCC_SSCGR_INCSTEP_MASK
 0x7fff

	)

654 
	#RCC_SSCGR_MODPER_SHIFT
 0

	)

655 
	#RCC_SSCGR_MODPER_MASK
 0x1fff

	)

665 
	#RCC_PLLI2SCFGR_PLLI2SR_SHIFT
 28

	)

666 
	#RCC_PLLI2SCFGR_PLLI2SR_MASK
 0x7

	)

668 
	#RCC_PLLI2SCFGR_PLLI2SQ_SHIFT
 24

	)

669 
	#RCC_PLLI2SCFGR_PLLI2SQ_MASK
 0xf

	)

671 
	#RCC_PLLI2SCFGR_PLLI2SN_SHIFT
 6

	)

672 
	#RCC_PLLI2SCFGR_PLLI2SN_MASK
 0x1ff

	)

677 
	#RCC_PLLSAICFGR_PLLSAIR_SHIFT
 28

	)

678 
	#RCC_PLLSAICFGR_PLLSAIR_MASK
 0x7

	)

681 
	#RCC_PLLSAICFGR_PLLSAIQ_SHIFT
 24

	)

682 
	#RCC_PLLSAICFGR_PLLSAIQ_MASK
 0xF

	)

685 
	#RCC_PLLSAICFGR_PLLSAIP_SHIFT
 16

	)

686 
	#RCC_PLLSAICFGR_PLLSAIP_MASK
 0x3

	)

690 
	#RCC_PLLSAICFGR_PLLSAIP_DIV2
 0x0

	)

691 
	#RCC_PLLSAICFGR_PLLSAIP_DIV4
 0x1

	)

692 
	#RCC_PLLSAICFGR_PLLSAIP_DIV6
 0x2

	)

693 
	#RCC_PLLSAICFGR_PLLSAIP_DIV8
 0x3

	)

697 
	#RCC_PLLSAICFGR_PLLSAIN_SHIFT
 6

	)

698 
	#RCC_PLLSAICFGR_PLLSAIN_MASK
 0x1FF

	)

702 
	#RCC_DCKCFGR_DSISEL
 (1 << 29)

	)

703 
	#RCC_DCKCFGR_SDMMCSEL
 (1 << 28)

	)

704 
	#RCC_DCKCFGR_48MSEL
 (1 << 27)

	)

705 
	#RCC_DCKCFGR_TIMPRE
 (1 << 24)

	)

707 
	#RCC_DCKCFGR_SAI1BSRC_SHIFT
 22

	)

708 
	#RCC_DCKCFGR_SAI1BSRC_MASK
 0x3

	)

710 
	#RCC_DCKCFGR_SAI1ASRC_SHIFT
 20

	)

711 
	#RCC_DCKCFGR_SAI1ASRC_MASK
 0x3

	)

714 
	#RCC_DCKCFGR_SAI1SRC_SAIQ
 0x0

	)

715 
	#RCC_DCKCFGR_SAI1SRC_I2SQ
 0x1

	)

716 
	#RCC_DCKCFGR_SAI1SRC_ALT
 0x2

	)

717 
	#RCC_DCKCFGR_SAI1SRC_ERROR
 0x3

	)

719 
	#RCC_DCKCFGR_PLLSAIDIVR_SHIFT
 16

	)

720 
	#RCC_DCKCFGR_PLLSAIDIVR_MASK
 0x3

	)

721 
	#RCC_DCKCFGR_PLLSAIDIVR_DIVR_2
 0x0

	)

722 
	#RCC_DCKCFGR_PLLSAIDIVR_DIVR_4
 0x1

	)

723 
	#RCC_DCKCFGR_PLLSAIDIVR_DIVR_8
 0x2

	)

724 
	#RCC_DCKCFGR_PLLSAIDIVR_DIVR_16
 0x3

	)

726 
	#RCC_DCKCFGR_PLLSAIDIVQ_SHIFT
 8

	)

727 
	#RCC_DCKCFGR_PLLSAIDIVQ_MASK
 0x1f

	)

729 
	#RCC_DCKCFGR_PLLI2SDIVQ_SHIFT
 0

	)

730 
	#RCC_DCKCFGR_PLLI2SDIVQ_MASK
 0x1f

	)

737 
	#RCC_CKGATENR_EVTCL_CKEN
 (1<<7)

	)

738 
	#RCC_CKGATENR_RCC_CKEN
 (1<<6)

	)

739 
	#RCC_CKGATENR_FLITF_CKEN
 (1<<5)

	)

740 
	#RCC_CKGATENR_SRAM_CKEN
 (1<<4)

	)

741 
	#RCC_CKGATENR_SPARE_CKEN
 (1<<3)

	)

742 
	#RCC_CKGATENR_CM4DBG_CKEN
 (1<<2)

	)

743 
	#RCC_CKGATENR_AHB2APB2_CKEN
 (1<<1)

	)

744 
	#RCC_CKGATENR_AHB2APB1_CKEN
 (1<<0)

	)

748 
ölöe
 
	$rcc_∂lßi_íabÀ
()

750 
RCC_CR
 |
RCC_CR_PLLSAION
;

751 
	}
}

753 
ölöe
 
boﬁ
 
	$rcc_∂lßi_ªady
()

755  (
RCC_CR
 & 
RCC_CR_PLLSAIRDY
) != 0;

756 
	}
}

760 
uöt32_t
 
rcc_ahb_‰equícy
;

761 
uöt32_t
 
rcc_≠b1_‰equícy
;

762 
uöt32_t
 
rcc_≠b2_‰equícy
;

766 
	ercc_˛ock_3v3
 {

767 
	mRCC_CLOCK_3V3_48MHZ
,

768 
	mRCC_CLOCK_3V3_84MHZ
,

769 
	mRCC_CLOCK_3V3_120MHZ
,

770 
	mRCC_CLOCK_3V3_168MHZ
,

771 
	mRCC_CLOCK_3V3_END


774 
	srcc_˛ock_sˇÀ
 {

775 
uöt8_t
 
	m∂lm
;

776 
uöt16_t
 
	m∂ 
;

777 
uöt8_t
 
	m∂Õ
;

778 
uöt8_t
 
	m∂lq
;

779 
uöt8_t
 
	m∂Ã
;

780 
uöt32_t
 
	mÊash_c⁄fig
;

781 
uöt8_t
 
	mh¥e
;

782 
uöt8_t
 
	mµª1
;

783 
uöt8_t
 
	mµª2
;

784 
uöt8_t
 
	mpowî_ßve
;

785 
uöt32_t
 
	mahb_‰equícy
;

786 
uöt32_t
 
	m≠b1_‰equícy
;

787 
uöt32_t
 
	m≠b2_‰equícy
;

790 c⁄° 
rcc_˛ock_sˇÀ
 
rcc_h£_8mhz_3v3
[
RCC_CLOCK_3V3_END
];

791 c⁄° 
rcc_˛ock_sˇÀ
 
rcc_h£_12mhz_3v3
[
RCC_CLOCK_3V3_END
];

792 c⁄° 
rcc_˛ock_sˇÀ
 
rcc_h£_16mhz_3v3
[
RCC_CLOCK_3V3_END
];

793 c⁄° 
rcc_˛ock_sˇÀ
 
rcc_h£_25mhz_3v3
[
RCC_CLOCK_3V3_END
];

795 
	ercc_osc
 {

796 
	mRCC_PLL
,

797 
	mRCC_PLLSAI
,

798 
	mRCC_PLLI2S
,

799 
	mRCC_HSE
,

800 
	mRCC_HSI
,

801 
	mRCC_LSE
,

802 
	mRCC_LSI


805 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

807 
	ercc_≥rùh_˛kí
 {

809 
	mRCC_GPIOA
 = 
_REG_BIT
(0x30, 0),

810 
	mRCC_GPIOB
 = 
_REG_BIT
(0x30, 1),

811 
	mRCC_GPIOC
 = 
_REG_BIT
(0x30, 2),

812 
	mRCC_GPIOD
 = 
_REG_BIT
(0x30, 3),

813 
	mRCC_GPIOE
 = 
_REG_BIT
(0x30, 4),

814 
	mRCC_GPIOF
 = 
_REG_BIT
(0x30, 5),

815 
	mRCC_GPIOG
 = 
_REG_BIT
(0x30, 6),

816 
	mRCC_GPIOH
 = 
_REG_BIT
(0x30, 7),

817 
	mRCC_GPIOI
 = 
_REG_BIT
(0x30, 8),

818 
	mRCC_GPIOJ
 = 
_REG_BIT
(0x30, 9),

819 
	mRCC_GPIOK
 = 
_REG_BIT
(0x30, 10),

820 
	mRCC_CRC
 = 
_REG_BIT
(0x30, 12),

821 
	mRCC_BKPSRAM
 = 
_REG_BIT
(0x30, 18),

822 
	mRCC_CCMDATARAM
 = 
_REG_BIT
(0x30, 20),

823 
	mRCC_DMA1
 = 
_REG_BIT
(0x30, 21),

824 
	mRCC_DMA2
 = 
_REG_BIT
(0x30, 22),

825 
	mRCC_DMA2D
 = 
_REG_BIT
(0x30, 23),

826 
	mRCC_ETHMAC
 = 
_REG_BIT
(0x30, 25),

827 
	mRCC_ETHMACTX
 = 
_REG_BIT
(0x30, 26),

828 
	mRCC_ETHMACRX
 = 
_REG_BIT
(0x30, 27),

829 
	mRCC_ETHMACPTP
 = 
_REG_BIT
(0x30, 28),

830 
	mRCC_OTGHS
 = 
_REG_BIT
(0x30, 29),

831 
	mRCC_OTGHSULPI
 = 
_REG_BIT
(0x30, 30),

834 
	mRCC_DCMI
 = 
_REG_BIT
(0x34, 0),

835 
	mRCC_CRYP
 = 
_REG_BIT
(0x34, 4),

836 
	mRCC_HASH
 = 
_REG_BIT
(0x34, 5),

837 
	mRCC_RNG
 = 
_REG_BIT
(0x34, 6),

838 
	mRCC_OTGFS
 = 
_REG_BIT
(0x34, 7),

841 
	mRCC_FSMC
 = 
_REG_BIT
(0x38, 0),

842 
	mRCC_FMC
 = 
_REG_BIT
(0x38, 0),

843 
	mRCC_QUADSPI
 = 
_REG_BIT
(0x38, 1),

846 
	mRCC_TIM2
 = 
_REG_BIT
(0x40, 0),

847 
	mRCC_TIM3
 = 
_REG_BIT
(0x40, 1),

848 
	mRCC_TIM4
 = 
_REG_BIT
(0x40, 2),

849 
	mRCC_TIM5
 = 
_REG_BIT
(0x40, 3),

850 
	mRCC_TIM6
 = 
_REG_BIT
(0x40, 4),

851 
	mRCC_TIM7
 = 
_REG_BIT
(0x40, 5),

852 
	mRCC_TIM12
 = 
_REG_BIT
(0x40, 6),

853 
	mRCC_TIM13
 = 
_REG_BIT
(0x40, 7),

854 
	mRCC_TIM14
 = 
_REG_BIT
(0x40, 8),

855 
	mRCC_WWDG
 = 
_REG_BIT
(0x40, 11),

856 
	mRCC_SPI2
 = 
_REG_BIT
(0x40, 14),

857 
	mRCC_SPI3
 = 
_REG_BIT
(0x40, 15),

858 
	mRCC_USART2
 = 
_REG_BIT
(0x40, 17),

859 
	mRCC_USART3
 = 
_REG_BIT
(0x40, 18),

860 
	mRCC_UART4
 = 
_REG_BIT
(0x40, 19),

861 
	mRCC_UART5
 = 
_REG_BIT
(0x40, 20),

862 
	mRCC_I2C1
 = 
_REG_BIT
(0x40, 21),

863 
	mRCC_I2C2
 = 
_REG_BIT
(0x40, 22),

864 
	mRCC_I2C3
 = 
_REG_BIT
(0x40, 23),

865 
	mRCC_CAN1
 = 
_REG_BIT
(0x40, 25),

866 
	mRCC_CAN2
 = 
_REG_BIT
(0x40, 26),

867 
	mRCC_PWR
 = 
_REG_BIT
(0x40, 28),

868 
	mRCC_DAC
 = 
_REG_BIT
(0x40, 29),

869 
	mRCC_UART7
 = 
_REG_BIT
(0x40, 30),

870 
	mRCC_UART8
 = 
_REG_BIT
(0x40, 31),

873 
	mRCC_TIM1
 = 
_REG_BIT
(0x44, 0),

874 
	mRCC_TIM8
 = 
_REG_BIT
(0x44, 1),

875 
	mRCC_USART1
 = 
_REG_BIT
(0x44, 4),

876 
	mRCC_USART6
 = 
_REG_BIT
(0x44, 5),

877 
	mRCC_ADC1
 = 
_REG_BIT
(0x44, 8),

878 
	mRCC_ADC2
 = 
_REG_BIT
(0x44, 9),

879 
	mRCC_ADC3
 = 
_REG_BIT
(0x44, 10),

880 
	mRCC_SDIO
 = 
_REG_BIT
(0x44, 11),

881 
	mRCC_SPI1
 = 
_REG_BIT
(0x44, 12),

882 
	mRCC_SPI4
 = 
_REG_BIT
(0x44, 13),

883 
	mRCC_SYSCFG
 = 
_REG_BIT
(0x44, 14),

884 
	mRCC_TIM9
 = 
_REG_BIT
(0x44, 16),

885 
	mRCC_TIM10
 = 
_REG_BIT
(0x44, 17),

886 
	mRCC_TIM11
 = 
_REG_BIT
(0x44, 18),

887 
	mRCC_SPI5
 = 
_REG_BIT
(0x44, 20),

888 
	mRCC_SPI6
 = 
_REG_BIT
(0x44, 21),

889 
	mRCC_SAI1EN
 = 
_REG_BIT
(0x44, 22),

890 
	mRCC_LTDC
 = 
_REG_BIT
(0x44, 26),

891 
	mRCC_DSI
 = 
_REG_BIT
(0x44, 27),

895 
	mRCC_RTC
 = 
_REG_BIT
(0x70, 15),

898 
	mSCC_GPIOA
 = 
_REG_BIT
(0x50, 0),

899 
	mSCC_GPIOB
 = 
_REG_BIT
(0x50, 1),

900 
	mSCC_GPIOC
 = 
_REG_BIT
(0x50, 2),

901 
	mSCC_GPIOD
 = 
_REG_BIT
(0x50, 3),

902 
	mSCC_GPIOE
 = 
_REG_BIT
(0x50, 4),

903 
	mSCC_GPIOF
 = 
_REG_BIT
(0x50, 5),

904 
	mSCC_GPIOG
 = 
_REG_BIT
(0x50, 6),

905 
	mSCC_GPIOH
 = 
_REG_BIT
(0x50, 7),

906 
	mSCC_GPIOI
 = 
_REG_BIT
(0x50, 8),

907 
	mSCC_GPIOJ
 = 
_REG_BIT
(0x50, 9),

908 
	mSCC_GPIOK
 = 
_REG_BIT
(0x50, 10),

909 
	mSCC_CRC
 = 
_REG_BIT
(0x50, 12),

910 
	mSCC_FLTIF
 = 
_REG_BIT
(0x50, 15),

911 
	mSCC_SRAM1
 = 
_REG_BIT
(0x50, 16),

912 
	mSCC_SRAM2
 = 
_REG_BIT
(0x50, 17),

913 
	mSCC_BKPSRAM
 = 
_REG_BIT
(0x50, 18),

914 
	mSCC_SRAM3
 = 
_REG_BIT
(0x50, 19),

915 
	mSCC_DMA1
 = 
_REG_BIT
(0x50, 21),

916 
	mSCC_DMA2
 = 
_REG_BIT
(0x50, 22),

917 
	mSCC_DMA2D
 = 
_REG_BIT
(0x50, 23),

918 
	mSCC_ETHMAC
 = 
_REG_BIT
(0x50, 25),

919 
	mSCC_ETHMACTX
 = 
_REG_BIT
(0x50, 26),

920 
	mSCC_ETHMACRX
 = 
_REG_BIT
(0x50, 27),

921 
	mSCC_ETHMACPTP
 = 
_REG_BIT
(0x50, 28),

922 
	mSCC_OTGHS
 = 
_REG_BIT
(0x50, 29),

923 
	mSCC_OTGHSULPI
 = 
_REG_BIT
(0x50, 30),

926 
	mSCC_DCMI
 = 
_REG_BIT
(0x54, 0),

927 
	mSCC_CRYP
 = 
_REG_BIT
(0x54, 4),

928 
	mSCC_HASH
 = 
_REG_BIT
(0x54, 5),

929 
	mSCC_RNG
 = 
_REG_BIT
(0x54, 6),

930 
	mSCC_OTGFS
 = 
_REG_BIT
(0x54, 7),

933 
	mSCC_QSPIC
 = 
_REG_BIT
(0x58, 1),

934 
	mSCC_FMC
 = 
_REG_BIT
(0x58, 0),

935 
	mSCC_FSMC
 = 
_REG_BIT
(0x58, 0),

938 
	mSCC_TIM2
 = 
_REG_BIT
(0x60, 0),

939 
	mSCC_TIM3
 = 
_REG_BIT
(0x60, 1),

940 
	mSCC_TIM4
 = 
_REG_BIT
(0x60, 2),

941 
	mSCC_TIM5
 = 
_REG_BIT
(0x60, 3),

942 
	mSCC_TIM6
 = 
_REG_BIT
(0x60, 4),

943 
	mSCC_TIM7
 = 
_REG_BIT
(0x60, 5),

944 
	mSCC_TIM12
 = 
_REG_BIT
(0x60, 6),

945 
	mSCC_TIM13
 = 
_REG_BIT
(0x60, 7),

946 
	mSCC_TIM14
 = 
_REG_BIT
(0x60, 8),

947 
	mSCC_WWDG
 = 
_REG_BIT
(0x60, 11),

948 
	mSCC_SPI2
 = 
_REG_BIT
(0x60, 14),

949 
	mSCC_SPI3
 = 
_REG_BIT
(0x60, 15),

950 
	mSCC_USART2
 = 
_REG_BIT
(0x60, 17),

951 
	mSCC_USART3
 = 
_REG_BIT
(0x60, 18),

952 
	mSCC_UART4
 = 
_REG_BIT
(0x60, 19),

953 
	mSCC_UART5
 = 
_REG_BIT
(0x60, 20),

954 
	mSCC_I2C1
 = 
_REG_BIT
(0x60, 21),

955 
	mSCC_I2C2
 = 
_REG_BIT
(0x60, 22),

956 
	mSCC_I2C3
 = 
_REG_BIT
(0x60, 23),

957 
	mSCC_CAN1
 = 
_REG_BIT
(0x60, 25),

958 
	mSCC_CAN2
 = 
_REG_BIT
(0x60, 26),

959 
	mSCC_PWR
 = 
_REG_BIT
(0x60, 28),

960 
	mSCC_DAC
 = 
_REG_BIT
(0x60, 29),

961 
	mSCC_UART7
 = 
_REG_BIT
(0x60, 30),

962 
	mSCC_UART8
 = 
_REG_BIT
(0x60, 31),

965 
	mSCC_TIM1
 = 
_REG_BIT
(0x64, 0),

966 
	mSCC_TIM8
 = 
_REG_BIT
(0x64, 1),

967 
	mSCC_USART1
 = 
_REG_BIT
(0x64, 4),

968 
	mSCC_USART6
 = 
_REG_BIT
(0x64, 5),

969 
	mSCC_ADC1
 = 
_REG_BIT
(0x64, 8),

970 
	mSCC_ADC2
 = 
_REG_BIT
(0x64, 9),

971 
	mSCC_ADC3
 = 
_REG_BIT
(0x64, 10),

972 
	mSCC_SDIO
 = 
_REG_BIT
(0x64, 11),

973 
	mSCC_SPI1
 = 
_REG_BIT
(0x64, 12),

974 
	mSCC_SPI4
 = 
_REG_BIT
(0x64, 13),

975 
	mSCC_SYSCFG
 = 
_REG_BIT
(0x64, 14),

976 
	mSCC_TIM9
 = 
_REG_BIT
(0x64, 16),

977 
	mSCC_TIM10
 = 
_REG_BIT
(0x64, 17),

978 
	mSCC_TIM11
 = 
_REG_BIT
(0x64, 18),

979 
	mSCC_SPI5
 = 
_REG_BIT
(0x64, 20),

980 
	mSCC_SPI6
 = 
_REG_BIT
(0x64, 21),

981 
	mSCC_SAI1
 = 
_REG_BIT
(0x64, 22),

982 
	mSCC_LTDC
 = 
_REG_BIT
(0x64, 26),

983 
	mSCC_DSI
 = 
_REG_BIT
(0x64, 27),

986 
	ercc_≥rùh_r°
 {

988 
	mRST_GPIOA
 = 
_REG_BIT
(0x10, 0),

989 
	mRST_GPIOB
 = 
_REG_BIT
(0x10, 1),

990 
	mRST_GPIOC
 = 
_REG_BIT
(0x10, 2),

991 
	mRST_GPIOD
 = 
_REG_BIT
(0x10, 3),

992 
	mRST_GPIOE
 = 
_REG_BIT
(0x10, 4),

993 
	mRST_GPIOF
 = 
_REG_BIT
(0x10, 5),

994 
	mRST_GPIOG
 = 
_REG_BIT
(0x10, 6),

995 
	mRST_GPIOH
 = 
_REG_BIT
(0x10, 7),

996 
	mRST_GPIOI
 = 
_REG_BIT
(0x10, 8),

997 
	mRST_GPIOJ
 = 
_REG_BIT
(0x10, 9),

998 
	mRST_GPIOK
 = 
_REG_BIT
(0x10, 10),

999 
	mRST_CRC
 = 
_REG_BIT
(0x10, 12),

1000 
	mRST_DMA1
 = 
_REG_BIT
(0x10, 21),

1001 
	mRST_DMA2
 = 
_REG_BIT
(0x10, 22),

1002 
	mRST_DMA2D
 = 
_REG_BIT
(0x10, 23),

1003 
	mRST_ETHMAC
 = 
_REG_BIT
(0x10, 25),

1004 
	mRST_OTGHS
 = 
_REG_BIT
(0x10, 29),

1007 
	mRST_DCMI
 = 
_REG_BIT
(0x14, 0),

1008 
	mRST_CRYP
 = 
_REG_BIT
(0x14, 4),

1009 
	mRST_HASH
 = 
_REG_BIT
(0x14, 5),

1010 
	mRST_RNG
 = 
_REG_BIT
(0x14, 6),

1011 
	mRST_OTGFS
 = 
_REG_BIT
(0x14, 7),

1014 
	mRST_QSPI
 = 
_REG_BIT
(0x18, 1),

1015 
	mRST_FSMC
 = 
_REG_BIT
(0x18, 0),

1016 
	mRST_FMC
 = 
_REG_BIT
(0x18, 0),

1019 
	mRST_TIM2
 = 
_REG_BIT
(0x20, 0),

1020 
	mRST_TIM3
 = 
_REG_BIT
(0x20, 1),

1021 
	mRST_TIM4
 = 
_REG_BIT
(0x20, 2),

1022 
	mRST_TIM5
 = 
_REG_BIT
(0x20, 3),

1023 
	mRST_TIM6
 = 
_REG_BIT
(0x20, 4),

1024 
	mRST_TIM7
 = 
_REG_BIT
(0x20, 5),

1025 
	mRST_TIM12
 = 
_REG_BIT
(0x20, 6),

1026 
	mRST_TIM13
 = 
_REG_BIT
(0x20, 7),

1027 
	mRST_TIM14
 = 
_REG_BIT
(0x20, 8),

1028 
	mRST_WWDG
 = 
_REG_BIT
(0x20, 11),

1029 
	mRST_SPI2
 = 
_REG_BIT
(0x20, 14),

1030 
	mRST_SPI3
 = 
_REG_BIT
(0x20, 15),

1031 
	mRST_USART2
 = 
_REG_BIT
(0x20, 17),

1032 
	mRST_USART3
 = 
_REG_BIT
(0x20, 18),

1033 
	mRST_UART4
 = 
_REG_BIT
(0x20, 19),

1034 
	mRST_UART5
 = 
_REG_BIT
(0x20, 20),

1035 
	mRST_I2C1
 = 
_REG_BIT
(0x20, 21),

1036 
	mRST_I2C2
 = 
_REG_BIT
(0x20, 22),

1037 
	mRST_I2C3
 = 
_REG_BIT
(0x20, 23),

1038 
	mRST_CAN1
 = 
_REG_BIT
(0x20, 25),

1039 
	mRST_CAN2
 = 
_REG_BIT
(0x20, 26),

1040 
	mRST_PWR
 = 
_REG_BIT
(0x20, 28),

1041 
	mRST_DAC
 = 
_REG_BIT
(0x20, 29),

1042 
	mRST_UART7
 = 
_REG_BIT
(0x20, 30),

1043 
	mRST_UART8
 = 
_REG_BIT
(0x20, 31),

1046 
	mRST_TIM1
 = 
_REG_BIT
(0x24, 0),

1047 
	mRST_TIM8
 = 
_REG_BIT
(0x24, 1),

1048 
	mRST_USART1
 = 
_REG_BIT
(0x24, 4),

1049 
	mRST_USART6
 = 
_REG_BIT
(0x24, 5),

1050 
	mRST_ADC
 = 
_REG_BIT
(0x24, 8),

1051 
	mRST_SDIO
 = 
_REG_BIT
(0x24, 11),

1052 
	mRST_SPI1
 = 
_REG_BIT
(0x24, 12),

1053 
	mRST_SPI4
 = 
_REG_BIT
(0x24, 13),

1054 
	mRST_SYSCFG
 = 
_REG_BIT
(0x24, 14),

1055 
	mRST_TIM9
 = 
_REG_BIT
(0x24, 16),

1056 
	mRST_TIM10
 = 
_REG_BIT
(0x24, 17),

1057 
	mRST_TIM11
 = 
_REG_BIT
(0x24, 18),

1058 
	mRST_SPI5
 = 
_REG_BIT
(0x24, 20),

1059 
	mRST_SPI6
 = 
_REG_BIT
(0x24, 21),

1060 
	mRST_SAI1RST
 = 
_REG_BIT
(0x24, 22),

1061 
	mRST_LTDC
 = 
_REG_BIT
(0x24, 26),

1062 
	mRST_DSI
 = 
_REG_BIT
(0x24, 27),

1065 #unde‡
_REG_BIT


1067 
	~<lib›ícm3/°m32/comm⁄/rcc_comm⁄_Æl.h
>

1069 
BEGIN_DECLS


1071 
rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
);

1072 
rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
);

1073 
rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
);

1074 
rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
);

1075 
rcc_css_öt_˛ór
();

1076 
rcc_css_öt_Êag
();

1077 
rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
);

1078 
rcc_osc_⁄
(
rcc_osc
 
osc
);

1079 
rcc_osc_off
(
rcc_osc
 
osc
);

1080 
rcc_css_íabÀ
();

1081 
rcc_css_dißbÀ
();

1082 
rcc_∂lßi_c⁄fig
(
uöt16_t
 
n
, uöt16_à
p
, uöt16_à
q
, uöt16_à
r
);

1083 
rcc_∂lßi_po°sˇÀrs
(
uöt8_t
 
q
, uöt8_à
r
);

1084 
rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
);

1085 
rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
);

1086 
rcc_£t_µª2
(
uöt32_t
 
µª2
);

1087 
rcc_£t_µª1
(
uöt32_t
 
µª1
);

1088 
rcc_£t_h¥e
(
uöt32_t
 
h¥e
);

1089 
rcc_£t_π˝ª
(
uöt32_t
 
π˝ª
);

1090 
rcc_£t_maö_∂l_hsi
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

1091 
uöt32_t
 
∂lq
, uöt32_à
∂Ã
);

1092 
rcc_£t_maö_∂l_h£
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

1093 
uöt32_t
 
∂lq
, uöt32_à
∂Ã
);

1094 
uöt32_t
 
rcc_sy°em_˛ock_sour˚
();

1095 
rcc_˛ock_£tup_h£_3v3
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
);

1097 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f4/rng.h

18 #i‚de‡
LIBOPENCM3_RNG_H


19 
	#LIBOPENCM3_RNG_H


	)

21 
	~<lib›ícm3/°m32/comm⁄/∫g_comm⁄_v1.h
>

	@libopencm3/include/libopencm3/stm32/f4/rtc.h

31 #i‚de‡
LIBOPENCM3_RTC_H


32 
	#LIBOPENCM3_RTC_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/πc_comm⁄_l1f024.h
>

36 
BEGIN_DECLS


38 
πc_íabÀ_wakeup_timî
();

39 
πc_dißbÀ_wakeup_timî
();

40 
πc_íabÀ_wakeup_timî_öãºu±
();

41 
πc_dißbÀ_wakeup_timî_öãºu±
();

43 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f4/spi.h

31 #i‚de‡
LIBOPENCM3_SPI_H


32 
	#LIBOPENCM3_SPI_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_v1_‰f.h
>

	@libopencm3/include/libopencm3/stm32/f4/syscfg.h

36 #i‚de‡
LIBOPENCM3_SYSCFG_H


37 
	#LIBOPENCM3_SYSCFG_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/syscfg_comm⁄_l1f234.h
>

	@libopencm3/include/libopencm3/stm32/f4/timer.h

34 #i‚de‡
LIBOPENCM3_TIMER_H


35 
	#LIBOPENCM3_TIMER_H


	)

37 
	~<lib›ícm3/°m32/comm⁄/timî_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f4/usart.h

31 #i‚de‡
LIBOPENCM3_USART_H


32 
	#LIBOPENCM3_USART_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f7/doc-stm32f7.h

	@libopencm3/include/libopencm3/stm32/f7/flash.h

1 #i‚de‡
LIBOPENCM3_FLASH_H


2 
	#LIBOPENCM3_FLASH_H


	)

62 
	#FLASH_ACR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x00)

	)

63 
	#FLASH_KEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x04)

	)

64 
	#FLASH_OPTKEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x08)

	)

65 
	#FLASH_SR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x0C)

	)

66 
	#FLASH_CR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x10)

	)

67 
	#FLASH_OPTCR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x14)

	)

68 
	#FLASH_OPTCR1
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x18)

	)

72 
	#FLASH_KEYR_KEY1
 0x45670123UL

	)

73 
	#FLASH_KEYR_KEY2
 0xcdef89abUL

	)

74 
	#FLASH_OPTKEYR_KEY1
 0x08192a3bUL

	)

75 
	#FLASH_OPTKEYR_KEY2
 0x4c5d6e7fUL

	)

79 
	#FLASH_ACR_ARTRST
 (1 << 11)

	)

80 
	#FLASH_ACR_ARTEN
 (1 << 9)

	)

81 
	#FLASH_ACR_PRFTEN
 (1 << 8)

	)

83 
	#FLASH_ACR_LATENCY_MASK
 0x0f

	)

87 
	#FLASH_SR_BSY
 (1 << 16)

	)

88 
	#FLASH_SR_ERSERR
 (1 << 7)

	)

89 
	#FLASH_SR_PGPERR
 (1 << 6)

	)

90 
	#FLASH_SR_PGAERR
 (1 << 5)

	)

91 
	#FLASH_SR_WRPERR
 (1 << 4)

	)

92 
	#FLASH_SR_OPERR
 (1 << 1)

	)

93 
	#FLASH_SR_EOP
 (1 << 0)

	)

97 
	#FLASH_CR_LOCK
 (1 << 31)

	)

98 
	#FLASH_CR_ERRIE
 (1 << 25)

	)

99 
	#FLASH_CR_EOPIE
 (1 << 24)

	)

100 
	#FLASH_CR_STRT
 (1 << 16)

	)

102 
	#FLASH_CR_PROGRAM_MASK
 0x3

	)

103 
	#FLASH_CR_PROGRAM_SHIFT
 8

	)

107 
	#FLASH_CR_PROGRAM_X8
 0

	)

108 
	#FLASH_CR_PROGRAM_X16
 1

	)

109 
	#FLASH_CR_PROGRAM_X32
 2

	)

110 
	#FLASH_CR_PROGRAM_X64
 3

	)

113 
	#FLASH_CR_SNB_SHIFT
 3

	)

114 
	#FLASH_CR_SNB_MASK
 0x1f

	)

116 
	#FLASH_CR_MER
 (1 << 2)

	)

117 
	#FLASH_CR_SER
 (1 << 1)

	)

118 
	#FLASH_CR_PG
 (1 << 0)

	)

122 
	#FLASH_OPTCR_IWDG_STOP
 (1 << 31)

	)

123 
	#FLASH_OPTCR_IWDG_STDBY
 (1 << 30)

	)

125 
	#FLASH_OPTCR_NWRP_SHIFT
 16

	)

126 
	#FLASH_OPTCR_NWRP_MASK
 0xff

	)

128 
	#FLASH_OPTCR_RDP_SHIFT
 8

	)

129 
	#FLASH_OPTCR_RDP_MASK
 0xff

	)

131 
	#FLASH_OPTCR_NRST_STDBY
 (1 << 7)

	)

132 
	#FLASH_OPTCR_NRST_STOP
 (1 << 6)

	)

133 
	#FLASH_OPTCR_IWDG_SW
 (1 << 5)

	)

134 
	#FLASH_OPTCR_WWDG_SW
 (1 << 4)

	)

136 
	#FLASH_OPTCR_BOR_LEV_MASK
 3

	)

137 
	#FLASH_OPTCR_BOR_LEV_SHIFT
 2

	)

138 
	#FLASH_OPTCR_BOR_LEV_3
 0x00

	)

139 
	#FLASH_OPTCR_BOR_LEV_2
 0x01

	)

140 
	#FLASH_OPTCR_BOR_LEV_1
 0x02

	)

141 
	#FLASH_OPTCR_BOR_OFF
 0x03

	)

143 
	#FLASH_OPTCR_OPTSTRT
 (1 << 1)

	)

144 
	#FLASH_OPTCR_OPTLOCK
 (1 << 0)

	)

147 
	#FLASH_OPTCR1_BOOT_ADD1_MASK
 0xffff

	)

148 
	#FLASH_OPTCR1_BOOT_ADD1_SHIFT
 16

	)

149 
	#FLASH_OPTCR1_BOOT_ADD0_MASK
 0xffff

	)

150 
	#FLASH_OPTCR1_BOOT_ADD0_SHIFT
 0

	)

154 
BEGIN_DECLS


156 
Êash_£t_ws
(
uöt32_t
 
ws
);

157 
Êash_u∆ock
();

158 
Êash_lock
();

159 
Êash_˛ór_pg≥º_Êag
();

160 
Êash_˛ór_e›_Êag
();

161 
Êash_waô_f‹_œ°_›î©i⁄
();

163 
Êash_u∆ock_›ti⁄_byãs
();

164 
Êash_lock_›ti⁄_byãs
();

165 
Êash_˛ór_î£º_Êag
();

166 
Êash_˛ór_wΩîr_Êag
();

167 
Êash_˛ór_pg´º_Êag
();

168 
Êash_¨t_íabÀ
();

169 
Êash_¨t_dißbÀ
();

170 
Êash_¥e„tch_íabÀ
();

171 
Êash_¥e„tch_dißbÀ
();

172 
Êash_¨t_ª£t
();

173 
Êash_˛ór_°©us_Êags
();

174 
Êash_îa£_Æl_£˘‹s
(
uöt32_t
 
¥ogøm_size
);

175 
Êash_îa£_£˘‹
(
uöt8_t
 
£˘‹
, 
uöt32_t
 
¥ogøm_size
);

176 
Êash_¥ogøm_doubÀ_w‹d
(
uöt32_t
 
addªss
, 
uöt64_t
 
d©a
);

177 
Êash_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
);

178 
Êash_¥ogøm_hÆf_w‹d
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
);

179 
Êash_¥ogøm_byã
(
uöt32_t
 
addªss
, 
uöt8_t
 
d©a
);

180 
Êash_¥ogøm
(
uöt32_t
 
addªss
, 
uöt8_t
 *
d©a
, uöt32_à
Àn
);

181 
Êash_¥ogøm_›ti⁄_byãs
(
uöt32_t
 
d©a
);

183 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f7/gpio.h

31 #i‚de‡
LIBOPENCM3_GPIO_H


32 
	#LIBOPENCM3_GPIO_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_f24.h
>

	@libopencm3/include/libopencm3/stm32/f7/memorymap.h

18 #i‚de‡
LIBOPENCM3_MEMORYMAP_H


19 
	#LIBOPENCM3_MEMORYMAP_H


	)

21 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

26 
	#PERIPH_BASE
 (0x40000000U)

	)

27 
	#PERIPH_BASE_APB1
 (
PERIPH_BASE
 + 0x00000)

	)

28 
	#PERIPH_BASE_APB2
 (
PERIPH_BASE
 + 0x10000)

	)

29 
	#PERIPH_BASE_AHB1
 (
PERIPH_BASE
 + 0x20000)

	)

30 
	#PERIPH_BASE_AHB2
 0x50000000U

	)

31 
	#PERIPH_BASE_AHB3
 0x60000000U

	)

36 
	#TIM2_BASE
 (
PERIPH_BASE_APB1
 + 0x0000)

	)

37 
	#TIM3_BASE
 (
PERIPH_BASE_APB1
 + 0x0400)

	)

38 
	#TIM4_BASE
 (
PERIPH_BASE_APB1
 + 0x0800)

	)

39 
	#TIM5_BASE
 (
PERIPH_BASE_APB1
 + 0x0c00)

	)

40 
	#TIM6_BASE
 (
PERIPH_BASE_APB1
 + 0x1000)

	)

41 
	#TIM7_BASE
 (
PERIPH_BASE_APB1
 + 0x1400)

	)

42 
	#TIM12_BASE
 (
PERIPH_BASE_APB1
 + 0x1800)

	)

43 
	#TIM13_BASE
 (
PERIPH_BASE_APB1
 + 0x1c00)

	)

44 
	#TIM14_BASE
 (
PERIPH_BASE_APB1
 + 0x2000)

	)

45 
	#LPTIM1_BASE
 (
PERIPH_BASE_APB1
 + 0x2400)

	)

46 
	#RTC_BASE
 (
PERIPH_BASE_APB1
 + 0x2800)

	)

47 
	#WWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x2c00)

	)

48 
	#IWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x3000)

	)

50 
	#SPI2_BASE
 (
PERIPH_BASE_APB1
 + 0x3800)

	)

51 
	#SPI3_BASE
 (
PERIPH_BASE_APB1
 + 0x3c00)

	)

52 
	#SPDIF_BASE
 (
PERIPH_BASE_APB1
 + 0x4000)

	)

53 
	#USART2_BASE
 (
PERIPH_BASE_APB1
 + 0x4400)

	)

54 
	#USART3_BASE
 (
PERIPH_BASE_APB1
 + 0x4800)

	)

55 
	#UART4_BASE
 (
PERIPH_BASE_APB1
 + 0x4c00)

	)

56 
	#UART5_BASE
 (
PERIPH_BASE_APB1
 + 0x5000)

	)

57 
	#I2C1_BASE
 (
PERIPH_BASE_APB1
 + 0x5400)

	)

58 
	#I2C2_BASE
 (
PERIPH_BASE_APB1
 + 0x5800)

	)

59 
	#I2C3_BASE
 (
PERIPH_BASE_APB1
 + 0x5C00)

	)

60 
	#I2C4_BASE
 (
PERIPH_BASE_APB1
 + 0x6000)

	)

61 
	#BX_CAN1_BASE
 (
PERIPH_BASE_APB1
 + 0x6400)

	)

62 
	#BX_CAN2_BASE
 (
PERIPH_BASE_APB1
 + 0x6800)

	)

63 
	#CEC_BASE
 (
PERIPH_BASE_APB1
 + 0x6C00)

	)

64 
	#POWER_CONTROL_BASE
 (
PERIPH_BASE_APB1
 + 0x7000)

	)

65 
	#DAC_BASE
 (
PERIPH_BASE_APB1
 + 0x7400)

	)

66 
	#UART7_BASE
 (
PERIPH_BASE_APB1
 + 0x7800)

	)

67 
	#UART8_BASE
 (
PERIPH_BASE_APB1
 + 0x7c00)

	)

71 
	#TIM1_BASE
 (
PERIPH_BASE_APB2
 + 0x0000)

	)

72 
	#TIM8_BASE
 (
PERIPH_BASE_APB2
 + 0x0400)

	)

74 
	#USART1_BASE
 (
PERIPH_BASE_APB2
 + 0x1000)

	)

75 
	#USART6_BASE
 (
PERIPH_BASE_APB2
 + 0x1400)

	)

77 
	#ADC1_BASE
 (
PERIPH_BASE_APB2
 + 0x2000Ë

	)

78 
	#ADC2_BASE
 (
PERIPH_BASE_APB2
 + 0x2100Ë

	)

79 
	#ADC3_BASE
 (
PERIPH_BASE_APB2
 + 0x2200Ë

	)

80 
	#ADC_COMMON_BASE
 (
PERIPH_BASE_APB2
 + 0x2300Ë

	)

82 
	#SDIO_BASE
 (
PERIPH_BASE_APB2
 + 0x2C00Ë

	)

84 
	#SPI1_BASE
 (
PERIPH_BASE_APB2
 + 0x3000)

	)

85 
	#SPI4_BASE
 (
PERIPH_BASE_APB2
 + 0x3400)

	)

86 
	#SYSCFG_BASE
 (
PERIPH_BASE_APB2
 + 0x3800)

	)

87 
	#EXTI_BASE
 (
PERIPH_BASE_APB2
 + 0x3C00)

	)

88 
	#TIM9_BASE
 (
PERIPH_BASE_APB2
 + 0x4000)

	)

89 
	#TIM10_BASE
 (
PERIPH_BASE_APB2
 + 0x4400)

	)

90 
	#TIM11_BASE
 (
PERIPH_BASE_APB2
 + 0x4800)

	)

92 
	#SPI5_BASE
 (
PERIPH_BASE_APB2
 + 0x5000)

	)

93 
	#SPI6_BASE
 (
PERIPH_BASE_APB2
 + 0x5400)

	)

94 
	#SAI1_BASE
 (
PERIPH_BASE_APB2
 + 0x5800)

	)

95 
	#SAI2_BASE
 (
PERIPH_BASE_APB2
 + 0x5C00)

	)

96 
	#LCD_TFT_BASE
 (
PERIPH_BASE_APB2
 + 0x6800)

	)

100 
	#GPIO_PORT_A_BASE
 (
PERIPH_BASE_AHB1
 + 0x0000)

	)

101 
	#GPIO_PORT_B_BASE
 (
PERIPH_BASE_AHB1
 + 0x0400)

	)

102 
	#GPIO_PORT_C_BASE
 (
PERIPH_BASE_AHB1
 + 0x0800)

	)

103 
	#GPIO_PORT_D_BASE
 (
PERIPH_BASE_AHB1
 + 0x0C00)

	)

104 
	#GPIO_PORT_E_BASE
 (
PERIPH_BASE_AHB1
 + 0x1000)

	)

105 
	#GPIO_PORT_F_BASE
 (
PERIPH_BASE_AHB1
 + 0x1400)

	)

106 
	#GPIO_PORT_G_BASE
 (
PERIPH_BASE_AHB1
 + 0x1800)

	)

107 
	#GPIO_PORT_H_BASE
 (
PERIPH_BASE_AHB1
 + 0x1C00)

	)

108 
	#GPIO_PORT_I_BASE
 (
PERIPH_BASE_AHB1
 + 0x2000)

	)

109 
	#GPIO_PORT_J_BASE
 (
PERIPH_BASE_AHB1
 + 0x2400)

	)

110 
	#GPIO_PORT_K_BASE
 (
PERIPH_BASE_AHB1
 + 0x2800)

	)

112 
	#CRC_BASE
 (
PERIPH_BASE_AHB1
 + 0x3000)

	)

114 
	#RCC_BASE
 (
PERIPH_BASE_AHB1
 + 0x3800)

	)

115 
	#FLASH_MEM_INTERFACE_BASE
 (
PERIPH_BASE_AHB1
 + 0x3C00)

	)

116 
	#BKPSRAM_BASE
 (
PERIPH_BASE_AHB1
 + 0x4000)

	)

118 
	#DMA1_BASE
 (
PERIPH_BASE_AHB1
 + 0x6000)

	)

119 
	#DMA2_BASE
 (
PERIPH_BASE_AHB1
 + 0x6400)

	)

121 
	#ETHERNET_BASE
 (
PERIPH_BASE_AHB1
 + 0x8000)

	)

123 
	#DMA2D_BASE
 (
PERIPH_BASE_AHB1
 + 0xB000)

	)

125 
	#USB_OTG_HS_BASE
 (
PERIPH_BASE_AHB1
 + 0x20000)

	)

129 
	#USB_OTG_FS_BASE
 (
PERIPH_BASE_AHB2
 + 0x00000)

	)

131 
	#DCMI_BASE
 (
PERIPH_BASE_AHB2
 + 0x50000)

	)

133 
	#CRYP_BASE
 (
PERIPH_BASE_AHB2
 + 0x60000)

	)

134 
	#HASH_BASE
 (
PERIPH_BASE_AHB2
 + 0x60400)

	)

136 
	#RNG_BASE
 (
PERIPH_BASE_AHB2
 + 0x60800)

	)

140 
	#FMC1_BASE
 (
PERIPH_BASE_AHB3
 + 0x00000000U)

	)

141 
	#FMC2_BASE
 (
PERIPH_BASE_AHB3
 + 0x10000000U)

	)

142 
	#FMC3_BASE
 (
PERIPH_BASE_AHB3
 + 0x20000000U)

	)

143 
	#QSPI_BASE
 (
PERIPH_BASE_AHB3
 + 0x30000000U)

	)

144 
	#FMCC_BASE
 (
PERIPH_BASE_AHB3
 + 0x40000000U)

	)

145 
	#QSPIC_BASE
 (
PERIPH_BASE_AHB3
 + 0x40001000U)

	)

146 
	#FMC5_BASE
 (
PERIPH_BASE_AHB3
 + 0x60000000U)

	)

147 
	#FMC6_BASE
 (
PERIPH_BASE_AHB3
 + 0x70000000U)

	)

150 
	#DBGMCU_BASE
 (
PPBI_BASE
 + 0x00042000)

	)

153 
	#DESIG_FLASH_SIZE_BASE
 (0x1FF0F422U)

	)

154 
	#DESIG_UNIQUE_ID_BASE
 (0x1FF0F420U)

	)

155 
	#DESIG_UNIQUE_ID0
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
)

	)

156 
	#DESIG_UNIQUE_ID1
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 4)

	)

157 
	#DESIG_UNIQUE_ID2
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 8)

	)

160 
	#ST_VREFINT_CAL
 
	`MMIO16
(0x1FF07A4A)

	)

161 
	#ST_TSENSE_CAL1_30C
 
	`MMIO16
(0x1FF07A4C)

	)

162 
	#ST_TSENSE_CAL2_110C
 
	`MMIO16
(0x1FF07A4E)

	)

	@libopencm3/include/libopencm3/stm32/f7/nvic.h

6 #i‚de‡
LIBOPENCM3_STM32_F7_NVIC_H


7 
	#LIBOPENCM3_STM32_F7_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_NVIC_WWDG_IRQ
 0

	)

17 
	#NVIC_PVD_IRQ
 1

	)

18 
	#NVIC_TAMP_STAMP_IRQ
 2

	)

19 
	#NVIC_RTC_WKUP_IRQ
 3

	)

20 
	#NVIC_FLASH_IRQ
 4

	)

21 
	#NVIC_RCC_IRQ
 5

	)

22 
	#NVIC_EXTI0_IRQ
 6

	)

23 
	#NVIC_EXTI1_IRQ
 7

	)

24 
	#NVIC_EXTI2_IRQ
 8

	)

25 
	#NVIC_EXTI3_IRQ
 9

	)

26 
	#NVIC_EXTI4_IRQ
 10

	)

27 
	#NVIC_DMA1_STREAM0_IRQ
 11

	)

28 
	#NVIC_DMA1_STREAM1_IRQ
 12

	)

29 
	#NVIC_DMA1_STREAM2_IRQ
 13

	)

30 
	#NVIC_DMA1_STREAM3_IRQ
 14

	)

31 
	#NVIC_DMA1_STREAM4_IRQ
 15

	)

32 
	#NVIC_DMA1_STREAM5_IRQ
 16

	)

33 
	#NVIC_DMA1_STREAM6_IRQ
 17

	)

34 
	#NVIC_ADC_IRQ
 18

	)

35 
	#NVIC_CAN1_TX_IRQ
 19

	)

36 
	#NVIC_CAN1_RX0_IRQ
 20

	)

37 
	#NVIC_CAN1_RX1_IRQ
 21

	)

38 
	#NVIC_CAN1_SCE_IRQ
 22

	)

39 
	#NVIC_EXTI9_5_IRQ
 23

	)

40 
	#NVIC_TIM1_BRK_TIM9_IRQ
 24

	)

41 
	#NVIC_TIM1_UP_TIM10_IRQ
 25

	)

42 
	#NVIC_TIM1_TRG_COM_TIM11_IRQ
 26

	)

43 
	#NVIC_TIM1_CC_IRQ
 27

	)

44 
	#NVIC_TIM2_IRQ
 28

	)

45 
	#NVIC_TIM3_IRQ
 29

	)

46 
	#NVIC_TIM4_IRQ
 30

	)

47 
	#NVIC_I2C1_EV_IRQ
 31

	)

48 
	#NVIC_I2C1_ER_IRQ
 32

	)

49 
	#NVIC_I2C2_EV_IRQ
 33

	)

50 
	#NVIC_I2C2_ER_IRQ
 34

	)

51 
	#NVIC_SPI1_IRQ
 35

	)

52 
	#NVIC_SPI2_IRQ
 36

	)

53 
	#NVIC_USART1_IRQ
 37

	)

54 
	#NVIC_USART2_IRQ
 38

	)

55 
	#NVIC_USART3_IRQ
 39

	)

56 
	#NVIC_EXTI15_10_IRQ
 40

	)

57 
	#NVIC_RTC_ALARM_IRQ
 41

	)

58 
	#NVIC_USB_FS_WKUP_IRQ
 42

	)

59 
	#NVIC_TIM8_BRK_TIM12_IRQ
 43

	)

60 
	#NVIC_TIM8_UP_TIM13_IRQ
 44

	)

61 
	#NVIC_TIM8_TRG_COM_TIM14_IRQ
 45

	)

62 
	#NVIC_TIM8_CC_IRQ
 46

	)

63 
	#NVIC_DMA1_STREAM7_IRQ
 47

	)

64 
	#NVIC_FSMC_IRQ
 48

	)

65 
	#NVIC_SDMMC1_IRQ
 49

	)

66 
	#NVIC_TIM5_IRQ
 50

	)

67 
	#NVIC_SPI3_IRQ
 51

	)

68 
	#NVIC_UART4_IRQ
 52

	)

69 
	#NVIC_UART5_IRQ
 53

	)

70 
	#NVIC_TIM6_DAC_IRQ
 54

	)

71 
	#NVIC_TIM7_IRQ
 55

	)

72 
	#NVIC_DMA2_STREAM0_IRQ
 56

	)

73 
	#NVIC_DMA2_STREAM1_IRQ
 57

	)

74 
	#NVIC_DMA2_STREAM2_IRQ
 58

	)

75 
	#NVIC_DMA2_STREAM3_IRQ
 59

	)

76 
	#NVIC_DMA2_STREAM4_IRQ
 60

	)

77 
	#NVIC_ETH_IRQ
 61

	)

78 
	#NVIC_ETH_WKUP_IRQ
 62

	)

79 
	#NVIC_CAN2_TX_IRQ
 63

	)

80 
	#NVIC_CAN2_RX0_IRQ
 64

	)

81 
	#NVIC_CAN2_RX1_IRQ
 65

	)

82 
	#NVIC_CAN2_SCE_IRQ
 66

	)

83 
	#NVIC_OTG_FS_IRQ
 67

	)

84 
	#NVIC_DMA2_STREAM5_IRQ
 68

	)

85 
	#NVIC_DMA2_STREAM6_IRQ
 69

	)

86 
	#NVIC_DMA2_STREAM7_IRQ
 70

	)

87 
	#NVIC_USART6_IRQ
 71

	)

88 
	#NVIC_I2C3_EV_IRQ
 72

	)

89 
	#NVIC_I2C3_ER_IRQ
 73

	)

90 
	#NVIC_OTG_HS_EP1_OUT_IRQ
 74

	)

91 
	#NVIC_OTG_HS_EP1_IN_IRQ
 75

	)

92 
	#NVIC_OTG_HS_WKUP_IRQ
 76

	)

93 
	#NVIC_OTG_HS_IRQ
 77

	)

94 
	#NVIC_DCMI_IRQ
 78

	)

95 
	#NVIC_CRYP_IRQ
 79

	)

96 
	#NVIC_HASH_RNG_IRQ
 80

	)

97 
	#NVIC_FPU_IRQ
 81

	)

98 
	#NVIC_UART7_IRQ
 82

	)

99 
	#NVIC_UART8_IRQ
 83

	)

100 
	#NVIC_SPI4_IRQ
 84

	)

101 
	#NVIC_SPI5_IRQ
 85

	)

102 
	#NVIC_SPI6_IRQ
 86

	)

103 
	#NVIC_SAI1_IRQ
 87

	)

104 
	#NVIC_LCD_TFT_IRQ
 88

	)

105 
	#NVIC_LCD_TFT_ERR_IRQ
 89

	)

106 
	#NVIC_DMA2D_IRQ
 90

	)

107 
	#NVIC_SAI2_IRQ
 91

	)

108 
	#NVIC_QUADSPI_IRQ
 92

	)

109 
	#NVIC_I2C4_EV_IRQ
 93

	)

110 
	#NVIC_I2C4_ER_IRQ
 94

	)

111 
	#NVIC_SPDIFRX_IRQ
 95

	)

113 
	#NVIC_IRQ_COUNT
 96

	)

122 
BEGIN_DECLS


124 
nvic_wwdg_i§
();

125 
pvd_i§
();

126 
èmp_°amp_i§
();

127 
πc_wkup_i§
();

128 
Êash_i§
();

129 
rcc_i§
();

130 
exti0_i§
();

131 
exti1_i§
();

132 
exti2_i§
();

133 
exti3_i§
();

134 
exti4_i§
();

135 
dma1_°ªam0_i§
();

136 
dma1_°ªam1_i§
();

137 
dma1_°ªam2_i§
();

138 
dma1_°ªam3_i§
();

139 
dma1_°ªam4_i§
();

140 
dma1_°ªam5_i§
();

141 
dma1_°ªam6_i§
();

142 
adc_i§
();

143 
ˇn1_tx_i§
();

144 
ˇn1_rx0_i§
();

145 
ˇn1_rx1_i§
();

146 
ˇn1_s˚_i§
();

147 
exti9_5_i§
();

148 
tim1_brk_tim9_i§
();

149 
tim1_up_tim10_i§
();

150 
tim1_åg_com_tim11_i§
();

151 
tim1_cc_i§
();

152 
tim2_i§
();

153 
tim3_i§
();

154 
tim4_i§
();

155 
i2c1_ev_i§
();

156 
i2c1_î_i§
();

157 
i2c2_ev_i§
();

158 
i2c2_î_i§
();

159 
•i1_i§
();

160 
•i2_i§
();

161 
ußπ1_i§
();

162 
ußπ2_i§
();

163 
ußπ3_i§
();

164 
exti15_10_i§
();

165 
πc_Æ¨m_i§
();

166 
usb_fs_wkup_i§
();

167 
tim8_brk_tim12_i§
();

168 
tim8_up_tim13_i§
();

169 
tim8_åg_com_tim14_i§
();

170 
tim8_cc_i§
();

171 
dma1_°ªam7_i§
();

172 
fsmc_i§
();

173 
sdmmc1_i§
();

174 
tim5_i§
();

175 
•i3_i§
();

176 
u¨t4_i§
();

177 
u¨t5_i§
();

178 
tim6_dac_i§
();

179 
tim7_i§
();

180 
dma2_°ªam0_i§
();

181 
dma2_°ªam1_i§
();

182 
dma2_°ªam2_i§
();

183 
dma2_°ªam3_i§
();

184 
dma2_°ªam4_i§
();

185 
ëh_i§
();

186 
ëh_wkup_i§
();

187 
ˇn2_tx_i§
();

188 
ˇn2_rx0_i§
();

189 
ˇn2_rx1_i§
();

190 
ˇn2_s˚_i§
();

191 
Ÿg_fs_i§
();

192 
dma2_°ªam5_i§
();

193 
dma2_°ªam6_i§
();

194 
dma2_°ªam7_i§
();

195 
ußπ6_i§
();

196 
i2c3_ev_i§
();

197 
i2c3_î_i§
();

198 
Ÿg_hs_ï1_out_i§
();

199 
Ÿg_hs_ï1_ö_i§
();

200 
Ÿg_hs_wkup_i§
();

201 
Ÿg_hs_i§
();

202 
dcmi_i§
();

203 
¸yp_i§
();

204 
hash_∫g_i§
();

205 
Âu_i§
();

206 
u¨t7_i§
();

207 
u¨t8_i§
();

208 
•i4_i§
();

209 
•i5_i§
();

210 
•i6_i§
();

211 
ßi1_i§
();

212 
lcd_t·_i§
();

213 
lcd_t·_îr_i§
();

214 
dma2d_i§
();

215 
ßi2_i§
();

216 
quad•i_i§
();

217 
i2c4_ev_i§
();

218 
i2c4_î_i§
();

219 
•di‰x_i§
();

221 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f7/pwr.h

34 #i‚de‡
LIBOPENCM3_PWR_H


35 
	#LIBOPENCM3_PWR_H


	)

43 
	#PWR_CR1
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x00)

	)

46 
	#PWR_CSR1
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x04)

	)

49 
	#PWR_CR2
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x08)

	)

52 
	#PWR_CSR2
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x0c)

	)

62 
	#PWR_CR1_UDEN_LSB
 18

	)

67 
	#PWR_CR1_UDEN_DISABLED
 (0x0 << 
PWR_CR1_UDEN_LSB
)

	)

68 
	#PWR_CR1_UDEN_ENABLED
 (0x3 << 
PWR_CR1_UDEN_LSB
)

	)

70 
	#PWR_CR1_UDEN_MASK
 (0x3 << 
PWR_CR1_UDEN_LSB
)

	)

73 
	#PWR_CR1_ODSWEN
 (1 << 17)

	)

76 
	#PWR_CR1_ODEN
 (1 << 16)

	)

79 
	#PWR_CR1_VOS_LSB
 14

	)

84 
	#PWR_CR1_VOS_SCALE_3
 (0x1 << 
PWR_CR1_VOS_LSB
)

	)

85 
	#PWR_CR1_VOS_SCALE_2
 (0x2 << 
PWR_CR1_VOS_LSB
)

	)

86 
	#PWR_CR1_VOS_SCALE_1
 (0x3 << 
PWR_CR1_VOS_LSB
)

	)

88 
	#PWR_CR1_VOS_MASK
 (0x3 << 
PWR_CR1_VOS_LSB
)

	)

91 
	#PWR_CR1_ADCDC1
 (1 << 13)

	)

96 
	#PWR_CR1_MRUDS
 (1 << 11)

	)

99 
	#PWR_CR1_LPUDS
 (1 << 10)

	)

102 
	#PWR_CR1_FPDS
 (1 << 9)

	)

105 
	#PWR_CR1_DBP
 (1 << 8)

	)

108 
	#PWR_CR1_PLS_LSB
 5

	)

113 
	#PWR_CR1_PLS_2V0
 (0x0 << 
PWR_CR_PLS_LSB
)

	)

114 
	#PWR_CR1_PLS_2V1
 (0x1 << 
PWR_CR_PLS_LSB
)

	)

115 
	#PWR_CR1_PLS_2V3
 (0x2 << 
PWR_CR_PLS_LSB
)

	)

116 
	#PWR_CR1_PLS_2V5
 (0x3 << 
PWR_CR_PLS_LSB
)

	)

117 
	#PWR_CR1_PLS_2V6
 (0x4 << 
PWR_CR_PLS_LSB
)

	)

118 
	#PWR_CR1_PLS_2V7
 (0x5 << 
PWR_CR_PLS_LSB
)

	)

119 
	#PWR_CR1_PLS_2V8
 (0x6 << 
PWR_CR_PLS_LSB
)

	)

120 
	#PWR_CR1_PLS_2V9
 (0x7 << 
PWR_CR_PLS_LSB
)

	)

122 
	#PWR_CR1_PLS_MASK
 (0x7 << 
PWR_CR_PLS_LSB
)

	)

125 
	#PWR_CR1_PVDE
 (1 << 4)

	)

128 
	#PWR_CR1_CSBF
 (1 << 3)

	)

133 
	#PWR_CR1_PDDS
 (1 << 1)

	)

136 
	#PWR_CR1_LPDS
 (1 << 0)

	)

146 
	#PWR_CSR1_UDRDY_LSB
 18

	)

151 
	#PWR_CSR1_UDRDY_DISABLED
 (0x0 << 
PWR_CSR1_UDRDY_LSB
)

	)

152 
	#PWR_CSR1_UDRDY_ACTIVATED
 (0x3 << 
PWR_CSR1_UDRDY_LSB
)

	)

154 
	#PWR_CSR1_UDRDY_MASK
 (0x3 << 
PWR_CSR1_UDRDY_LSB
)

	)

157 
	#PWR_CSR1_ODSWRDY
 (1 << 17)

	)

160 
	#PWR_CSR1_ODRDY
 (1 << 16)

	)

165 
	#PWR_CSR1_VOSRDY
 (1 << 14)

	)

170 
	#PWR_CSR1_BRE
 (1 << 9)

	)

173 
	#PWR_CSR1_EIWUP
 (1 << 8)

	)

178 
	#PWR_CSR1_BRR
 (1 << 3)

	)

181 
	#PWR_CSR1_PVDO
 (1 << 2)

	)

184 
	#PWR_CSR1_SBF
 (1 << 1)

	)

187 
	#PWR_CSR1_WUIF
 (1 << 0)

	)

197 
	#PWR_CR2_WUPP6
 (1 << 13)

	)

200 
	#PWR_CR2_WUPP5
 (1 << 12)

	)

203 
	#PWR_CR2_WUPP4
 (1 << 11)

	)

206 
	#PWR_CR2_WUPP3
 (1 << 10)

	)

209 
	#PWR_CR2_WUPP2
 (1 << 9)

	)

212 
	#PWR_CR2_WUPP1
 (1 << 8)

	)

217 
	#PWR_CR2_CWUPF6
 (1 << 5)

	)

220 
	#PWR_CR2_CWUPF5
 (1 << 4)

	)

223 
	#PWR_CR2_CWUPF4
 (1 << 3)

	)

226 
	#PWR_CR2_CWUPF3
 (1 << 2)

	)

229 
	#PWR_CR2_CWUPF2
 (1 << 1)

	)

232 
	#PWR_CR2_CWUPF1
 (1 << 0)

	)

242 
	#PWR_CSR2_EWUP6
 (1 << 13)

	)

245 
	#PWR_CSR2_EWUP5
 (1 << 12)

	)

248 
	#PWR_CSR2_EWUP4
 (1 << 11)

	)

251 
	#PWR_CSR2_EWUP3
 (1 << 10)

	)

254 
	#PWR_CSR2_EWUP2
 (1 << 19)

	)

257 
	#PWR_CSR2_EWUP1
 (1 << 18)

	)

262 
	#PWR_CSR2_WUPF6
 (1 << 5)

	)

265 
	#PWR_CSR2_WUPF5
 (1 << 4)

	)

268 
	#PWR_CSR2_WUPF4
 (1 << 3)

	)

271 
	#PWR_CSR2_WUPF3
 (1 << 2)

	)

274 
	#PWR_CSR2_WUPF2
 (1 << 1)

	)

277 
	#PWR_CSR2_WUPF1
 (1 << 0)

	)

281 
	epwr_vos_sˇÀ
 {

282 
	mPWR_SCALE1
,

283 
	mPWR_SCALE2
,

284 
	mPWR_SCALE3
,

287 
BEGIN_DECLS


289 
pwr_£t_vos_sˇÀ
(
pwr_vos_sˇÀ
 
sˇÀ
);

290 
pwr_íabÀ_ovîdrive
();

291 
pwr_dißbÀ_ovîdrive
();

293 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f7/rcc.h

36 #i‚de‡
LIBOPENCM3_RCC_H


37 
	#LIBOPENCM3_RCC_H


	)

39 
	~<lib›ícm3/°m32/f7/pwr.h
>

43 
	#RCC_CR
 
	`MMIO32
(
RCC_BASE
 + 0x00)

	)

44 
	#RCC_PLLCFGR
 
	`MMIO32
(
RCC_BASE
 + 0x04)

	)

45 
	#RCC_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x08)

	)

46 
	#RCC_CIR
 
	`MMIO32
(
RCC_BASE
 + 0x0c)

	)

47 
	#RCC_AHB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x10)

	)

48 
	#RCC_AHB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x14)

	)

49 
	#RCC_AHB3RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x18)

	)

50 
	#RCC_APB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x20)

	)

51 
	#RCC_APB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x24)

	)

52 
	#RCC_AHB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x30)

	)

53 
	#RCC_AHB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x34)

	)

54 
	#RCC_AHB3ENR
 
	`MMIO32
(
RCC_BASE
 + 0x38)

	)

55 
	#RCC_APB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x40)

	)

56 
	#RCC_APB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x44)

	)

57 
	#RCC_AHB1LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x50)

	)

58 
	#RCC_AHB2LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x54)

	)

59 
	#RCC_AHB3LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x58)

	)

60 
	#RCC_APB1LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x60)

	)

61 
	#RCC_APB2LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x64)

	)

62 
	#RCC_BDCR
 
	`MMIO32
(
RCC_BASE
 + 0x70)

	)

63 
	#RCC_CSR
 
	`MMIO32
(
RCC_BASE
 + 0x74)

	)

64 
	#RCC_SSCGR
 
	`MMIO32
(
RCC_BASE
 + 0x80)

	)

65 
	#RCC_PLLI2SCFGR
 
	`MMIO32
(
RCC_BASE
 + 0x84)

	)

66 
	#RCC_PLLSAICFGR
 
	`MMIO32
(
RCC_BASE
 + 0x88)

	)

67 
	#RCC_DCKCFGR1
 
	`MMIO32
(
RCC_BASE
 + 0x8C)

	)

68 
	#RCC_DCKCFGR2
 
	`MMIO32
(
RCC_BASE
 + 0x90)

	)

72 
	#RCC_CR_PLLSAIRDY
 (1 << 29)

	)

73 
	#RCC_CR_PLLSAION
 (1 << 28)

	)

74 
	#RCC_CR_PLLI2SRDY
 (1 << 27)

	)

75 
	#RCC_CR_PLLI2SON
 (1 << 26)

	)

76 
	#RCC_CR_PLLRDY
 (1 << 25)

	)

77 
	#RCC_CR_PLLON
 (1 << 24)

	)

78 
	#RCC_CR_CSSON
 (1 << 19)

	)

79 
	#RCC_CR_HSEBYP
 (1 << 18)

	)

80 
	#RCC_CR_HSERDY
 (1 << 17)

	)

81 
	#RCC_CR_HSEON
 (1 << 16)

	)

82 
	#RCC_CR_HSICAL_MASK
 0xff

	)

83 
	#RCC_CR_HSICAL_SHIFT
 8

	)

84 
	#RCC_CR_HSITRIM_MASK
 0x1f

	)

85 
	#RCC_CR_HSITRIM_SHIFT
 3

	)

86 
	#RCC_CR_HSIRDY
 (1 << 1)

	)

87 
	#RCC_CR_HSION
 (1 << 0)

	)

91 
	#RCC_PLLCFGR_PLLQ_MASK
 0xf

	)

92 
	#RCC_PLLCFGR_PLLQ_SHIFT
 24

	)

93 
	#RCC_PLLCFGR_PLLSRC
 (1 << 22)

	)

94 
	#RCC_PLLCFGR_PLLP_MASK
 0x3

	)

95 
	#RCC_PLLCFGR_PLLP_SHIFT
 16

	)

96 
	#RCC_PLLCFGR_PLLN_MASK
 0x1ff

	)

97 
	#RCC_PLLCFGR_PLLN_SHIFT
 6

	)

98 
	#RCC_PLLCFGR_PLLM_MASK
 0x3f

	)

99 
	#RCC_PLLCFGR_PLLM_SHIFT
 0

	)

104 
	#RCC_CFGR_MCO2_MASK
 0x3

	)

105 
	#RCC_CFGR_MCO2_SHIFT
 30

	)

106 
	#RCC_CFGR_MCO2_SYSCLK
 0x0

	)

107 
	#RCC_CFGR_MCO2_PLLI2S
 0x1

	)

108 
	#RCC_CFGR_MCO2_HSE
 0x2

	)

109 
	#RCC_CFGR_MCO2_PLL
 0x3

	)

112 
	#RCC_CFGR_MCOPRE_MASK
 0x7

	)

113 
	#RCC_CFGR_MCO2PRE_SHIFT
 27

	)

114 
	#RCC_CFGR_MCO1PRE_SHIFT
 24

	)

115 
	#RCC_CFGR_MCOPRE_DIV_NONE
 0x0

	)

116 
	#RCC_CFGR_MCOPRE_DIV_2
 0x4

	)

117 
	#RCC_CFGR_MCOPRE_DIV_3
 0x5

	)

118 
	#RCC_CFGR_MCOPRE_DIV_4
 0x6

	)

119 
	#RCC_CFGR_MCOPRE_DIV_5
 0x7

	)

122 
	#RCC_CFGR_I2SSRC
 (1 << 23)

	)

125 
	#RCC_CFGR_MCO1_MASK
 0x3

	)

126 
	#RCC_CFGR_MCO1_SHIFT
 21

	)

127 
	#RCC_CFGR_MCO1_HSI
 0x0

	)

128 
	#RCC_CFGR_MCO1_LSE
 0x1

	)

129 
	#RCC_CFGR_MCO1_HSE
 0x2

	)

130 
	#RCC_CFGR_MCO1_PLL
 0x3

	)

131 
	#RCC_CFGR_MCO_SHIFT
 
RCC_CFGR_MCO1_SHIFT


	)

132 
	#RCC_CFGR_MCO_MASK
 
RCC_CFGR_MCO1_MASK


	)

135 
	#RCC_CFGR_RTCPRE_SHIFT
 16

	)

136 
	#RCC_CFGR_RTCPRE_MASK
 0x1f

	)

139 
	#RCC_CFGR_PPRE2_SHIFT
 13

	)

140 
	#RCC_CFGR_PPRE2_MASK
 0x7

	)

141 
	#RCC_CFGR_PPRE1_SHIFT
 10

	)

142 
	#RCC_CFGR_PPRE1_MASK
 0x7

	)

143 
	#RCC_CFGR_PPRE_DIV_NONE
 0x0

	)

144 
	#RCC_CFGR_PPRE_DIV_2
 0x4

	)

145 
	#RCC_CFGR_PPRE_DIV_4
 0x5

	)

146 
	#RCC_CFGR_PPRE_DIV_8
 0x6

	)

147 
	#RCC_CFGR_PPRE_DIV_16
 0x7

	)

150 
	#RCC_CFGR_HPRE_SHIFT
 4

	)

151 
	#RCC_CFGR_HPRE_MASK
 0xf

	)

152 
	#RCC_CFGR_HPRE_DIV_NONE
 0x0

	)

153 
	#RCC_CFGR_HPRE_DIV_2
 (0x8 + 0)

	)

154 
	#RCC_CFGR_HPRE_DIV_4
 (0x8 + 1)

	)

155 
	#RCC_CFGR_HPRE_DIV_8
 (0x8 + 2)

	)

156 
	#RCC_CFGR_HPRE_DIV_16
 (0x8 + 3)

	)

157 
	#RCC_CFGR_HPRE_DIV_64
 (0x8 + 4)

	)

158 
	#RCC_CFGR_HPRE_DIV_128
 (0x8 + 5)

	)

159 
	#RCC_CFGR_HPRE_DIV_256
 (0x8 + 6)

	)

160 
	#RCC_CFGR_HPRE_DIV_512
 (0x8 + 7)

	)

163 
	#RCC_CFGR_SWS_SHIFT
 2

	)

164 
	#RCC_CFGR_SWS_MASK
 0x3

	)

165 
	#RCC_CFGR_SWS_HSI
 0x0

	)

166 
	#RCC_CFGR_SWS_HSE
 0x1

	)

167 
	#RCC_CFGR_SWS_PLL
 0x2

	)

170 
	#RCC_CFGR_SW_SHIFT
 0

	)

171 
	#RCC_CFGR_SW_MASK
 0x3

	)

172 
	#RCC_CFGR_SW_HSI
 0x0

	)

173 
	#RCC_CFGR_SW_HSE
 0x1

	)

174 
	#RCC_CFGR_SW_PLL
 0x2

	)

179 
	#RCC_CIR_CSSC
 (1 << 23)

	)

182 
	#RCC_CIR_PLLSAIRDYC
 (1 << 22)

	)

183 
	#RCC_CIR_PLLI2SRDYC
 (1 << 21)

	)

184 
	#RCC_CIR_PLLRDYC
 (1 << 20)

	)

185 
	#RCC_CIR_HSERDYC
 (1 << 19)

	)

186 
	#RCC_CIR_HSIRDYC
 (1 << 18)

	)

187 
	#RCC_CIR_LSERDYC
 (1 << 17)

	)

188 
	#RCC_CIR_LSIRDYC
 (1 << 16)

	)

191 
	#RCC_CIR_PLLSAIRDYIE
 (1 << 14)

	)

192 
	#RCC_CIR_PLLI2SRDYIE
 (1 << 13)

	)

193 
	#RCC_CIR_PLLRDYIE
 (1 << 12)

	)

194 
	#RCC_CIR_HSERDYIE
 (1 << 11)

	)

195 
	#RCC_CIR_HSIRDYIE
 (1 << 10)

	)

196 
	#RCC_CIR_LSERDYIE
 (1 << 9)

	)

197 
	#RCC_CIR_LSIRDYIE
 (1 << 8)

	)

200 
	#RCC_CIR_CSSF
 (1 << 7)

	)

203 
	#RCC_CIR_PLLSAIRDYF
 (1 << 6)

	)

204 
	#RCC_CIR_PLLI2SRDYF
 (1 << 5)

	)

205 
	#RCC_CIR_PLLRDYF
 (1 << 4)

	)

206 
	#RCC_CIR_HSERDYF
 (1 << 3)

	)

207 
	#RCC_CIR_HSIRDYF
 (1 << 2)

	)

208 
	#RCC_CIR_LSERDYF
 (1 << 1)

	)

209 
	#RCC_CIR_LSIRDYF
 (1 << 0)

	)

213 
	#RCC_AHB1RSTR_OTGHSRST
 (1 << 29)

	)

214 
	#RCC_AHB1RSTR_ETHMACRST
 (1 << 25)

	)

215 
	#RCC_AHB1RSTR_DMA2DRST
 (1 << 23)

	)

216 
	#RCC_AHB1RSTR_DMA2RST
 (1 << 22)

	)

217 
	#RCC_AHB1RSTR_DMA1RST
 (1 << 21)

	)

218 
	#RCC_AHB1RSTR_CRCRST
 (1 << 12)

	)

219 
	#RCC_AHB1RSTR_GPIOKRST
 (1 << 10)

	)

220 
	#RCC_AHB1RSTR_GPIOJRST
 (1 << 9)

	)

221 
	#RCC_AHB1RSTR_GPIOIRST
 (1 << 8)

	)

222 
	#RCC_AHB1RSTR_GPIOHRST
 (1 << 7)

	)

223 
	#RCC_AHB1RSTR_GPIOGRST
 (1 << 6)

	)

224 
	#RCC_AHB1RSTR_GPIOFRST
 (1 << 5)

	)

225 
	#RCC_AHB1RSTR_GPIOERST
 (1 << 4)

	)

226 
	#RCC_AHB1RSTR_GPIODRST
 (1 << 3)

	)

227 
	#RCC_AHB1RSTR_GPIOCRST
 (1 << 2)

	)

228 
	#RCC_AHB1RSTR_GPIOBRST
 (1 << 1)

	)

229 
	#RCC_AHB1RSTR_GPIOARST
 (1 << 0)

	)

233 
	#RCC_AHB2RSTR_OTGFSRST
 (1 << 7)

	)

234 
	#RCC_AHB2RSTR_RNGRST
 (1 << 6)

	)

235 
	#RCC_AHB2RSTR_HASHRST
 (1 << 5)

	)

236 
	#RCC_AHB2RSTR_CRYPRST
 (1 << 4)

	)

237 
	#RCC_AHB2RSTR_DCMIRST
 (1 << 0)

	)

241 
	#RCC_AHB3RSTR_QSPIRST
 (1 << 1)

	)

242 
	#RCC_AHB3RSTR_FSMCRST
 (1 << 0)

	)

246 
	#RCC_APB1RSTR_UART8RST
 (1 << 31)

	)

247 
	#RCC_APB1RSTR_UART7RST
 (1 << 30)

	)

248 
	#RCC_APB1RSTR_DACRST
 (1 << 29)

	)

249 
	#RCC_APB1RSTR_PWRRST
 (1 << 28)

	)

250 
	#RCC_APB1RSTR_CECRST
 (1 << 27)

	)

251 
	#RCC_APB1RSTR_CAN2RST
 (1 << 26)

	)

252 
	#RCC_APB1RSTR_CAN1RST
 (1 << 25)

	)

253 
	#RCC_APB1RSTR_I2C4RST
 (1 << 24)

	)

254 
	#RCC_APB1RSTR_I2C3RST
 (1 << 23)

	)

255 
	#RCC_APB1RSTR_I2C2RST
 (1 << 22)

	)

256 
	#RCC_APB1RSTR_I2C1RST
 (1 << 21)

	)

257 
	#RCC_APB1RSTR_UART5RST
 (1 << 20)

	)

258 
	#RCC_APB1RSTR_UART4RST
 (1 << 19)

	)

259 
	#RCC_APB1RSTR_UART3RST
 (1 << 18)

	)

260 
	#RCC_APB1RSTR_UART2RST
 (1 << 17)

	)

261 
	#RCC_APB1RSTR_SPDIFRXRST
 (1 << 16)

	)

262 
	#RCC_APB1RSTR_SPI3RST
 (1 << 15)

	)

263 
	#RCC_APB1RSTR_SPI2RST
 (1 << 14)

	)

264 
	#RCC_APB1RSTR_WWDGRST
 (1 << 11)

	)

265 
	#RCC_APB1RSTR_LPTIM1RST
 (1 << 9)

	)

266 
	#RCC_APB1RSTR_TIM14RST
 (1 << 8)

	)

267 
	#RCC_APB1RSTR_TIM13RST
 (1 << 7)

	)

268 
	#RCC_APB1RSTR_TIM12RST
 (1 << 6)

	)

269 
	#RCC_APB1RSTR_TIM7RST
 (1 << 5)

	)

270 
	#RCC_APB1RSTR_TIM6RST
 (1 << 4)

	)

271 
	#RCC_APB1RSTR_TIM5RST
 (1 << 3)

	)

272 
	#RCC_APB1RSTR_TIM4RST
 (1 << 2)

	)

273 
	#RCC_APB1RSTR_TIM3RST
 (1 << 1)

	)

274 
	#RCC_APB1RSTR_TIM2RST
 (1 << 0)

	)

278 
	#RCC_APB2RSTR_LTDCRST
 (1 << 26)

	)

279 
	#RCC_APB2RSTR_SAI2RST
 (1 << 23)

	)

280 
	#RCC_APB2RSTR_SAI1RST
 (1 << 22)

	)

281 
	#RCC_APB2RSTR_SPI6RST
 (1 << 21)

	)

282 
	#RCC_APB2RSTR_SPI5RST
 (1 << 20)

	)

283 
	#RCC_APB2RSTR_TIM11RST
 (1 << 18)

	)

284 
	#RCC_APB2RSTR_TIM10RST
 (1 << 17)

	)

285 
	#RCC_APB2RSTR_TIM9RST
 (1 << 16)

	)

286 
	#RCC_APB2RSTR_SYSCFGRST
 (1 << 14)

	)

287 
	#RCC_APB2RSTR_SPI4RST
 (1 << 13)

	)

288 
	#RCC_APB2RSTR_SPI1RST
 (1 << 12)

	)

289 
	#RCC_APB2RSTR_SDMMC1RST
 (1 << 11)

	)

290 
	#RCC_APB2RSTR_ADCRST
 (1 << 8)

	)

291 
	#RCC_APB2RSTR_USART6RST
 (1 << 5)

	)

292 
	#RCC_APB2RSTR_USART1RST
 (1 << 4)

	)

293 
	#RCC_APB2RSTR_TIM8RST
 (1 << 1)

	)

294 
	#RCC_APB2RSTR_TIM1RST
 (1 << 0)

	)

298 
	#RCC_AHB1ENR_OTGHSULPIEN
 (1 << 30)

	)

299 
	#RCC_AHB1ENR_OTGHSEN
 (1 << 29)

	)

300 
	#RCC_AHB1ENR_ETHMACPTPEN
 (1 << 28)

	)

301 
	#RCC_AHB1ENR_ETHMACRXEN
 (1 << 27)

	)

302 
	#RCC_AHB1ENR_ETHMACTXEN
 (1 << 26)

	)

303 
	#RCC_AHB1ENR_ETHMACEN
 (1 << 25)

	)

304 
	#RCC_AHB1ENR_DMA2DEN
 (1 << 23)

	)

305 
	#RCC_AHB1ENR_DMA2EN
 (1 << 22)

	)

306 
	#RCC_AHB1ENR_DMA1EN
 (1 << 21)

	)

307 
	#RCC_AHB1ENR_DTCMRAMEN
 (1 << 20)

	)

308 
	#RCC_AHB1ENR_BKPSRAMEN
 (1 << 18)

	)

309 
	#RCC_AHB1ENR_CRCEN
 (1 << 12)

	)

310 
	#RCC_AHB1ENR_GPIOKEN
 (1 << 10)

	)

311 
	#RCC_AHB1ENR_GPIOJEN
 (1 << 9)

	)

312 
	#RCC_AHB1ENR_GPIOIEN
 (1 << 8)

	)

313 
	#RCC_AHB1ENR_GPIOHEN
 (1 << 7)

	)

314 
	#RCC_AHB1ENR_GPIOGEN
 (1 << 6)

	)

315 
	#RCC_AHB1ENR_GPIOFEN
 (1 << 5)

	)

316 
	#RCC_AHB1ENR_GPIOEEN
 (1 << 4)

	)

317 
	#RCC_AHB1ENR_GPIODEN
 (1 << 3)

	)

318 
	#RCC_AHB1ENR_GPIOCEN
 (1 << 2)

	)

319 
	#RCC_AHB1ENR_GPIOBEN
 (1 << 1)

	)

320 
	#RCC_AHB1ENR_GPIOAEN
 (1 << 0)

	)

324 
	#RCC_AHB2ENR_OTGFSEN
 (1 << 7)

	)

325 
	#RCC_AHB2ENR_RNGEN
 (1 << 6)

	)

326 
	#RCC_AHB2ENR_HASHEN
 (1 << 5)

	)

327 
	#RCC_AHB2ENR_CRYPEN
 (1 << 4)

	)

328 
	#RCC_AHB2ENR_DCMIEN
 (1 << 0)

	)

332 
	#RCC_AHB3ENR_QSPIEN
 (1 << 1)

	)

333 
	#RCC_AHB3ENR_FMCEN
 (1 << 0)

	)

337 
	#RCC_APB1ENR_UART8EN
 (1 << 31)

	)

338 
	#RCC_APB1ENR_UART7EN
 (1 << 30)

	)

339 
	#RCC_APB1ENR_DACEN
 (1 << 29)

	)

340 
	#RCC_APB1ENR_PWREN
 (1 << 28)

	)

341 
	#RCC_APB1ENR_CECEN
 (1 << 27)

	)

342 
	#RCC_APB1ENR_CAN2EN
 (1 << 26)

	)

343 
	#RCC_APB1ENR_CAN1EN
 (1 << 25)

	)

344 
	#RCC_APB1ENR_I2C4EN
 (1 << 24)

	)

345 
	#RCC_APB1ENR_I2C3EN
 (1 << 23)

	)

346 
	#RCC_APB1ENR_I2C2EN
 (1 << 22)

	)

347 
	#RCC_APB1ENR_I2C1EN
 (1 << 21)

	)

348 
	#RCC_APB1ENR_UART5EN
 (1 << 20)

	)

349 
	#RCC_APB1ENR_UART4EN
 (1 << 19)

	)

350 
	#RCC_APB1ENR_USART3EN
 (1 << 18)

	)

351 
	#RCC_APB1ENR_USART2EN
 (1 << 17)

	)

352 
	#RCC_APB1ENR_SPIDIFRXEN
 (1 << 16)

	)

353 
	#RCC_APB1ENR_SPI3EN
 (1 << 15)

	)

354 
	#RCC_APB1ENR_SPI2EN
 (1 << 14)

	)

355 
	#RCC_APB1ENR_WWDGEN
 (1 << 11)

	)

356 
	#RCC_APB1ENR_LPTIM1EN
 (1 << 9)

	)

357 
	#RCC_APB1ENR_TIM14EN
 (1 << 8)

	)

358 
	#RCC_APB1ENR_TIM13EN
 (1 << 7)

	)

359 
	#RCC_APB1ENR_TIM12EN
 (1 << 6)

	)

360 
	#RCC_APB1ENR_TIM7EN
 (1 << 5)

	)

361 
	#RCC_APB1ENR_TIM6EN
 (1 << 4)

	)

362 
	#RCC_APB1ENR_TIM5EN
 (1 << 3)

	)

363 
	#RCC_APB1ENR_TIM4EN
 (1 << 2)

	)

364 
	#RCC_APB1ENR_TIM3EN
 (1 << 1)

	)

365 
	#RCC_APB1ENR_TIM2EN
 (1 << 0)

	)

369 
	#RCC_APB2ENR_LTDCEN
 (1 << 26)

	)

370 
	#RCC_APB2ENR_SAI2EN
 (1 << 23)

	)

371 
	#RCC_APB2ENR_SAI1EN
 (1 << 22)

	)

372 
	#RCC_APB2ENR_SPI6EN
 (1 << 21)

	)

373 
	#RCC_APB2ENR_SPI5EN
 (1 << 20)

	)

374 
	#RCC_APB2ENR_TIM11EN
 (1 << 18)

	)

375 
	#RCC_APB2ENR_TIM10EN
 (1 << 17)

	)

376 
	#RCC_APB2ENR_TIM9EN
 (1 << 16)

	)

377 
	#RCC_APB2ENR_SYSCFGEN
 (1 << 14)

	)

378 
	#RCC_APB2ENR_SPI4EN
 (1 << 13)

	)

379 
	#RCC_APB2ENR_SPI1EN
 (1 << 12)

	)

380 
	#RCC_APB2ENR_SDMMC1EN
 (1 << 11)

	)

381 
	#RCC_APB2ENR_ADC3EN
 (1 << 10)

	)

382 
	#RCC_APB2ENR_ADC2EN
 (1 << 9)

	)

383 
	#RCC_APB2ENR_ADC1EN
 (1 << 8)

	)

384 
	#RCC_APB2ENR_USART6EN
 (1 << 5)

	)

385 
	#RCC_APB2ENR_USART1EN
 (1 << 4)

	)

386 
	#RCC_APB2ENR_TIM8EN
 (1 << 1)

	)

387 
	#RCC_APB2ENR_TIM1EN
 (1 << 0)

	)

391 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 (1 << 30)

	)

392 
	#RCC_AHB1LPENR_OTGHSLPEN
 (1 << 29)

	)

393 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 (1 << 28)

	)

394 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 (1 << 27)

	)

395 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 (1 << 26)

	)

396 
	#RCC_AHB1LPENR_ETHMACLPEN
 (1 << 25)

	)

397 
	#RCC_AHB1LPENR_DMA2DLPEN
 (1 << 23)

	)

398 
	#RCC_AHB1LPENR_DMA2LPEN
 (1 << 22)

	)

399 
	#RCC_AHB1LPENR_DMA1LPEN
 (1 << 21)

	)

400 
	#RCC_AHB1LPENR_DTCMLPEN
 (1 << 20)

	)

401 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 (1 << 18)

	)

402 
	#RCC_AHB1LPENR_SRAM2LPEN
 (1 << 17)

	)

403 
	#RCC_AHB1LPENR_SRAM1LPEN
 (1 << 16)

	)

404 
	#RCC_AHB1LPENR_FLITFLPEN
 (1 << 15)

	)

405 
	#RCC_AHB1LPENR_AXILPEN
 (1 << 13)

	)

406 
	#RCC_AHB1LPENR_CRCLPEN
 (1 << 12)

	)

407 
	#RCC_AHB1LPENR_GPIOKLPEN
 (1 << 10)

	)

408 
	#RCC_AHB1LPENR_GPIOJLPEN
 (1 << 9)

	)

409 
	#RCC_AHB1LPENR_GPIOILPEN
 (1 << 8)

	)

410 
	#RCC_AHB1LPENR_GPIOHLPEN
 (1 << 7)

	)

411 
	#RCC_AHB1LPENR_GPIOGLPEN
 (1 << 6)

	)

412 
	#RCC_AHB1LPENR_GPIOFLPEN
 (1 << 5)

	)

413 
	#RCC_AHB1LPENR_GPIOELPEN
 (1 << 4)

	)

414 
	#RCC_AHB1LPENR_GPIODLPEN
 (1 << 3)

	)

415 
	#RCC_AHB1LPENR_GPIOCLPEN
 (1 << 2)

	)

416 
	#RCC_AHB1LPENR_GPIOBLPEN
 (1 << 1)

	)

417 
	#RCC_AHB1LPENR_GPIOALPEN
 (1 << 0)

	)

421 
	#RCC_AHB2LPENR_OTGFSLPEN
 (1 << 7)

	)

422 
	#RCC_AHB2LPENR_RNGLPEN
 (1 << 6)

	)

423 
	#RCC_AHB2LPENR_HASHLPEN
 (1 << 5)

	)

424 
	#RCC_AHB2LPENR_CRYPLPEN
 (1 << 4)

	)

425 
	#RCC_AHB2LPENR_DCMILPEN
 (1 << 0)

	)

429 
	#RCC_AHB3LPENR_QSPILPEN
 (1 << 1)

	)

430 
	#RCC_AHB3LPENR_FMCLPEN
 (1 << 0)

	)

434 
	#RCC_APB1LPENR_UART8LPEN
 (1 << 31)

	)

435 
	#RCC_APB1LPENR_UART7LPEN
 (1 << 30)

	)

436 
	#RCC_APB1LPENR_DACLPEN
 (1 << 29)

	)

437 
	#RCC_APB1LPENR_PWRLPEN
 (1 << 28)

	)

438 
	#RCC_APB1LPENR_CECLPEN
 (1 << 27)

	)

439 
	#RCC_APB1LPENR_CAN2LPEN
 (1 << 26)

	)

440 
	#RCC_APB1LPENR_CAN1LPEN
 (1 << 25)

	)

441 
	#RCC_APB1LPENR_I2C4LPEN
 (1 << 24)

	)

442 
	#RCC_APB1LPENR_I2C3LPEN
 (1 << 23)

	)

443 
	#RCC_APB1LPENR_I2C2LPEN
 (1 << 22)

	)

444 
	#RCC_APB1LPENR_I2C1LPEN
 (1 << 21)

	)

445 
	#RCC_APB1LPENR_UART5LPEN
 (1 << 20)

	)

446 
	#RCC_APB1LPENR_UART4LPEN
 (1 << 19)

	)

447 
	#RCC_APB1LPENR_USART3LPEN
 (1 << 18)

	)

448 
	#RCC_APB1LPENR_USART2LPEN
 (1 << 17)

	)

449 
	#RCC_APB1LPENR_SPIDIFRXLPEN
 (1 << 16)

	)

450 
	#RCC_APB1LPENR_SPI3LPEN
 (1 << 15)

	)

451 
	#RCC_APB1LPENR_SPI2LPEN
 (1 << 14)

	)

452 
	#RCC_APB1LPENR_WWDGLPEN
 (1 << 11)

	)

453 
	#RCC_APB1LPENR_LPTIM1LPEN
 (1 << 9)

	)

454 
	#RCC_APB1LPENR_TIM14LPEN
 (1 << 8)

	)

455 
	#RCC_APB1LPENR_TIM13LPEN
 (1 << 7)

	)

456 
	#RCC_APB1LPENR_TIM12LPEN
 (1 << 6)

	)

457 
	#RCC_APB1LPENR_TIM7LPEN
 (1 << 5)

	)

458 
	#RCC_APB1LPENR_TIM6LPEN
 (1 << 4)

	)

459 
	#RCC_APB1LPENR_TIM5LPEN
 (1 << 3)

	)

460 
	#RCC_APB1LPENR_TIM4LPEN
 (1 << 2)

	)

461 
	#RCC_APB1LPENR_TIM3LPEN
 (1 << 1)

	)

462 
	#RCC_APB1LPENR_TIM2LPEN
 (1 << 0)

	)

466 
	#RCC_APB2LPENR_LTDCLPEN
 (1 << 26)

	)

467 
	#RCC_APB2LPENR_SAI2LPEN
 (1 << 23)

	)

468 
	#RCC_APB2LPENR_SAI1LPEN
 (1 << 22)

	)

469 
	#RCC_APB2LPENR_SPI6LPEN
 (1 << 21)

	)

470 
	#RCC_APB2LPENR_SPI5LPEN
 (1 << 20)

	)

471 
	#RCC_APB2LPENR_TIM11LPEN
 (1 << 18)

	)

472 
	#RCC_APB2LPENR_TIM10LPEN
 (1 << 17)

	)

473 
	#RCC_APB2LPENR_TIM9LPEN
 (1 << 16)

	)

474 
	#RCC_APB2LPENR_SYSCFGLPEN
 (1 << 14)

	)

475 
	#RCC_APB2LPENR_SPI4LPEN
 (1 << 13)

	)

476 
	#RCC_APB2LPENR_SPI1LPEN
 (1 << 12)

	)

477 
	#RCC_APB2LPENR_SDMMC1LPEN
 (1 << 11)

	)

478 
	#RCC_APB2LPENR_ADC3LPEN
 (1 << 10)

	)

479 
	#RCC_APB2LPENR_ADC2LPEN
 (1 << 9)

	)

480 
	#RCC_APB2LPENR_ADC1LPEN
 (1 << 8)

	)

481 
	#RCC_APB2LPENR_USART6LPEN
 (1 << 5)

	)

482 
	#RCC_APB2LPENR_USART1LPEN
 (1 << 4)

	)

483 
	#RCC_APB2LPENR_TIM8LPEN
 (1 << 1)

	)

484 
	#RCC_APB2LPENR_TIM1LPEN
 (1 << 0)

	)

488 
	#RCC_BDCR_BDRST
 (1 << 16)

	)

489 
	#RCC_BDCR_RTCEN
 (1 << 15)

	)

490 
	#RCC_BDCR_RTCSEL_MASK
 0x3

	)

491 
	#RCC_BDCR_RTCSEL_SHIFT
 8

	)

492 
	#RCC_BDCR_RTCSEL_NONE
 0

	)

493 
	#RCC_BDCR_RTCSEL_LSE
 1

	)

494 
	#RCC_BDCR_RTCSEL_LSI
 2

	)

495 
	#RCC_BDCR_RTCSEL_HSE
 3

	)

496 
	#RCC_BDCR_LSEDRV_MASK
 0x3

	)

497 
	#RCC_BDCR_LSEDRV_SHIFT
 3

	)

498 
	#RCC_BDCR_LSEDRV_LOW
 0

	)

499 
	#RCC_BDCR_LSEDRV_MEDH
 1

	)

500 
	#RCC_BDCR_LSEDRV_MEDL
 2

	)

501 
	#RCC_BDCR_LSEDRV_HIGH
 3

	)

502 
	#RCC_BDCR_LSEBYP
 (1 << 2)

	)

503 
	#RCC_BDCR_LSERDY
 (1 << 1)

	)

504 
	#RCC_BDCR_LSEON
 (1 << 0)

	)

508 
	#RCC_CSR_LPWRRSTF
 (1 << 31)

	)

509 
	#RCC_CSR_WWDGRSTF
 (1 << 30)

	)

510 
	#RCC_CSR_IWDGRSTF
 (1 << 29)

	)

511 
	#RCC_CSR_SFTRSTF
 (1 << 28)

	)

512 
	#RCC_CSR_PORRSTF
 (1 << 27)

	)

513 
	#RCC_CSR_PINRSTF
 (1 << 26)

	)

514 
	#RCC_CSR_BORRSTF
 (1 << 25)

	)

515 
	#RCC_CSR_RMVF
 (1 << 24)

	)

516 
	#RCC_CSR_RESET_FLAGS
 (
RCC_CSR_LPWRRSTF
 | 
RCC_CSR_WWDGRSTF
 |\

517 
RCC_CSR_IWDGRSTF
 | 
RCC_CSR_SFTRSTF
 | 
RCC_CSR_PORRSTF
 |\

518 
RCC_CSR_PINRSTF
 | 
RCC_CSR_BORRSTF
)

	)

519 
	#RCC_CSR_LSIRDY
 (1 << 1)

	)

520 
	#RCC_CSR_LSION
 (1 << 0)

	)

524 
	#RCC_SSCGR_SSCGEN
 (1 << 31)

	)

525 
	#RCC_SSCGR_SPREADSEL
 (1 << 30)

	)

526 
	#RCC_SSCGR_INCSTEP_MASK
 0x7fff

	)

527 
	#RCC_SSCGR_INCSTEP_SHIFT
 13

	)

528 
	#RCC_SSCGR_MODPER_MASK
 0x1fff

	)

529 
	#RCC_SSCGR_MODPER_SHIFT
 0

	)

534 
	#RCC_PLLI2SCFGR_PLLI2S_MASK
 0x7

	)

535 
	#RCC_PLLI2SCFGR_PLLI2S_SHIFT
 28

	)

536 
	#RCC_PLLI2SCFGR_PLLI2SQ_MASK
 0xf

	)

537 
	#RCC_PLLI2SCFGR_PLLI2SQ_SHIFT
 24

	)

538 
	#RCC_PLLI2SCFGR_PLLI2SP_MASK
 0x3

	)

539 
	#RCC_PLLI2SCFGR_PLLI2SP_SHIFT
 16

	)

540 
	#RCC_PLLI2SCFGR_PLLI2SN_MASK
 0x1ff

	)

541 
	#RCC_PLLI2SCFGR_PLLI2SN_SHIFT
 6

	)

545 
	#RCC_PLLSAICFGR_PLLSAIR_MASK
 0x7

	)

546 
	#RCC_PLLSAICFGR_PLLSAIR_SHIFT
 28

	)

547 
	#RCC_PLLSAICFGR_PLLSAIQ_MASK
 0xf

	)

548 
	#RCC_PLLSAICFGR_PLLSAIQ_SHIFT
 24

	)

549 
	#RCC_PLLSAICFGR_PLLSAIP_MASK
 0x3

	)

550 
	#RCC_PLLSAICFGR_PLLSAIP_SHIFT
 16

	)

551 
	#RCC_PLLSAICFGR_PLLSAIN_MASK
 0x1FF

	)

552 
	#RCC_PLLSAICFGR_PLLSAIN_SHIFT
 6

	)

556 
	#RCC_DCKCFGR1_TIMPRE
 (1<<24)

	)

557 
	#RCC_DCKCFGR1_SAI2SEL_MASK
 0x3

	)

558 
	#RCC_DCKCFGR1_SAI2SEL_SHIFT
 22

	)

559 
	#RCC_DCKCFGR1_SAI1SEL_MASK
 0x3

	)

560 
	#RCC_DCKCFGR1_SAI1SEL_SHIFT
 20

	)

561 
	#RCC_DCKCFGR1_PLLSAIDIVR_MASK
 0x3

	)

562 
	#RCC_DCKCFGR1_PLLSAIDIVR_SHIFT
 16

	)

563 
	#RCC_DCKCFGR1_PLLSAIDIVR_DIVR_2
 0

	)

564 
	#RCC_DCKCFGR1_PLLSAIDIVR_DIVR_4
 1

	)

565 
	#RCC_DCKCFGR1_PLLSAIDIVR_DIVR_8
 2

	)

566 
	#RCC_DCKCFGR1_PLLSAIDIVR_DIVR_16
 3

	)

567 
	#RCC_DCKCFGR1_PLLSAIDIVQ_MASK
 0x1f

	)

568 
	#RCC_DCKCFGR1_PLLSAIDIVQ_SHIFT
 8

	)

569 
	#RCC_DCKCFGR1_PLLI2SDIVQ_MASK
 0x1f

	)

570 
	#RCC_DCKCFGR1_PLLI2SDIVQ_SHIFT
 0

	)

574 
	#RCC_DCKCFGR2_SDMMCSEL
 (1<<28)

	)

575 
	#RCC_DCKCFGR2_CK48MSEL
 (1<<27)

	)

576 
	#RCC_DCKCFGR2_CECSEL
 (1<<26)

	)

577 
	#RCC_DCKCFGR2_LPTIM1SEL_MASK
 0x3

	)

578 
	#RCC_DCKCFGR2_LPTIM1SEL_SHIFT
 24

	)

579 
	#RCC_DCKCFGR2_I2C4SEL_MASK
 0x3

	)

580 
	#RCC_DCKCFGR2_I2C4SEL_SHIFT
 22

	)

581 
	#RCC_DCKCFGR2_I2C3SEL_MASK
 0x3

	)

582 
	#RCC_DCKCFGR2_I2C3SEL_SHIFT
 20

	)

583 
	#RCC_DCKCFGR2_I2C2SEL_MASK
 0x3

	)

584 
	#RCC_DCKCFGR2_I2C2SEL_SHIFT
 18

	)

585 
	#RCC_DCKCFGR2_I2C1SEL_MASK
 0x3

	)

586 
	#RCC_DCKCFGR2_I2C1SEL_SHIFT
 16

	)

587 
	#RCC_DCKCFGR2_UART8SEL_MASK
 0x3

	)

588 
	#RCC_DCKCFGR2_UART8SEL_SHIFT
 14

	)

589 
	#RCC_DCKCFGR2_UART7SEL_MASK
 0x3

	)

590 
	#RCC_DCKCFGR2_UART7SEL_SHIFT
 12

	)

591 
	#RCC_DCKCFGR2_USART6SEL_MASK
 0x3

	)

592 
	#RCC_DCKCFGR2_USART6SEL_SHIFT
 10

	)

593 
	#RCC_DCKCFGR2_UART5SEL_MASK
 0x3

	)

594 
	#RCC_DCKCFGR2_UART5SEL_SHIFT
 8

	)

595 
	#RCC_DCKCFGR2_UART4SEL_MASK
 0x3

	)

596 
	#RCC_DCKCFGR2_UART4SEL_SHIFT
 6

	)

597 
	#RCC_DCKCFGR2_UART3SEL_MASK
 0x3

	)

598 
	#RCC_DCKCFGR2_UART3SEL_SHIFT
 4

	)

599 
	#RCC_DCKCFGR2_UART2SEL_MASK
 0x3

	)

600 
	#RCC_DCKCFGR2_UART2SEL_SHIFT
 2

	)

601 
	#RCC_DCKCFGR2_UART1SEL_MASK
 0x3

	)

602 
	#RCC_DCKCFGR2_UART1SEL_SHIFT
 0

	)

604 
uöt32_t
 
rcc_ahb_‰equícy
;

605 
uöt32_t
 
rcc_≠b1_‰equícy
;

606 
uöt32_t
 
rcc_≠b2_‰equícy
;

608 
	ercc_˛ock_3v3
 {

609 
	mRCC_CLOCK_3V3_216MHZ
,

610 
	mRCC_CLOCK_3V3_168MHZ
,

611 
	mRCC_CLOCK_3V3_120MHZ
,

612 
	mRCC_CLOCK_3V3_72MHZ
,

613 
	mRCC_CLOCK_3V3_48MHZ
,

614 
	mRCC_CLOCK_3V3_24MHZ
,

615 
	mRCC_CLOCK_3V3_END


618 
	srcc_˛ock_sˇÀ
 {

620 
uöt16_t
 
	m∂ 
;

621 
uöt8_t
 
	m∂Õ
;

622 
uöt8_t
 
	m∂lq
;

623 
uöt32_t
 
	mÊash_waô°©es
;

624 
uöt8_t
 
	mh¥e
;

625 
uöt8_t
 
	mµª1
;

626 
uöt8_t
 
	mµª2
;

627 
pwr_vos_sˇÀ
 
	mvos_sˇÀ
;

628 
uöt8_t
 
	movîdrive
;

629 
uöt32_t
 
	mahb_‰equícy
;

630 
uöt32_t
 
	m≠b1_‰equícy
;

631 
uöt32_t
 
	m≠b2_‰equícy
;

634 c⁄° 
rcc_˛ock_sˇÀ
 
rcc_3v3
[
RCC_CLOCK_3V3_END
];

636 
	ercc_osc
 {

637 
	mRCC_PLL
,

638 
	mRCC_HSE
,

639 
	mRCC_HSI
,

640 
	mRCC_LSE
,

641 
	mRCC_LSI


644 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

646 
	ercc_≥rùh_˛kí
 {

648 
	mRCC_GPIOA
 = 
_REG_BIT
(0x30, 0),

649 
	mRCC_GPIOB
 = 
_REG_BIT
(0x30, 1),

650 
	mRCC_GPIOC
 = 
_REG_BIT
(0x30, 2),

651 
	mRCC_GPIOD
 = 
_REG_BIT
(0x30, 3),

652 
	mRCC_GPIOE
 = 
_REG_BIT
(0x30, 4),

653 
	mRCC_GPIOF
 = 
_REG_BIT
(0x30, 5),

654 
	mRCC_GPIOG
 = 
_REG_BIT
(0x30, 6),

655 
	mRCC_GPIOH
 = 
_REG_BIT
(0x30, 7),

656 
	mRCC_GPIOI
 = 
_REG_BIT
(0x30, 8),

657 
	mRCC_GPIOJ
 = 
_REG_BIT
(0x30, 9),

658 
	mRCC_GPIOK
 = 
_REG_BIT
(0x30, 10),

659 
	mRCC_CRC
 = 
_REG_BIT
(0x30, 12),

660 
	mRCC_BKPSRAM
 = 
_REG_BIT
(0x30, 18),

661 
	mRCC_DTCMRAM
 = 
_REG_BIT
(0x30, 20),

662 
	mRCC_DMA1
 = 
_REG_BIT
(0x30, 21),

663 
	mRCC_DMA2
 = 
_REG_BIT
(0x30, 22),

664 
	mRCC_DMA2D
 = 
_REG_BIT
(0x30, 23),

665 
	mRCC_ETHMAC
 = 
_REG_BIT
(0x30, 25),

666 
	mRCC_ETHMACTX
 = 
_REG_BIT
(0x30, 26),

667 
	mRCC_ETHMACRX
 = 
_REG_BIT
(0x30, 27),

668 
	mRCC_ETHMACPTP
 = 
_REG_BIT
(0x30, 28),

669 
	mRCC_OTGHS
 = 
_REG_BIT
(0x30, 29),

670 
	mRCC_OTGHSULPI
 = 
_REG_BIT
(0x30, 30),

673 
	mRCC_DCMI
 = 
_REG_BIT
(0x34, 0),

674 
	mRCC_CRYP
 = 
_REG_BIT
(0x34, 4),

675 
	mRCC_HASH
 = 
_REG_BIT
(0x34, 5),

676 
	mRCC_RNG
 = 
_REG_BIT
(0x34, 6),

677 
	mRCC_OTGFS
 = 
_REG_BIT
(0x34, 7),

680 
	mRCC_QSPI
 = 
_REG_BIT
(0x38, 1),

681 
	mRCC_FMC
 = 
_REG_BIT
(0x38, 0),

684 
	mRCC_TIM2
 = 
_REG_BIT
(0x40, 0),

685 
	mRCC_TIM3
 = 
_REG_BIT
(0x40, 1),

686 
	mRCC_TIM4
 = 
_REG_BIT
(0x40, 2),

687 
	mRCC_TIM5
 = 
_REG_BIT
(0x40, 3),

688 
	mRCC_TIM6
 = 
_REG_BIT
(0x40, 4),

689 
	mRCC_TIM7
 = 
_REG_BIT
(0x40, 5),

690 
	mRCC_TIM12
 = 
_REG_BIT
(0x40, 6),

691 
	mRCC_TIM13
 = 
_REG_BIT
(0x40, 7),

692 
	mRCC_TIM14
 = 
_REG_BIT
(0x40, 8),

693 
	mRCC_LPTIM1
 = 
_REG_BIT
(0x40, 9),

694 
	mRCC_WWDG
 = 
_REG_BIT
(0x40, 11),

695 
	mRCC_SPI2
 = 
_REG_BIT
(0x40, 14),

696 
	mRCC_SPI3
 = 
_REG_BIT
(0x40, 15),

697 
	mRCC_SPDIFRX
 = 
_REG_BIT
(0x40, 16),

698 
	mRCC_USART2
 = 
_REG_BIT
(0x40, 17),

699 
	mRCC_USART3
 = 
_REG_BIT
(0x40, 18),

700 
	mRCC_UART4
 = 
_REG_BIT
(0x40, 19),

701 
	mRCC_UART5
 = 
_REG_BIT
(0x40, 20),

702 
	mRCC_I2C1
 = 
_REG_BIT
(0x40, 21),

703 
	mRCC_I2C2
 = 
_REG_BIT
(0x40, 22),

704 
	mRCC_I2C3
 = 
_REG_BIT
(0x40, 23),

705 
	mRCC_I2C4
 = 
_REG_BIT
(0x40, 24),

706 
	mRCC_CAN1
 = 
_REG_BIT
(0x40, 25),

707 
	mRCC_CAN2
 = 
_REG_BIT
(0x40, 26),

708 
	mRCC_CEC
 = 
_REG_BIT
(0x40, 27),

709 
	mRCC_PWR
 = 
_REG_BIT
(0x40, 28),

710 
	mRCC_DAC
 = 
_REG_BIT
(0x40, 29),

711 
	mRCC_SPI7
 = 
_REG_BIT
(0x40, 30),

712 
	mRCC_SPI8
 = 
_REG_BIT
(0x40, 31),

715 
	mRCC_TIM1
 = 
_REG_BIT
(0x44, 0),

716 
	mRCC_TIM8
 = 
_REG_BIT
(0x44, 1),

717 
	mRCC_USART1
 = 
_REG_BIT
(0x44, 4),

718 
	mRCC_USART6
 = 
_REG_BIT
(0x44, 5),

719 
	mRCC_ADC1
 = 
_REG_BIT
(0x44, 8),

720 
	mRCC_ADC2
 = 
_REG_BIT
(0x44, 9),

721 
	mRCC_ADC3
 = 
_REG_BIT
(0x44, 10),

722 
	mRCC_SDMMC1
 = 
_REG_BIT
(0x44, 11),

723 
	mRCC_SPI1
 = 
_REG_BIT
(0x44, 12),

724 
	mRCC_SPI4
 = 
_REG_BIT
(0x44, 13),

725 
	mRCC_SYSCFG
 = 
_REG_BIT
(0x44, 14),

726 
	mRCC_TIM9
 = 
_REG_BIT
(0x44, 16),

727 
	mRCC_TIM10
 = 
_REG_BIT
(0x44, 17),

728 
	mRCC_TIM11
 = 
_REG_BIT
(0x44, 18),

729 
	mRCC_SPI5
 = 
_REG_BIT
(0x44, 20),

730 
	mRCC_SPI6
 = 
_REG_BIT
(0x44, 21),

731 
	mRCC_SAI1EN
 = 
_REG_BIT
(0x44, 22),

732 
	mRCC_SAI2EN
 = 
_REG_BIT
(0x44, 23),

733 
	mRCC_LTDC
 = 
_REG_BIT
(0x44, 26),

737 
	mRCC_RTC
 = 
_REG_BIT
(0x70, 15),

740 
	mSCC_GPIOA
 = 
_REG_BIT
(0x50, 0),

741 
	mSCC_GPIOB
 = 
_REG_BIT
(0x50, 1),

742 
	mSCC_GPIOC
 = 
_REG_BIT
(0x50, 2),

743 
	mSCC_GPIOD
 = 
_REG_BIT
(0x50, 3),

744 
	mSCC_GPIOE
 = 
_REG_BIT
(0x50, 4),

745 
	mSCC_GPIOF
 = 
_REG_BIT
(0x50, 5),

746 
	mSCC_GPIOG
 = 
_REG_BIT
(0x50, 6),

747 
	mSCC_GPIOH
 = 
_REG_BIT
(0x50, 7),

748 
	mSCC_GPIOI
 = 
_REG_BIT
(0x50, 8),

749 
	mSCC_GPIOJ
 = 
_REG_BIT
(0x50, 9),

750 
	mSCC_GPIOK
 = 
_REG_BIT
(0x50, 10),

751 
	mSCC_CRC
 = 
_REG_BIT
(0x50, 12),

752 
	mSCC_AXI
 = 
_REG_BIT
(0x50, 13),

753 
	mSCC_FLTIF
 = 
_REG_BIT
(0x50, 15),

754 
	mSCC_SRAM1
 = 
_REG_BIT
(0x50, 16),

755 
	mSCC_SRAM2
 = 
_REG_BIT
(0x50, 17),

756 
	mSCC_BKPSRAM
 = 
_REG_BIT
(0x50, 18),

757 
	mSCC_DTCM
 = 
_REG_BIT
(0x50, 20),

758 
	mSCC_DMA1
 = 
_REG_BIT
(0x50, 21),

759 
	mSCC_DMA2
 = 
_REG_BIT
(0x50, 22),

760 
	mSCC_DMA2D
 = 
_REG_BIT
(0x50, 23),

761 
	mSCC_ETHMAC
 = 
_REG_BIT
(0x50, 25),

762 
	mSCC_ETHMACTX
 = 
_REG_BIT
(0x50, 26),

763 
	mSCC_ETHMACRX
 = 
_REG_BIT
(0x50, 27),

764 
	mSCC_ETHMACPTP
 = 
_REG_BIT
(0x50, 28),

765 
	mSCC_OTGHS
 = 
_REG_BIT
(0x50, 29),

766 
	mSCC_OTGHSULPI
 = 
_REG_BIT
(0x50, 30),

769 
	mSCC_DCMI
 = 
_REG_BIT
(0x54, 0),

770 
	mSCC_CRYP
 = 
_REG_BIT
(0x54, 4),

771 
	mSCC_HASH
 = 
_REG_BIT
(0x54, 5),

772 
	mSCC_RNG
 = 
_REG_BIT
(0x54, 6),

773 
	mSCC_OTGFS
 = 
_REG_BIT
(0x54, 7),

776 
	mSCC_QSPI
 = 
_REG_BIT
(0x58, 1),

777 
	mSCC_FMC
 = 
_REG_BIT
(0x58, 0),

780 
	mSCC_TIM2
 = 
_REG_BIT
(0x60, 0),

781 
	mSCC_TIM3
 = 
_REG_BIT
(0x60, 1),

782 
	mSCC_TIM4
 = 
_REG_BIT
(0x60, 2),

783 
	mSCC_TIM5
 = 
_REG_BIT
(0x60, 3),

784 
	mSCC_TIM6
 = 
_REG_BIT
(0x60, 4),

785 
	mSCC_TIM7
 = 
_REG_BIT
(0x60, 5),

786 
	mSCC_TIM12
 = 
_REG_BIT
(0x60, 6),

787 
	mSCC_TIM13
 = 
_REG_BIT
(0x60, 7),

788 
	mSCC_TIM14
 = 
_REG_BIT
(0x60, 8),

789 
	mSCC_LPTIM1
 = 
_REG_BIT
(0x60, 9),

790 
	mSCC_WWDG
 = 
_REG_BIT
(0x60, 11),

791 
	mSCC_SPI2
 = 
_REG_BIT
(0x60, 14),

792 
	mSCC_SPI3
 = 
_REG_BIT
(0x60, 15),

793 
	mSCC_SPDIFRX
 = 
_REG_BIT
(0x60, 16),

794 
	mSCC_USART2
 = 
_REG_BIT
(0x60, 17),

795 
	mSCC_USART3
 = 
_REG_BIT
(0x60, 18),

796 
	mSCC_UART4
 = 
_REG_BIT
(0x60, 19),

797 
	mSCC_UART5
 = 
_REG_BIT
(0x60, 20),

798 
	mSCC_I2C1
 = 
_REG_BIT
(0x60, 21),

799 
	mSCC_I2C2
 = 
_REG_BIT
(0x60, 22),

800 
	mSCC_I2C3
 = 
_REG_BIT
(0x60, 23),

801 
	mSCC_I2C4
 = 
_REG_BIT
(0x60, 24),

802 
	mSCC_CAN1
 = 
_REG_BIT
(0x60, 25),

803 
	mSCC_CAN2
 = 
_REG_BIT
(0x60, 26),

804 
	mSCC_CEC
 = 
_REG_BIT
(0x60, 27),

805 
	mSCC_PWR
 = 
_REG_BIT
(0x60, 28),

806 
	mSCC_DAC
 = 
_REG_BIT
(0x60, 29),

807 
	mSCC_UART7
 = 
_REG_BIT
(0x60, 30),

808 
	mSCC_UART8
 = 
_REG_BIT
(0x60, 31),

811 
	mSCC_TIM1
 = 
_REG_BIT
(0x64, 0),

812 
	mSCC_TIM8
 = 
_REG_BIT
(0x64, 1),

813 
	mSCC_USART1
 = 
_REG_BIT
(0x64, 4),

814 
	mSCC_USART6
 = 
_REG_BIT
(0x64, 5),

815 
	mSCC_ADC1
 = 
_REG_BIT
(0x64, 8),

816 
	mSCC_ADC2
 = 
_REG_BIT
(0x64, 9),

817 
	mSCC_ADC3
 = 
_REG_BIT
(0x64, 10),

818 
	mSCC_SDMMC1
 = 
_REG_BIT
(0x64, 11),

819 
	mSCC_SPI1
 = 
_REG_BIT
(0x64, 12),

820 
	mSCC_SPI4
 = 
_REG_BIT
(0x64, 13),

821 
	mSCC_SYSCFG
 = 
_REG_BIT
(0x64, 14),

822 
	mSCC_TIM9
 = 
_REG_BIT
(0x64, 16),

823 
	mSCC_TIM10
 = 
_REG_BIT
(0x64, 17),

824 
	mSCC_TIM11
 = 
_REG_BIT
(0x64, 18),

825 
	mSCC_SPI5
 = 
_REG_BIT
(0x64, 20),

826 
	mSCC_SPI6
 = 
_REG_BIT
(0x64, 21),

827 
	mSCC_SAI1
 = 
_REG_BIT
(0x64, 22),

828 
	mSCC_SAI2
 = 
_REG_BIT
(0x64, 23),

829 
	mSCC_LTDC
 = 
_REG_BIT
(0x64, 26),

832 
	ercc_≥rùh_r°
 {

834 
	mRST_GPIOA
 = 
_REG_BIT
(0x10, 0),

835 
	mRST_GPIOB
 = 
_REG_BIT
(0x10, 1),

836 
	mRST_GPIOC
 = 
_REG_BIT
(0x10, 2),

837 
	mRST_GPIOD
 = 
_REG_BIT
(0x10, 3),

838 
	mRST_GPIOE
 = 
_REG_BIT
(0x10, 4),

839 
	mRST_GPIOF
 = 
_REG_BIT
(0x10, 5),

840 
	mRST_GPIOG
 = 
_REG_BIT
(0x10, 6),

841 
	mRST_GPIOH
 = 
_REG_BIT
(0x10, 7),

842 
	mRST_GPIOI
 = 
_REG_BIT
(0x10, 8),

843 
	mRST_GPIOJ
 = 
_REG_BIT
(0x10, 9),

844 
	mRST_GPIOK
 = 
_REG_BIT
(0x10, 10),

845 
	mRST_CRC
 = 
_REG_BIT
(0x10, 12),

846 
	mRST_DMA1
 = 
_REG_BIT
(0x10, 21),

847 
	mRST_DMA2
 = 
_REG_BIT
(0x10, 22),

848 
	mRST_DMA2D
 = 
_REG_BIT
(0x10, 23),

849 
	mRST_ETHMAC
 = 
_REG_BIT
(0x10, 25),

850 
	mRST_OTGHS
 = 
_REG_BIT
(0x10, 29),

853 
	mRST_DCMI
 = 
_REG_BIT
(0x14, 0),

854 
	mRST_CRYP
 = 
_REG_BIT
(0x14, 4),

855 
	mRST_HASH
 = 
_REG_BIT
(0x14, 5),

856 
	mRST_RNG
 = 
_REG_BIT
(0x14, 6),

857 
	mRST_OTGFS
 = 
_REG_BIT
(0x14, 7),

860 
	mRST_QSPI
 = 
_REG_BIT
(0x18, 1),

861 
	mRST_FMC
 = 
_REG_BIT
(0x18, 0),

864 
	mRST_TIM2
 = 
_REG_BIT
(0x20, 0),

865 
	mRST_TIM3
 = 
_REG_BIT
(0x20, 1),

866 
	mRST_TIM4
 = 
_REG_BIT
(0x20, 2),

867 
	mRST_TIM5
 = 
_REG_BIT
(0x20, 3),

868 
	mRST_TIM6
 = 
_REG_BIT
(0x20, 4),

869 
	mRST_TIM7
 = 
_REG_BIT
(0x20, 5),

870 
	mRST_TIM12
 = 
_REG_BIT
(0x20, 6),

871 
	mRST_TIM13
 = 
_REG_BIT
(0x20, 7),

872 
	mRST_TIM14
 = 
_REG_BIT
(0x20, 8),

873 
	mRST_LPTIM1
 = 
_REG_BIT
(0x20, 9),

874 
	mRST_WWDG
 = 
_REG_BIT
(0x20, 11),

875 
	mRST_SPI2
 = 
_REG_BIT
(0x20, 14),

876 
	mRST_SPI3
 = 
_REG_BIT
(0x20, 15),

877 
	mRST_SPDIFRX
 = 
_REG_BIT
(0x20, 16),

878 
	mRST_UART2
 = 
_REG_BIT
(0x20, 17),

879 
	mRST_UART3
 = 
_REG_BIT
(0x20, 18),

880 
	mRST_UART4
 = 
_REG_BIT
(0x20, 19),

881 
	mRST_UART5
 = 
_REG_BIT
(0x20, 20),

882 
	mRST_I2C1
 = 
_REG_BIT
(0x20, 21),

883 
	mRST_I2C2
 = 
_REG_BIT
(0x20, 22),

884 
	mRST_I2C3
 = 
_REG_BIT
(0x20, 23),

885 
	mRST_I2C4
 = 
_REG_BIT
(0x20, 24),

886 
	mRST_CAN1
 = 
_REG_BIT
(0x20, 25),

887 
	mRST_CAN2
 = 
_REG_BIT
(0x20, 26),

888 
	mRST_CEC
 = 
_REG_BIT
(0x20, 27),

889 
	mRST_PWR
 = 
_REG_BIT
(0x20, 28),

890 
	mRST_DAC
 = 
_REG_BIT
(0x20, 29),

891 
	mRST_UART7
 = 
_REG_BIT
(0x20, 30),

892 
	mRST_UART8
 = 
_REG_BIT
(0x20, 31),

895 
	mRST_TIM1
 = 
_REG_BIT
(0x24, 0),

896 
	mRST_TIM8
 = 
_REG_BIT
(0x24, 1),

897 
	mRST_USART1
 = 
_REG_BIT
(0x24, 4),

898 
	mRST_USART6
 = 
_REG_BIT
(0x24, 5),

899 
	mRST_ADC
 = 
_REG_BIT
(0x24, 8),

900 
	mRST_SDMMC1
 = 
_REG_BIT
(0x24, 11),

901 
	mRST_SPI1
 = 
_REG_BIT
(0x24, 12),

902 
	mRST_SPI4
 = 
_REG_BIT
(0x24, 13),

903 
	mRST_SYSCFG
 = 
_REG_BIT
(0x24, 14),

904 
	mRST_TIM9
 = 
_REG_BIT
(0x24, 16),

905 
	mRST_TIM10
 = 
_REG_BIT
(0x24, 17),

906 
	mRST_TIM11
 = 
_REG_BIT
(0x24, 18),

907 
	mRST_SPI5
 = 
_REG_BIT
(0x24, 20),

908 
	mRST_SPI6
 = 
_REG_BIT
(0x24, 21),

909 
	mRST_SAI1RST
 = 
_REG_BIT
(0x24, 22),

910 
	mRST_SAI2RST
 = 
_REG_BIT
(0x24, 23),

911 
	mRST_LTDC
 = 
_REG_BIT
(0x24, 26),

914 #unde‡
_REG_BIT


916 
	~<lib›ícm3/°m32/comm⁄/rcc_comm⁄_Æl.h
>

918 
BEGIN_DECLS


919 
rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
);

920 
rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
);

921 
rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
);

922 
rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
);

923 
rcc_css_öt_˛ór
();

924 
rcc_css_öt_Êag
();

925 
rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
);

926 
rcc_osc_⁄
(
rcc_osc
 
osc
);

927 
rcc_osc_off
(
rcc_osc
 
osc
);

928 
rcc_css_íabÀ
();

929 
rcc_css_dißbÀ
();

930 
rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
);

931 
rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
);

932 
rcc_£t_µª2
(
uöt32_t
 
µª2
);

933 
rcc_£t_µª1
(
uöt32_t
 
µª1
);

934 
rcc_£t_h¥e
(
uöt32_t
 
h¥e
);

935 
rcc_£t_π˝ª
(
uöt32_t
 
π˝ª
);

936 
rcc_£t_maö_∂l_hsi
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

937 
uöt32_t
 
∂lq
);

938 
rcc_£t_maö_∂l_h£
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

939 
uöt32_t
 
∂lq
);

940 
uöt32_t
 
rcc_sy°em_˛ock_sour˚
();

941 
rcc_˛ock_£tup_h£
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
, 
uöt32_t
 
h£_mhz
);

942 
rcc_˛ock_£tup_hsi
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
);

943 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/f7/rng.h

18 #i‚de‡
LIBOPENCM3_RNG_H


19 
	#LIBOPENCM3_RNG_H


	)

21 
	~<lib›ícm3/°m32/comm⁄/∫g_comm⁄_v1.h
>

	@libopencm3/include/libopencm3/stm32/f7/usart.h

31 #i‚de‡
LIBOPENCM3_USART_H


32 
	#LIBOPENCM3_USART_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_Æl.h
>

35 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_v2.h
>

43 
	#USART1
 
USART1_BASE


	)

44 
	#USART2
 
USART2_BASE


	)

45 
	#USART3
 
USART3_BASE


	)

46 
	#UART4
 
UART4_BASE


	)

47 
	#UART5
 
UART5_BASE


	)

50 
BEGIN_DECLS


52 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/flash.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/Êash.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/Êash.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/Êash.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/Êash.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/Êash.h
>

33 #ñi‡
deföed
(
STM32F7
)

34 
	~<lib›ícm3/°m32/f7/Êash.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/Êash.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/Êash.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/Êash.h
>

	@libopencm3/include/libopencm3/stm32/fsmc.h

20 #i‚de‡
LIBOPENCM3_FSMC_H


21 
	#LIBOPENCM3_FSMC_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

26 #i‡
deföed
(
STM32F4
)

27 
	~<lib›ícm3/°m32/f4/fmc.h
>

32 
	#FSMC_BANK1_BASE
 0x60000000U

	)

33 
	#FSMC_BANK2_BASE
 0x70000000U

	)

34 
	#FSMC_BANK3_BASE
 0x80000000U

	)

35 
	#FSMC_BANK4_BASE
 0x90000000U

	)

40 
	#FSMC_BCR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x00 + 8 * (x))

	)

41 
	#FSMC_BCR1
 
	`FSMC_BCR
(0)

	)

42 
	#FSMC_BCR2
 
	`FSMC_BCR
(1)

	)

43 
	#FSMC_BCR3
 
	`FSMC_BCR
(2)

	)

44 
	#FSMC_BCR4
 
	`FSMC_BCR
(3)

	)

47 
	#FSMC_BTR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x04 + 8 * (x))

	)

48 
	#FSMC_BTR1
 
	`FSMC_BTR
(0)

	)

49 
	#FSMC_BTR2
 
	`FSMC_BTR
(1)

	)

50 
	#FSMC_BTR3
 
	`FSMC_BTR
(2)

	)

51 
	#FSMC_BTR4
 
	`FSMC_BTR
(3)

	)

54 
	#FSMC_BWTR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x104 + 8 * (x))

	)

55 
	#FSMC_BWTR1
 
	`FSMC_BWTR
(0)

	)

56 
	#FSMC_BWTR2
 
	`FSMC_BWTR
(1)

	)

57 
	#FSMC_BWTR3
 
	`FSMC_BWTR
(2)

	)

58 
	#FSMC_BWTR4
 
	`FSMC_BWTR
(3)

	)

61 
	#FSMC_PCR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x40 + 0x20 * (x))

	)

62 
	#FSMC_PCR2
 
	`FSMC_PCR
(1)

	)

63 
	#FSMC_PCR3
 
	`FSMC_PCR
(2)

	)

64 
	#FSMC_PCR4
 
	`FSMC_PCR
(3)

	)

67 
	#FSMC_SR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x44 + 0x20 * (x))

	)

68 
	#FSMC_SR2
 
	`FSMC_SR
(1)

	)

69 
	#FSMC_SR3
 
	`FSMC_SR
(2)

	)

70 
	#FSMC_SR4
 
	`FSMC_SR
(3)

	)

73 
	#FSMC_PMEM
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x48 + 0x20 * (x))

	)

74 
	#FSMC_PMEM2
 
	`FSMC_PMEM
(1)

	)

75 
	#FSMC_PMEM3
 
	`FSMC_PMEM
(2)

	)

76 
	#FSMC_PMEM4
 
	`FSMC_PMEM
(3)

	)

79 
	#FSMC_PATT
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x4¯+ 0x20 * (x))

	)

80 
	#FSMC_PATT2
 
	`FSMC_PATT
(1)

	)

81 
	#FSMC_PATT3
 
	`FSMC_PATT
(2)

	)

82 
	#FSMC_PATT4
 
	`FSMC_PATT
(3)

	)

85 
	#FSMC_PIO4
 
	`MMIO32
(
FSMC_BASE
 + 0xb0)

	)

88 
	#FSMC_ECCR
(
x
Ë
	`MMIO32
(
FSMC_BASE
 + 0x54 + 0x20 * (x))

	)

89 
	#FSMC_ECCR2
 
	`FSMC_ECCR
(1)

	)

90 
	#FSMC_ECCR3
 
	`FSMC_ECCR
(2)

	)

97 
	#FSMC_BCR_CBURSTRW
 (1 << 19)

	)

102 
	#FSMC_BCR_ASYNCWAIT
 (1 << 15)

	)

105 
	#FSMC_BCR_EXTMOD
 (1 << 14)

	)

108 
	#FSMC_BCR_WAITEN
 (1 << 13)

	)

111 
	#FSMC_BCR_WREN
 (1 << 12)

	)

114 
	#FSMC_BCR_WAITCFG
 (1 << 11)

	)

117 
	#FSMC_BCR_WRAPMOD
 (1 << 10)

	)

120 
	#FSMC_BCR_WAITPOL
 (1 << 9)

	)

123 
	#FSMC_BCR_BURSTEN
 (1 << 8)

	)

128 
	#FSMC_BCR_FACCEN
 (1 << 6)

	)

131 
	#FSMC_BCR_MWID
 (1 << 4)

	)

134 
	#FSMC_BCR_MTYP
 (1 << 2)

	)

137 
	#FSMC_BCR_MUXEN
 (1 << 1)

	)

140 
	#FSMC_BCR_MBKEN
 (1 << 0)

	)

147 
	#FSMC_BTx_ACCMOD_A
 (0)

	)

148 
	#FSMC_BTx_ACCMOD_B
 (1)

	)

149 
	#FSMC_BTx_ACCMOD_C
 (2)

	)

150 
	#FSMC_BTx_ACCMOD_D
 (3)

	)

153 
	#FSMC_BTR_ACCMOD
 (1 << 28)

	)

154 
	#FSMC_BTR_ACCMODx
(
x
Ë(((xË& 0x03Ë<< 28)

	)

157 
	#FSMC_BTR_DATLAT
 (1 << 24)

	)

158 
	#FSMC_BTR_DATLATx
(
x
Ë(((xË& 0x0fË<< 24)

	)

161 
	#FSMC_BTR_CLKDIV
 (1 << 20)

	)

162 
	#FSMC_BTR_CLKDIVx
(
x
Ë(((xË& 0x0fË<< 20)

	)

165 
	#FSMC_BTR_BUSTURN
 (1 << 16)

	)

166 
	#FSMC_BTR_BUSTURNx
(
x
Ë(((xË& 0x0fË<< 16)

	)

169 
	#FSMC_BTR_DATAST
 (1 << 8)

	)

170 
	#FSMC_BTR_DATASTx
(
x
Ë(((xË& 0xffË<< 8)

	)

173 
	#FSMC_BTR_ADDHLD
 (1 << 4)

	)

174 
	#FSMC_BTR_ADDHLDx
(
x
Ë(((xË& 0x0fË<< 4)

	)

177 
	#FSMC_BTR_ADDSET
 (1 << 0)

	)

178 
	#FSMC_BTR_ADDSETx
(
x
Ë(((xË& 0x0fË<< 0)

	)

185 
	#FSMC_BWTR_ACCMOD
 (1 << 28)

	)

188 
	#FSMC_BWTR_DATLAT
 (1 << 24)

	)

191 
	#FSMC_BWTR_CLKDIV
 (1 << 20)

	)

196 
	#FSMC_BWTR_DATAST
 (1 << 8)

	)

199 
	#FSMC_BWTR_ADDHLD
 (1 << 4)

	)

202 
	#FSMC_BWTR_ADDSET
 (1 << 0)

	)

209 
	#FSMC_PCR_ECCPS
 (1 << 17)

	)

212 
	#FSMC_PCR_TAR
 (1 << 13)

	)

215 
	#FSMC_PCR_TCLR
 (1 << 9)

	)

220 
	#FSMC_PCR_ECCEN
 (1 << 6)

	)

223 
	#FSMC_PCR_PWID
 (1 << 4)

	)

226 
	#FSMC_PCR_PTYP
 (1 << 3)

	)

229 
	#FSMC_PCR_PBKEN
 (1 << 2)

	)

232 
	#FSMC_PCR_PWAITEN
 (1 << 1)

	)

241 
	#FSMC_SR_FEMPT
 (1 << 6)

	)

244 
	#FSMC_SR_IFEN
 (1 << 5)

	)

247 
	#FSMC_SR_ILEN
 (1 << 4)

	)

250 
	#FSMC_SR_IREN
 (1 << 3)

	)

253 
	#FSMC_SR_IFS
 (1 << 2)

	)

256 
	#FSMC_SR_ILS
 (1 << 1)

	)

259 
	#FSMC_SR_IRS
 (1 << 0)

	)

264 
	#FSMC_PMEM_MEMHIZX
 (1 << 24)

	)

267 
	#FSMC_PMEM_MEMHOLDX
 (1 << 16)

	)

270 
	#FSMC_PMEM_MEMWAITX
 (1 << 8)

	)

273 
	#FSMC_PMEM_MEMSETX
 (1 << 0)

	)

278 
	#FSMC_PATT_ATTHIZX
 (1 << 24)

	)

281 
	#FSMC_PATT_ATTHOLDX
 (1 << 16)

	)

284 
	#FSMC_PATT_ATTWAITX
 (1 << 8)

	)

287 
	#FSMC_PATT_ATTSETX
 (1 << 0)

	)

292 
	#FSMC_PIO4_IOHIZX
 (1 << 24)

	)

295 
	#FSMC_PIO4_IOHOLDX
 (1 << 16)

	)

298 
	#FSMC_PIO4_IOWAITX
 (1 << 8)

	)

301 
	#FSMC_PIO4_IOSETX
 (1 << 0)

	)

306 
	#FSMC_ECCR_ECCX
 (1 << 0)

	)

	@libopencm3/include/libopencm3/stm32/gpio.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/gpio.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/gpio.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/gpio.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/gpio.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/gpio.h
>

33 #ñi‡
deföed
(
STM32F7
)

34 
	~<lib›ícm3/°m32/f7/gpio.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/gpio.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/gpio.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/gpio.h
>

	@libopencm3/include/libopencm3/stm32/hash.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F2
)

24 
	~<lib›ícm3/°m32/f2/hash.h
>

25 #ñi‡
deföed
(
STM32F4
)

26 
	~<lib›ícm3/°m32/f4/hash.h
>

	@libopencm3/include/libopencm3/stm32/hrtim.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F3
)

24 
	~<lib›ícm3/°m32/f3/hπim.h
>

	@libopencm3/include/libopencm3/stm32/i2c.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/i2c.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/i2c.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/i2c.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/i2c.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/i2c.h
>

33 #ñi‡
deföed
(
STM32F7
)

34 
	~<lib›ícm3/°m32/f7/i2c.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/i2c.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/i2c.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/i2c.h
>

	@libopencm3/include/libopencm3/stm32/iwdg.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/iwdg.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/iwdg.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/iwdg.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/iwdg.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/iwdg.h
>

33 #ñi‡
deföed
(
STM32L0
)

34 
	~<lib›ícm3/°m32/l0/iwdg.h
>

35 #ñi‡
deföed
(
STM32L1
)

36 
	~<lib›ícm3/°m32/l1/iwdg.h
>

37 #ñi‡
deföed
(
STM32L4
)

38 
	~<lib›ícm3/°m32/l4/iwdg.h
>

	@libopencm3/include/libopencm3/stm32/l0/adc.h

33 #i‚de‡
LIBOPENCM3_ADC_H


34 
	#LIBOPENCM3_ADC_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v2.h
>

37 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v2_sögÀ.h
>

43 
	#ADC1
 
ADC1_BASE


	)

51 
	#ADC_CHANNEL_VLCD
 16

	)

52 
	#ADC_CHANNEL_VREF
 17

	)

53 
	#ADC_CHANNEL_TEMP
 18

	)

57 
	#ADC_CALFACT
(
adc
Ë
	`MMIO32
(◊dcË+ 0xB4)

	)

62 
	#ADC_CFGR2_CKMODE_SHIFT
 30

	)

63 
	#ADC_CFGR2_CKMODE
 (3 << 
ADC_CFGR2_CKMODE_SHIFT
)

	)

64 
	#ADC_CFGR2_CKMODE_CK_ADC
 (0 << 
ADC_CFGR2_CKMODE_SHIFT
)

	)

65 
	#ADC_CFGR2_CKMODE_PCLK_DIV2
 (1 << 
ADC_CFGR2_CKMODE_SHIFT
)

	)

66 
	#ADC_CFGR2_CKMODE_PCLK_DIV4
 (2 << 
ADC_CFGR2_CKMODE_SHIFT
)

	)

67 
	#ADC_CFGR2_CKMODE_PCLK
 (3 << 
ADC_CFGR2_CKMODE_SHIFT
)

	)

73 
	#ADC_SMPR_SMP_1DOT5CYC
 0x0

	)

74 
	#ADC_SMPR_SMP_3DOT5CYC
 0x1

	)

75 
	#ADC_SMPR_SMP_7DOT5CYC
 0x2

	)

76 
	#ADC_SMPR_SMP_12DOT5CYC
 0x3

	)

77 
	#ADC_SMPR_SMP_19DOT5CYC
 0x4

	)

78 
	#ADC_SMPR_SMP_39DOT5CYC
 0x5

	)

79 
	#ADC_SMPR_SMP_79DOT5CYC
 0x6

	)

80 
	#ADC_SMPR_SMP_160DOT5CYC
 0x7

	)

83 
BEGIN_DECLS


86 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l0/dma.h

31 #i‚de‡
LIBOPENCM3_DMA_H


32 
	#LIBOPENCM3_DMA_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dma_comm⁄_l1f013.h
>

	@libopencm3/include/libopencm3/stm32/l0/doc-stm32l0.h

	@libopencm3/include/libopencm3/stm32/l0/exti.h

36 #i‚de‡
LIBOPENCM3_EXTI_H


37 
	#LIBOPENCM3_EXTI_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/exti_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/l0/flash.h

30 #i‚de‡
LIBOPENCM3_FLASH_H


31 
	#LIBOPENCM3_FLASH_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/Êash_comm⁄_l01.h
>

38 
	#FLASH_OPTR
 
FLASH_OBR


	)

39 
	#FLASH_WRPROT1
 
FLASH_WRPR1


	)

40 
	#FLASH_WRPROT2
 
FLASH_WRPR2


	)

43 
	#FLASH_ACR_PRE_READ
 (1 << 6)

	)

44 
	#FLASH_ACR_DISAB_BUF
 (1 << 5)

	)

47 
	#FLASH_PECR_NZDISABLE
 (1 << 23)

	)

50 
	#FLASH_SR_RDERR
 (1 << 13)

	)

51 
	#FLASH_SR_NOTZEROERR
 (1 << 16)

	)

52 
	#FLASH_SR_FWWERR
 (1 << 17)

	)

55 
	#FLASH_OPTR_NBOOT1
 (1 << 31)

	)

57 
BEGIN_DECLS


59 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l0/gpio.h

31 #i‚de‡
LIBOPENCM3_GPIO_H


32 
	#LIBOPENCM3_GPIO_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_f24.h
>

44 
	#GPIO_BRR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x28)

	)

45 
	#GPIOA_BRR
 
	`GPIO_BRR
(
GPIOA
)

	)

46 
	#GPIOB_BRR
 
	`GPIO_BRR
(
GPIOB
)

	)

47 
	#GPIOC_BRR
 
	`GPIO_BRR
(
GPIOC
)

	)

48 
	#GPIOD_BRR
 
	`GPIO_BRR
(
GPIOD
)

	)

49 
	#GPIOH_BRR
 
	`GPIO_BRR
(
GPIOH
)

	)

58 
	#GPIO_OSPEED_LOW
 0x0

	)

59 
	#GPIO_OSPEED_MED
 0x1

	)

60 
	#GPIO_OSPEED_HIGH
 0x3

	)

71 
BEGIN_DECLS


73 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l0/i2c.h

31 #i‚de‡
LIBOPENCM3_I2C_H


32 
	#LIBOPENCM3_I2C_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/i2c_comm⁄_v2.h
>

	@libopencm3/include/libopencm3/stm32/l0/iwdg.h

31 #i‚de‡
LIBOPENCM3_IWDG_H


32 
	#LIBOPENCM3_IWDG_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/iwdg_comm⁄_v2.h
>

	@libopencm3/include/libopencm3/stm32/l0/memorymap.h

18 #i‚de‡
LIBOPENCM3_MEMORYMAP_H


19 
	#LIBOPENCM3_MEMORYMAP_H


	)

21 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

26 
	#PERIPH_BASE
 (0x40000000U)

	)

27 
	#IOPORT_BASE
 (0x50000000U)

	)

28 
	#INFO_BASE
 (0x1ff80000U)

	)

29 
	#PERIPH_BASE_APB1
 (
PERIPH_BASE
 + 0x00000)

	)

30 
	#PERIPH_BASE_APB2
 (
PERIPH_BASE
 + 0x10000)

	)

31 
	#PERIPH_BASE_AHB
 (
PERIPH_BASE
 + 0x20000)

	)

36 
	#TIM2_BASE
 (
PERIPH_BASE_APB1
 + 0x0000)

	)

37 
	#TIM3_BASE
 (
PERIPH_BASE_APB1
 + 0x0400)

	)

38 
	#TIM6_BASE
 (
PERIPH_BASE_APB1
 + 0x1000)

	)

39 
	#TIM7_BASE
 (
PERIPH_BASE_APB1
 + 0x1400)

	)

40 
	#LCD_BASE
 (
PERIPH_BASE_APB1
 + 0x2400)

	)

41 
	#RTC_BASE
 (
PERIPH_BASE_APB1
 + 0x2800)

	)

42 
	#WWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x2c00)

	)

43 
	#IWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x3000)

	)

44 
	#SPI2_BASE
 (
PERIPH_BASE_APB1
 + 0x3800)

	)

45 
	#USART2_BASE
 (
PERIPH_BASE_APB1
 + 0x4400)

	)

46 
	#LPUART1_BASE
 (
PERIPH_BASE_APB1
 + 0x4800)

	)

47 
	#I2C1_BASE
 (
PERIPH_BASE_APB1
 + 0x5400)

	)

48 
	#I2C2_BASE
 (
PERIPH_BASE_APB1
 + 0x5800)

	)

49 
	#USB_DEV_FS_BASE
 (
PERIPH_BASE_APB1
 + 0x5c00)

	)

50 
	#USB_PMA_BASE
 (
PERIPH_BASE_APB1
 + 0x6000)

	)

51 
	#CRS_BASE
 (
PERIPH_BASE_APB1
 + 0x6C00)

	)

52 
	#POWER_CONTROL_BASE
 (
PERIPH_BASE_APB1
 + 0x7000)

	)

53 
	#DAC_BASE
 (
PERIPH_BASE_APB1
 + 0x7400)

	)

54 
	#LPTIM1_BASE
 (
PERIPH_BASE_APB1
 + 0x7c00)

	)

58 
	#SYSCFG_BASE
 (
PERIPH_BASE_APB2
 + 0x0000)

	)

59 
	#EXTI_BASE
 (
PERIPH_BASE_APB2
 + 0x0400)

	)

60 
	#TIM21_BASE
 (
PERIPH_BASE_APB2
 + 0x0800)

	)

61 
	#TIM22_BASE
 (
PERIPH_BASE_APB2
 + 0x1400)

	)

62 
	#FIREWALL_BASE
 (
PERIPH_BASE_APB2
 + 0x1C00)

	)

63 
	#ADC1_BASE
 (
PERIPH_BASE_APB2
 + 0x2400)

	)

64 
	#SPI1_BASE
 (
PERIPH_BASE_APB2
 + 0x3000)

	)

65 
	#USART1_BASE
 (
PERIPH_BASE_APB2
 + 0x3800)

	)

66 
	#DBGMCU_BASE
 (
PERIPH_BASE_APB2
 + 0x5800)

	)

69 
	#DMA1_BASE
 (
PERIPH_BASE_AHB
 + 0x00000)

	)

70 
	#RCC_BASE
 (
PERIPH_BASE_AHB
 + 0x01000)

	)

71 
	#FLASH_MEM_INTERFACE_BASE
 (
PERIPH_BASE_AHB
 + 0x02000)

	)

72 
	#CRC_BASE
 (
PERIPH_BASE_AHB
 + 0x03000)

	)

73 
	#TSC_BASE
 (
PERIPH_BASE_AHB
 + 0x04000)

	)

74 
	#RNG_BASE
 (
PERIPH_BASE_AHB
 + 0x05000)

	)

75 
	#AES_BASE
 (
PERIPH_BASE_AHB
 + 0x06000)

	)

77 
	#GPIO_PORT_A_BASE
 (
IOPORT_BASE
 + 0x00000)

	)

78 
	#GPIO_PORT_B_BASE
 (
IOPORT_BASE
 + 0x00400)

	)

79 
	#GPIO_PORT_C_BASE
 (
IOPORT_BASE
 + 0x00800)

	)

80 
	#GPIO_PORT_D_BASE
 (
IOPORT_BASE
 + 0x00c00)

	)

81 
	#GPIO_PORT_H_BASE
 (
IOPORT_BASE
 + 0x01C00)

	)

84 
	#DESIG_FLASH_SIZE_BASE
 (
INFO_BASE
 + 0x7C)

	)

85 
	#DESIG_UNIQUE_ID_BASE
 (
INFO_BASE
 + 0x50)

	)

86 
	#DESIG_UNIQUE_ID0
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
)

	)

87 
	#DESIG_UNIQUE_ID1
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 4)

	)

88 
	#DESIG_UNIQUE_ID2
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 0x14)

	)

91 
	#ST_VREFINT_CAL
 
	`MMIO16
((
INFO_BASE
 + 0x78))

	)

92 
	#ST_TSENSE_CAL1_30C
 
	`MMIO16
((
INFO_BASE
 + 0x7A))

	)

93 
	#ST_TSENSE_CAL2_110C
 
	`MMIO16
((
INFO_BASE
 + 0x7E))

	)

	@libopencm3/include/libopencm3/stm32/l0/nvic.h

6 #i‚de‡
LIBOPENCM3_STM32_L0_NVIC_H


7 
	#LIBOPENCM3_STM32_L0_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_WWDG_IRQ
 0

	)

17 
	#NVIC_PVD_IRQ
 1

	)

18 
	#NVIC_RTC_IRQ
 2

	)

19 
	#NVIC_FLASH_IRQ
 3

	)

20 
	#NVIC_RCC_IRQ
 4

	)

21 
	#NVIC_EXTI0_1_IRQ
 5

	)

22 
	#NVIC_EXTI2_3_IRQ
 6

	)

23 
	#NVIC_EXTI4_15_IRQ
 7

	)

24 
	#NVIC_TSC_IRQ
 8

	)

25 
	#NVIC_DMA1_CHANNEL1_IRQ
 9

	)

26 
	#NVIC_DMA1_CHANNEL2_3_IRQ
 10

	)

27 
	#NVIC_DMA1_CHANNEL4_5_IRQ
 11

	)

28 
	#NVIC_ADC_COMP_IRQ
 12

	)

29 
	#NVIC_LPTIM1_IRQ
 13

	)

30 
	#NVIC_USART4_5_IRQ
 14

	)

31 
	#NVIC_TIM2_IRQ
 15

	)

32 
	#NVIC_TIM3_IRQ
 16

	)

33 
	#NVIC_TIM6_DAC_IRQ
 17

	)

34 
	#NVIC_TIM7_IRQ
 18

	)

35 
	#NVIC_RESERVED4_IRQ
 19

	)

36 
	#NVIC_TIM21_IRQ
 20

	)

37 
	#NVIC_I2C3_IRQ
 21

	)

38 
	#NVIC_TIM22_IRQ
 22

	)

39 
	#NVIC_I2C1_IRQ
 23

	)

40 
	#NVIC_I2C2_IRQ
 24

	)

41 
	#NVIC_SPI1_IRQ
 25

	)

42 
	#NVIC_SPI2_IRQ
 26

	)

43 
	#NVIC_USART1_IRQ
 27

	)

44 
	#NVIC_USART2_IRQ
 28

	)

45 
	#NVIC_LPUART1_AES_RNG_IRQ
 29

	)

46 
	#NVIC_LCD_IRQ
 30

	)

47 
	#NVIC_USB_IRQ
 31

	)

49 
	#NVIC_IRQ_COUNT
 32

	)

58 
BEGIN_DECLS


60 
wwdg_i§
();

61 
pvd_i§
();

62 
πc_i§
();

63 
Êash_i§
();

64 
rcc_i§
();

65 
exti0_1_i§
();

66 
exti2_3_i§
();

67 
exti4_15_i§
();

68 
tsc_i§
();

69 
dma1_ch™√l1_i§
();

70 
dma1_ch™√l2_3_i§
();

71 
dma1_ch™√l4_5_i§
();

72 
adc_comp_i§
();

73 
Õtim1_i§
();

74 
ußπ4_5_i§
();

75 
tim2_i§
();

76 
tim3_i§
();

77 
tim6_dac_i§
();

78 
tim7_i§
();

79 
ª£rved4_i§
();

80 
tim21_i§
();

81 
i2c3_i§
();

82 
tim22_i§
();

83 
i2c1_i§
();

84 
i2c2_i§
();

85 
•i1_i§
();

86 
•i2_i§
();

87 
ußπ1_i§
();

88 
ußπ2_i§
();

89 
Õu¨t1_´s_∫g_i§
();

90 
lcd_i§
();

91 
usb_i§
();

93 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l0/pwr.h

31 #i‚de‡
LIBOPENCM3_PWR_H


32 
	#LIBOPENCM3_PWR_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/pwr_comm⁄_v2.h
>

	@libopencm3/include/libopencm3/stm32/l0/rcc.h

40 #i‚de‡
LIBOPENCM3_RCC_H


41 
	#LIBOPENCM3_RCC_H


	)

43 
	~<°dboﬁ.h
>

44 
	~<°döt.h
>

45 
	~<lib›ícm3/°m32/pwr.h
>

49 
	#RCC_CR
 
	`MMIO32
(
RCC_BASE
 + 0x00)

	)

50 
	#RCC_ICSCR
 
	`MMIO32
(
RCC_BASE
 + 0x04)

	)

51 
	#RCC_CRRCR
 
	`MMIO32
(
RCC_BASE
 + 0x08)

	)

52 
	#RCC_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x0c)

	)

53 
	#RCC_CIER
 
	`MMIO32
(
RCC_BASE
 + 0x10)

	)

54 
	#RCC_CIFR
 
	`MMIO32
(
RCC_BASE
 + 0x14)

	)

55 
	#RCC_CICR
 
	`MMIO32
(
RCC_BASE
 + 0x18)

	)

56 
	#RCC_IOPRSTR
 
	`MMIO32
(
RCC_BASE
 + 0x1c)

	)

57 
	#RCC_AHBRSTR
 
	`MMIO32
(
RCC_BASE
 + 0x20)

	)

58 
	#RCC_APB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x24)

	)

59 
	#RCC_APB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x28)

	)

60 
	#RCC_IOPENR
 
	`MMIO32
(
RCC_BASE
 + 0x2c)

	)

61 
	#RCC_AHBENR
 
	`MMIO32
(
RCC_BASE
 + 0x30)

	)

62 
	#RCC_APB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x34)

	)

63 
	#RCC_APB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x38)

	)

64 
	#RCC_IOPSMEN
 
	`MMIO32
(
RCC_BASE
 + 0x3c)

	)

65 
	#RCC_AHBSMENR
 
	`MMIO32
(
RCC_BASE
 + 0x40)

	)

66 
	#RCC_APB2SMENR
 
	`MMIO32
(
RCC_BASE
 + 0x44)

	)

67 
	#RCC_APB1SMENR
 
	`MMIO32
(
RCC_BASE
 + 0x48)

	)

68 
	#RCC_CCIPR
 
	`MMIO32
(
RCC_BASE
 + 0x4c)

	)

69 
	#RCC_CSR
 
	`MMIO32
(
RCC_BASE
 + 0x50)

	)

73 
	#RCC_CR_PLLRDY
 (1 << 25)

	)

74 
	#RCC_CR_PLLON
 (1 << 24)

	)

75 
	#RCC_CR_RTCPRE_SHIFT
 20

	)

76 
	#RCC_CR_RTCPRE_MASK
 0x3

	)

77 
	#RCC_CR_RTCPRE_DIV2
 0

	)

78 
	#RCC_CR_RTCPRE_DIV4
 1

	)

79 
	#RCC_CR_RTCPRE_DIV8
 2

	)

80 
	#RCC_CR_RTCPRE_DIV16
 3

	)

81 
	#RCC_CR_CSSHSEON
 (1 << 19)

	)

82 
	#RCC_CR_HSEBYP
 (1 << 18)

	)

83 
	#RCC_CR_HSERDY
 (1 << 17)

	)

84 
	#RCC_CR_HSEON
 (1 << 16)

	)

85 
	#RCC_CR_MSIRDY
 (1 << 9)

	)

86 
	#RCC_CR_MSION
 (1 << 8)

	)

87 
	#RCC_CR_HSI16DIVF
 (1 << 4)

	)

88 
	#RCC_CR_HSI16DIVEN
 (1 << 3)

	)

89 
	#RCC_CR_HSI16RDY
 (1 << 2)

	)

90 
	#RCC_CR_HSI16KERON
 (1 << 1)

	)

91 
	#RCC_CR_HSI16ON
 (1 << 0)

	)

96 
	#RCC_ICSCR_MSITRIM_SHIFT
 24

	)

97 
	#RCC_ICSCR_MSITRIM_MASK
 0xff

	)

98 
	#RCC_ICSCR_MSICAL_SHIFT
 16

	)

99 
	#RCC_ICSCR_MSICAL_MASK
 0xff

	)

101 
	#RCC_ICSCR_MSIRANGE_SHIFT
 13

	)

102 
	#RCC_ICSCR_MSIRANGE_MASK
 0x7

	)

103 
	#RCC_ICSCR_MSIRANGE_65KHZ
 0x0

	)

104 
	#RCC_ICSCR_MSIRANGE_131KHZ
 0x1

	)

105 
	#RCC_ICSCR_MSIRANGE_262KHZ
 0x2

	)

106 
	#RCC_ICSCR_MSIRANGE_524KHZ
 0x3

	)

107 
	#RCC_ICSCR_MSIRANGE_1MHZ
 0x4

	)

108 
	#RCC_ICSCR_MSIRANGE_2MHZ
 0x5

	)

109 
	#RCC_ICSCR_MSIRANGE_4MHZ
 0x6

	)

111 
	#RCC_ICSCR_HSI16TRIM_SHIFT
 8

	)

112 
	#RCC_ICSCR_HSI16TRIM_MASK
 0x1f

	)

113 
	#RCC_ICSCR_HSI16CAL_SHIFT
 0

	)

114 
	#RCC_ICSCR_HSI16CAL_MASK
 0xff

	)

118 
	#RCC_CRRCR_HSI48CAL_SHIFT
 8

	)

119 
	#RCC_CRRCR_HSI48CAL_MASK
 0xff

	)

120 
	#RCC_CRRCR_HSI48RDY
 (1<<1)

	)

121 
	#RCC_CRRCR_HSI48ON
 (1<<0)

	)

126 
	#RCC_CFGR_MCOPRE_DIV1
 0

	)

127 
	#RCC_CFGR_MCOPRE_DIV2
 1

	)

128 
	#RCC_CFGR_MCOPRE_DIV4
 2

	)

129 
	#RCC_CFGR_MCOPRE_DIV8
 3

	)

130 
	#RCC_CFGR_MCOPRE_DIV16
 4

	)

133 
	#RCC_CFGR_MCO_NOCLK
 0x0

	)

134 
	#RCC_CFGR_MCO_SYSCLK
 0x1

	)

135 
	#RCC_CFGR_MCO_HSI16
 0x2

	)

136 
	#RCC_CFGR_MCO_MSI
 0x3

	)

137 
	#RCC_CFGR_MCO_HSE
 0x4

	)

138 
	#RCC_CFGR_MCO_PLL
 0x5

	)

139 
	#RCC_CFGR_MCO_LSI
 0x6

	)

140 
	#RCC_CFGR_MCO_LSE
 0x7

	)

141 
	#RCC_CFGR_MCO_HSI48
 0x8

	)

142 
	#RCC_CFGR_MCO_SHIFT
 24

	)

143 
	#RCC_CFGR_MCO_MASK
 0xf

	)

146 
	#RCC_CFGR_PLLDIV_DIV2
 0x1

	)

147 
	#RCC_CFGR_PLLDIV_DIV3
 0x2

	)

148 
	#RCC_CFGR_PLLDIV_DIV4
 0x3

	)

149 
	#RCC_CFGR_PLLDIV_SHIFT
 22

	)

150 
	#RCC_CFGR_PLLDIV_MASK
 0x3

	)

153 
	#RCC_CFGR_PLLMUL_MUL3
 0x0

	)

154 
	#RCC_CFGR_PLLMUL_MUL4
 0x1

	)

155 
	#RCC_CFGR_PLLMUL_MUL6
 0x2

	)

156 
	#RCC_CFGR_PLLMUL_MUL8
 0x3

	)

157 
	#RCC_CFGR_PLLMUL_MUL12
 0x4

	)

158 
	#RCC_CFGR_PLLMUL_MUL16
 0x5

	)

159 
	#RCC_CFGR_PLLMUL_MUL24
 0x6

	)

160 
	#RCC_CFGR_PLLMUL_MUL32
 0x7

	)

161 
	#RCC_CFGR_PLLMUL_MUL48
 0x8

	)

162 
	#RCC_CFGR_PLLMUL_SHIFT
 18

	)

163 
	#RCC_CFGR_PLLMUL_MASK
 0xf

	)

166 
	#RCC_CFGR_PLLSRC_HSI16_CLK
 0x0

	)

167 
	#RCC_CFGR_PLLSRC_HSE_CLK
 0x1

	)

170 
	#RCC_CFGR_STOPWUCK_MSI
 (0<<15)

	)

171 
	#RCC_CFGR_STOPWUCK_HSI16
 (1<<15)

	)

174 
	#RCC_CFGR_PPRE2_NODIV
 0x0

	)

175 
	#RCC_CFGR_PPRE2_DIV2
 0x4

	)

176 
	#RCC_CFGR_PPRE2_DIV4
 0x5

	)

177 
	#RCC_CFGR_PPRE2_DIV8
 0x6

	)

178 
	#RCC_CFGR_PPRE2_DIV16
 0x7

	)

179 
	#RCC_CFGR_PPRE2_MASK
 0x7

	)

180 
	#RCC_CFGR_PPRE2_SHIFT
 11

	)

183 
	#RCC_CFGR_PPRE1_NODIV
 0x0

	)

184 
	#RCC_CFGR_PPRE1_DIV2
 0x4

	)

185 
	#RCC_CFGR_PPRE1_DIV4
 0x5

	)

186 
	#RCC_CFGR_PPRE1_DIV8
 0x6

	)

187 
	#RCC_CFGR_PPRE1_DIV16
 0x7

	)

188 
	#RCC_CFGR_PPRE1_MASK
 0x7

	)

189 
	#RCC_CFGR_PPRE1_SHIFT
 8

	)

192 
	#RCC_CFGR_HPRE_NODIV
 0x0

	)

193 
	#RCC_CFGR_HPRE_DIV2
 0x8

	)

194 
	#RCC_CFGR_HPRE_DIV4
 0x9

	)

195 
	#RCC_CFGR_HPRE_DIV8
 0xa

	)

196 
	#RCC_CFGR_HPRE_DIV16
 0xb

	)

197 
	#RCC_CFGR_HPRE_DIV64
 0xc

	)

198 
	#RCC_CFGR_HPRE_DIV128
 0xd

	)

199 
	#RCC_CFGR_HPRE_DIV256
 0xe

	)

200 
	#RCC_CFGR_HPRE_DIV512
 0xf

	)

201 
	#RCC_CFGR_HPRE_MASK
 0xf

	)

202 
	#RCC_CFGR_HPRE_SHIFT
 4

	)

205 
	#RCC_CFGR_SWS_MSI
 0x0

	)

206 
	#RCC_CFGR_SWS_HSI16
 0x1

	)

207 
	#RCC_CFGR_SWS_HSE
 0x2

	)

208 
	#RCC_CFGR_SWS_PLL
 0x3

	)

209 
	#RCC_CFGR_SWS_MASK
 0x3

	)

210 
	#RCC_CFGR_SWS_SHIFT
 2

	)

213 
	#RCC_CFGR_SW_MSI
 0x0

	)

214 
	#RCC_CFGR_SW_HSI16
 0x1

	)

215 
	#RCC_CFGR_SW_HSE
 0x2

	)

216 
	#RCC_CFGR_SW_PLL
 0x3

	)

217 
	#RCC_CFGR_SW_MASK
 0x3

	)

218 
	#RCC_CFGR_SW_SHIFT
 0

	)

222 
	#RCC_CIER_CSSLSE
 (1 << 7)

	)

224 
	#RCC_CIER_HSI48RDYIE
 (1 << 6)

	)

225 
	#RCC_CIER_MSIRDYIE
 (1 << 5)

	)

226 
	#RCC_CIER_PLLRDYIE
 (1 << 4)

	)

227 
	#RCC_CIER_HSERDYIE
 (1 << 3)

	)

228 
	#RCC_CIER_HSI16RDYIE
 (1 << 2)

	)

229 
	#RCC_CIER_LSERDYIE
 (1 << 1)

	)

230 
	#RCC_CIER_LSIRDYIE
 (1 << 0)

	)

234 
	#RCC_CIFR_CSSHSEF
 (1 << 8)

	)

235 
	#RCC_CIFR_CSSLSEF
 (1 << 7)

	)

236 
	#RCC_CIFR_HSI48RDYF
 (1 << 6)

	)

237 
	#RCC_CIFR_MSIRDYF
 (1 << 5)

	)

238 
	#RCC_CIFR_PLLRDYF
 (1 << 4)

	)

239 
	#RCC_CIFR_HSERDYF
 (1 << 3)

	)

240 
	#RCC_CIFR_HSI16RDYF
 (1 << 2)

	)

241 
	#RCC_CIFR_LSERDYF
 (1 << 1)

	)

242 
	#RCC_CIFR_LSIRDYF
 (1 << 0)

	)

246 
	#RCC_CICR_CSSHSEC
 (1 << 8)

	)

247 
	#RCC_CICR_CSSLSEC
 (1 << 7)

	)

248 
	#RCC_CICR_HSI48RDYC
 (1 << 6)

	)

249 
	#RCC_CICR_MSIRDYC
 (1 << 5)

	)

250 
	#RCC_CICR_PLLRDYC
 (1 << 4)

	)

251 
	#RCC_CICR_HSERDYC
 (1 << 3)

	)

252 
	#RCC_CICR_HSI16RDYC
 (1 << 2)

	)

253 
	#RCC_CICR_LSERDYC
 (1 << 1)

	)

254 
	#RCC_CICR_LSIRDYC
 (1 << 0)

	)

258 
	#RCC_IOPPRSTR_IOPHRST
 (1<<7)

	)

259 
	#RCC_IOPPRSTR_IOPERST
 (1<<4)

	)

260 
	#RCC_IOPPRSTR_IOPDRST
 (1<<3)

	)

261 
	#RCC_IOPPRSTR_IOPCRST
 (1<<2)

	)

262 
	#RCC_IOPPRSTR_IOPBRST
 (1<<1)

	)

263 
	#RCC_IOPPRSTR_IOPARST
 (1<<0)

	)

267 
	#RCC_AHBRSTR_CRYPRST
 (1 << 24)

	)

268 
	#RCC_AHBRSTR_RNGRST
 (1 << 20)

	)

269 
	#RCC_AHBRSTR_TSCRST
 (1 << 16)

	)

270 
	#RCC_AHBRSTR_CRCRST
 (1 << 12)

	)

271 
	#RCC_AHBRSTR_MIFRST
 (1 << 8)

	)

272 
	#RCC_AHBRSTR_DMARST
 (1 << 0)

	)

276 
	#RCC_APB2RSTR_DBGRST
 (1 << 22)

	)

277 
	#RCC_APB2RSTR_USART1RST
 (1 << 14)

	)

278 
	#RCC_APB2RSTR_SPI1RST
 (1 << 12)

	)

279 
	#RCC_APB2RSTR_ADC1RST
 (1 << 9)

	)

280 
	#RCC_APB2RSTR_TIM22RST
 (1 << 5)

	)

281 
	#RCC_APB2RSTR_TIM21RST
 (1 << 2)

	)

282 
	#RCC_APB2RSTR_SYSCFGRST
 (1 << 0)

	)

286 
	#RCC_APB1RSTR_LPTIM1RST
 (1 << 31)

	)

287 
	#RCC_APB1RSTR_I2C3RST
 (1 << 30)

	)

288 
	#RCC_APB1RSTR_DACRST
 (1 << 29)

	)

289 
	#RCC_APB1RSTR_PWRRST
 (1 << 28)

	)

290 
	#RCC_APB1RSTR_CRSRST
 (1 << 27)

	)

291 
	#RCC_APB1RSTR_USBRST
 (1 << 23)

	)

292 
	#RCC_APB1RSTR_I2C2RST
 (1 << 22)

	)

293 
	#RCC_APB1RSTR_I2C1RST
 (1 << 21)

	)

294 
	#RCC_APB1RSTR_USART5RST
 (1 << 20)

	)

295 
	#RCC_APB1RSTR_USART4RST
 (1 << 19)

	)

296 
	#RCC_APB1RSTR_LPUART1RST
 (1 << 18)

	)

297 
	#RCC_APB1RSTR_USART2RST
 (1 << 17)

	)

298 
	#RCC_APB1RSTR_SPI2RST
 (1 << 14)

	)

299 
	#RCC_APB1RSTR_WWDGRST
 (1 << 11)

	)

300 
	#RCC_APB1RSTR_LCDRST
 (1 << 9)

	)

301 
	#RCC_APB1RSTR_TIM7RST
 (1 << 5)

	)

302 
	#RCC_APB1RSTR_TIM6RST
 (1 << 4)

	)

303 
	#RCC_APB1RSTR_TIM3RST
 (1 << 1)

	)

304 
	#RCC_APB1RSTR_TIM2RST
 (1 << 0)

	)

308 
	#RCC_IOPENR_IOPHEN
 (1<<7)

	)

309 
	#RCC_IOPENR_IOPEEN
 (1<<4)

	)

310 
	#RCC_IOPENR_IOPDEN
 (1<<3)

	)

311 
	#RCC_IOPENR_IOPCEN
 (1<<2)

	)

312 
	#RCC_IOPENR_IOPBEN
 (1<<1)

	)

313 
	#RCC_IOPENR_IOPAEN
 (1<<0)

	)

321 
	#RCC_AHBENR_CRYPEN
 (1 << 24)

	)

322 
	#RCC_AHBENR_RNGEN
 (1 << 20)

	)

323 
	#RCC_AHBENR_TSCEN
 (1 << 16)

	)

324 
	#RCC_AHBENR_CRCEN
 (1 << 12)

	)

325 
	#RCC_AHBENR_MIFEN
 (1 << 8)

	)

326 
	#RCC_AHBENR_DMAEN
 (1 << 0)

	)

335 
	#RCC_APB2ENR_DBGEN
 (1 << 22)

	)

336 
	#RCC_APB2ENR_USART1EN
 (1 << 14)

	)

337 
	#RCC_APB2ENR_SPI1EN
 (1 << 12)

	)

338 
	#RCC_APB2ENR_ADC1EN
 (1 << 9)

	)

339 
	#RCC_APB2ENR_MIFEN
 (1 << 7)

	)

340 
	#RCC_APB2ENR_TIM22EN
 (1 << 5)

	)

341 
	#RCC_APB2ENR_TIM21EN
 (1 << 2)

	)

342 
	#RCC_APB2ENR_SYSCFGEN
 (1 << 0)

	)

351 
	#RCC_APB1ENR_LPTIM1EN
 (1 << 31)

	)

352 
	#RCC_APB1ENR_DACEN
 (1 << 29)

	)

353 
	#RCC_APB1ENR_PWREN
 (1 << 28)

	)

354 
	#RCC_APB1ENR_CRSEN
 (1 << 27)

	)

355 
	#RCC_APB1ENR_USBEN
 (1 << 23)

	)

356 
	#RCC_APB1ENR_I2C2EN
 (1 << 22)

	)

357 
	#RCC_APB1ENR_I2C1EN
 (1 << 21)

	)

358 
	#RCC_APB1ENR_USART5EN
 (1 << 20)

	)

359 
	#RCC_APB1ENR_USART4EN
 (1 << 19)

	)

360 
	#RCC_APB1ENR_LPUART1EN
 (1 << 18)

	)

361 
	#RCC_APB1ENR_USART2EN
 (1 << 17)

	)

362 
	#RCC_APB1ENR_SPI2EN
 (1 << 14)

	)

363 
	#RCC_APB1ENR_WWDGEN
 (1 << 11)

	)

364 
	#RCC_APB1ENR_LCDEN
 (1 << 9)

	)

365 
	#RCC_APB1ENR_TIM7EN
 (1 << 5)

	)

366 
	#RCC_APB1ENR_TIM6EN
 (1 << 4)

	)

367 
	#RCC_APB1ENR_TIM3EN
 (1 << 1)

	)

368 
	#RCC_APB1ENR_TIM2EN
 (1 << 0)

	)

373 
	#RCC_IOPSMENR_IOPHSMEN
 (1<<7)

	)

374 
	#RCC_IOPSMENR_IOPESMEN
 (1<<4)

	)

375 
	#RCC_IOPSMENR_IOPDSMEN
 (1<<3)

	)

376 
	#RCC_IOPSMENR_IOPCSMEN
 (1<<2)

	)

377 
	#RCC_IOPSMENR_IOPBSMEN
 (1<<1)

	)

378 
	#RCC_IOPSMENR_IOPASMEN
 (1<<0)

	)

382 
	#RCC_AHBSMENR_CRYPSMEN
 (1 << 24)

	)

383 
	#RCC_AHBSMENR_RNGSMEN
 (1 << 20)

	)

384 
	#RCC_AHBSMENR_TSCSMEN
 (1 << 16)

	)

385 
	#RCC_AHBSMENR_CRCSMEN
 (1 << 12)

	)

386 
	#RCC_AHBSMENR_MIFSMEN
 (1 << 8)

	)

387 
	#RCC_AHBSMENR_DMASMEN
 (1 << 0)

	)

391 
	#RCC_APB2SMENR_DBGSMEN
 (1 << 22)

	)

392 
	#RCC_APB2SMENR_USART1SMEN
 (1 << 14)

	)

393 
	#RCC_APB2SMENR_SPI1SMEN
 (1 << 12)

	)

394 
	#RCC_APB2SMENR_ADC1SMEN
 (1 << 9)

	)

395 
	#RCC_APB2SMENR_MIFSMEN
 (1 << 7)

	)

396 
	#RCC_APB2SMENR_TIM22SMEN
 (1 << 5)

	)

397 
	#RCC_APB2SMENR_TIM21SMEN
 (1 << 2)

	)

398 
	#RCC_APB2SMENR_SYSCFGSMEN
 (1 << 0)

	)

402 
	#RCC_APB1SMENR_LPTIM1SMEN
 (1 << 31)

	)

403 
	#RCC_APB1SMENR_I2C3SMEN
 (1 << 30)

	)

404 
	#RCC_APB1SMENR_DACSMEN
 (1 << 29)

	)

405 
	#RCC_APB1SMENR_PWRSMEN
 (1 << 28)

	)

406 
	#RCC_APB1SMENR_CRSSMEN
 (1 << 27)

	)

407 
	#RCC_APB1SMENR_USBSMEN
 (1 << 23)

	)

408 
	#RCC_APB1SMENR_I2C2SMEN
 (1 << 22)

	)

409 
	#RCC_APB1SMENR_I2C1SMEN
 (1 << 21)

	)

410 
	#RCC_APB1SMENR_USART5SMEN
 (1 << 20)

	)

411 
	#RCC_APB1SMENR_USART4SMEN
 (1 << 19)

	)

412 
	#RCC_APB1SMENR_LPUART1SMEN
 (1 << 18)

	)

413 
	#RCC_APB1SMENR_USART2SMEN
 (1 << 17)

	)

414 
	#RCC_APB1SMENR_SPI2SMEN
 (1 << 14)

	)

415 
	#RCC_APB1SMENR_WWDGSMEN
 (1 << 11)

	)

416 
	#RCC_APB1SMENR_LCDSMEN
 (1 << 9)

	)

417 
	#RCC_APB1SMENR_TIM7SMEN
 (1 << 5)

	)

418 
	#RCC_APB1SMENR_TIM6SMEN
 (1 << 4)

	)

419 
	#RCC_APB1SMENR_TIM3SMEN
 (1 << 1)

	)

420 
	#RCC_APB1SMENR_TIM2SMEN
 (1 << 0)

	)

424 
	#RCC_CCIPR_HSI48SEL
 (1<<26)

	)

426 
	#RCC_CCIPR_LPTIM1SEL_APB
 0

	)

427 
	#RCC_CCIPR_LPTIM1SEL_LSI
 1

	)

428 
	#RCC_CCIPR_LPTIM1SEL_HSI16
 2

	)

429 
	#RCC_CCIPR_LPTIM1SEL_LSE
 3

	)

430 
	#RCC_CCIPR_LPTIM1SEL_SHIFT
 18

	)

431 
	#RCC_CCIPR_LPTIM1SEL_MASK
 0x3

	)

433 
	#RCC_CCIPR_I2C3SEL_APB
 0

	)

434 
	#RCC_CCIPR_I2C3SEL_SYS
 1

	)

435 
	#RCC_CCIPR_I2C3SEL_HSI16
 2

	)

436 
	#RCC_CCIPR_I2C3SEL_SHIFT
 16

	)

437 
	#RCC_CCIPR_I2C3SEL_MASK
 0x3

	)

439 
	#RCC_CCIPR_I2C1SEL_APB
 0

	)

440 
	#RCC_CCIPR_I2C1SEL_SYS
 1

	)

441 
	#RCC_CCIPR_I2C1SEL_HSI16
 2

	)

442 
	#RCC_CCIPR_I2C1SEL_SHIFT
 12

	)

443 
	#RCC_CCIPR_I2C1SEL_MASK
 0x3

	)

445 
	#RCC_CCIPR_LPUART1SEL_APB
 0

	)

446 
	#RCC_CCIPR_LPUART1SEL_SYS
 1

	)

447 
	#RCC_CCIPR_LPUART1SEL_HSI16
 2

	)

448 
	#RCC_CCIPR_LPUART1SEL_LSE
 3

	)

449 
	#RCC_CCIPR_LPUART1SEL_SHIFT
 10

	)

450 
	#RCC_CCIPR_LPUART1SEL_MASK
 0x3

	)

452 
	#RCC_CCIPR_USART2SEL_APB
 0

	)

453 
	#RCC_CCIPR_USART2SEL_SYS
 1

	)

454 
	#RCC_CCIPR_USART2SEL_HSI16
 2

	)

455 
	#RCC_CCIPR_USART2SEL_LSE
 3

	)

456 
	#RCC_CCIPR_USART2SEL_SHIFT
 2

	)

457 
	#RCC_CCIPR_USART2SEL_MASK
 0x3

	)

459 
	#RCC_CCIPR_USART1SEL_APB
 0

	)

460 
	#RCC_CCIPR_USART1SEL_SYS
 1

	)

461 
	#RCC_CCIPR_USART1SEL_HSI16
 2

	)

462 
	#RCC_CCIPR_USART1SEL_LSE
 3

	)

463 
	#RCC_CCIPR_USART1SEL_SHIFT
 0

	)

464 
	#RCC_CCIPR_USART1SEL_MASK
 0x3

	)

468 
	#RCC_CSR_LPWRRSTF
 (1 << 31)

	)

469 
	#RCC_CSR_WWDGRSTF
 (1 << 30)

	)

470 
	#RCC_CSR_IWDGRSTF
 (1 << 29)

	)

471 
	#RCC_CSR_SFTRSTF
 (1 << 28)

	)

472 
	#RCC_CSR_PORRSTF
 (1 << 27)

	)

473 
	#RCC_CSR_PINRSTF
 (1 << 26)

	)

474 
	#RCC_CSR_OBLRSTF
 (1 << 25)

	)

475 
	#RCC_CSR_FWRSTF
 (1 << 24)

	)

476 
	#RCC_CSR_RMVF
 (1 << 23)

	)

477 
	#RCC_CSR_RESET_FLAGS
 (
RCC_CSR_LPWRRSTF
 | 
RCC_CSR_WWDGRSTF
 |\

478 
RCC_CSR_IWDGRSTF
 | 
RCC_CSR_SFTRSTF
 | 
RCC_CSR_PORRSTF
 |\

479 
RCC_CSR_PINRSTF
 | 
RCC_CSR_OBLRSTF
 | 
RCC_CSR_FWRSTF
)

	)

480 
	#RCC_CSR_RTCRST
 (1 << 19)

	)

481 
	#RCC_CSR_RTCEN
 (1 << 18)

	)

482 
	#RCC_CSR_RTCSEL_SHIFT
 (16)

	)

483 
	#RCC_CSR_RTCSEL_MASK
 (0x3)

	)

484 
	#RCC_CSR_RTCSEL_NONE
 (0x0)

	)

485 
	#RCC_CSR_RTCSEL_LSE
 (0x1)

	)

486 
	#RCC_CSR_RTCSEL_LSI
 (0x2)

	)

487 
	#RCC_CSR_RTCSEL_HSE
 (0x3)

	)

488 
	#RCC_CSR_CSSLSED
 (1 << 14)

	)

489 
	#RCC_CSR_CSSLSEON
 (1 << 13)

	)

490 
	#RCC_CSR_LSEDRV_SHIFT
 11

	)

491 
	#RCC_CSR_LSEDRV_MASK
 0x3

	)

492 
	#RCC_CSR_LSEDRV_LOWEST
 0

	)

493 
	#RCC_CSR_LSEDRV_MLOW
 1

	)

494 
	#RCC_CSR_LSEDRV_MHIGH
 2

	)

495 
	#RCC_CSR_LSEDRV_HIGHEST
 3

	)

496 
	#RCC_CSR_LSEBYP
 (1 << 10)

	)

497 
	#RCC_CSR_LSERDY
 (1 << 9)

	)

498 
	#RCC_CSR_LSEON
 (1 << 8)

	)

499 
	#RCC_CSR_LSIRDY
 (1 << 1)

	)

500 
	#RCC_CSR_LSION
 (1 << 0)

	)

502 
	srcc_˛ock_sˇÀ
 {

503 
uöt8_t
 
	m∂l_mul
;

504 
uöt16_t
 
	m∂l_div
;

505 
uöt8_t
 
	m∂l_sour˚
;

506 
uöt8_t
 
	mÊash_waô°©es
;

507 
pwr_vos_sˇÀ
 
	mvﬁège_sˇÀ
;

508 
uöt8_t
 
	mh¥e
;

509 
uöt8_t
 
	mµª1
;

510 
uöt8_t
 
	mµª2
;

512 
uöt32_t
 
	mahb_‰equícy
;

513 
uöt32_t
 
	m≠b1_‰equícy
;

514 
uöt32_t
 
	m≠b2_‰equícy
;

515 
uöt8_t
 
	mmsi_ønge
;

519 
uöt32_t
 
rcc_ahb_‰equícy
;

520 
uöt32_t
 
rcc_≠b1_‰equícy
;

521 
uöt32_t
 
rcc_≠b2_‰equícy
;

525 
	ercc_osc
 {

526 
	mRCC_PLL
, 
	mRCC_HSE
, 
	mRCC_HSI48
, 
	mRCC_HSI16
, 
	mRCC_MSI
, 
	mRCC_LSE
, 
	mRCC_LSI


530 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

532 
	ercc_≥rùh_˛kí
 {

534 
	mRCC_GPIOA
 = 
_REG_BIT
(0x2c, 0),

535 
	mRCC_GPIOB
 = 
_REG_BIT
(0x2c, 1),

536 
	mRCC_GPIOC
 = 
_REG_BIT
(0x2c, 2),

537 
	mRCC_GPIOD
 = 
_REG_BIT
(0x2c, 3),

538 
	mRCC_GPIOE
 = 
_REG_BIT
(0x2c, 4),

539 
	mRCC_GPIOH
 = 
_REG_BIT
(0x2c, 7),

542 
	mRCC_DMA
 = 
_REG_BIT
(0x30, 0),

543 
	mRCC_MIF
 = 
_REG_BIT
(0x30, 8),

544 
	mRCC_CRC
 = 
_REG_BIT
(0x30, 12),

545 
	mRCC_TSC
 = 
_REG_BIT
(0x30, 16),

546 
	mRCC_RNG
 = 
_REG_BIT
(0x30, 20),

547 
	mRCC_CRYPT
 = 
_REG_BIT
(0x30, 24),

550 
	mRCC_SYSCFG
 = 
_REG_BIT
(0x34, 0),

551 
	mRCC_TIM21
 = 
_REG_BIT
(0x34, 2),

552 
	mRCC_TIM22
 = 
_REG_BIT
(0x34, 5),

553 
	mRCC_FW
 = 
_REG_BIT
(0x34, 7),

554 
	mRCC_ADC1
 = 
_REG_BIT
(0x34, 9),

555 
	mRCC_SPI1
 = 
_REG_BIT
(0x34, 12),

556 
	mRCC_USART1
 = 
_REG_BIT
(0x34, 14),

557 
	mRCC_DBG
 = 
_REG_BIT
(0x34, 22),

560 
	mRCC_TIM2
 = 
_REG_BIT
(0x38, 0),

561 
	mRCC_TIM3
 = 
_REG_BIT
(0x38, 1),

562 
	mRCC_TIM6
 = 
_REG_BIT
(0x38, 4),

563 
	mRCC_TIM7
 = 
_REG_BIT
(0x38, 5),

564 
	mRCC_LCD
 = 
_REG_BIT
(0x38, 9),

565 
	mRCC_WWDG
 = 
_REG_BIT
(0x38, 11),

566 
	mRCC_SPI2
 = 
_REG_BIT
(0x38, 14),

567 
	mRCC_USART2
 = 
_REG_BIT
(0x38, 17),

568 
	mRCC_LPUART1
 = 
_REG_BIT
(0x38, 18),

569 
	mRCC_USART4
 = 
_REG_BIT
(0x38, 19),

570 
	mRCC_USART5
 = 
_REG_BIT
(0x38, 20),

571 
	mRCC_I2C1
 = 
_REG_BIT
(0x38, 21),

572 
	mRCC_I2C2
 = 
_REG_BIT
(0x38, 22),

573 
	mRCC_USB
 = 
_REG_BIT
(0x38, 23),

574 
	mRCC_CRS
 = 
_REG_BIT
(0x38, 27),

575 
	mRCC_PWR
 = 
_REG_BIT
(0x38, 28),

576 
	mRCC_DAC
 = 
_REG_BIT
(0x38, 29),

577 
	mRCC_I2C3
 = 
_REG_BIT
(0x38, 30),

578 
	mRCC_LPTIM1
 = 
_REG_BIT
(0x38, 31),

581 
	mSCC_GPIOA
 = 
_REG_BIT
(0x3c, 0),

582 
	mSCC_GPIOB
 = 
_REG_BIT
(0x3c, 1),

583 
	mSCC_GPIOC
 = 
_REG_BIT
(0x3c, 2),

584 
	mSCC_GPIOD
 = 
_REG_BIT
(0x3c, 3),

585 
	mSCC_GPIOE
 = 
_REG_BIT
(0x3c, 4),

586 
	mSCC_GPIOH
 = 
_REG_BIT
(0x3c, 7),

589 
	mSCC_DMA
 = 
_REG_BIT
(0x40, 0),

590 
	mSCC_MIF
 = 
_REG_BIT
(0x40, 8),

591 
	mSCC_SRAM
 = 
_REG_BIT
(0x40, 12),

592 
	mSCC_CRC
 = 
_REG_BIT
(0x40, 12),

593 
	mSCC_TSC
 = 
_REG_BIT
(0x40, 16),

594 
	mSCC_RNG
 = 
_REG_BIT
(0x40, 20),

595 
	mSCC_CRYPT
 = 
_REG_BIT
(0x40, 24),

598 
	mSCC_SYSCFG
 = 
_REG_BIT
(0x44, 0),

599 
	mSCC_TIM21
 = 
_REG_BIT
(0x44, 2),

600 
	mSCC_TIM22
 = 
_REG_BIT
(0x44, 5),

601 
	mSCC_ADC1
 = 
_REG_BIT
(0x44, 9),

602 
	mSCC_SPI1
 = 
_REG_BIT
(0x44, 12),

603 
	mSCC_USART1
 = 
_REG_BIT
(0x44, 14),

604 
	mSCC_DBG
 = 
_REG_BIT
(0x44, 22),

607 
	mSCC_TIM2
 = 
_REG_BIT
(0x48, 0),

608 
	mSCC_TIM3
 = 
_REG_BIT
(0x48, 1),

609 
	mSCC_TIM6
 = 
_REG_BIT
(0x48, 4),

610 
	mSCC_TIM7
 = 
_REG_BIT
(0x48, 5),

611 
	mSCC_LCD
 = 
_REG_BIT
(0x48, 9),

612 
	mSCC_WWDG
 = 
_REG_BIT
(0x48, 11),

613 
	mSCC_SPI2
 = 
_REG_BIT
(0x48, 14),

614 
	mSCC_USART2
 = 
_REG_BIT
(0x48, 17),

615 
	mSCC_LPUART1
 = 
_REG_BIT
(0x48, 18),

616 
	mSCC_USART4
 = 
_REG_BIT
(0x48, 19),

617 
	mSCC_USART5
 = 
_REG_BIT
(0x48, 20),

618 
	mSCC_I2C1
 = 
_REG_BIT
(0x48, 21),

619 
	mSCC_I2C2
 = 
_REG_BIT
(0x48, 22),

620 
	mSCC_USB
 = 
_REG_BIT
(0x48, 23),

621 
	mSCC_CRS
 = 
_REG_BIT
(0x48, 27),

622 
	mSCC_PWR
 = 
_REG_BIT
(0x48, 28),

623 
	mSCC_DAC
 = 
_REG_BIT
(0x48, 29),

624 
	mSCC_I2C3
 = 
_REG_BIT
(0x48, 30),

625 
	mSCC_LPTIM1
 = 
_REG_BIT
(0x48, 31),

628 
	ercc_≥rùh_r°
 {

630 
	mRST_GPIOA
 = 
_REG_BIT
(0x1c, 0),

631 
	mRST_GPIOB
 = 
_REG_BIT
(0x1c, 1),

632 
	mRST_GPIOC
 = 
_REG_BIT
(0x1c, 2),

633 
	mRST_GPIOD
 = 
_REG_BIT
(0x1c, 3),

634 
	mRST_GPIOE
 = 
_REG_BIT
(0x1c, 4),

635 
	mRST_GPIOH
 = 
_REG_BIT
(0x1c, 7),

638 
	mRST_DMA
 = 
_REG_BIT
(0x20, 0),

639 
	mRST_MIF
 = 
_REG_BIT
(0x20, 8),

640 
	mRST_CRC
 = 
_REG_BIT
(0x20, 12),

641 
	mRST_TSC
 = 
_REG_BIT
(0x20, 16),

642 
	mRST_RNG
 = 
_REG_BIT
(0x20, 20),

643 
	mRST_CRYPT
 = 
_REG_BIT
(0x20, 24),

646 
	mRST_SYSCFG
 = 
_REG_BIT
(0x24, 0),

647 
	mRST_TIM21
 = 
_REG_BIT
(0x24, 2),

648 
	mRST_TIM22
 = 
_REG_BIT
(0x24, 5),

649 
	mRST_ADC1
 = 
_REG_BIT
(0x24, 9),

650 
	mRST_SPI1
 = 
_REG_BIT
(0x24, 12),

651 
	mRST_USART1
 = 
_REG_BIT
(0x24, 14),

652 
	mRST_DBG
 = 
_REG_BIT
(0x24, 22),

655 
	mRST_TIM2
 = 
_REG_BIT
(0x28, 0),

656 
	mRST_TIM3
 = 
_REG_BIT
(0x28, 1),

657 
	mRST_TIM6
 = 
_REG_BIT
(0x28, 4),

658 
	mRST_TIM7
 = 
_REG_BIT
(0x28, 5),

659 
	mRST_LCD
 = 
_REG_BIT
(0x28, 9),

660 
	mRST_WWDG
 = 
_REG_BIT
(0x28, 11),

661 
	mRST_SPI2
 = 
_REG_BIT
(0x28, 14),

662 
	mRST_USART2
 = 
_REG_BIT
(0x28, 17),

663 
	mRST_LPUART1
 = 
_REG_BIT
(0x28, 18),

664 
	mRST_USART4
 = 
_REG_BIT
(0x28, 19),

665 
	mRST_USART5
 = 
_REG_BIT
(0x28, 20),

666 
	mRST_I2C1
 = 
_REG_BIT
(0x28, 21),

667 
	mRST_I2C2
 = 
_REG_BIT
(0x28, 22),

668 
	mRST_USB
 = 
_REG_BIT
(0x28, 23),

669 
	mRST_CRS
 = 
_REG_BIT
(0x28, 27),

670 
	mRST_PWR
 = 
_REG_BIT
(0x28, 28),

671 
	mRST_DAC
 = 
_REG_BIT
(0x28, 29),

672 
	mRST_I2C3
 = 
_REG_BIT
(0x28, 30),

673 
	mRST_LPTIM1
 = 
_REG_BIT
(0x28, 31),

675 
	~<lib›ícm3/°m32/comm⁄/rcc_comm⁄_Æl.h
>

677 
BEGIN_DECLS


679 
rcc_osc_⁄
(
rcc_osc
 
osc
);

680 
rcc_osc_off
(
rcc_osc
 
osc
);

681 
rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
);

682 
rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
);

683 
rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
);

684 
rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
);

685 
rcc_£t_hsi48_sour˚_rc48
();

686 
rcc_£t_hsi48_sour˚_∂l
();

687 
rcc_£t_sys˛k_sour˚
(
rcc_osc
 
osc
);

688 
rcc_£t_∂l_mu…ùlõr
(
uöt32_t
 
Á˘‹
);

689 
rcc_£t_∂l_dividî
(
uöt32_t
 
Á˘‹
);

690 
rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
);

691 
rcc_£t_µª2
(
uöt32_t
 
µª2
);

692 
rcc_£t_µª1
(
uöt32_t
 
µª1
);

693 
rcc_£t_h¥e
(
uöt32_t
 
h¥e
);

694 
rcc_˛ock_£tup_∂l
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
);

696 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l0/rng.h

18 #i‚de‡
LIBOPENCM3_RNG_H


19 
	#LIBOPENCM3_RNG_H


	)

21 
	~<lib›ícm3/°m32/comm⁄/∫g_comm⁄_v1.h
>

	@libopencm3/include/libopencm3/stm32/l0/rtc.h

29 #i‚de‡
LIBOPENCM3_RTC_H


30 
	#LIBOPENCM3_RTC_H


	)

32 
	~<lib›ícm3/°m32/comm⁄/πc_comm⁄_l1f024.h
>

	@libopencm3/include/libopencm3/stm32/l0/spi.h

31 #i‚de‡
LIBOPENCM3_SPI_H


32 
	#LIBOPENCM3_SPI_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_v1_‰f.h
>

	@libopencm3/include/libopencm3/stm32/l0/st_usbfs.h

21 #i‚de‡
LIBOPENCM3_ST_USBFS_H


22 #îr‹ 
Do
 
nŸ
 
ö˛ude
 
dúe˘ly
 !

25 
	~<lib›ícm3/°m32/comm⁄/°_usbfs_v2.h
>

	@libopencm3/include/libopencm3/stm32/l0/syscfg.h

35 #i‚de‡
LIBOPENCM3_SYSCFG_H


36 
	#LIBOPENCM3_SYSCFG_H


	)

47 
	#SYSCFG_CFGR1
 
	`MMIO32
(
SYSCFG_BASE
 + 0x00)

	)

48 
	#SYSCFG_CFGR2
 
	`MMIO32
(
SYSCFG_BASE
 + 0x04)

	)

49 
	#SYSCFG_EXTICR
(
i
Ë
	`MMIO32
(
SYSCFG_BASE
 + 0x08 + (i)*4)

	)

50 
	#SYSCFG_EXTICR1
 
	`SYSCFG_EXTICR
(0)

	)

51 
	#SYSCFG_EXTICR2
 
	`SYSCFG_EXTICR
(1)

	)

52 
	#SYSCFG_EXTICR3
 
	`SYSCFG_EXTICR
(2)

	)

53 
	#SYSCFG_EXTICR4
 
	`SYSCFG_EXTICR
(3)

	)

54 
	#COMP1_CTRL
 
	`MMIO32
(
SYSCFG_BASE
 + 0x18)

	)

55 
	#COMP2_CTRL
 
	`MMIO32
(
SYSCFG_BASE
 + 0x1C)

	)

56 
	#SYSCFG_CFGR3
 
	`MMIO32
(
SYSCFG_BASE
 + 0x20)

	)

64 
	#SYSCFG_CFGR1_MEM_MODE_SHIFT
 0

	)

65 
	#SYSCFG_CFGR1_MEM_MODE
 (3 << 
SYSCFG_CFGR1_MEM_MODE_SHIFT
)

	)

66 
	#SYSCFG_CFGR1_MEM_MODE_FLASH
 (0 << 
SYSCFG_CFGR1_MEM_MODE_SHIFT
)

	)

67 
	#SYSCFG_CFGR1_MEM_MODE_SYSTEM
 (1 << 
SYSCFG_CFGR1_MEM_MODE_SHIFT
)

	)

68 
	#SYSCFG_CFGR1_MEM_MODE_SRAM
 (3 << 
SYSCFG_CFGR1_MEM_MODE_SHIFT
)

	)

70 
	#SYSCFG_CFGR1_UFB
 (1<<3)

	)

72 
	#SYSCFG_CFGR1_BOOT_MODE_SHIFT
 8

	)

73 
	#SYSCFG_CFGR1_BOOT_MODE
 (3 << 
SYSCFG_CFGR1_BOOT_MODE_SHIFT
)

	)

74 
	#SYSCFG_CFGR1_BOOT_MODE_FLASH
 (0 << 
SYSCFG_CFGR1_BOOT_MODE_SHIFT
)

	)

75 
	#SYSCFG_CFGR1_BOOT_MODE_SYSTEM
 (1 << 
SYSCFG_CFGR1_BOOT_MODE_SHIFT
)

	)

76 
	#SYSCFG_CFGR1_BOOT_MODE_SRAM
 (3 << 
SYSCFG_CFGR1_BOOT_MODE_SHIFT
)

	)

80 
	#SYSCFG_CFGR2_FWDIS
 (1 << 0)

	)

82 
	#SYSCFG_CFGR2_I2C_PB6_FMP
 (1 << 8)

	)

83 
	#SYSCFG_CFGR2_I2C_PB7_FMP
 (1 << 9)

	)

84 
	#SYSCFG_CFGR2_I2C_PB8_FMP
 (1 << 10)

	)

85 
	#SYSCFG_CFGR2_I2C_PB9_FMP
 (1 << 11)

	)

87 
	#SYSCFG_CFGR2_I2C1_FMP
 (1 << 12)

	)

88 
	#SYSCFG_CFGR2_I2C2_FMP
 (1 << 13)

	)

89 
	#SYSCFG_CFGR2_I2C3_FMP
 (1 << 14)

	)

93 
	#SYSCFG_CFGR3_EN_VREFINT
 (1 << 0)

	)

95 
	#SYSCFG_CFGR3_SEL_VREF_OUT_SHIFT
 4

	)

96 
	#SYSCFG_CFGR3_SEL_VREF_OUT
 (3 << 
SYSCFG_CFGR3_EN_VREFINT_SHIFT
)

	)

97 
	#SYSCFG_CFGR3_SEL_VREF_OUT_PB0
 (1 << 
SYSCFG_CFGR3_EN_VREFINT_SHIFT
)

	)

98 
	#SYSCFG_CFGR3_SEL_VREF_OUT_PB1
 (2 << 
SYSCFG_CFGR3_EN_VREFINT_SHIFT
)

	)

100 
	#SYSCFG_CFGR3_ENBUF_VREFINT_ADC
 (1 << 8)

	)

101 
	#SYSCFG_CFGR3_ENBUF_SENSOR_ADC
 (1 << 9)

	)

102 
	#SYSCFG_CFGR3_ENBUF_VREFINT_COMP
 (1 << 12)

	)

103 
	#SYSCFG_CFGR3_ENREF_HSI48
 (1 << 13)

	)

105 
	#SYSCFG_CFGR3_REF_HSI48_RDYF
 (1 << 26)

	)

106 
	#SYSCFG_CFGR3_SENSOR_ADC_RDYF
 (1 << 27)

	)

107 
	#SYSCFG_CFGR3_VREFINT_ADC_RDYF
 (1 << 28)

	)

108 
	#SYSCFG_CFGR3_VREFINT_COMP_RDYF
 (1 << 29)

	)

109 
	#SYSCFG_CFGR3_VREFINT_RDYF
 (1 << 30)

	)

110 
	#SYSCFG_CFGR3_REF_LOCK
 (1 << 31)

	)

114 
	#SYSCFG_EXTICR_GPIOA
 0

	)

115 
	#SYSCFG_EXTICR_GPIOB
 1

	)

116 
	#SYSCFG_EXTICR_GPIOC
 2

	)

117 
	#SYSCFG_EXTICR_GPIOD
 3

	)

118 
	#SYSCFG_EXTICR_GPIOE
 4

	)

119 
	#SYSCFG_EXTICR_GPIOH
 5

	)

129 
BEGIN_DECLS


131 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l0/timer.h

35 #i‚de‡
LIBOPENCM3_TIMER_H


36 
	#LIBOPENCM3_TIMER_H


	)

38 
	~<lib›ícm3/°m32/comm⁄/timî_comm⁄_Æl.h
>

42 
	#TIM_OR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x50)

	)

43 
	#TIM2_OR
 
	`TIM_OR
(
TIM2
)

	)

44 
	#TIM21_OR
 
	`TIM_OR
(
TIM21
)

	)

45 
	#TIM22_OR
 
	`TIM_OR
(
TIM22
)

	)

47 
	#TIM2_OR_ETR_RMP_SHIFT
 0

	)

48 
	#TIM2_OR_ETR_RMP
 (7 << 
TIM2_OR_ETR_RMP_SHIFT
)

	)

49 
	#TIM2_OR_ETR_RMP_GPIO
 (0 << 
TIM2_OR_ETR_RMP_SHIFT
)

	)

50 
	#TIM2_OR_ETR_RMP_HSI48
 (4 << 
TIM2_OR_ETR_RMP_SHIFT
)

	)

51 
	#TIM2_OR_ETR_RMP_LSE
 (5 << 
TIM2_OR_ETR_RMP_SHIFT
)

	)

52 
	#TIM2_OR_ETR_RMP_COMP2_OUT
 (6 << 
TIM2_OR_ETR_RMP_SHIFT
)

	)

53 
	#TIM2_OR_ETR_RMP_COMP1_OUT
 (7 << 
TIM2_OR_ETR_RMP_SHIFT
)

	)

55 
	#TIM2_OR_TI4_RMP_SHIFT
 3

	)

56 
	#TIM2_OR_TI4_RMP
 (3 << 
TIM2_OR_TI4_RMP_SHIFT
)

	)

57 
	#TIM2_OR_TI4_RMP_GPIO
 (0 << 
TIM2_OR_TI4_RMP_GPIO
)

	)

58 
	#TIM2_OR_TI4_RMP_COMP2_OUT
 (1 << 
TIM2_OR_TI4_RMP_GPIO
)

	)

59 
	#TIM2_OR_TI4_RMP_COMP1_OUT
 (2 << 
TIM2_OR_TI4_RMP_GPIO
)

	)

61 
	#TIM21_OR_ETR_RMP_SHIFT
 0

	)

62 
	#TIM21_OR_ETR_RMP
 (3 << 
TIM21_OR_ETR_RMP_SHIFT
)

	)

63 
	#TIM21_OR_ETR_RMP_GPIO
 (0 << 
TIM21_OR_ETR_RMP_SHIFT
)

	)

64 
	#TIM21_OR_ETR_RMP_COMP2_OUT
 (1 << 
TIM21_OR_ETR_RMP_SHIFT
)

	)

65 
	#TIM21_OR_ETR_RMP_COMP1_OUT
 (2 << 
TIM21_OR_ETR_RMP_SHIFT
)

	)

66 
	#TIM21_OR_ETR_RMP_LSE
 (3 << 
TIM21_OR_ETR_RMP_SHIFT
)

	)

68 
	#TIM21_OR_TI1_RMP_SHIFT
 2

	)

69 
	#TIM21_OR_TI1_RMP
 (7 << 
TIM21_OR_TI1_RMP_SHIFT
)

	)

70 
	#TIM21_OR_TI1_RMP_GPIO
 (0 << 
TIM21_OR_TI1_RMP_SHIFT
)

	)

71 
	#TIM21_OR_TI1_RMP_RTC_WAKEUP
 (1 << 
TIM21_OR_TI1_RMP_SHIFT
)

	)

72 
	#TIM21_OR_TI1_RMP_HSE_RTC
 (2 << 
TIM21_OR_TI1_RMP_SHIFT
)

	)

73 
	#TIM21_OR_TI1_RMP_MSI
 (3 << 
TIM21_OR_TI1_RMP_SHIFT
)

	)

74 
	#TIM21_OR_TI1_RMP_LSE
 (4 << 
TIM21_OR_TI1_RMP_SHIFT
)

	)

75 
	#TIM21_OR_TI1_RMP_LSI
 (5 << 
TIM21_OR_TI1_RMP_SHIFT
)

	)

76 
	#TIM21_OR_TI1_RMP_COMP1_OUT
 (6 << 
TIM21_OR_TI1_RMP_SHIFT
)

	)

77 
	#TIM21_OR_TI1_RMP_MCO
 (7 << 
TIM21_OR_TI1_RMP_SHIFT
)

	)

79 
	#TIM21_OR_TI2_RMP_SHIFT
 5

	)

80 
	#TIM21_OR_TI2_RMP
 (1 << 
TIM21_OR_TI2_RMP_SHIFT
)

	)

81 
	#TIM21_OR_TI2_RMP_GPIO
 (0 << 
TIM21_OR_TI2_RMP_SHIFT
)

	)

82 
	#TIM21_OR_TI2_RMP_COMP2_OUT
 (1 << 
TIM21_OR_TI2_RMP_SHIFT
)

	)

84 
	#TIM22_OR_ETR_RMP_SHIFT
 0

	)

85 
	#TIM22_OR_ETR_RMP
 (3 << 
TIM22_OR_ETR_RMP_SHIFT
)

	)

86 
	#TIM22_OR_ETR_GPIO
 (0 << 
TIM22_OR_ETR_RMP_SHIFT
)

	)

87 
	#TIM22_OR_ETR_COMP2_OUT
 (1 << 
TIM22_OR_ETR_RMP_SHIFT
)

	)

88 
	#TIM22_OR_ETR_COMP1_OUT
 (2 << 
TIM22_OR_ETR_RMP_SHIFT
)

	)

89 
	#TIM22_OR_ETR_LSE
 (3 << 
TIM22_OR_ETR_RMP_SHIFT
)

	)

91 
	#TIM22_OR_TI1_RMP_SHIFT
 2

	)

92 
	#TIM22_OR_TI1_RMP
 (3 << 
TIM22_OR_TI1_RMP_SHIFT
)

	)

93 
	#TIM22_OR_TI1_RMP_GPIO
 (0 << 
TIM22_OR_TI1_RMP_SHIFT
)

	)

94 
	#TIM22_OR_TI1_RMP_COMP2_OUT
 (1 << 
TIM22_OR_TI1_RMP_SHIFT
)

	)

95 
	#TIM22_OR_TI1_RMP_COMP1_OUT
 (2 << 
TIM22_OR_TI1_RMP_SHIFT
)

	)

99 
	#LPTIM_ISR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x00)

	)

100 
	#LPTIM_ICR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x04)

	)

101 
	#LPTIM_IER
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x08)

	)

102 
	#LPTIM_CFGR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x0C)

	)

103 
	#LPTIM_CR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x10)

	)

104 
	#LPTIM_CMP
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x14)

	)

105 
	#LPTIM_ARR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x18)

	)

106 
	#LPTIM_CNT
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x1C)

	)

108 
	#LPTIM1_ISR
 
	`LPTIM_ISR
(
LPTIM1_BASE
)

	)

109 
	#LPTIM1_ICR
 
	`LPTIM_ICR
(
LPTIM1_BASE
)

	)

110 
	#LPTIM1_IER
 
	`LPTIM_IER
(
LPTIM1_BASE
)

	)

111 
	#LPTIM1_CFGR
 
	`LPTIM_CFGR
(
LPTIM1_BASE
)

	)

112 
	#LPTIM1_CR
 
	`LPTIM_CR
(
LPTIM1_BASE
)

	)

113 
	#LPTIM1_CMP
 
	`LPTIM_CMP
(
LPTIM1_BASE
)

	)

114 
	#LPTIM1_ARR
 
	`LPTIM_ARR
(
LPTIM1_BASE
)

	)

115 
	#LPTIM1_CNT
 
	`LPTIM_CNT
(
LPTIM1_BASE
)

	)

117 
	#LPTIM_ISR_CMPM
 (1 << 0)

	)

118 
	#LPTIM_ISR_ARRM
 (1 << 1)

	)

119 
	#LPTIM_ISR_EXTTRIG
 (1 << 2)

	)

120 
	#LPTIM_ISR_CMPOK
 (1 << 3)

	)

121 
	#LPTIM_ISR_ARROK
 (1 << 4)

	)

122 
	#LPTIM_ISR_UP
 (1 << 5)

	)

123 
	#LPTIM_ISR_DOWN
 (1 << 6)

	)

125 
	#LPTIM_ICR_CMPMCF
 (1 << 0)

	)

126 
	#LPTIM_ICR_ARRMCF
 (1 << 1)

	)

127 
	#LPTIM_ICR_EXTTRIGCF
 (1 << 2)

	)

128 
	#LPTIM_ICR_CMPOKCF
 (1 << 3)

	)

129 
	#LPTIM_ICR_ARROKCF
 (1 << 4)

	)

130 
	#LPTIM_ICR_UPCF
 (1 << 5)

	)

131 
	#LPTIM_ICR_DOWNCF
 (1 << 6)

	)

133 
	#LPTIM_IER_CMPMIE
 (1 << 0)

	)

134 
	#LPTIM_IER_ARRMIE
 (1 << 1)

	)

135 
	#LPTIM_IER_EXTTRIGIE
 (1 << 2)

	)

136 
	#LPTIM_IER_CMPOKIE
 (1 << 3)

	)

137 
	#LPTIM_IER_ARROKIE
 (1 << 4)

	)

138 
	#LPTIM_IER_UPIE
 (1 << 5)

	)

139 
	#LPTIM_IER_DOWNIE
 (1 << 6)

	)

141 
	#LPTIM_CFGR_CKSEL
 (1 << 0)

	)

143 
	#LPTIM_CFGR_CKPOL_SHIFT
 1

	)

144 
	#LPTIM_CFGR_CKPOL
 (3 << 
LPTIM_CFGR_CKPOL_SHIFT
)

	)

145 
	#LPTIM_CFGR_CKPOL_RISING
 (0 << 
LPTIM_CFGR_CKPOL_SHIFT
)

	)

146 
	#LPTIM_CFGR_CKPOL_FALLING
 (1 << 
LPTIM_CFGR_CKPOL_SHIFT
)

	)

147 
	#LPTIM_CFGR_CKPOL_BOTH
 (2 << 
LPTIM_CFGR_CKPOL_SHIFT
)

	)

148 
	#LPTIM_CFGR_CKPOL_ENC_1
 (0 << 
LPTIM_CFGR_CKPOL_SHIFT
)

	)

149 
	#LPTIM_CFGR_CKPOL_ENC_2
 (1 << 
LPTIM_CFGR_CKPOL_SHIFT
)

	)

150 
	#LPTIM_CFGR_CKPOL_ENC_3
 (2 << 
LPTIM_CFGR_CKPOL_SHIFT
)

	)

152 
	#LPTIM_CFGR_CKFLT_SHIFT
 3

	)

153 
	#LPTIM_CFGR_CKFLT
 (3 << 
LPTIM_CFGR_CKFLT_SHIFT
)

	)

154 
	#LPTIM_CFGR_CKFLT_2
 (1 << 
LPTIM_CFGR_CKFLT_SHIFT
)

	)

155 
	#LPTIM_CFGR_CKFLT_4
 (2 << 
LPTIM_CFGR_CKFLT_SHIFT
)

	)

156 
	#LPTIM_CFGR_CKFLT_8
 (3 << 
LPTIM_CFGR_CKFLT_SHIFT
)

	)

158 
	#LPTIM_CFGR_TRGFLT_SHIFT
 6

	)

159 
	#LPTIM_CFGR_TRGFLT
 (3 << 
LPTIM_CFGR_TRGFLT_SHIFT
)

	)

160 
	#LPTIM_CFGR_TRGFLT_2
 (1 << 
LPTIM_CFGR_TRGFLT_SHIFT
)

	)

161 
	#LPTIM_CFGR_TRGFLT_4
 (2 << 
LPTIM_CFGR_TRGFLT_SHIFT
)

	)

162 
	#LPTIM_CFGR_TRGFLT_8
 (3 << 
LPTIM_CFGR_TRGFLT_SHIFT
)

	)

164 
	#LPTIM_CFGR_PRESC_SHIFT
 9

	)

165 
	#LPTIM_CFGR_PRESC
 (7 << 
LPTIM_CFGR_PRESC_SHIFT
)

	)

166 
	#LPTIM_CFGR_PRESC_1
 (0 << 
LPTIM_CFGR_PRESC_SHIFT
)

	)

167 
	#LPTIM_CFGR_PRESC_2
 (1 << 
LPTIM_CFGR_PRESC_SHIFT
)

	)

168 
	#LPTIM_CFGR_PRESC_4
 (2 << 
LPTIM_CFGR_PRESC_SHIFT
)

	)

169 
	#LPTIM_CFGR_PRESC_8
 (3 << 
LPTIM_CFGR_PRESC_SHIFT
)

	)

170 
	#LPTIM_CFGR_PRESC_16
 (4 << 
LPTIM_CFGR_PRESC_SHIFT
)

	)

171 
	#LPTIM_CFGR_PRESC_32
 (5 << 
LPTIM_CFGR_PRESC_SHIFT
)

	)

172 
	#LPTIM_CFGR_PRESC_64
 (6 << 
LPTIM_CFGR_PRESC_SHIFT
)

	)

173 
	#LPTIM_CFGR_PRESC_128
 (7 << 
LPTIM_CFGR_PRESC_SHIFT
)

	)

175 
	#LPTIM_CFGR_TRIGSEL_SHIFT
 13

	)

176 
	#LPTIM_CFGR_TRIGSEL
 (7 << 
LPTIM_CFGR_TRIGSEL_SHIFT
)

	)

177 
	#LPTIM_CFGR_TRIGSEL_EXT_TRIG0
 (0 << 
LPTIM_CFGR_TRIGSEL_SHIFT
)

	)

178 
	#LPTIM_CFGR_TRIGSEL_EXT_TRIG1
 (1 << 
LPTIM_CFGR_TRIGSEL_SHIFT
)

	)

179 
	#LPTIM_CFGR_TRIGSEL_EXT_TRIG2
 (2 << 
LPTIM_CFGR_TRIGSEL_SHIFT
)

	)

180 
	#LPTIM_CFGR_TRIGSEL_EXT_TRIG3
 (3 << 
LPTIM_CFGR_TRIGSEL_SHIFT
)

	)

181 
	#LPTIM_CFGR_TRIGSEL_EXT_TRIG4
 (4 << 
LPTIM_CFGR_TRIGSEL_SHIFT
)

	)

183 
	#LPTIM_CFGR_TRIGSEL_EXT_TRIG6
 (6 << 
LPTIM_CFGR_TRIGSEL_SHIFT
)

	)

184 
	#LPTIM_CFGR_TRIGSEL_EXT_TRIG7
 (7 << 
LPTIM_CFGR_TRIGSEL_SHIFT
)

	)

186 
	#LPTIM_CFGR_TRIGEN_SHIFT
 17

	)

187 
	#LPTIM_CFGR_TRIGEN
 (3 << 
LPTIM_CFGR_TRIGEN_SHIFT
)

	)

188 
	#LPTIM_CFGR_TRIGEN_SW
 (0 << 
LPTIM_CFGR_TRIGEN_SHIFT
)

	)

189 
	#LPTIM_CFGR_TRIGEN_RISING
 (1 << 
LPTIM_CFGR_TRIGEN_SHIFT
)

	)

190 
	#LPTIM_CFGR_TRIGEN_FALLING
 (2 << 
LPTIM_CFGR_TRIGEN_SHIFT
)

	)

191 
	#LPTIM_CFGR_TRIGEN_BOTH
 (3 << 
LPTIM_CFGR_TRIGEN_SHIFT
)

	)

193 
	#LPTIM_CFGR_TIMOUT
 (1 << 19)

	)

195 
	#LPTIM_CFGR_WAVE
 (1 << 20)

	)

197 
	#LPTIM_CFGR_WAVPOL
 (1 << 21)

	)

199 
	#LPTIM_CFGR_PRELOAD
 (1 << 22)

	)

201 
	#LPTIM_CFGR_COUNTMODE
 (1 << 23)

	)

203 
	#LPTIM_CFGR_ENC
 (1 << 24)

	)

205 
	#LPTIM_CR_ENABLE
 (1 << 0)

	)

207 
	#LPTIM_CR_SNGSTRT
 (1 << 1)

	)

209 
	#LPTIM_CR_CNTSTRT
 (1 << 2)

	)

	@libopencm3/include/libopencm3/stm32/l0/usart.h

27 #i‚de‡
LIBOPENCM3_USART_H


28 
	#LIBOPENCM3_USART_H


	)

30 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_Æl.h
>

31 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_v2.h
>

38 
	#USART1
 
USART1_BASE


	)

39 
	#USART2
 
USART2_BASE


	)

40 
	#USART4
 
USART4_BASE


	)

41 
	#USART5
 
USART5_BASE


	)

42 
	#LPUART1
 
LPUART1_BASE


	)

45 
BEGIN_DECLS


47 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l1/adc.h

33 #i‚de‡
LIBOPENCM3_ADC_H


34 
	#LIBOPENCM3_ADC_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v1.h
>

38 
	#ADC_MAX_REGULAR_SEQUENCE
 28

	)

40 
	#ADC_MAX_CHANNELS
 32

	)

43 
	#ADC_SMPR3
(
block
Ë
	`MMIO32
((blockË+ 0x14)

	)

44 
	#ADC1_SMPR3
 
	`ADC_SMPR3
(
ADC1
)

	)

47 
	#ADC_JOFR1
(
block
Ë
	`MMIO32
((blockË+ 0x18)

	)

48 
	#ADC_JOFR2
(
block
Ë
	`MMIO32
((blockË+ 0x1c)

	)

49 
	#ADC_JOFR3
(
block
Ë
	`MMIO32
((blockË+ 0x20)

	)

50 
	#ADC_JOFR4
(
block
Ë
	`MMIO32
((blockË+ 0x24)

	)

53 
	#ADC_HTR
(
block
Ë
	`MMIO32
((blockË+ 0x28)

	)

56 
	#ADC_LTR
(
block
Ë
	`MMIO32
((blockË+ 0x2c)

	)

59 
	#ADC_SQR1
(
block
Ë
	`MMIO32
((blockË+ 0x30)

	)

62 
	#ADC_SQR2
(
block
Ë
	`MMIO32
((blockË+ 0x34)

	)

65 
	#ADC_SQR3
(
block
Ë
	`MMIO32
((blockË+ 0x38)

	)

68 
	#ADC_SQR4
(
block
Ë
	`MMIO32
((blockË+ 0x3c)

	)

69 
	#ADC1_SQR4
 
	`ADC_SQR4
(
ADC1
)

	)

72 
	#ADC_SQR5
(
block
Ë
	`MMIO32
((blockË+ 0x40)

	)

73 
	#ADC1_SQR5
 
	`ADC_SQR5
(
ADC1
)

	)

76 
	#ADC_JSQR
(
block
Ë
	`MMIO32
((blockË+ 0x44)

	)

79 
	#ADC_JDR1
(
block
Ë
	`MMIO32
((blockË+ 0x48)

	)

80 
	#ADC_JDR2
(
block
Ë
	`MMIO32
((blockË+ 0x4c)

	)

81 
	#ADC_JDR3
(
block
Ë
	`MMIO32
((blockË+ 0x50)

	)

82 
	#ADC_JDR4
(
block
Ë
	`MMIO32
((blockË+ 0x54)

	)

85 
	#ADC_DR
(
block
Ë
	`MMIO32
((blockË+ 0x58)

	)

88 
	#ADC_SMPR0
(
block
Ë
	`MMIO32
((blockË+ 0x5c)

	)

89 
	#ADC1_SMPR0
 
	`ADC_SMPR0
(
ADC1
)

	)

91 
	#ADC_CSR
 
	`MMIO32
(
ADC1
 + 0x300)

	)

92 
	#ADC_CCR
 
	`MMIO32
(
ADC1
 + 0x304)

	)

98 
	#ADC_CHANNEL_TEMP
 
ADC_CHANNEL16


	)

99 
	#ADC_CHANNEL_VREF
 
ADC_CHANNEL17


	)

100 
	#ADC_CHANNEL_VBAT
 
ADC_CHANNEL18


	)

104 
	#ADC_SR_JCNR
 (1 << 9)

	)

105 
	#ADC_SR_RCNR
 (1 << 8)

	)

106 
	#ADC_SR_ADONS
 (1 << 6)

	)

107 
	#ADC_SR_OVR
 (1 << 5)

	)

110 
	#ADC_CR1_OVRIE
 (1 << 28)

	)

115 
	#ADC_CR1_RES_12_BIT
 0

	)

116 
	#ADC_CR1_RES_10_BIT
 1

	)

117 
	#ADC_CR1_RES_8_BIT
 2

	)

118 
	#ADC_CR1_RES_6_BIT
 3

	)

120 
	#ADC_CR1_RES_MASK
 (0x3)

	)

121 
	#ADC_CR1_RES_SHIFT
 24

	)

122 
	#ADC_CR1_PDI
 (1 << 17)

	)

123 
	#ADC_CR1_PDD
 (1 << 16)

	)

125 
	#ADC_CR1_AWDCH_MAX
 26

	)

129 
	#ADC_CR2_SWSTART
 (1 << 30)

	)

133 
	#ADC_CR2_EXTEN_SHIFT
 28

	)

134 
	#ADC_CR2_EXTEN_MASK
 (0x3 << 
ADC_CR2_EXTEN_SHIFT
)

	)

138 
	#ADC_CR2_EXTEN_DISABLED
 (0x0 << 
ADC_CR2_EXTEN_SHIFT
)

	)

139 
	#ADC_CR2_EXTEN_RISING_EDGE
 (0x1 << 
ADC_CR2_EXTEN_SHIFT
)

	)

140 
	#ADC_CR2_EXTEN_FALLING_EDGE
 (0x2 << 
ADC_CR2_EXTEN_SHIFT
)

	)

141 
	#ADC_CR2_EXTEN_BOTH_EDGES
 (0x3 << 
ADC_CR2_EXTEN_SHIFT
)

	)

146 
	#ADC_CR2_EXTSEL_SHIFT
 24

	)

147 
	#ADC_CR2_EXTSEL_MASK
 (0x‡<< 
ADC_CR2_EXTSEL_SHIFT
)

	)

152 
	#ADC_CR2_EXTSEL_TIM9_CC2
 (0 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

153 
	#ADC_CR2_EXTSEL_TIM9_TRGO
 (1 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

154 
	#ADC_CR2_EXTSEL_TIM2_CC3
 (2 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

155 
	#ADC_CR2_EXTSEL_TIM2_CC2
 (3 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

156 
	#ADC_CR2_EXTSEL_TIM3_TRGO
 (4 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

157 
	#ADC_CR2_EXTSEL_TIM4_CC4
 (5 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

158 
	#ADC_CR2_EXTSEL_TIM2_TRGO
 (6 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

159 
	#ADC_CR2_EXTSEL_TIM3_CC1
 (7 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

160 
	#ADC_CR2_EXTSEL_TIM3_CC3
 (8 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

161 
	#ADC_CR2_EXTSEL_TIM4_TRGO
 (9 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

162 
	#ADC_CR2_EXTSEL_TIM6_TRGO
 (10 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

164 
	#ADC_CR2_EXTSEL_EXTI11
 (15 << 
ADC_CR2_EXTSEL_SHIFT
)

	)

167 
	#ADC_CR2_JSWSTART
 (1 << 22)

	)

171 
	#ADC_CR2_JEXTEN_SHIFT
 20

	)

172 
	#ADC_CR2_JEXTEN_MASK
 (0x3 << 
ADC_CR2_JEXTEN_SHIFT
)

	)

176 
	#ADC_CR2_JEXTEN_DISABLED
 (0x0 << 
ADC_CR2_JEXTEN_SHIFT
)

	)

177 
	#ADC_CR2_JEXTEN_RISING_EDGE
 (0x1 << 
ADC_CR2_JEXTEN_SHIFT
)

	)

178 
	#ADC_CR2_JEXTEN_FALLING_EDGE
 (0x2 << 
ADC_CR2_JEXTEN_SHIFT
)

	)

179 
	#ADC_CR2_JEXTEN_BOTH_EDGES
 (0x3 << 
ADC_CR2_JEXTEN_SHIFT
)

	)

183 
	#ADC_CR2_JEXTSEL_SHIFT
 16

	)

184 
	#ADC_CR2_JEXTSEL_MASK
 (0x‡<< 
ADC_CR2_JEXTSEL_SHIFT
)

	)

186 
	#ADC_CR2_EOCS
 (1 << 10)

	)

187 
	#ADC_CR2_DDS
 (1 << 9)

	)

189 
	#ADC_CR2_DELS_SHIFT
 4

	)

190 
	#ADC_CR2_DELS_MASK
 0x7

	)

192 
	#ADC_CR2_ADC_CFG
 (1 << 2)

	)

204 
	#ADC_SMPR_SMP_4CYC
 0x0

	)

205 
	#ADC_SMPR_SMP_9CYC
 0x1

	)

206 
	#ADC_SMPR_SMP_16CYC
 0x2

	)

207 
	#ADC_SMPR_SMP_24CYC
 0x3

	)

208 
	#ADC_SMPR_SMP_48CYC
 0x4

	)

209 
	#ADC_SMPR_SMP_96CYC
 0x5

	)

210 
	#ADC_SMPR_SMP_192CYC
 0x6

	)

211 
	#ADC_SMPR_SMP_384CYC
 0x7

	)

214 
	#ADC_SQR_MASK
 0x1f

	)

215 
	#ADC_SQR_MAX_CHANNELS_REGULAR
 28

	)

217 
	#ADC_CCR_TSVREFE
 (1 << 23)

	)

219 
BEGIN_DECLS


221 
adc_íabÀ_ãm≥øtuª_£ns‹
();

222 
adc_dißbÀ_ãm≥øtuª_£ns‹
();

223 
adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

224 
uöt32_t
 
pﬁ¨ôy
);

225 
adc_íabÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

226 
uöt32_t
 
pﬁ¨ôy
);

228 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l1/crc.h

33 #i‚de‡
LIBOPENCM3_CRC_H


34 
	#LIBOPENCM3_CRC_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/¸c_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/l1/dac.h

31 #i‚de‡
LIBOPENCM3_DAC_H


32 
	#LIBOPENCM3_DAC_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/dac_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/l1/dma.h

36 #i‚de‡
LIBOPENCM3_DMA_H


37 
	#LIBOPENCM3_DMA_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/dma_comm⁄_l1f013.h
>

	@libopencm3/include/libopencm3/stm32/l1/doc-stm32l1.h

	@libopencm3/include/libopencm3/stm32/l1/exti.h

36 #i‚de‡
LIBOPENCM3_EXTI_H


37 
	#LIBOPENCM3_EXTI_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/exti_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/l1/flash.h

43 #i‚de‡
LIBOPENCM3_FLASH_H


44 
	#LIBOPENCM3_FLASH_H


	)

47 
	~<lib›ícm3/°m32/comm⁄/Êash_comm⁄_l01.h
>

50 
	#FLASH_WRPR3
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x84)

	)

53 
	#FLASH_ACR_ACC64
 (1 << 2)

	)

56 
	#FLASH_SR_OPTVERRUSR
 (1 << 12)

	)

60 
BEGIN_DECLS


62 
Êash_64bô_íabÀ
();

63 
Êash_64bô_dißbÀ
();

65 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l1/gpio.h

36 #i‚de‡
LIBOPENCM3_GPIO_H


37 
	#LIBOPENCM3_GPIO_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_Æl.h
>

49 
	#GPIOA
 
GPIO_PORT_A_BASE


	)

50 
	#GPIOB
 
GPIO_PORT_B_BASE


	)

51 
	#GPIOC
 
GPIO_PORT_C_BASE


	)

52 
	#GPIOD
 
GPIO_PORT_D_BASE


	)

53 
	#GPIOE
 
GPIO_PORT_E_BASE


	)

54 
	#GPIOH
 
GPIO_PORT_H_BASE


	)

60 
	#GPIO_MODER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x00)

	)

61 
	#GPIOA_MODER
 
	`GPIO_MODER
(
GPIOA
)

	)

62 
	#GPIOB_MODER
 
	`GPIO_MODER
(
GPIOB
)

	)

63 
	#GPIOC_MODER
 
	`GPIO_MODER
(
GPIOC
)

	)

64 
	#GPIOD_MODER
 
	`GPIO_MODER
(
GPIOD
)

	)

65 
	#GPIOE_MODER
 
	`GPIO_MODER
(
GPIOE
)

	)

66 
	#GPIOH_MODER
 
	`GPIO_MODER
(
GPIOH
)

	)

69 
	#GPIO_OTYPER
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x04)

	)

70 
	#GPIOA_OTYPER
 
	`GPIO_OTYPER
(
GPIOA
)

	)

71 
	#GPIOB_OTYPER
 
	`GPIO_OTYPER
(
GPIOB
)

	)

72 
	#GPIOC_OTYPER
 
	`GPIO_OTYPER
(
GPIOC
)

	)

73 
	#GPIOD_OTYPER
 
	`GPIO_OTYPER
(
GPIOD
)

	)

74 
	#GPIOE_OTYPER
 
	`GPIO_OTYPER
(
GPIOE
)

	)

75 
	#GPIOH_OTYPER
 
	`GPIO_OTYPER
(
GPIOH
)

	)

78 
	#GPIO_OSPEEDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x08)

	)

79 
	#GPIOA_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOA
)

	)

80 
	#GPIOB_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOB
)

	)

81 
	#GPIOC_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOC
)

	)

82 
	#GPIOD_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOD
)

	)

83 
	#GPIOE_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOE
)

	)

84 
	#GPIOH_OSPEEDR
 
	`GPIO_OSPEEDR
(
GPIOH
)

	)

87 
	#GPIO_PUPDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x0c)

	)

88 
	#GPIOA_PUPDR
 
	`GPIO_PUPDR
(
GPIOA
)

	)

89 
	#GPIOB_PUPDR
 
	`GPIO_PUPDR
(
GPIOB
)

	)

90 
	#GPIOC_PUPDR
 
	`GPIO_PUPDR
(
GPIOC
)

	)

91 
	#GPIOD_PUPDR
 
	`GPIO_PUPDR
(
GPIOD
)

	)

92 
	#GPIOE_PUPDR
 
	`GPIO_PUPDR
(
GPIOE
)

	)

93 
	#GPIOH_PUPDR
 
	`GPIO_PUPDR
(
GPIOH
)

	)

96 
	#GPIO_IDR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x10)

	)

97 
	#GPIOA_IDR
 
	`GPIO_IDR
(
GPIOA
)

	)

98 
	#GPIOB_IDR
 
	`GPIO_IDR
(
GPIOB
)

	)

99 
	#GPIOC_IDR
 
	`GPIO_IDR
(
GPIOC
)

	)

100 
	#GPIOD_IDR
 
	`GPIO_IDR
(
GPIOD
)

	)

101 
	#GPIOE_IDR
 
	`GPIO_IDR
(
GPIOE
)

	)

102 
	#GPIOH_IDR
 
	`GPIO_IDR
(
GPIOH
)

	)

105 
	#GPIO_ODR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x14)

	)

106 
	#GPIOA_ODR
 
	`GPIO_ODR
(
GPIOA
)

	)

107 
	#GPIOB_ODR
 
	`GPIO_ODR
(
GPIOB
)

	)

108 
	#GPIOC_ODR
 
	`GPIO_ODR
(
GPIOC
)

	)

109 
	#GPIOD_ODR
 
	`GPIO_ODR
(
GPIOD
)

	)

110 
	#GPIOE_ODR
 
	`GPIO_ODR
(
GPIOE
)

	)

111 
	#GPIOH_ODR
 
	`GPIO_ODR
(
GPIOH
)

	)

114 
	#GPIO_BSRR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x18)

	)

115 
	#GPIOA_BSRR
 
	`GPIO_BSRR
(
GPIOA
)

	)

116 
	#GPIOB_BSRR
 
	`GPIO_BSRR
(
GPIOB
)

	)

117 
	#GPIOC_BSRR
 
	`GPIO_BSRR
(
GPIOC
)

	)

118 
	#GPIOD_BSRR
 
	`GPIO_BSRR
(
GPIOD
)

	)

119 
	#GPIOE_BSRR
 
	`GPIO_BSRR
(
GPIOE
)

	)

120 
	#GPIOH_BSRR
 
	`GPIO_BSRR
(
GPIOH
)

	)

123 
	#GPIO_LCKR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x1C)

	)

124 
	#GPIOA_LCKR
 
	`GPIO_LCKR
(
GPIOA
)

	)

125 
	#GPIOB_LCKR
 
	`GPIO_LCKR
(
GPIOB
)

	)

126 
	#GPIOC_LCKR
 
	`GPIO_LCKR
(
GPIOC
)

	)

127 
	#GPIOD_LCKR
 
	`GPIO_LCKR
(
GPIOD
)

	)

128 
	#GPIOE_LCKR
 
	`GPIO_LCKR
(
GPIOE
)

	)

129 
	#GPIOH_LCKR
 
	`GPIO_LCKR
(
GPIOH
)

	)

132 
	#GPIO_AFRL
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x20)

	)

133 
	#GPIOA_AFRL
 
	`GPIO_AFRL
(
GPIOA
)

	)

134 
	#GPIOB_AFRL
 
	`GPIO_AFRL
(
GPIOB
)

	)

135 
	#GPIOC_AFRL
 
	`GPIO_AFRL
(
GPIOC
)

	)

136 
	#GPIOD_AFRL
 
	`GPIO_AFRL
(
GPIOD
)

	)

137 
	#GPIOE_AFRL
 
	`GPIO_AFRL
(
GPIOE
)

	)

138 
	#GPIOH_AFRL
 
	`GPIO_AFRL
(
GPIOH
)

	)

141 
	#GPIO_AFRH
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x24)

	)

142 
	#GPIOA_AFRH
 
	`GPIO_AFRH
(
GPIOA
)

	)

143 
	#GPIOB_AFRH
 
	`GPIO_AFRH
(
GPIOB
)

	)

144 
	#GPIOC_AFRH
 
	`GPIO_AFRH
(
GPIOC
)

	)

145 
	#GPIOD_AFRH
 
	`GPIO_AFRH
(
GPIOD
)

	)

146 
	#GPIOE_AFRH
 
	`GPIO_AFRH
(
GPIOE
)

	)

147 
	#GPIOH_AFRH
 
	`GPIO_AFRH
(
GPIOH
)

	)

151 
	#GPIO_MODE
(
n
, 
mode
Ë((modeË<< (2 * (n)))

	)

152 
	#GPIO_MODE_MASK
(
n
Ë(0x3 << (2 * (n)))

	)

156 
	#GPIO_MODE_INPUT
 0x00

	)

157 
	#GPIO_MODE_OUTPUT
 0x01

	)

158 
	#GPIO_MODE_AF
 0x02

	)

159 
	#GPIO_MODE_ANALOG
 0x03

	)

168 
	#GPIO_OTYPE_PP
 0x0

	)

170 
	#GPIO_OTYPE_OD
 0x1

	)

174 
	#GPIO_OSPEED
(
n
, 
•ìd
Ë((•ìdË<< (2 * (n)))

	)

175 
	#GPIO_OSPEED_MASK
(
n
Ë(0x3 << (2 * (n)))

	)

179 
	#GPIO_OSPEED_400KHZ
 0x0

	)

180 
	#GPIO_OSPEED_2MHZ
 0x1

	)

181 
	#GPIO_OSPEED_10MHZ
 0x2

	)

182 
	#GPIO_OSPEED_40MHZ
 0x3

	)

187 
	#GPIO_PUPD
(
n
, 
pupd
Ë(’updË<< (2 * (n)))

	)

188 
	#GPIO_PUPD_MASK
(
n
Ë(0x3 << (2 * (n)))

	)

192 
	#GPIO_PUPD_NONE
 0x0

	)

193 
	#GPIO_PUPD_PULLUP
 0x1

	)

194 
	#GPIO_PUPD_PULLDOWN
 0x2

	)

212 
	#GPIO_LCKK
 (1 << 16)

	)

220 
	#GPIO_AFR
(
n
, 
af
Ë(◊fË<< (“Ë* 4))

	)

221 
	#GPIO_AFR_MASK
(
n
Ë(0x‡<< (“Ë* 4))

	)

225 
	#GPIO_AF0
 0x0

	)

226 
	#GPIO_AF1
 0x1

	)

227 
	#GPIO_AF2
 0x2

	)

228 
	#GPIO_AF3
 0x3

	)

229 
	#GPIO_AF4
 0x4

	)

230 
	#GPIO_AF5
 0x5

	)

231 
	#GPIO_AF6
 0x6

	)

232 
	#GPIO_AF7
 0x7

	)

233 
	#GPIO_AF8
 0x8

	)

234 
	#GPIO_AF9
 0x9

	)

235 
	#GPIO_AF10
 0xa

	)

236 
	#GPIO_AF11
 0xb

	)

237 
	#GPIO_AF12
 0xc

	)

238 
	#GPIO_AF13
 0xd

	)

239 
	#GPIO_AF14
 0xe

	)

240 
	#GPIO_AF15
 0xf

	)

245 
BEGIN_DECLS


253 
gpio_mode_£tup
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
mode
, uöt8_à
puŒ_up_down
,

254 
uöt16_t
 
gpios
);

255 
gpio_£t_ouçut_›ti⁄s
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
Ÿy≥
, uöt8_à
•ìd
,

256 
uöt16_t
 
gpios
);

257 
gpio_£t_af
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
Æt_func_num
, 
uöt16_t
 
gpios
);

259 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l1/i2c.h

31 #i‚de‡
LIBOPENCM3_I2C_H


32 
	#LIBOPENCM3_I2C_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/i2c_comm⁄_v1.h
>

	@libopencm3/include/libopencm3/stm32/l1/iwdg.h

33 #i‚de‡
LIBOPENCM3_IWDG_H


34 
	#LIBOPENCM3_IWDG_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/iwdg_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/l1/lcd.h

35 #i‚de‡
LIBOPENCM3_LCD_H


36 
	#LIBOPENCM3_LCD_H


	)

38 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

39 
	~<lib›ícm3/cm3/comm⁄.h
>

48 
	#LCD_CR
 
	`MMIO32
(
LCD_BASE
 + 0x00)

	)

50 
	#LCD_FCR
 
	`MMIO32
(
LCD_BASE
 + 0x04)

	)

52 
	#LCD_SR
 
	`MMIO32
(
LCD_BASE
 + 0x08)

	)

54 
	#LCD_CLR
 
	`MMIO32
(
LCD_BASE
 + 0x0C)

	)

59 
	#LCD_RAM_BASE
 (
LCD_BASE
 + 0x14)

	)

62 
	#LCD_RAM_COM0
 
	`MMIO64
(
LCD_RAM_BASE
 + 0x00)

	)

64 
	#LCD_RAM_COM1
 
	`MMIO64
(
LCD_RAM_BASE
 + 0x08)

	)

66 
	#LCD_RAM_COM2
 
	`MMIO64
(
LCD_RAM_BASE
 + 0x10)

	)

68 
	#LCD_RAM_COM3
 
	`MMIO64
(
LCD_RAM_BASE
 + 0x18)

	)

70 
	#LCD_RAM_COM4
 
	`MMIO64
(
LCD_RAM_BASE
 + 0x20)

	)

72 
	#LCD_RAM_COM5
 
	`MMIO64
(
LCD_RAM_BASE
 + 0x28)

	)

74 
	#LCD_RAM_COM6
 
	`MMIO64
(
LCD_RAM_BASE
 + 0x30)

	)

76 
	#LCD_RAM_COM7
 
	`MMIO64
(
LCD_RAM_BASE
 + 0x38)

	)

79 
	#LCD_CR_LCDEN
 (1 << 0)

	)

80 
	#LCD_CR_VSEL
 (1 << 1)

	)

82 
	#LCD_CR_DUTY_SHIFT
 2

	)

83 
	#LCD_CR_DUTY_MASK
 0x7

	)

84 
	#LCD_CR_DUTY_STATIC
 0x0

	)

85 
	#LCD_CR_DUTY_1_2
 0x1

	)

86 
	#LCD_CR_DUTY_1_3
 0x2

	)

87 
	#LCD_CR_DUTY_1_4
 0x3

	)

88 
	#LCD_CR_DUTY_1_8
 0x4

	)

90 
	#LCD_CR_BIAS_SHIFT
 5

	)

91 
	#LCD_CR_BIAS_MASK
 0x3

	)

92 
	#LCD_CR_BIAS_1_4
 0x0

	)

93 
	#LCD_CR_BIAS_1_2
 0x1

	)

94 
	#LCD_CR_BIAS_1_3
 0x2

	)

96 
	#LCD_CR_MUX_SEG
 (1 << 7)

	)

99 
	#LCD_FCR_HD
 (1 << 0)

	)

100 
	#LCD_FCR_SOFIE
 (1 << 1)

	)

101 
	#LCD_FCR_UDDIE
 (1 << 3)

	)

103 
	#LCD_FCR_PON_SHIFT
 4

	)

104 
	#LCD_FCR_PON_MASK
 0x7

	)

105 
	#LCD_FCR_PON_0
 0x0

	)

106 
	#LCD_FCR_PON_1
 0x1

	)

107 
	#LCD_FCR_PON_2
 0x2

	)

108 
	#LCD_FCR_PON_3
 0x3

	)

109 
	#LCD_FCR_PON_4
 0x4

	)

110 
	#LCD_FCR_PON_5
 0x5

	)

111 
	#LCD_FCR_PON_6
 0x6

	)

112 
	#LCD_FCR_PON_7
 0x7

	)

114 
	#LCD_FCR_DEAD_SHIFT
 7

	)

115 
	#LCD_FCR_DEAD_MASK
 0x7

	)

116 
	#LCD_FCR_DEAD_NONE
 0x0

	)

117 
	#LCD_FCR_DEAD_1_PHASE
 0x1

	)

118 
	#LCD_FCR_DEAD_2_PHASE
 0x2

	)

119 
	#LCD_FCR_DEAD_3_PHASE
 0x3

	)

120 
	#LCD_FCR_DEAD_4_PHASE
 0x4

	)

121 
	#LCD_FCR_DEAD_5_PHASE
 0x5

	)

122 
	#LCD_FCR_DEAD_6_PHASE
 0x6

	)

123 
	#LCD_FCR_DEAD_7_PHASE
 0x7

	)

125 
	#LCD_FCR_CC_SHIFT
 10

	)

126 
	#LCD_FCR_CC_MASK
 0x7

	)

127 
	#LCD_FCR_CC_0
 0x0

	)

128 
	#LCD_FCR_CC_1
 0x1

	)

129 
	#LCD_FCR_CC_2
 0x2

	)

130 
	#LCD_FCR_CC_3
 0x3

	)

131 
	#LCD_FCR_CC_4
 0x4

	)

132 
	#LCD_FCR_CC_5
 0x5

	)

133 
	#LCD_FCR_CC_6
 0x6

	)

134 
	#LCD_FCR_CC_7
 0x7

	)

136 
	#LCD_FCR_BLINKF_SHIFT
 13

	)

137 
	#LCD_FCR_BLINKF_MASK
 0x7

	)

138 
	#LCD_FCR_BLINKF_8
 0x0

	)

139 
	#LCD_FCR_BLINKF_16
 0x1

	)

140 
	#LCD_FCR_BLINKF_32
 0x2

	)

141 
	#LCD_FCR_BLINKF_64
 0x3

	)

142 
	#LCD_FCR_BLINKF_128
 0x4

	)

143 
	#LCD_FCR_BLINKF_256
 0x5

	)

144 
	#LCD_FCR_BLINKF_512
 0x6

	)

145 
	#LCD_FCR_BLINKF_1024
 0x7

	)

147 
	#LCD_FCR_BLINK_SHIFT
 16

	)

148 
	#LCD_FCR_BLINK_MASK
 0x3

	)

149 
	#LCD_FCR_BLINK_DISABLE
 0x0

	)

150 
	#LCD_FCR_BLINK_SEG0_COM0_ENABLE
 0x1

	)

151 
	#LCD_FCR_BLINK_SEG0_ENABLE
 0x2

	)

152 
	#LCD_FCR_BLINK_ALL_ENABLE
 0x3

	)

154 
	#LCD_FCR_DIV_SHIFT
 18

	)

155 
	#LCD_FCR_DIV_MASK
 0xF

	)

156 
	#LCD_FCR_DIV_16
 0x0

	)

157 
	#LCD_FCR_DIV_17
 0x1

	)

158 
	#LCD_FCR_DIV_18
 0x2

	)

159 
	#LCD_FCR_DIV_19
 0x3

	)

160 
	#LCD_FCR_DIV_20
 0x4

	)

161 
	#LCD_FCR_DIV_21
 0x5

	)

162 
	#LCD_FCR_DIV_22
 0x6

	)

163 
	#LCD_FCR_DIV_23
 0x7

	)

164 
	#LCD_FCR_DIV_24
 0x8

	)

165 
	#LCD_FCR_DIV_25
 0x9

	)

166 
	#LCD_FCR_DIV_26
 0xA

	)

167 
	#LCD_FCR_DIV_27
 0xB

	)

168 
	#LCD_FCR_DIV_28
 0xC

	)

169 
	#LCD_FCR_DIV_29
 0xD

	)

170 
	#LCD_FCR_DIV_30
 0xE

	)

171 
	#LCD_FCR_DIV_31
 0xF

	)

173 
	#LCD_FCR_PS_SHIFT
 22

	)

174 
	#LCD_FCR_PS_MASK
 0xF

	)

175 
	#LCD_FCR_PS_1
 0x0

	)

176 
	#LCD_FCR_PS_2
 0x1

	)

177 
	#LCD_FCR_PS_4
 0x2

	)

178 
	#LCD_FCR_PS_8
 0x3

	)

179 
	#LCD_FCR_PS_16
 0x4

	)

180 
	#LCD_FCR_PS_32
 0x5

	)

181 
	#LCD_FCR_PS_64
 0x6

	)

182 
	#LCD_FCR_PS_128
 0x7

	)

183 
	#LCD_FCR_PS_256
 0x8

	)

184 
	#LCD_FCR_PS_512
 0x9

	)

185 
	#LCD_FCR_PS_1024
 0xA

	)

186 
	#LCD_FCR_PS_2048
 0xB

	)

187 
	#LCD_FCR_PS_4096
 0xC

	)

188 
	#LCD_FCR_PS_8192
 0xD

	)

189 
	#LCD_FCR_PS_16384
 0xE

	)

190 
	#LCD_FCR_PS_32768
 0xF

	)

193 
	#LCD_SR_ENS
 (1 << 0)

	)

194 
	#LCD_SR_SOF
 (1 << 1)

	)

195 
	#LCD_SR_UDR
 (1 << 2)

	)

196 
	#LCD_SR_UDD
 (1 << 3)

	)

197 
	#LCD_SR_RDY
 (1 << 4)

	)

198 
	#LCD_SR_FCRSF
 (1 << 5)

	)

201 
	#LCD_CLR_SOFC
 (1 << 1)

	)

202 
	#LCD_CLR_UDDC
 (1 << 3)

	)

206 
BEGIN_DECLS


208 
lcd_íabÀ
();

209 
lcd_upd©e
();

211 
lcd_waô_f‹_lcd_íabÀd
();

212 
lcd_waô_f‹_°ï_up_ªady
();

213 
lcd_waô_f‹_upd©e_ªady
();

215 
lcd_is_íabÀd
();

216 
lcd_is_°ï_up_ªady
();

217 
lcd_is_f‹_upd©e_ªady
();

219 
lcd_£t_c⁄åa°
(
uöt8_t
 
c⁄åa°
);

220 
lcd_£t_büs
(
uöt8_t
 
büs
);

221 
lcd_£t_duty
(
uöt8_t
 
duty
);

222 
lcd_£t_¥esˇÀr
(
uöt8_t
 
ps
);

223 
lcd_£t_dividî
(
uöt8_t
 
div
);

224 
lcd_íabÀ_£gmít_mu…ùÀxög
();

225 
lcd_dißbÀ_£gmít_mu…ùÀxög
();

226 
lcd_£t_ª‰esh_‰equícy
(
uöt32_t
 
‰equícy
);

228 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l1/memorymap.h

21 #i‚de‡
LIBOPENCM3_MEMORYMAP_H


22 
	#LIBOPENCM3_MEMORYMAP_H


	)

24 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

29 
	#PERIPH_BASE
 (0x40000000U)

	)

30 
	#INFO_BASE
 (0x1ff00000U)

	)

31 
	#PERIPH_BASE_APB1
 (
PERIPH_BASE
 + 0x00000)

	)

32 
	#PERIPH_BASE_APB2
 (
PERIPH_BASE
 + 0x10000)

	)

33 
	#PERIPH_BASE_AHB
 (
PERIPH_BASE
 + 0x20000)

	)

38 
	#TIM2_BASE
 (
PERIPH_BASE_APB1
 + 0x0000)

	)

39 
	#TIM3_BASE
 (
PERIPH_BASE_APB1
 + 0x0400)

	)

40 
	#TIM4_BASE
 (
PERIPH_BASE_APB1
 + 0x0800)

	)

41 
	#TIM5_BASE
 (
PERIPH_BASE_APB1
 + 0x0c00)

	)

42 
	#TIM6_BASE
 (
PERIPH_BASE_APB1
 + 0x1000)

	)

43 
	#TIM7_BASE
 (
PERIPH_BASE_APB1
 + 0x1400)

	)

44 
	#LCD_BASE
 (
PERIPH_BASE_APB1
 + 0x2400)

	)

45 
	#RTC_BASE
 (
PERIPH_BASE_APB1
 + 0x2800)

	)

46 
	#WWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x2c00)

	)

47 
	#IWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x3000)

	)

49 
	#SPI2_BASE
 (
PERIPH_BASE_APB1
 + 0x3800)

	)

50 
	#SPI3_BASE
 (
PERIPH_BASE_APB1
 + 0x3c00)

	)

52 
	#USART2_BASE
 (
PERIPH_BASE_APB1
 + 0x4400)

	)

53 
	#USART3_BASE
 (
PERIPH_BASE_APB1
 + 0x4800)

	)

54 
	#USART4_BASE
 (
PERIPH_BASE_APB1
 + 0x4c00)

	)

55 
	#USART5_BASE
 (
PERIPH_BASE_APB1
 + 0x5000)

	)

56 
	#I2C1_BASE
 (
PERIPH_BASE_APB1
 + 0x5400)

	)

57 
	#I2C2_BASE
 (
PERIPH_BASE_APB1
 + 0x5800)

	)

58 
	#USB_DEV_FS_BASE
 (
PERIPH_BASE_APB1
 + 0x5c00)

	)

59 
	#USB_PMA_BASE
 (
PERIPH_BASE_APB1
 + 0x6000)

	)

61 
	#POWER_CONTROL_BASE
 (
PERIPH_BASE_APB1
 + 0x7000)

	)

62 
	#DAC_BASE
 (
PERIPH_BASE_APB1
 + 0x7400)

	)

63 
	#OPAMP_BASE
 (
PERIPH_BASE_APB1
 + 0x7c5c)

	)

64 
	#COMP_BASE
 (
PERIPH_BASE_APB1
 + 0x7c00)

	)

65 
	#ROUTING_BASE
 (
PERIPH_BASE_APB1
 + 0x7c04)

	)

68 
	#SYSCFG_BASE
 (
PERIPH_BASE_APB2
 + 0x0000)

	)

69 
	#EXTI_BASE
 (
PERIPH_BASE_APB2
 + 0x0400)

	)

70 
	#TIM9_BASE
 (
PERIPH_BASE_APB2
 + 0x0800)

	)

71 
	#TIM10_BASE
 (
PERIPH_BASE_APB2
 + 0x0c00)

	)

72 
	#TIM11_BASE
 (
PERIPH_BASE_APB2
 + 0x1000)

	)

74 
	#ADC_BASE
 (
PERIPH_BASE_APB2
 + 0x2400)

	)

76 
	#ADC1_BASE
 
ADC_BASE


	)

78 
	#SDIO_BASE
 (
PERIPH_BASE_APB2
 + 0x2c00)

	)

79 
	#SPI1_BASE
 (
PERIPH_BASE_APB2
 + 0x3000)

	)

81 
	#USART1_BASE
 (
PERIPH_BASE_APB2
 + 0x3800)

	)

84 
	#GPIO_PORT_A_BASE
 (
PERIPH_BASE_AHB
 + 0x00000)

	)

85 
	#GPIO_PORT_B_BASE
 (
PERIPH_BASE_AHB
 + 0x00400)

	)

86 
	#GPIO_PORT_C_BASE
 (
PERIPH_BASE_AHB
 + 0x00800)

	)

87 
	#GPIO_PORT_D_BASE
 (
PERIPH_BASE_AHB
 + 0x00c00)

	)

88 
	#GPIO_PORT_E_BASE
 (
PERIPH_BASE_AHB
 + 0x01000)

	)

89 
	#GPIO_PORT_H_BASE
 (
PERIPH_BASE_AHB
 + 0x01400)

	)

90 
	#GPIO_PORT_F_BASE
 (
PERIPH_BASE_AHB
 + 0x01800)

	)

91 
	#GPIO_PORT_G_BASE
 (
PERIPH_BASE_AHB
 + 0x01c00)

	)

93 
	#CRC_BASE
 (
PERIPH_BASE_AHB
 + 0x03000)

	)

95 
	#RCC_BASE
 (
PERIPH_BASE_AHB
 + 0x03800)

	)

96 
	#FLASH_MEM_INTERFACE_BASE
 (
PERIPH_BASE_AHB
 + 0x03c00)

	)

98 
	#DMA1_BASE
 (
PERIPH_BASE_AHB
 + 0x06000)

	)

99 
	#DMA2_BASE
 (
PERIPH_BASE_AHB
 + 0x04000)

	)

102 
	#DBGMCU_BASE
 (
PPBI_BASE
 + 0x00042000)

	)

105 
	#FSMC_BASE
 (
PERIPH_BASE
 + 0x60000000)

	)

107 
	#AES_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

110 
	#DESIG_FLASH_SIZE_BASE
 (
INFO_BASE
 + 0x8004C)

	)

111 
	#DESIG_UNIQUE_ID_BASE
 (
INFO_BASE
 + 0x80050)

	)

112 
	#DESIG_UNIQUE_ID0
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
)

	)

113 
	#DESIG_UNIQUE_ID1
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 4)

	)

114 
	#DESIG_UNIQUE_ID2
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 0x14)

	)

117 
	#ST_VREFINT_CAL
 
	`MMIO16
(0x1FF80078)

	)

118 
	#ST_TSENSE_CAL1_30C
 
	`MMIO16
(0x1FF8007A)

	)

119 
	#ST_TSENSE_CAL2_110C
 
	`MMIO16
(0x1FF8007E)

	)

	@libopencm3/include/libopencm3/stm32/l1/nvic.h

6 #i‚de‡
LIBOPENCM3_STM32_L1_NVIC_H


7 
	#LIBOPENCM3_STM32_L1_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_WWDG_IRQ
 0

	)

17 
	#NVIC_PVD_IRQ
 1

	)

18 
	#NVIC_TAMPER_STAMP_IRQ
 2

	)

19 
	#NVIC_RTC_WKUP_IRQ
 3

	)

20 
	#NVIC_FLASH_IRQ
 4

	)

21 
	#NVIC_RCC_IRQ
 5

	)

22 
	#NVIC_EXTI0_IRQ
 6

	)

23 
	#NVIC_EXTI1_IRQ
 7

	)

24 
	#NVIC_EXTI2_IRQ
 8

	)

25 
	#NVIC_EXTI3_IRQ
 9

	)

26 
	#NVIC_EXTI4_IRQ
 10

	)

27 
	#NVIC_DMA1_CHANNEL1_IRQ
 11

	)

28 
	#NVIC_DMA1_CHANNEL2_IRQ
 12

	)

29 
	#NVIC_DMA1_CHANNEL3_IRQ
 13

	)

30 
	#NVIC_DMA1_CHANNEL4_IRQ
 14

	)

31 
	#NVIC_DMA1_CHANNEL5_IRQ
 15

	)

32 
	#NVIC_DMA1_CHANNEL6_IRQ
 16

	)

33 
	#NVIC_DMA1_CHANNEL7_IRQ
 17

	)

34 
	#NVIC_ADC1_IRQ
 18

	)

35 
	#NVIC_USB_HP_IRQ
 19

	)

36 
	#NVIC_USB_LP_IRQ
 20

	)

37 
	#NVIC_DAC_IRQ
 21

	)

38 
	#NVIC_COMP_IRQ
 22

	)

39 
	#NVIC_EXTI9_5_IRQ
 23

	)

40 
	#NVIC_LCD_IRQ
 24

	)

41 
	#NVIC_TIM9_IRQ
 25

	)

42 
	#NVIC_TIM10_IRQ
 26

	)

43 
	#NVIC_TIM11_IRQ
 27

	)

44 
	#NVIC_TIM2_IRQ
 28

	)

45 
	#NVIC_TIM3_IRQ
 29

	)

46 
	#NVIC_TIM4_IRQ
 30

	)

47 
	#NVIC_I2C1_EV_IRQ
 31

	)

48 
	#NVIC_I2C1_ER_IRQ
 32

	)

49 
	#NVIC_I2C2_EV_IRQ
 33

	)

50 
	#NVIC_I2C2_ER_IRQ
 34

	)

51 
	#NVIC_SPI1_IRQ
 35

	)

52 
	#NVIC_SPI2_IRQ
 36

	)

53 
	#NVIC_USART1_IRQ
 37

	)

54 
	#NVIC_USART2_IRQ
 38

	)

55 
	#NVIC_USART3_IRQ
 39

	)

56 
	#NVIC_EXTI15_10_IRQ
 40

	)

57 
	#NVIC_RTC_ALARM_IRQ
 41

	)

58 
	#NVIC_USB_FS_WAKEUP_IRQ
 42

	)

59 
	#NVIC_TIM6_IRQ
 43

	)

60 
	#NVIC_TIM7_IRQ
 44

	)

61 
	#NVIC_SDIO_IRQ
 45

	)

62 
	#NVIC_TIM5_IRQ
 46

	)

63 
	#NVIC_SPI3_IRQ
 47

	)

64 
	#NVIC_UART4_IRQ
 48

	)

65 
	#NVIC_UART5_IRQ
 49

	)

66 
	#NVIC_DMA2_CH1_IRQ
 50

	)

67 
	#NVIC_DMA2_CH2_IRQ
 51

	)

68 
	#NVIC_DMA2_CH3_IRQ
 52

	)

69 
	#NVIC_DMA2_CH4_IRQ
 53

	)

70 
	#NVIC_DMA2_CH5_IRQ
 54

	)

71 
	#NVIC_AES_IRQ
 55

	)

72 
	#NVIC_COMP_ACQ_IRQ
 56

	)

74 
	#NVIC_IRQ_COUNT
 57

	)

83 
BEGIN_DECLS


85 
wwdg_i§
();

86 
pvd_i§
();

87 
èm≥r_°amp_i§
();

88 
πc_wkup_i§
();

89 
Êash_i§
();

90 
rcc_i§
();

91 
exti0_i§
();

92 
exti1_i§
();

93 
exti2_i§
();

94 
exti3_i§
();

95 
exti4_i§
();

96 
dma1_ch™√l1_i§
();

97 
dma1_ch™√l2_i§
();

98 
dma1_ch™√l3_i§
();

99 
dma1_ch™√l4_i§
();

100 
dma1_ch™√l5_i§
();

101 
dma1_ch™√l6_i§
();

102 
dma1_ch™√l7_i§
();

103 
adc1_i§
();

104 
usb_hp_i§
();

105 
usb_Õ_i§
();

106 
dac_i§
();

107 
comp_i§
();

108 
exti9_5_i§
();

109 
lcd_i§
();

110 
tim9_i§
();

111 
tim10_i§
();

112 
tim11_i§
();

113 
tim2_i§
();

114 
tim3_i§
();

115 
tim4_i§
();

116 
i2c1_ev_i§
();

117 
i2c1_î_i§
();

118 
i2c2_ev_i§
();

119 
i2c2_î_i§
();

120 
•i1_i§
();

121 
•i2_i§
();

122 
ußπ1_i§
();

123 
ußπ2_i§
();

124 
ußπ3_i§
();

125 
exti15_10_i§
();

126 
πc_Æ¨m_i§
();

127 
usb_fs_wakeup_i§
();

128 
tim6_i§
();

129 
tim7_i§
();

130 
sdio_i§
();

131 
tim5_i§
();

132 
•i3_i§
();

133 
u¨t4_i§
();

134 
u¨t5_i§
();

135 
dma2_ch1_i§
();

136 
dma2_ch2_i§
();

137 
dma2_ch3_i§
();

138 
dma2_ch4_i§
();

139 
dma2_ch5_i§
();

140 
´s_i§
();

141 
comp_acq_i§
();

143 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l1/pwr.h

36 #i‚de‡
LIBOPENCM3_PWR_H


37 
	#LIBOPENCM3_PWR_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/pwr_comm⁄_v2.h
>

50 
	#PWR_CSR_EWUP3
 (1 << 10)

	)

	@libopencm3/include/libopencm3/stm32/l1/rcc.h

48 #i‚de‡
LIBOPENCM3_RCC_H


49 
	#LIBOPENCM3_RCC_H


	)

51 
	~<lib›ícm3/°m32/pwr.h
>

55 
	#RCC_CR
 
	`MMIO32
(
RCC_BASE
 + 0x00)

	)

56 
	#RCC_ICSCR
 
	`MMIO32
(
RCC_BASE
 + 0x04)

	)

57 
	#RCC_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x08)

	)

58 
	#RCC_CIR
 
	`MMIO32
(
RCC_BASE
 + 0x0c)

	)

59 
	#RCC_AHBRSTR
 
	`MMIO32
(
RCC_BASE
 + 0x10)

	)

60 
	#RCC_APB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x14)

	)

61 
	#RCC_APB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 0x18)

	)

62 
	#RCC_AHBENR
 
	`MMIO32
(
RCC_BASE
 + 0x1c)

	)

63 
	#RCC_APB2ENR
 
	`MMIO32
(
RCC_BASE
 + 0x20)

	)

64 
	#RCC_APB1ENR
 
	`MMIO32
(
RCC_BASE
 + 0x24)

	)

65 
	#RCC_AHBLPENR
 
	`MMIO32
(
RCC_BASE
 + 0x28)

	)

66 
	#RCC_APB2LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x2c)

	)

67 
	#RCC_APB1LPENR
 
	`MMIO32
(
RCC_BASE
 + 0x30)

	)

68 
	#RCC_CSR
 
	`MMIO32
(
RCC_BASE
 + 0x34)

	)

72 
	#RCC_CR_RTCPRE_SHIFT
 29

	)

73 
	#RCC_CR_RTCPRE_MASK
 0x3

	)

74 
	#RCC_CR_CSSON
 (1 << 28)

	)

75 
	#RCC_CR_PLLRDY
 (1 << 25)

	)

76 
	#RCC_CR_PLLON
 (1 << 24)

	)

77 
	#RCC_CR_HSEBYP
 (1 << 18)

	)

78 
	#RCC_CR_HSERDY
 (1 << 17)

	)

79 
	#RCC_CR_HSEON
 (1 << 16)

	)

80 
	#RCC_CR_MSIRDY
 (1 << 9)

	)

81 
	#RCC_CR_MSION
 (1 << 8)

	)

82 
	#RCC_CR_HSIRDY
 (1 << 1)

	)

83 
	#RCC_CR_HSION
 (1 << 0)

	)

85 
	#RCC_CR_RTCPRE_DIV2
 0

	)

86 
	#RCC_CR_RTCPRE_DIV4
 1

	)

87 
	#RCC_CR_RTCPRE_DIV8
 2

	)

88 
	#RCC_CR_RTCPRE_DIV16
 3

	)

89 
	#RCC_CR_RTCPRE_SHIFT
 29

	)

90 
	#RCC_CR_RTCPRE_MASK
 0x3

	)

96 
	#RCC_ICSCR_MSITRIM_SHIFT
 24

	)

97 
	#RCC_ICSCR_MSITRIM_MASK
 0xff

	)

98 
	#RCC_ICSCR_MSICAL_SHIFT
 16

	)

99 
	#RCC_ICSCR_MSICAL_MASK
 0xff

	)

101 
	#RCC_ICSCR_MSIRANGE_SHIFT
 13

	)

102 
	#RCC_ICSCR_MSIRANGE_MASK
 0x7

	)

106 
	#RCC_ICSCR_MSIRANGE_65KHZ
 0x0

	)

107 
	#RCC_ICSCR_MSIRANGE_131KHZ
 0x1

	)

108 
	#RCC_ICSCR_MSIRANGE_262KHZ
 0x2

	)

109 
	#RCC_ICSCR_MSIRANGE_524KHZ
 0x3

	)

110 
	#RCC_ICSCR_MSIRANGE_1MHZ
 0x4

	)

111 
	#RCC_ICSCR_MSIRANGE_2MHZ
 0x5

	)

112 
	#RCC_ICSCR_MSIRANGE_4MHZ
 0x6

	)

114 
	#RCC_ICSCR_HSITRIM_SHIFT
 8

	)

115 
	#RCC_ICSCR_HSITRIM_MASK
 0x1f

	)

116 
	#RCC_ICSCR_HSICAL_SHIFT
 0

	)

117 
	#RCC_ICSCR_HSICAL_MASK
 0xff

	)

123 
	#RCC_CFGR_MCOPRE_DIV1
 0

	)

124 
	#RCC_CFGR_MCOPRE_DIV2
 1

	)

125 
	#RCC_CFGR_MCOPRE_DIV4
 2

	)

126 
	#RCC_CFGR_MCOPRE_DIV8
 3

	)

127 
	#RCC_CFGR_MCOPRE_DIV16
 4

	)

128 
	#RCC_CFGR_MCOPRE_SHIFT
 28

	)

129 
	#RCC_CFGR_MCOPRE_MASK
 0x7

	)

132 
	#RCC_CFGR_MCO_NOCLK
 0x0

	)

133 
	#RCC_CFGR_MCO_SYSCLK
 0x1

	)

134 
	#RCC_CFGR_MCO_HSI
 0x2

	)

135 
	#RCC_CFGR_MCO_MSI
 0x3

	)

136 
	#RCC_CFGR_MCO_HSE
 0x4

	)

137 
	#RCC_CFGR_MCO_PLL
 0x5

	)

138 
	#RCC_CFGR_MCO_LSI
 0x6

	)

139 
	#RCC_CFGR_MCO_LSE
 0x7

	)

140 
	#RCC_CFGR_MCO_SHIFT
 24

	)

141 
	#RCC_CFGR_MCO_MASK
 0x7

	)

144 
	#RCC_CFGR_PLLDIV_DIV2
 0x1

	)

145 
	#RCC_CFGR_PLLDIV_DIV3
 0x2

	)

146 
	#RCC_CFGR_PLLDIV_DIV4
 0x3

	)

147 
	#RCC_CFGR_PLLDIV_SHIFT
 22

	)

148 
	#RCC_CFGR_PLLDIV_MASK
 0x3

	)

151 
	#RCC_CFGR_PLLMUL_MUL3
 0x0

	)

152 
	#RCC_CFGR_PLLMUL_MUL4
 0x1

	)

153 
	#RCC_CFGR_PLLMUL_MUL6
 0x2

	)

154 
	#RCC_CFGR_PLLMUL_MUL8
 0x3

	)

155 
	#RCC_CFGR_PLLMUL_MUL12
 0x4

	)

156 
	#RCC_CFGR_PLLMUL_MUL16
 0x5

	)

157 
	#RCC_CFGR_PLLMUL_MUL24
 0x6

	)

158 
	#RCC_CFGR_PLLMUL_MUL32
 0x7

	)

159 
	#RCC_CFGR_PLLMUL_MUL48
 0x8

	)

160 
	#RCC_CFGR_PLLMUL_SHIFT
 18

	)

161 
	#RCC_CFGR_PLLMUL_MASK
 0xf

	)

164 
	#RCC_CFGR_PLLSRC_HSI_CLK
 0x0

	)

165 
	#RCC_CFGR_PLLSRC_HSE_CLK
 0x1

	)

168 
	#RCC_CFGR_PPRE2_HCLK_NODIV
 0x0

	)

169 
	#RCC_CFGR_PPRE2_HCLK_DIV2
 0x4

	)

170 
	#RCC_CFGR_PPRE2_HCLK_DIV4
 0x5

	)

171 
	#RCC_CFGR_PPRE2_HCLK_DIV8
 0x6

	)

172 
	#RCC_CFGR_PPRE2_HCLK_DIV16
 0x7

	)

173 
	#RCC_CFGR_PPRE2_MASK
 0x7

	)

174 
	#RCC_CFGR_PPRE2_SHIFT
 11

	)

177 
	#RCC_CFGR_PPRE1_HCLK_NODIV
 0x0

	)

178 
	#RCC_CFGR_PPRE1_HCLK_DIV2
 0x4

	)

179 
	#RCC_CFGR_PPRE1_HCLK_DIV4
 0x5

	)

180 
	#RCC_CFGR_PPRE1_HCLK_DIV8
 0x6

	)

181 
	#RCC_CFGR_PPRE1_HCLK_DIV16
 0x7

	)

182 
	#RCC_CFGR_PPRE1_MASK
 0x7

	)

183 
	#RCC_CFGR_PPRE1_SHIFT
 8

	)

186 
	#RCC_CFGR_HPRE_SYSCLK_NODIV
 0x0

	)

187 
	#RCC_CFGR_HPRE_SYSCLK_DIV2
 0x8

	)

188 
	#RCC_CFGR_HPRE_SYSCLK_DIV4
 0x9

	)

189 
	#RCC_CFGR_HPRE_SYSCLK_DIV8
 0xa

	)

190 
	#RCC_CFGR_HPRE_SYSCLK_DIV16
 0xb

	)

191 
	#RCC_CFGR_HPRE_SYSCLK_DIV64
 0xc

	)

192 
	#RCC_CFGR_HPRE_SYSCLK_DIV128
 0xd

	)

193 
	#RCC_CFGR_HPRE_SYSCLK_DIV256
 0xe

	)

194 
	#RCC_CFGR_HPRE_SYSCLK_DIV512
 0xf

	)

195 
	#RCC_CFGR_HPRE_MASK
 0xf

	)

196 
	#RCC_CFGR_HPRE_SHIFT
 4

	)

199 
	#RCC_CFGR_SWS_SYSCLKSEL_MSICLK
 0x0

	)

200 
	#RCC_CFGR_SWS_SYSCLKSEL_HSICLK
 0x1

	)

201 
	#RCC_CFGR_SWS_SYSCLKSEL_HSECLK
 0x2

	)

202 
	#RCC_CFGR_SWS_SYSCLKSEL_PLLCLK
 0x3

	)

203 
	#RCC_CFGR_SWS_MASK
 0x3

	)

204 
	#RCC_CFGR_SWS_SHIFT
 2

	)

207 
	#RCC_CFGR_SW_SYSCLKSEL_MSICLK
 0x0

	)

208 
	#RCC_CFGR_SW_SYSCLKSEL_HSICLK
 0x1

	)

209 
	#RCC_CFGR_SW_SYSCLKSEL_HSECLK
 0x2

	)

210 
	#RCC_CFGR_SW_SYSCLKSEL_PLLCLK
 0x3

	)

211 
	#RCC_CFGR_SW_MASK
 0x3

	)

212 
	#RCC_CFGR_SW_SHIFT
 0

	)

217 
	#RCC_CIR_CSSC
 (1 << 23)

	)

220 
	#RCC_CIR_MSIRDYC
 (1 << 21)

	)

221 
	#RCC_CIR_PLLRDYC
 (1 << 20)

	)

222 
	#RCC_CIR_HSERDYC
 (1 << 19)

	)

223 
	#RCC_CIR_HSIRDYC
 (1 << 18)

	)

224 
	#RCC_CIR_LSERDYC
 (1 << 17)

	)

225 
	#RCC_CIR_LSIRDYC
 (1 << 16)

	)

228 
	#RCC_CIR_MSIRDYIE
 (1 << 13)

	)

229 
	#RCC_CIR_PLLRDYIE
 (1 << 12)

	)

230 
	#RCC_CIR_HSERDYIE
 (1 << 11)

	)

231 
	#RCC_CIR_HSIRDYIE
 (1 << 10)

	)

232 
	#RCC_CIR_LSERDYIE
 (1 << 9)

	)

233 
	#RCC_CIR_LSIRDYIE
 (1 << 8)

	)

236 
	#RCC_CIR_CSSF
 (1 << 7)

	)

239 
	#RCC_CIR_MSIRDYF
 (1 << 5Ë

	)

240 
	#RCC_CIR_PLLRDYF
 (1 << 4)

	)

241 
	#RCC_CIR_HSERDYF
 (1 << 3)

	)

242 
	#RCC_CIR_HSIRDYF
 (1 << 2)

	)

243 
	#RCC_CIR_LSERDYF
 (1 << 1)

	)

244 
	#RCC_CIR_LSIRDYF
 (1 << 0)

	)

247 
	#RCC_AHBRSTR_DMA1RST
 (1 << 24)

	)

248 
	#RCC_AHBRSTR_FLITFRST
 (1 << 15)

	)

249 
	#RCC_AHBRSTR_CRCRST
 (1 << 12)

	)

250 
	#RCC_AHBRSTR_GPIOHRST
 (1 << 5)

	)

251 
	#RCC_AHBRSTR_GPIOERST
 (1 << 4)

	)

252 
	#RCC_AHBRSTR_GPIODRST
 (1 << 3)

	)

253 
	#RCC_AHBRSTR_GPIOCRST
 (1 << 2)

	)

254 
	#RCC_AHBRSTR_GPIOBRST
 (1 << 1)

	)

255 
	#RCC_AHBRSTR_GPIOARST
 (1 << 0)

	)

259 
	#RCC_APB2RSTR_USART1RST
 (1 << 14)

	)

260 
	#RCC_APB2RSTR_SPI1RST
 (1 << 12)

	)

261 
	#RCC_APB2RSTR_ADC1RST
 (1 << 9)

	)

262 
	#RCC_APB2RSTR_TIM11RST
 (1 << 4)

	)

263 
	#RCC_APB2RSTR_TIM10RST
 (1 << 3)

	)

264 
	#RCC_APB2RSTR_TIM9RST
 (1 << 2)

	)

265 
	#RCC_APB2RSTR_SYSCFGRST
 (1 << 0)

	)

269 
	#RCC_APB1RSTR_COMPRST
 (1 << 31)

	)

270 
	#RCC_APB1RSTR_DACRST
 (1 << 29)

	)

271 
	#RCC_APB1RSTR_PWRRST
 (1 << 28)

	)

272 
	#RCC_APB1RSTR_USBRST
 (1 << 23)

	)

273 
	#RCC_APB1RSTR_I2C2RST
 (1 << 22)

	)

274 
	#RCC_APB1RSTR_I2C1RST
 (1 << 21)

	)

275 
	#RCC_APB1RSTR_USART3RST
 (1 << 18)

	)

276 
	#RCC_APB1RSTR_USART2RST
 (1 << 17)

	)

277 
	#RCC_APB1RSTR_SPI2RST
 (1 << 14)

	)

278 
	#RCC_APB1RSTR_WWDGRST
 (1 << 11)

	)

279 
	#RCC_APB1RSTR_LCDRST
 (1 << 9)

	)

280 
	#RCC_APB1RSTR_TIM7RST
 (1 << 5)

	)

281 
	#RCC_APB1RSTR_TIM6RST
 (1 << 4)

	)

282 
	#RCC_APB1RSTR_TIM5RST
 (1 << 3)

	)

283 
	#RCC_APB1RSTR_TIM4RST
 (1 << 2)

	)

284 
	#RCC_APB1RSTR_TIM3RST
 (1 << 1)

	)

285 
	#RCC_APB1RSTR_TIM2RST
 (1 << 0)

	)

293 
	#RCC_AHBENR_DMA1EN
 (1 << 24)

	)

294 
	#RCC_AHBENR_FLITFEN
 (1 << 15)

	)

295 
	#RCC_AHBENR_CRCEN
 (1 << 12)

	)

296 
	#RCC_AHBENR_GPIOHEN
 (1 << 5)

	)

297 
	#RCC_AHBENR_GPIOEEN
 (1 << 4)

	)

298 
	#RCC_AHBENR_GPIODEN
 (1 << 3)

	)

299 
	#RCC_AHBENR_GPIOCEN
 (1 << 2)

	)

300 
	#RCC_AHBENR_GPIOBEN
 (1 << 1)

	)

301 
	#RCC_AHBENR_GPIOAEN
 (1 << 0)

	)

310 
	#RCC_APB2ENR_USART1EN
 (1 << 14)

	)

311 
	#RCC_APB2ENR_SPI1EN
 (1 << 12)

	)

312 
	#RCC_APB2ENR_ADC1EN
 (1 << 9)

	)

313 
	#RCC_APB2ENR_TIM11EN
 (1 << 4)

	)

314 
	#RCC_APB2ENR_TIM10EN
 (1 << 3)

	)

315 
	#RCC_APB2ENR_TIM9EN
 (1 << 2)

	)

316 
	#RCC_APB2ENR_SYSCFGEN
 (1 << 0)

	)

325 
	#RCC_APB1ENR_COMPEN
 (1 << 31)

	)

326 
	#RCC_APB1ENR_DACEN
 (1 << 29)

	)

327 
	#RCC_APB1ENR_PWREN
 (1 << 28)

	)

328 
	#RCC_APB1ENR_USBEN
 (1 << 23)

	)

329 
	#RCC_APB1ENR_I2C2EN
 (1 << 22)

	)

330 
	#RCC_APB1ENR_I2C1EN
 (1 << 21)

	)

331 
	#RCC_APB1ENR_USART3EN
 (1 << 18)

	)

332 
	#RCC_APB1ENR_USART2EN
 (1 << 17)

	)

333 
	#RCC_APB1ENR_SPI2EN
 (1 << 14)

	)

334 
	#RCC_APB1ENR_WWDGEN
 (1 << 11)

	)

335 
	#RCC_APB1ENR_LCDEN
 (1 << 9)

	)

336 
	#RCC_APB1ENR_TIM7EN
 (1 << 5)

	)

337 
	#RCC_APB1ENR_TIM6EN
 (1 << 4)

	)

338 
	#RCC_APB1ENR_TIM4EN
 (1 << 2)

	)

339 
	#RCC_APB1ENR_TIM3EN
 (1 << 1)

	)

340 
	#RCC_APB1ENR_TIM2EN
 (1 << 0)

	)

344 
	#RCC_AHBLPENR_DMA1LPEN
 (1 << 24)

	)

345 
	#RCC_AHBLPENR_SRAMLPEN
 (1 << 16)

	)

346 
	#RCC_AHBLPENR_FLITFLPEN
 (1 << 15)

	)

347 
	#RCC_AHBLPENR_CRCLPEN
 (1 << 12)

	)

348 
	#RCC_AHBLPENR_GPIOHLPEN
 (1 << 5)

	)

349 
	#RCC_AHBLPENR_GPIOELPEN
 (1 << 4)

	)

350 
	#RCC_AHBLPENR_GPIODLPEN
 (1 << 3)

	)

351 
	#RCC_AHBLPENR_GPIOCLPEN
 (1 << 2)

	)

352 
	#RCC_AHBLPENR_GPIOBLPEN
 (1 << 1)

	)

353 
	#RCC_AHBLPENR_GPIOALPEN
 (1 << 0)

	)

355 
	#RCC_APB2LPENR_USART1LPEN
 (1 << 14)

	)

356 
	#RCC_APB2LPENR_SPI1LPEN
 (1 << 12)

	)

357 
	#RCC_APB2LPENR_ADC1LPEN
 (1 << 9)

	)

358 
	#RCC_APB2LPENR_TIM11LPEN
 (1 << 4)

	)

359 
	#RCC_APB2LPENR_TIM10LPEN
 (1 << 3)

	)

360 
	#RCC_APB2LPENR_TIM9LPEN
 (1 << 2)

	)

361 
	#RCC_APB2LPENR_SYSCFGLPEN
 (1 << 0)

	)

363 
	#RCC_APB1LPENR_COMPLPEN
 (1 << 31)

	)

364 
	#RCC_APB1LPENR_DACLPEN
 (1 << 29)

	)

365 
	#RCC_APB1LPENR_PWRLPEN
 (1 << 28)

	)

366 
	#RCC_APB1LPENR_USBLPEN
 (1 << 23)

	)

367 
	#RCC_APB1LPENR_I2C2LPEN
 (1 << 22)

	)

368 
	#RCC_APB1LPENR_I2C1LPEN
 (1 << 21)

	)

369 
	#RCC_APB1LPENR_USART3LPEN
 (1 << 18)

	)

370 
	#RCC_APB1LPENR_USART2LPEN
 (1 << 17)

	)

371 
	#RCC_APB1LPENR_SPI2LPEN
 (1 << 14)

	)

372 
	#RCC_APB1LPENR_WWDGLPEN
 (1 << 11)

	)

373 
	#RCC_APB1LPENR_LCDLPEN
 (1 << 9)

	)

374 
	#RCC_APB1LPENR_TIM7LPEN
 (1 << 5)

	)

375 
	#RCC_APB1LPENR_TIM6LPEN
 (1 << 4)

	)

376 
	#RCC_APB1LPENR_TIM4LPEN
 (1 << 2)

	)

377 
	#RCC_APB1LPENR_TIM3LPEN
 (1 << 1)

	)

378 
	#RCC_APB1LPENR_TIM2LPEN
 (1 << 0)

	)

383 
	#RCC_CSR_LPWRRSTF
 (1 << 31)

	)

384 
	#RCC_CSR_WWDGRSTF
 (1 << 30)

	)

385 
	#RCC_CSR_IWDGRSTF
 (1 << 29)

	)

386 
	#RCC_CSR_SFTRSTF
 (1 << 28)

	)

387 
	#RCC_CSR_PORRSTF
 (1 << 27)

	)

388 
	#RCC_CSR_PINRSTF
 (1 << 26)

	)

389 
	#RCC_CSR_OBLRSTF
 (1 << 25)

	)

390 
	#RCC_CSR_RMVF
 (1 << 24)

	)

391 
	#RCC_CSR_RESET_FLAGS
 (
RCC_CSR_LPWRRSTF
 | 
RCC_CSR_WWDGRSTF
 |\

392 
RCC_CSR_IWDGRSTF
 | 
RCC_CSR_SFTRSTF
 | 
RCC_CSR_PORRSTF
 |\

393 
RCC_CSR_PINRSTF
 | 
RCC_CSR_OBLRSTF
)

	)

394 
	#RCC_CSR_RTCRST
 (1 << 23)

	)

395 
	#RCC_CSR_RTCEN
 (1 << 22)

	)

396 
	#RCC_CSR_RTCSEL_SHIFT
 (16)

	)

397 
	#RCC_CSR_RTCSEL_MASK
 (0x3)

	)

398 
	#RCC_CSR_RTCSEL_NONE
 (0x0)

	)

399 
	#RCC_CSR_RTCSEL_LSE
 (0x1)

	)

400 
	#RCC_CSR_RTCSEL_LSI
 (0x2)

	)

401 
	#RCC_CSR_RTCSEL_HSI
 (0x3)

	)

402 
	#RCC_CSR_LSECSSD
 (1 << 12)

	)

403 
	#RCC_CSR_LSECSSON
 (1 << 11)

	)

404 
	#RCC_CSR_LSEBYP
 (1 << 10)

	)

405 
	#RCC_CSR_LSERDY
 (1 << 9)

	)

406 
	#RCC_CSR_LSEON
 (1 << 8)

	)

407 
	#RCC_CSR_LSIRDY
 (1 << 1)

	)

408 
	#RCC_CSR_LSION
 (1 << 0)

	)

410 
	srcc_˛ock_sˇÀ
 {

411 
uöt8_t
 
	m∂l_mul
;

412 
uöt16_t
 
	m∂l_div
;

413 
uöt8_t
 
	m∂l_sour˚
;

414 
uöt8_t
 
	mÊash_waô°©es
;

415 
uöt8_t
 
	mh¥e
;

416 
uöt8_t
 
	mµª1
;

417 
uöt8_t
 
	mµª2
;

418 
pwr_vos_sˇÀ
 
	mvﬁège_sˇÀ
;

419 
uöt32_t
 
	mahb_‰equícy
;

420 
uöt32_t
 
	m≠b1_‰equícy
;

421 
uöt32_t
 
	m≠b2_‰equícy
;

422 
uöt8_t
 
	mmsi_ønge
;

425 
	ercc_˛ock_c⁄fig_íåy
 {

426 
	mRCC_CLOCK_VRANGE1_HSI_PLL_24MHZ
,

427 
	mRCC_CLOCK_VRANGE1_HSI_PLL_32MHZ
,

428 
	mRCC_CLOCK_VRANGE1_HSI_RAW_16MHZ
,

429 
	mRCC_CLOCK_VRANGE1_HSI_RAW_4MHZ
,

430 
	mRCC_CLOCK_VRANGE1_MSI_RAW_4MHZ
,

431 
	mRCC_CLOCK_VRANGE1_MSI_RAW_2MHZ
,

432 
	mRCC_CLOCK_CONFIG_END


435 c⁄° 
rcc_˛ock_sˇÀ
 
rcc_˛ock_c⁄fig
[
RCC_CLOCK_CONFIG_END
];

439 
uöt32_t
 
rcc_ahb_‰equícy
;

440 
uöt32_t
 
rcc_≠b1_‰equícy
;

441 
uöt32_t
 
rcc_≠b2_‰equícy
;

445 
	ercc_osc
 {

446 
	mRCC_PLL
, 
	mRCC_HSE
, 
	mRCC_HSI
, 
	mRCC_MSI
, 
	mRCC_LSE
, 
	mRCC_LSI


449 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

451 
	ercc_≥rùh_˛kí
 {

453 
	mRCC_GPIOA
 = 
_REG_BIT
(0x1c, 0),

454 
	mRCC_GPIOB
 = 
_REG_BIT
(0x1c, 1),

455 
	mRCC_GPIOC
 = 
_REG_BIT
(0x1c, 2),

456 
	mRCC_GPIOD
 = 
_REG_BIT
(0x1c, 3),

457 
	mRCC_GPIOE
 = 
_REG_BIT
(0x1c, 4),

458 
	mRCC_GPIOH
 = 
_REG_BIT
(0x1c, 5),

459 
	mRCC_GPIOF
 = 
_REG_BIT
(0x1c, 6),

460 
	mRCC_GPIOG
 = 
_REG_BIT
(0x1c, 7),

461 
	mRCC_CRC
 = 
_REG_BIT
(0x1c, 12),

462 
	mRCC_FLITF
 = 
_REG_BIT
(0x1c, 15),

463 
	mRCC_DMA1
 = 
_REG_BIT
(0x1c, 24),

464 
	mRCC_DMA2
 = 
_REG_BIT
(0x1c, 25),

465 
	mRCC_AES
 = 
_REG_BIT
(0x1c, 27),

466 
	mRCC_FSMC
 = 
_REG_BIT
(0x1c, 30),

469 
	mRCC_SYSCFG
 = 
_REG_BIT
(0x20, 0),

470 
	mRCC_TIM9
 = 
_REG_BIT
(0x20, 2),

471 
	mRCC_TIM10
 = 
_REG_BIT
(0x20, 3),

472 
	mRCC_TIM11
 = 
_REG_BIT
(0x20, 4),

473 
	mRCC_ADC1
 = 
_REG_BIT
(0x20, 9),

474 
	mRCC_SDIO
 = 
_REG_BIT
(0x20, 11),

475 
	mRCC_SPI1
 = 
_REG_BIT
(0x20, 12),

476 
	mRCC_USART1
 = 
_REG_BIT
(0x20, 14),

479 
	mRCC_TIM2
 = 
_REG_BIT
(0x24, 0),

480 
	mRCC_TIM3
 = 
_REG_BIT
(0x24, 1),

481 
	mRCC_TIM4
 = 
_REG_BIT
(0x24, 2),

482 
	mRCC_TIM5
 = 
_REG_BIT
(0x24, 3),

483 
	mRCC_TIM6
 = 
_REG_BIT
(0x24, 4),

484 
	mRCC_TIM7
 = 
_REG_BIT
(0x24, 5),

485 
	mRCC_LCD
 = 
_REG_BIT
(0x24, 9),

486 
	mRCC_WWDG
 = 
_REG_BIT
(0x24, 11),

487 
	mRCC_SPI2
 = 
_REG_BIT
(0x24, 14),

488 
	mRCC_SPI3
 = 
_REG_BIT
(0x24, 15),

489 
	mRCC_USART2
 = 
_REG_BIT
(0x24, 17),

490 
	mRCC_USART3
 = 
_REG_BIT
(0x24, 18),

491 
	mRCC_UART4
 = 
_REG_BIT
(0x24, 19),

492 
	mRCC_UART5
 = 
_REG_BIT
(0x24, 20),

493 
	mRCC_I2C1
 = 
_REG_BIT
(0x24, 21),

494 
	mRCC_I2C2
 = 
_REG_BIT
(0x24, 22),

495 
	mRCC_USB
 = 
_REG_BIT
(0x24, 23),

496 
	mRCC_PWR
 = 
_REG_BIT
(0x24, 28),

497 
	mRCC_DAC
 = 
_REG_BIT
(0x24, 29),

498 
	mRCC_COMP
 = 
_REG_BIT
(0x24, 31),

501 
	mSCC_GPIOA
 = 
_REG_BIT
(0x28, 0),

502 
	mSCC_GPIOB
 = 
_REG_BIT
(0x28, 1),

503 
	mSCC_GPIOC
 = 
_REG_BIT
(0x28, 2),

504 
	mSCC_GPIOD
 = 
_REG_BIT
(0x28, 3),

505 
	mSCC_GPIOE
 = 
_REG_BIT
(0x28, 4),

506 
	mSCC_GPIOH
 = 
_REG_BIT
(0x28, 5),

507 
	mSCC_GPIOF
 = 
_REG_BIT
(0x28, 6),

508 
	mSCC_GPIOG
 = 
_REG_BIT
(0x28, 7),

509 
	mSCC_CRC
 = 
_REG_BIT
(0x28, 12),

510 
	mSCC_FLITF
 = 
_REG_BIT
(0x28, 15),

511 
	mSCC_SRAM
 = 
_REG_BIT
(0x28, 16),

512 
	mSCC_DMA1
 = 
_REG_BIT
(0x28, 24),

513 
	mSCC_DMA2
 = 
_REG_BIT
(0x28, 25),

514 
	mSCC_AES
 = 
_REG_BIT
(0x28, 27),

515 
	mSCC_FSMC
 = 
_REG_BIT
(0x28, 30),

518 
	mSCC_SYSCFG
 = 
_REG_BIT
(0x2c, 0),

519 
	mSCC_TIM9
 = 
_REG_BIT
(0x2c, 2),

520 
	mSCC_TIM10
 = 
_REG_BIT
(0x2c, 3),

521 
	mSCC_TIM11
 = 
_REG_BIT
(0x2c, 4),

522 
	mSCC_ADC1
 = 
_REG_BIT
(0x2c, 9),

523 
	mSCC_SDIO
 = 
_REG_BIT
(0x2c, 11),

524 
	mSCC_SPI1
 = 
_REG_BIT
(0x2c, 12),

525 
	mSCC_USART1
 = 
_REG_BIT
(0x2c, 14),

528 
	mSCC_TIM2
 = 
_REG_BIT
(0x24, 0),

529 
	mSCC_TIM3
 = 
_REG_BIT
(0x24, 1),

530 
	mSCC_TIM4
 = 
_REG_BIT
(0x24, 2),

531 
	mSCC_TIM5
 = 
_REG_BIT
(0x24, 3),

532 
	mSCC_TIM6
 = 
_REG_BIT
(0x24, 4),

533 
	mSCC_TIM7
 = 
_REG_BIT
(0x24, 5),

534 
	mSCC_LCD
 = 
_REG_BIT
(0x24, 9),

535 
	mSCC_WWDG
 = 
_REG_BIT
(0x24, 11),

536 
	mSCC_SPI2
 = 
_REG_BIT
(0x24, 14),

537 
	mSCC_SPI3
 = 
_REG_BIT
(0x24, 15),

538 
	mSCC_USART2
 = 
_REG_BIT
(0x24, 17),

539 
	mSCC_USART3
 = 
_REG_BIT
(0x24, 18),

540 
	mSCC_UART4
 = 
_REG_BIT
(0x24, 19),

541 
	mSCC_UART5
 = 
_REG_BIT
(0x24, 20),

542 
	mSCC_I2C1
 = 
_REG_BIT
(0x24, 21),

543 
	mSCC_I2C2
 = 
_REG_BIT
(0x24, 22),

544 
	mSCC_USB
 = 
_REG_BIT
(0x24, 23),

545 
	mSCC_PWR
 = 
_REG_BIT
(0x24, 28),

546 
	mSCC_DAC
 = 
_REG_BIT
(0x24, 29),

547 
	mSCC_COMP
 = 
_REG_BIT
(0x24, 31),

550 
	ercc_≥rùh_r°
 {

552 
	mRST_GPIOA
 = 
_REG_BIT
(0x10, 0),

553 
	mRST_GPIOB
 = 
_REG_BIT
(0x10, 1),

554 
	mRST_GPIOC
 = 
_REG_BIT
(0x10, 2),

555 
	mRST_GPIOD
 = 
_REG_BIT
(0x10, 3),

556 
	mRST_GPIOE
 = 
_REG_BIT
(0x10, 4),

557 
	mRST_GPIOH
 = 
_REG_BIT
(0x10, 5),

558 
	mRST_GPIOF
 = 
_REG_BIT
(0x10, 6),

559 
	mRST_GPIOG
 = 
_REG_BIT
(0x10, 7),

560 
	mRST_CRC
 = 
_REG_BIT
(0x10, 12),

561 
	mRST_FLITF
 = 
_REG_BIT
(0x10, 15),

562 
	mRST_DMA1
 = 
_REG_BIT
(0x10, 24),

563 
	mRST_DMA2
 = 
_REG_BIT
(0x10, 25),

564 
	mRST_AES
 = 
_REG_BIT
(0x10, 27),

565 
	mRST_FSMC
 = 
_REG_BIT
(0x10, 30),

568 
	mRST_SYSCFG
 = 
_REG_BIT
(0x14, 0),

569 
	mRST_TIM9
 = 
_REG_BIT
(0x14, 2),

570 
	mRST_TIM10
 = 
_REG_BIT
(0x14, 3),

571 
	mRST_TIM11
 = 
_REG_BIT
(0x14, 4),

572 
	mRST_ADC1
 = 
_REG_BIT
(0x14, 9),

573 
	mRST_SDIO
 = 
_REG_BIT
(0x14, 11),

574 
	mRST_SPI1
 = 
_REG_BIT
(0x14, 12),

575 
	mRST_USART1
 = 
_REG_BIT
(0x14, 14),

578 
	mRST_TIM2
 = 
_REG_BIT
(0x18, 0),

579 
	mRST_TIM3
 = 
_REG_BIT
(0x18, 1),

580 
	mRST_TIM4
 = 
_REG_BIT
(0x18, 2),

581 
	mRST_TIM5
 = 
_REG_BIT
(0x18, 3),

582 
	mRST_TIM6
 = 
_REG_BIT
(0x18, 4),

583 
	mRST_TIM7
 = 
_REG_BIT
(0x18, 5),

584 
	mRST_LCD
 = 
_REG_BIT
(0x18, 9),

585 
	mRST_WWDG
 = 
_REG_BIT
(0x18, 11),

586 
	mRST_SPI2
 = 
_REG_BIT
(0x18, 14),

587 
	mRST_SPI3
 = 
_REG_BIT
(0x18, 15),

588 
	mRST_USART2
 = 
_REG_BIT
(0x18, 17),

589 
	mRST_USART3
 = 
_REG_BIT
(0x18, 18),

590 
	mRST_UART4
 = 
_REG_BIT
(0x18, 19),

591 
	mRST_UART5
 = 
_REG_BIT
(0x18, 20),

592 
	mRST_I2C1
 = 
_REG_BIT
(0x18, 21),

593 
	mRST_I2C2
 = 
_REG_BIT
(0x18, 22),

594 
	mRST_USB
 = 
_REG_BIT
(0x18, 23),

595 
	mRST_PWR
 = 
_REG_BIT
(0x18, 28),

596 
	mRST_DAC
 = 
_REG_BIT
(0x18, 29),

597 
	mRST_COMP
 = 
_REG_BIT
(0x18, 31),

599 
	~<lib›ícm3/°m32/comm⁄/rcc_comm⁄_Æl.h
>

601 
BEGIN_DECLS


603 
rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
);

604 
rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
);

605 
rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
);

606 
rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
);

607 
rcc_css_öt_˛ór
();

608 
rcc_css_öt_Êag
();

609 
rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
);

610 
rcc_osc_⁄
(
rcc_osc
 
osc
);

611 
rcc_osc_off
(
rcc_osc
 
osc
);

612 
rcc_css_íabÀ
();

613 
rcc_css_dißbÀ
();

614 
rcc_£t_msi_ønge
(
uöt32_t
 
ønge
);

615 
rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
);

616 
rcc_£t_∂l_c⁄figuøti⁄
(
uöt32_t
 
sour˚
, uöt32_à
mu…ùlõr
,

617 
uöt32_t
 
divis‹
);

618 
rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
);

619 
rcc_£t_ad˝ª
(
uöt32_t
 
ad˝ª
);

620 
rcc_£t_µª2
(
uöt32_t
 
µª2
);

621 
rcc_£t_µª1
(
uöt32_t
 
µª1
);

622 
rcc_£t_h¥e
(
uöt32_t
 
h¥e
);

623 
rcc_£t_usb¥e
(
uöt32_t
 
usb¥e
);

624 
rcc_£t_π˝ª
(
uöt32_t
 
π˝ª
);

625 
uöt32_t
 
rcc_sy°em_˛ock_sour˚
();

626 
rcc_πc_£À˘_˛ock
(
uöt32_t
 
˛ock
);

627 
rcc_˛ock_£tup_msi
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
);

628 
rcc_˛ock_£tup_hsi
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
);

629 
rcc_˛ock_£tup_∂l
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
);

630 
rcc_backupdomaö_ª£t
();

632 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l1/ri.h

40 
	#RI_BASE
 
ROUTING_BASE
 - 0x04

	)

42 
	#RI_ICR
 
	`MMIO32
(
RI_BASE
 + 0x04)

	)

43 
	#RI_ASCR1
 
	`MMIO32
(
RI_BASE
 + 0x08)

	)

44 
	#RI_ASCR2
 
	`MMIO32
(
RI_BASE
 + 0x0c)

	)

45 
	#RI_HYSCR1
 
	`MMIO32
(
RI_BASE
 + 0x10)

	)

46 
	#RI_HYSCR2
 
	`MMIO32
(
RI_BASE
 + 0x14)

	)

47 
	#RI_HYSCR3
 
	`MMIO32
(
RI_BASE
 + 0x18)

	)

48 
	#RI_HYSCR4
 
	`MMIO32
(
RI_BASE
 + 0x1c)

	)

49 
	#RI_ASMR1
 
	`MMIO32
(
RI_BASE
 + 0x20)

	)

50 
	#RI_CMR1
 
	`MMIO32
(
RI_BASE
 + 0x24)

	)

51 
	#RI_CICR1
 
	`MMIO32
(
RI_BASE
 + 0x28)

	)

52 
	#RI_ASMR2
 
	`MMIO32
(
RI_BASE
 + 0x2c)

	)

53 
	#RI_CMR2
 
	`MMIO32
(
RI_BASE
 + 0x30)

	)

54 
	#RI_CICR2
 
	`MMIO32
(
RI_BASE
 + 0x34)

	)

55 
	#RI_ASMR3
 
	`MMIO32
(
RI_BASE
 + 0x38)

	)

56 
	#RI_CMR3
 
	`MMIO32
(
RI_BASE
 + 0x3c)

	)

57 
	#RI_CICR3
 
	`MMIO32
(
RI_BASE
 + 0x40)

	)

58 
	#RI_ASMR4
 
	`MMIO32
(
RI_BASE
 + 0x44)

	)

59 
	#RI_CMR4
 
	`MMIO32
(
RI_BASE
 + 0x48)

	)

60 
	#RI_CICR4
 
	`MMIO32
(
RI_BASE
 + 0x4c)

	)

61 
	#RI_ASMR5
 
	`MMIO32
(
RI_BASE
 + 0x50)

	)

62 
	#RI_CMR5
 
	`MMIO32
(
RI_BASE
 + 0x54)

	)

63 
	#RI_CICR5
 
	`MMIO32
(
RI_BASE
 + 0x58)

	)

71 
	#RI_ICR_IC1IOS_SHIFT
 0

	)

72 
	#RI_ICR_IC1IOS_MASK
 0xf

	)

73 
	#RI_ICR_IC2IOS_SHIFT
 4

	)

74 
	#RI_ICR_IC2IOS_MASK
 0xf

	)

75 
	#RI_ICR_IC3IOS_SHIFT
 8

	)

76 
	#RI_ICR_IC3IOS_MASK
 0xf

	)

77 
	#RI_ICR_IC4IOS_SHIFT
 12

	)

78 
	#RI_ICR_IC4IOS_MASK
 0xf

	)

79 
	#RI_ICR_TIM_SHIFT
 16

	)

80 
	#RI_ICR_TIM_MASK
 0x3

	)

81 
	#RI_ICR_IC1
 (1 << 18)

	)

82 
	#RI_ICR_IC2
 (1 << 19)

	)

83 
	#RI_ICR_IC3
 (1 << 20)

	)

84 
	#RI_ICR_IC4
 (1 << 21)

	)

93 
	#RI_ASCR1_CH0_GR1_1
 (1 << 0)

	)

94 
	#RI_ASCR1_CH1_GR1_2
 (1 << 1)

	)

95 
	#RI_ASCR1_CH2_GR1_3
 (1 << 2)

	)

96 
	#RI_ASCR1_CH3_GR1_4
 (1 << 3)

	)

97 
	#RI_ASCR1_CH4
 (1 << 4)

	)

98 
	#RI_ASCR1_CH5
 (1 << 5)

	)

99 
	#RI_ASCR1_CH6_GR2_1
 (1 << 6)

	)

100 
	#RI_ASCR1_CH7_GR2_2
 (1 << 7)

	)

101 
	#RI_ASCR1_CH8_GR3_1
 (1 << 8)

	)

102 
	#RI_ASCR1_CH9_GR3_2
 (1 << 9)

	)

103 
	#RI_ASCR1_CH10_GR8_1
 (1 << 10)

	)

104 
	#RI_ASCR1_CH11_GR8_2
 (1 << 11)

	)

105 
	#RI_ASCR1_CH12_GR8_3
 (1 << 12)

	)

106 
	#RI_ASCR1_CH13_GR8_4
 (1 << 13)

	)

107 
	#RI_ASCR1_CH14_GR9_1
 (1 << 14)

	)

108 
	#RI_ASCR1_CH15_GR9_2
 (1 << 15)

	)

109 
	#RI_ASCR1_CH31_GR11_5
 (1 << 16)

	)

111 
	#RI_ASCR1_CH18_GR7_1
 (1 << 18)

	)

112 
	#RI_ASCR1_CH19_GR7_2
 (1 << 19)

	)

113 
	#RI_ASCR1_CH20_GR7_3
 (1 << 20)

	)

114 
	#RI_ASCR1_CH21_GR7_4
 (1 << 21)

	)

115 
	#RI_ASCR1_CH22
 (1 << 22)

	)

116 
	#RI_ASCR1_CH23
 (1 << 23)

	)

117 
	#RI_ASCR1_CH24
 (1 << 24)

	)

118 
	#RI_ASCR1_CH25
 (1 << 25)

	)

119 
	#RI_ASCR1_VCOMP
 (1 << 26)

	)

120 
	#RI_ASCR1_CH27_GR11_1
 (1 << 27)

	)

121 
	#RI_ASCR1_CH28_GR11_2
 (1 << 28)

	)

122 
	#RI_ASCR1_CH29_GR11_3
 (1 << 29)

	)

123 
	#RI_ASCR1_CH30_GR11_4
 (1 << 30)

	)

124 
	#RI_ASCR1_SCM
 (1 << 31)

	)

133 
	#RI_ASCR2_GR10_1
 (1 << 0)

	)

134 
	#RI_ASCR2_GR10_2
 (1 << 1)

	)

135 
	#RI_ASCR2_GR10_3
 (1 << 2)

	)

136 
	#RI_ASCR2_GR10_4
 (1 << 3)

	)

137 
	#RI_ASCR2_GR6_1
 (1 << 4)

	)

138 
	#RI_ASCR2_GR6_2
 (1 << 5)

	)

139 
	#RI_ASCR2_GR5_1
 (1 << 6)

	)

140 
	#RI_ASCR2_GR5_2
 (1 << 7)

	)

141 
	#RI_ASCR2_GR5_3
 (1 << 8)

	)

142 
	#RI_ASCR2_GR4_1
 (1 << 9)

	)

143 
	#RI_ASCR2_GR4_2
 (1 << 10)

	)

144 
	#RI_ASCR2_GR4_3
 (1 << 11)

	)

146 
	#RI_ASCR2_CH0B_GR3_3
 (1 << 16)

	)

147 
	#RI_ASCR2_CH1B_GR3_4
 (1 << 17)

	)

148 
	#RI_ASCR2_CH2B_GR3_5
 (1 << 18)

	)

149 
	#RI_ASCR2_CH3B_GR9_3
 (1 << 19)

	)

150 
	#RI_ASCR2_CH6B_GR9_4
 (1 << 20)

	)

151 
	#RI_ASCR2_CH7B_GR2_3
 (1 << 21)

	)

152 
	#RI_ASCR2_CH8B_GR2_4
 (1 << 22)

	)

153 
	#RI_ASCR2_CH9B_GR2_5
 (1 << 23)

	)

154 
	#RI_ASCR2_CH10B_GR7_5
 (1 << 24)

	)

155 
	#RI_ASCR2_CH11B_GR7_6
 (1 << 25)

	)

156 
	#RI_ASCR2_CH12B_GR7_7
 (1 << 26)

	)

157 
	#RI_ASCR2_GR6_3
 (1 << 27)

	)

158 
	#RI_ASCR2_GR6_4
 (1 << 28)

	)

169 
	#RI_HYSCR1_PA
(
x
Ë(x)

	)

170 
	#RI_HYSCR1_PB
(
x
Ë(x << 16)

	)

180 
	#RI_HYSCR2_PC
(
x
Ë(x)

	)

181 
	#RI_HYSCR2_PD
(
x
Ë(x << 16)

	)

191 
	#RI_HYSCR3_PE
(
x
Ë(x)

	)

192 
	#RI_HYSCR3_PF
(
x
Ë(x << 16)

	)

202 
	#RI_HYSCR2_PG
(
x
Ë(x)

	)

214 
	#RI_ASMR1_PA
(
x
Ë(x)

	)

226 
	#RI_CMR1_PA
(
x
Ë(x)

	)

238 
	#RI_CICR1_PA
(
x
Ë(x)

	)

250 
	#RI_ASMR2_PB
(
x
Ë(x)

	)

262 
	#RI_CMR2_PB
(
x
Ë(x)

	)

274 
	#RI_CICR2_PB
(
x
Ë(x)

	)

286 
	#RI_ASMR3_PC
(
x
Ë(x)

	)

298 
	#RI_CMR3_PC
(
x
Ë(x)

	)

310 
	#RI_CICR3_PC
(
x
Ë(x)

	)

322 
	#RI_ASMR4_PF
(
x
Ë(x)

	)

334 
	#RI_CMR4_PF
(
x
Ë(x)

	)

346 
	#RI_CICR4_PF
(
x
Ë(x)

	)

358 
	#RI_ASMR5_PG
(
x
Ë(x)

	)

370 
	#RI_CMR5_PG
(
x
Ë(x)

	)

382 
	#RI_CICR5_PG
(
x
Ë(x)

	)

	@libopencm3/include/libopencm3/stm32/l1/rtc.h

31 #i‚de‡
LIBOPENCM3_RTC_H


32 
	#LIBOPENCM3_RTC_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/πc_comm⁄_l1f024.h
>

	@libopencm3/include/libopencm3/stm32/l1/spi.h

31 #i‚de‡
LIBOPENCM3_SPI_H


32 
	#LIBOPENCM3_SPI_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_v1_‰f.h
>

	@libopencm3/include/libopencm3/stm32/l1/st_usbfs.h

21 #i‚de‡
LIBOPENCM3_ST_USBFS_H


22 #îr‹ 
Do
 
nŸ
 
ö˛ude
 
dúe˘ly
 !

25 
	~<lib›ícm3/°m32/comm⁄/°_usbfs_v1.h
>

	@libopencm3/include/libopencm3/stm32/l1/syscfg.h

36 #i‚de‡
LIBOPENCM3_SYSCFG_H


37 
	#LIBOPENCM3_SYSCFG_H


	)

39 
	~<lib›ícm3/°m32/comm⁄/syscfg_comm⁄_l1f234.h
>

42 
	#SYSCFG_PMC_USB_PU
 (1<<0)

	)

	@libopencm3/include/libopencm3/stm32/l1/timer.h

35 #i‚de‡
LIBOPENCM3_TIMER_H


36 
	#LIBOPENCM3_TIMER_H


	)

38 
	~<lib›ícm3/°m32/comm⁄/timî_comm⁄_Æl.h
>

46 
	#TIM_OR
(
tim_ba£
Ë
	`MMIO32
(—im_ba£Ë+ 0x50)

	)

47 
	#TIM2_OR
 
	`TIM_OR
(
TIM2
)

	)

48 
	#TIM3_OR
 
	`TIM_OR
(
TIM3
)

	)

60 
	#TIM2_OR_ITR1_RMP_TIM10_OC
 (0x0 << 0)

	)

62 
	#TIM2_OR_ITR1_RMP_TIM5_TGO
 (0x1 << 0)

	)

64 
	#TIM3_OR_ITR1_RMP_MASK
 (0x1 << 0)

	)

75 
	#TIM3_OR_ITR2_RMP_TIM8_TRGOU
 (0x0 << 0)

	)

77 
	#TIM3_OR_ITR2_RMP_PTP
 (0x1 << 0)

	)

79 
	#TIM3_OR_ITR2_RMP_MASK
 (0x1 << 0)

	)

83 
BEGIN_DECLS


85 
timî_£t_›ti⁄
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
›ti⁄
);

87 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l1/usart.h

31 #i‚de‡
LIBOPENCM3_USART_H


32 
	#LIBOPENCM3_USART_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_f124.h
>

	@libopencm3/include/libopencm3/stm32/l4/adc.h

33 #i‚de‡
LIBOPENCM3_ADC_H


34 
	#LIBOPENCM3_ADC_H


	)

36 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v2.h
>

37 
	~<lib›ícm3/°m32/comm⁄/adc_comm⁄_v2_mu…i.h
>

43 
	#ADC1
 
ADC1_BASE


	)

44 
	#ADC2
 
ADC2_BASE


	)

45 
	#ADC3
 
ADC3_BASE


	)

52 
	#ADC_CHANNEL_VREF
 0

	)

53 
	#ADC_CHANNEL_TEMP
 17

	)

54 
	#ADC_CHANNEL_VBAT
 18

	)

60 
	#ADC_CR_DEEPPWD
 (1 << 29)

	)

63 
	#ADC_CR_ADVREGEN
 (1 << 28)

	)

72 
	#ADC_SMPR_SMP_2DOT5CYC
 0x0

	)

73 
	#ADC_SMPR_SMP_6DOT5CYC
 0x1

	)

74 
	#ADC_SMPR_SMP_12DOT5CYC
 0x2

	)

75 
	#ADC_SMPR_SMP_24DOT5CYC
 0x3

	)

76 
	#ADC_SMPR_SMP_47DOT5CYC
 0x4

	)

77 
	#ADC_SMPR_SMP_92DOT5CYC
 0x5

	)

78 
	#ADC_SMPR_SMP_247DOT5CYC
 0x6

	)

79 
	#ADC_SMPR_SMP_640DOT5CYC
 0x7

	)

83 
BEGIN_DECLS


86 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l4/crc.h

26 #i‚de‡
LIBOPENCM3_CRC_H


27 
	#LIBOPENCM3_CRC_H


	)

29 
	~<lib›ícm3/°m32/comm⁄/¸c_v2.h
>

	@libopencm3/include/libopencm3/stm32/l4/dma.h

32 #i‚de‡
LIBOPENCM3_DMA_H


33 
	#LIBOPENCM3_DMA_H


	)

35 
	~<lib›ícm3/°m32/comm⁄/dma_comm⁄_l1f013.h
>

	@libopencm3/include/libopencm3/stm32/l4/doc-stm32l4.h

	@libopencm3/include/libopencm3/stm32/l4/exti.h

18 #i‚de‡
LIBOPENCM3_EXTI_H


19 
	#LIBOPENCM3_EXTI_H


	)

21 
	~<lib›ícm3/°m32/comm⁄/exti_comm⁄_Æl.h
>

	@libopencm3/include/libopencm3/stm32/l4/flash.h

41 #i‚de‡
LIBOPENCM3_FLASH_H


42 
	#LIBOPENCM3_FLASH_H


	)

46 
	#FLASH_ACR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x00)

	)

47 
	#FLASH_PDKEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x04)

	)

48 
	#FLASH_KEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x08)

	)

49 
	#FLASH_OPTKEYR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x0C)

	)

50 
	#FLASH_SR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x10)

	)

51 
	#FLASH_CR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x14)

	)

52 
	#FLASH_ECCR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x18)

	)

53 
	#FLASH_OPTR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x20)

	)

54 
	#FLASH_PCROP1SR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x24)

	)

55 
	#FLASH_PCROP1ER
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x28)

	)

56 
	#FLASH_WRP1AR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x2C)

	)

57 
	#FLASH_WRP1BR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x30)

	)

58 
	#FLASH_PCROP2SR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x44)

	)

59 
	#FLASH_PCROP2ER
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x48)

	)

60 
	#FLASH_WRP2AR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x4C)

	)

61 
	#FLASH_WRP2BR
 
	`MMIO32
(
FLASH_MEM_INTERFACE_BASE
 + 0x50)

	)

65 
	#FLASH_ACR_SLEEP_PD
 (1 << 14)

	)

66 
	#FLASH_ACR_RUN_PD
 (1 << 13)

	)

67 
	#FLASH_ACR_DCRST
 (1 << 12)

	)

68 
	#FLASH_ACR_ICRST
 (1 << 11)

	)

69 
	#FLASH_ACR_DCEN
 (1 << 10)

	)

70 
	#FLASH_ACR_ICEN
 (1 << 9)

	)

71 
	#FLASH_ACR_PRFTEN
 (1 << 8)

	)

73 
	#FLASH_ACR_LATENCY_SHIFT
 0

	)

74 
	#FLASH_ACR_LATENCY_MASK
 0x07

	)

76 
	#FLASH_ACR_LATENCY_0WS
 0x00

	)

77 
	#FLASH_ACR_LATENCY_1WS
 0x01

	)

78 
	#FLASH_ACR_LATENCY_2WS
 0x02

	)

79 
	#FLASH_ACR_LATENCY_3WS
 0x03

	)

80 
	#FLASH_ACR_LATENCY_4WS
 0x04

	)

84 
	#FLASH_SR_BSY
 (1 << 16)

	)

85 
	#FLASH_SR_OPTVERR
 (1 << 15)

	)

86 
	#FLASH_SR_RDERR
 (1 << 14)

	)

87 
	#FLASH_SR_FASTERR
 (1 << 9)

	)

88 
	#FLASH_SR_MISERR
 (1 << 8)

	)

89 
	#FLASH_SR_PGSERR
 (1 << 7)

	)

90 
	#FLASH_SR_SIZERR
 (1 << 6)

	)

91 
	#FLASH_SR_PGAERR
 (1 << 5)

	)

92 
	#FLASH_SR_WRPERR
 (1 << 4)

	)

93 
	#FLASH_SR_PROGERR
 (1 << 3)

	)

94 
	#FLASH_SR_OPERR
 (1 << 1)

	)

95 
	#FLASH_SR_EOP
 (1 << 0)

	)

99 
	#FLASH_CR_LOCK
 (1 << 31)

	)

100 
	#FLASH_CR_OPTLOCK
 (1 << 30)

	)

101 
	#FLASH_CR_OBL_LAUNCH
 (1 << 27)

	)

102 
	#FLASH_CR_RDERRIE
 (1 << 26)

	)

103 
	#FLASH_CR_ERRIE
 (1 << 25)

	)

104 
	#FLASH_CR_EOPIE
 (1 << 24)

	)

105 
	#FLASH_CR_FSTPG
 (1 << 18)

	)

106 
	#FLASH_CR_OPTSTRT
 (1 << 17)

	)

107 
	#FLASH_CR_START
 (1 << 16)

	)

108 
	#FLASH_CR_MER2
 (1 << 15)

	)

109 
	#FLASH_CR_BKER
 (1 << 11)

	)

110 
	#FLASH_CR_MER1
 (1 << 2)

	)

111 
	#FLASH_CR_PER
 (1 << 1)

	)

112 
	#FLASH_CR_PG
 (1 << 0)

	)

114 
	#FLASH_CR_PNB_SHIFT
 3

	)

115 
	#FLASH_CR_PNB_MASK
 0xff

	)

119 
	#FLASH_ECCR_ECCD
 (1 << 31)

	)

120 
	#FLASH_ECCR_ECCC
 (1 << 30)

	)

121 
	#FLASH_ECCR_ECCIE
 (1 << 24)

	)

122 
	#FLASH_ECCR_SYSF_ECC
 (1 << 20)

	)

123 
	#FLASH_ECCR_BK_ECC
 (1 << 19)

	)

125 
	#FLASH_ECCR_ADDR_ECC_SHIFT
 0

	)

126 
	#FLASH_ECCR_ADDR_ECC_MASK
 0x7ffff

	)

130 
	#FLASH_OPTR_SRAM2_RST
 (1 << 25)

	)

131 
	#FLASH_OPTR_SRAM2_PE
 (1 << 24)

	)

132 
	#FLASH_OPTR_nBOOT1
 (1 << 23)

	)

133 
	#FLASH_OPTR_DUALBANK
 (1 << 21)

	)

134 
	#FLASH_OPTR_BFB2
 (1 << 20)

	)

135 
	#FLASH_OPTR_WWDG_SW
 (1 << 19)

	)

136 
	#FLASH_OPTR_IWDG_STDBY
 (1 << 18)

	)

137 
	#FLASH_OPTR_IWDG_STOP
 (1 << 17)

	)

138 
	#FLASH_OPTR_IDWG_SW
 (1 << 16)

	)

139 
	#FLASH_OPTR_nRST_SHDW
 (1 << 14)

	)

140 
	#FLASH_OPTR_nRST_STDBY
 (1 << 13)

	)

141 
	#FLASH_OPTR_nRST_STOP
 (1 << 12)

	)

143 
	#FLASH_OPTR_BOR_SHIFT
 8

	)

144 
	#FLASH_OPTR_BOR_MASK
 0x700

	)

145 
	#FLASH_OPTR_BOR_LEVEL_0
 0

	)

146 
	#FLASH_OPTR_BOR_LEVEL_1
 1

	)

147 
	#FLASH_OPTR_BOR_LEVEL_2
 2

	)

148 
	#FLASH_OPTR_BOR_LEVEL_3
 3

	)

149 
	#FLASH_OPTR_BOR_LEVEL_4
 4

	)

151 
	#FLASH_OPTR_RDP_SHIFT
 0

	)

152 
	#FLASH_OPTR_RDP_MASK
 0xff

	)

153 
	#FLASH_OPTR_RDP_LEVEL_0
 0xAA

	)

154 
	#FLASH_OPTR_RDP_LEVEL_1
 0xBB

	)

155 
	#FLASH_OPTR_RDP_LEVEL_2
 0xCC

	)

159 
	#FLASH_PCROP1SR_PCROP1_STRT_SHIFT
 0

	)

160 
	#FLASH_PCROP1SR_PCROP1_STRT_MASK
 0xffff

	)

164 
	#FLASH_PCROP1ER_PCROP_RDP
 (1 << 31)

	)

165 
	#FLASH_PCROP1ER_PCROP1_END_SHIFT
 0

	)

166 
	#FLASH_PCROP1ER_PCROP1_END_MASK
 0xffff

	)

170 
	#FLASH_WRP1AR_WRP1A_END_SHIFT
 16

	)

171 
	#FLASH_WRP1AR_WRP1A_END_MASK
 0xff

	)

173 
	#FLASH_WRP1AR_WRP1A_STRT_SHIFT
 0

	)

174 
	#FLASH_WRP1AR_WRP1A_STRT_MASK
 0xff

	)

178 
	#FLASH_WRP1BR_WRP1B_END_SHIFT
 16

	)

179 
	#FLASH_WRP1BR_WRP1B_END_MASK
 0xff

	)

181 
	#FLASH_WRP1BR_WRP1B_STRT_SHIFT
 0

	)

182 
	#FLASH_WRP1BR_WRP1B_STRT_MASK
 0xff

	)

186 
	#FLASH_PCROP2SR_PCROP2_STRT_SHIFT
 0

	)

187 
	#FLASH_PCROP2SR_PCROP2_STRT_MASK
 0xffff

	)

191 
	#FLASH_PCROP2ER_PCROP2_END_SHIFT
 0

	)

192 
	#FLASH_PCROP2ER_PCROP2_END_MASK
 0xffff

	)

196 
	#FLASH_WRP2AR_WRP2A_END_SHIFT
 16

	)

197 
	#FLASH_WRP2AR_WRP2A_END_MASK
 0xff

	)

199 
	#FLASH_WRP2AR_WRP2A_STRT_SHIFT
 0

	)

200 
	#FLASH_WRP2AR_WRP2A_STRT_MASK
 0xff

	)

204 
	#FLASH_WRP2BR_WRP2B_END_SHIFT
 16

	)

205 
	#FLASH_WRP2BR_WRP2B_END_MASK
 0xff

	)

207 
	#FLASH_WRP2BR_WRP2B_STRT_SHIFT
 0

	)

208 
	#FLASH_WRP2BR_WRP2B_STRT_MASK
 0xff

	)

212 
	#FLASH_PDKEYR_PDKEY1
 ((
uöt32_t
)0x04152637)

	)

213 
	#FLASH_PDKEYR_PDKEY2
 ((
uöt32_t
)0xÁfbfcfd)

	)

215 
	#FLASH_KEYR_KEY1
 ((
uöt32_t
)0x45670123)

	)

216 
	#FLASH_KEYR_KEY2
 ((
uöt32_t
)0xcdef89ab)

	)

218 
	#FLASH_OPTKEYR_KEY1
 ((
uöt32_t
)0x08192a3b)

	)

219 
	#FLASH_OPTKEYR_KEY2
 ((
uöt32_t
)0x4c5d6e7f)

	)

223 
BEGIN_DECLS


225 
Êash_£t_ws
(
uöt32_t
 
ws
);

226 
Êash_u∆ock
();

227 
Êash_lock
();

228 
Êash_˛ór_pg≥º_Êag
();

229 
Êash_˛ór_e›_Êag
();

230 
Êash_˛ór_bsy_Êag
();

231 
Êash_waô_f‹_œ°_›î©i⁄
();

232 
Êash_dˇche_íabÀ
();

233 
Êash_dˇche_dißbÀ
();

234 
Êash_iˇche_íabÀ
();

235 
Êash_iˇche_dißbÀ
();

236 
Êash_¥e„tch_íabÀ
();

237 
Êash_¥e„tch_dißbÀ
();

238 
Êash_dˇche_ª£t
();

239 
Êash_iˇche_ª£t
();

240 
Êash_˛ór_pg£º_Êag
();

241 
Êash_˛ór_pg´º_Êag
();

242 
Êash_˛ór_wΩîr_Êag
();

243 
Êash_˛ór_°©us_Êags
();

244 
Êash_u∆ock_›ti⁄_byãs
();

245 
Êash_lock_›ti⁄_byãs
();

246 
Êash_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
);

247 
Êash_¥ogøm
(
uöt32_t
 
addªss
, 
uöt8_t
 *
d©a
, uöt32_à
Àn
);

248 
Êash_îa£_£˘‹
(
uöt8_t
 
£˘‹
);

249 
Êash_îa£_Æl_£˘‹s
();

250 
Êash_¥ogøm_›ti⁄_byãs
(
uöt32_t
 
d©a
);

252 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l4/gpio.h

32 #i‚de‡
LIBOPENCM3_GPIO_H


33 
	#LIBOPENCM3_GPIO_H


	)

35 
	~<lib›ícm3/°m32/comm⁄/gpio_comm⁄_f24.h
>

45 
	#GPIO_BRR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x28)

	)

46 
	#GPIOA_BRR
 
	`GPIO_BRR
(
GPIOA
)

	)

47 
	#GPIOB_BRR
 
	`GPIO_BRR
(
GPIOB
)

	)

48 
	#GPIOC_BRR
 
	`GPIO_BRR
(
GPIOC
)

	)

49 
	#GPIOD_BRR
 
	`GPIO_BRR
(
GPIOD
)

	)

50 
	#GPIOE_BRR
 
	`GPIO_BRR
(
GPIOE
)

	)

51 
	#GPIOF_BRR
 
	`GPIO_BRR
(
GPIOF
)

	)

52 
	#GPIOG_BRR
 
	`GPIO_BRR
(
GPIOG
)

	)

53 
	#GPIOH_BRR
 
	`GPIO_BRR
(
GPIOH
)

	)

56 
	#GPIO_ASCR
(
p‹t
Ë
	`MMIO32
(’‹tË+ 0x2c)

	)

57 
	#GPIOA_ASCR
 
	`GPIO_ASCR
(
GPIOA
)

	)

58 
	#GPIOB_ASCR
 
	`GPIO_ASCR
(
GPIOB
)

	)

59 
	#GPIOC_ASCR
 
	`GPIO_ASCR
(
GPIOC
)

	)

60 
	#GPIOD_ASCR
 
	`GPIO_ASCR
(
GPIOD
)

	)

61 
	#GPIOE_ASCR
 
	`GPIO_ASCR
(
GPIOE
)

	)

62 
	#GPIOF_ASCR
 
	`GPIO_ASCR
(
GPIOF
)

	)

63 
	#GPIOG_ASCR
 
	`GPIO_ASCR
(
GPIOG
)

	)

64 
	#GPIOH_ASCR
 
	`GPIO_ASCR
(
GPIOH
)

	)

73 
	#GPIO_OSPEED_LOW
 0x0

	)

74 
	#GPIO_OSPEED_MED
 0x1

	)

75 
	#GPIO_OSPEED_FAST
 0x2

	)

76 
	#GPIO_OSPEED_HIGH
 0x3

	)

87 
BEGIN_DECLS


89 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l4/i2c.h

31 #i‚de‡
LIBOPENCM3_I2C_H


32 
	#LIBOPENCM3_I2C_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/i2c_comm⁄_v2.h
>

38 
	#I2C3
 
I2C3_BASE


	)

	@libopencm3/include/libopencm3/stm32/l4/iwdg.h

32 #i‚de‡
LIBOPENCM3_IWDG_H


33 
	#LIBOPENCM3_IWDG_H


	)

35 
	~<lib›ícm3/°m32/comm⁄/iwdg_comm⁄_v2.h
>

	@libopencm3/include/libopencm3/stm32/l4/memorymap.h

18 #i‚de‡
LIBOPENCM3_MEMORYMAP_H


19 
	#LIBOPENCM3_MEMORYMAP_H


	)

21 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

26 
	#PERIPH_BASE
 (0x40000000U)

	)

27 
	#FMC1_BANK_BASE
 (0x60000000U)

	)

28 
	#FMC3_BANK_BASE
 (0x80000000U)

	)

29 
	#QUADSPI_BANK_BASE
 (0x90000000U)

	)

30 
	#FMC_QUADSPI_BASE
 (0xA0000000U)

	)

31 
	#INFO_BASE
 (0x1fff0000U)

	)

32 
	#PERIPH_BASE_APB1
 (
PERIPH_BASE
 + 0x00000)

	)

33 
	#PERIPH_BASE_APB2
 (
PERIPH_BASE
 + 0x10000)

	)

34 
	#PERIPH_BASE_AHB1
 (
PERIPH_BASE
 + 0x20000)

	)

35 
	#PERIPH_BASE_AHB2
 (0x48000000U)

	)

40 
	#TIM2_BASE
 (
PERIPH_BASE_APB1
 + 0x0000)

	)

41 
	#TIM3_BASE
 (
PERIPH_BASE_APB1
 + 0x0400)

	)

42 
	#TIM4_BASE
 (
PERIPH_BASE_APB1
 + 0x0800)

	)

43 
	#TIM5_BASE
 (
PERIPH_BASE_APB1
 + 0x0c00)

	)

44 
	#TIM6_BASE
 (
PERIPH_BASE_APB1
 + 0x1000)

	)

45 
	#TIM7_BASE
 (
PERIPH_BASE_APB1
 + 0x1400)

	)

46 
	#LCD_BASE
 (
PERIPH_BASE_APB1
 + 0x2400)

	)

47 
	#RTC_BASE
 (
PERIPH_BASE_APB1
 + 0x2800)

	)

48 
	#WWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x2c00)

	)

49 
	#IWDG_BASE
 (
PERIPH_BASE_APB1
 + 0x3000)

	)

50 
	#SPI2_BASE
 (
PERIPH_BASE_APB1
 + 0x3800)

	)

51 
	#SPI3_BASE
 (
PERIPH_BASE_APB1
 + 0x3c00)

	)

52 
	#USART2_BASE
 (
PERIPH_BASE_APB1
 + 0x4400)

	)

53 
	#USART3_BASE
 (
PERIPH_BASE_APB1
 + 0x4800)

	)

54 
	#UART4_BASE
 (
PERIPH_BASE_APB1
 + 0x4c00)

	)

55 
	#UART5_BASE
 (
PERIPH_BASE_APB1
 + 0x5000)

	)

56 
	#I2C1_BASE
 (
PERIPH_BASE_APB1
 + 0x5400)

	)

57 
	#I2C2_BASE
 (
PERIPH_BASE_APB1
 + 0x5800)

	)

58 
	#I2C3_BASE
 (
PERIPH_BASE_APB1
 + 0x5c00)

	)

59 
	#CRS_BASE
 (
PERIPH_BASE_APB1
 + 0x6000)

	)

60 
	#CAN1_BASE
 (
PERIPH_BASE_APB1
 + 0x6400)

	)

61 
	#USB_DEV_FS_BASE
 (
PERIPH_BASE_APB1
 + 0x6800)

	)

62 
	#USB_PMA_BASE
 (
PERIPH_BASE_APB1
 + 0x6c00)

	)

63 
	#POWER_CONTROL_BASE
 (
PERIPH_BASE_APB1
 + 0x7000)

	)

64 
	#DAC1_BASE
 (
PERIPH_BASE_APB1
 + 0x7400)

	)

65 
	#OPAMP_BASE
 (
PERIPH_BASE_APB1
 + 0x7800)

	)

66 
	#LPTIM1_BASE
 (
PERIPH_BASE_APB1
 + 0x7c00)

	)

67 
	#LPUART1_BASE
 (
PERIPH_BASE_APB1
 + 0x8000)

	)

68 
	#SWPMI1_BASE
 (
PERIPH_BASE_APB1
 + 0x8800)

	)

69 
	#LPTIM2_BASE
 (
PERIPH_BASE_APB1
 + 0x9400)

	)

73 
	#SYSCFG_BASE
 (
PERIPH_BASE_APB2
 + 0x0000)

	)

74 
	#VREFBUF_BASE
 (
PERIPH_BASE_APB2
 + 0x0030)

	)

75 
	#COMP_BASE
 (
PERIPH_BASE_APB2
 + 0x0200)

	)

76 
	#EXTI_BASE
 (
PERIPH_BASE_APB2
 + 0x0400)

	)

77 
	#FIREWALL_BASE
 (
PERIPH_BASE_APB2
 + 0x1C00)

	)

78 
	#SDMMC1_BASE
 (
PERIPH_BASE_APB2
 + 0x2800)

	)

79 
	#TIM1_BASE
 (
PERIPH_BASE_APB2
 + 0x2C00)

	)

80 
	#SPI1_BASE
 (
PERIPH_BASE_APB2
 + 0x3000)

	)

81 
	#TIM8_BASE
 (
PERIPH_BASE_APB2
 + 0x3400)

	)

82 
	#USART1_BASE
 (
PERIPH_BASE_APB2
 + 0x3800)

	)

83 
	#TIM15_BASE
 (
PERIPH_BASE_APB2
 + 0x4000)

	)

84 
	#TIM16_BASE
 (
PERIPH_BASE_APB2
 + 0x4400)

	)

85 
	#TIM17_BASE
 (
PERIPH_BASE_APB2
 + 0x4800)

	)

86 
	#SAI1_BASE
 (
PERIPH_BASE_APB2
 + 0x5400)

	)

87 
	#SAI2_BASE
 (
PERIPH_BASE_APB2
 + 0x5800)

	)

88 
	#DFSDM_BASE
 (
PERIPH_BASE_APB2
 + 0x6000)

	)

91 
	#DMA1_BASE
 (
PERIPH_BASE_AHB1
 + 0x0000)

	)

92 
	#DMA2_BASE
 (
PERIPH_BASE_AHB1
 + 0x0400)

	)

93 
	#RCC_BASE
 (
PERIPH_BASE_AHB1
 + 0x1000)

	)

94 
	#FLASH_MEM_INTERFACE_BASE
 (
PERIPH_BASE_AHB1
 + 0x2000)

	)

95 
	#CRC_BASE
 (
PERIPH_BASE_AHB1
 + 0x3000)

	)

96 
	#TSC_BASE
 (
PERIPH_BASE_AHB1
 + 0x4000)

	)

99 
	#GPIO_PORT_A_BASE
 (
PERIPH_BASE_AHB2
 + 0x0000)

	)

100 
	#GPIO_PORT_B_BASE
 (
PERIPH_BASE_AHB2
 + 0x0400)

	)

101 
	#GPIO_PORT_C_BASE
 (
PERIPH_BASE_AHB2
 + 0x0800)

	)

102 
	#GPIO_PORT_D_BASE
 (
PERIPH_BASE_AHB2
 + 0x0c00)

	)

103 
	#GPIO_PORT_E_BASE
 (
PERIPH_BASE_AHB2
 + 0x1000)

	)

104 
	#GPIO_PORT_F_BASE
 (
PERIPH_BASE_AHB2
 + 0x1400)

	)

105 
	#GPIO_PORT_G_BASE
 (
PERIPH_BASE_AHB2
 + 0x1800)

	)

106 
	#GPIO_PORT_H_BASE
 (
PERIPH_BASE_AHB2
 + 0x1c00)

	)

108 
	#OTG_FS_BASE
 (0x50000000U + 0x00000)

	)

109 
	#ADC1_BASE
 (0x50000000U + 0x40000)

	)

110 
	#AES_BASE
 (0x50000000U + 0x60000)

	)

111 
	#RNG_BASE
 (0x50000000U + 0x60800)

	)

114 
	#DBGMCU_BASE
 (
PPBI_BASE
 + 0x00042000)

	)

117 
	#DESIG_FLASH_SIZE_BASE
 (
INFO_BASE
 + 0x75e0)

	)

118 
	#DESIG_UNIQUE_ID_BASE
 (
INFO_BASE
 + 0x7590)

	)

119 
	#DESIG_UNIQUE_ID0
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
)

	)

120 
	#DESIG_UNIQUE_ID1
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 4)

	)

121 
	#DESIG_UNIQUE_ID2
 
	`MMIO32
(
DESIG_UNIQUE_ID_BASE
 + 0x14)

	)

122 
	#DESIG_PACKAGE
 
	`MMIO16
((
INFO_BASE
 + 0x7500))

	)

125 
	#ST_VREFINT_CAL
 
	`MMIO16
((
INFO_BASE
 + 0x75Ø))

	)

126 
	#ST_TSENSE_CAL1_30C
 
	`MMIO16
((
INFO_BASE
 + 0x75a8))

	)

127 
	#ST_TSENSE_CAL2_110C
 
	`MMIO16
((
INFO_BASE
 + 0x75ˇ))

	)

	@libopencm3/include/libopencm3/stm32/l4/nvic.h

6 #i‚de‡
LIBOPENCM3_STM32_L4_NVIC_H


7 
	#LIBOPENCM3_STM32_L4_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_WWDG_IRQ
 0

	)

17 
	#NVIC_PVD_PVM_IRQ
 1

	)

18 
	#NVIC_TAMP_STAMP_IRQ
 2

	)

19 
	#NVIC_RTC_WKUP_IRQ
 3

	)

20 
	#NVIC_FLASH_IRQ
 4

	)

21 
	#NVIC_RCC_IRQ
 5

	)

22 
	#NVIC_EXTI0_IRQ
 6

	)

23 
	#NVIC_EXTI1_IRQ
 7

	)

24 
	#NVIC_EXTI2_IRQ
 8

	)

25 
	#NVIC_EXTI3_IRQ
 9

	)

26 
	#NVIC_EXTI4_IRQ
 10

	)

27 
	#NVIC_DMA1_CHANNEL1_IRQ
 11

	)

28 
	#NVIC_DMA1_CHANNEL2_IRQ
 12

	)

29 
	#NVIC_DMA1_CHANNEL3_IRQ
 13

	)

30 
	#NVIC_DMA1_CHANNEL4_IRQ
 14

	)

31 
	#NVIC_DMA1_CHANNEL5_IRQ
 15

	)

32 
	#NVIC_DMA1_CHANNEL6_IRQ
 16

	)

33 
	#NVIC_DMA1_CHANNEL7_IRQ
 17

	)

34 
	#NVIC_ADC1_2_IRQ
 18

	)

35 
	#NVIC_CAN1_TX_IRQ
 19

	)

36 
	#NVIC_CAN1_RX0_IRQ
 20

	)

37 
	#NVIC_CAN1_RX1_IRQ
 21

	)

38 
	#NVIC_CAN1_SCE_IRQ
 22

	)

39 
	#NVIC_EXTI9_5_IRQ
 23

	)

40 
	#NVIC_TIM1_BRK_TIM15_IRQ
 24

	)

41 
	#NVIC_TIM1_UP_TIM16_IRQ
 25

	)

42 
	#NVIC_TIM1_TRG_COM_TIM17_IRQ
 26

	)

43 
	#NVIC_TIM1_CC_IRQ
 27

	)

44 
	#NVIC_TIM2_IRQ
 28

	)

45 
	#NVIC_TIM3_IRQ
 29

	)

46 
	#NVIC_TIM4_IRQ
 30

	)

47 
	#NVIC_I2C1_EV_IRQ
 31

	)

48 
	#NVIC_I2C1_ER_IRQ
 32

	)

49 
	#NVIC_I2C2_EV_IRQ
 33

	)

50 
	#NVIC_I2C2_ER_IRQ
 34

	)

51 
	#NVIC_SPI1_IRQ
 35

	)

52 
	#NVIC_SPI2_IRQ
 36

	)

53 
	#NVIC_USART1_IRQ
 37

	)

54 
	#NVIC_USART2_IRQ
 38

	)

55 
	#NVIC_USART3_IRQ
 39

	)

56 
	#NVIC_EXTI15_10_IRQ
 40

	)

57 
	#NVIC_RTC_ALARM_IRQ
 41

	)

58 
	#NVIC_DFSDM3_IRQ
 42

	)

59 
	#NVIC_TIM8_BRK_IRQ
 43

	)

60 
	#NVIC_TIM8_UP_IRQ
 44

	)

61 
	#NVIC_TIM8_TRG_COM_IRQ
 45

	)

62 
	#NVIC_TIM8_CC_IRQ
 46

	)

63 
	#NVIC_ADC3_IRQ
 47

	)

64 
	#NVIC_FMC_IRQ
 48

	)

65 
	#NVIC_SDMMC1_IRQ
 49

	)

66 
	#NVIC_TIM5_IRQ
 50

	)

67 
	#NVIC_SPI3_IRQ
 51

	)

68 
	#NVIC_UART4_IRQ
 52

	)

69 
	#NVIC_UART5_IRQ
 53

	)

70 
	#NVIC_TIM6_DACUNDER_IRQ
 54

	)

71 
	#NVIC_TIM7_IRQ
 55

	)

72 
	#NVIC_DMA2_CHANNEL1_IRQ
 56

	)

73 
	#NVIC_DMA2_CHANNEL2_IRQ
 57

	)

74 
	#NVIC_DMA2_CHANNEL3_IRQ
 58

	)

75 
	#NVIC_DMA2_CHANNEL4_IRQ
 59

	)

76 
	#NVIC_DMA2_CHANNEL5_IRQ
 60

	)

77 
	#NVIC_DFSDM0_IRQ
 61

	)

78 
	#NVIC_DFSDM1_IRQ
 62

	)

79 
	#NVIC_DFSDM2_IRQ
 63

	)

80 
	#NVIC_COMP_IRQ
 64

	)

81 
	#NVIC_LPTIM1_IRQ
 65

	)

82 
	#NVIC_LPTIM2_IRQ
 66

	)

83 
	#NVIC_OTG_FS_IRQ
 67

	)

84 
	#NVIC_DMA2_CHANNEL6_IRQ
 68

	)

85 
	#NVIC_DMA2_CHANNEL7_IRQ
 69

	)

86 
	#NVIC_LPUART1_IRQ
 70

	)

87 
	#NVIC_QUADSPI_IRQ
 71

	)

88 
	#NVIC_I2C3_EV_IRQ
 72

	)

89 
	#NVIC_I2C3_ER_IRQ
 73

	)

90 
	#NVIC_SAI1_IRQ
 74

	)

91 
	#NVIC_SAI2_IRQ
 75

	)

92 
	#NVIC_SWPMI1_IRQ
 76

	)

93 
	#NVIC_TSC_IRQ
 77

	)

94 
	#NVIC_LCD_IRQ
 78

	)

95 
	#NVIC_AES_IRQ
 79

	)

96 
	#NVIC_RNG_IRQ
 80

	)

97 
	#NVIC_FPU_IRQ
 81

	)

99 
	#NVIC_IRQ_COUNT
 82

	)

108 
BEGIN_DECLS


110 
wwdg_i§
();

111 
pvd_pvm_i§
();

112 
èmp_°amp_i§
();

113 
πc_wkup_i§
();

114 
Êash_i§
();

115 
rcc_i§
();

116 
exti0_i§
();

117 
exti1_i§
();

118 
exti2_i§
();

119 
exti3_i§
();

120 
exti4_i§
();

121 
dma1_ch™√l1_i§
();

122 
dma1_ch™√l2_i§
();

123 
dma1_ch™√l3_i§
();

124 
dma1_ch™√l4_i§
();

125 
dma1_ch™√l5_i§
();

126 
dma1_ch™√l6_i§
();

127 
dma1_ch™√l7_i§
();

128 
adc1_2_i§
();

129 
ˇn1_tx_i§
();

130 
ˇn1_rx0_i§
();

131 
ˇn1_rx1_i§
();

132 
ˇn1_s˚_i§
();

133 
exti9_5_i§
();

134 
tim1_brk_tim15_i§
();

135 
tim1_up_tim16_i§
();

136 
tim1_åg_com_tim17_i§
();

137 
tim1_cc_i§
();

138 
tim2_i§
();

139 
tim3_i§
();

140 
tim4_i§
();

141 
i2c1_ev_i§
();

142 
i2c1_î_i§
();

143 
i2c2_ev_i§
();

144 
i2c2_î_i§
();

145 
•i1_i§
();

146 
•i2_i§
();

147 
ußπ1_i§
();

148 
ußπ2_i§
();

149 
ußπ3_i§
();

150 
exti15_10_i§
();

151 
πc_Æ¨m_i§
();

152 
dfsdm3_i§
();

153 
tim8_brk_i§
();

154 
tim8_up_i§
();

155 
tim8_åg_com_i§
();

156 
tim8_cc_i§
();

157 
adc3_i§
();

158 
fmc_i§
();

159 
sdmmc1_i§
();

160 
tim5_i§
();

161 
•i3_i§
();

162 
u¨t4_i§
();

163 
u¨t5_i§
();

164 
tim6_dacundî_i§
();

165 
tim7_i§
();

166 
dma2_ch™√l1_i§
();

167 
dma2_ch™√l2_i§
();

168 
dma2_ch™√l3_i§
();

169 
dma2_ch™√l4_i§
();

170 
dma2_ch™√l5_i§
();

171 
dfsdm0_i§
();

172 
dfsdm1_i§
();

173 
dfsdm2_i§
();

174 
comp_i§
();

175 
Õtim1_i§
();

176 
Õtim2_i§
();

177 
Ÿg_fs_i§
();

178 
dma2_ch™√l6_i§
();

179 
dma2_ch™√l7_i§
();

180 
Õu¨t1_i§
();

181 
quad•i_i§
();

182 
i2c3_ev_i§
();

183 
i2c3_î_i§
();

184 
ßi1_i§
();

185 
ßi2_i§
();

186 
swpmi1_i§
();

187 
tsc_i§
();

188 
lcd_i§
();

189 
´s_i§
();

190 
∫g_i§
();

191 
Âu_i§
();

193 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l4/pwr.h

40 #i‚de‡
LIBOPENCM3_PWR_H


41 
	#LIBOPENCM3_PWR_H


	)

47 
	#PWR_CR1
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x00)

	)

48 
	#PWR_CR2
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x04)

	)

49 
	#PWR_CR3
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x08)

	)

50 
	#PWR_CR4
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x0C)

	)

51 
	#PWR_SR1
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x10)

	)

52 
	#PWR_SR2
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x14)

	)

53 
	#PWR_SCR
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x18)

	)

55 
	#PWR_PORT_A
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x20)

	)

56 
	#PWR_PORT_B
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x28)

	)

57 
	#PWR_PORT_C
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x30)

	)

58 
	#PWR_PORT_D
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x38)

	)

59 
	#PWR_PORT_E
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x40)

	)

60 
	#PWR_PORT_F
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x48)

	)

61 
	#PWR_PORT_G
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x50)

	)

62 
	#PWR_PORT_H
 
	`MMIO32
(
POWER_CONTROL_BASE
 + 0x58)

	)

64 
	#PWR_PUCR
(
pwr_p‹t
Ë
	`MMIO32
(’wr_p‹tË+ 0x00)

	)

65 
	#PWR_PDCR
(
pwr_p‹t
Ë
	`MMIO32
(’wr_p‹tË+ 0x04)

	)

69 
	#PWR_CR1_LPR
 (1 << 14)

	)

71 
	#PWR_CR1_VOS_SHIFT
 9

	)

72 
	#PWR_CR1_VOS_MASK
 0x3

	)

73 
	#PWR_CR1_VOS_RANGE_1
 1

	)

74 
	#PWR_CR1_VOS_RANGE_2
 2

	)

76 
	#PWR_CR1_DBP
 (1 << 8)

	)

78 
	#PWR_CR1_LPMS_SHIFT
 0

	)

79 
	#PWR_CR1_LPMS_MASK
 0x07

	)

80 
	#PWR_CR1_LPMS_STOP_0
 0

	)

81 
	#PWR_CR1_LPMS_STOP_1
 1

	)

82 
	#PWR_CR1_LPMS_STOP_2
 2

	)

83 
	#PWR_CR1_LPMS_STANDBY
 3

	)

84 
	#PWR_CR1_LPMS_SHUTDOWN
 4

	)

88 
	#PWR_CR2_USV
 (1 << 10)

	)

89 
	#PWR_CR2_IOSV
 (1 << 9)

	)

90 
	#PWR_CR2_PVME4
 (1 << 7)

	)

91 
	#PWR_CR2_PVME3
 (1 << 6)

	)

92 
	#PWR_CR2_PVME2
 (1 << 5)

	)

93 
	#PWR_CR2_PVME1
 (1 << 4)

	)

95 
	#PWR_CR2_PLS_SHIFT
 1

	)

96 
	#PWR_CR2_PLS_MASK
 0x07

	)

100 
	#PWR_CR2_PLS_2V0
 0x00

	)

101 
	#PWR_CR2_PLS_2V2
 0x01

	)

102 
	#PWR_CR2_PLS_2V4
 0x02

	)

103 
	#PWR_CR2_PLS_2V5
 0x03

	)

104 
	#PWR_CR2_PLS_2V6
 0x04

	)

105 
	#PWR_CR2_PLS_2V8
 0x05

	)

106 
	#PWR_CR2_PLS_2V9
 0x06

	)

107 
	#PWR_CR2_PLS_PVD_IN
 0x07

	)

110 
	#PWR_CR2_PVDE
 (1 << 0)

	)

114 
	#PWR_CR3_EIWUL
 (1 << 15)

	)

115 
	#PWR_CR3_APC
 (1 << 10)

	)

116 
	#PWR_CR3_RRS
 (1 << 8)

	)

117 
	#PWR_CR3_EWUP5
 (1 << 4)

	)

118 
	#PWR_CR3_EWUP4
 (1 << 3)

	)

119 
	#PWR_CR3_EWUP3
 (1 << 2)

	)

120 
	#PWR_CR3_EWUP2
 (1 << 1)

	)

121 
	#PWR_CR3_EWUP1
 (1 << 0)

	)

125 
	#PWR_CR4_VBRS
 (1 << 9)

	)

126 
	#PWR_CR4_VBE
 (1 << 8)

	)

127 
	#PWR_CR4_WP5
 (1 << 4)

	)

128 
	#PWR_CR4_WP4
 (1 << 3)

	)

129 
	#PWR_CR4_WP3
 (1 << 2)

	)

130 
	#PWR_CR4_WP2
 (1 << 1)

	)

131 
	#PWR_CR4_WP1
 (1 << 0)

	)

135 
	#PWR_SR1_WUFI
 (1 << 15)

	)

136 
	#PWR_SR1_SBF
 (1 << 8)

	)

137 
	#PWR_SR1_WUF5
 (1 << 4)

	)

138 
	#PWR_SR1_WUF4
 (1 << 3)

	)

139 
	#PWR_SR1_WUF3
 (1 << 2)

	)

140 
	#PWR_SR1_WUF2
 (1 << 1)

	)

141 
	#PWR_SR1_WUF1
 (1 << 0)

	)

145 
	#PWR_SR2_PVMO4
 (1 << 15)

	)

146 
	#PWR_SR2_PVMO3
 (1 << 14)

	)

147 
	#PWR_SR2_PVMO2
 (1 << 13)

	)

148 
	#PWR_SR2_PVMO1
 (1 << 12)

	)

149 
	#PWR_SR2_PVDO
 (1 << 11)

	)

150 
	#PWR_SR2_VOSF
 (1 << 10)

	)

151 
	#PWR_SR2_REGLPF
 (1 << 9)

	)

152 
	#PWR_SR2_REGLPS
 (1 << 8)

	)

156 
	#PWR_SCR_CSBF
 (1 << 8)

	)

157 
	#PWR_SCR_CWUF5
 (1 << 4)

	)

158 
	#PWR_SCR_CWUF4
 (1 << 3)

	)

159 
	#PWR_SCR_CWUF3
 (1 << 2)

	)

160 
	#PWR_SCR_CWUF2
 (1 << 1)

	)

161 
	#PWR_SCR_CWUF1
 (1 << 0)

	)

165 
	epwr_vos_sˇÀ
 {

166 
	mPWR_SCALE1
,

167 
	mPWR_SCALE2
,

170 
BEGIN_DECLS


172 
pwr_£t_vos_sˇÀ
(
pwr_vos_sˇÀ
 
sˇÀ
);

174 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l4/rcc.h

39 #i‚de‡
LIBOPENCM3_RCC_H


40 
	#LIBOPENCM3_RCC_H


	)

44 
	#RCC_CR
 
	`MMIO32
(
RCC_BASE
 + 0x00)

	)

45 
	#RCC_ICSCR
 
	`MMIO32
(
RCC_BASE
 + 0x04)

	)

46 
	#RCC_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x08)

	)

47 
	#RCC_PLLCFGR
 
	`MMIO32
(
RCC_BASE
 + 0x0c)

	)

48 
	#RCC_PLLSAI1_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x10)

	)

49 
	#RCC_PLLSAI2_CFGR
 
	`MMIO32
(
RCC_BASE
 + 0x14)

	)

50 
	#RCC_CIER
 
	`MMIO32
(
RCC_BASE
 + 0x18)

	)

51 
	#RCC_CIFR
 
	`MMIO32
(
RCC_BASE
 + 0x1c)

	)

52 
	#RCC_CICR
 
	`MMIO32
(
RCC_BASE
 + 0x20)

	)

53 
	#RCC_AHB1RSTR_OFFSET
 0x28

	)

54 
	#RCC_AHB1RSTR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_AHB1RSTR_OFFSET
)

	)

55 
	#RCC_AHB2RSTR_OFFSET
 0x2c

	)

56 
	#RCC_AHB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_AHB2RSTR_OFFSET
)

	)

57 
	#RCC_AHB3RSTR_OFFSET
 0x30

	)

58 
	#RCC_AHB3RSTR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_AHB3RSTR_OFFSET
)

	)

59 
	#RCC_APB1RSTR1_OFFSET
 0x38

	)

60 
	#RCC_APB1RSTR1
 
	`MMIO32
(
RCC_BASE
 + 
RCC_APB1RSTR1_OFFSET
)

	)

61 
	#RCC_APB1RSTR2_OFFSET
 0x3c

	)

62 
	#RCC_APB1RSTR2
 
	`MMIO32
(
RCC_BASE
 + 
RCC_APB1RSTR2_OFFSET
)

	)

63 
	#RCC_APB2RSTR_OFFSET
 0x40

	)

64 
	#RCC_APB2RSTR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_APB2RSTR_OFFSET
)

	)

65 
	#RCC_AHB1ENR_OFFSET
 0x48

	)

66 
	#RCC_AHB1ENR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_AHB1ENR_OFFSET
)

	)

67 
	#RCC_AHB2ENR_OFFSET
 0x4c

	)

68 
	#RCC_AHB2ENR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_AHB2ENR_OFFSET
)

	)

69 
	#RCC_AHB3ENR_OFFSET
 0x50

	)

70 
	#RCC_AHB3ENR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_AHB3ENR_OFFSET
)

	)

71 
	#RCC_APB1ENR1_OFFSET
 0x58

	)

72 
	#RCC_APB1ENR1
 
	`MMIO32
(
RCC_BASE
 + 
RCC_APB1ENR1_OFFSET
)

	)

73 
	#RCC_APB1ENR2_OFFSET
 0x5c

	)

74 
	#RCC_APB1ENR2
 
	`MMIO32
(
RCC_BASE
 + 
RCC_APB1ENR2_OFFSET
)

	)

75 
	#RCC_APB2ENR_OFFSET
 0x60

	)

76 
	#RCC_APB2ENR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_APB2ENR_OFFSET
)

	)

77 
	#RCC_AHB1SMENR_OFFSET
 0x68

	)

78 
	#RCC_AHB1SMENR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_AHB1SMENR_OFFSET
)

	)

79 
	#RCC_AHB2SMENR_OFFSET
 0x6c

	)

80 
	#RCC_AHB2SMENR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_AHB2SMENR_OFFSET
)

	)

81 
	#RCC_AHB3SMENR_OFFSET
 0x70

	)

82 
	#RCC_AHB3SMENR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_AHB3SMENR_OFFSET
)

	)

83 
	#RCC_APB1SMENR1_OFFSET
 0x78

	)

84 
	#RCC_APB1SMENR1
 
	`MMIO32
(
RCC_BASE
 + 
RCC_APB1SMENR1_OFFSET
)

	)

85 
	#RCC_APB1SMENR2_OFFSET
 0x7c

	)

86 
	#RCC_APB1SMENR2
 
	`MMIO32
(
RCC_BASE
 + 
RCC_APB1SMENR2_OFFSET
)

	)

87 
	#RCC_APB2SMENR_OFFSET
 0x80

	)

88 
	#RCC_APB2SMENR
 
	`MMIO32
(
RCC_BASE
 + 
RCC_APB2SMENR_OFFSET
)

	)

89 
	#RCC_CCIPR
 
	`MMIO32
(
RCC_BASE
 + 0x88)

	)

90 
	#RCC_BDCR
 
	`MMIO32
(
RCC_BASE
 + 0x90)

	)

91 
	#RCC_CSR
 
	`MMIO32
(
RCC_BASE
 + 0x94)

	)

92 
	#RCC_CRRCR
 
	`MMIO32
(
RCC_BASE
 + 0x98)

	)

96 
	#RCC_CR_PLLSAI2RDY
 (1 << 29)

	)

97 
	#RCC_CR_PLLSAI2ON
 (1 << 28)

	)

98 
	#RCC_CR_PLLSAI1RDY
 (1 << 27)

	)

99 
	#RCC_CR_PLLSAI1ON
 (1 << 26)

	)

100 
	#RCC_CR_PLLRDY
 (1 << 25)

	)

101 
	#RCC_CR_PLLON
 (1 << 24)

	)

102 
	#RCC_CR_CSSON
 (1 << 19)

	)

103 
	#RCC_CR_HSEBYP
 (1 << 18)

	)

104 
	#RCC_CR_HSERDY
 (1 << 17)

	)

105 
	#RCC_CR_HSEON
 (1 << 16)

	)

106 
	#RCC_CR_HSIASFS
 (1 << 11)

	)

107 
	#RCC_CR_HSIRDY
 (1 << 10)

	)

108 
	#RCC_CR_HSIKERON
 (1 << 9)

	)

109 
	#RCC_CR_HSION
 (1 << 8)

	)

117 
	#RCC_CR_MSIRANGE_SHIFT
 4

	)

118 
	#RCC_CR_MSIRANGE_MASK
 0xf

	)

119 
	#RCC_CR_MSIRANGE_100KHZ
 0

	)

120 
	#RCC_CR_MSIRANGE_200KHZ
 1

	)

121 
	#RCC_CR_MSIRANGE_400KHZ
 2

	)

122 
	#RCC_CR_MSIRANGE_800KHZ
 3

	)

123 
	#RCC_CR_MSIRANGE_1MHZ
 4

	)

124 
	#RCC_CR_MSIRANGE_2MHZ
 5

	)

125 
	#RCC_CR_MSIRANGE_4MHZ
 6

	)

126 
	#RCC_CR_MSIRANGE_8MHZ
 7

	)

127 
	#RCC_CR_MSIRANGE_16MHZ
 8

	)

128 
	#RCC_CR_MSIRANGE_24MHZ
 9

	)

129 
	#RCC_CR_MSIRANGE_32MHZ
 10

	)

130 
	#RCC_CR_MSIRANGE_48MHZ
 11

	)

132 
	#RCC_CR_MSIRGSEL
 (1 << 3)

	)

133 
	#RCC_CR_MSIPLLEN
 (1 << 2)

	)

134 
	#RCC_CR_MSIRDY
 (1 << 1)

	)

135 
	#RCC_CR_MSION
 (1 << 0)

	)

139 
	#RCC_CRRCR_HSI48ON
 (1 << 0)

	)

140 
	#RCC_CRRCR_HSI48RDY
 (1 << 1)

	)

144 
	#RCC_ICSCR_HSITRIM_SHIFT
 24

	)

145 
	#RCC_ICSCR_HSITRIM_MASK
 0x1f

	)

146 
	#RCC_ICSCR_HSICAL_SHIFT
 16

	)

147 
	#RCC_ICSCR_HSICAL_MASK
 0xff

	)

149 
	#RCC_ICSCR_MSITRIM_SHIFT
 8

	)

150 
	#RCC_ICSCR_MSITRIM_MASK
 0xff

	)

151 
	#RCC_ICSCR_MSICAL_SHIFT
 0

	)

152 
	#RCC_ICSCR_MSICAL_MASK
 0xff

	)

157 
	#RCC_CFGR_MCOPRE_DIV1
 0

	)

158 
	#RCC_CFGR_MCOPRE_DIV2
 1

	)

159 
	#RCC_CFGR_MCOPRE_DIV4
 2

	)

160 
	#RCC_CFGR_MCOPRE_DIV8
 3

	)

161 
	#RCC_CFGR_MCOPRE_DIV16
 4

	)

162 
	#RCC_CFGR_MCOPRE_SHIFT
 28

	)

163 
	#RCC_CFGR_MCOPRE_MASK
 0x7

	)

166 
	#RCC_CFGR_MCO_NOCLK
 0x0

	)

167 
	#RCC_CFGR_MCO_SYSCLK
 0x1

	)

168 
	#RCC_CFGR_MCO_MSI
 0x2

	)

169 
	#RCC_CFGR_MCO_HSI16
 0x3

	)

170 
	#RCC_CFGR_MCO_HSE
 0x4

	)

171 
	#RCC_CFGR_MCO_PLL
 0x5

	)

172 
	#RCC_CFGR_MCO_LSI
 0x6

	)

173 
	#RCC_CFGR_MCO_LSE
 0x7

	)

174 
	#RCC_CFGR_MCO_HSI48
 0x8

	)

175 
	#RCC_CFGR_MCO_SHIFT
 24

	)

176 
	#RCC_CFGR_MCO_MASK
 0xf

	)

179 
	#RCC_CFGR_STOPWUCK_MSI
 (0 << 15)

	)

180 
	#RCC_CFGR_STOPWUCK_HSI16
 (1 << 15)

	)

183 
	#RCC_CFGR_PPRE2_NODIV
 0x0

	)

184 
	#RCC_CFGR_PPRE2_DIV2
 0x4

	)

185 
	#RCC_CFGR_PPRE2_DIV4
 0x5

	)

186 
	#RCC_CFGR_PPRE2_DIV8
 0x6

	)

187 
	#RCC_CFGR_PPRE2_DIV16
 0x7

	)

188 
	#RCC_CFGR_PPRE2_MASK
 0x7

	)

189 
	#RCC_CFGR_PPRE2_SHIFT
 11

	)

192 
	#RCC_CFGR_PPRE1_NODIV
 0x0

	)

193 
	#RCC_CFGR_PPRE1_DIV2
 0x4

	)

194 
	#RCC_CFGR_PPRE1_DIV4
 0x5

	)

195 
	#RCC_CFGR_PPRE1_DIV8
 0x6

	)

196 
	#RCC_CFGR_PPRE1_DIV16
 0x7

	)

197 
	#RCC_CFGR_PPRE1_MASK
 0x7

	)

198 
	#RCC_CFGR_PPRE1_SHIFT
 8

	)

201 
	#RCC_CFGR_HPRE_NODIV
 0x0

	)

202 
	#RCC_CFGR_HPRE_DIV2
 0x8

	)

203 
	#RCC_CFGR_HPRE_DIV4
 0x9

	)

204 
	#RCC_CFGR_HPRE_DIV8
 0xa

	)

205 
	#RCC_CFGR_HPRE_DIV16
 0xb

	)

206 
	#RCC_CFGR_HPRE_DIV64
 0xc

	)

207 
	#RCC_CFGR_HPRE_DIV128
 0xd

	)

208 
	#RCC_CFGR_HPRE_DIV256
 0xe

	)

209 
	#RCC_CFGR_HPRE_DIV512
 0xf

	)

210 
	#RCC_CFGR_HPRE_MASK
 0xf

	)

211 
	#RCC_CFGR_HPRE_SHIFT
 4

	)

214 
	#RCC_CFGR_SWS_MSI
 0x0

	)

215 
	#RCC_CFGR_SWS_HSI16
 0x1

	)

216 
	#RCC_CFGR_SWS_HSE
 0x2

	)

217 
	#RCC_CFGR_SWS_PLL
 0x3

	)

218 
	#RCC_CFGR_SWS_MASK
 0x3

	)

219 
	#RCC_CFGR_SWS_SHIFT
 2

	)

222 
	#RCC_CFGR_SW_MSI
 0x0

	)

223 
	#RCC_CFGR_SW_HSI16
 0x1

	)

224 
	#RCC_CFGR_SW_HSE
 0x2

	)

225 
	#RCC_CFGR_SW_PLL
 0x3

	)

226 
	#RCC_CFGR_SW_MASK
 0x3

	)

227 
	#RCC_CFGR_SW_SHIFT
 0

	)

230 
	#RCC_PLLCFGR_PLLR_SHIFT
 25

	)

231 
	#RCC_PLLCFGR_PLLR_MASK
 0x3

	)

232 
	#RCC_PLLCFGR_PLLR_DIV2
 0

	)

233 
	#RCC_PLLCFGR_PLLR_DIV4
 1

	)

234 
	#RCC_PLLCFGR_PLLR_DIV6
 2

	)

235 
	#RCC_PLLCFGR_PLLR_DIV8
 3

	)

236 
	#RCC_PLLCFGR_PLLREN
 (1<<24)

	)

238 
	#RCC_PLLCFGR_PLLQ_SHIFT
 21

	)

239 
	#RCC_PLLCFGR_PLLQ_MASK
 0x3

	)

240 
	#RCC_PLLCFGR_PLLQ_DIV2
 0

	)

241 
	#RCC_PLLCFGR_PLLQ_DIV4
 1

	)

242 
	#RCC_PLLCFGR_PLLQ_DIV6
 2

	)

243 
	#RCC_PLLCFGR_PLLQ_DIV8
 3

	)

244 
	#RCC_PLLCFGR_PLLQEN
 (1 << 20)

	)

247 
	#RCC_PLLCFGR_PLLP
 (1 << 17)

	)

248 
	#RCC_PLLCFGR_PLLP_DIV7
 0

	)

249 
	#RCC_PLLCFGR_PLLP_DIV17
 
RCC_PLLCFGR_PLLP


	)

250 
	#RCC_PLLPEN
 (1 << 16)

	)

256 
	#RCC_PLLCFGR_PLLN_SHIFT
 0x8

	)

257 
	#RCC_PLLCFGR_PLLN_MASK
 0x7f

	)

264 
	#RCC_PLLCFGR_PLLM_SHIFT
 0x4

	)

265 
	#RCC_PLLCFGR_PLLM_MASK
 0x7

	)

266 
	#RCC_PLLCFGR_PLLM
(
x
Ë((x)-1)

	)

269 
	#RCC_PLLCFGR_PLLSRC_SHIFT
 0

	)

270 
	#RCC_PLLCFGR_PLLSRC_MASK
 0x3

	)

271 
	#RCC_PLLCFGR_PLLSRC_NONE
 0

	)

272 
	#RCC_PLLCFGR_PLLSRC_MSI
 1

	)

273 
	#RCC_PLLCFGR_PLLSRC_HSI16
 2

	)

274 
	#RCC_PLLCFGR_PLLSRC_HSE
 3

	)

283 
	#RCC_CIER_HSI48RDYIE
 (1 << 10)

	)

284 
	#RCC_CIER_LSE_CSSIE
 (1 << 9)

	)

286 
	#RCC_CIER_PLLSAI2RDYIE
 (1 << 7)

	)

287 
	#RCC_CIER_PLLSAI1RDYIE
 (1 << 6)

	)

288 
	#RCC_CIER_PLLRDYIE
 (1 << 5)

	)

289 
	#RCC_CIER_HSERDYIE
 (1 << 4)

	)

290 
	#RCC_CIER_HSIRDYIE
 (1 << 3)

	)

291 
	#RCC_CIER_MSIRDYIE
 (1 << 2)

	)

292 
	#RCC_CIER_LSERDYIE
 (1 << 1)

	)

293 
	#RCC_CIER_LSIRDYIE
 (1 << 0)

	)

297 
	#RCC_CIFR_HSI48RDYF
 (1 << 10)

	)

298 
	#RCC_CIFR_LSECSSF
 (1 << 9)

	)

299 
	#RCC_CIFR_CSSF
 (1 << 8)

	)

300 
	#RCC_CIFR_PLLSAI2RDYF
 (1 << 7)

	)

301 
	#RCC_CIFR_PLLSAI1RDYF
 (1 << 6)

	)

302 
	#RCC_CIFR_PLLRDYF
 (1 << 5)

	)

303 
	#RCC_CIFR_HSERDYF
 (1 << 4)

	)

304 
	#RCC_CIFR_HSIRDYF
 (1 << 3)

	)

305 
	#RCC_CIFR_MSIRDYF
 (1 << 2)

	)

306 
	#RCC_CIFR_LSERDYF
 (1 << 1)

	)

307 
	#RCC_CIFR_LSIRDYF
 (1 << 0)

	)

311 
	#RCC_CICR_HSI48RDYC
 (1 << 10)

	)

312 
	#RCC_CICR_LSECSSC
 (1 << 9)

	)

313 
	#RCC_CICR_CSSC
 (1 << 8)

	)

314 
	#RCC_CICR_PLLSAI2RDYC
 (1 << 7)

	)

315 
	#RCC_CICR_PLLSAI1RDYC
 (1 << 6)

	)

316 
	#RCC_CICR_PLLRDYC
 (1 << 5)

	)

317 
	#RCC_CICR_HSERDYC
 (1 << 4)

	)

318 
	#RCC_CICR_HSIRDYC
 (1 << 3)

	)

319 
	#RCC_CICR_MSIRDYC
 (1 << 2)

	)

320 
	#RCC_CICR_LSERDYC
 (1 << 1)

	)

321 
	#RCC_CICR_LSIRDYC
 (1 << 0)

	)

325 
	#RCC_AHB1RSTR_TSCRST
 (1 << 16)

	)

326 
	#RCC_AHB1RSTR_CRCRST
 (1 << 12)

	)

327 
	#RCC_AHB1RSTR_FLASHRST
 (1 << 8)

	)

328 
	#RCC_AHB1RSTR_DMA2RST
 (1 << 1)

	)

329 
	#RCC_AHB1RSTR_DMA1RST
 (1 << 0)

	)

333 
	#RCC_AHB2RSTR_RNGRST
 (1 << 18)

	)

334 
	#RCC_AHB2RSTR_AESRST
 (1 << 16)

	)

335 
	#RCC_AHB2RSTR_ADCRST
 (1 << 13)

	)

336 
	#RCC_AHB2RSTR_OTGFSRST
 (1 << 12)

	)

337 
	#RCC_AHB2RSTR_GPIOHRST
 (1 << 7)

	)

338 
	#RCC_AHB2RSTR_GPIOGRST
 (1 << 6)

	)

339 
	#RCC_AHB2RSTR_GPIOFRST
 (1 << 5)

	)

340 
	#RCC_AHB2RSTR_GPIOERST
 (1 << 4)

	)

341 
	#RCC_AHB2RSTR_GPIODRST
 (1 << 3)

	)

342 
	#RCC_AHB2RSTR_GPIOCRST
 (1 << 2)

	)

343 
	#RCC_AHB2RSTR_GPIOBRST
 (1 << 1)

	)

344 
	#RCC_AHB2RSTR_GPIOARST
 (1 << 0)

	)

348 
	#RCC_AHB3RSTR_QSPIRST
 (1 << 8)

	)

349 
	#RCC_AHB3RSTR_FMCRST
 (1 << 0)

	)

353 
	#RCC_APB1RSTR1_LPTIM1RST
 (1 << 31)

	)

354 
	#RCC_APB1RSTR1_OPAMPRST
 (1 << 30)

	)

355 
	#RCC_APB1RSTR1_DAC1RST
 (1 << 29)

	)

356 
	#RCC_APB1RSTR1_PWRRST
 (1 << 28)

	)

357 
	#RCC_APB1RSTR1_CAN1RST
 (1 << 25)

	)

358 
	#RCC_APB1RSTR1_I2C3RST
 (1 << 23)

	)

359 
	#RCC_APB1RSTR1_I2C2RST
 (1 << 22)

	)

360 
	#RCC_APB1RSTR1_I2C1RST
 (1 << 21)

	)

361 
	#RCC_APB1RSTR1_UART5RST
 (1 << 20)

	)

362 
	#RCC_APB1RSTR1_UART4RST
 (1 << 19)

	)

363 
	#RCC_APB1RSTR1_USART3RST
 (1 << 18)

	)

364 
	#RCC_APB1RSTR1_USART2RST
 (1 << 17)

	)

365 
	#RCC_APB1RSTR1_SPI3RST
 (1 << 15)

	)

366 
	#RCC_APB1RSTR1_SPI2RST
 (1 << 14)

	)

367 
	#RCC_APB1RSTR1_LCDRST
 (1 << 9)

	)

368 
	#RCC_APB1RSTR1_TIM7RST
 (1 << 5)

	)

369 
	#RCC_APB1RSTR1_TIM6RST
 (1 << 4)

	)

370 
	#RCC_APB1RSTR1_TIM5RST
 (1 << 3)

	)

371 
	#RCC_APB1RSTR1_TIM4RST
 (1 << 2)

	)

372 
	#RCC_APB1RSTR1_TIM3RST
 (1 << 1)

	)

373 
	#RCC_APB1RSTR1_TIM2RST
 (1 << 0)

	)

377 
	#RCC_APB1RSTR2_LPTIM2RST
 (1 << 5)

	)

378 
	#RCC_APB1RSTR2_SWPMI1RST
 (1 << 2)

	)

379 
	#RCC_APB1RSTR2_LPUART1RST
 (1 << 0)

	)

383 
	#RCC_APB2RSTR_DFSDMRST
 (1 << 24)

	)

384 
	#RCC_APB2RSTR_SAI2RST
 (1 << 22)

	)

385 
	#RCC_APB2RSTR_SAI1RST
 (1 << 21)

	)

386 
	#RCC_APB2RSTR_TIM17RST
 (1 << 18)

	)

387 
	#RCC_APB2RSTR_TIM16RST
 (1 << 17)

	)

388 
	#RCC_APB2RSTR_TIM15RST
 (1 << 16)

	)

389 
	#RCC_APB2RSTR_USART1RST
 (1 << 14)

	)

390 
	#RCC_APB2RSTR_TIM8RST
 (1 << 13)

	)

391 
	#RCC_APB2RSTR_SPI1RST
 (1 << 12)

	)

392 
	#RCC_APB2RSTR_TIM1RST
 (1 << 11)

	)

393 
	#RCC_APB2RSTR_SDMMC1RST
 (1 << 10)

	)

395 
	#RCC_APB2RSTR_SYSCFGRST
 (1 << 0)

	)

403 
	#RCC_AHB1ENR_TSCEN
 (1 << 16)

	)

404 
	#RCC_AHB1ENR_CRCEN
 (1 << 12)

	)

405 
	#RCC_AHB1ENR_FLASHEN
 (1 << 8)

	)

406 
	#RCC_AHB1ENR_DMA2EN
 (1 << 1)

	)

407 
	#RCC_AHB1ENR_DMA1EN
 (1 << 0)

	)

416 
	#RCC_AHB2ENR_RNGEN
 (1 << 18)

	)

417 
	#RCC_AHB2ENR_AESEN
 (1 << 16)

	)

418 
	#RCC_AHB2ENR_ADCEN
 (1 << 13)

	)

419 
	#RCC_AHB2ENR_OTGFSEN
 (1 << 12)

	)

420 
	#RCC_AHB2ENR_GPIOHEN
 (1 << 7)

	)

421 
	#RCC_AHB2ENR_GPIOGEN
 (1 << 6)

	)

422 
	#RCC_AHB2ENR_GPIOFEN
 (1 << 5)

	)

423 
	#RCC_AHB2ENR_GPIOEEN
 (1 << 4)

	)

424 
	#RCC_AHB2ENR_GPIODEN
 (1 << 3)

	)

425 
	#RCC_AHB2ENR_GPIOCEN
 (1 << 2)

	)

426 
	#RCC_AHB2ENR_GPIOBEN
 (1 << 1)

	)

427 
	#RCC_AHB2ENR_GPIOAEN
 (1 << 0)

	)

436 
	#RCC_AHB3ENR_QSPIEN
 (1 << 8)

	)

437 
	#RCC_AHB3ENR_FMCEN
 (1 << 0)

	)

447 
	#RCC_APB1ENR1_LPTIM1EN
 (1 << 31)

	)

448 
	#RCC_APB1ENR1_OPAMPEN
 (1 << 30)

	)

449 
	#RCC_APB1ENR1_DAC1EN
 (1 << 29)

	)

450 
	#RCC_APB1ENR1_PWREN
 (1 << 28)

	)

451 
	#RCC_APB1ENR1_CAN1EN
 (1 << 25)

	)

452 
	#RCC_APB1ENR1_I2C3EN
 (1 << 23)

	)

453 
	#RCC_APB1ENR1_I2C2EN
 (1 << 22)

	)

454 
	#RCC_APB1ENR1_I2C1EN
 (1 << 21)

	)

455 
	#RCC_APB1ENR1_UART5EN
 (1 << 20)

	)

456 
	#RCC_APB1ENR1_UART4EN
 (1 << 19)

	)

457 
	#RCC_APB1ENR1_USART3EN
 (1 << 18)

	)

458 
	#RCC_APB1ENR1_USART2EN
 (1 << 17)

	)

459 
	#RCC_APB1ENR1_SPI3EN
 (1 << 15)

	)

460 
	#RCC_APB1ENR1_SPI2EN
 (1 << 14)

	)

461 
	#RCC_APB1ENR1_LCDEN
 (1 << 9)

	)

462 
	#RCC_APB1ENR1_TIM7EN
 (1 << 5)

	)

463 
	#RCC_APB1ENR1_TIM6EN
 (1 << 4)

	)

464 
	#RCC_APB1ENR1_TIM5EN
 (1 << 3)

	)

465 
	#RCC_APB1ENR1_TIM4EN
 (1 << 2)

	)

466 
	#RCC_APB1ENR1_TIM3EN
 (1 << 1)

	)

467 
	#RCC_APB1ENR1_TIM2EN
 (1 << 0)

	)

476 
	#RCC_APB1ENR2_LPTIM2EN
 (1 << 5)

	)

477 
	#RCC_APB1ENR2_SWPMI1EN
 (1 << 2)

	)

478 
	#RCC_APB1ENR2_LPUART1EN
 (1 << 0)

	)

487 
	#RCC_APB2ENR_DFSDMEN
 (1 << 24)

	)

488 
	#RCC_APB2ENR_SAI2EN
 (1 << 22)

	)

489 
	#RCC_APB2ENR_SAI1EN
 (1 << 21)

	)

490 
	#RCC_APB2ENR_TIM17EN
 (1 << 18)

	)

491 
	#RCC_APB2ENR_TIM16EN
 (1 << 17)

	)

492 
	#RCC_APB2ENR_TIM15EN
 (1 << 16)

	)

493 
	#RCC_APB2ENR_USART1EN
 (1 << 14)

	)

494 
	#RCC_APB2ENR_TIM8EN
 (1 << 13)

	)

495 
	#RCC_APB2ENR_SPI1EN
 (1 << 12)

	)

496 
	#RCC_APB2ENR_TIM1EN
 (1 << 11)

	)

497 
	#RCC_APB2ENR_SDMMC1EN
 (1 << 10)

	)

498 
	#RCC_APB2ENR_FWEN
 (1 << 7)

	)

499 
	#RCC_APB2ENR_SYSCFGEN
 (1 << 0)

	)

504 
	#RCC_AHB1SMENR_TSCSMEN
 (1 << 16)

	)

505 
	#RCC_AHB1SMENR_CRCSMEN
 (1 << 12)

	)

506 
	#RCC_AHB1SMENR_SRAM1SMEN
 (1 << 9)

	)

507 
	#RCC_AHB1SMENR_FLASHSMEN
 (1 << 8)

	)

508 
	#RCC_AHB1SMENR_DMA2SMEN
 (1 << 1)

	)

509 
	#RCC_AHB1SMENR_DMA1SMEN
 (1 << 0)

	)

513 
	#RCC_AHB2SMENR_RNGSMEN
 (1 << 18)

	)

514 
	#RCC_AHB2SMENR_AESSMEN
 (1 << 16)

	)

515 
	#RCC_AHB2SMENR_ADCSMEN
 (1 << 13)

	)

516 
	#RCC_AHB2SMENR_OTGFSSMEN
 (1 << 12)

	)

517 
	#RCC_AHB2SMENR_SRAM2SMEN
 (1 << 9)

	)

518 
	#RCC_AHB2SMENR_GPIOHSMEN
 (1 << 7)

	)

519 
	#RCC_AHB2SMENR_GPIOGSMEN
 (1 << 6)

	)

520 
	#RCC_AHB2SMENR_GPIOFSMEN
 (1 << 5)

	)

521 
	#RCC_AHB2SMENR_GPIOESMEN
 (1 << 4)

	)

522 
	#RCC_AHB2SMENR_GPIODSMEN
 (1 << 3)

	)

523 
	#RCC_AHB2SMENR_GPIOCSMEN
 (1 << 2)

	)

524 
	#RCC_AHB2SMENR_GPIOBSMEN
 (1 << 1)

	)

525 
	#RCC_AHB2SMENR_GPIOASMEN
 (1 << 0)

	)

529 
	#RCC_AHB3SMENR_QSPISMEN
 (1 << 8)

	)

530 
	#RCC_AHB3SMENR_FMCSMEN
 (1 << 0)

	)

534 
	#RCC_APB1SMENR1_LPTIM1SMEN
 (1 << 31)

	)

535 
	#RCC_APB1SMENR1_OPAMPSMEN
 (1 << 30)

	)

536 
	#RCC_APB1SMENR1_DAC1SMEN
 (1 << 29)

	)

537 
	#RCC_APB1SMENR1_PWRSMEN
 (1 << 28)

	)

538 
	#RCC_APB1SMENR1_CAN1SMEN
 (1 << 25)

	)

539 
	#RCC_APB1SMENR1_I2C3SMEN
 (1 << 23)

	)

540 
	#RCC_APB1SMENR1_I2C2SMEN
 (1 << 22)

	)

541 
	#RCC_APB1SMENR1_I2C1SMEN
 (1 << 21)

	)

542 
	#RCC_APB1SMENR1_UART5SMEN
 (1 << 20)

	)

543 
	#RCC_APB1SMENR1_UART4SMEN
 (1 << 19)

	)

544 
	#RCC_APB1SMENR1_USART3SMEN
 (1 << 18)

	)

545 
	#RCC_APB1SMENR1_USART2SMEN
 (1 << 17)

	)

546 
	#RCC_APB1SMENR1_SPI3SMEN
 (1 << 15)

	)

547 
	#RCC_APB1SMENR1_SPI2SMEN
 (1 << 14)

	)

548 
	#RCC_APB1SMENR1_WWDGSMEN
 (1 << 11)

	)

549 
	#RCC_APB1SMENR1_LCDSMEN
 (1 << 9)

	)

550 
	#RCC_APB1SMENR1_TIM7SMEN
 (1 << 5)

	)

551 
	#RCC_APB1SMENR1_TIM6SMEN
 (1 << 4)

	)

552 
	#RCC_APB1SMENR1_TIM5SMEN
 (1 << 3)

	)

553 
	#RCC_APB1SMENR1_TIM4SMEN
 (1 << 2)

	)

554 
	#RCC_APB1SMENR1_TIM3SMEN
 (1 << 1)

	)

555 
	#RCC_APB1SMENR1_TIM2SMEN
 (1 << 0)

	)

559 
	#RCC_APB1SMENR2_LPTIM2SMEN
 (1 << 5)

	)

560 
	#RCC_APB1SMENR2_SWPMI1SMEN
 (1 << 2)

	)

561 
	#RCC_APB1SMENR2_LPUART1SMEN
 (1 << 0)

	)

565 
	#RCC_APB2SMENR_DFSDMSMEN
 (1 << 24)

	)

566 
	#RCC_APB2SMENR_SAI2SMEN
 (1 << 22)

	)

567 
	#RCC_APB2SMENR_SAI1SMEN
 (1 << 21)

	)

568 
	#RCC_APB2SMENR_TIM17SMEN
 (1 << 18)

	)

569 
	#RCC_APB2SMENR_TIM16SMEN
 (1 << 17)

	)

570 
	#RCC_APB2SMENR_TIM15SMEN
 (1 << 16)

	)

571 
	#RCC_APB2SMENR_USART1SMEN
 (1 << 14)

	)

572 
	#RCC_APB2SMENR_TIM8SMEN
 (1 << 13)

	)

573 
	#RCC_APB2SMENR_SPI1SMEN
 (1 << 12)

	)

574 
	#RCC_APB2SMENR_TIM1SMEN
 (1 << 11)

	)

575 
	#RCC_APB2SMENR_SDMMC1SMEN
 (1 << 10)

	)

576 
	#RCC_APB2SMENR_SYSCFGSMEN
 (1 << 0)

	)

580 
	#RCC_CCIPR_DFSDMSEL
 (1 << 31)

	)

581 
	#RCC_CCIPR_SWPMI1SEL
 (1 << 30)

	)

583 
	#RCC_CCIPR_ADCSEL_NONE
 0

	)

584 
	#RCC_CCIPR_ADCSEL_PLLSAI1R
 1

	)

585 
	#RCC_CCIPR_ADCSEL_PLLSAI2R
 2

	)

586 
	#RCC_CCIPR_ADCSEL_SYS
 3

	)

587 
	#RCC_CCIPR_ADCSEL_MASK
 0x3

	)

588 
	#RCC_CCIPR_ADCSEL_SHIFT
 28

	)

590 
	#RCC_CCIPR_CLK48SEL_HSI48
 0

	)

591 
	#RCC_CCIPR_CLK48SEL_PLLSAI1Q
 1

	)

592 
	#RCC_CCIPR_CLK48SEL_PLL
 2

	)

593 
	#RCC_CCIPR_CLK48SEL_MSI
 3

	)

594 
	#RCC_CCIPR_CLK48SEL_MASK
 0x3

	)

595 
	#RCC_CCIPR_CLK48SEL_SHIFT
 26

	)

597 
	#RCC_CCIPR_SAIxSEL_PLLSAI1P
 0

	)

598 
	#RCC_CCIPR_SAIxSEL_PLLSAI2P
 1

	)

599 
	#RCC_CCIPR_SAIxSEL_PLL
 2

	)

600 
	#RCC_CCIPR_SAIxSEL_EXT
 3

	)

601 
	#RCC_CCIPR_SAIxSEL_MASK
 0x3

	)

602 
	#RCC_CCIPR_SAI2SEL_SHIFT
 24

	)

603 
	#RCC_CCIPR_SAI1SEL_SHIFT
 22

	)

605 
	#RCC_CCIPR_LPTIMxSEL_APB
 0

	)

606 
	#RCC_CCIPR_LPTIMxSEL_LSI
 1

	)

607 
	#RCC_CCIPR_LPTIMxSEL_HSI16
 2

	)

608 
	#RCC_CCIPR_LPTIMxSEL_LSE
 3

	)

609 
	#RCC_CCIPR_LPTIMxSEL_MASK
 0x3

	)

610 
	#RCC_CCIPR_LPTIM2SEL_SHIFT
 20

	)

611 
	#RCC_CCIPR_LPTIM1SEL_SHIFT
 18

	)

613 
	#RCC_CCIPR_I2CxSEL_APB
 0

	)

614 
	#RCC_CCIPR_I2CxSEL_SYS
 1

	)

615 
	#RCC_CCIPR_I2CxSEL_HSI16
 2

	)

616 
	#RCC_CCIPR_I2CxSEL_MASK
 0x3

	)

617 
	#RCC_CCIPR_I2C3SEL_SHIFT
 16

	)

618 
	#RCC_CCIPR_I2C2SEL_SHIFT
 14

	)

619 
	#RCC_CCIPR_I2C1SEL_SHIFT
 12

	)

621 
	#RCC_CCIPR_LPUART1SEL_APB
 0

	)

622 
	#RCC_CCIPR_LPUART1SEL_SYS
 1

	)

623 
	#RCC_CCIPR_LPUART1SEL_HSI16
 2

	)

624 
	#RCC_CCIPR_LPUART1SEL_LSE
 3

	)

625 
	#RCC_CCIPR_LPUART1SEL_MASK
 0x3

	)

626 
	#RCC_CCIPR_LPUART1SEL_SHIFT
 10

	)

628 
	#RCC_CCIPR_USARTxSEL_APB
 0

	)

629 
	#RCC_CCIPR_USARTxSEL_SYS
 1

	)

630 
	#RCC_CCIPR_USARTxSEL_HSI16
 2

	)

631 
	#RCC_CCIPR_USARTxSEL_LSE
 3

	)

632 
	#RCC_CCIPR_USARTxSEL_MASK
 0x3

	)

633 
	#RCC_CCIPR_UARTxSEL_APB
 
RCC_CCIPR_USARTxSEL_APB


	)

634 
	#RCC_CCIPR_UARTxSEL_SYS
 
RCC_CCIPR_USARTxSEL_SYS


	)

635 
	#RCC_CCIPR_UARTxSEL_HSI16
 
RCC_CCIPR_USARTxSEL_HSI16


	)

636 
	#RCC_CCIPR_UARTxSEL_LSE
 
RCC_CCIPR_USARTxSEL_LSE


	)

637 
	#RCC_CCIPR_UARTxSEL_MASK
 
RCC_CCIPR_USARTxSEL_MASK


	)

638 
	#RCC_CCIPR_UART5SEL_SHIFT
 8

	)

639 
	#RCC_CCIPR_UART4SEL_SHIFT
 6

	)

640 
	#RCC_CCIPR_USART3SEL_SHIFT
 4

	)

641 
	#RCC_CCIPR_USART2SEL_SHIFT
 2

	)

642 
	#RCC_CCIPR_USART1SEL_SHIFT
 0

	)

644 
	#RCC_CCIPR_USART1SEL_APB
 0

	)

645 
	#RCC_CCIPR_USART1SEL_SYS
 1

	)

646 
	#RCC_CCIPR_USART1SEL_HSI16
 2

	)

647 
	#RCC_CCIPR_USART1SEL_LSE
 3

	)

648 
	#RCC_CCIPR_USART1SEL_SHIFT
 0

	)

649 
	#RCC_CCIPR_USART1SEL_MASK
 0x3

	)

653 
	#RCC_BDCR_LSCOSEL
 (1 << 25)

	)

654 
	#RCC_BDCR_LSCOEN
 (1 << 24)

	)

655 
	#RCC_BDCR_BDRST
 (1 << 16)

	)

656 
	#RCC_BDCR_RTCEN
 (1 << 15)

	)

658 
	#RCC_BDCR_RTCSEL_NONE
 0

	)

659 
	#RCC_BDCR_RTCSEL_LSE
 1

	)

660 
	#RCC_BDCR_RTCSEL_LSI
 2

	)

661 
	#RCC_BDCR_RTCSEL_HSEDIV32
 3

	)

662 
	#RCC_BDCR_RTCSEL_SHIFT
 8

	)

663 
	#RCC_BDCR_RTCSEL_MASK
 0x3

	)

665 
	#RCC_BDCR_LSECSSD
 (1 << 7)

	)

666 
	#RCC_BDCR_LSECSSON
 (1 << 5)

	)

668 
	#RCC_BDCR_LSEDRV_LOW
 0

	)

669 
	#RCC_BDCR_LSEDRV_MEDLOW
 1

	)

670 
	#RCC_BDCR_LSEDRV_MEDHIGH
 2

	)

671 
	#RCC_BDCR_LSEDRV_HIGH
 3

	)

672 
	#RCC_BDCR_LSEDRV_SHIFT
 3

	)

673 
	#RCC_BDCR_LSEDRV_MASK
 0x3

	)

675 
	#RCC_BDCR_LSEBYP
 (1 << 2)

	)

676 
	#RCC_BDCR_LSERDY
 (1 << 1)

	)

677 
	#RCC_BDCR_LSEON
 (1 << 0)

	)

681 
	#RCC_CSR_LPWRRSTF
 (1 << 31)

	)

682 
	#RCC_CSR_WWDGRSTF
 (1 << 30)

	)

683 
	#RCC_CSR_IWDGRSTF
 (1 << 29)

	)

684 
	#RCC_CSR_SFTRSTF
 (1 << 28)

	)

685 
	#RCC_CSR_BORRSTF
 (1 << 27)

	)

686 
	#RCC_CSR_PINRSTF
 (1 << 26)

	)

687 
	#RCC_CSR_OBLRSTF
 (1 << 25)

	)

688 
	#RCC_CSR_FWRSTF
 (1 << 24)

	)

689 
	#RCC_CSR_RMVF
 (1 << 23)

	)

690 
	#RCC_CSR_RESET_FLAGS
 (
RCC_CSR_LPWRRSTF
 | 
RCC_CSR_WWDGRSTF
 |\

691 
RCC_CSR_IWDGRSTF
 | 
RCC_CSR_SFTRSTF
 | 
RCC_CSR_BORRSTF
 |\

692 
RCC_CSR_PINRSTF
 | 
RCC_CSR_OBLRSTF
 | 
RCC_CSR_FWRSTF
)

	)

699 
	#RCC_CSR_MSIRANGE_MASK
 0xf

	)

700 
	#RCC_CSR_MSIRANGE_SHIFT
 8

	)

701 
	#RCC_CSR_MSIRANGE_1MHZ
 4

	)

702 
	#RCC_CSR_MSIRANGE_2MHZ
 5

	)

703 
	#RCC_CSR_MSIRANGE_4MHZ
 6

	)

704 
	#RCC_CSR_MSIRANGE_8MHZ
 7

	)

707 
	#RCC_CSR_LSIRDY
 (1 << 1)

	)

708 
	#RCC_CSR_LSION
 (1 << 0)

	)

712 
uöt32_t
 
rcc_ahb_‰equícy
;

713 
uöt32_t
 
rcc_≠b1_‰equícy
;

714 
uöt32_t
 
rcc_≠b2_‰equícy
;

720 
	ercc_osc
 {

721 
	mRCC_PLL
, 
	mRCC_HSE
, 
	mRCC_HSI16
, 
	mRCC_MSI
, 
	mRCC_LSE
, 
	mRCC_LSI
, 
	mRCC_HSI48


725 
	#_REG_BIT
(
ba£
, 
bô
Ë(((ba£Ë<< 5Ë+ (bô))

	)

727 
	ercc_≥rùh_˛kí
 {

730 
	mRCC_TSC
 = 
_REG_BIT
(
RCC_AHB1ENR_OFFSET
, 16),

731 
	mRCC_CRC
 = 
_REG_BIT
(
RCC_AHB1ENR_OFFSET
, 12),

732 
	mRCC_FLASH
 = 
_REG_BIT
(
RCC_AHB1ENR_OFFSET
, 8),

733 
	mRCC_DMA2
 = 
_REG_BIT
(
RCC_AHB1ENR_OFFSET
, 1),

734 
	mRCC_DMA1
 = 
_REG_BIT
(
RCC_AHB1ENR_OFFSET
, 0),

737 
	mRCC_RNG
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 18),

738 
	mRCC_AES
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 16),

739 
	mRCC_ADC
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 13),

740 
	mRCC_ADC1
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 13),

741 
	mRCC_OTGFS
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 12),

742 
	mRCC_GPIOH
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 7),

743 
	mRCC_GPIOG
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 6),

744 
	mRCC_GPIOF
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 5),

745 
	mRCC_GPIOE
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 4),

746 
	mRCC_GPIOD
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 3),

747 
	mRCC_GPIOC
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 2),

748 
	mRCC_GPIOB
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 1),

749 
	mRCC_GPIOA
 = 
_REG_BIT
(
RCC_AHB2ENR_OFFSET
, 0),

752 
	mRCC_QSPI
 = 
_REG_BIT
(
RCC_AHB3ENR_OFFSET
, 8),

753 
	mRCC_FMC
 = 
_REG_BIT
(
RCC_AHB3ENR_OFFSET
, 0),

756 
	mRCC_LPTIM1
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 31),

757 
	mRCC_OPAMP
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 30),

758 
	mRCC_DAC1
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 29),

759 
	mRCC_PWR
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 28),

760 
	mRCC_USB
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 26),

761 
	mRCC_CAN1
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 25),

762 
	mRCC_CRS
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 24),

763 
	mRCC_I2C3
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 23),

764 
	mRCC_I2C2
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 22),

765 
	mRCC_I2C1
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 21),

766 
	mRCC_UART5
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 20),

767 
	mRCC_UART4
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 19),

768 
	mRCC_USART3
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 18),

769 
	mRCC_USART2
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 17),

770 
	mRCC_SPI3
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 15),

771 
	mRCC_SPI2
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 14),

772 
	mRCC_LCD
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 9),

773 
	mRCC_TIM7
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 5),

774 
	mRCC_TIM6
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 4),

775 
	mRCC_TIM5
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 3),

776 
	mRCC_TIM4
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 2),

777 
	mRCC_TIM3
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 1),

778 
	mRCC_TIM2
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 0),

780 
	mRCC_LPTIM2
 = 
_REG_BIT
(
RCC_APB1ENR2_OFFSET
, 5),

781 
	mRCC_SWPMI1
 = 
_REG_BIT
(
RCC_APB1ENR2_OFFSET
, 2),

782 
	mRCC_LPUART1
 = 
_REG_BIT
(
RCC_APB1ENR2_OFFSET
, 0),

785 
	mRCC_DFSDM
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 24),

786 
	mRCC_SAI2
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 22),

787 
	mRCC_SAI1
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 21),

788 
	mRCC_TIM17
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 18),

789 
	mRCC_TIM16
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 17),

790 
	mRCC_TIM15
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 16),

791 
	mRCC_USART1
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 14),

792 
	mRCC_TIM8
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 13),

793 
	mRCC_SPI1
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 12),

794 
	mRCC_TIM1
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 11),

795 
	mRCC_SDMMC1
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 10),

796 
	mRCC_FW
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 7),

797 
	mRCC_SYSCFG
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 0),

800 
	mSCC_TSC
 = 
_REG_BIT
(
RCC_AHB1SMENR_OFFSET
, 16),

801 
	mSCC_CRC
 = 
_REG_BIT
(
RCC_AHB1SMENR_OFFSET
, 12),

802 
	mSCC_SRAM1
 = 
_REG_BIT
(
RCC_AHB1SMENR_OFFSET
, 9),

803 
	mSCC_FLASH
 = 
_REG_BIT
(
RCC_AHB1SMENR_OFFSET
, 8),

804 
	mSCC_DMA2
 = 
_REG_BIT
(
RCC_AHB1SMENR_OFFSET
, 1),

805 
	mSCC_DMA1
 = 
_REG_BIT
(
RCC_AHB1SMENR_OFFSET
, 0),

808 
	mSCC_RNG
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 18),

809 
	mSCC_AES
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 16),

810 
	mSCC_ADC
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 13),

811 
	mSCC_ADC1
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 13),

812 
	mSCC_OTGFS
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 12),

813 
	mSCC_SRAM2
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 9),

814 
	mSCC_GPIOH
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 7),

815 
	mSCC_GPIOG
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 6),

816 
	mSCC_GPIOF
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 5),

817 
	mSCC_GPIOE
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 4),

818 
	mSCC_GPIOD
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 3),

819 
	mSCC_GPIOC
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 2),

820 
	mSCC_GPIOB
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 1),

821 
	mSCC_GPIOA
 = 
_REG_BIT
(
RCC_AHB2SMENR_OFFSET
, 0),

824 
	mSCC_QSPI
 = 
_REG_BIT
(
RCC_AHB3SMENR_OFFSET
, 8),

825 
	mSCC_FMC
 = 
_REG_BIT
(
RCC_AHB3SMENR_OFFSET
, 0),

828 
	mSCC_LPTIM1
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 31),

829 
	mSCC_OPAMP
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 30),

830 
	mSCC_DAC1
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 29),

831 
	mSCC_PWR
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 28),

832 
	mSCC_CAN1
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 25),

833 
	mSCC_I2C3
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 23),

834 
	mSCC_I2C2
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 22),

835 
	mSCC_I2C1
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 21),

836 
	mSCC_UART5
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 20),

837 
	mSCC_UART4
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 19),

838 
	mSCC_USART3
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 18),

839 
	mSCC_USART2
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 17),

840 
	mSCC_SPI3
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 15),

841 
	mSCC_SPI2
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 14),

842 
	mSCC_WWDG
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 11),

843 
	mSCC_LCD
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 9),

844 
	mSCC_TIM7
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 5),

845 
	mSCC_TIM6
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 4),

846 
	mSCC_TIM5
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 3),

847 
	mSCC_TIM4
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 2),

848 
	mSCC_TIM3
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 1),

849 
	mSCC_TIM2
 = 
_REG_BIT
(
RCC_APB1ENR1_OFFSET
, 0),

851 
	mSCC_LPTIM2
 = 
_REG_BIT
(
RCC_APB1ENR2_OFFSET
, 5),

852 
	mSCC_SWPMI1
 = 
_REG_BIT
(
RCC_APB1ENR2_OFFSET
, 2),

853 
	mSCC_LPUART1
 = 
_REG_BIT
(
RCC_APB1ENR2_OFFSET
, 0),

856 
	mSCC_DFSDM
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 24),

857 
	mSCC_SAI2
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 22),

858 
	mSCC_SAI1
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 21),

859 
	mSCC_TIM17
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 18),

860 
	mSCC_TIM16
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 17),

861 
	mSCC_TIM15
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 16),

862 
	mSCC_USART1
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 14),

863 
	mSCC_TIM8
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 13),

864 
	mSCC_SPI1
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 12),

865 
	mSCC_TIM1
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 11),

866 
	mSCC_SDMMC1
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 10),

867 
	mSCC_SYSCFG
 = 
_REG_BIT
(
RCC_APB2ENR_OFFSET
, 0),

870 
	ercc_≥rùh_r°
 {

872 
	mRST_TSC
 = 
_REG_BIT
(
RCC_AHB1RSTR_OFFSET
, 16),

873 
	mRST_CRC
 = 
_REG_BIT
(
RCC_AHB1RSTR_OFFSET
, 12),

874 
	mRST_FLASH
 = 
_REG_BIT
(
RCC_AHB1RSTR_OFFSET
, 8),

875 
	mRST_DMA2
 = 
_REG_BIT
(
RCC_AHB1RSTR_OFFSET
, 1),

876 
	mRST_DMA1
 = 
_REG_BIT
(
RCC_AHB1RSTR_OFFSET
, 0),

879 
	mRST_RNG
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 18),

880 
	mRST_AES
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 16),

881 
	mRST_ADC
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 13),

882 
	mRST_ADC1
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 13),

883 
	mRST_OTGFS
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 12),

884 
	mRST_GPIOH
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 7),

885 
	mRST_GPIOG
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 6),

886 
	mRST_GPIOF
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 5),

887 
	mRST_GPIOE
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 4),

888 
	mRST_GPIOD
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 3),

889 
	mRST_GPIOC
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 2),

890 
	mRST_GPIOB
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 1),

891 
	mRST_GPIOA
 = 
_REG_BIT
(
RCC_AHB2RSTR_OFFSET
, 0),

894 
	mRST_QSPI
 = 
_REG_BIT
(
RCC_AHB3RSTR_OFFSET
, 8),

895 
	mRST_FMC
 = 
_REG_BIT
(
RCC_AHB3RSTR_OFFSET
, 0),

898 
	mRST_LPTIM1
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 31),

899 
	mRST_OPAMP
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 30),

900 
	mRST_DAC1
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 29),

901 
	mRST_PWR
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 28),

902 
	mRST_USB
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 26),

903 
	mRST_CAN1
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 25),

904 
	mRST_CRS
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 24),

905 
	mRST_I2C3
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 23),

906 
	mRST_I2C2
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 22),

907 
	mRST_I2C1
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 21),

908 
	mRST_UART5
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 20),

909 
	mRST_UART4
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 19),

910 
	mRST_USART3
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 18),

911 
	mRST_USART2
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 17),

912 
	mRST_SPI3
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 15),

913 
	mRST_SPI2
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 14),

914 
	mRST_LCD
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 9),

915 
	mRST_TIM7
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 5),

916 
	mRST_TIM6
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 4),

917 
	mRST_TIM5
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 3),

918 
	mRST_TIM4
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 2),

919 
	mRST_TIM3
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 1),

920 
	mRST_TIM2
 = 
_REG_BIT
(
RCC_APB1RSTR1_OFFSET
, 0),

922 
	mRST_LPTIM2
 = 
_REG_BIT
(
RCC_APB1RSTR2_OFFSET
, 5),

923 
	mRST_SWPMI1
 = 
_REG_BIT
(
RCC_APB1RSTR2_OFFSET
, 2),

924 
	mRST_LPUART1
 = 
_REG_BIT
(
RCC_APB1RSTR2_OFFSET
, 0),

927 
	mRST_DFSDM
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 24),

928 
	mRST_SAI2
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 22),

929 
	mRST_SAI1
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 21),

930 
	mRST_TIM17
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 18),

931 
	mRST_TIM16
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 17),

932 
	mRST_TIM15
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 16),

933 
	mRST_USART1
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 14),

934 
	mRST_TIM8
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 13),

935 
	mRST_SPI1
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 12),

936 
	mRST_TIM1
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 11),

937 
	mRST_SDMMC1
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 10),

938 
	mRST_SYSCFG
 = 
_REG_BIT
(
RCC_APB2RSTR_OFFSET
, 0),

941 
	~<lib›ícm3/°m32/comm⁄/rcc_comm⁄_Æl.h
>

943 
BEGIN_DECLS


945 
rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
);

946 
rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
);

947 
rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
);

948 
rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
);

949 
rcc_css_öt_˛ór
();

950 
rcc_css_öt_Êag
();

951 
rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
);

952 
rcc_osc_⁄
(
rcc_osc
 
osc
);

953 
rcc_osc_off
(
rcc_osc
 
osc
);

954 
rcc_css_íabÀ
();

955 
rcc_css_dißbÀ
();

956 
rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
);

957 
rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
);

958 
rcc_£t_µª2
(
uöt32_t
 
µª2
);

959 
rcc_£t_µª1
(
uöt32_t
 
µª1
);

960 
rcc_£t_h¥e
(
uöt32_t
 
h¥e
);

961 
rcc_£t_maö_∂l
(
uöt32_t
 
sour˚
, uöt32_à
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
, uöt32_à
∂lq
, uöt32_à
∂Ã
);

962 
uöt32_t
 
rcc_sy°em_˛ock_sour˚
();

963 
rcc_£t_msi_ønge
(
uöt32_t
 
msi_ønge
);

964 
rcc_£t_msi_ønge_°™dby
(
uöt32_t
 
msi_ønge
);

966 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l4/rng.h

18 #i‚de‡
LIBOPENCM3_RNG_H


19 
	#LIBOPENCM3_RNG_H


	)

21 
	~<lib›ícm3/°m32/comm⁄/∫g_comm⁄_v1.h
>

	@libopencm3/include/libopencm3/stm32/l4/rtc.h

31 #i‚de‡
LIBOPENCM3_RTC_H


32 
	#LIBOPENCM3_RTC_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/πc_comm⁄_l1f024.h
>

	@libopencm3/include/libopencm3/stm32/l4/spi.h

31 #i‚de‡
LIBOPENCM3_SPI_H


32 
	#LIBOPENCM3_SPI_H


	)

34 
	~<lib›ícm3/°m32/comm⁄/•i_comm⁄_v2.h
>

	@libopencm3/include/libopencm3/stm32/l4/st_usbfs.h

21 #i‚de‡
LIBOPENCM3_ST_USBFS_H


22 #îr‹ 
Do
 
nŸ
 
ö˛ude
 
dúe˘ly
 !

25 
	~<lib›ícm3/°m32/comm⁄/°_usbfs_v2.h
>

	@libopencm3/include/libopencm3/stm32/l4/syscfg.h

33 #i‚de‡
LIBOPENCM3_SYSCFG_H


34 
	#LIBOPENCM3_SYSCFG_H


	)

39 
	#SYSCFG_MEMRMP
 
	`MMIO32
(
SYSCFG_BASE
 + 0x00)

	)

40 
	#SYSCFG_CFGR1
 
	`MMIO32
(
SYSCFG_BASE
 + 0x04)

	)

41 
	#SYSCFG_EXTICR
(
i
Ë
	`MMIO32
(
SYSCFG_BASE
 + 0x08 + (i)*4)

	)

42 
	#SYSCFG_EXTICR1
 
	`SYSCFG_EXTICR
(0)

	)

43 
	#SYSCFG_EXTICR2
 
	`SYSCFG_EXTICR
(1)

	)

44 
	#SYSCFG_EXTICR3
 
	`SYSCFG_EXTICR
(2)

	)

45 
	#SYSCFG_EXTICR4
 
	`SYSCFG_EXTICR
(3)

	)

46 
	#SYSCFG_SCSR
 
	`MMIO32
(
SYSCFG_BASE
 + 0x18)

	)

47 
	#SYSCFG_CFGR2
 
	`MMIO32
(
SYSCFG_BASE
 + 0x1C)

	)

48 
	#SYSCFG_SWPR
 
	`MMIO32
(
SYSCFG_BASE
 + 0x20)

	)

49 
	#SYSCFG_SKR
 
	`MMIO32
(
SYSCFG_BASE
 + 0x24)

	)

50 
	#SYSCFG_SWPR2
 
	`MMIO32
(
SYSCFG_BASE
 + 0x29)

	)

54 
	#SYSCFG_MEMRMP_MEM_MODE_MASK
 7

	)

55 
	#SYSCFG_MEMRMP_MEM_MODE_FLASH
 0

	)

56 
	#SYSCFG_MEMRMP_MEM_MODE_SYSTEM
 1

	)

57 
	#SYSCFG_MEMRMP_MEM_MODE_FMC
 2

	)

58 
	#SYSCFG_MEMRMP_MEM_MODE_SRAM
 3

	)

59 
	#SYSCFG_MEMRMP_MEM_MODE_QSPI
 6

	)

63 
	#SYSCFG_CFGR1_FPU_IE_INEXACT
 (1 << 31)

	)

64 
	#SYSCFG_CFGR1_FPU_IE_DENORMAL
 (1 << 30)

	)

65 
	#SYSCFG_CFGR1_FPU_IE_OVERFLOW
 (1 << 29)

	)

66 
	#SYSCFG_CFGR1_FPU_IE_UNDERFLOW
 (1 << 28)

	)

67 
	#SYSCFG_CFGR1_FPU_IE_DIVZERO
 (1 << 27)

	)

68 
	#SYSCFG_CFGR1_FPU_IE_INVALID
 (1 << 26)

	)

70 
	#SYSCFG_CFGR1_I2C3_FMP
 (1 << 22)

	)

71 
	#SYSCFG_CFGR1_I2C2_FMP
 (1 << 21)

	)

72 
	#SYSCFG_CFGR1_I2C1_FMP
 (1 << 20)

	)

74 
	#SYSCFG_CFGR1_I2C_PB9_FMP
 (1 << 19)

	)

75 
	#SYSCFG_CFGR1_I2C_PB8_FMP
 (1 << 18)

	)

76 
	#SYSCFG_CFGR1_I2C_PB7_FMP
 (1 << 17)

	)

77 
	#SYSCFG_CFGR1_I2C_PB6_FMP
 (1 << 16)

	)

79 
	#SYSCFG_CFGR1_BOOSTEN
 (1 << 8)

	)

80 
	#SYSCFG_CFGR1_FWDIS
 (1 << 0)

	)

84 
	#SYSCFG_EXTICR_GPIOA
 0

	)

85 
	#SYSCFG_EXTICR_GPIOB
 1

	)

86 
	#SYSCFG_EXTICR_GPIOC
 2

	)

87 
	#SYSCFG_EXTICR_GPIOD
 3

	)

88 
	#SYSCFG_EXTICR_GPIOE
 4

	)

89 
	#SYSCFG_EXTICR_GPIOH
 7

	)

93 
	#SYSCFG_SCSR_SRAM2BSY
 (1 << 1)

	)

94 
	#SYSCFG_SCSR_SRAM2ER
 (1 << 0)

	)

98 
	#SYSCFG_CFGR2_SPF
 (1 << 8)

	)

99 
	#SYSCFG_CFGR2_ECCL
 (1 << 3)

	)

100 
	#SYSCFG_CFGR2_PVDL
 (1 << 2)

	)

101 
	#SYSCFG_CFGR2_SPL
 (1 << 1)

	)

102 
	#SYSCFG_CFGR2_CCL
 (1 << 0)

	)

107 
	#SYSCFG_SWPR_PxWP
(
x
Ë(1 << x)

	)

111 
	#SYSCFG_SKR_KEY1
 0xCA

	)

112 
	#SYSCFG_SKR_KEY2
 0x53

	)

117 
	#SYSCFG_SWPR2_PxWP
(
x
Ë(1 << (x - 32))

	)

	@libopencm3/include/libopencm3/stm32/l4/timer.h

35 #i‚de‡
LIBOPENCM3_TIMER_H


36 
	#LIBOPENCM3_TIMER_H


	)

38 
	~<lib›ícm3/°m32/comm⁄/timî_comm⁄_Æl.h
>

40 
BEGIN_DECLS


42 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/l4/usart.h

27 #i‚de‡
LIBOPENCM3_USART_H


28 
	#LIBOPENCM3_USART_H


	)

30 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_Æl.h
>

31 
	~<lib›ícm3/°m32/comm⁄/ußπ_comm⁄_v2.h
>

38 
	#USART1
 
USART1_BASE


	)

39 
	#USART2
 
USART2_BASE


	)

40 
	#USART3
 
USART3_BASE


	)

41 
	#UART4
 
USART4_BASE


	)

42 
	#UART5
 
USART5_BASE


	)

43 
	#LPUART1
 
LPUART1_BASE


	)

46 
BEGIN_DECLS


48 
	gEND_DECLS


	@libopencm3/include/libopencm3/stm32/ltdc.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F4
)

24 
	~<lib›ícm3/°m32/f4/…dc.h
>

	@libopencm3/include/libopencm3/stm32/memorymap.h

20 #i‚de‡
LIBOPENCM3_MEMORYMAP_COMMON_H


21 
	#LIBOPENCM3_MEMORYMAP_COMMON_H


	)

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/mem‹ym≠.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/mem‹ym≠.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/mem‹ym≠.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/mem‹ym≠.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/mem‹ym≠.h
>

33 #ñi‡
deföed
(
STM32F7
)

34 
	~<lib›ícm3/°m32/f7/mem‹ym≠.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/mem‹ym≠.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/mem‹ym≠.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/mem‹ym≠.h
>

	@libopencm3/include/libopencm3/stm32/pwr.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/pwr.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/pwr.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/pwr.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/pwr.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/pwr.h
>

33 #ñi‡
deföed
(
STM32F7
)

34 
	~<lib›ícm3/°m32/f7/pwr.h
>

35 #ñi‡
deföed
(
STM32L1
)

36 
	~<lib›ícm3/°m32/l1/pwr.h
>

37 #ñi‡
deföed
(
STM32L0
)

38 
	~<lib›ícm3/°m32/l0/pwr.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/pwr.h
>

	@libopencm3/include/libopencm3/stm32/quadspi.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F4
)

24 
	~<lib›ícm3/°m32/f4/quad•i.h
>

	@libopencm3/include/libopencm3/stm32/rcc.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/rcc.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/rcc.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/rcc.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/rcc.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/rcc.h
>

33 #ñi‡
deföed
(
STM32F7
)

34 
	~<lib›ícm3/°m32/f7/rcc.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/rcc.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/rcc.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/rcc.h
>

	@libopencm3/include/libopencm3/stm32/rng.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F2
)

24 
	~<lib›ícm3/°m32/f2/∫g.h
>

25 #ñi‡
deföed
(
STM32F4
)

26 
	~<lib›ícm3/°m32/f4/∫g.h
>

27 #ñi‡
deföed
(
STM32F7
)

28 
	~<lib›ícm3/°m32/f7/∫g.h
>

29 #ñi‡
deföed
(
STM32L0
)

30 
	~<lib›ícm3/°m32/l0/∫g.h
>

31 #ñi‡
deföed
(
STM32L4
)

32 
	~<lib›ícm3/°m32/l4/∫g.h
>

	@libopencm3/include/libopencm3/stm32/rtc.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/πc.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/πc.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/πc.h
>

29 #ñi‡
deföed
(
STM32F4
)

30 
	~<lib›ícm3/°m32/f4/πc.h
>

31 #ñi‡
deföed
(
STM32L0
)

32 
	~<lib›ícm3/°m32/l0/πc.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/πc.h
>

35 #ñi‡
deföed
(
STM32L4
)

36 
	~<lib›ícm3/°m32/l4/πc.h
>

	@libopencm3/include/libopencm3/stm32/sdio.h

20 #i‚de‡
LIBOPENCM3_SDIO_H


21 
	#LIBOPENCM3_SDIO_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

29 
	#SDIO_POWER
 
	`MMIO32
(
SDIO_BASE
 + 0x00)

	)

32 
	#SDIO_CLKCR
 
	`MMIO32
(
SDIO_BASE
 + 0x04)

	)

35 
	#SDIO_ARG
 
	`MMIO32
(
SDIO_BASE
 + 0x08)

	)

38 
	#SDIO_CMD
 
	`MMIO32
(
SDIO_BASE
 + 0x0C)

	)

41 
	#SDIO_RESPCMD
 
	`MMIO32
(
SDIO_BASE
 + 0x10)

	)

44 
	#SDIO_RESP1
 
	`MMIO32
(
SDIO_BASE
 + 0x14)

	)

45 
	#SDIO_RESP2
 
	`MMIO32
(
SDIO_BASE
 + 0x18)

	)

46 
	#SDIO_RESP3
 
	`MMIO32
(
SDIO_BASE
 + 0x1C)

	)

47 
	#SDIO_RESP4
 
	`MMIO32
(
SDIO_BASE
 + 0x20)

	)

50 
	#SDIO_DTIMER
 
	`MMIO32
(
SDIO_BASE
 + 0x24)

	)

53 
	#SDIO_DLEN
 
	`MMIO32
(
SDIO_BASE
 + 0x28)

	)

56 
	#SDIO_DCTRL
 
	`MMIO32
(
SDIO_BASE
 + 0x2C)

	)

60 
	#SDIO_DCOUNT
 
	`MMIO32
(
SDIO_BASE
 + 0x30)

	)

63 
	#SDIO_STA
 
	`MMIO32
(
SDIO_BASE
 + 0x34)

	)

66 
	#SDIO_ICR
 
	`MMIO32
(
SDIO_BASE
 + 0x38)

	)

69 
	#SDIO_MASK
 
	`MMIO32
(
SDIO_BASE
 + 0x3C)

	)

72 
	#SDIO_FIFOCNT
 
	`MMIO32
(
SDIO_BASE
 + 0x48)

	)

76 
	#SDIO_FIFO
 
	`MMIO32
(
SDIO_BASE
 + 0x80)

	)

81 
	#SDIO_POWER_PWRCTRL_SHIFT
 0

	)

82 
	#SDIO_POWER_PWRCTRL_MASK
 0x3

	)

83 
	#SDIO_POWER_PWRCTRL_PWROFF
 (0x0 << 
SDIO_POWER_PWRCTRL_SHIFT
)

	)

85 
	#SDIO_POWER_PWRCTRL_RSVPWRUP
 (0x2 << 
SDIO_POWER_PWRCTRL_SHIFT
)

	)

86 
	#SDIO_POWER_PWRCTRL_PWRON
 (0x3 << 
SDIO_POWER_PWRCTRL_SHIFT
)

	)

92 
	#SDIO_CLKCR_HWFC_EN
 (1 << 14)

	)

95 
	#SDIO_CLKCR_NEGEDGE
 (1 << 13)

	)

99 
	#SDIO_CLKCR_WIDBUS_SHIFT
 11

	)

100 
	#SDIO_CLKCR_WIDBUS_MASK
 0x3

	)

101 
	#SDIO_CLKCR_WIDBUS_1
 (0x0 << 
SDIO_CLKCR_WIDBUS_SHIFT
)

	)

102 
	#SDIO_CLKCR_WIDBUS_4
 (0x1 << 
SDIO_CLKCR_WIDBUS_SHIFT
)

	)

103 
	#SDIO_CLKCR_WIDBUS_8
 (0x2 << 
SDIO_CLKCR_WIDBUS_SHIFT
)

	)

106 
	#SDIO_CLKCR_BYPASS
 (1 << 10)

	)

109 
	#SDIO_CLKCR_PWRSAV
 (1 << 9)

	)

112 
	#SDIO_CLKCR_CLKEN
 (1 << 8)

	)

115 
	#SDIO_CLKCR_CLKDIV_SHIFT
 0

	)

116 
	#SDIO_CLKCR_CLKDIV_MASK
 0xFF

	)

122 
	#SDIO_CMD_ATACMD
 (1 << 14)

	)

125 
	#SDIO_CMD_NIEN
 (1 << 13)

	)

128 
	#SDIO_CMD_ENCMDCOMPL
 (1 << 12)

	)

131 
	#SDIO_CMD_SDIOSUSPEND
 (1 << 11)

	)

134 
	#SDIO_CMD_CPSMEN
 (1 << 10)

	)

137 
	#SDIO_CMD_WAITPEND
 (1 << 9)

	)

140 
	#SDIO_CMD_WAITINT
 (1 << 8)

	)

143 
	#SDIO_CMD_WAITRESP_SHIFT
 6

	)

144 
	#SDIO_CMD_WAITRESP_MASK
 0x3

	)

146 
	#SDIO_CMD_WAITRESP_NO_0
 (0x0 << 
SDIO_CMD_WAITRESP_SHIFT
)

	)

148 
	#SDIO_CMD_WAITRESP_SHORT
 (0x1 << 
SDIO_CMD_WAITRESP_SHIFT
)

	)

150 
	#SDIO_CMD_WAITRESP_NO_2
 (0x2 << 
SDIO_CMD_WAITRESP_SHIFT
)

	)

152 
	#SDIO_CMD_WAITRESP_LONG
 (0x3 << 
SDIO_CMD_WAITRESP_SHIFT
)

	)

155 
	#SDIO_CMD_CMDINDEX_SHIFT
 0

	)

156 
	#SDIO_CMD_CMDINDEX_MASK
 0x3F

	)

161 
	#SDIO_RESPCMD_SHIFT
 0

	)

162 
	#SDIO_RESPCMD_MASK
 0x3F

	)

168 
	#SDIO_DLEN_DATALENGTH_SHIFT
 0

	)

169 
	#SDIO_DLEN_DATALENGTH_MASK
 0x1FFFFFF

	)

175 
	#SDIO_DCTRL_SDIOEN
 (1 << 11)

	)

181 
	#SDIO_DCTRL_RWMOD
 (1 << 10)

	)

187 
	#SDIO_DCTRL_RWSTOP
 (1 << 9)

	)

190 
	#SDIO_DCTRL_RWSTART
 (1 << 8)

	)

196 
	#SDIO_DCTRL_DBLOCKSIZE_SHIFT
 4

	)

197 
	#SDIO_DCTRL_DBLOCKSIZE_MASK
 0xF

	)

198 
	#SDIO_DCTRL_DBLOCKSIZE_0
 (0x0 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

199 
	#SDIO_DCTRL_DBLOCKSIZE_1
 (0x1 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

200 
	#SDIO_DCTRL_DBLOCKSIZE_2
 (0x2 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

201 
	#SDIO_DCTRL_DBLOCKSIZE_3
 (0x3 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

202 
	#SDIO_DCTRL_DBLOCKSIZE_4
 (0x4 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

203 
	#SDIO_DCTRL_DBLOCKSIZE_5
 (0x5 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

204 
	#SDIO_DCTRL_DBLOCKSIZE_6
 (0x6 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

205 
	#SDIO_DCTRL_DBLOCKSIZE_7
 (0x7 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

206 
	#SDIO_DCTRL_DBLOCKSIZE_8
 (0x8 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

207 
	#SDIO_DCTRL_DBLOCKSIZE_9
 (0x9 << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

208 
	#SDIO_DCTRL_DBLOCKSIZE_10
 (0xA << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

209 
	#SDIO_DCTRL_DBLOCKSIZE_11
 (0xB << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

210 
	#SDIO_DCTRL_DBLOCKSIZE_12
 (0xC << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

211 
	#SDIO_DCTRL_DBLOCKSIZE_13
 (0xD << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

212 
	#SDIO_DCTRL_DBLOCKSIZE_14
 (0xE << 
SDIO_DCTRL_DBLOCKSIZE_SHIFT
)

	)

215 
	#SDIO_DCTRL_DMAEN
 (1 << 3)

	)

218 
	#SDIO_DCTRL_DTMODE
 (1 << 2)

	)

224 
	#SDIO_DCTRL_DTDIR
 (1 << 1)

	)

227 
	#SDIO_DCTRL_DTEN
 (1 << 0)

	)

233 
	#SDIO_STA_CEATAEND
 (1 << 23)

	)

236 
	#SDIO_STA_SDIOIT
 (1 << 22)

	)

239 
	#SDIO_STA_RXDAVL
 (1 << 21)

	)

242 
	#SDIO_STA_TXDAVL
 (1 << 20)

	)

245 
	#SDIO_STA_RXFIFOE
 (1 << 19)

	)

251 
	#SDIO_STA_TXFIFOE
 (1 << 18)

	)

257 
	#SDIO_STA_RXFIFOF
 (1 << 17)

	)

260 
	#SDIO_STA_TXFIFOF
 (1 << 16)

	)

263 
	#SDIO_STA_RXFIFOHF
 (1 << 15)

	)

268 
	#SDIO_STA_TXFIFOHE
 (1 << 14)

	)

271 
	#SDIO_STA_RXACT
 (1 << 13)

	)

274 
	#SDIO_STA_TXACT
 (1 << 12)

	)

277 
	#SDIO_STA_CMDACT
 (1 << 11)

	)

280 
	#SDIO_STA_DBCKEND
 (1 << 10)

	)

283 
	#SDIO_STA_STBITERR
 (1 << 9)

	)

286 
	#SDIO_STA_DATAEND
 (1 << 8)

	)

289 
	#SDIO_STA_CMDSENT
 (1 << 7)

	)

292 
	#SDIO_STA_CMDREND
 (1 << 6)

	)

295 
	#SDIO_STA_RXOVERR
 (1 << 5)

	)

298 
	#SDIO_STA_TXUNDERR
 (1 << 4)

	)

301 
	#SDIO_STA_DTIMEOUT
 (1 << 3)

	)

304 
	#SDIO_STA_CTIMEOUT
 (1 << 2)

	)

307 
	#SDIO_STA_DCRCFAIL
 (1 << 1)

	)

310 
	#SDIO_STA_CCRCFAIL
 (1 << 0)

	)

316 
	#SDIO_ICR_CEATAENDC
 (1 << 23)

	)

319 
	#SDIO_ICR_SDIOITC
 (1 << 22)

	)

322 
	#SDIO_ICR_DBCKENDC
 (1 << 10)

	)

325 
	#SDIO_ICR_STBITERRC
 (1 << 9)

	)

328 
	#SDIO_ICR_DATAENDC
 (1 << 8)

	)

331 
	#SDIO_ICR_CMDSENTC
 (1 << 7)

	)

334 
	#SDIO_ICR_CMDRENDC
 (1 << 6)

	)

337 
	#SDIO_ICR_RXOVERRC
 (1 << 5)

	)

340 
	#SDIO_ICR_TXUNDERRC
 (1 << 4)

	)

343 
	#SDIO_ICR_DTIMEOUTC
 (1 << 3)

	)

346 
	#SDIO_ICR_CTIMEOUTC
 (1 << 2)

	)

349 
	#SDIO_ICR_DCRCFAILC
 (1 << 1)

	)

352 
	#SDIO_ICR_CCRCFAILC
 (1 << 0)

	)

358 
	#SDIO_MASK_CEATAENDIE
 (1 << 23)

	)

361 
	#SDIO_MASK_SDIOITIE
 (1 << 22)

	)

364 
	#SDIO_MASK_RXDAVLIE
 (1 << 21)

	)

367 
	#SDIO_MASK_TXDAVLIE
 (1 << 20)

	)

370 
	#SDIO_MASK_RXFIFOEIE
 (1 << 19)

	)

373 
	#SDIO_MASK_TXFIFOEIE
 (1 << 18)

	)

376 
	#SDIO_MASK_RXFIFOFIE
 (1 << 17)

	)

379 
	#SDIO_MASK_TXFIFOFIE
 (1 << 16)

	)

382 
	#SDIO_MASK_RXFIFOHFIE
 (1 << 15)

	)

385 
	#SDIO_MASK_TXFIFOHEIE
 (1 << 14)

	)

388 
	#SDIO_MASK_RXACTIE
 (1 << 13)

	)

391 
	#SDIO_MASK_TXACTIE
 (1 << 12)

	)

394 
	#SDIO_MASK_CMDACTIE
 (1 << 11)

	)

397 
	#SDIO_MASK_DBCKENDIE
 (1 << 10)

	)

400 
	#SDIO_MASK_STBITERRIE
 (1 << 9)

	)

403 
	#SDIO_MASK_DATAENDIE
 (1 << 8)

	)

406 
	#SDIO_MASK_CMDSENTIE
 (1 << 7)

	)

409 
	#SDIO_MASK_CMDRENDIE
 (1 << 6)

	)

412 
	#SDIO_MASK_RXOVERRIE
 (1 << 5)

	)

415 
	#SDIO_MASK_TXUNDERRIE
 (1 << 4)

	)

418 
	#SDIO_MASK_DTIMEOUTIE
 (1 << 3)

	)

421 
	#SDIO_MASK_CTIMEOUTIE
 (1 << 2)

	)

424 
	#SDIO_MASK_DCRCFAILIE
 (1 << 1)

	)

427 
	#SDIO_MASK_CCRCFAILIE
 (1 << 0)

	)

435 
	#SDIO_FIFOCNT_FIFOCOUNT_SHIFT
 0

	)

436 
	#SDIO_FIFOCNT_FIFOCOUNT_MASK
 0xFFFFFF

	)

	@libopencm3/include/libopencm3/stm32/spi.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/•i.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/•i.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/•i.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/•i.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/•i.h
>

33 #ñi‡
deföed
(
STM32L0
)

34 
	~<lib›ícm3/°m32/l0/•i.h
>

35 #ñi‡
deföed
(
STM32L1
)

36 
	~<lib›ícm3/°m32/l1/•i.h
>

37 #ñi‡
deföed
(
STM32L4
)

38 
	~<lib›ícm3/°m32/l4/•i.h
>

	@libopencm3/include/libopencm3/stm32/st_usbfs.h

20 #i‚de‡
LIBOPENCM3_ST_USBFS_H


21 
	#LIBOPENCM3_ST_USBFS_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

26 #i‡
deföed
(
STM32F0
)

27 
	~<lib›ícm3/°m32/f0/°_usbfs.h
>

28 #ñi‡
deföed
(
STM32F1
)

29 
	~<lib›ícm3/°m32/f1/°_usbfs.h
>

30 #ñi‡
deföed
(
STM32F3
)

31 
	~<lib›ícm3/°m32/f3/°_usbfs.h
>

32 #ñi‡
deföed
(
STM32L0
)

33 
	~<lib›ícm3/°m32/l0/°_usbfs.h
>

34 #ñi‡
deföed
(
STM32L1
)

35 
	~<lib›ícm3/°m32/l1/°_usbfs.h
>

36 #ñi‡
deföed
(
STM32L4
)

37 
	~<lib›ícm3/°m32/l4/°_usbfs.h
>

	@libopencm3/include/libopencm3/stm32/syscfg.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/syscfg.h
>

25 #ñi‡
deföed
(
STM32F2
)

26 
	~<lib›ícm3/°m32/f2/syscfg.h
>

27 #ñi‡
deföed
(
STM32F3
)

28 
	~<lib›ícm3/°m32/f3/syscfg.h
>

29 #ñi‡
deföed
(
STM32F4
)

30 
	~<lib›ícm3/°m32/f4/syscfg.h
>

31 #ñi‡
deföed
(
STM32L0
)

32 
	~<lib›ícm3/°m32/l0/syscfg.h
>

33 #ñi‡
deföed
(
STM32L1
)

34 
	~<lib›ícm3/°m32/l1/syscfg.h
>

35 #ñi‡
deföed
(
STM32L4
)

36 
	~<lib›ícm3/°m32/l4/syscfg.h
>

	@libopencm3/include/libopencm3/stm32/timer.h

22 
	~<lib›ícm3/cm3/comm⁄.h
>

23 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

25 #i‡
deföed
(
STM32F0
)

26 
	~<lib›ícm3/°m32/f0/timî.h
>

27 #ñi‡
deföed
(
STM32F1
)

28 
	~<lib›ícm3/°m32/f1/timî.h
>

29 #ñi‡
deföed
(
STM32F2
)

30 
	~<lib›ícm3/°m32/f2/timî.h
>

31 #ñi‡
deföed
(
STM32F3
)

32 
	~<lib›ícm3/°m32/f3/timî.h
>

33 #ñi‡
deföed
(
STM32F4
)

34 
	~<lib›ícm3/°m32/f4/timî.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/timî.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/timî.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/timî.h
>

	@libopencm3/include/libopencm3/stm32/tools.h

20 #i‚de‡
LIBOPENCM3_TOOLS_H


21 
	#LIBOPENCM3_TOOLS_H


	)

28 
	#GET_REG
(
REG
Ë((
uöt16_t
Ë*(REG))

	)

31 
	#SET_REG
(
REG
, 
VAL
Ë(*(REGË(
uöt16_t
)(VAL))

	)

34 
	#CLR_REG_BIT
(
REG
, 
BIT
Ë
	`SET_REG
((REG), (~(BIT)))

	)

37 
	#CLR_REG_BIT_MSK_AND_SET
(
REG
, 
MSK
, 
BIT
, 
EXTRA_BITS
) \

38 
	`SET_REG
((
REG
), (
	`GET_REG
((REG)Ë& (
MSK
Ë& (~(
BIT
))Ë| (
EXTRA_BITS
))

	)

40 
	#CLR_REG_BIT_MSK
(
REG
, 
MSK
, 
BIT
) \

41 
	`CLR_REG_BIT_MSK_AND_SET
((
REG
), (
MSK
), (
BIT
), 0)

	)

44 
	#GET_REG_BIT
(
REG
, 
BIT
Ë(
	`GET_REG
(REGË& (BIT))

	)

56 
	#TOG_SET_REG_BIT_MSK_AND_SET
(
REG
, 
MSK
, 
BIT
, 
EXTRA_BITS
) \

58 
uöt16_t
 
toggÀ_mask
 = 
	`GET_REG
(
REG
Ë& (
MSK
); \

59 
toggÀ_mask
 ^
BIT
; \

60 
	`SET_REG
((
REG
), 
toggÀ_mask
 | (
EXTRA_BITS
)); \

61 } 0)

	)

63 
	#TOG_SET_REG_BIT_MSK
(
REG
, 
MSK
, 
BIT
) \

64 
	`TOG_SET_REG_BIT_MSK_AND_SET
((
REG
), (
MSK
), (
BIT
), 0)

	)

	@libopencm3/include/libopencm3/stm32/tsc.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/tsc.h
>

	@libopencm3/include/libopencm3/stm32/usart.h

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

23 #i‡
deföed
(
STM32F0
)

24 
	~<lib›ícm3/°m32/f0/ußπ.h
>

25 #ñi‡
deföed
(
STM32F1
)

26 
	~<lib›ícm3/°m32/f1/ußπ.h
>

27 #ñi‡
deföed
(
STM32F2
)

28 
	~<lib›ícm3/°m32/f2/ußπ.h
>

29 #ñi‡
deföed
(
STM32F3
)

30 
	~<lib›ícm3/°m32/f3/ußπ.h
>

31 #ñi‡
deföed
(
STM32F4
)

32 
	~<lib›ícm3/°m32/f4/ußπ.h
>

33 #ñi‡
deföed
(
STM32F7
)

34 
	~<lib›ícm3/°m32/f7/ußπ.h
>

35 #ñi‡
deföed
(
STM32L0
)

36 
	~<lib›ícm3/°m32/l0/ußπ.h
>

37 #ñi‡
deföed
(
STM32L1
)

38 
	~<lib›ícm3/°m32/l1/ußπ.h
>

39 #ñi‡
deföed
(
STM32L4
)

40 
	~<lib›ícm3/°m32/l4/ußπ.h
>

	@libopencm3/include/libopencm3/stm32/wwdg.h

20 #i‚de‡
LIBOPENCM3_WWDG_H


21 
	#LIBOPENCM3_WWDG_H


	)

23 
	~<lib›ícm3/cm3/comm⁄.h
>

24 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

29 
	#WWDG_CR
 
	`MMIO32
(
WWDG_BASE
 + 0x00)

	)

32 
	#WWDG_CFR
 
	`MMIO32
(
WWDG_BASE
 + 0x04)

	)

35 
	#WWDG_SR
 
	`MMIO32
(
WWDG_BASE
 + 0x08)

	)

42 
	#WWDG_CR_WDGA
 (1 << 7)

	)

45 
	#WWDG_CR_T_LSB
 0

	)

46 
	#WWDG_CR_T0
 (1 << 0)

	)

47 
	#WWDG_CR_T1
 (1 << 1)

	)

48 
	#WWDG_CR_T2
 (1 << 2)

	)

49 
	#WWDG_CR_T3
 (1 << 3)

	)

50 
	#WWDG_CR_T4
 (1 << 4)

	)

51 
	#WWDG_CR_T5
 (1 << 5)

	)

52 
	#WWDG_CR_T6
 (1 << 6)

	)

59 
	#WWDG_CFR_EWI
 (1 << 9)

	)

62 
	#WWDG_CFR_WDGTB_LSB
 7

	)

63 
	#WWDG_CFR_WDGTB_CK_DIV1
 0x0

	)

64 
	#WWDG_CFR_WDGTB_CK_DIV2
 0x1

	)

65 
	#WWDG_CFR_WDGTB_CK_DIV4
 0x2

	)

66 
	#WWDG_CFR_WDGTB_CK_DIV8
 0x3

	)

69 
	#WWDG_CFG_W_LSB
 0

	)

70 
	#WWDG_CFG_W
 (1 << 0)

	)

77 
	#WWDG_SR_EWIF
 (1 << 0)

	)

	@libopencm3/include/libopencm3/usb/audio.h

40 #i‚de‡
LIBOPENCM3_USB_AUDIO_H


41 
	#LIBOPENCM3_USB_AUDIO_H


	)

49 
	#USB_CLASS_AUDIO
 0x01

	)

52 
	#USB_AUDIO_SUBCLASS_UNDEFINED
 0x00

	)

53 
	#USB_AUDIO_SUBCLASS_CONTROL
 0x01

	)

54 
	#USB_AUDIO_SUBCLASS_AUDIOSTREAMING
 0x02

	)

55 
	#USB_AUDIO_SUBCLASS_MIDISTREAMING
 0x03

	)

58 
	#USB_AUDIO_DT_CS_UNDEFINED
 0x20

	)

59 
	#USB_AUDIO_DT_CS_DEVICE
 0x21

	)

60 
	#USB_AUDIO_DT_CS_CONFIGURATION
 0x22

	)

61 
	#USB_AUDIO_DT_CS_STRING
 0x23

	)

62 
	#USB_AUDIO_DT_CS_INTERFACE
 0x24

	)

63 
	#USB_AUDIO_DT_CS_ENDPOINT
 0x25

	)

66 
	#USB_AUDIO_TYPE_AC_DESCRIPTOR_UNDEFINED
 0x00

	)

67 
	#USB_AUDIO_TYPE_HEADER
 0x01

	)

68 
	#USB_AUDIO_TYPE_INPUT_TERMINAL
 0x02

	)

69 
	#USB_AUDIO_TYPE_OUTPUT_TERMINAL
 0x03

	)

70 
	#USB_AUDIO_TYPE_MIXER_UNIT
 0x04

	)

71 
	#USB_AUDIO_TYPE_SELECTOR_UNIT
 0x05

	)

72 
	#USB_AUDIO_TYPE_FEATURE_UNIT
 0x06

	)

73 
	#USB_AUDIO_TYPE_PROCESSING_UNIT
 0x07

	)

74 
	#USB_AUDIO_TYPE_EXTENSION_UNIT
 0x08

	)

77 
	susb_audio_hódî_des¸ùt‹_hód
 {

78 
uöt8_t
 
	mbLígth
;

79 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

80 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

81 
uöt16_t
 
	mbcdADC
;

82 
uöt16_t
 
	mwTŸÆLígth
;

83 
uöt8_t
 
	mböCﬁÀ˘i⁄
;

85 } 
__©åibuã__
((
∑cked
));

88 
	susb_audio_hódî_des¸ùt‹_body
 {

90 
uöt8_t
 
	mbaI¡îÁ˚Nr
;

91 } 
__©åibuã__
((
∑cked
));

94 
	susb_audio_öput_ãrmöÆ_des¸ùt‹
 {

95 
uöt8_t
 
	mbLígth
;

96 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

97 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

98 
uöt8_t
 
	mbTîmöÆID
;

99 
uöt16_t
 
	mwTîmöÆTy≥
;

100 
uöt8_t
 
	mbAssocTîmöÆ
;

101 
uöt8_t
 
	mbNrCh™√ls
;

102 
uöt16_t
 
	mwCh™√lC⁄fig
;

103 
uöt8_t
 
	miCh™√lNames
;

104 
uöt8_t
 
	miTîmöÆ
;

105 } 
__©åibuã__
((
∑cked
));

108 
	susb_audio_ouçut_ãrmöÆ_des¸ùt‹
 {

109 
uöt8_t
 
	mbLígth
;

110 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

111 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

112 
uöt8_t
 
	mbTîmöÆID
;

113 
uöt16_t
 
	mwTîmöÆTy≥
;

114 
uöt8_t
 
	mbAssocTîmöÆ
;

115 
uöt8_t
 
	mbSour˚ID
;

116 
uöt8_t
 
	miTîmöÆ
;

117 } 
__©åibuã__
((
∑cked
));

120 
	susb_audio_„©uª_unô_des¸ùt‹_hód
 {

121 
uöt8_t
 
	mbLígth
;

122 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

123 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

124 
uöt8_t
 
	mbUnôID
;

125 
uöt8_t
 
	mbSour˚ID
;

126 
uöt8_t
 
	mbC⁄åﬁSize
;

127 
uöt16_t
 
	mbmaC⁄åﬁMa°î
;

131 } 
__©åibuã__
((
∑cked
));

134 
	susb_audio_„©uª_unô_des¸ùt‹_body
 {

136 
uöt16_t
 
	mbmaC⁄åﬁ
;

138 } 
__©åibuã__
((
∑cked
));

141 
	susb_audio_„©uª_unô_des¸ùt‹_èû
 {

143 
uöt8_t
 
	miFótuª
;

144 } 
__©åibuã__
((
∑cked
));

151 
	susb_audio_„©uª_unô_des¸ùt‹_2ch
 {

152 
usb_audio_„©uª_unô_des¸ùt‹_hód
 
	mhód
;

153 
usb_audio_„©uª_unô_des¸ùt‹_body
 
	mch™√l_c⁄åﬁ
[2];

154 
usb_audio_„©uª_unô_des¸ùt‹_èû
 
	mèû
;

155 } 
__©åibuã__
((
∑cked
));

158 
	susb_audio_°ªam_öãrÁ˚_des¸ùt‹
 {

159 
uöt8_t
 
	mbLígth
;

160 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

161 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

162 
uöt8_t
 
	mbTîmöÆLök
;

163 
uöt8_t
 
	mbDñay
;

164 
uöt16_t
 
	mwF‹m©Tag
;

165 } 
__©åibuã__
((
∑cked
));

168 
	susb_audio_°ªam_ídpoöt_des¸ùt‹
 {

169 
uöt8_t
 
	mbLígth
;

170 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

171 
uöt8_t
 
	mbEndpoötAddªss
;

172 
uöt8_t
 
	mbmAâribuãs
;

173 
uöt16_t
 
	mwMaxPackëSize
;

174 
uöt8_t
 
	mbI¡îvÆ
;

175 
uöt8_t
 
	mbRe‰esh
;

176 
uöt8_t
 
	mbSynchAddªss
;

177 } 
__©åibuã__
((
∑cked
));

180 
	susb_audio_°ªam_audio_ídpoöt_des¸ùt‹
 {

181 
uöt8_t
 
	mbLígth
;

182 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

183 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

184 
uöt8_t
 
	mbmAâribuãs
;

185 
uöt8_t
 
	mbLockDñayUnôs
;

186 
uöt16_t
 
	mwLockDñay
;

187 } 
__©åibuã__
((
∑cked
));

195 
	susb_audio_f‹m©_ty≥1_des¸ùt‹_hód
 {

196 
uöt8_t
 
	mbLígth
;

197 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

198 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

199 
uöt8_t
 
	mbF‹m©Ty≥
;

200 
uöt8_t
 
	mbNrCh™√ls
;

201 
uöt8_t
 
	mbSubFømeSize
;

202 
uöt8_t
 
	mbBôResﬁuti⁄
;

203 
uöt8_t
 
	mbSamFªqTy≥
;

205 } 
__©åibuã__
((
∑cked
));

208 
	susb_audio_f‹m©_c⁄töuous_ßm∂ög_‰equícy
 {

210 
uöt32_t
 
	mtLowîSamFªq
 : 24;

211 
uöt32_t
 
	mtUµîSamFªq
 : 24;

212 } 
__©åibuã__
((
∑cked
));

215 
	susb_audio_f‹m©_dis¸ëe_ßm∂ög_‰equícy
 {

217 
uöt32_t
 
	mtSamFªq
 : 24;

218 } 
__©åibuã__
((
∑cked
));

225 
	susb_audio_f‹m©_ty≥1_des¸ùt‹_1‰eq
 {

226 
usb_audio_f‹m©_ty≥1_des¸ùt‹_hód
 
	mhód
;

227 
usb_audio_f‹m©_dis¸ëe_ßm∂ög_‰equícy
 
	m‰eqs
[1];

228 } 
__©åibuã__
((
∑cked
));

	@libopencm3/include/libopencm3/usb/cdc.h

38 #i‚de‡
__CDC_H


39 
	#__CDC_H


	)

47 
	#USB_CLASS_CDC
 0x02

	)

50 
	#USB_CDC_SUBCLASS_DLCM
 0x01

	)

51 
	#USB_CDC_SUBCLASS_ACM
 0x02

	)

55 
	#USB_CDC_PROTOCOL_NONE
 0x00

	)

56 
	#USB_CDC_PROTOCOL_AT
 0x01

	)

60 
	#USB_CLASS_DATA
 0x0A

	)

63 
	#CS_INTERFACE
 0x24

	)

64 
	#CS_ENDPOINT
 0x25

	)

68 
	#USB_CDC_TYPE_HEADER
 0x00

	)

69 
	#USB_CDC_TYPE_CALL_MANAGEMENT
 0x01

	)

70 
	#USB_CDC_TYPE_ACM
 0x02

	)

72 
	#USB_CDC_TYPE_UNION
 0x06

	)

76 
	susb_cdc_hódî_des¸ùt‹
 {

77 
uöt8_t
 
	mbFun˘i⁄Lígth
;

78 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

79 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

80 
uöt16_t
 
	mbcdCDC
;

81 } 
__©åibuã__
((
∑cked
));

84 
	susb_cdc_uni⁄_des¸ùt‹
 {

85 
uöt8_t
 
	mbFun˘i⁄Lígth
;

86 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

87 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

88 
uöt8_t
 
	mbC⁄åﬁI¡îÁ˚
;

89 
uöt8_t
 
	mbSub‹dö©eI¡îÁ˚0
;

91 } 
__©åibuã__
((
∑cked
));

100 
	susb_cdc_ˇŒ_m™agemít_des¸ùt‹
 {

101 
uöt8_t
 
	mbFun˘i⁄Lígth
;

102 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

103 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

104 
uöt8_t
 
	mbmC≠abûôõs
;

105 
uöt8_t
 
	mbD©aI¡îÁ˚
;

106 } 
__©åibuã__
((
∑cked
));

109 
	susb_cdc_acm_des¸ùt‹
 {

110 
uöt8_t
 
	mbFun˘i⁄Lígth
;

111 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

112 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

113 
uöt8_t
 
	mbmC≠abûôõs
;

114 } 
__©åibuã__
((
∑cked
));

118 
	#USB_CDC_REQ_SET_LINE_CODING
 0x20

	)

120 
	#USB_CDC_REQ_SET_CONTROL_LINE_STATE
 0x22

	)

124 
	susb_cdc_löe_codög
 {

125 
uöt32_t
 
	mdwDTER©e
;

126 
uöt8_t
 
	mbCh¨F‹m©
;

127 
uöt8_t
 
	mbP¨ôyTy≥
;

128 
uöt8_t
 
	mbD©aBôs
;

129 } 
__©åibuã__
((
∑cked
));

131 
	eusb_cdc_löe_codög_bCh¨F‹m©
 {

132 
	mUSB_CDC_1_STOP_BITS
 = 0,

133 
	mUSB_CDC_1_5_STOP_BITS
 = 1,

134 
	mUSB_CDC_2_STOP_BITS
 = 2,

137 
	eusb_cdc_löe_codög_bP¨ôyTy≥
 {

138 
	mUSB_CDC_NO_PARITY
 = 0,

139 
	mUSB_CDC_ODD_PARITY
 = 1,

140 
	mUSB_CDC_EVEN_PARITY
 = 2,

141 
	mUSB_CDC_MARK_PARITY
 = 3,

142 
	mUSB_CDC_SPACE_PARITY
 = 4,

147 
	#USB_CDC_NOTIFY_SERIAL_STATE
 0x20

	)

151 
	susb_cdc_nŸifiˇti⁄
 {

152 
uöt8_t
 
	mbmReque°Ty≥
;

153 
uöt8_t
 
	mbNŸifiˇti⁄
;

154 
uöt16_t
 
	mwVÆue
;

155 
uöt16_t
 
	mwIndex
;

156 
uöt16_t
 
	mwLígth
;

157 } 
__©åibuã__
((
∑cked
));

	@libopencm3/include/libopencm3/usb/dfu.h

38 #i‚de‡
__DFU_H


39 
	#__DFU_H


	)

41 
	edfu_ªq
 {

42 
	mDFU_DETACH
,

43 
	mDFU_DNLOAD
,

44 
	mDFU_UPLOAD
,

45 
	mDFU_GETSTATUS
,

46 
	mDFU_CLRSTATUS
,

47 
	mDFU_GETSTATE
,

48 
	mDFU_ABORT
,

51 
	edfu_°©us
 {

52 
	mDFU_STATUS_OK
,

53 
	mDFU_STATUS_ERR_TARGET
,

54 
	mDFU_STATUS_ERR_FILE
,

55 
	mDFU_STATUS_ERR_WRITE
,

56 
	mDFU_STATUS_ERR_ERASE
,

57 
	mDFU_STATUS_ERR_CHECK_ERASED
,

58 
	mDFU_STATUS_ERR_PROG
,

59 
	mDFU_STATUS_ERR_VERIFY
,

60 
	mDFU_STATUS_ERR_ADDRESS
,

61 
	mDFU_STATUS_ERR_NOTDONE
,

62 
	mDFU_STATUS_ERR_FIRMWARE
,

63 
	mDFU_STATUS_ERR_VENDOR
,

64 
	mDFU_STATUS_ERR_USBR
,

65 
	mDFU_STATUS_ERR_POR
,

66 
	mDFU_STATUS_ERR_UNKNOWN
,

67 
	mDFU_STATUS_ERR_STALLEDPKT
,

70 
	edfu_°©e
 {

71 
	mSTATE_APP_IDLE
,

72 
	mSTATE_APP_DETACH
,

73 
	mSTATE_DFU_IDLE
,

74 
	mSTATE_DFU_DNLOAD_SYNC
,

75 
	mSTATE_DFU_DNBUSY
,

76 
	mSTATE_DFU_DNLOAD_IDLE
,

77 
	mSTATE_DFU_MANIFEST_SYNC
,

78 
	mSTATE_DFU_MANIFEST
,

79 
	mSTATE_DFU_MANIFEST_WAIT_RESET
,

80 
	mSTATE_DFU_UPLOAD_IDLE
,

81 
	mSTATE_DFU_ERROR
,

84 
	#DFU_FUNCTIONAL
 0x21

	)

85 
	susb_dfu_des¸ùt‹
 {

86 
uöt8_t
 
	mbLígth
;

87 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

88 
uöt8_t
 
	mbmAâribuãs
;

89 
	#USB_DFU_CAN_DOWNLOAD
 0x01

	)

90 
	#USB_DFU_CAN_UPLOAD
 0x02

	)

91 
	#USB_DFU_MANIFEST_TOLERANT
 0x04

	)

92 
	#USB_DFU_WILL_DETACH
 0x08

	)

94 
uöt16_t
 
	mwDëachTimeout
;

95 
uöt16_t
 
	mwTøns„rSize
;

96 
uöt16_t
 
	mbcdDFUVîsi⁄
;

97 } 
__©åibuã__
((
∑cked
));

	@libopencm3/include/libopencm3/usb/doc-usb.h

	@libopencm3/include/libopencm3/usb/dwc/otg_common.h

26 #i‚de‡
LIBOPENCM3_USB_DWC_OTG_COMMON_H


27 
	#LIBOPENCM3_USB_DWC_OTG_COMMON_H


	)

30 
	#OTG_GOTGCTL
 0x000

	)

31 
	#OTG_GOTGINT
 0x004

	)

32 
	#OTG_GAHBCFG
 0x008

	)

33 
	#OTG_GUSBCFG
 0x00C

	)

34 
	#OTG_GRSTCTL
 0x010

	)

35 
	#OTG_GINTSTS
 0x014

	)

36 
	#OTG_GINTMSK
 0x018

	)

37 
	#OTG_GRXSTSR
 0x01C

	)

38 
	#OTG_GRXSTSP
 0x020

	)

39 
	#OTG_GRXFSIZ
 0x024

	)

40 
	#OTG_GNPTXFSIZ
 0x028

	)

41 
	#OTG_GNPTXSTS
 0x02C

	)

42 
	#OTG_GCCFG
 0x038

	)

43 
	#OTG_CID
 0x03C

	)

44 
	#OTG_HPTXFSIZ
 0x100

	)

45 
	#OTG_DIEPTXF
(
x
Ë(0x104 + 4*((x)-1))

	)

48 
	#OTG_HCFG
 0x400

	)

49 
	#OTG_HFIR
 0x404

	)

50 
	#OTG_HFNUM
 0x408

	)

51 
	#OTG_HPTXSTS
 0x410

	)

52 
	#OTG_HAINT
 0x414

	)

53 
	#OTG_HAINTMSK
 0x418

	)

54 
	#OTG_HPRT
 0x440

	)

55 
	#OTG_HCCHAR
(
x
Ë(0x500 + 0x20*(x))

	)

56 
	#OTG_HCINT
(
x
Ë(0x508 + 0x20*(x))

	)

57 
	#OTG_HCINTMSK
(
x
Ë(0x50C + 0x20*(x))

	)

58 
	#OTG_HCTSIZ
(
x
Ë(0x510 + 0x20*(x))

	)

62 
	#OTG_DCFG
 0x800

	)

63 
	#OTG_DCTL
 0x804

	)

64 
	#OTG_DSTS
 0x808

	)

65 
	#OTG_DIEPMSK
 0x810

	)

66 
	#OTG_DOEPMSK
 0x814

	)

67 
	#OTG_DAINT
 0x818

	)

68 
	#OTG_DAINTMSK
 0x81C

	)

69 
	#OTG_DVBUSDIS
 0x828

	)

70 
	#OTG_DVBUSPULSE
 0x82C

	)

71 
	#OTG_DIEPEMPMSK
 0x834

	)

73 
	#OTG_DIEPCTL0
 0x900

	)

74 
	#OTG_DIEPCTL
(
x
Ë(0x900 + 0x20*(x))

	)

75 
	#OTG_DOEPCTL0
 0xB00

	)

76 
	#OTG_DOEPCTL
(
x
Ë(0xB00 + 0x20*(x))

	)

77 
	#OTG_DIEPINT
(
x
Ë(0x908 + 0x20*(x))

	)

78 
	#OTG_DOEPINT
(
x
Ë(0xB08 + 0x20*(x))

	)

79 
	#OTG_DIEPTSIZ0
 0x910

	)

80 
	#OTG_DIEPTSIZ
(
x
Ë(0x910 + 0x20*(x))

	)

81 
	#OTG_DOEPTSIZ0
 0xB10

	)

82 
	#OTG_DOEPTSIZ
(
x
Ë(0xB10 + 0x20*(x))

	)

83 
	#OTG_DTXFSTS
(
x
Ë(0x918 + 0x20*(x))

	)

86 
	#OTG_PCGCCTL
 0xE00

	)

89 
	#OTG_FIFO
(
x
Ë(((xË+ 1Ë<< 12)

	)

94 
	#OTG_GOTGCTL_BSVLD
 (1 << 19)

	)

95 
	#OTG_GOTGCTL_ASVLD
 (1 << 18)

	)

96 
	#OTG_GOTGCTL_DBCT
 (1 << 17)

	)

97 
	#OTG_GOTGCTL_CIDSTS
 (1 << 16)

	)

98 
	#OTG_GOTGCTL_DHNPEN
 (1 << 11)

	)

99 
	#OTG_GOTGCTL_HSHNPEN
 (1 << 10)

	)

100 
	#OTG_GOTGCTL_HNPRQ
 (1 << 9)

	)

101 
	#OTG_GOTGCTL_HNGSCS
 (1 << 8)

	)

102 
	#OTG_GOTGCTL_SRQ
 (1 << 1)

	)

103 
	#OTG_GOTGCTL_SRQSCS
 (1 << 0)

	)

106 
	#OTG_GOTGINT_DBCDNE
 (1 << 19)

	)

107 
	#OTG_GOTGINT_ADTOCHG
 (1 << 18)

	)

108 
	#OTG_GOTGINT_HNGDET
 (1 << 17)

	)

109 
	#OTG_GOTGINT_HNSSCHG
 (1 << 9)

	)

110 
	#OTG_GOTGINT_SRSSCHG
 (1 << 8)

	)

111 
	#OTG_GOTGINT_SEDET
 (1 << 2)

	)

114 
	#OTG_GAHBCFG_GINT
 0x0001

	)

115 
	#OTG_GAHBCFG_TXFELVL
 0x0080

	)

116 
	#OTG_GAHBCFG_PTXFELVL
 0x0100

	)

119 
	#OTG_GUSBCFG_TOCAL
 0x00000003

	)

120 
	#OTG_GUSBCFG_SRPCAP
 0x00000100

	)

121 
	#OTG_GUSBCFG_HNPCAP
 0x00000200

	)

122 
	#OTG_GUSBCFG_TRDT_MASK
 (0x‡<< 10)

	)

123 
	#OTG_GUSBCFG_NPTXRWEN
 0x00004000

	)

124 
	#OTG_GUSBCFG_FHMOD
 0x20000000

	)

125 
	#OTG_GUSBCFG_FDMOD
 0x40000000

	)

126 
	#OTG_GUSBCFG_CTXPKT
 0x80000000

	)

127 
	#OTG_GUSBCFG_PHYSEL
 (1 << 6)

	)

130 
	#OTG_GRSTCTL_AHBIDL
 (1 << 31)

	)

132 
	#OTG_GRSTCTL_TXFNUM_MASK
 (0x1‡<< 6)

	)

133 
	#OTG_GRSTCTL_TXFNUM_ALL
 (0x10 << 6)

	)

134 
	#OTG_GRSTCTL_TXFFLSH
 (1 << 5)

	)

135 
	#OTG_GRSTCTL_RXFFLSH
 (1 << 4)

	)

137 
	#OTG_GRSTCTL_FCRST
 (1 << 2)

	)

138 
	#OTG_GRSTCTL_HSRST
 (1 << 1)

	)

139 
	#OTG_GRSTCTL_CSRST
 (1 << 0)

	)

142 
	#OTG_GINTSTS_WKUPINT
 (1 << 31)

	)

143 
	#OTG_GINTSTS_SRQINT
 (1 << 30)

	)

144 
	#OTG_GINTSTS_DISCINT
 (1 << 29)

	)

145 
	#OTG_GINTSTS_CIDSCHG
 (1 << 28)

	)

147 
	#OTG_GINTSTS_PTXFE
 (1 << 26)

	)

148 
	#OTG_GINTSTS_HCINT
 (1 << 25)

	)

149 
	#OTG_GINTSTS_HPRTINT
 (1 << 24)

	)

151 
	#OTG_GINTSTS_IPXFR
 (1 << 21)

	)

152 
	#OTG_GINTSTS_INCOMPISOOUT
 (1 << 21)

	)

153 
	#OTG_GINTSTS_IISOIXFR
 (1 << 20)

	)

154 
	#OTG_GINTSTS_OEPINT
 (1 << 19)

	)

155 
	#OTG_GINTSTS_IEPINT
 (1 << 18)

	)

157 
	#OTG_GINTSTS_EOPF
 (1 << 15)

	)

158 
	#OTG_GINTSTS_ISOODRP
 (1 << 14)

	)

159 
	#OTG_GINTSTS_ENUMDNE
 (1 << 13)

	)

160 
	#OTG_GINTSTS_USBRST
 (1 << 12)

	)

161 
	#OTG_GINTSTS_USBSUSP
 (1 << 11)

	)

162 
	#OTG_GINTSTS_ESUSP
 (1 << 10)

	)

164 
	#OTG_GINTSTS_GONAKEFF
 (1 << 7)

	)

165 
	#OTG_GINTSTS_GINAKEFF
 (1 << 6)

	)

166 
	#OTG_GINTSTS_NPTXFE
 (1 << 5)

	)

167 
	#OTG_GINTSTS_RXFLVL
 (1 << 4)

	)

168 
	#OTG_GINTSTS_SOF
 (1 << 3)

	)

169 
	#OTG_GINTSTS_OTGINT
 (1 << 2)

	)

170 
	#OTG_GINTSTS_MMIS
 (1 << 1)

	)

171 
	#OTG_GINTSTS_CMOD
 (1 << 0)

	)

174 
	#OTG_GINTMSK_MMISM
 0x00000002

	)

175 
	#OTG_GINTMSK_OTGINT
 0x00000004

	)

176 
	#OTG_GINTMSK_SOFM
 0x00000008

	)

177 
	#OTG_GINTMSK_RXFLVLM
 0x00000010

	)

178 
	#OTG_GINTMSK_NPTXFEM
 0x00000020

	)

179 
	#OTG_GINTMSK_GINAKEFFM
 0x00000040

	)

180 
	#OTG_GINTMSK_GONAKEFFM
 0x00000080

	)

181 
	#OTG_GINTMSK_ESUSPM
 0x00000400

	)

182 
	#OTG_GINTMSK_USBSUSPM
 0x00000800

	)

183 
	#OTG_GINTMSK_USBRST
 0x00001000

	)

184 
	#OTG_GINTMSK_ENUMDNEM
 0x00002000

	)

185 
	#OTG_GINTMSK_ISOODRPM
 0x00004000

	)

186 
	#OTG_GINTMSK_EOPFM
 0x00008000

	)

187 
	#OTG_GINTMSK_EPMISM
 0x00020000

	)

188 
	#OTG_GINTMSK_IEPINT
 0x00040000

	)

189 
	#OTG_GINTMSK_OEPINT
 0x00080000

	)

190 
	#OTG_GINTMSK_IISOIXFRM
 0x00100000

	)

191 
	#OTG_GINTMSK_IISOOXFRM
 0x00200000

	)

192 
	#OTG_GINTMSK_IPXFRM
 0x00200000

	)

193 
	#OTG_GINTMSK_PRTIM
 0x01000000

	)

194 
	#OTG_GINTMSK_HCIM
 0x02000000

	)

195 
	#OTG_GINTMSK_PTXFEM
 0x04000000

	)

196 
	#OTG_GINTMSK_CIDSCHGM
 0x10000000

	)

197 
	#OTG_GINTMSK_DISCINT
 0x20000000

	)

198 
	#OTG_GINTMSK_SRQIM
 0x40000000

	)

199 
	#OTG_GINTMSK_WUIM
 0x80000000

	)

203 
	#OTG_GRXSTSP_FRMNUM_MASK
 (0x‡<< 21)

	)

204 
	#OTG_GRXSTSP_PKTSTS_MASK
 (0x‡<< 17)

	)

205 
	#OTG_GRXSTSP_PKTSTS_GOUTNAK
 (0x1 << 17)

	)

206 
	#OTG_GRXSTSP_PKTSTS_OUT
 (0x2 << 17)

	)

207 
	#OTG_GRXSTSP_PKTSTS_IN
 (0x2 << 17)

	)

208 
	#OTG_GRXSTSP_PKTSTS_OUT_COMP
 (0x3 << 17)

	)

209 
	#OTG_GRXSTSP_PKTSTS_IN_COMP
 (0x3 << 17)

	)

210 
	#OTG_GRXSTSP_PKTSTS_SETUP_COMP
 (0x4 << 17)

	)

211 
	#OTG_GRXSTSP_PKTSTS_DTERR
 (0x5 << 17)

	)

212 
	#OTG_GRXSTSP_PKTSTS_SETUP
 (0x6 << 17)

	)

213 
	#OTG_GRXSTSP_PKTSTS_CHH
 (0x7 << 17)

	)

214 
	#OTG_GRXSTSP_DPID_MASK
 (0x3 << 15)

	)

215 
	#OTG_GRXSTSP_DPID_DATA0
 (0x0 << 15)

	)

216 
	#OTG_GRXSTSP_DPID_DATA1
 (0x2 << 15)

	)

217 
	#OTG_GRXSTSP_DPID_DATA2
 (0x1 << 15)

	)

218 
	#OTG_GRXSTSP_DPID_MDATA
 (0x3 << 15)

	)

219 
	#OTG_GRXSTSP_BCNT_MASK
 (0x7f‡<< 4)

	)

220 
	#OTG_GRXSTSP_EPNUM_MASK
 (0x‡<< 0)

	)

224 
	#OTG_GCCFG_NOVBUSSENS
 (1 << 21)

	)

226 
	#OTG_GCCFG_VBDEN
 (1 << 21)

	)

227 
	#OTG_GCCFG_SOFOUTEN
 (1 << 20)

	)

228 
	#OTG_GCCFG_VBUSBSEN
 (1 << 19)

	)

229 
	#OTG_GCCFG_VBUSASEN
 (1 << 18)

	)

231 
	#OTG_GCCFG_PWRDWN
 (1 << 16)

	)

235 
	#OTG_CID_HAS_VBDEN
 0x00002000

	)

240 
	#OTG_DCTL_POPRGDNE
 (1 << 11)

	)

241 
	#OTG_DCTL_CGONAK
 (1 << 10)

	)

242 
	#OTG_DCTL_SGONAK
 (1 << 9)

	)

243 
	#OTG_DCTL_SGINAK
 (1 << 8)

	)

244 
	#OTG_DCTL_TCTL_MASK
 (7 << 4)

	)

245 
	#OTG_DCTL_GONSTS
 (1 << 3)

	)

246 
	#OTG_DCTL_GINSTS
 (1 << 2)

	)

247 
	#OTG_DCTL_SDIS
 (1 << 1)

	)

248 
	#OTG_DCTL_RWUSIG
 (1 << 0)

	)

251 
	#OTG_DCFG_DSPD
 0x0003

	)

252 
	#OTG_DCFG_NZLSOHSK
 0x0004

	)

253 
	#OTG_DCFG_DAD
 0x07F0

	)

254 
	#OTG_DCFG_PFIVL
 0x1800

	)

258 
	#OTG_DIEPMSK_BIM
 (1 << 9)

	)

259 
	#OTG_DIEPMSK_TXFURM
 (1 << 8)

	)

261 
	#OTG_DIEPMSK_INEPNEM
 (1 << 6)

	)

262 
	#OTG_DIEPMSK_INEPNMM
 (1 << 5)

	)

263 
	#OTG_DIEPMSK_ITTXFEMSK
 (1 << 4)

	)

264 
	#OTG_DIEPMSK_TOM
 (1 << 3)

	)

266 
	#OTG_DIEPMSK_EPDM
 (1 << 1)

	)

267 
	#OTG_DIEPMSK_XFRCM
 (1 << 0)

	)

271 
	#OTG_DOEPMSK_BOIM
 (1 << 9)

	)

272 
	#OTG_DOEPMSK_OPEM
 (1 << 8)

	)

274 
	#OTG_DOEPMSK_B2BSTUP
 (1 << 6)

	)

276 
	#OTG_DOEPMSK_OTEPDM
 (1 << 4)

	)

277 
	#OTG_DOEPMSK_STUPM
 (1 << 3)

	)

279 
	#OTG_DOEPMSK_EPDM
 (1 << 1)

	)

280 
	#OTG_DOEPMSK_XFRCM
 (1 << 0)

	)

283 
	#OTG_DIEPCTL0_EPENA
 (1 << 31)

	)

284 
	#OTG_DIEPCTL0_EPDIS
 (1 << 30)

	)

286 
	#OTG_DIEPCTLX_SD0PID
 (1 << 28)

	)

287 
	#OTG_DIEPCTL0_SNAK
 (1 << 27)

	)

288 
	#OTG_DIEPCTL0_CNAK
 (1 << 26)

	)

289 
	#OTG_DIEPCTL0_TXFNUM_MASK
 (0x‡<< 22)

	)

290 
	#OTG_DIEPCTL0_STALL
 (1 << 21)

	)

292 
	#OTG_DIEPCTL0_EPTYP_MASK
 (0x3 << 18)

	)

293 
	#OTG_DIEPCTL0_NAKSTS
 (1 << 17)

	)

295 
	#OTG_DIEPCTL0_USBAEP
 (1 << 15)

	)

297 
	#OTG_DIEPCTL0_MPSIZ_MASK
 (0x3 << 0)

	)

298 
	#OTG_DIEPCTL0_MPSIZ_64
 (0x0 << 0)

	)

299 
	#OTG_DIEPCTL0_MPSIZ_32
 (0x1 << 0)

	)

300 
	#OTG_DIEPCTL0_MPSIZ_16
 (0x2 << 0)

	)

301 
	#OTG_DIEPCTL0_MPSIZ_8
 (0x3 << 0)

	)

304 
	#OTG_DOEPCTL0_EPENA
 (1 << 31)

	)

305 
	#OTG_DOEPCTL0_EPDIS
 (1 << 30)

	)

307 
	#OTG_DOEPCTLX_SD0PID
 (1 << 28)

	)

308 
	#OTG_DOEPCTL0_SNAK
 (1 << 27)

	)

309 
	#OTG_DOEPCTL0_CNAK
 (1 << 26)

	)

311 
	#OTG_DOEPCTL0_STALL
 (1 << 21)

	)

312 
	#OTG_DOEPCTL0_SNPM
 (1 << 20)

	)

313 
	#OTG_DOEPCTL0_EPTYP_MASK
 (0x3 << 18)

	)

314 
	#OTG_DOEPCTL0_NAKSTS
 (1 << 17)

	)

316 
	#OTG_DOEPCTL0_USBAEP
 (1 << 15)

	)

318 
	#OTG_DOEPCTL0_MPSIZ_MASK
 (0x3 << 0)

	)

319 
	#OTG_DOEPCTL0_MPSIZ_64
 (0x0 << 0)

	)

320 
	#OTG_DOEPCTL0_MPSIZ_32
 (0x1 << 0)

	)

321 
	#OTG_DOEPCTL0_MPSIZ_16
 (0x2 << 0)

	)

322 
	#OTG_DOEPCTL0_MPSIZ_8
 (0x3 << 0)

	)

326 
	#OTG_DIEPINTX_TXFE
 (1 << 7)

	)

327 
	#OTG_DIEPINTX_INEPNE
 (1 << 6)

	)

329 
	#OTG_DIEPINTX_ITTXFE
 (1 << 4)

	)

330 
	#OTG_DIEPINTX_TOC
 (1 << 3)

	)

332 
	#OTG_DIEPINTX_EPDISD
 (1 << 1)

	)

333 
	#OTG_DIEPINTX_XFRC
 (1 << 0)

	)

337 
	#OTG_DOEPINTX_B2BSTUP
 (1 << 6)

	)

339 
	#OTG_DOEPINTX_OTEPDIS
 (1 << 4)

	)

340 
	#OTG_DOEPINTX_STUP
 (1 << 3)

	)

342 
	#OTG_DOEPINTX_EPDISD
 (1 << 1)

	)

343 
	#OTG_DOEPINTX_XFRC
 (1 << 0)

	)

347 
	#OTG_DIEPSIZ0_STUPCNT_1
 (0x1 << 29)

	)

348 
	#OTG_DIEPSIZ0_STUPCNT_2
 (0x2 << 29)

	)

349 
	#OTG_DIEPSIZ0_STUPCNT_3
 (0x3 << 29)

	)

350 
	#OTG_DIEPSIZ0_STUPCNT_MASK
 (0x3 << 29)

	)

352 
	#OTG_DIEPSIZ0_PKTCNT
 (1 << 19)

	)

354 
	#OTG_DIEPSIZ0_XFRSIZ_MASK
 (0x7‡<< 0)

	)

361 
	#OTG_HNPTXFSIZ_PTXFD_MASK
 (0xffff0000)

	)

362 
	#OTG_HNPTXFSIZ_PTXSA_MASK
 (0x0000ffff)

	)

365 
	#OTG_HPTXFSIZ_PTXFD_MASK
 (0xffff0000)

	)

366 
	#OTG_HPTXFSIZ_PTXSA_MASK
 (0x0000ffff)

	)

370 
	#OTG_HCFG_FSLSS
 (1 << 2)

	)

371 
	#OTG_HCFG_FSLSPCS_48MHz
 (0x1 << 0)

	)

372 
	#OTG_HCFG_FSLSPCS_6MHz
 (0x2 << 0)

	)

373 
	#OTG_HCFG_FSLSPCS_MASK
 (0x3 << 0)

	)

377 
	#OTG_HFIR_FRIVL_MASK
 (0x0000ffff)

	)

380 
	#OTG_HFNUM_FTREM_MASK
 (0xffff0000)

	)

381 
	#OTG_HFNUM_FRNUM_MASK
 (0x0000ffff)

	)

384 
	#OTG_HPTXSTS_PTXQTOP_MASK
 (0xff000000)

	)

385 
	#OTG_HPTXSTS_PTXQTOP_ODDFRM
 (1<<31)

	)

386 
	#OTG_HPTXSTS_PTXQTOP_EVENFRM
 (0<<31)

	)

387 
	#OTG_HPTXSTS_PTXQTOP_CHANNEL_NUMBER_MASK
 (0xf<<27)

	)

388 
	#OTG_HPTXSTS_PTXQTOP_ENDPOINT_NUMBER_MASK
 (0xf<<27)

	)

389 
	#OTG_HPTXSTS_PTXQTOP_TYPE_INOUT
 (0x00<<25)

	)

390 
	#OTG_HPTXSTS_PTXQTOP_TYPE_ZEROLENGTH
 (0x01<<25)

	)

391 
	#OTG_HPTXSTS_PTXQTOP_TYPE_DISABLECMD
 (0x11<<25)

	)

392 
	#OTG_HPTXSTS_PTXQTOP_TERMINATE
 (1<<24)

	)

393 
	#OTG_HPTXSTS_PTXQSAV_MASK
 (0x00ff0000)

	)

394 
	#OTG_HPTXSTS_PTXFSAVL_MASK
 (0x0000ffff)

	)

398 
	#OTG_HAINTMSK_HAINT_MASK
 (0x0000ffff)

	)

402 
	#OTG_HAINTMSK_HAINTM_MASK
 (0x0000ffff)

	)

406 
	#OTG_HPRT_PSPD_HIGH
 (0x0 << 17)

	)

407 
	#OTG_HPRT_PSPD_FULL
 (0x1 << 17)

	)

408 
	#OTG_HPRT_PSPD_LOW
 (0x2 << 17)

	)

409 
	#OTG_HPRT_PSPD_MASK
 (0x3 << 17)

	)

410 
	#OTG_HPRT_PTCTL_DISABLED
 (0x0 << 13)

	)

411 
	#OTG_HPRT_PTCTL_J
 (0x1 << 13)

	)

412 
	#OTG_HPRT_PTCTL_K
 (0x2 << 13)

	)

413 
	#OTG_HPRT_PTCTL_SE0_NAK
 (0x3 << 13)

	)

414 
	#OTG_HPRT_PTCTL_PACKET
 (0x4 << 13)

	)

415 
	#OTG_HPRT_PTCTL_FORCE_ENABLE
 (0x5 << 13)

	)

416 
	#OTG_HPRT_PPWR
 (1 << 12)

	)

417 
	#OTG_HPRT_PLSTS_DM
 (1 << 11)

	)

418 
	#OTG_HPRT_PLSTS_DP
 (1 << 10)

	)

420 
	#OTG_HPRT_PRST
 (1 << 8)

	)

421 
	#OTG_HPRT_PSUSP
 (1 << 7)

	)

422 
	#OTG_HPRT_PRES
 (1 << 6)

	)

423 
	#OTG_HPRT_POCCHNG
 (1 << 5)

	)

424 
	#OTG_HPRT_POCA
 (1 << 4)

	)

425 
	#OTG_HPRT_PENCHNG
 (1 << 3)

	)

426 
	#OTG_HPRT_PENA
 (1 << 2)

	)

427 
	#OTG_HPRT_PCDET
 (1 << 1)

	)

428 
	#OTG_HPRT_PCSTS
 (1 << 0)

	)

431 
	#OTG_HCCHAR_CHENA
 (1 << 31)

	)

432 
	#OTG_HCCHAR_CHDIS
 (1 << 30)

	)

433 
	#OTG_HCCHAR_ODDFRM
 (1 << 29)

	)

434 
	#OTG_HCCHAR_DAD_MASK
 (0x7‡<< 22)

	)

435 
	#OTG_HCCHAR_MCNT_1
 (0x1 << 20)

	)

436 
	#OTG_HCCHAR_MCNT_2
 (0x2 << 20)

	)

437 
	#OTG_HCCHAR_MCNT_3
 (0x3 << 20)

	)

438 
	#OTG_HCCHAR_MCNT_MASK
 (0x3 << 20)

	)

439 
	#OTG_HCCHAR_EPTYP_CONTROL
 (0 << 18)

	)

440 
	#OTG_HCCHAR_EPTYP_ISOCHRONOUS
 (1 << 18)

	)

441 
	#OTG_HCCHAR_EPTYP_BULK
 (2 << 18)

	)

442 
	#OTG_HCCHAR_EPTYP_INTERRUPT
 (3 << 18)

	)

443 
	#OTG_HCCHAR_EPTYP_MASK
 (3 << 18)

	)

444 
	#OTG_HCCHAR_LSDEV
 (1 << 17)

	)

446 
	#OTG_HCCHAR_EPDIR_OUT
 (0 << 15)

	)

447 
	#OTG_HCCHAR_EPDIR_IN
 (1 << 15)

	)

448 
	#OTG_HCCHAR_EPDIR_MASK
 (1 << 15)

	)

449 
	#OTG_HCCHAR_EPNUM_MASK
 (0x‡<< 11)

	)

450 
	#OTG_HCCHAR_MPSIZ_MASK
 (0x7f‡<< 0)

	)

454 
	#OTG_HCINT_DTERR
 (1 << 10)

	)

455 
	#OTG_HCINT_FRMOR
 (1 << 9)

	)

456 
	#OTG_HCINT_BBERR
 (1 << 8)

	)

457 
	#OTG_HCINT_TXERR
 (1 << 7)

	)

459 
	#OTG_HCINT_NYET
 (1 << 6)

	)

460 
	#OTG_HCINT_ACK
 (1 << 5)

	)

461 
	#OTG_HCINT_NAK
 (1 << 4)

	)

462 
	#OTG_HCINT_STALL
 (1 << 3)

	)

464 
	#OTG_HCINT_AHBERR
 (1 << 2)

	)

465 
	#OTG_HCINT_CHH
 (1 << 1)

	)

466 
	#OTG_HCINT_XFRC
 (1 << 0)

	)

470 
	#OTG_HCINTMSK_DTERRM
 (1 << 10)

	)

471 
	#OTG_HCINTMSK_FRMORM
 (1 << 9)

	)

472 
	#OTG_HCINTMSK_BBERRM
 (1 << 8)

	)

473 
	#OTG_HCINTMSK_TXERRM
 (1 << 7)

	)

475 
	#OTG_HCINTMSK_NYET
 (1 << 6)

	)

476 
	#OTG_HCINTMSK_ACKM
 (1 << 5)

	)

477 
	#OTG_HCINTMSK_NAKM
 (1 << 4)

	)

478 
	#OTG_HCINTMSK_STALLM
 (1 << 3)

	)

480 
	#OTG_HCINTMSK_AHBERR
 (1 << 2)

	)

481 
	#OTG_HCINTMSK_CHHM
 (1 << 1)

	)

482 
	#OTG_HCINTMSK_XFRCM
 (1 << 0)

	)

486 
	#OTG_HCTSIZ_DOPING
 (1 << 31)

	)

487 
	#OTG_HCTSIZ_DPID_DATA0
 (0x0 << 29)

	)

488 
	#OTG_HCTSIZ_DPID_DATA1
 (0x2 << 29)

	)

489 
	#OTG_HCTSIZ_DPID_DATA2
 (0x1 << 29)

	)

490 
	#OTG_HCTSIZ_DPID_MDATA
 (0x3 << 29)

	)

491 
	#OTG_HCTSIZ_DPID_MASK
 (0x3 << 29)

	)

492 
	#OTG_HCTSIZ_PKTCNT_MASK
 (0x3f‡<< 19)

	)

493 
	#OTG_HCTSIZ_XFRSIZ_MASK
 (0x7fff‡<< 0)

	)

	@libopencm3/include/libopencm3/usb/dwc/otg_fs.h

24 #i‚de‡
LIBOPENCM3_USB_DWC_OTG_FS_H


25 
	#LIBOPENCM3_USB_DWC_OTG_FS_H


	)

27 
	~<lib›ícm3/cm3/comm⁄.h
>

28 
	~<lib›ícm3/usb/dwc/Ÿg_comm⁄.h
>

31 #i‡
deföed
(
STM32F1
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32F4
)

32 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

33 #ñi‡
deföed
(
EFM32HG
)

34 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

42 
	#OTG_FS_GOTGCTL
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GOTGCTL
)

	)

43 
	#OTG_FS_GOTGINT
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GOTGINT
)

	)

44 
	#OTG_FS_GAHBCFG
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GAHBCFG
)

	)

45 
	#OTG_FS_GUSBCFG
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GUSBCFG
)

	)

46 
	#OTG_FS_GRSTCTL
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GRSTCTL
)

	)

47 
	#OTG_FS_GINTSTS
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GINTSTS
)

	)

48 
	#OTG_FS_GINTMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GINTMSK
)

	)

49 
	#OTG_FS_GRXSTSR
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GRXSTSR
)

	)

50 
	#OTG_FS_GRXSTSP
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GRXSTSP
)

	)

51 
	#OTG_FS_GRXFSIZ
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GRXFSIZ
)

	)

52 
	#OTG_FS_GNPTXFSIZ
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GNPTXFSIZ
)

	)

53 
	#OTG_FS_GNPTXSTS
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GNPTXSTS
)

	)

54 
	#OTG_FS_GCCFG
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_GCCFG
)

	)

55 
	#OTG_FS_CID
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_CID
)

	)

56 
	#OTG_FS_HPTXFSIZ
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HPTXFSIZ
)

	)

57 
	#OTG_FS_DIEPTXF
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DIEPTXF
(x))

	)

61 
	#OTG_FS_HCFG
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HCFG
)

	)

62 
	#OTG_FS_HFIR
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HFIR
)

	)

63 
	#OTG_FS_HFNUM
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HFNUM
)

	)

64 
	#OTG_FS_HPTXSTS
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HPTXSTS
)

	)

65 
	#OTG_FS_HAINT
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HAINT
)

	)

66 
	#OTG_FS_HAINTMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HAINTMSK
)

	)

67 
	#OTG_FS_HPRT
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_HPRT
)

	)

68 
	#OTG_FS_HCCHAR
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_HCCHAR
(x))

	)

69 
	#OTG_FS_HCINT
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_HCINT
(x))

	)

70 
	#OTG_FS_HCINTMSK
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_HCINTMSK
(x))

	)

71 
	#OTG_FS_HCTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_HCTSIZ
(x))

	)

74 
	#OTG_FS_DCFG
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DCFG
)

	)

75 
	#OTG_FS_DCTL
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DCTL
)

	)

76 
	#OTG_FS_DSTS
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DSTS
)

	)

77 
	#OTG_FS_DIEPMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DIEPMSK
)

	)

78 
	#OTG_FS_DOEPMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DOEPMSK
)

	)

79 
	#OTG_FS_DAINT
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DAINT
)

	)

80 
	#OTG_FS_DAINTMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DAINTMSK
)

	)

81 
	#OTG_FS_DVBUSDIS
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DVBUSDIS
)

	)

82 
	#OTG_FS_DVBUSPULSE
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DVBUSPULSE
)

	)

83 
	#OTG_FS_DIEPEMPMSK
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DIEPEMPMSK
)

	)

84 
	#OTG_FS_DIEPCTL0
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DIEPCTL0
)

	)

85 
	#OTG_FS_DIEPCTL
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DIEPCTL
(x))

	)

86 
	#OTG_FS_DOEPCTL0
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DOEPCTL0
)

	)

87 
	#OTG_FS_DOEPCTL
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DOEPCTL
(x))

	)

88 
	#OTG_FS_DIEPINT
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DIEPINT
(x))

	)

89 
	#OTG_FS_DOEPINT
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DOEPINT
(x))

	)

90 
	#OTG_FS_DIEPTSIZ0
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DIEPTSIZ0
)

	)

91 
	#OTG_FS_DOEPTSIZ0
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_DOEPTSIZ0
)

	)

92 
	#OTG_FS_DIEPTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DIEPTSIZ
(x))

	)

93 
	#OTG_FS_DTXFSTS
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DTXFSTS
(x))

	)

94 
	#OTG_FS_DOEPTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_FS_BASE
 + 
	`OTG_DOEPTSIZ
(x))

	)

97 
	#OTG_FS_PCGCCTL
 
	`MMIO32
(
USB_OTG_FS_BASE
 + 
OTG_PCGCCTL
)

	)

100 
	#OTG_FS_FIFO
(
x
Ë(&
	`MMIO32
(
USB_OTG_FS_BASE
 \

101 + (((
x
) + 1) \

102 << 12)))

	)

	@libopencm3/include/libopencm3/usb/dwc/otg_hs.h

24 #i‚de‡
LIBOPENCM3_USB_DWC_OTG_HS_H


25 
	#LIBOPENCM3_USB_DWC_OTG_HS_H


	)

27 
	~<lib›ícm3/cm3/comm⁄.h
>

28 
	~<lib›ícm3/usb/dwc/Ÿg_comm⁄.h
>

31 #i‡
deföed
(
STM32F2
Ë|| deföed(
STM32F4
)

32 
	~<lib›ícm3/°m32/mem‹ym≠.h
>

40 
	#OTG_HCSPLT
(
x
Ë(0x504 + 0x20*(x))

	)

41 
	#OTG_HCDMA
(
x
Ë(0x514 + 0x20*(x))

	)

44 
	#OTG_DEACHHINT
 0x838

	)

45 
	#OTG_DEACHHINTMSK
 0x83C

	)

46 
	#OTG_DIEPEACHMSK1
 0x844

	)

47 
	#OTG_DOEPEACHMSK1
 0x884

	)

48 
	#OTG_DIEPDMA
(
x
Ë(0x914 + 0x20*(x))

	)

49 
	#OTG_DOEPDMA
(
x
Ë(0xB14 + 0x20*(x))

	)

56 
	#OTG_HS_GOTGCTL
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GOTGCTL
)

	)

57 
	#OTG_HS_GOTGINT
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GOTGINT
)

	)

58 
	#OTG_HS_GAHBCFG
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GAHBCFG
)

	)

59 
	#OTG_HS_GUSBCFG
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GUSBCFG
)

	)

60 
	#OTG_HS_GRSTCTL
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GRSTCTL
)

	)

61 
	#OTG_HS_GINTSTS
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GINTSTS
)

	)

62 
	#OTG_HS_GINTMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GINTMSK
)

	)

63 
	#OTG_HS_GRXSTSR
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GRXSTSR
)

	)

64 
	#OTG_HS_GRXSTSP
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GRXSTSP
)

	)

65 
	#OTG_HS_GRXFSIZ
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GRXFSIZ
)

	)

66 
	#OTG_HS_GNPTXFSIZ
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GNPTXFSIZ
)

	)

67 
	#OTG_HS_GNPTXSTS
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GNPTXSTS
)

	)

68 
	#OTG_HS_GCCFG
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_GCCFG
)

	)

69 
	#OTG_HS_CID
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_CID
)

	)

70 
	#OTG_HS_HPTXFSIZ
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HPTXFSIZ
)

	)

71 
	#OTG_HS_DIEPTXF
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DIEPTXF
(x))

	)

74 
	#OTG_HS_HCFG
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HCFG
)

	)

75 
	#OTG_HS_HFIR
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HFIR
)

	)

76 
	#OTG_HS_HFNUM
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HFNUM
)

	)

77 
	#OTG_HS_HPTXSTS
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HPTXSTS
)

	)

78 
	#OTG_HS_HAINT
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HAINT
)

	)

79 
	#OTG_HS_HAINTMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HAINTMSK
)

	)

80 
	#OTG_HS_HPRT
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_HPRT
)

	)

81 
	#OTG_HS_HCCHAR
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCCHAR
(x))

	)

82 
	#OTG_HS_HCSPLT
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCSPLT
(x))

	)

83 
	#OTG_HS_HCINT
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCINT
(x))

	)

84 
	#OTG_HS_HCINTMSK
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCINTMSK
(x))

	)

85 
	#OTG_HS_HCTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCTSIZ
(x))

	)

86 
	#OTG_HS_HCDMA
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_HCDMA
(x))

	)

89 
	#OTG_HS_DCFG
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DCFG
)

	)

90 
	#OTG_HS_DCTL
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DCTL
)

	)

91 
	#OTG_HS_DSTS
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DSTS
)

	)

92 
	#OTG_HS_DIEPMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DIEPMSK
)

	)

93 
	#OTG_HS_DOEPMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DOEPMSK
)

	)

94 
	#OTG_HS_DAINT
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DAINT
)

	)

95 
	#OTG_HS_DAINTMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DAINTMSK
)

	)

96 
	#OTG_HS_DVBUSDIS
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DVBUSDIS
)

	)

97 
	#OTG_HS_DVBUSPULSE
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DVBUSPULSE
)

	)

98 
	#OTG_HS_DIEPEMPMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DIEPEMPMSK
)

	)

99 
	#OTG_HS_DIEPCTL0
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DIEPCTL0
)

	)

100 
	#OTG_HS_DIEPCTL
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DIEPCTL
(x))

	)

101 
	#OTG_HS_DOEPCTL0
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DOEPCTL0
)

	)

102 
	#OTG_HS_DOEPCTL
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DOEPCTL
(x))

	)

103 
	#OTG_HS_DIEPINT
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DIEPINT
(x))

	)

104 
	#OTG_HS_DOEPINT
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DOEPINT
(x))

	)

105 
	#OTG_HS_DIEPTSIZ0
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DIEPTSIZ0
)

	)

106 
	#OTG_HS_DOEPTSIZ0
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DOEPTSIZ0
)

	)

107 
	#OTG_HS_DIEPTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + \

108 
	`OTG_DIEPTSIZ
(
x
))

	)

109 
	#OTG_HS_DTXFSTS
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DTXFSTS
(x))

	)

110 
	#OTG_HS_DOEPTSIZ
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + \

111 
	`OTG_DOEPTSIZ
(
x
))

	)

112 
	#OTG_HS_DEACHHINT
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DEACHHINT
)

	)

113 
	#OTG_HS_DEACHHINTMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DEACHHINTMSK
)

	)

114 
	#OTG_HS_DIEPEACHMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DIEPEACHMSK1
)

	)

115 
	#OTG_HS_DOEPEACHMSK
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_DOEPEACHMSK1
)

	)

116 
	#OTG_HS_DIEPDMA
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DIEPDMA
(x))

	)

117 
	#OTG_HS_DOEPDMA
(
x
Ë
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_DOEPDMA
(x))

	)

120 
	#OTG_HS_PCGCCTL
 
	`MMIO32
(
USB_OTG_HS_BASE
 + 
OTG_PCGCCTL
)

	)

123 
	#OTG_HS_FIFO
(
x
Ë(&
	`MMIO32
(
USB_OTG_HS_BASE
 + 
	`OTG_FIFO
(x)))

	)

128 
	#OTG_DEACHHINT_OEP1INT
 (1 << 17)

	)

130 
	#OTG_DEACHHINT_IEP1INT
 (1 << 1)

	)

135 
	#OTG_DIEPEACHMSK1_NAKM
 (1 << 13)

	)

137 
	#OTG_DIEPEACHMSK1_BIM
 (1 << 9)

	)

138 
	#OTG_DIEPEACHMSK1_TXFURM
 (1 << 8)

	)

140 
	#OTG_DIEPEACHMSK1_INEPNEM
 (1 << 6)

	)

141 
	#OTG_DIEPEACHMSK1_INEPNMM
 (1 << 5)

	)

142 
	#OTG_DIEPEACHMSK1_ITTXFEMSK
 (1 << 4)

	)

143 
	#OTG_DIEPEACHMSK1_TOM
 (1 << 3)

	)

145 
	#OTG_DIEPEACHMSK1_EPDM
 (1 << 1)

	)

146 
	#OTG_DIEPEACHMSK1_XFRCM
 (1 << 0)

	)

150 
	#OTG_DOEPEACHMSK1_NYETM
 (1 << 14)

	)

151 
	#OTG_DOEPEACHMSK1_NAKM
 (1 << 13)

	)

152 
	#OTG_DOEPEACHMSK1_BERRM
 (1 << 12)

	)

154 
	#OTG_DOEPEACHMSK1_BIM
 (1 << 9)

	)

155 
	#OTG_DOEPEACHMSK1_OPEM
 (1 << 8)

	)

157 
	#OTG_DOEPEACHMSK1_AHBERRM
 (1 << 2)

	)

158 
	#OTG_DOEPEACHMSK1_EPDM
 (1 << 1)

	)

159 
	#OTG_DOEPEACHMSK1_XFRCM
 (1 << 0)

	)

163 
	#OTG_HCSPLT_SPLITEN
 (1 << 31)

	)

165 
	#OTG_HCSPLT_COMPLSPLT
 (1 << 16)

	)

166 
	#OTG_HCSPLT_XACTPOS_ALL
 (0x3 << 14)

	)

167 
	#OTG_HCSPLT_XACTPOS_BEGIN
 (0x2 << 14)

	)

168 
	#OTG_HCSPLT_XACTPOS_MID
 (0x0 << 14)

	)

169 
	#OTG_HCSPLT_XACTPOS_END
 (0x1 << 14)

	)

170 
	#OTG_HCSPLT_HUBADDR_MASK
 (0x7‡<< 7)

	)

171 
	#OTG_HCSPLT_PORTADDR_MASK
 (0x7‡<< 0)

	)

	@libopencm3/include/libopencm3/usb/hid.h

38 #i‚de‡
__HID_H


39 
	#__HID_H


	)

41 
	~<°döt.h
>

43 
	#USB_CLASS_HID
 3

	)

45 
	#USB_DT_HID
 0x21

	)

46 
	#USB_DT_REPORT
 0x22

	)

48 
	susb_hid_des¸ùt‹
 {

49 
uöt8_t
 
	mbLígth
;

50 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

51 
uöt16_t
 
	mbcdHID
;

52 
uöt8_t
 
	mbCou¡ryCode
;

53 
uöt8_t
 
	mbNumDes¸ùt‹s
;

54 } 
__©åibuã__
((
∑cked
));

	@libopencm3/include/libopencm3/usb/midi.h

38 #i‚de‡
LIBOPENCM3_USB_MIDI_H


39 
	#LIBOPENCM3_USB_MIDI_H


	)

47 
	#USB_MIDI_SUBTYPE_MS_DESCRIPTOR_UNDEFINED
 0x00

	)

48 
	#USB_MIDI_SUBTYPE_MS_HEADER
 0x01

	)

49 
	#USB_MIDI_SUBTYPE_MIDI_IN_JACK
 0x02

	)

50 
	#USB_MIDI_SUBTYPE_MIDI_OUT_JACK
 0x03

	)

51 
	#USB_MIDI_SUBTYPE_MIDI_ELEMENT
 0x04

	)

54 
	#USB_MIDI_SUBTYPE_DESCRIPTOR_UNDEFINED
 0x00

	)

55 
	#USB_MIDI_SUBTYPE_MS_GENERAL
 0x01

	)

58 
	#USB_MIDI_JACK_TYPE_UNDEFINED
 0x00

	)

59 
	#USB_MIDI_JACK_TYPE_EMBEDDED
 0x01

	)

60 
	#USB_MIDI_JACK_TYPE_EXTERNAL
 0x02

	)

63 
	#USB_MIDI_EP_CONTROL_UNDEFINED
 0x00

	)

64 
	#USB_MIDI_ASSOCIATION_CONTROL
 0x01

	)

68 
	susb_midi_hódî_des¸ùt‹
 {

69 
uöt8_t
 
	mbLígth
;

70 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

71 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

72 
uöt16_t
 
	mbcdMSC
;

73 
uöt16_t
 
	mwTŸÆLígth
;

74 } 
__©åibuã__
((
∑cked
));

77 
	susb_midi_ö_jack_des¸ùt‹
 {

78 
uöt8_t
 
	mbLígth
;

79 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

80 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

81 
uöt8_t
 
	mbJackTy≥
;

82 
uöt8_t
 
	mbJackID
;

83 
uöt8_t
 
	miJack
;

84 } 
__©åibuã__
((
∑cked
));

87 
	susb_midi_out_jack_des¸ùt‹_hód
 {

88 
uöt8_t
 
	mbLígth
;

89 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

90 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

91 
uöt8_t
 
	mbJackTy≥
;

92 
uöt8_t
 
	mbJackID
;

93 
uöt8_t
 
	mbNrI≈utPös
;

95 } 
__©åibuã__
((
∑cked
));

98 
	susb_midi_out_jack_des¸ùt‹_body
 {

100 
uöt8_t
 
	mbaSour˚ID
;

101 
uöt8_t
 
	mbaSour˚Pö
;

103 } 
__©åibuã__
((
∑cked
));

106 
	susb_midi_out_jack_des¸ùt‹_èû
 {

108 
uöt8_t
 
	miJack
;

109 } 
__©åibuã__
((
∑cked
));

116 
	susb_midi_out_jack_des¸ùt‹
 {

117 
usb_midi_out_jack_des¸ùt‹_hód
 
	mhód
;

118 
usb_midi_out_jack_des¸ùt‹_body
 
	msour˚
[1];

119 
usb_midi_out_jack_des¸ùt‹_èû
 
	mèû
;

120 } 
__©åibuã__
((
∑cked
));

123 
	susb_midi_ñemít_des¸ùt‹_hód
 {

124 
uöt8_t
 
	mbLígth
;

125 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

126 
uöt8_t
 
	mbDes¸ùt‹Subty≥
;

127 
uöt8_t
 
	mbEÀmítID
;

128 
uöt8_t
 
	mbNrI≈utPös
;

130 } 
__©åibuã__
((
∑cked
));

133 
	susb_midi_ñemít_des¸ùt‹_body
 {

135 
uöt8_t
 
	mbaSour˚ID
;

136 
uöt8_t
 
	mbaSour˚Pö
;

138 } 
__©åibuã__
((
∑cked
));

141 
	susb_midi_ñemít_des¸ùt‹_èû
 {

143 
uöt8_t
 
	mbNrOuçutPös
;

144 
uöt8_t
 
	mbInTîmöÆLök
;

145 
uöt8_t
 
	mbOutTîmöÆLök
;

146 
uöt8_t
 
	mbElC≠sSize
;

147 
uöt16_t
 
	mbmEÀmítC≠s
;

150 
uöt8_t
 
	miEÀmít
;

151 } 
__©åibuã__
((
∑cked
));

158 
	susb_midi_ñemít_des¸ùt‹
 {

159 
usb_midi_ñemít_des¸ùt‹_hód
 
	mhód
;

160 
usb_midi_ñemít_des¸ùt‹_body
 
	msour˚
[1];

161 
usb_midi_ñemít_des¸ùt‹_èû
 
	mèû
;

162 } 
__©åibuã__
((
∑cked
));

165 
	susb_midi_ídpoöt_des¸ùt‹_hód
 {

166 
uöt8_t
 
	mbLígth
;

167 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

168 
uöt8_t
 
	mbDes¸ùt‹SubTy≥
;

169 
uöt8_t
 
	mbNumEmbMIDIJack
;

170 } 
__©åibuã__
((
∑cked
));

173 
	susb_midi_ídpoöt_des¸ùt‹_body
 {

174 
uöt8_t
 
	mbaAssocJackID
;

175 } 
__©åibuã__
((
∑cked
));

182 
	susb_midi_ídpoöt_des¸ùt‹
 {

183 
usb_midi_ídpoöt_des¸ùt‹_hód
 
	mhód
;

184 
usb_midi_ídpoöt_des¸ùt‹_body
 
	mjack
[1];

185 } 
__©åibuã__
((
∑cked
));

	@libopencm3/include/libopencm3/usb/msc.h

40 #i‚de‡
__MSC_H


41 
	#__MSC_H


	)

43 
_usbd_mass_°‹age
 
	tusbd_mass_°‹age
;

55 
	#USB_CLASS_MSC
 0x08

	)

58 
	#USB_MSC_SUBCLASS_RBC
 0x01

	)

59 
	#USB_MSC_SUBCLASS_ATAPI
 0x02

	)

60 
	#USB_MSC_SUBCLASS_UFI
 0x04

	)

61 
	#USB_MSC_SUBCLASS_SCSI
 0x06

	)

62 
	#USB_MSC_SUBCLASS_LOCKABLE
 0x07

	)

63 
	#USB_MSC_SUBCLASS_IEEE1667
 0x08

	)

66 
	#USB_MSC_PROTOCOL_CBI
 0x00

	)

67 
	#USB_MSC_PROTOCOL_CBI_ALT
 0x01

	)

68 
	#USB_MSC_PROTOCOL_BBB
 0x50

	)

71 
	#USB_MSC_REQ_CODES_ADSC
 0x00

	)

72 
	#USB_MSC_REQ_CODES_GET
 0xFC

	)

73 
	#USB_MSC_REQ_CODES_PUT
 0xFD

	)

74 
	#USB_MSC_REQ_CODES_GML
 0xFE

	)

75 
	#USB_MSC_REQ_CODES_BOMSR
 0xFF

	)

78 
	#USB_MSC_REQ_BULK_ONLY_RESET
 0xFF

	)

79 
	#USB_MSC_REQ_GET_MAX_LUN
 0xFE

	)

81 
usbd_mass_°‹age
 *
usb_msc_öô
(
usbd_devi˚
 *
usbd_dev
,

82 
uöt8_t
 
ï_ö
, uöt8_à
ï_ö_size
,

83 
uöt8_t
 
ï_out
, uöt8_à
ï_out_size
,

84 c⁄° *
víd‹_id
,

85 c⁄° *
¥odu˘_id
,

86 c⁄° *
¥odu˘_ªvisi⁄_Àvñ
,

87 c⁄° 
uöt32_t
 
block_cou¡
,

88 (*
ªad_block
)(
uöt32_t
 
lba
, 
uöt8_t
 *
c›y_to
),

89 (*
wrôe_block
)(
uöt32_t
 
lba
, c⁄° 
uöt8_t
 *
c›y_‰om
));

	@libopencm3/include/libopencm3/usb/usbd.h

38 #i‚de‡
__USBD_H


39 
	#__USBD_H


	)

41 
	~<lib›ícm3/usb/usb°d.h
>

43 
BEGIN_DECLS


46 
	eusbd_ªque°_ªtu∫_codes
 {

47 
	mUSBD_REQ_NOTSUPP
 = 0,

48 
	mUSBD_REQ_HANDLED
 = 1,

49 
	mUSBD_REQ_NEXT_CALLBACK
 = 2,

52 
_usbd_drivî
 
	tusbd_drivî
;

53 
_usbd_devi˚
 
	tusbd_devi˚
;

55 c⁄° 
usbd_drivî
 
°_usbfs_v1_usb_drivî
;

56 c⁄° 
usbd_drivî
 
°m32f107_usb_drivî
;

57 c⁄° 
usbd_drivî
 
°m32f207_usb_drivî
;

58 c⁄° 
usbd_drivî
 
°_usbfs_v2_usb_drivî
;

59 
	#Ÿgfs_usb_drivî
 
°m32f107_usb_drivî


	)

60 
	#Ÿghs_usb_drivî
 
°m32f207_usb_drivî


	)

61 c⁄° 
usbd_drivî
 
efm32lg_usb_drivî
;

62 c⁄° 
usbd_drivî
 
efm32hg_usb_drivî
;

87 
usbd_devi˚
 * 
usbd_öô
(c⁄° 
usbd_drivî
 *
drivî
,

88 c⁄° 
usb_devi˚_des¸ùt‹
 *
dev
,

89 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
c⁄f
,

90 c⁄° **
°rögs
, 
num_°rögs
,

91 
uöt8_t
 *
c⁄åﬁ_buf„r
,

92 
uöt16_t
 
c⁄åﬁ_buf„r_size
);

95 
usbd_ªgi°î_ª£t_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

96 (*
ˇŒback
)());

98 
	`usbd_ªgi°î_su•íd_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

99 (*
ˇŒback
)());

101 
	`usbd_ªgi°î_ªsume_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

102 (*
ˇŒback
)());

104 
	`usbd_ªgi°î_sof_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

105 (*
ˇŒback
)());

107 (*
	tusbd_c⁄åﬁ_com∂ëe_ˇŒback
)(
	tusbd_devi˚
 *
	tusbd_dev
,

108 
	tusb_£tup_d©a
 *
	tªq
);

110 
	$usbd_ªque°_ªtu∫_codes
 (*
	tusbd_c⁄åﬁ_ˇŒback
)(

111 
	tusbd_devi˚
 *
	tusbd_dev
,

112 
	tusb_£tup_d©a
 *
	tªq
, 
	tuöt8_t
 **
	tbuf
, 
	tuöt16_t
 *
	tÀn
,

113 
	tusbd_c⁄åﬁ_com∂ëe_ˇŒback
 *
	tcom∂ëe
);

115 (*
	tusbd_£t_c⁄fig_ˇŒback
)(
	tusbd_devi˚
 *
	tusbd_dev
,

116 
	tuöt16_t
 
	twVÆue
);

118 (*
	tusbd_£t_Æt£âög_ˇŒback
)(
	tusbd_devi˚
 *
	tusbd_dev
,

119 
	tuöt16_t
 
	twIndex
, uöt16_à
	twVÆue
);

121 (*
	tusbd_ídpoöt_ˇŒback
)(
	tusbd_devi˚
 *
	tusbd_dev
, 
	tuöt8_t
 
	tï
);

136 
	`usbd_ªgi°î_c⁄åﬁ_ˇŒback
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ty≥
,

137 
uöt8_t
 
ty≥_mask
,

138 
usbd_c⁄åﬁ_ˇŒback
 
ˇŒback
);

144 
	`usbd_ªgi°î_£t_c⁄fig_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

145 
usbd_£t_c⁄fig_ˇŒback
 
ˇŒback
);

147 
	`usbd_ªgi°î_£t_Æt£âög_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

148 
usbd_£t_Æt£âög_ˇŒback
 
ˇŒback
);

151 
	`usbd_pﬁl
(
usbd_devi˚
 *
usbd_dev
);

154 
	`usbd_disc⁄√˘
(
usbd_devi˚
 *
usbd_dev
, 
boﬁ
 
disc⁄√˘ed
);

160 
	`usbd_ï_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
ty≥
,

161 
uöt16_t
 
max_size
, 
usbd_ídpoöt_ˇŒback
 
ˇŒback
);

168 
uöt16_t
 
	`usbd_ï_wrôe_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

169 c⁄° *
buf
, 
uöt16_t
 
Àn
);

176 
uöt16_t
 
	`usbd_ï_ªad_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

177 *
buf
, 
uöt16_t
 
Àn
);

182 
	`usbd_ï_°Æl_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

183 
uöt8_t
 
°Æl
);

189 
uöt8_t
 
	`usbd_ï_°Æl_gë
(
usbd_devi˚
 *
usbd_dev
, uöt8_à
addr
);

195 
	`usbd_ï_«k_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
«k
);

197 
END_DECLS


	@libopencm3/include/libopencm3/usb/usbstd.h

43 #i‚de‡
__USBSTD_H


44 
	#__USBSTD_H


	)

46 
	~<°döt.h
>

47 
	~<lib›ícm3/cm3/comm⁄.h
>

56 
	susb_£tup_d©a
 {

57 
uöt8_t
 
	mbmReque°Ty≥
;

58 
uöt8_t
 
	mbReque°
;

59 
uöt16_t
 
	mwVÆue
;

60 
uöt16_t
 
	mwIndex
;

61 
uöt16_t
 
	mwLígth
;

62 } 
__©åibuã__
((
∑cked
));

65 
	#USB_CLASS_VENDOR
 0xFF

	)

69 
	#USB_REQ_TYPE_DIRECTION
 0x80

	)

70 
	#USB_REQ_TYPE_IN
 0x80

	)

72 
	#USB_REQ_TYPE_TYPE
 0x60

	)

73 
	#USB_REQ_TYPE_STANDARD
 0x00

	)

74 
	#USB_REQ_TYPE_CLASS
 0x20

	)

75 
	#USB_REQ_TYPE_VENDOR
 0x40

	)

77 
	#USB_REQ_TYPE_RECIPIENT
 0x1F

	)

78 
	#USB_REQ_TYPE_DEVICE
 0x00

	)

79 
	#USB_REQ_TYPE_INTERFACE
 0x01

	)

80 
	#USB_REQ_TYPE_ENDPOINT
 0x02

	)

81 
	#USB_REQ_TYPE_OTHER
 0x03

	)

84 
	#USB_REQ_GET_STATUS
 0

	)

85 
	#USB_REQ_CLEAR_FEATURE
 1

	)

87 
	#USB_REQ_SET_FEATURE
 3

	)

89 
	#USB_REQ_SET_ADDRESS
 5

	)

90 
	#USB_REQ_GET_DESCRIPTOR
 6

	)

91 
	#USB_REQ_SET_DESCRIPTOR
 7

	)

92 
	#USB_REQ_GET_CONFIGURATION
 8

	)

93 
	#USB_REQ_SET_CONFIGURATION
 9

	)

94 
	#USB_REQ_GET_INTERFACE
 10

	)

95 
	#USB_REQ_SET_INTERFACE
 11

	)

96 
	#USB_REQ_SET_SYNCH_FRAME
 12

	)

99 
	#USB_DT_DEVICE
 1

	)

100 
	#USB_DT_CONFIGURATION
 2

	)

101 
	#USB_DT_STRING
 3

	)

102 
	#USB_DT_INTERFACE
 4

	)

103 
	#USB_DT_ENDPOINT
 5

	)

104 
	#USB_DT_DEVICE_QUALIFIER
 6

	)

105 
	#USB_DT_OTHER_SPEED_CONFIGURATION
 7

	)

106 
	#USB_DT_INTERFACE_POWER
 8

	)

108 
	#USB_DT_OTG
 9

	)

109 
	#USB_DT_DEBUG
 10

	)

110 
	#USB_DT_INTERFACE_ASSOCIATION
 11

	)

113 
	#USB_FEAT_ENDPOINT_HALT
 0

	)

114 
	#USB_FEAT_DEVICE_REMOTE_WAKEUP
 1

	)

115 
	#USB_FEAT_TEST_MODE
 2

	)

118 
	#USB_DEV_STATUS_SELF_POWERED
 0x01

	)

119 
	#USB_DEV_STATUS_REMOTE_WAKEUP
 0x02

	)

122 
	susb_devi˚_des¸ùt‹
 {

123 
uöt8_t
 
	mbLígth
;

124 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

125 
uöt16_t
 
	mbcdUSB
;

126 
uöt8_t
 
	mbDevi˚Cœss
;

127 
uöt8_t
 
	mbDevi˚SubCœss
;

128 
uöt8_t
 
	mbDevi˚PrŸocﬁ
;

129 
uöt8_t
 
	mbMaxPackëSize0
;

130 
uöt16_t
 
	midVíd‹
;

131 
uöt16_t
 
	midProdu˘
;

132 
uöt16_t
 
	mbcdDevi˚
;

133 
uöt8_t
 
	miM™uÁ˘uªr
;

134 
uöt8_t
 
	miProdu˘
;

135 
uöt8_t
 
	miSîülNumbî
;

136 
uöt8_t
 
	mbNumC⁄figuøti⁄s
;

137 } 
__©åibuã__
((
∑cked
));

139 
	#USB_DT_DEVICE_SIZE
 (
usb_devi˚_des¸ùt‹
)

	)

144 
	susb_devi˚_quÆifõr_des¸ùt‹
 {

145 
uöt8_t
 
	mbLígth
;

146 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

147 
uöt16_t
 
	mbcdUSB
;

148 
uöt8_t
 
	mbDevi˚Cœss
;

149 
uöt8_t
 
	mbDevi˚SubCœss
;

150 
uöt8_t
 
	mbDevi˚PrŸocﬁ
;

151 
uöt8_t
 
	mbMaxPackëSize0
;

152 
uöt8_t
 
	mbNumC⁄figuøti⁄s
;

153 
uöt8_t
 
	mbRe£rved
;

154 } 
__©åibuã__
((
∑cked
));

159 
	susb_öãrÁ˚
 {

160 
uöt8_t
 *
	mcur_Æt£âög
;

161 
uöt8_t
 
	mnum_Æt£âög
;

162 c⁄° 
usb_iÁ˚_assoc_des¸ùt‹
 *
	miÁ˚_assoc
;

163 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 *
	mÆt£âög
;

167 
	susb_c⁄fig_des¸ùt‹
 {

168 
uöt8_t
 
	mbLígth
;

169 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

170 
uöt16_t
 
	mwTŸÆLígth
;

171 
uöt8_t
 
	mbNumI¡îÁ˚s
;

172 
uöt8_t
 
	mbC⁄figuøti⁄VÆue
;

173 
uöt8_t
 
	miC⁄figuøti⁄
;

174 
uöt8_t
 
	mbmAâribuãs
;

175 
uöt8_t
 
	mbMaxPowî
;

178 c⁄° 
usb_öãrÁ˚
 *
	möãrÁ˚
;

179 } 
__©åibuã__
((
∑cked
));

180 
	#USB_DT_CONFIGURATION_SIZE
 9

	)

183 
	#USB_CONFIG_ATTR_DEFAULT
 0x80

	)

184 
	#USB_CONFIG_ATTR_SELF_POWERED
 0x40

	)

185 
	#USB_CONFIG_ATTR_REMOTE_WAKEUP
 0x20

	)

192 
	susb_öãrÁ˚_des¸ùt‹
 {

193 
uöt8_t
 
	mbLígth
;

194 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

195 
uöt8_t
 
	mbI¡îÁ˚Numbî
;

196 
uöt8_t
 
	mbA…î«ãSëtög
;

197 
uöt8_t
 
	mbNumEndpoöts
;

198 
uöt8_t
 
	mbI¡îÁ˚Cœss
;

199 
uöt8_t
 
	mbI¡îÁ˚SubCœss
;

200 
uöt8_t
 
	mbI¡îÁ˚PrŸocﬁ
;

201 
uöt8_t
 
	miI¡îÁ˚
;

204 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
	mídpoöt
;

205 c⁄° *
	mexåa
;

206 
	mexåÆí
;

207 } 
__©åibuã__
((
∑cked
));

208 
	#USB_DT_INTERFACE_SIZE
 9

	)

211 
	susb_ídpoöt_des¸ùt‹
 {

212 
uöt8_t
 
	mbLígth
;

213 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

214 
uöt8_t
 
	mbEndpoötAddªss
;

215 
uöt8_t
 
	mbmAâribuãs
;

216 
uöt16_t
 
	mwMaxPackëSize
;

217 
uöt8_t
 
	mbI¡îvÆ
;

220 c⁄° *
	mexåa
;

221 
	mexåÆí
;

222 } 
__©åibuã__
((
∑cked
));

223 
	#USB_DT_ENDPOINT_SIZE
 7

	)

226 
	#USB_ENDPOINT_ADDR_OUT
(
x
Ë(x)

	)

227 
	#USB_ENDPOINT_ADDR_IN
(
x
Ë(0x80 | (x))

	)

231 
	#USB_ENDPOINT_ATTR_CONTROL
 0x00

	)

232 
	#USB_ENDPOINT_ATTR_ISOCHRONOUS
 0x01

	)

233 
	#USB_ENDPOINT_ATTR_BULK
 0x02

	)

234 
	#USB_ENDPOINT_ATTR_INTERRUPT
 0x03

	)

235 
	#USB_ENDPOINT_ATTR_TYPE
 0x03

	)

237 
	#USB_ENDPOINT_ATTR_NOSYNC
 0x00

	)

238 
	#USB_ENDPOINT_ATTR_ASYNC
 0x04

	)

239 
	#USB_ENDPOINT_ATTR_ADAPTIVE
 0x08

	)

240 
	#USB_ENDPOINT_ATTR_SYNC
 0x0C

	)

241 
	#USB_ENDPOINT_ATTR_SYNCTYPE
 0x0C

	)

243 
	#USB_ENDPOINT_ATTR_DATA
 0x00

	)

244 
	#USB_ENDPOINT_ATTR_FEEDBACK
 0x10

	)

245 
	#USB_ENDPOINT_ATTR_IMPLICIT_FEEDBACK_DATA
 0x20

	)

246 
	#USB_ENDPOINT_ATTR_USAGETYPE
 0x30

	)

251 
	susb_°rög_des¸ùt‹
 {

252 
uöt8_t
 
	mbLígth
;

253 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

254 
uöt16_t
 
	mwD©a
[];

255 } 
__©åibuã__
((
∑cked
));

258 
	susb_iÁ˚_assoc_des¸ùt‹
 {

259 
uöt8_t
 
	mbLígth
;

260 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

261 
uöt8_t
 
	mbFú°I¡îÁ˚
;

262 
uöt8_t
 
	mbI¡îÁ˚Cou¡
;

263 
uöt8_t
 
	mbFun˘i⁄Cœss
;

264 
uöt8_t
 
	mbFun˘i⁄SubCœss
;

265 
uöt8_t
 
	mbFun˘i⁄PrŸocﬁ
;

266 
uöt8_t
 
	miFun˘i⁄
;

267 } 
__©åibuã__
((
∑cked
));

268 
	#USB_DT_INTERFACE_ASSOCIATION_SIZE
 \

269 (
usb_iÁ˚_assoc_des¸ùt‹
)

	)

271 
	eusb_œnguage_id
 {

272 
	mUSB_LANGID_ENGLISH_US
 = 0x409,

	@libopencm3/include/libopencm3/vf6xx/anadig.h

36 #i‚de‡
LIBOPENCM3_ANADIG_H


37 
	#LIBOPENCM3_ANADIG_H


	)

39 
	~<lib›ícm3/cm3/comm⁄.h
>

40 
	~<lib›ícm3/vf6xx/mem‹ym≠.h
>

44 
	#ANADIG_PLL3_CTRL
 
	`MMIO32
(
ANADIG_BASE
 + 0x010)

	)

45 
	#ANADIG_PLL7_CTRL
 
	`MMIO32
(
ANADIG_BASE
 + 0x020)

	)

46 
	#ANADIG_PLL2_CTRL
 
	`MMIO32
(
ANADIG_BASE
 + 0x030)

	)

47 
	#ANADIG_PLL2_SS
 
	`MMIO32
(
ANADIG_BASE
 + 0x040)

	)

48 
	#ANADIG_PLL2_NUM
 
	`MMIO32
(
ANADIG_BASE
 + 0x050)

	)

49 
	#ANADIG_PLL2_DENOM
 
	`MMIO32
(
ANADIG_BASE
 + 0x060)

	)

50 
	#ANADIG_PLL4_CTRL
 
	`MMIO32
(
ANADIG_BASE
 + 0x070)

	)

51 
	#ANADIG_PLL4_NUM
 
	`MMIO32
(
ANADIG_BASE
 + 0x080)

	)

52 
	#ANADIG_PLL4_DENOM
 
	`MMIO32
(
ANADIG_BASE
 + 0x090)

	)

53 
	#ANADIG_PLL6_CTRL
 
	`MMIO32
(
ANADIG_BASE
 + 0x0A0)

	)

54 
	#ANADIG_PLL6_NUM
 
	`MMIO32
(
ANADIG_BASE
 + 0x0B0)

	)

55 
	#ANADIG_PLL6_DENOM
 
	`MMIO32
(
ANADIG_BASE
 + 0x0C0)

	)

56 
	#ANADIG_PLL5_CTRL
 
	`MMIO32
(
ANADIG_BASE
 + 0x0E0)

	)

57 
	#ANADIG_PLL3_PFD
 
	`MMIO32
(
ANADIG_BASE
 + 0x0F0)

	)

58 
	#ANADIG_PLL2_PFD
 
	`MMIO32
(
ANADIG_BASE
 + 0x100)

	)

59 
	#ANADIG_REG_1P1
 
	`MMIO32
(
ANADIG_BASE
 + 0x110)

	)

60 
	#ANADIG_REG_3P0
 
	`MMIO32
(
ANADIG_BASE
 + 0x120)

	)

61 
	#ANADIG_REG_2P5
 
	`MMIO32
(
ANADIG_BASE
 + 0x130)

	)

62 
	#ANADIG_ANA_MISC0
 
	`MMIO32
(
ANADIG_BASE
 + 0x150)

	)

63 
	#ANADIG_ANA_MISC1
 
	`MMIO32
(
ANADIG_BASE
 + 0x160)

	)

64 
	#ANADIG_ANADIG_DIGPROG
 
	`MMIO32
(
ANADIG_BASE
 + 0x260)

	)

65 
	#ANADIG_PLL1_CTRL
 
	`MMIO32
(
ANADIG_BASE
 + 0x270)

	)

66 
	#ANADIG_PLL1_SS
 
	`MMIO32
(
ANADIG_BASE
 + 0x280)

	)

67 
	#ANADIG_PLL1_NUM
 
	`MMIO32
(
ANADIG_BASE
 + 0x290)

	)

68 
	#ANADIG_PLL1_DENOM
 
	`MMIO32
(
ANADIG_BASE
 + 0x2A0)

	)

69 
	#ANADIG_PLL1_PFD
 
	`MMIO32
(
ANADIG_BASE
 + 0x2B0)

	)

70 
	#ANADIG_PLL_LOCK
 
	`MMIO32
(
ANADIG_BASE
 + 0x2C0)

	)

75 
	#ANADIG_PLL3_CTRL_LOCK
 (1 << 31)

	)

76 
	#ANADIG_PLL3_CTRL_BYPASS
 (1 << 16)

	)

77 
	#ANADIG_PLL3_CTRL_BYPASS_CLK_SRC
 (1 << 14)

	)

78 
	#ANADIG_PLL3_CTRL_ENABLE
 (1 << 13)

	)

79 
	#ANADIG_PLL3_CTRL_POWER
 (1 << 12)

	)

80 
	#ANADIG_PLL3_CTRL_EN_USB_CLKS
 (1 << 6)

	)

81 
	#ANADIG_PLL3_CTRL_DIV_SELECT
 (1 << 1)

	)

84 
	#ANADIG_PLL7_CTRL_LOCK
 (1 << 31)

	)

85 
	#ANADIG_PLL7_CTRL_BYPASS
 (1 << 16)

	)

86 
	#ANADIG_PLL7_CTRL_BYPASS_CLK_SRC
 (1 << 14)

	)

87 
	#ANADIG_PLL7_CTRL_ENABLE
 (1 << 13)

	)

88 
	#ANADIG_PLL7_CTRL_POWER
 (1 << 12)

	)

89 
	#ANADIG_PLL7_CTRL_EN_USB_CLKS
 (1 << 6)

	)

90 
	#ANADIG_PLL7_CTRL_DIV_SELECT
 (1 << 1)

	)

93 
	#ANADIG_PLL2_CTRL_LOCK
 (1 << 31)

	)

94 
	#ANADIG_PLL2_CTRL_PFD_OFFSET_EN
 (1 << 18)

	)

95 
	#ANADIG_PLL2_CTRL_DITHER_ENABLE
 (1 << 17)

	)

96 
	#ANADIG_PLL2_CTRL_BYPASS
 (1 << 16)

	)

97 
	#ANADIG_PLL2_CTRL_BYPASS_CLK_SRC
 (1 << 14)

	)

98 
	#ANADIG_PLL2_CTRL_ENABLE
 (1 << 13)

	)

99 
	#ANADIG_PLL2_CTRL_POWERDOWN
 (1 << 12)

	)

100 
	#ANADIG_PLL2_CTRL_DIV_SELECT
 (1 << 1)

	)

103 
	#ANADIG_PLL2_SS_STOP_MASK
 (0xfff‡<< 16)

	)

104 
	#ANADIG_PLL2_SS_ENABLE
 (1 << 15)

	)

105 
	#ANADIG_PLL2_SS_STEP_MASK
 0x8fff

	)

108 
	#ANADIG_PLL2_NUM_MFN_MASK
 0x3fffffff

	)

111 
	#ANADIG_PLL2_DENOM_MFN_MASK
 0x3fffffff

	)

114 
	#ANADIG_PLL4_CTRL_LOCK
 (1 << 31)

	)

115 
	#ANADIG_PLL4_CTRL_PFD_OFFSET_EN
 (1 << 18)

	)

116 
	#ANADIG_PLL4_CTRL_DITHER_ENABLE
 (1 << 17)

	)

117 
	#ANADIG_PLL4_CTRL_BYPASS
 (1 << 16)

	)

118 
	#ANADIG_PLL4_CTRL_BYPASS_CLK_SRC
 (1 << 14)

	)

119 
	#ANADIG_PLL4_CTRL_ENABLE
 (1 << 13)

	)

120 
	#ANADIG_PLL4_CTRL_POWERDOWN
 (1 << 12)

	)

121 
	#ANADIG_PLL4_CTRL_DIV_SELECT_MASK
 (0x7f)

	)

124 
	#ANADIG_PLL4_NUM_MFN_MASK
 0x3fffffff

	)

127 
	#ANADIG_PLL4_DENOM_MFN_MASK
 0x3fffffff

	)

130 
	#ANADIG_PLL6_CTRL_LOCK
 (1 << 31)

	)

131 
	#ANADIG_PLL6_CTRL_PFD_OFFSET_EN
 (1 << 18)

	)

132 
	#ANADIG_PLL6_CTRL_DITHER_ENABLE
 (1 << 17)

	)

133 
	#ANADIG_PLL6_CTRL_BYPASS
 (1 << 16)

	)

134 
	#ANADIG_PLL6_CTRL_BYPASS_CLK_SRC
 (1 << 14)

	)

135 
	#ANADIG_PLL6_CTRL_ENABLE
 (1 << 13)

	)

136 
	#ANADIG_PLL6_CTRL_POWERDOWN
 (1 << 12)

	)

137 
	#ANADIG_PLL6_CTRL_DIV_SELECT_MASK
 (0x7f)

	)

140 
	#ANADIG_PLL6_NUM_MFN_MASK
 0x3fffffff

	)

143 
	#ANADIG_PLL6_DENOM_MFN_MASK
 0x3fffffff

	)

146 
	#ANADIG_PLL5_CTRL_LOCK
 (1 << 31)

	)

147 
	#ANADIG_PLL5_CTRL_PFD_OFFSET_EN
 (1 << 18)

	)

148 
	#ANADIG_PLL5_CTRL_DITHER_ENABLE
 (1 << 17)

	)

149 
	#ANADIG_PLL5_CTRL_BYPASS
 (1 << 16)

	)

150 
	#ANADIG_PLL5_CTRL_BYPASS_CLK_SRC
 (1 << 14)

	)

151 
	#ANADIG_PLL5_CTRL_ENABLE
 (1 << 13)

	)

152 
	#ANADIG_PLL5_CTRL_POWERDOWN
 (1 << 12)

	)

153 
	#ANADIG_PLL5_CTRL_DIV_SELECT_MASK
 (0x3)

	)

156 
	#ANADIG_PLL_PFD4_CLKGATE
 (1 << 31)

	)

157 
	#ANADIG_PLL_PFD4_STABLE
 (1 << 30)

	)

158 
	#ANADIG_PLL_PFD4_FRAC_SHIFT
 24

	)

159 
	#ANADIG_PLL_PFD4_FRAC_MASK
 (0x3‡<< 24)

	)

160 
	#ANADIG_PLL_PFD3_CLKGATE
 (1 << 23)

	)

161 
	#ANADIG_PLL_PFD3_STABLE
 (1 << 22)

	)

162 
	#ANADIG_PLL_PFD3_FRAC_SHIFT
 16

	)

163 
	#ANADIG_PLL_PFD3_FRAC_MASK
 (0x3‡<< 16)

	)

164 
	#ANADIG_PLL_PFD2_CLKGATE
 (1 << 15)

	)

165 
	#ANADIG_PLL_PFD2_STABLE
 (1 << 14)

	)

166 
	#ANADIG_PLL_PFD2_FRAC_SHIFT
 8

	)

167 
	#ANADIG_PLL_PFD2_FRAC_MASK
 (0x3‡<< 8)

	)

168 
	#ANADIG_PLL_PFD1_CLKGATE
 (1 << 7)

	)

169 
	#ANADIG_PLL_PFD1_STABLE
 (1 << 6)

	)

170 
	#ANADIG_PLL_PFD1_FRAC_SHIFT
 0

	)

171 
	#ANADIG_PLL_PFD1_FRAC_MASK
 (0x3‡<< 0)

	)

174 
	#ANADIG_ANA_MISC0_OSC_XTALOK_EN
 (1 << 17)

	)

175 
	#ANADIG_ANA_MISC0_OSC_XTALOK
 (1 << 16)

	)

176 
	#ANADIG_ANA_MISC0_CLK_24M_IRC_XTAL_SEL
 (1 << 13)

	)

177 
	#ANADIG_ANA_MISC0_STOP_MODE_CONFIG
 (1 << 12)

	)

178 
	#ANADIG_ANA_MISC0_REFTOP_VBGUP
 (1 << 7)

	)

179 
	#ANADIG_ANA_MISC0_REFTOP_SELBIASOFF
 (1 << 3)

	)

180 
	#ANADIG_ANA_MISC0_REFTOP_LOWPOWER
 (1 << 2)

	)

181 
	#ANADIG_ANA_MISC0_REFTOP_PWDVBGUP
 (1 << 1)

	)

182 
	#ANADIG_ANA_MISC0_REFTOP_PWD
 (1 << 0)

	)

185 
	#ANADIG_ANA_MISC1_IRQ_ANA_BO
 (1 << 30)

	)

186 
	#ANADIG_ANA_MISC1_IRQ_TEMPSENSE
 (1 << 29)

	)

187 
	#ANADIG_ANA_MISC1_LVDSCLK1_IBEN
 (1 << 12)

	)

188 
	#ANADIG_ANA_MISC1_LVDSCLK1_OBEN
 (1 << 10)

	)

191 
	#ANADIG_ANADIG_DIGPROG_MAJOR_MASK
 (0xfff‡<< 8)

	)

192 
	#ANADIG_ANADIG_DIGPROG_MINOR_MASK
 (0xf‡<< 0)

	)

195 
	#ANADIG_PLL1_CTRL_LOCK
 (1 << 31)

	)

196 
	#ANADIG_PLL1_CTRL_PFD_OFFSET_EN
 (1 << 18)

	)

197 
	#ANADIG_PLL1_CTRL_DITHER_ENABLE
 (1 << 17)

	)

198 
	#ANADIG_PLL1_CTRL_BYPASS
 (1 << 16)

	)

199 
	#ANADIG_PLL1_CTRL_BYPASS_CLK_SRC
 (1 << 14)

	)

200 
	#ANADIG_PLL1_CTRL_ENABLE
 (1 << 13)

	)

201 
	#ANADIG_PLL1_CTRL_POWERDOWN
 (1 << 12)

	)

202 
	#ANADIG_PLL1_CTRL_DIV_SELECT
 (1 << 1)

	)

205 
	#ANADIG_PLL1_SS_STOP_MASK
 (0xfff‡<< 16)

	)

206 
	#ANADIG_PLL1_SS_ENABLE
 (1 << 15)

	)

207 
	#ANADIG_PLL1_SS_STEP_MASK
 0x8fff

	)

210 
	#ANADIG_PLL1_NUM_MFN_MASK
 0x3fffffff

	)

213 
	#ANADIG_PLL1_DENOM_MFN_MASK
 0x3fffffff

	)

216 
	#ANADIG_PLL_LOCK_PLL1
 (1 << 6)

	)

217 
	#ANADIG_PLL_LOCK_PLL2
 (1 << 5)

	)

218 
	#ANADIG_PLL_LOCK_PLL4
 (1 << 4)

	)

219 
	#ANADIG_PLL_LOCK_PLL6
 (1 << 3)

	)

220 
	#ANADIG_PLL_LOCK_PLL5
 (1 << 2)

	)

221 
	#ANADIG_PLL_LOCK_PLL3
 (1 << 1)

	)

222 
	#ANADIG_PLL_LOCK_PLL7
 (1 << 0)

	)

	@libopencm3/include/libopencm3/vf6xx/ccm.h

35 #i‚de‡
LIBOPENCM3_CCM_H


36 
	#LIBOPENCM3_CCM_H


	)

38 
	~<lib›ícm3/cm3/comm⁄.h
>

39 
	~<lib›ícm3/vf6xx/mem‹ym≠.h
>

43 
	#CCM_CCR
 
	`MMIO32
(
CCM_BASE
 + 0x00)

	)

44 
	#CCM_CSR
 
	`MMIO32
(
CCM_BASE
 + 0x04)

	)

45 
	#CCM_CCSR
 
	`MMIO32
(
CCM_BASE
 + 0x08)

	)

46 
	#CCM_CACRR
 
	`MMIO32
(
CCM_BASE
 + 0x0C)

	)

47 
	#CCM_CSCMR1
 
	`MMIO32
(
CCM_BASE
 + 0x10)

	)

48 
	#CCM_CSCDR1
 
	`MMIO32
(
CCM_BASE
 + 0x14)

	)

49 
	#CCM_CSCDR2
 
	`MMIO32
(
CCM_BASE
 + 0x18)

	)

50 
	#CCM_CSCDR3
 
	`MMIO32
(
CCM_BASE
 + 0x1C)

	)

51 
	#CCM_CSCMR2
 
	`MMIO32
(
CCM_BASE
 + 0x20)

	)

53 
	#CCM_CTOR
 
	`MMIO32
(
CCM_BASE
 + 0x28)

	)

54 
	#CCM_CLPCR
 
	`MMIO32
(
CCM_BASE
 + 0x2C)

	)

55 
	#CCM_CISR
 
	`MMIO32
(
CCM_BASE
 + 0x30)

	)

56 
	#CCM_CIMR
 
	`MMIO32
(
CCM_BASE
 + 0x34)

	)

57 
	#CCM_CCOSR
 
	`MMIO32
(
CCM_BASE
 + 0x38)

	)

58 
	#CCM_CGPR
 
	`MMIO32
(
CCM_BASE
 + 0x3C)

	)

59 
	#CCM_CCGR
(
off£t
Ë
	`MMIO32
(
CCM_BASE
 + 0x40 + (off£t))

	)

60 
	#CCM_CMEOR
(
ovº
Ë
	`MMIO32
(
CCM_BASE
 + 0x70 + (4 * (ovº)))

	)

61 
	#CCM_CPPDSR
 
	`MMIO32
(
CCM_BASE
 + 0x88)

	)

63 
	#CCM_CCOWR
 
	`MMIO32
(
CCM_BASE
 + 0x8C)

	)

64 
	#CCM_CCPGR
(
pcgr
Ë
	`MMIO32
(
CCM_BASE
 + 0x90 + (4 * (pcgr)))

	)

69 
	#CCM_CCR_FIRC_EN
 (1 << 16)

	)

70 
	#CCM_CCR_FXOSC_EN
 (1 << 12)

	)

71 
	#CCM_CCR_OSCNT_MASK
 0xff

	)

74 
	#CCM_CSR_FXOSC_RDY
 (1 << 5)

	)

77 
	#CCM_CCSR_PLL3_PFDN4_EN
 (1 << 31)

	)

78 
	#CCM_CCSR_PLL3_PFDN3_EN
 (1 << 30)

	)

79 
	#CCM_CCSR_PLL3_PFDN2_EN
 (1 << 29)

	)

80 
	#CCM_CCSR_PLL3_PFDN1_EN
 (1 << 28)

	)

82 
	#CCM_CCSR_DAP_EN
 (1 << 24)

	)

85 
	#CCM_CCSR_PLL2_PFD_CLK_SEL_SHIFT
 19

	)

86 
	#CCM_CCSR_PLL2_PFD_CLK_SEL_MASK
 (0x7 << 19)

	)

87 
	#CCM_CCSR_PLL1_PFD_CLK_SEL_SHIFT
 16

	)

88 
	#CCM_CCSR_PLL1_PFD_CLK_SEL_MASK
 (0x7 << 16)

	)

90 
	#CCM_CCSR_PLL_PFD_CLK_SEL_MAIN
 0x0

	)

91 
	#CCM_CCSR_PLL_PFD_CLK_SEL_PFD1
 0x1

	)

92 
	#CCM_CCSR_PLL_PFD_CLK_SEL_PFD2
 0x2

	)

93 
	#CCM_CCSR_PLL_PFD_CLK_SEL_PFD3
 0x3

	)

94 
	#CCM_CCSR_PLL_PFD_CLK_SEL_PFD4
 0x4

	)

96 
	#CCM_CCSR_PLL2_PFDN4_EN
 (1 << 15)

	)

97 
	#CCM_CCSR_PLL2_PFDN3_EN
 (1 << 14)

	)

98 
	#CCM_CCSR_PLL2_PFDN2_EN
 (1 << 13)

	)

99 
	#CCM_CCSR_PLL2_PFDN1_EN
 (1 << 12)

	)

101 
	#CCM_CCSR_PLL1_PFDN4_EN
 (1 << 11)

	)

102 
	#CCM_CCSR_PLL1_PFDN3_EN
 (1 << 10)

	)

103 
	#CCM_CCSR_PLL1_PFDN2_EN
 (1 << 9)

	)

104 
	#CCM_CCSR_PLL1_PFDN1_EN
 (1 << 8)

	)

106 
	#CCM_CCSR_DDRC_CLK_SEL
 (1 << 7)

	)

107 
	#CCM_CCSR_FAST_CLK_SEL
 (1 << 6)

	)

108 
	#CCM_CCSR_SLOW_CLK_SEL
 (1 << 5)

	)

110 
	#CCM_CCSR_SYS_CLK_SEL_SHIFT
 0

	)

111 
	#CCM_CCSR_SYS_CLK_SEL_MASK
 0x7

	)

112 
	#CCM_CCSR_SYS_CLK_SEL_FAST
 0x0

	)

113 
	#CCM_CCSR_SYS_CLK_SEL_SLOW
 0x1

	)

114 
	#CCM_CCSR_SYS_CLK_SEL_PLL2_PFD
 0x2

	)

115 
	#CCM_CCSR_SYS_CLK_SEL_PLL2
 0x3

	)

116 
	#CCM_CCSR_SYS_CLK_SEL_PLL1_PFD
 0x4

	)

117 
	#CCM_CCSR_SYS_CLK_SEL_PLL3
 0x5

	)

120 
	#CCM_CACRR_FLEX_CLK_DIV_SHIFT
 22

	)

121 
	#CCM_CACRR_FLEX_CLK_DIV_MASK
 (0x7 << 22)

	)

122 
	#CCM_CACRR_PLL6_CLK_DIV
 (1 << 21)

	)

123 
	#CCM_CACRR_PLL3_CLK_DIV
 (1 << 20)

	)

124 
	#CCM_CACRR_PLL1_PFD_CLK_DIV_SHIFT
 16

	)

125 
	#CCM_CACRR_PLL1_PFD_CLK_DIV_MASK
 (0x3 << 16)

	)

126 
	#CCM_CACRR_IPG_CLK_DIV_SHIFT
 11

	)

127 
	#CCM_CACRR_IPG_CLK_DIV_MASK
 (0x3 << 11)

	)

128 
	#CCM_CACRR_PLL4_CLK_DIV_SHIFT
 6

	)

129 
	#CCM_CACRR_PLL4_CLK_DIV_MASK
 (0x7 << 6)

	)

130 
	#CCM_CACRR_BUS_CLK_DIV_SHIFT
 3

	)

131 
	#CCM_CACRR_BUS_CLK_DIV_MASK
 (0x7 << 3)

	)

132 
	#CCM_CACRR_ARM_CLK_DIV_SHIFT
 0

	)

133 
	#CCM_CACRR_ARM_CLK_DIV_MASK
 (0x7 << 0)

	)

137 
uöt32_t
 
ccm_c‹e_˛k
;

138 
uöt32_t
 
ccm_∂©f‹m_bus_˛k
;

139 
uöt32_t
 
ccm_ùg_bus_˛k
;

141 
	eccm_˛ock_g©e
 {

143 
	mCG0_FLEXCAN0
 = 0,

144 
	mCG1_RESERVED
,

145 
	mCG2_RESERVED
,

146 
	mCG3_RESERVED
,

147 
	mCG4_DMA_MUX0
,

148 
	mCG5_DMA_MUX1
,

149 
	mCG6_RESERVED
,

150 
	mCG7_UART0
,

151 
	mCG8_UART1
,

152 
	mCG9_UART2
,

153 
	mCG10_UART3
,

154 
	mCG11_RESERVED
,

155 
	mCG12_SPI0
,

156 
	mCG13_SPI1
,

157 
	mCG14_RESERVED
,

158 
	mCG15_SAI0
,

159 
	mCG16_SAI1
,

160 
	mCG17_SAI2
,

161 
	mCG18_SAI3
,

162 
	mCG19_CRC
,

163 
	mCG20_USBC0
,

164 
	mCG21_RESERVED
,

165 
	mCG22_PDB
,

166 
	mCG23_PIT
,

167 
	mCG24_FTM0
,

168 
	mCG25_FTM1
,

169 
	mCG26_RESERVED
,

170 
	mCG27_ADC0
,

171 
	mCG28_RESERVED
,

172 
	mCG29_TCON0
,

173 
	mCG30_WDOG_A5
,

174 
	mCG31_WDOG_M4
,

175 
	mCG32_LPTMR
,

176 
	mCG33_RESERVED
,

177 
	mCG34_RLE
,

178 
	mCG35_RESERVED
,

179 
	mCG36_QSPI0
,

180 
	mCG37_RESERVED
,

181 
	mCG38_RESERVED
,

182 
	mCG39_RESERVED
,

183 
	mCG40_IOMUX
,

184 
	mCG41_PORTA
,

185 
	mCG42_PORTB
,

186 
	mCG43_PORTC
,

187 
	mCG44_PORTD
,

188 
	mCG45_PORTE
,

189 
	mCG46_RESERVED
,

190 
	mCG47_RESERVED
,

191 
	mCG48_ANADIG
,

192 
	mCG49_RESERVED
,

193 
	mCG50_SCSCM
,

194 
	mCG51_RESERVED
,

195 
	mCG52_RESERVED
,

196 
	mCG53_RESERVED
,

197 
	mCG54_RESERVED
,

198 
	mCG55_RESERVED
,

199 
	mCG56_DCU0
,

200 
	mCG57_RESERVED
,

201 
	mCG58_RESERVED
,

202 
	mCG59_RESERVED
,

203 
	mCG60_RESERVED
,

204 
	mCG61_RESERVED
,

205 
	mCG62_RESERVED
,

206 
	mCG63_RESERVED
,

207 
	mCG64_ASRC
,

208 
	mCG65_SPDIF
,

209 
	mCG66_ESAI
,

210 
	mCG67_RESERVED
,

211 
	mCG68_RESERVED
,

212 
	mCG69_EWM
,

213 
	mCG70_I2C0
,

214 
	mCG71_I2C1
,

215 
	mCG72_RESERVED
,

216 
	mCG73_RESERVED
,

217 
	mCG74_WKUP
,

218 
	mCG75_CCM
,

219 
	mCG76_GPC
,

220 
	mCG77_VREG_DIG
,

221 
	mCG78_RESERVED
,

222 
	mCG79_CMU
,

223 
	mCG80_NOTUSED
,

224 
	mCG81_NOTUSED
,

225 
	mCG82_NOTUSED
,

226 
	mCG83_NOTUSED
,

227 
	mCG84_NOTUSED
,

228 
	mCG85_NOTUSED
,

229 
	mCG86_NOTUSED
,

230 
	mCG87_NOTUSED
,

231 
	mCG88_NOTUSED
,

232 
	mCG89_NOTUSED
,

233 
	mCG90_NOTUSED
,

234 
	mCG91_NOTUSED
,

235 
	mCG92_NOTUSED
,

236 
	mCG93_NOTUSED
,

237 
	mCG94_NOTUSED
,

238 
	mCG95_NOTUSED
,

241 
	mCG96_RESERVED
,

242 
	mCG97_DMA_MUX2
,

243 
	mCG98_DMA_MUX3
,

244 
	mCG99_RESERVED
,

245 
	mCG100_RESERVED
,

246 
	mCG101_OTP_CTRL
,

247 
	mCG102_RESERVED
,

248 
	mCG103_RESERVED
,

249 
	mCG104_RESERVED
,

250 
	mCG105_UART4
,

251 
	mCG106_UART5
,

252 
	mCG107_RESERVED
,

253 
	mCG108_SPI2
,

254 
	mCG109_SPI3
,

255 
	mCG110_DDRMC
,

256 
	mCG111_RESERVED
,

257 
	mCG112_RESERVED
,

258 
	mCG113_SDHC0
,

259 
	mCG114_SDHC1
,

260 
	mCG115_RESERVED
,

261 
	mCG116_USBC1
,

262 
	mCG117_RESERVED
,

263 
	mCG118_RESERVED
,

264 
	mCG119_RESERVED
,

265 
	mCG120_FTM2
,

266 
	mCG121_FTM3
,

267 
	mCG122_RESERVED
,

268 
	mCG123_ADC1
,

269 
	mCG124_RESERVED
,

270 
	mCG125_TCON1
,

271 
	mCG126_SEG_LCD
,

272 
	mCG127_RESERVED
,

273 
	mCG128_RESERVED
,

274 
	mCG129_RESERVED
,

275 
	mCG130_RESERVED
,

276 
	mCG131_RESERVED
,

277 
	mCG132_QSPI1
,

278 
	mCG133_RESERVED
,

279 
	mCG134_RESERVED
,

280 
	mCG135_VADC
,

281 
	mCG136_VDEC
,

282 
	mCG137_VIU3
,

283 
	mCG138_RESERVED
,

284 
	mCG139_RESERVED
,

285 
	mCG140_DAC0
,

286 
	mCG141_DAC1
,

287 
	mCG142_RESERVED
,

288 
	mCG143_NOTUSED
,

289 
	mCG144_ETH0_1588
,

290 
	mCG145_ETH1_1588
,

291 
	mCG146_RESERVED
,

292 
	mCG147_RESERVED
,

293 
	mCG148_FLEXCAN1
,

294 
	mCG149_RESERVED
,

295 
	mCG150_RESERVED
,

296 
	mCG151_RESERVED
,

297 
	mCG152_DCU1
,

298 
	mCG153_RESERVED
,

299 
	mCG154_RESERVED
,

300 
	mCG155_RESERVED
,

301 
	mCG156_RESERVED
,

302 
	mCG157_RESERVED
,

303 
	mCG158_RESERVED
,

304 
	mCG159_RESERVED
,

305 
	mCG160_NFC
,

306 
	mCG161_RESERVED
,

307 
	mCG162_RESERVED
,

308 
	mCG163_RESERVED
,

309 
	mCG164_RESERVED
,

310 
	mCG165_RESERVED
,

311 
	mCG166_I2C2
,

312 
	mCG167_I2C3
,

313 
	mCG168_ETH_L2
,

314 
	mCG169_RESERVED
,

315 
	mCG170_RESERVED
,

316 
	mCG171_RESERVED
,

317 
	mCG172_RESERVED
,

318 
	mCG173_RESERVED
,

319 
	mCG174_RESERVED
,

320 
	mCG175_RESERVED
,

321 
	mCG176_RESERVED
,

322 
	mCG177_RESERVED
,

323 
	mCG178_RESERVED
,

324 
	mCG179_RESERVED
,

325 
	mCG180_RESERVED
,

326 
	mCG181_RESERVED
,

327 
	mCG182_RESERVED
,

328 
	mCG183_RESERVED
,

329 
	mCG184_RESERVED
,

330 
	mCG185_RESERVED
,

331 
	mCG186_RESERVED
,

332 
	mCG187_RESERVED
,

333 
	mCG188_RESERVED
,

334 
	mCG189_RESERVED
,

335 
	mCG190_RESERVED
,

336 
	mCG191_RESERVED


341 
	~<lib›ícm3/cm3/comm⁄.h
>

343 
BEGIN_DECLS


345 
ccm_˛ock_g©e_íabÀ
(
ccm_˛ock_g©e
 
gr
);

346 
ccm_˛ock_g©e_dißbÀ
(
ccm_˛ock_g©e
 
gr
);

347 
ccm_ˇlcuœã_˛ocks
();

349 
	gEND_DECLS


	@libopencm3/include/libopencm3/vf6xx/doc-vf6xx.h

	@libopencm3/include/libopencm3/vf6xx/gpio.h

35 #i‚de‡
LIBOPENCM3_VF6XX_GPIO_H


36 
	#LIBOPENCM3_VF6XX_GPIO_H


	)

38 
	~<lib›ícm3/cm3/comm⁄.h
>

39 
	~<lib›ícm3/vf6xx/mem‹ym≠.h
>

48 
	#GPIO
(
p‹t
Ë(
GPIO_BASE
 + (0x040 * (p‹t)))

	)

49 
	#GPIO0
 (
GPIO_BASE
 + 0x000)

	)

50 
	#GPIO1
 (
GPIO_BASE
 + 0x040)

	)

51 
	#GPIO2
 (
GPIO_BASE
 + 0x080)

	)

52 
	#GPIO3
 (
GPIO_BASE
 + 0x0C0)

	)

53 
	#GPIO4
 (
GPIO_BASE
 + 0x100)

	)

55 
	#GPIO_OFFSET
(
gpio
Ë(0x1 << ((gpioË% 32))

	)

59 
	#GPIO_PDOR
(
gpio_ba£
Ë
	`MMIO32
((gpio_ba£Ë+ 0x00)

	)

60 
	#GPIO_PSOR
(
gpio_ba£
Ë
	`MMIO32
((gpio_ba£Ë+ 0x04)

	)

61 
	#GPIO_PCOR
(
gpio_ba£
Ë
	`MMIO32
((gpio_ba£Ë+ 0x08)

	)

62 
	#GPIO_PTOR
(
gpio_ba£
Ë
	`MMIO32
((gpio_ba£Ë+ 0x0C)

	)

63 
	#GPIO_PDIR
(
gpio_ba£
Ë
	`MMIO32
((gpio_ba£Ë+ 0x10)

	)

67 
	~<lib›ícm3/cm3/comm⁄.h
>

69 
BEGIN_DECLS


71 
gpio_£t
(
uöt32_t
 
gpio
);

72 
gpio_˛ór
(
uöt32_t
 
gpio
);

73 
boﬁ
 
gpio_gë
(
uöt32_t
 
gpio
);

74 
gpio_toggÀ
(
uöt32_t
 
gpio
);

75 
uöt32_t
 
gpio_p‹t_ªad
(uöt32_à
gpi›‹t
);

76 
gpio_p‹t_wrôe
(
uöt32_t
 
gpi›‹t
, uöt32_à
d©a
);

78 
	gEND_DECLS


	@libopencm3/include/libopencm3/vf6xx/iomuxc.h

35 #i‚de‡
LIBOPENCM3_VF6XX_IOMUXC_H


36 
	#LIBOPENCM3_VF6XX_IOMUXC_H


	)

38 
	~<lib›ícm3/cm3/comm⁄.h
>

39 
	~<lib›ícm3/vf6xx/mem‹ym≠.h
>

48 
	#IOMUXC
(
∑d
Ë
	`MMIO32
(
IOMUXC_BASE
 + (0x4 * (∑d)))

	)

50 
	#IOMUXC_PAD
(
mode
, 
•ìd
, 
d£
, 
pus
, 
Êags
) \

51 ((
IOMUXC_
##
mode
Ë<< 
IOMUXC_MUX_MODE_SHIFT
 | \

52 (
IOMUXC_
##
•ìd
Ë<< 
IOMUXC_SPEED_SHIFT
 | \

53 (
IOMUXC_
##
d£
Ë<< 
IOMUXC_DSE_SHIFT
 | \

54 (
IOMUXC_
##
pus
Ë<< 
IOMUXC_PUS_SHIFT
 | \

55 (
Êags
))

	)

60 
	#IOMUXC_MUX_MODE_SHIFT
 20

	)

61 
	#IOMUXC_MUX_MODE_MASK
 (0x7 << 20)

	)

62 
	#IOMUXC_MUX_MODE_ALT0
 0x0

	)

63 
	#IOMUXC_MUX_MODE_ALT1
 0x1

	)

64 
	#IOMUXC_MUX_MODE_ALT2
 0x2

	)

65 
	#IOMUXC_MUX_MODE_ALT3
 0x3

	)

66 
	#IOMUXC_MUX_MODE_ALT4
 0x4

	)

67 
	#IOMUXC_MUX_MODE_ALT5
 0x5

	)

68 
	#IOMUXC_MUX_MODE_ALT6
 0x6

	)

69 
	#IOMUXC_MUX_MODE_ALT7
 0x7

	)

70 
	#IOMUXC_SPEED_SHIFT
 12

	)

71 
	#IOMUXC_SPEED_MASK
 (0x3 << 12)

	)

72 
	#IOMUXC_SPEED_LOW
 0x0

	)

73 
	#IOMUXC_SPEED_MEDIUM
 0x1

	)

74 
	#IOMUXC_SPEED_HIGH
 0x3

	)

75 
	#IOMUXC_SRE
 (0x1 << 11)

	)

76 
	#IOMUXC_ODE
 (0x1 << 10)

	)

77 
	#IOMUXC_HYS
 (0x1 << 9)

	)

78 
	#IOMUXC_DSE_SHIFT
 6

	)

79 
	#IOMUXC_DSE_MASK
 (0x7 << 6)

	)

80 
	#IOMUXC_DSE_OFF
 0x0

	)

81 
	#IOMUXC_DSE_150OHM
 0x1

	)

82 
	#IOMUXC_DSE_75OHM
 0x2

	)

83 
	#IOMUXC_DSE_50OHM
 0x3

	)

84 
	#IOMUXC_DSE_37OHM
 0x4

	)

85 
	#IOMUXC_DSE_30OHM
 0x5

	)

86 
	#IOMUXC_DSE_25OHM
 0x6

	)

87 
	#IOMUXC_DSE_20OHM
 0x7

	)

88 
	#IOMUXC_PUS_SHIFT
 4

	)

89 
	#IOMUXC_PUS_MASK
 (0x3 << 4)

	)

90 
	#IOMUXC_PUS_PD_100KOHM
 0x0

	)

91 
	#IOMUXC_PUS_PU_47KOHM
 0x1

	)

92 
	#IOMUXC_PUS_PU_100KOHM
 0x2

	)

93 
	#IOMUXC_PUS_PU_22KOHM
 0x3

	)

94 
	#IOMUXC_PKE
 (0x1 << 3)

	)

95 
	#IOMUXC_PUE
 (0x1 << 2)

	)

96 
	#IOMUXC_OBE
 (0x1 << 1)

	)

97 
	#IOMUXC_IBE
 (0x1 << 0)

	)

107 
	evf6xx_∑d
 {

108 
	mPTA6
,

109 
	mPTA8
,

110 
	mPTA9
,

111 
	mPTA10
,

112 
	mPTA11
,

113 
	mPTA12
,

114 
	mPTA16
,

115 
	mPTA17
,

116 
	mPTA18
,

117 
	mPTA19
,

118 
	mPTA20
,

119 
	mPTA21
,

120 
	mPTA22
,

121 
	mPTA23
,

122 
	mPTA24
,

123 
	mPTA25
,

124 
	mPTA26
,

125 
	mPTA27
,

126 
	mPTA28
,

127 
	mPTA29
,

128 
	mPTA30
,

129 
	mPTA31
,

130 
	mPTB0
,

131 
	mPTB1
,

132 
	mPTB2
,

133 
	mPTB3
,

134 
	mPTB4
,

135 
	mPTB5
,

136 
	mPTB6
,

137 
	mPTB7
,

138 
	mPTB8
,

139 
	mPTB9
,

140 
	mPTB10
,

141 
	mPTB11
,

142 
	mPTB12
,

143 
	mPTB13
,

144 
	mPTB14
,

145 
	mPTB15
,

146 
	mPTB16
,

147 
	mPTB17
,

148 
	mPTB18
,

149 
	mPTB19
,

150 
	mPTB20
,

151 
	mPTB21
,

152 
	mPTB22
,

153 
	mPTC0
,

154 
	mPTC1
,

155 
	mPTC2
,

156 
	mPTC3
,

157 
	mPTC4
,

158 
	mPTC5
,

159 
	mPTC6
,

160 
	mPTC7
,

161 
	mPTC8
,

162 
	mPTC9
,

163 
	mPTC10
,

164 
	mPTC11
,

165 
	mPTC12
,

166 
	mPTC13
,

167 
	mPTC14
,

168 
	mPTC15
,

169 
	mPTC16
,

170 
	mPTC17
,

171 
	mPTD31
,

172 
	mPTD30
,

173 
	mPTD29
,

174 
	mPTD28
,

175 
	mPTD27
,

176 
	mPTD26
,

177 
	mPTD25
,

178 
	mPTD24
,

179 
	mPTD23
,

180 
	mPTD22
,

181 
	mPTD21
,

182 
	mPTD20
,

183 
	mPTD19
,

184 
	mPTD18
,

185 
	mPTD17
,

186 
	mPTD16
,

187 
	mPTD0
,

188 
	mPTD1
,

189 
	mPTD2
,

190 
	mPTD3
,

191 
	mPTD4
,

192 
	mPTD5
,

193 
	mPTD6
,

194 
	mPTD7
,

195 
	mPTD8
,

196 
	mPTD9
,

197 
	mPTD10
,

198 
	mPTD11
,

199 
	mPTD12
,

200 
	mPTD13
,

201 
	mPTB23
,

202 
	mPTB24
,

203 
	mPTB25
,

204 
	mPTB26
,

205 
	mPTB27
,

206 
	mPTB28
,

207 
	mPTC26
,

208 
	mPTC27
,

209 
	mPTC28
,

210 
	mPTC29
,

211 
	mPTC30
,

212 
	mPTC31
,

213 
	mPTE0
,

214 
	mPTE1
,

215 
	mPTE2
,

216 
	mPTE3
,

217 
	mPTE4
,

218 
	mPTE5
,

219 
	mPTE6
,

220 
	mPTE7
,

221 
	mPTE8
,

222 
	mPTE9
,

223 
	mPTE10
,

224 
	mPTE11
,

225 
	mPTE12
,

226 
	mPTE13
,

227 
	mPTE14
,

228 
	mPTE15
,

229 
	mPTE16
,

230 
	mPTE17
,

231 
	mPTE18
,

232 
	mPTE19
,

233 
	mPTE20
,

234 
	mPTE21
,

235 
	mPTE22
,

236 
	mPTE23
,

237 
	mPTE24
,

238 
	mPTE25
,

239 
	mPTE26
,

240 
	mPTE27
,

241 
	mPTE28
,

242 
	mPTA7
,

248 
	~<lib›ícm3/cm3/comm⁄.h
>

250 
BEGIN_DECLS


252 
iomuxc_mux
(
vf6xx_∑d
 
∑d
, 
uöt32_t
 
muxc
);

254 
	gEND_DECLS


	@libopencm3/include/libopencm3/vf6xx/memorymap.h

20 #i‚de‡
LIBOPENCM3_MEMORYMAP_H


21 
	#LIBOPENCM3_MEMORYMAP_H


	)

23 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

28 
	#PERIPH_BASE
 (0x40000000U)

	)

29 
	#PERIPH_BASE_AIPS0
 (
PERIPH_BASE
 + 0x00000)

	)

30 
	#PERIPH_BASE_AIPS1
 (
PERIPH_BASE
 + 0x80000)

	)

35 
	#MSCM_BASE
 (
PERIPH_BASE_AIPS0
 + 0x01000)

	)

37 
	#SEMA4_BASE
 (
PERIPH_BASE_AIPS0
 + 0x1D000)

	)

39 
	#UART0_BASE
 (
PERIPH_BASE_AIPS0
 + 0x27000)

	)

40 
	#UART1_BASE
 (
PERIPH_BASE_AIPS0
 + 0x28000)

	)

41 
	#UART2_BASE
 (
PERIPH_BASE_AIPS0
 + 0x29000)

	)

42 
	#UART3_BASE
 (
PERIPH_BASE_AIPS0
 + 0x2A000)

	)

44 
	#SPI0_BASE
 (
PERIPH_BASE_AIPS0
 + 0x2C000)

	)

45 
	#SPI1_BASE
 (
PERIPH_BASE_AIPS0
 + 0x2D000)

	)

47 
	#IOMUXC_BASE
 (
PERIPH_BASE_AIPS0
 + 0x48000)

	)

48 
	#PORTA_MUX_BASE
 (
PERIPH_BASE_AIPS0
 + 0x49000)

	)

49 
	#PORTB_MUX_BASE
 (
PERIPH_BASE_AIPS0
 + 0x4A000)

	)

50 
	#PORTC_MUX_BASE
 (
PERIPH_BASE_AIPS0
 + 0x4B000)

	)

51 
	#PORTD_MUX_BASE
 (
PERIPH_BASE_AIPS0
 + 0x4C000)

	)

52 
	#PORTE_MUX_BASE
 (
PERIPH_BASE_AIPS0
 + 0x4D000)

	)

54 
	#ANADIG_BASE
 (
PERIPH_BASE_AIPS0
 + 0x50000)

	)

56 
	#CCM_BASE
 (
PERIPH_BASE_AIPS0
 + 0x6B000)

	)

59 
	#UART4_BASE
 (
PERIPH_BASE_AIPS1
 + 0x29000)

	)

60 
	#UART5_BASE
 (
PERIPH_BASE_AIPS1
 + 0x2A000)

	)

63 
	#GPIO_BASE
 (
PERIPH_BASE
 + 0xff000)

	)

	@libopencm3/include/libopencm3/vf6xx/nvic.h

6 #i‚de‡
LIBOPENCM3_VF6XX_NVIC_H


7 
	#LIBOPENCM3_VF6XX_NVIC_H


	)

9 
	~<lib›ícm3/cm3/nvic.h
>

16 
	#NVIC_CPU2CPU_INT0_IRQ
 0

	)

17 
	#NVIC_CPU2CPU_INT1_IRQ
 1

	)

18 
	#NVIC_CPU2CPU_INT2_IRQ
 2

	)

19 
	#NVIC_CPU2CPU_INT3_IRQ
 3

	)

20 
	#NVIC_DIRECTED0_SEMA4_IRQ
 4

	)

21 
	#NVIC_DIRECTED1_MCM_IRQ
 5

	)

22 
	#NVIC_DIRECTED2_IRQ
 6

	)

23 
	#NVIC_DIRECTED3_IRQ
 7

	)

24 
	#NVIC_DMA0_IRQ
 8

	)

25 
	#NVIC_DMA0_ERROR_IRQ
 9

	)

26 
	#NVIC_DMA1_IRQ
 10

	)

27 
	#NVIC_DMA1_ERROR_IRQ
 11

	)

28 
	#NVIC_RESERVED0_IRQ
 12

	)

29 
	#NVIC_RESERVED1_IRQ
 13

	)

30 
	#NVIC_MSCM_ECC0_IRQ
 14

	)

31 
	#NVIC_MSCM_ECC1_IRQ
 15

	)

32 
	#NVIC_CSU_ALARM_IRQ
 16

	)

33 
	#NVIC_RESERVED2_IRQ
 17

	)

34 
	#NVIC_MSCM_ACTZS_IRQ
 18

	)

35 
	#NVIC_RESERVED3_IRQ
 19

	)

36 
	#NVIC_WDOG_A5_IRQ
 20

	)

37 
	#NVIC_WDOG_M4_IRQ
 21

	)

38 
	#NVIC_WDOG_SNVS_IRQ
 22

	)

39 
	#NVIC_CP1_BOOT_FAIL_IRQ
 23

	)

40 
	#NVIC_QSPI0_IRQ
 24

	)

41 
	#NVIC_QSPI1_IRQ
 25

	)

42 
	#NVIC_DDRMC_IRQ
 26

	)

43 
	#NVIC_SDHC0_IRQ
 27

	)

44 
	#NVIC_SDHC1_IRQ
 28

	)

45 
	#NVIC_RESERVED4_IRQ
 29

	)

46 
	#NVIC_DCU0_IRQ
 30

	)

47 
	#NVIC_DCU1_IRQ
 31

	)

48 
	#NVIC_VIU_IRQ
 32

	)

49 
	#NVIC_RESERVED5_IRQ
 33

	)

50 
	#NVIC_RESERVED6_IRQ
 34

	)

51 
	#NVIC_RLE_IRQ
 35

	)

52 
	#NVIC_SEG_LCD_IRQ
 36

	)

53 
	#NVIC_RESERVED7_IRQ
 37

	)

54 
	#NVIC_RESERVED8_IRQ
 38

	)

55 
	#NVIC_PIT_IRQ
 39

	)

56 
	#NVIC_LPTIMER0_IRQ
 40

	)

57 
	#NVIC_RESERVED9_IRQ
 41

	)

58 
	#NVIC_FLEXTIMER0_IRQ
 42

	)

59 
	#NVIC_FLEXTIMER1_IRQ
 43

	)

60 
	#NVIC_FLEXTIMER2_IRQ
 44

	)

61 
	#NVIC_FLEXTIMER3_IRQ
 45

	)

62 
	#NVIC_RESERVED10_IRQ
 46

	)

63 
	#NVIC_RESERVED11_IRQ
 47

	)

64 
	#NVIC_RESERVED12_IRQ
 48

	)

65 
	#NVIC_RESERVED13_IRQ
 49

	)

66 
	#NVIC_USBPHY0_IRQ
 50

	)

67 
	#NVIC_USBPHY1_IRQ
 51

	)

68 
	#NVIC_RESERVED14_IRQ
 52

	)

69 
	#NVIC_ADC0_IRQ
 53

	)

70 
	#NVIC_ADC1_IRQ
 54

	)

71 
	#NVIC_DAC0_IRQ
 55

	)

72 
	#NVIC_DAC1_IRQ
 56

	)

73 
	#NVIC_RESERVED15_IRQ
 57

	)

74 
	#NVIC_FLEXCAN0_IRQ
 58

	)

75 
	#NVIC_FLEXCAN1_IRQ
 59

	)

76 
	#NVIC_RESERVED16_IRQ
 60

	)

77 
	#NVIC_UART0_IRQ
 61

	)

78 
	#NVIC_UART1_IRQ
 62

	)

79 
	#NVIC_UART2_IRQ
 63

	)

80 
	#NVIC_UART3_IRQ
 64

	)

81 
	#NVIC_UART4_IRQ
 65

	)

82 
	#NVIC_UART5_IRQ
 66

	)

83 
	#NVIC_SPI0_IRQ
 67

	)

84 
	#NVIC_SPI1_IRQ
 68

	)

85 
	#NVIC_SPI2_IRQ
 69

	)

86 
	#NVIC_SPI3_IRQ
 70

	)

87 
	#NVIC_I2C0_IRQ
 71

	)

88 
	#NVIC_I2C1_IRQ
 72

	)

89 
	#NVIC_I2C2_IRQ
 73

	)

90 
	#NVIC_I2C3_IRQ
 74

	)

91 
	#NVIC_USBC0_IRQ
 75

	)

92 
	#NVIC_USBC1_IRQ
 76

	)

93 
	#NVIC_RESERVED17_IRQ
 77

	)

94 
	#NVIC_ENET0_IRQ
 78

	)

95 
	#NVIC_ENET1_IRQ
 79

	)

96 
	#NVIC_ENET0_1588_IRQ
 80

	)

97 
	#NVIC_ENET1_1588_IRQ
 81

	)

98 
	#NVIC_ENET_SWITCH_IRQ
 82

	)

99 
	#NVIC_NFC_IRQ
 83

	)

100 
	#NVIC_SAI0_IRQ
 84

	)

101 
	#NVIC_SAI1_IRQ
 85

	)

102 
	#NVIC_SAI2_IRQ
 86

	)

103 
	#NVIC_SAI3_IRQ
 87

	)

104 
	#NVIC_ESAI_BIFIFO_IRQ
 88

	)

105 
	#NVIC_SPDIF_IRQ
 89

	)

106 
	#NVIC_ASRC_IRQ
 90

	)

107 
	#NVIC_VREG_IRQ
 91

	)

108 
	#NVIC_WKPU0_IRQ
 92

	)

109 
	#NVIC_RESERVED18_IRQ
 93

	)

110 
	#NVIC_CCM_FXOSC_IRQ
 94

	)

111 
	#NVIC_CCM_IRQ
 95

	)

112 
	#NVIC_SRC_IRQ
 96

	)

113 
	#NVIC_PDB_IRQ
 97

	)

114 
	#NVIC_EWM_IRQ
 98

	)

115 
	#NVIC_RESERVED19_IRQ
 99

	)

116 
	#NVIC_RESERVED20_IRQ
 100

	)

117 
	#NVIC_RESERVED21_IRQ
 101

	)

118 
	#NVIC_RESERVED22_IRQ
 102

	)

119 
	#NVIC_RESERVED23_IRQ
 103

	)

120 
	#NVIC_RESERVED24_IRQ
 104

	)

121 
	#NVIC_RESERVED25_IRQ
 105

	)

122 
	#NVIC_RESERVED26_IRQ
 106

	)

123 
	#NVIC_GPIO0_IRQ
 107

	)

124 
	#NVIC_GPIO1_IRQ
 108

	)

125 
	#NVIC_GPIO2_IRQ
 109

	)

126 
	#NVIC_GPIO3_IRQ
 110

	)

127 
	#NVIC_GPIO4_IRQ
 111

	)

129 
	#NVIC_IRQ_COUNT
 112

	)

138 
BEGIN_DECLS


140 
˝u2˝u_öt0_i§
();

141 
˝u2˝u_öt1_i§
();

142 
˝u2˝u_öt2_i§
();

143 
˝u2˝u_öt3_i§
();

144 
dúe˘ed0_£ma4_i§
();

145 
dúe˘ed1_mcm_i§
();

146 
dúe˘ed2_i§
();

147 
dúe˘ed3_i§
();

148 
dma0_i§
();

149 
dma0_îr‹_i§
();

150 
dma1_i§
();

151 
dma1_îr‹_i§
();

152 
ª£rved0_i§
();

153 
ª£rved1_i§
();

154 
mscm_ecc0_i§
();

155 
mscm_ecc1_i§
();

156 
csu_Æ¨m_i§
();

157 
ª£rved2_i§
();

158 
mscm_a˘zs_i§
();

159 
ª£rved3_i§
();

160 
wdog_a5_i§
();

161 
wdog_m4_i§
();

162 
wdog_¢vs_i§
();

163 
˝1_boŸ_Áû_i§
();

164 
q•i0_i§
();

165 
q•i1_i§
();

166 
ddrmc_i§
();

167 
sdhc0_i§
();

168 
sdhc1_i§
();

169 
ª£rved4_i§
();

170 
dcu0_i§
();

171 
dcu1_i§
();

172 
viu_i§
();

173 
ª£rved5_i§
();

174 
ª£rved6_i§
();

175 
æe_i§
();

176 
£g_lcd_i§
();

177 
ª£rved7_i§
();

178 
ª£rved8_i§
();

179 
pô_i§
();

180 
Õtimî0_i§
();

181 
ª£rved9_i§
();

182 
Êextimî0_i§
();

183 
Êextimî1_i§
();

184 
Êextimî2_i§
();

185 
Êextimî3_i§
();

186 
ª£rved10_i§
();

187 
ª£rved11_i§
();

188 
ª£rved12_i§
();

189 
ª£rved13_i§
();

190 
usbphy0_i§
();

191 
usbphy1_i§
();

192 
ª£rved14_i§
();

193 
adc0_i§
();

194 
adc1_i§
();

195 
dac0_i§
();

196 
dac1_i§
();

197 
ª£rved15_i§
();

198 
Êexˇn0_i§
();

199 
Êexˇn1_i§
();

200 
ª£rved16_i§
();

201 
u¨t0_i§
();

202 
u¨t1_i§
();

203 
u¨t2_i§
();

204 
u¨t3_i§
();

205 
u¨t4_i§
();

206 
u¨t5_i§
();

207 
•i0_i§
();

208 
•i1_i§
();

209 
•i2_i§
();

210 
•i3_i§
();

211 
i2c0_i§
();

212 
i2c1_i§
();

213 
i2c2_i§
();

214 
i2c3_i§
();

215 
usbc0_i§
();

216 
usbc1_i§
();

217 
ª£rved17_i§
();

218 
íë0_i§
();

219 
íë1_i§
();

220 
íë0_1588_i§
();

221 
íë1_1588_i§
();

222 
íë_swôch_i§
();

223 
nfc_i§
();

224 
ßi0_i§
();

225 
ßi1_i§
();

226 
ßi2_i§
();

227 
ßi3_i§
();

228 
eßi_bififo_i§
();

229 
•dif_i§
();

230 
a§c_i§
();

231 
vªg_i§
();

232 
wkpu0_i§
();

233 
ª£rved18_i§
();

234 
ccm_fxosc_i§
();

235 
ccm_i§
();

236 
§c_i§
();

237 
pdb_i§
();

238 
ewm_i§
();

239 
ª£rved19_i§
();

240 
ª£rved20_i§
();

241 
ª£rved21_i§
();

242 
ª£rved22_i§
();

243 
ª£rved23_i§
();

244 
ª£rved24_i§
();

245 
ª£rved25_i§
();

246 
ª£rved26_i§
();

247 
gpio0_i§
();

248 
gpio1_i§
();

249 
gpio2_i§
();

250 
gpio3_i§
();

251 
gpio4_i§
();

253 
	gEND_DECLS


	@libopencm3/include/libopencm3/vf6xx/uart.h

35 #i‚de‡
LIBOPENCM3_VF6XX_UART_H


36 
	#LIBOPENCM3_VF6XX_UART_H


	)

38 
	~<lib›ícm3/cm3/comm⁄.h
>

39 
	~<lib›ícm3/vf6xx/mem‹ym≠.h
>

48 
	#UART0
 
UART0_BASE


	)

49 
	#UART1
 
UART1_BASE


	)

50 
	#UART2
 
UART2_BASE


	)

51 
	#UART3
 
UART3_BASE


	)

52 
	#UART4
 
UART4_BASE


	)

53 
	#UART5
 
UART5_BASE


	)

57 
	#UART_BDH
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x00)

	)

58 
	#UART_BDL
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x01)

	)

59 
	#UART_C1
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x02)

	)

60 
	#UART_C2
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x03)

	)

61 
	#UART_S1
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x04)

	)

62 
	#UART_S2
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x05)

	)

63 
	#UART_C3
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x06)

	)

64 
	#UART_D
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x07)

	)

65 
	#UART_MA1
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x08)

	)

66 
	#UART_MA2
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x09)

	)

67 
	#UART_C4
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x0A)

	)

68 
	#UART_C5
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x0B)

	)

69 
	#UART_ED
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x0C)

	)

70 
	#UART_MODEM
(
u¨t_ba£
Ë
	`MMIO8
((u¨t_ba£Ë+ 0x0D)

	)

76 
	#UART_BDH_LBKDIE
 (1 << 7)

	)

77 
	#UART_BDH_RXEDGIE
 (1 << 6)

	)

78 
	#UART_BDH_SBR_MASK
 0x1f

	)

81 
	#UART_BDL_SBR_MASK
 0xff

	)

84 
	#UART_C1_LOOPS
 (1 << 7)

	)

85 
	#UART_C1_RSRC
 (1 << 5)

	)

86 
	#UART_C1_M
 (1 << 4)

	)

87 
	#UART_C1_WAKE
 (1 << 3)

	)

88 
	#UART_C1_ILT
 (1 << 2)

	)

89 
	#UART_C1_PE
 (1 << 1)

	)

90 
	#UART_C1_PT
 (1 << 0)

	)

93 
	#UART_C2_TIE
 (1 << 7)

	)

94 
	#UART_C2_TCIE
 (1 << 6)

	)

95 
	#UART_C2_RIE
 (1 << 5)

	)

96 
	#UART_C2_ILIE
 (1 << 4)

	)

97 
	#UART_C2_TE
 (1 << 3)

	)

98 
	#UART_C2_RE
 (1 << 2)

	)

99 
	#UART_C2_RWU
 (1 << 1)

	)

100 
	#UART_C2_SBK
 (1 << 0)

	)

103 
	#UART_S1_TDRE
 (1 << 7)

	)

104 
	#UART_S1_TC
 (1 << 6)

	)

105 
	#UART_S1_RDRF
 (1 << 5)

	)

106 
	#UART_S1_IDLE
 (1 << 4)

	)

107 
	#UART_S1_OR
 (1 << 3)

	)

108 
	#UART_S1_NF
 (1 << 2)

	)

109 
	#UART_S1_FE
 (1 << 1)

	)

110 
	#UART_S1_PF
 (1 << 0)

	)

113 
	#UART_S2_LBKDIF
 (1 << 7)

	)

114 
	#UART_S2_RXEDGIF
 (1 << 6)

	)

115 
	#UART_S2_MSBF
 (1 << 5)

	)

116 
	#UART_S2_RXINV
 (1 << 4)

	)

117 
	#UART_S2_RWUID
 (1 << 3)

	)

118 
	#UART_S2_BRK13
 (1 << 2)

	)

119 
	#UART_S2_LBKDE
 (1 << 1)

	)

120 
	#UART_S2_RAF
 (1 << 0)

	)

123 
	#UART_C3_R8
 (1 << 7)

	)

124 
	#UART_C3_T8
 (1 << 6)

	)

125 
	#UART_C3_TXDIR
 (1 << 5)

	)

126 
	#UART_C3_TXINV
 (1 << 4)

	)

127 
	#UART_C3_ORIE
 (1 << 3)

	)

128 
	#UART_C3_NEIE
 (1 << 2)

	)

129 
	#UART_C3_FEIE
 (1 << 1)

	)

130 
	#UART_C3_PEIE
 (1 << 0)

	)

133 
	#UART_MODEM_RXRTSE
 (1 << 3)

	)

134 
	#UART_MODEM_TXRTSPOL
 (1 << 2)

	)

135 
	#UART_MODEM_TXRTSE
 (1 << 1)

	)

136 
	#UART_MODEM_TXCTSE
 (1 << 0)

	)

143 
	#UART_PARITY_NONE
 0x00

	)

144 
	#UART_PARITY_EVEN
 
UART_C1_PE


	)

145 
	#UART_PARITY_ODD
 (
UART_C1_PE
 | 
UART_C1_PT
)

	)

147 
	#UART_PARITY_MASK
 0x3

	)

155 
	#UART_FLOWCONTROL_NONE
 0x00

	)

156 
	#UART_FLOWCONTROL_RTS
 
UART_MODEM_RXRTSE


	)

157 
	#UART_FLOWCONTROL_CTS
 
UART_MODEM_TXCTSE


	)

158 
	#UART_FLOWCONTROL_RTS_CTS
 (
UART_MODEM_RXRTSE
 | 
UART_MODEM_TXCTSE
)

	)

160 
	#UART_FLOWCONTROL_MASK
 (
UART_MODEM_RXRTSE
 | 
UART_MODEM_TXCTSE
)

	)

164 
	~<lib›ícm3/cm3/comm⁄.h
>

166 
BEGIN_DECLS


168 
u¨t_íabÀ
(
uöt32_t
 
u¨t
);

169 
u¨t_dißbÀ
(
uöt32_t
 
u¨t
);

170 
u¨t_£t_baudøã
(
uöt32_t
 
u¨t
, uöt32_à
baud
);

171 
u¨t_£t_∑rôy
(
uöt32_t
 
u¨t
, 
uöt8_t
 
∑rôy
);

172 
u¨t_£t_Êow_c⁄åﬁ
(
uöt32_t
 
u¨t
, 
uöt8_t
 
Êowc⁄åﬁ
);

173 
u¨t_£nd
(
uöt32_t
 
u¨t
, 
uöt8_t
 
d©a
);

174 
u¨t_£nd_blockög
(
uöt32_t
 
ußπ
, 
uöt8_t
 
d©a
);

175 
u¨t_waô_£nd_ªady
(
uöt32_t
 
u¨t
);

176 
uöt8_t
 
u¨t_ªcv
(
uöt32_t
 
u¨t
);

177 
uöt8_t
 
u¨t_ªcv_blockög
(
uöt32_t
 
u¨t
);

178 
u¨t_waô_ªcv_ªady
(
uöt32_t
 
u¨t
);

180 
	gEND_DECLS


	@libopencm3/include/libopencmsis/core_cm3.h

10 #i‚de‡
OPENCMSIS_CORECM3_H


11 
	#OPENCMSIS_CORECM3_H


	)

13 
	~<lib›ícm3/cm3/comm⁄.h
>

14 
	~<lib›ícm3/cm3/c‹ãx.h
>

15 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

16 
	~<lib›ícm3/cm3/sy°ick.h
>

17 
	~<lib›ícm3/cm3/nvic.h
>

18 
	~<lib›ícm3/cm3/scb.h
>

21 
	#__INLINE
 
ölöe


	)

23 
	#__STATIC_INLINE
 
ölöe


	)

27 
	#__IO
 vﬁ©ûe

	)

28 
	#__O
 vﬁ©ûe

	)

29 
	#__I
 vﬁ©ûe

	)

35 
	#SCB_SCR_SLEEPDEEP_Msk
 
SCB_SCR_SLEEPDEEP


	)

41 
__IO
 
uöt32_t
 
	mCPUID
;

42 
__IO
 
uöt32_t
 
	mICSR
;

43 
__IO
 
uöt32_t
 
	mVTOR
;

44 
__IO
 
uöt32_t
 
	mAIRCR
;

45 
__IO
 
uöt32_t
 
	mSCR
;

46 
__IO
 
uöt32_t
 
	mCCR
;

47 
__IO
 
uöt8_t
 
	mSHPR
[12];

48 
__IO
 
uöt32_t
 
	mSHCSR
;

49 } 
	tSCB_Ty≥Def
;

50 
	#SCB
 ((
SCB_Ty≥Def
 *Ë
SCB_BASE
)

	)

54 
	#__WFI
(Ë
	`__asm__
("wfi")

	)

57 
	#__CLZ
(
div
Ë
	`__buûtö_˛z
(div)

	)

62 
	#__REV
(
x
Ë
	`__buûtö_bsw≠32
(x)

	)

66 
uöt32_t
 
	mDHCSR
;

67 
uöt32_t
 
	mDEMCR
;

68 } 
	tC‹eDebug_Ty≥Def
;

70 
	#C‹eDebug
 ((
C‹eDebug_Ty≥Def
 *Ë0)

	)

71 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 0

	)

72 
	#C‹eDebug_DEMCR_TRCENA_Msk
 0

	)

76 
ölöe
 
	$NVIC_CÀ¨PídögIRQ
(
uöt8_t
 
úqn
)

78 
	`nvic_˛ór_≥ndög_úq
(
úqn
);

79 
	}
}

80 
ölöe
 
	$NVIC_E«bÀIRQ
(
uöt8_t
 
úqn
)

82 
	`nvic_íabÀ_úq
(
úqn
);

83 
	}
}

84 
ölöe
 
	$NVIC_DißbÀIRQ
(
uöt8_t
 
úqn
)

86 
	`nvic_dißbÀ_úq
(
úqn
);

87 
	}
}

91 
ölöe
 
	$__íabÀ_úq
()

93 
	`cm_íabÀ_öãºu±s
();

94 
	}
}

95 
ölöe
 
	$__dißbÀ_úq
()

97 
	`cm_dißbÀ_öãºu±s
();

98 
	}
}

102 
	#SCB_SHCSR_MEMFAULTENA_Msk
 0

	)

105 
uöt32_t
 
	mCTRL
;

106 
uöt32_t
 
	mRNR
;

107 
uöt32_t
 
	mRBAR
;

108 
uöt32_t
 
	mRASR
;

109 } 
	tMPU_Ty≥Def
;

111 
	#MPU
 ((
MPU_Ty≥Def
 *Ë0)

	)

112 
	#MPU_CTRL_ENABLE_Msk
 0

	)

113 
	#MPU_RASR_XN_Pos
 0

	)

114 
	#MPU_RASR_AP_Pos
 0

	)

115 
	#MPU_RASR_TEX_Pos
 0

	)

116 
	#MPU_RASR_S_Pos
 0

	)

117 
	#MPU_RASR_C_Pos
 0

	)

118 
	#MPU_RASR_B_Pos
 0

	)

119 
	#MPU_RASR_SRD_Pos
 0

	)

120 
	#MPU_RASR_SIZE_Pos
 0

	)

121 
	#MPU_RASR_ENABLE_Pos
 0

	)

143 
uöt32_t
 
	mCTRL
;

144 
uöt32_t
 
	mLOAD
;

145 
uöt32_t
 
	mVAL
;

146 
uöt32_t
 
	mCALIB
;

147 } 
	tSysTick_Ty≥Def
;

148 
	#SysTick
 ((
SysTick_Ty≥Def
 *Ë
SYS_TICK_BASE
)

	)

150 
ölöe
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
n_ticks
)

154 i‡(
n_ticks
 & ~0x00FFFFFF) {

158 
	`sy°ick_£t_ªlﬂd
(
n_ticks
);

159 
	`sy°ick_£t_˛ocksour˚
(
åue
);

160 
	`sy°ick_öãºu±_íabÀ
();

161 
	`sy°ick_cou¡î_íabÀ
();

164 
	}
}

168 
uöt32_t
 
	mLAR
;

169 
uöt32_t
 
	mTCR
;

170 } 
	tITM_Ty≥Def
;

172 
	#ITM
 ((
ITM_Ty≥Def
 *Ë0)

	)

178 
	#SysTick_H™dÀr
 
sys_tick_h™dÀr


	)

181 
	~<lib›ícmsis/di•©ch/úqh™dÀrs.h
>

	@libopencm3/include/libopencmsis/dispatch/irqhandlers.h

1 #i‡
deföed
(
STM32F0
)

2 
	~<lib›ícmsis/°m32/f0/úqh™dÀrs.h
>

3 #ñi‡
deföed
(
STM32F1
)

4 
	~<lib›ícmsis/°m32/f1/úqh™dÀrs.h
>

5 #ñi‡
deföed
(
STM32F2
)

6 
	~<lib›ícmsis/°m32/f2/úqh™dÀrs.h
>

7 #ñi‡
deföed
(
STM32F3
)

8 
	~<lib›ícmsis/°m32/f3/úqh™dÀrs.h
>

9 #ñi‡
deföed
(
STM32F4
)

10 
	~<lib›ícmsis/°m32/f4/úqh™dÀrs.h
>

11 #ñi‡
deföed
(
STM32F7
)

12 
	~<lib›ícmsis/°m32/f7/úqh™dÀrs.h
>

13 #ñi‡
deföed
(
STM32L0
)

14 
	~<lib›ícmsis/°m32/l0/úqh™dÀrs.h
>

15 #ñi‡
deföed
(
STM32L1
)

16 
	~<lib›ícmsis/°m32/l1/úqh™dÀrs.h
>

17 #ñi‡
deföed
(
STM32L4
)

18 
	~<lib›ícmsis/°m32/l4/úqh™dÀrs.h
>

20 #ñi‡
deföed
(
EFM32TG
)

21 
	~<lib›ícmsis/efm32/efm32tg/úqh™dÀrs.h
>

22 #ñi‡
deföed
(
EFM32G
)

23 
	~<lib›ícmsis/efm32/efm32g/úqh™dÀrs.h
>

24 #ñi‡
deföed
(
EFM32HG
)

25 
	~<lib›ícmsis/efm32/efm32hg/úqh™dÀrs.h
>

26 #ñi‡
deföed
(
EFM32LG
)

27 
	~<lib›ícmsis/efm32/efm32lg/úqh™dÀrs.h
>

28 #ñi‡
deföed
(
EFM32GG
)

29 
	~<lib›ícmsis/efm32/efm32gg/úqh™dÀrs.h
>

31 #ñi‡
deföed
(
LPC13XX
)

32 
	~<lib›ícmsis/Õc13xx/úqh™dÀrs.h
>

33 #ñi‡
deföed
(
LPC17XX
)

34 
	~<lib›ícmsis/Õc17xx/úqh™dÀrs.h
>

35 #ñi‡
deföed
(
LPC43XX_M4
)

36 
	~<lib›ícmsis/Õc43xx/m4/úqh™dÀrs.h
>

37 #ñi‡
deföed
(
LPC43XX_M0
)

38 
	~<lib›ícmsis/Õc43xx/m0/úqh™dÀrs.h
>

40 #ñi‡
deföed
(
SAM3A
)

41 
	~<lib›ícmsis/ßm/3a/úqh™dÀrs.h
>

42 #ñi‡
deföed
(
SAM3N
)

43 
	~<lib›ícmsis/ßm/3n/úqh™dÀrs.h
>

44 #ñi‡
deföed
(
SAM3S
)

45 
	~<lib›ícmsis/ßm/3s/úqh™dÀrs.h
>

46 #ñi‡
deföed
(
SAM3U
)

47 
	~<lib›ícmsis/ßm/3u/úqh™dÀrs.h
>

48 #ñi‡
deföed
(
SAM3X
)

49 
	~<lib›ícmsis/ßm/3x/úqh™dÀrs.h
>

50 #ñi‡
deföed
(
SAMD
)

51 
	~<lib›ícmsis/ßm/d/úqh™dÀrs.h
>

53 #ñi‡
deföed
(
LM3S
Ë|| deföed(
LM4F
)

55 
	~<lib›ícmsis/lm3s/úqh™dÀrs.h
>

	@libopencm3/include/libopencmsis/efm32/ezr32wg/irqhandlers.h

9 
	#DMA_IRQH™dÀr
 
dma_i§


	)

10 
	#GPIO_EVEN_IRQH™dÀr
 
gpio_eví_i§


	)

11 
	#TIMER0_IRQH™dÀr
 
timî0_i§


	)

12 
	#USART0_RX_IRQH™dÀr
 
ußπ0_rx_i§


	)

13 
	#USART0_TX_IRQH™dÀr
 
ußπ0_tx_i§


	)

14 
	#USB_IRQH™dÀr
 
usb_i§


	)

15 
	#ACMP01_IRQH™dÀr
 
acmp01_i§


	)

16 
	#ADC0_IRQH™dÀr
 
adc0_i§


	)

17 
	#DAC0_IRQH™dÀr
 
dac0_i§


	)

18 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

19 
	#I2C1_IRQH™dÀr
 
i2c1_i§


	)

20 
	#GPIO_ODD_IRQH™dÀr
 
gpio_odd_i§


	)

21 
	#TIMER1_IRQH™dÀr
 
timî1_i§


	)

22 
	#TIMER2_IRQH™dÀr
 
timî2_i§


	)

23 
	#TIMER3_IRQH™dÀr
 
timî3_i§


	)

24 
	#USART1_RX_IRQH™dÀr
 
ußπ1_rx_i§


	)

25 
	#USART1_TX_IRQH™dÀr
 
ußπ1_tx_i§


	)

26 
	#LESENSE_IRQH™dÀr
 
À£n£_i§


	)

27 
	#USART2_RX_IRQH™dÀr
 
ußπ2_rx_i§


	)

28 
	#USART2_TX_IRQH™dÀr
 
ußπ2_tx_i§


	)

29 
	#UART0_RX_IRQH™dÀr
 
u¨t0_rx_i§


	)

30 
	#UART0_TX_IRQH™dÀr
 
u¨t0_tx_i§


	)

31 
	#UART1_RX_IRQH™dÀr
 
u¨t1_rx_i§


	)

32 
	#UART1_TX_IRQH™dÀr
 
u¨t1_tx_i§


	)

33 
	#LEUART0_IRQH™dÀr
 
Àu¨t0_i§


	)

34 
	#LEUART1_IRQH™dÀr
 
Àu¨t1_i§


	)

35 
	#LETIMER0_IRQH™dÀr
 
Àtimî0_i§


	)

36 
	#PCNT0_IRQH™dÀr
 
p˙t0_i§


	)

37 
	#PCNT1_IRQH™dÀr
 
p˙t1_i§


	)

38 
	#PCNT2_IRQH™dÀr
 
p˙t2_i§


	)

39 
	#RTC_IRQH™dÀr
 
πc_i§


	)

40 
	#BURTC_IRQH™dÀr
 
buπc_i§


	)

41 
	#CMU_IRQH™dÀr
 
cmu_i§


	)

42 
	#VCMP_IRQH™dÀr
 
vcmp_i§


	)

43 
	#LCD_IRQH™dÀr
 
lcd_i§


	)

44 
	#MSC_IRQH™dÀr
 
msc_i§


	)

45 
	#AES_IRQH™dÀr
 
´s_i§


	)

46 
	#EBI_IRQH™dÀr
 
ebi_i§


	)

47 
	#EMU_IRQH™dÀr
 
emu_i§


	)

	@libopencm3/include/libopencmsis/efm32/g/irqhandlers.h

9 
	#DMA_IRQH™dÀr
 
dma_i§


	)

10 
	#GPIO_EVEN_IRQH™dÀr
 
gpio_eví_i§


	)

11 
	#TIMER0_IRQH™dÀr
 
timî0_i§


	)

12 
	#USART0_RX_IRQH™dÀr
 
ußπ0_rx_i§


	)

13 
	#USART0_TX_IRQH™dÀr
 
ußπ0_tx_i§


	)

14 
	#ACMP01_IRQH™dÀr
 
acmp01_i§


	)

15 
	#ADC0_IRQH™dÀr
 
adc0_i§


	)

16 
	#DAC0_IRQH™dÀr
 
dac0_i§


	)

17 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

18 
	#GPIO_ODD_IRQH™dÀr
 
gpio_odd_i§


	)

19 
	#TIMER1_IRQH™dÀr
 
timî1_i§


	)

20 
	#TIMER2_IRQH™dÀr
 
timî2_i§


	)

21 
	#USART1_RX_IRQH™dÀr
 
ußπ1_rx_i§


	)

22 
	#USART1_TX_IRQH™dÀr
 
ußπ1_tx_i§


	)

23 
	#USART2_RX_IRQH™dÀr
 
ußπ2_rx_i§


	)

24 
	#USART2_TX_IRQH™dÀr
 
ußπ2_tx_i§


	)

25 
	#UART0_RX_IRQH™dÀr
 
u¨t0_rx_i§


	)

26 
	#UART0_TX_IRQH™dÀr
 
u¨t0_tx_i§


	)

27 
	#LEUART0_IRQH™dÀr
 
Àu¨t0_i§


	)

28 
	#LEUART1_IRQH™dÀr
 
Àu¨t1_i§


	)

29 
	#LETIMER0_IRQH™dÀr
 
Àtimî0_i§


	)

30 
	#PCNT0_IRQH™dÀr
 
p˙t0_i§


	)

31 
	#PCNT1_IRQH™dÀr
 
p˙t1_i§


	)

32 
	#PCNT2_IRQH™dÀr
 
p˙t2_i§


	)

33 
	#RTC_IRQH™dÀr
 
πc_i§


	)

34 
	#CMU_IRQH™dÀr
 
cmu_i§


	)

35 
	#VCMP_IRQH™dÀr
 
vcmp_i§


	)

36 
	#LCD_IRQH™dÀr
 
lcd_i§


	)

37 
	#MSC_IRQH™dÀr
 
msc_i§


	)

38 
	#AES_IRQH™dÀr
 
´s_i§


	)

	@libopencm3/include/libopencmsis/efm32/gg/irqhandlers.h

9 
	#DMA_IRQH™dÀr
 
dma_i§


	)

10 
	#GPIO_EVEN_IRQH™dÀr
 
gpio_eví_i§


	)

11 
	#TIMER0_IRQH™dÀr
 
timî0_i§


	)

12 
	#USART0_RX_IRQH™dÀr
 
ußπ0_rx_i§


	)

13 
	#USART0_TX_IRQH™dÀr
 
ußπ0_tx_i§


	)

14 
	#USB_IRQH™dÀr
 
usb_i§


	)

15 
	#ACMP01_IRQH™dÀr
 
acmp01_i§


	)

16 
	#ADC0_IRQH™dÀr
 
adc0_i§


	)

17 
	#DAC0_IRQH™dÀr
 
dac0_i§


	)

18 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

19 
	#I2C1_IRQH™dÀr
 
i2c1_i§


	)

20 
	#GPIO_ODD_IRQH™dÀr
 
gpio_odd_i§


	)

21 
	#TIMER1_IRQH™dÀr
 
timî1_i§


	)

22 
	#TIMER2_IRQH™dÀr
 
timî2_i§


	)

23 
	#TIMER3_IRQH™dÀr
 
timî3_i§


	)

24 
	#USART1_RX_IRQH™dÀr
 
ußπ1_rx_i§


	)

25 
	#USART1_TX_IRQH™dÀr
 
ußπ1_tx_i§


	)

26 
	#LESENSE_IRQH™dÀr
 
À£n£_i§


	)

27 
	#USART2_RX_IRQH™dÀr
 
ußπ2_rx_i§


	)

28 
	#USART2_TX_IRQH™dÀr
 
ußπ2_tx_i§


	)

29 
	#UART0_RX_IRQH™dÀr
 
u¨t0_rx_i§


	)

30 
	#UART0_TX_IRQH™dÀr
 
u¨t0_tx_i§


	)

31 
	#UART1_RX_IRQH™dÀr
 
u¨t1_rx_i§


	)

32 
	#UART1_TX_IRQH™dÀr
 
u¨t1_tx_i§


	)

33 
	#LEUART0_IRQH™dÀr
 
Àu¨t0_i§


	)

34 
	#LEUART1_IRQH™dÀr
 
Àu¨t1_i§


	)

35 
	#LETIMER0_IRQH™dÀr
 
Àtimî0_i§


	)

36 
	#PCNT0_IRQH™dÀr
 
p˙t0_i§


	)

37 
	#PCNT1_IRQH™dÀr
 
p˙t1_i§


	)

38 
	#PCNT2_IRQH™dÀr
 
p˙t2_i§


	)

39 
	#RTC_IRQH™dÀr
 
πc_i§


	)

40 
	#BURTC_IRQH™dÀr
 
buπc_i§


	)

41 
	#CMU_IRQH™dÀr
 
cmu_i§


	)

42 
	#VCMP_IRQH™dÀr
 
vcmp_i§


	)

43 
	#LCD_IRQH™dÀr
 
lcd_i§


	)

44 
	#MSC_IRQH™dÀr
 
msc_i§


	)

45 
	#AES_IRQH™dÀr
 
´s_i§


	)

46 
	#EBI_IRQH™dÀr
 
ebi_i§


	)

	@libopencm3/include/libopencmsis/efm32/hg/irqhandlers.h

9 
	#DMA_IRQH™dÀr
 
dma_i§


	)

10 
	#GPIO_EVEN_IRQH™dÀr
 
gpio_eví_i§


	)

11 
	#TIMER0_IRQH™dÀr
 
timî0_i§


	)

12 
	#ACMP0_IRQH™dÀr
 
acmp0_i§


	)

13 
	#ADC0_IRQH™dÀr
 
adc0_i§


	)

14 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

15 
	#GPIO_ODD_IRQH™dÀr
 
gpio_odd_i§


	)

16 
	#TIMER1_IRQH™dÀr
 
timî1_i§


	)

17 
	#USART1_RX_IRQH™dÀr
 
ußπ1_rx_i§


	)

18 
	#USART1_TX_IRQH™dÀr
 
ußπ1_tx_i§


	)

19 
	#LEUART0_IRQH™dÀr
 
Àu¨t0_i§


	)

20 
	#PCNT0_IRQH™dÀr
 
p˙t0_i§


	)

21 
	#RTC_IRQH™dÀr
 
πc_i§


	)

22 
	#CMU_IRQH™dÀr
 
cmu_i§


	)

23 
	#VCMP_IRQH™dÀr
 
vcmp_i§


	)

24 
	#MSC_IRQH™dÀr
 
msc_i§


	)

25 
	#AES_IRQH™dÀr
 
´s_i§


	)

26 
	#USART0_RX_IRQH™dÀr
 
ußπ0_rx_i§


	)

27 
	#USART0_TX_IRQH™dÀr
 
ußπ0_tx_i§


	)

28 
	#USB_IRQH™dÀr
 
usb_i§


	)

29 
	#TIMER2_IRQH™dÀr
 
timî2_i§


	)

	@libopencm3/include/libopencmsis/efm32/lg/irqhandlers.h

9 
	#DMA_IRQH™dÀr
 
dma_i§


	)

10 
	#GPIO_EVEN_IRQH™dÀr
 
gpio_eví_i§


	)

11 
	#TIMER0_IRQH™dÀr
 
timî0_i§


	)

12 
	#USART0_RX_IRQH™dÀr
 
ußπ0_rx_i§


	)

13 
	#USART0_TX_IRQH™dÀr
 
ußπ0_tx_i§


	)

14 
	#USB_IRQH™dÀr
 
usb_i§


	)

15 
	#ACMP01_IRQH™dÀr
 
acmp01_i§


	)

16 
	#ADC0_IRQH™dÀr
 
adc0_i§


	)

17 
	#DAC0_IRQH™dÀr
 
dac0_i§


	)

18 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

19 
	#I2C1_IRQH™dÀr
 
i2c1_i§


	)

20 
	#GPIO_ODD_IRQH™dÀr
 
gpio_odd_i§


	)

21 
	#TIMER1_IRQH™dÀr
 
timî1_i§


	)

22 
	#TIMER2_IRQH™dÀr
 
timî2_i§


	)

23 
	#TIMER3_IRQH™dÀr
 
timî3_i§


	)

24 
	#USART1_RX_IRQH™dÀr
 
ußπ1_rx_i§


	)

25 
	#USART1_TX_IRQH™dÀr
 
ußπ1_tx_i§


	)

26 
	#LESENSE_IRQH™dÀr
 
À£n£_i§


	)

27 
	#USART2_RX_IRQH™dÀr
 
ußπ2_rx_i§


	)

28 
	#USART2_TX_IRQH™dÀr
 
ußπ2_tx_i§


	)

29 
	#UART0_RX_IRQH™dÀr
 
u¨t0_rx_i§


	)

30 
	#UART0_TX_IRQH™dÀr
 
u¨t0_tx_i§


	)

31 
	#UART1_RX_IRQH™dÀr
 
u¨t1_rx_i§


	)

32 
	#UART1_TX_IRQH™dÀr
 
u¨t1_tx_i§


	)

33 
	#LEUART0_IRQH™dÀr
 
Àu¨t0_i§


	)

34 
	#LEUART1_IRQH™dÀr
 
Àu¨t1_i§


	)

35 
	#LETIMER0_IRQH™dÀr
 
Àtimî0_i§


	)

36 
	#PCNT0_IRQH™dÀr
 
p˙t0_i§


	)

37 
	#PCNT1_IRQH™dÀr
 
p˙t1_i§


	)

38 
	#PCNT2_IRQH™dÀr
 
p˙t2_i§


	)

39 
	#RTC_IRQH™dÀr
 
πc_i§


	)

40 
	#BURTC_IRQH™dÀr
 
buπc_i§


	)

41 
	#CMU_IRQH™dÀr
 
cmu_i§


	)

42 
	#VCMP_IRQH™dÀr
 
vcmp_i§


	)

43 
	#LCD_IRQH™dÀr
 
lcd_i§


	)

44 
	#MSC_IRQH™dÀr
 
msc_i§


	)

45 
	#AES_IRQH™dÀr
 
´s_i§


	)

46 
	#EBI_IRQH™dÀr
 
ebi_i§


	)

47 
	#EMU_IRQH™dÀr
 
emu_i§


	)

	@libopencm3/include/libopencmsis/efm32/tg/irqhandlers.h

9 
	#DMA_IRQH™dÀr
 
dma_i§


	)

10 
	#GPIO_EVEN_IRQH™dÀr
 
gpio_eví_i§


	)

11 
	#TIMER0_IRQH™dÀr
 
timî0_i§


	)

12 
	#USART0_RX_IRQH™dÀr
 
ußπ0_rx_i§


	)

13 
	#USART0_TX_IRQH™dÀr
 
ußπ0_tx_i§


	)

14 
	#ACMP01_IRQH™dÀr
 
acmp01_i§


	)

15 
	#ADC0_IRQH™dÀr
 
adc0_i§


	)

16 
	#DAC0_IRQH™dÀr
 
dac0_i§


	)

17 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

18 
	#GPIO_ODD_IRQH™dÀr
 
gpio_odd_i§


	)

19 
	#TIMER1_IRQH™dÀr
 
timî1_i§


	)

20 
	#USART1_RX_IRQH™dÀr
 
ußπ1_rx_i§


	)

21 
	#USART1_TX_IRQH™dÀr
 
ußπ1_tx_i§


	)

22 
	#LESENSE_IRQH™dÀr
 
À£n£_i§


	)

23 
	#LEUART0_IRQH™dÀr
 
Àu¨t0_i§


	)

24 
	#LETIMER0_IRQH™dÀr
 
Àtimî0_i§


	)

25 
	#PCNT0_IRQH™dÀr
 
p˙t0_i§


	)

26 
	#RTC_IRQH™dÀr
 
πc_i§


	)

27 
	#CMU_IRQH™dÀr
 
cmu_i§


	)

28 
	#VCMP_IRQH™dÀr
 
vcmp_i§


	)

29 
	#LCD_IRQH™dÀr
 
lcd_i§


	)

30 
	#MSC_IRQH™dÀr
 
msc_i§


	)

31 
	#AES_IRQH™dÀr
 
´s_i§


	)

	@libopencm3/include/libopencmsis/efm32/wg/irqhandlers.h

9 
	#DMA_IRQH™dÀr
 
dma_i§


	)

10 
	#GPIO_EVEN_IRQH™dÀr
 
gpio_eví_i§


	)

11 
	#TIMER0_IRQH™dÀr
 
timî0_i§


	)

12 
	#USART0_RX_IRQH™dÀr
 
ußπ0_rx_i§


	)

13 
	#USART0_TX_IRQH™dÀr
 
ußπ0_tx_i§


	)

14 
	#USB_IRQH™dÀr
 
usb_i§


	)

15 
	#ACMP01_IRQH™dÀr
 
acmp01_i§


	)

16 
	#ADC0_IRQH™dÀr
 
adc0_i§


	)

17 
	#DAC0_IRQH™dÀr
 
dac0_i§


	)

18 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

19 
	#I2C1_IRQH™dÀr
 
i2c1_i§


	)

20 
	#GPIO_ODD_IRQH™dÀr
 
gpio_odd_i§


	)

21 
	#TIMER1_IRQH™dÀr
 
timî1_i§


	)

22 
	#TIMER2_IRQH™dÀr
 
timî2_i§


	)

23 
	#TIMER3_IRQH™dÀr
 
timî3_i§


	)

24 
	#USART1_RX_IRQH™dÀr
 
ußπ1_rx_i§


	)

25 
	#USART1_TX_IRQH™dÀr
 
ußπ1_tx_i§


	)

26 
	#LESENSE_IRQH™dÀr
 
À£n£_i§


	)

27 
	#USART2_RX_IRQH™dÀr
 
ußπ2_rx_i§


	)

28 
	#USART2_TX_IRQH™dÀr
 
ußπ2_tx_i§


	)

29 
	#UART0_RX_IRQH™dÀr
 
u¨t0_rx_i§


	)

30 
	#UART0_TX_IRQH™dÀr
 
u¨t0_tx_i§


	)

31 
	#UART1_RX_IRQH™dÀr
 
u¨t1_rx_i§


	)

32 
	#UART1_TX_IRQH™dÀr
 
u¨t1_tx_i§


	)

33 
	#LEUART0_IRQH™dÀr
 
Àu¨t0_i§


	)

34 
	#LEUART1_IRQH™dÀr
 
Àu¨t1_i§


	)

35 
	#LETIMER0_IRQH™dÀr
 
Àtimî0_i§


	)

36 
	#PCNT0_IRQH™dÀr
 
p˙t0_i§


	)

37 
	#PCNT1_IRQH™dÀr
 
p˙t1_i§


	)

38 
	#PCNT2_IRQH™dÀr
 
p˙t2_i§


	)

39 
	#RTC_IRQH™dÀr
 
πc_i§


	)

40 
	#BURTC_IRQH™dÀr
 
buπc_i§


	)

41 
	#CMU_IRQH™dÀr
 
cmu_i§


	)

42 
	#VCMP_IRQH™dÀr
 
vcmp_i§


	)

43 
	#LCD_IRQH™dÀr
 
lcd_i§


	)

44 
	#MSC_IRQH™dÀr
 
msc_i§


	)

45 
	#AES_IRQH™dÀr
 
´s_i§


	)

46 
	#EBI_IRQH™dÀr
 
ebi_i§


	)

47 
	#EMU_IRQH™dÀr
 
emu_i§


	)

	@libopencm3/include/libopencmsis/lm3s/irqhandlers.h

9 
	#GPIOQ7_IRQH™dÀr
 
gpioq7_i§


	)

10 
	#GPIOQ6_IRQH™dÀr
 
gpioq6_i§


	)

11 
	#PWM1_3_IRQH™dÀr
 
pwm1_3_i§


	)

12 
	#PWM1_2_IRQH™dÀr
 
pwm1_2_i§


	)

13 
	#PWM1_1_IRQH™dÀr
 
pwm1_1_i§


	)

14 
	#PWM1_0_IRQH™dÀr
 
pwm1_0_i§


	)

15 
	#PWM1_FAULT_IRQH™dÀr
 
pwm1_Áu…_i§


	)

16 
	#TIMER2B_IRQH™dÀr
 
timî2b_i§


	)

17 
	#COMP0_IRQH™dÀr
 
comp0_i§


	)

18 
	#COMP1_IRQH™dÀr
 
comp1_i§


	)

19 
	#COMP2_IRQH™dÀr
 
comp2_i§


	)

20 
	#TIMER0B_IRQH™dÀr
 
timî0b_i§


	)

21 
	#TIMER1A_IRQH™dÀr
 
timî1a_i§


	)

22 
	#TIMER1B_IRQH™dÀr
 
timî1b_i§


	)

23 
	#TIMER2A_IRQH™dÀr
 
timî2a_i§


	)

24 
	#SYSCTL_IRQH™dÀr
 
sys˘l_i§


	)

25 
	#FLASH_IRQH™dÀr
 
Êash_i§


	)

26 
	#GPIOA_IRQH™dÀr
 
gpiﬂ_i§


	)

27 
	#GPIOE_IRQH™dÀr
 
gpi€_i§


	)

28 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

29 
	#GPIOP4_IRQH™dÀr
 
gpi›4_i§


	)

30 
	#GPIOP5_IRQH™dÀr
 
gpi›5_i§


	)

31 
	#GPIOP6_IRQH™dÀr
 
gpi›6_i§


	)

32 
	#GPIOP7_IRQH™dÀr
 
gpi›7_i§


	)

33 
	#GPIOQ0_IRQH™dÀr
 
gpioq0_i§


	)

34 
	#GPIOQ1_IRQH™dÀr
 
gpioq1_i§


	)

35 
	#GPIOQ2_IRQH™dÀr
 
gpioq2_i§


	)

36 
	#GPIOQ3_IRQH™dÀr
 
gpioq3_i§


	)

37 
	#GPIOQ4_IRQH™dÀr
 
gpioq4_i§


	)

38 
	#GPIOQ5_IRQH™dÀr
 
gpioq5_i§


	)

39 
	#UART3_IRQH™dÀr
 
u¨t3_i§


	)

40 
	#SSI3_IRQH™dÀr
 
ssi3_i§


	)

41 
	#GPIOK_IRQH™dÀr
 
gpiok_i§


	)

42 
	#GPIOJ_IRQH™dÀr
 
gpioj_i§


	)

43 
	#SSI2_IRQH™dÀr
 
ssi2_i§


	)

44 
	#GPIOL_IRQH™dÀr
 
gpiﬁ_i§


	)

45 
	#ADC1SS3_IRQH™dÀr
 
adc1ss3_i§


	)

46 
	#ADC1SS2_IRQH™dÀr
 
adc1ss2_i§


	)

47 
	#EPI0_IRQH™dÀr
 
ïi0_i§


	)

48 
	#I2S0_IRQH™dÀr
 
i2s0_i§


	)

49 
	#FAN0_IRQH™dÀr
 
Án0_i§


	)

50 
	#GPIOP1_IRQH™dÀr
 
gpi›1_i§


	)

51 
	#GPIOP0_IRQH™dÀr
 
gpi›0_i§


	)

52 
	#GPIOM_IRQH™dÀr
 
gpiom_i§


	)

53 
	#I2C5_IRQH™dÀr
 
i2c5_i§


	)

54 
	#GPION_IRQH™dÀr
 
gpi⁄_i§


	)

55 
	#GPIOP3_IRQH™dÀr
 
gpi›3_i§


	)

56 
	#GPIOP2_IRQH™dÀr
 
gpi›2_i§


	)

57 
	#GPIOD_IRQH™dÀr
 
gpiod_i§


	)

58 
	#SSI0_IRQH™dÀr
 
ssi0_i§


	)

59 
	#LPC0_IRQH™dÀr
 
Õc0_i§


	)

60 
	#I2C4_IRQH™dÀr
 
i2c4_i§


	)

61 
	#WTIMER4A_IRQH™dÀr
 
wtimî4a_i§


	)

62 
	#WTIMER4B_IRQH™dÀr
 
wtimî4b_i§


	)

63 
	#WTIMER3A_IRQH™dÀr
 
wtimî3a_i§


	)

64 
	#WTIMER3B_IRQH™dÀr
 
wtimî3b_i§


	)

65 
	#SYSEXC_IRQH™dÀr
 
sy£xc_i§


	)

66 
	#PECI0_IRQH™dÀr
 
≥ci0_i§


	)

67 
	#WTIMER5A_IRQH™dÀr
 
wtimî5a_i§


	)

68 
	#WTIMER5B_IRQH™dÀr
 
wtimî5b_i§


	)

69 
	#CAN0_IRQH™dÀr
 
ˇn0_i§


	)

70 
	#QEI1_IRQH™dÀr
 
qei1_i§


	)

71 
	#UART2_IRQH™dÀr
 
u¨t2_i§


	)

72 
	#GPIOH_IRQH™dÀr
 
gpioh_i§


	)

73 
	#GPIOG_IRQH™dÀr
 
gpiog_i§


	)

74 
	#GPIOF_IRQH™dÀr
 
gpiof_i§


	)

75 
	#I2C1_IRQH™dÀr
 
i2c1_i§


	)

76 
	#TIMER3B_IRQH™dÀr
 
timî3b_i§


	)

77 
	#TIMER3A_IRQH™dÀr
 
timî3a_i§


	)

78 
	#SSI1_IRQH™dÀr
 
ssi1_i§


	)

79 
	#UART4_IRQH™dÀr
 
u¨t4_i§


	)

80 
	#UART5_IRQH™dÀr
 
u¨t5_i§


	)

81 
	#UART6_IRQH™dÀr
 
u¨t6_i§


	)

82 
	#UART7_IRQH™dÀr
 
u¨t7_i§


	)

83 
	#I2C2_IRQH™dÀr
 
i2c2_i§


	)

84 
	#I2C3_IRQH™dÀr
 
i2c3_i§


	)

85 
	#GPIOC_IRQH™dÀr
 
gpioc_i§


	)

86 
	#UART1_IRQH™dÀr
 
u¨t1_i§


	)

87 
	#WTIMER2B_IRQH™dÀr
 
wtimî2b_i§


	)

88 
	#WTIMER2A_IRQH™dÀr
 
wtimî2a_i§


	)

89 
	#TIMER5B_IRQH™dÀr
 
timî5b_i§


	)

90 
	#TIMER5A_IRQH™dÀr
 
timî5a_i§


	)

91 
	#WTIMER0B_IRQH™dÀr
 
wtimî0b_i§


	)

92 
	#WTIMER0A_IRQH™dÀr
 
wtimî0a_i§


	)

93 
	#WTIMER1B_IRQH™dÀr
 
wtimî1b_i§


	)

94 
	#WTIMER1A_IRQH™dÀr
 
wtimî1a_i§


	)

95 
	#PWM0_1_IRQH™dÀr
 
pwm0_1_i§


	)

96 
	#PWM0_0_IRQH™dÀr
 
pwm0_0_i§


	)

97 
	#QEI0_IRQH™dÀr
 
qei0_i§


	)

98 
	#PWM0_2_IRQH™dÀr
 
pwm0_2_i§


	)

99 
	#ADC0SS1_IRQH™dÀr
 
adc0ss1_i§


	)

100 
	#ADC0SS0_IRQH™dÀr
 
adc0ss0_i§


	)

101 
	#ADC0SS3_IRQH™dÀr
 
adc0ss3_i§


	)

102 
	#ADC0SS2_IRQH™dÀr
 
adc0ss2_i§


	)

103 
	#TIMER0A_IRQH™dÀr
 
timî0a_i§


	)

104 
	#WATCHDOG_IRQH™dÀr
 
w©chdog_i§


	)

105 
	#ADC1SS0_IRQH™dÀr
 
adc1ss0_i§


	)

106 
	#ADC1SS1_IRQH™dÀr
 
adc1ss1_i§


	)

107 
	#UDMA_IRQH™dÀr
 
udma_i§


	)

108 
	#UDMAERR_IRQH™dÀr
 
udm´º_i§


	)

109 
	#USB0_IRQH™dÀr
 
usb0_i§


	)

110 
	#PWM0_3_IRQH™dÀr
 
pwm0_3_i§


	)

111 
	#ETH_IRQH™dÀr
 
ëh_i§


	)

112 
	#HIBERNATE_IRQH™dÀr
 
hibî«ã_i§


	)

113 
	#CAN1_IRQH™dÀr
 
ˇn1_i§


	)

114 
	#CAN2_IRQH™dÀr
 
ˇn2_i§


	)

115 
	#GPIOB_IRQH™dÀr
 
gpiob_i§


	)

116 
	#UART0_IRQH™dÀr
 
u¨t0_i§


	)

117 
	#PWM0_FAULT_IRQH™dÀr
 
pwm0_Áu…_i§


	)

118 
	#TIMER4B_IRQH™dÀr
 
timî4b_i§


	)

119 
	#TIMER4A_IRQH™dÀr
 
timî4a_i§


	)

	@libopencm3/include/libopencmsis/lpc13xx/irqhandlers.h

9 
	#SSP1_IRQH™dÀr
 
s•1_i§


	)

10 
	#PIO2_IRQH™dÀr
 
pio2_i§


	)

11 
	#CT16B1_IRQH™dÀr
 
˘16b1_i§


	)

12 
	#USB_FIQ_IRQH™dÀr
 
usb_fiq_i§


	)

13 
	#CT32B0_IRQH™dÀr
 
˘32b0_i§


	)

14 
	#ADC_IRQH™dÀr
 
adc_i§


	)

15 
	#PIO3_IRQH™dÀr
 
pio3_i§


	)

16 
	#PIO2_0_IRQH™dÀr
 
pio2_0_i§


	)

17 
	#PIO2_1_IRQH™dÀr
 
pio2_1_i§


	)

18 
	#PIO2_2_IRQH™dÀr
 
pio2_2_i§


	)

19 
	#PIO2_3_IRQH™dÀr
 
pio2_3_i§


	)

20 
	#PIO1_8_IRQH™dÀr
 
pio1_8_i§


	)

21 
	#PIO1_9_IRQH™dÀr
 
pio1_9_i§


	)

22 
	#PIO1_10_IRQH™dÀr
 
pio1_10_i§


	)

23 
	#PIO1_11_IRQH™dÀr
 
pio1_11_i§


	)

24 
	#UART_IRQH™dÀr
 
u¨t_i§


	)

25 
	#USB_IRQH™dÀr
 
usb_i§


	)

26 
	#CT32B1_IRQH™dÀr
 
˘32b1_i§


	)

27 
	#SSP0_IRQH™dÀr
 
s•0_i§


	)

28 
	#PIO2_4_IRQH™dÀr
 
pio2_4_i§


	)

29 
	#PIO2_5_IRQH™dÀr
 
pio2_5_i§


	)

30 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

31 
	#CT16B0_IRQH™dÀr
 
˘16b0_i§


	)

32 
	#PIO0_1_IRQH™dÀr
 
pio0_1_i§


	)

33 
	#PIO0_0_IRQH™dÀr
 
pio0_0_i§


	)

34 
	#PIO0_3_IRQH™dÀr
 
pio0_3_i§


	)

35 
	#PIO0_2_IRQH™dÀr
 
pio0_2_i§


	)

36 
	#PIO0_5_IRQH™dÀr
 
pio0_5_i§


	)

37 
	#PIO0_4_IRQH™dÀr
 
pio0_4_i§


	)

38 
	#PIO0_7_IRQH™dÀr
 
pio0_7_i§


	)

39 
	#PIO0_6_IRQH™dÀr
 
pio0_6_i§


	)

40 
	#PIO0_9_IRQH™dÀr
 
pio0_9_i§


	)

41 
	#PIO0_8_IRQH™dÀr
 
pio0_8_i§


	)

42 
	#BOD_IRQH™dÀr
 
bod_i§


	)

43 
	#PIO3_3_IRQH™dÀr
 
pio3_3_i§


	)

44 
	#PIO3_2_IRQH™dÀr
 
pio3_2_i§


	)

45 
	#PIO0_11_IRQH™dÀr
 
pio0_11_i§


	)

46 
	#PIO0_10_IRQH™dÀr
 
pio0_10_i§


	)

47 
	#PIO1_1_IRQH™dÀr
 
pio1_1_i§


	)

48 
	#PIO1_0_IRQH™dÀr
 
pio1_0_i§


	)

49 
	#PIO1_3_IRQH™dÀr
 
pio1_3_i§


	)

50 
	#PIO1_2_IRQH™dÀr
 
pio1_2_i§


	)

51 
	#PIO1_5_IRQH™dÀr
 
pio1_5_i§


	)

52 
	#PIO1_4_IRQH™dÀr
 
pio1_4_i§


	)

53 
	#PIO1_7_IRQH™dÀr
 
pio1_7_i§


	)

54 
	#PIO1_6_IRQH™dÀr
 
pio1_6_i§


	)

55 
	#PIO2_7_IRQH™dÀr
 
pio2_7_i§


	)

56 
	#PIO2_6_IRQH™dÀr
 
pio2_6_i§


	)

57 
	#PIO3_1_IRQH™dÀr
 
pio3_1_i§


	)

58 
	#PIO3_0_IRQH™dÀr
 
pio3_0_i§


	)

59 
	#PIO2_11_IRQH™dÀr
 
pio2_11_i§


	)

60 
	#PIO2_10_IRQH™dÀr
 
pio2_10_i§


	)

61 
	#PIO2_9_IRQH™dÀr
 
pio2_9_i§


	)

62 
	#PIO1_IRQH™dÀr
 
pio1_i§


	)

63 
	#PIO2_8_IRQH™dÀr
 
pio2_8_i§


	)

64 
	#WDT_IRQH™dÀr
 
wdt_i§


	)

	@libopencm3/include/libopencmsis/lpc17xx/irqhandlers.h

9 
	#USB_IRQH™dÀr
 
usb_i§


	)

10 
	#CAN_IRQH™dÀr
 
ˇn_i§


	)

11 
	#GPDMA_IRQH™dÀr
 
gpdma_i§


	)

12 
	#I2S_IRQH™dÀr
 
i2s_i§


	)

13 
	#EINT2_IRQH™dÀr
 
eöt2_i§


	)

14 
	#EINT3_IRQH™dÀr
 
eöt3_i§


	)

15 
	#ADC_IRQH™dÀr
 
adc_i§


	)

16 
	#BOD_IRQH™dÀr
 
bod_i§


	)

17 
	#ETHERNET_IRQH™dÀr
 
ëhî√t_i§


	)

18 
	#RIT_IRQH™dÀr
 
rô_i§


	)

19 
	#TIMER0_IRQH™dÀr
 
timî0_i§


	)

20 
	#WDT_IRQH™dÀr
 
wdt_i§


	)

21 
	#TIMER2_IRQH™dÀr
 
timî2_i§


	)

22 
	#TIMER1_IRQH™dÀr
 
timî1_i§


	)

23 
	#UART0_IRQH™dÀr
 
u¨t0_i§


	)

24 
	#TIMER3_IRQH™dÀr
 
timî3_i§


	)

25 
	#UART2_IRQH™dÀr
 
u¨t2_i§


	)

26 
	#UART1_IRQH™dÀr
 
u¨t1_i§


	)

27 
	#PWM_IRQH™dÀr
 
pwm_i§


	)

28 
	#UART3_IRQH™dÀr
 
u¨t3_i§


	)

29 
	#I2C1_IRQH™dÀr
 
i2c1_i§


	)

30 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

31 
	#SPI_IRQH™dÀr
 
•i_i§


	)

32 
	#I2C2_IRQH™dÀr
 
i2c2_i§


	)

33 
	#SSP1_IRQH™dÀr
 
s•1_i§


	)

34 
	#SSP0_IRQH™dÀr
 
s•0_i§


	)

35 
	#RTC_IRQH™dÀr
 
πc_i§


	)

36 
	#PLL0_IRQH™dÀr
 
∂l0_i§


	)

37 
	#EINT1_IRQH™dÀr
 
eöt1_i§


	)

38 
	#EINT0_IRQH™dÀr
 
eöt0_i§


	)

39 
	#QEI_IRQH™dÀr
 
qei_i§


	)

40 
	#MOTOR_PWM_IRQH™dÀr
 
mŸ‹_pwm_i§


	)

41 
	#CAN_ACT_IRQH™dÀr
 
ˇn_a˘_i§


	)

42 
	#USB_ACT_IRQH™dÀr
 
usb_a˘_i§


	)

43 
	#PLL1_IRQH™dÀr
 
∂l1_i§


	)

	@libopencm3/include/libopencmsis/lpc43xx/m0/irqhandlers.h

9 
	#USART0_IRQH™dÀr
 
ußπ0_i§


	)

10 
	#UART1_IRQH™dÀr
 
u¨t1_i§


	)

11 
	#USART2_OR_C_CAN1_IRQH™dÀr
 
ußπ2_‹_c_ˇn1_i§


	)

12 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

13 
	#SPI_OR_DAC_IRQH™dÀr
 
•i_‹_dac_i§


	)

14 
	#ADC1_IRQH™dÀr
 
adc1_i§


	)

15 
	#SSP0_OR_SSP1_IRQH™dÀr
 
s•0_‹_s•1_i§


	)

16 
	#EVENTROUTER_IRQH™dÀr
 
evíåouãr_i§


	)

17 
	#I2S0_OR_I2S1_IRQH™dÀr
 
i2s0_‹_i2s1_i§


	)

18 
	#C_CAN0_IRQH™dÀr
 
c_ˇn0_i§


	)

19 
	#M4CORE_IRQH™dÀr
 
m4c‹e_i§


	)

20 
	#RTC_IRQH™dÀr
 
πc_i§


	)

21 
	#DMA_IRQH™dÀr
 
dma_i§


	)

22 
	#ETHERNET_IRQH™dÀr
 
ëhî√t_i§


	)

23 
	#FLASHEEPROMAT_IRQH™dÀr
 
Êashì¥om©_i§


	)

24 
	#LCD_IRQH™dÀr
 
lcd_i§


	)

25 
	#SDIO_IRQH™dÀr
 
sdio_i§


	)

26 
	#USB1_IRQH™dÀr
 
usb1_i§


	)

27 
	#USB0_IRQH™dÀr
 
usb0_i§


	)

28 
	#RITIMER_OR_WWDT_IRQH™dÀr
 
rôimî_‹_wwdt_i§


	)

29 
	#SCT_IRQH™dÀr
 
s˘_i§


	)

30 
	#GINT1_IRQH™dÀr
 
göt1_i§


	)

31 
	#TIMER0_IRQH™dÀr
 
timî0_i§


	)

32 
	#TIMER3_IRQH™dÀr
 
timî3_i§


	)

33 
	#PIN_INT4_IRQH™dÀr
 
pö_öt4_i§


	)

34 
	#ADC0_IRQH™dÀr
 
adc0_i§


	)

35 
	#MCPWM_IRQH™dÀr
 
m˝wm_i§


	)

36 
	#SGPIO_IRQH™dÀr
 
sgpio_i§


	)

37 
	#I2C0_OR_IRC1_IRQH™dÀr
 
i2c0_‹_úc1_i§


	)

	@libopencm3/include/libopencmsis/lpc43xx/m4/irqhandlers.h

9 
	#EVENTROUTER_IRQH™dÀr
 
evíåouãr_i§


	)

10 
	#C_CAN1_IRQH™dÀr
 
c_ˇn1_i§


	)

11 
	#WWDT_IRQH™dÀr
 
wwdt_i§


	)

12 
	#QEI_IRQH™dÀr
 
qei_i§


	)

13 
	#USART0_IRQH™dÀr
 
ußπ0_i§


	)

14 
	#UART1_IRQH™dÀr
 
u¨t1_i§


	)

15 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

16 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

17 
	#SPI_IRQH™dÀr
 
•i_i§


	)

18 
	#ADC1_IRQH™dÀr
 
adc1_i§


	)

19 
	#SSP0_IRQH™dÀr
 
s•0_i§


	)

20 
	#SSP1_IRQH™dÀr
 
s•1_i§


	)

21 
	#ATIMER_IRQH™dÀr
 
©imî_i§


	)

22 
	#RTC_IRQH™dÀr
 
πc_i§


	)

23 
	#I2S0_IRQH™dÀr
 
i2s0_i§


	)

24 
	#I2S1_IRQH™dÀr
 
i2s1_i§


	)

25 
	#GINT0_IRQH™dÀr
 
göt0_i§


	)

26 
	#GINT1_IRQH™dÀr
 
göt1_i§


	)

27 
	#M0CORE_IRQH™dÀr
 
m0c‹e_i§


	)

28 
	#DAC_IRQH™dÀr
 
dac_i§


	)

29 
	#DMA_IRQH™dÀr
 
dma_i§


	)

30 
	#ETHERNET_IRQH™dÀr
 
ëhî√t_i§


	)

31 
	#LCD_IRQH™dÀr
 
lcd_i§


	)

32 
	#SDIO_IRQH™dÀr
 
sdio_i§


	)

33 
	#USB1_IRQH™dÀr
 
usb1_i§


	)

34 
	#USB0_IRQH™dÀr
 
usb0_i§


	)

35 
	#C_CAN0_IRQH™dÀr
 
c_ˇn0_i§


	)

36 
	#PIN_INT7_IRQH™dÀr
 
pö_öt7_i§


	)

37 
	#PIN_INT6_IRQH™dÀr
 
pö_öt6_i§


	)

38 
	#RITIMER_IRQH™dÀr
 
rôimî_i§


	)

39 
	#SCT_IRQH™dÀr
 
s˘_i§


	)

40 
	#TIMER1_IRQH™dÀr
 
timî1_i§


	)

41 
	#TIMER0_IRQH™dÀr
 
timî0_i§


	)

42 
	#TIMER3_IRQH™dÀr
 
timî3_i§


	)

43 
	#TIMER2_IRQH™dÀr
 
timî2_i§


	)

44 
	#ADC0_IRQH™dÀr
 
adc0_i§


	)

45 
	#MCPWM_IRQH™dÀr
 
m˝wm_i§


	)

46 
	#I2C1_IRQH™dÀr
 
i2c1_i§


	)

47 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

48 
	#SGPIO_IRQH™dÀr
 
sgpio_i§


	)

49 
	#SPIFI_IRQH™dÀr
 
•ifi_i§


	)

50 
	#PIN_INT5_IRQH™dÀr
 
pö_öt5_i§


	)

51 
	#PIN_INT4_IRQH™dÀr
 
pö_öt4_i§


	)

52 
	#PIN_INT3_IRQH™dÀr
 
pö_öt3_i§


	)

53 
	#PIN_INT2_IRQH™dÀr
 
pö_öt2_i§


	)

54 
	#PIN_INT1_IRQH™dÀr
 
pö_öt1_i§


	)

55 
	#PIN_INT0_IRQH™dÀr
 
pö_öt0_i§


	)

	@libopencm3/include/libopencmsis/sam/3a/irqhandlers.h

9 
	#SUPC_IRQH™dÀr
 
supc_i§


	)

10 
	#RSTC_IRQH™dÀr
 
r°c_i§


	)

11 
	#RTC_IRQH™dÀr
 
πc_i§


	)

12 
	#RTT_IRQH™dÀr
 
πt_i§


	)

13 
	#WDT_IRQH™dÀr
 
wdt_i§


	)

14 
	#PMC_IRQH™dÀr
 
pmc_i§


	)

15 
	#EEFC0_IRQH™dÀr
 
ìfc0_i§


	)

16 
	#EEFC1_IRQH™dÀr
 
ìfc1_i§


	)

17 
	#UART_IRQH™dÀr
 
u¨t_i§


	)

18 
	#SMC_SDRAMC_IRQH™dÀr
 
smc_sdømc_i§


	)

19 
	#SDRAMC_IRQH™dÀr
 
sdømc_i§


	)

20 
	#PIOA_IRQH™dÀr
 
piﬂ_i§


	)

21 
	#PIOB_IRQH™dÀr
 
piob_i§


	)

22 
	#PIOC_IRQH™dÀr
 
pioc_i§


	)

23 
	#PIOD_IRQH™dÀr
 
piod_i§


	)

24 
	#PIOE_IRQH™dÀr
 
pi€_i§


	)

25 
	#PIOF_IRQH™dÀr
 
piof_i§


	)

26 
	#USART0_IRQH™dÀr
 
ußπ0_i§


	)

27 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

28 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

29 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

30 
	#HSMCI_IRQH™dÀr
 
hsmci_i§


	)

31 
	#TWI0_IRQH™dÀr
 
twi0_i§


	)

32 
	#TWI1_IRQH™dÀr
 
twi1_i§


	)

33 
	#SPI0_IRQH™dÀr
 
•i0_i§


	)

34 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

35 
	#SSC_IRQH™dÀr
 
ssc_i§


	)

36 
	#TC0_IRQH™dÀr
 
tc0_i§


	)

37 
	#TC1_IRQH™dÀr
 
tc1_i§


	)

38 
	#TC2_IRQH™dÀr
 
tc2_i§


	)

39 
	#TC3_IRQH™dÀr
 
tc3_i§


	)

40 
	#TC4_IRQH™dÀr
 
tc4_i§


	)

41 
	#TC5_IRQH™dÀr
 
tc5_i§


	)

42 
	#TC6_IRQH™dÀr
 
tc6_i§


	)

43 
	#TC7_IRQH™dÀr
 
tc7_i§


	)

44 
	#TC8_IRQH™dÀr
 
tc8_i§


	)

45 
	#PWM_IRQH™dÀr
 
pwm_i§


	)

46 
	#ADC_IRQH™dÀr
 
adc_i§


	)

47 
	#DACC_IRQH™dÀr
 
dacc_i§


	)

48 
	#DMAC_IRQH™dÀr
 
dmac_i§


	)

49 
	#UOTGHS_IRQH™dÀr
 
uŸghs_i§


	)

50 
	#TRNG_IRQH™dÀr
 
ång_i§


	)

51 
	#RESERVED0_IRQH™dÀr
 
ª£rved0_i§


	)

52 
	#CAN0_IRQH™dÀr
 
ˇn0_i§


	)

53 
	#CAN1_IRQH™dÀr
 
ˇn1_i§


	)

	@libopencm3/include/libopencmsis/sam/3n/irqhandlers.h

9 
	#SUPC_IRQH™dÀr
 
supc_i§


	)

10 
	#RSTC_IRQH™dÀr
 
r°c_i§


	)

11 
	#RTC_IRQH™dÀr
 
πc_i§


	)

12 
	#RTT_IRQH™dÀr
 
πt_i§


	)

13 
	#WDT_IRQH™dÀr
 
wdt_i§


	)

14 
	#PMC_IRQH™dÀr
 
pmc_i§


	)

15 
	#EEFC_IRQH™dÀr
 
ìfc_i§


	)

16 
	#RESERVED0_IRQH™dÀr
 
ª£rved0_i§


	)

17 
	#UART0_IRQH™dÀr
 
u¨t0_i§


	)

18 
	#UART1_IRQH™dÀr
 
u¨t1_i§


	)

19 
	#RESERVED1_IRQH™dÀr
 
ª£rved1_i§


	)

20 
	#PIOA_IRQH™dÀr
 
piﬂ_i§


	)

21 
	#PIOB_IRQH™dÀr
 
piob_i§


	)

22 
	#PIOC_IRQH™dÀr
 
pioc_i§


	)

23 
	#USART0_IRQH™dÀr
 
ußπ0_i§


	)

24 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

25 
	#RESERVED2_IRQH™dÀr
 
ª£rved2_i§


	)

26 
	#RESERVED3_IRQH™dÀr
 
ª£rved3_i§


	)

27 
	#RESERVED4_IRQH™dÀr
 
ª£rved4_i§


	)

28 
	#TWI0_IRQH™dÀr
 
twi0_i§


	)

29 
	#TWI1_IRQH™dÀr
 
twi1_i§


	)

30 
	#SPI_IRQH™dÀr
 
•i_i§


	)

31 
	#RESERVED5_IRQH™dÀr
 
ª£rved5_i§


	)

32 
	#TC0_IRQH™dÀr
 
tc0_i§


	)

33 
	#TC1_IRQH™dÀr
 
tc1_i§


	)

34 
	#TC2_IRQH™dÀr
 
tc2_i§


	)

35 
	#TC3_IRQH™dÀr
 
tc3_i§


	)

36 
	#TC4_IRQH™dÀr
 
tc4_i§


	)

37 
	#TC5_IRQH™dÀr
 
tc5_i§


	)

38 
	#ADC_IRQH™dÀr
 
adc_i§


	)

39 
	#DACC_IRQH™dÀr
 
dacc_i§


	)

40 
	#PWM_IRQH™dÀr
 
pwm_i§


	)

	@libopencm3/include/libopencmsis/sam/3s/irqhandlers.h

9 
	#SUPC_IRQH™dÀr
 
supc_i§


	)

10 
	#RSTC_IRQH™dÀr
 
r°c_i§


	)

11 
	#RTC_IRQH™dÀr
 
πc_i§


	)

12 
	#RTT_IRQH™dÀr
 
πt_i§


	)

13 
	#WDT_IRQH™dÀr
 
wdt_i§


	)

14 
	#PMC_IRQH™dÀr
 
pmc_i§


	)

15 
	#EEFC_IRQH™dÀr
 
ìfc_i§


	)

16 
	#RESERVED0_IRQH™dÀr
 
ª£rved0_i§


	)

17 
	#UART0_IRQH™dÀr
 
u¨t0_i§


	)

18 
	#UART1_IRQH™dÀr
 
u¨t1_i§


	)

19 
	#SMC_IRQH™dÀr
 
smc_i§


	)

20 
	#PIOA_IRQH™dÀr
 
piﬂ_i§


	)

21 
	#PIOB_IRQH™dÀr
 
piob_i§


	)

22 
	#PIOC_IRQH™dÀr
 
pioc_i§


	)

23 
	#USART0_IRQH™dÀr
 
ußπ0_i§


	)

24 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

25 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

26 
	#RESERVED1_IRQH™dÀr
 
ª£rved1_i§


	)

27 
	#HSMCI_IRQH™dÀr
 
hsmci_i§


	)

28 
	#TWI0_IRQH™dÀr
 
twi0_i§


	)

29 
	#TWI1_IRQH™dÀr
 
twi1_i§


	)

30 
	#SPI_IRQH™dÀr
 
•i_i§


	)

31 
	#SSC_IRQH™dÀr
 
ssc_i§


	)

32 
	#TC0_IRQH™dÀr
 
tc0_i§


	)

33 
	#TC1_IRQH™dÀr
 
tc1_i§


	)

34 
	#TC2_IRQH™dÀr
 
tc2_i§


	)

35 
	#TC3_IRQH™dÀr
 
tc3_i§


	)

36 
	#TC4_IRQH™dÀr
 
tc4_i§


	)

37 
	#TC5_IRQH™dÀr
 
tc5_i§


	)

38 
	#ADC_IRQH™dÀr
 
adc_i§


	)

39 
	#DACC_IRQH™dÀr
 
dacc_i§


	)

40 
	#PWM_IRQH™dÀr
 
pwm_i§


	)

41 
	#CRCCU_IRQH™dÀr
 
¸ccu_i§


	)

42 
	#ACC_IRQH™dÀr
 
acc_i§


	)

43 
	#UDP_IRQH™dÀr
 
udp_i§


	)

	@libopencm3/include/libopencmsis/sam/3u/irqhandlers.h

9 
	#SUPC_IRQH™dÀr
 
supc_i§


	)

10 
	#RSTC_IRQH™dÀr
 
r°c_i§


	)

11 
	#RTC_IRQH™dÀr
 
πc_i§


	)

12 
	#RTT_IRQH™dÀr
 
πt_i§


	)

13 
	#WDT_IRQH™dÀr
 
wdt_i§


	)

14 
	#PMC_IRQH™dÀr
 
pmc_i§


	)

15 
	#EEFC0_IRQH™dÀr
 
ìfc0_i§


	)

16 
	#EEFC1_IRQH™dÀr
 
ìfc1_i§


	)

17 
	#UART_IRQH™dÀr
 
u¨t_i§


	)

18 
	#SMC_IRQH™dÀr
 
smc_i§


	)

19 
	#PIOA_IRQH™dÀr
 
piﬂ_i§


	)

20 
	#PIOB_IRQH™dÀr
 
piob_i§


	)

21 
	#PIOC_IRQH™dÀr
 
pioc_i§


	)

22 
	#USART0_IRQH™dÀr
 
ußπ0_i§


	)

23 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

24 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

25 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

26 
	#HSMCI_IRQH™dÀr
 
hsmci_i§


	)

27 
	#TWI0_IRQH™dÀr
 
twi0_i§


	)

28 
	#TWI1_IRQH™dÀr
 
twi1_i§


	)

29 
	#SPI_IRQH™dÀr
 
•i_i§


	)

30 
	#SSC_IRQH™dÀr
 
ssc_i§


	)

31 
	#TC0_IRQH™dÀr
 
tc0_i§


	)

32 
	#TC1_IRQH™dÀr
 
tc1_i§


	)

33 
	#TC2_IRQH™dÀr
 
tc2_i§


	)

34 
	#PWM_IRQH™dÀr
 
pwm_i§


	)

35 
	#ADC12B_IRQH™dÀr
 
adc12b_i§


	)

36 
	#ADC_IRQH™dÀr
 
adc_i§


	)

37 
	#DMAC_IRQH™dÀr
 
dmac_i§


	)

38 
	#UDPHS_IRQH™dÀr
 
udphs_i§


	)

	@libopencm3/include/libopencmsis/sam/3x/irqhandlers.h

9 
	#SUPC_IRQH™dÀr
 
supc_i§


	)

10 
	#RSTC_IRQH™dÀr
 
r°c_i§


	)

11 
	#RTC_IRQH™dÀr
 
πc_i§


	)

12 
	#RTT_IRQH™dÀr
 
πt_i§


	)

13 
	#WDT_IRQH™dÀr
 
wdt_i§


	)

14 
	#PMC_IRQH™dÀr
 
pmc_i§


	)

15 
	#EEFC0_IRQH™dÀr
 
ìfc0_i§


	)

16 
	#EEFC1_IRQH™dÀr
 
ìfc1_i§


	)

17 
	#UART_IRQH™dÀr
 
u¨t_i§


	)

18 
	#SMC_SDRAMC_IRQH™dÀr
 
smc_sdømc_i§


	)

19 
	#SDRAMC_IRQH™dÀr
 
sdømc_i§


	)

20 
	#PIOA_IRQH™dÀr
 
piﬂ_i§


	)

21 
	#PIOB_IRQH™dÀr
 
piob_i§


	)

22 
	#PIOC_IRQH™dÀr
 
pioc_i§


	)

23 
	#PIOD_IRQH™dÀr
 
piod_i§


	)

24 
	#PIOE_IRQH™dÀr
 
pi€_i§


	)

25 
	#PIOF_IRQH™dÀr
 
piof_i§


	)

26 
	#USART0_IRQH™dÀr
 
ußπ0_i§


	)

27 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

28 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

29 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

30 
	#HSMCI_IRQH™dÀr
 
hsmci_i§


	)

31 
	#TWI0_IRQH™dÀr
 
twi0_i§


	)

32 
	#TWI1_IRQH™dÀr
 
twi1_i§


	)

33 
	#SPI0_IRQH™dÀr
 
•i0_i§


	)

34 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

35 
	#SSC_IRQH™dÀr
 
ssc_i§


	)

36 
	#TC0_IRQH™dÀr
 
tc0_i§


	)

37 
	#TC1_IRQH™dÀr
 
tc1_i§


	)

38 
	#TC2_IRQH™dÀr
 
tc2_i§


	)

39 
	#TC3_IRQH™dÀr
 
tc3_i§


	)

40 
	#TC4_IRQH™dÀr
 
tc4_i§


	)

41 
	#TC5_IRQH™dÀr
 
tc5_i§


	)

42 
	#TC6_IRQH™dÀr
 
tc6_i§


	)

43 
	#TC7_IRQH™dÀr
 
tc7_i§


	)

44 
	#TC8_IRQH™dÀr
 
tc8_i§


	)

45 
	#PWM_IRQH™dÀr
 
pwm_i§


	)

46 
	#ADC_IRQH™dÀr
 
adc_i§


	)

47 
	#DACC_IRQH™dÀr
 
dacc_i§


	)

48 
	#DMAC_IRQH™dÀr
 
dmac_i§


	)

49 
	#UOTGHS_IRQH™dÀr
 
uŸghs_i§


	)

50 
	#TRNG_IRQH™dÀr
 
ång_i§


	)

51 
	#EMAC_IRQH™dÀr
 
emac_i§


	)

52 
	#CAN0_IRQH™dÀr
 
ˇn0_i§


	)

53 
	#CAN1_IRQH™dÀr
 
ˇn1_i§


	)

	@libopencm3/include/libopencmsis/sam/4l/irqhandlers.h

9 
	#HFLASHC_IRQH™dÀr
 
hÊashc_i§


	)

10 
	#PDCA0_IRQH™dÀr
 
pdˇ0_i§


	)

11 
	#PDCA1_IRQH™dÀr
 
pdˇ1_i§


	)

12 
	#PDCA2_IRQH™dÀr
 
pdˇ2_i§


	)

13 
	#PDCA3_IRQH™dÀr
 
pdˇ3_i§


	)

14 
	#PDCA4_IRQH™dÀr
 
pdˇ4_i§


	)

15 
	#PDCA5_IRQH™dÀr
 
pdˇ5_i§


	)

16 
	#PDCA6_IRQH™dÀr
 
pdˇ6_i§


	)

17 
	#PDCA7_IRQH™dÀr
 
pdˇ7_i§


	)

18 
	#PDCA8_IRQH™dÀr
 
pdˇ8_i§


	)

19 
	#PDCA9_IRQH™dÀr
 
pdˇ9_i§


	)

20 
	#PDCA10_IRQH™dÀr
 
pdˇ10_i§


	)

21 
	#PDCA11_IRQH™dÀr
 
pdˇ11_i§


	)

22 
	#PDCA12_IRQH™dÀr
 
pdˇ12_i§


	)

23 
	#PDCA13_IRQH™dÀr
 
pdˇ13_i§


	)

24 
	#PDCA14_IRQH™dÀr
 
pdˇ14_i§


	)

25 
	#PDCA15_IRQH™dÀr
 
pdˇ15_i§


	)

26 
	#CRCCU_IRQH™dÀr
 
¸ccu_i§


	)

27 
	#USBC_IRQH™dÀr
 
usbc_i§


	)

28 
	#PEVC_TR_IRQH™dÀr
 
≥vc_å_i§


	)

29 
	#PEVC_OV_IRQH™dÀr
 
≥vc_ov_i§


	)

30 
	#AESA_IRQH™dÀr
 
´ß_i§


	)

31 
	#PM_IRQH™dÀr
 
pm_i§


	)

32 
	#SCIM_IRQH™dÀr
 
scim_i§


	)

33 
	#FREQM_IRQH™dÀr
 
‰eqm_i§


	)

34 
	#GPIO0_IRQH™dÀr
 
gpio0_i§


	)

35 
	#GPIO1_IRQH™dÀr
 
gpio1_i§


	)

36 
	#GPIO2_IRQH™dÀr
 
gpio2_i§


	)

37 
	#GPIO3_IRQH™dÀr
 
gpio3_i§


	)

38 
	#GPIO4_IRQH™dÀr
 
gpio4_i§


	)

39 
	#GPIO5_IRQH™dÀr
 
gpio5_i§


	)

40 
	#GPIO6_IRQH™dÀr
 
gpio6_i§


	)

41 
	#GPIO7_IRQH™dÀr
 
gpio7_i§


	)

42 
	#GPIO8_IRQH™dÀr
 
gpio8_i§


	)

43 
	#GPIO9_IRQH™dÀr
 
gpio9_i§


	)

44 
	#GPIO10_IRQH™dÀr
 
gpio10_i§


	)

45 
	#GPIO11_IRQH™dÀr
 
gpio11_i§


	)

46 
	#BPM_IRQH™dÀr
 
bpm_i§


	)

47 
	#BSCIF_IRQH™dÀr
 
bscif_i§


	)

48 
	#AST_ALARM_IRQH™dÀr
 
a°_Æ¨m_i§


	)

49 
	#AST_PER_IRQH™dÀr
 
a°_≥r_i§


	)

50 
	#AST_OVF_IRQH™dÀr
 
a°_ovf_i§


	)

51 
	#AST_READY_IRQH™dÀr
 
a°_ªady_i§


	)

52 
	#AST_CLKREADY_IRQH™dÀr
 
a°_˛kªady_i§


	)

53 
	#WDT_IRQH™dÀr
 
wdt_i§


	)

54 
	#EIC1_IRQH™dÀr
 
eic1_i§


	)

55 
	#EIC2_IRQH™dÀr
 
eic2_i§


	)

56 
	#EIC3_IRQH™dÀr
 
eic3_i§


	)

57 
	#EIC4_IRQH™dÀr
 
eic4_i§


	)

58 
	#EIC5_IRQH™dÀr
 
eic5_i§


	)

59 
	#EIC6_IRQH™dÀr
 
eic6_i§


	)

60 
	#EIC7_IRQH™dÀr
 
eic7_i§


	)

61 
	#EIC8_IRQH™dÀr
 
eic8_i§


	)

62 
	#IISC_IRQH™dÀr
 
iisc_i§


	)

63 
	#SPI_IRQH™dÀr
 
•i_i§


	)

64 
	#TC00_IRQH™dÀr
 
tc00_i§


	)

65 
	#TC01_IRQH™dÀr
 
tc01_i§


	)

66 
	#TC02_IRQH™dÀr
 
tc02_i§


	)

67 
	#TC10_IRQH™dÀr
 
tc10_i§


	)

68 
	#TC11_IRQH™dÀr
 
tc11_i§


	)

69 
	#TC12_IRQH™dÀr
 
tc12_i§


	)

70 
	#TWIM0_IRQH™dÀr
 
twim0_i§


	)

71 
	#TWIS0_IRQH™dÀr
 
twis0_i§


	)

72 
	#TWIM1_IRQH™dÀr
 
twim1_i§


	)

73 
	#TWIS1_IRQH™dÀr
 
twis1_i§


	)

74 
	#USART0_IRQH™dÀr
 
ußπ0_i§


	)

75 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

76 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

77 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

78 
	#ADCIFE_IRQH™dÀr
 
adci„_i§


	)

79 
	#DACC_IRQH™dÀr
 
dacc_i§


	)

80 
	#ACIFC_IRQH™dÀr
 
acifc_i§


	)

81 
	#ABDACB_IRQH™dÀr
 
abdacb_i§


	)

82 
	#TRNG_IRQH™dÀr
 
ång_i§


	)

83 
	#PARC_IRQH™dÀr
 
∑rc_i§


	)

84 
	#CATB_IRQH™dÀr
 
ˇtb_i§


	)

85 
	#RESERVED0_IRQH™dÀr
 
ª£rved0_i§


	)

86 
	#TWIM2_IRQH™dÀr
 
twim2_i§


	)

87 
	#TWIM3_IRQH™dÀr
 
twim3_i§


	)

88 
	#LCDCA_IRQH™dÀr
 
lcdˇ_i§


	)

	@libopencm3/include/libopencmsis/sam/d/irqhandlers.h

9 
	#PM_IRQH™dÀr
 
pm_i§


	)

10 
	#SYSCTRL_IRQH™dÀr
 
sys˘æ_i§


	)

11 
	#WDT_IRQH™dÀr
 
wdt_i§


	)

12 
	#RTC_IRQH™dÀr
 
πc_i§


	)

13 
	#EIC_IRQH™dÀr
 
eic_i§


	)

14 
	#NVMCTRL_IRQH™dÀr
 
nvm˘æ_i§


	)

15 
	#DMAC_IRQH™dÀr
 
dmac_i§


	)

16 
	#RESERVED1_IRQH™dÀr
 
ª£rved1_i§


	)

17 
	#EVSYS_IRQH™dÀr
 
evsys_i§


	)

18 
	#SERCOM0_IRQH™dÀr
 
£rcom0_i§


	)

19 
	#SERCOM1_IRQH™dÀr
 
£rcom1_i§


	)

20 
	#SERCOM2_IRQH™dÀr
 
£rcom2_i§


	)

21 
	#TCC0_IRQH™dÀr
 
tcc0_i§


	)

22 
	#TC1_IRQH™dÀr
 
tc1_i§


	)

23 
	#TC2_IRQH™dÀr
 
tc2_i§


	)

24 
	#ADC_IRQH™dÀr
 
adc_i§


	)

25 
	#AC_IRQH™dÀr
 
ac_i§


	)

26 
	#DAC_IRQH™dÀr
 
dac_i§


	)

27 
	#PTC_IRQH™dÀr
 
±c_i§


	)

	@libopencm3/include/libopencmsis/stm32/f0/irqhandlers.h

9 
	#WWDG_IRQH™dÀr
 
wwdg_i§


	)

10 
	#PVD_IRQH™dÀr
 
pvd_i§


	)

11 
	#RTC_IRQH™dÀr
 
πc_i§


	)

12 
	#FLASH_IRQH™dÀr
 
Êash_i§


	)

13 
	#RCC_IRQH™dÀr
 
rcc_i§


	)

14 
	#EXTI0_1_IRQH™dÀr
 
exti0_1_i§


	)

15 
	#EXTI2_3_IRQH™dÀr
 
exti2_3_i§


	)

16 
	#EXTI4_15_IRQH™dÀr
 
exti4_15_i§


	)

17 
	#TSC_IRQH™dÀr
 
tsc_i§


	)

18 
	#DMA1_CHANNEL1_IRQH™dÀr
 
dma1_ch™√l1_i§


	)

19 
	#DMA1_CHANNEL2_3_IRQH™dÀr
 
dma1_ch™√l2_3_i§


	)

20 
	#DMA1_CHANNEL4_5_IRQH™dÀr
 
dma1_ch™√l4_5_i§


	)

21 
	#ADC_COMP_IRQH™dÀr
 
adc_comp_i§


	)

22 
	#TIM1_BRK_UP_TRG_COM_IRQH™dÀr
 
tim1_brk_up_åg_com_i§


	)

23 
	#TIM1_CC_IRQH™dÀr
 
tim1_cc_i§


	)

24 
	#TIM2_IRQH™dÀr
 
tim2_i§


	)

25 
	#TIM3_IRQH™dÀr
 
tim3_i§


	)

26 
	#TIM6_DAC_IRQH™dÀr
 
tim6_dac_i§


	)

27 
	#TIM7_IRQH™dÀr
 
tim7_i§


	)

28 
	#TIM14_IRQH™dÀr
 
tim14_i§


	)

29 
	#TIM15_IRQH™dÀr
 
tim15_i§


	)

30 
	#TIM16_IRQH™dÀr
 
tim16_i§


	)

31 
	#TIM17_IRQH™dÀr
 
tim17_i§


	)

32 
	#I2C1_IRQH™dÀr
 
i2c1_i§


	)

33 
	#I2C2_IRQH™dÀr
 
i2c2_i§


	)

34 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

35 
	#SPI2_IRQH™dÀr
 
•i2_i§


	)

36 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

37 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

38 
	#USART3_4_IRQH™dÀr
 
ußπ3_4_i§


	)

39 
	#CEC_CAN_IRQH™dÀr
 
˚c_ˇn_i§


	)

40 
	#USB_IRQH™dÀr
 
usb_i§


	)

	@libopencm3/include/libopencmsis/stm32/f1/irqhandlers.h

9 
	#WWDG_IRQH™dÀr
 
wwdg_i§


	)

10 
	#PVD_IRQH™dÀr
 
pvd_i§


	)

11 
	#TAMPER_IRQH™dÀr
 
èm≥r_i§


	)

12 
	#RTC_IRQH™dÀr
 
πc_i§


	)

13 
	#FLASH_IRQH™dÀr
 
Êash_i§


	)

14 
	#RCC_IRQH™dÀr
 
rcc_i§


	)

15 
	#EXTI0_IRQH™dÀr
 
exti0_i§


	)

16 
	#EXTI1_IRQH™dÀr
 
exti1_i§


	)

17 
	#EXTI2_IRQH™dÀr
 
exti2_i§


	)

18 
	#EXTI3_IRQH™dÀr
 
exti3_i§


	)

19 
	#EXTI4_IRQH™dÀr
 
exti4_i§


	)

20 
	#DMA1_CHANNEL1_IRQH™dÀr
 
dma1_ch™√l1_i§


	)

21 
	#DMA1_CHANNEL2_IRQH™dÀr
 
dma1_ch™√l2_i§


	)

22 
	#DMA1_CHANNEL3_IRQH™dÀr
 
dma1_ch™√l3_i§


	)

23 
	#DMA1_CHANNEL4_IRQH™dÀr
 
dma1_ch™√l4_i§


	)

24 
	#DMA1_CHANNEL5_IRQH™dÀr
 
dma1_ch™√l5_i§


	)

25 
	#DMA1_CHANNEL6_IRQH™dÀr
 
dma1_ch™√l6_i§


	)

26 
	#DMA1_CHANNEL7_IRQH™dÀr
 
dma1_ch™√l7_i§


	)

27 
	#ADC1_2_IRQH™dÀr
 
adc1_2_i§


	)

28 
	#USB_HP_CAN_TX_IRQH™dÀr
 
usb_hp_ˇn_tx_i§


	)

29 
	#USB_LP_CAN_RX0_IRQH™dÀr
 
usb_Õ_ˇn_rx0_i§


	)

30 
	#CAN_RX1_IRQH™dÀr
 
ˇn_rx1_i§


	)

31 
	#CAN_SCE_IRQH™dÀr
 
ˇn_s˚_i§


	)

32 
	#EXTI9_5_IRQH™dÀr
 
exti9_5_i§


	)

33 
	#TIM1_BRK_IRQH™dÀr
 
tim1_brk_i§


	)

34 
	#TIM1_UP_IRQH™dÀr
 
tim1_up_i§


	)

35 
	#TIM1_TRG_COM_IRQH™dÀr
 
tim1_åg_com_i§


	)

36 
	#TIM1_CC_IRQH™dÀr
 
tim1_cc_i§


	)

37 
	#TIM2_IRQH™dÀr
 
tim2_i§


	)

38 
	#TIM3_IRQH™dÀr
 
tim3_i§


	)

39 
	#TIM4_IRQH™dÀr
 
tim4_i§


	)

40 
	#I2C1_EV_IRQH™dÀr
 
i2c1_ev_i§


	)

41 
	#I2C1_ER_IRQH™dÀr
 
i2c1_î_i§


	)

42 
	#I2C2_EV_IRQH™dÀr
 
i2c2_ev_i§


	)

43 
	#I2C2_ER_IRQH™dÀr
 
i2c2_î_i§


	)

44 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

45 
	#SPI2_IRQH™dÀr
 
•i2_i§


	)

46 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

47 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

48 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

49 
	#EXTI15_10_IRQH™dÀr
 
exti15_10_i§


	)

50 
	#RTC_ALARM_IRQH™dÀr
 
πc_Æ¨m_i§


	)

51 
	#USB_WAKEUP_IRQH™dÀr
 
usb_wakeup_i§


	)

52 
	#TIM8_BRK_IRQH™dÀr
 
tim8_brk_i§


	)

53 
	#TIM8_UP_IRQH™dÀr
 
tim8_up_i§


	)

54 
	#TIM8_TRG_COM_IRQH™dÀr
 
tim8_åg_com_i§


	)

55 
	#TIM8_CC_IRQH™dÀr
 
tim8_cc_i§


	)

56 
	#ADC3_IRQH™dÀr
 
adc3_i§


	)

57 
	#FSMC_IRQH™dÀr
 
fsmc_i§


	)

58 
	#SDIO_IRQH™dÀr
 
sdio_i§


	)

59 
	#TIM5_IRQH™dÀr
 
tim5_i§


	)

60 
	#SPI3_IRQH™dÀr
 
•i3_i§


	)

61 
	#UART4_IRQH™dÀr
 
u¨t4_i§


	)

62 
	#UART5_IRQH™dÀr
 
u¨t5_i§


	)

63 
	#TIM6_IRQH™dÀr
 
tim6_i§


	)

64 
	#TIM7_IRQH™dÀr
 
tim7_i§


	)

65 
	#DMA2_CHANNEL1_IRQH™dÀr
 
dma2_ch™√l1_i§


	)

66 
	#DMA2_CHANNEL2_IRQH™dÀr
 
dma2_ch™√l2_i§


	)

67 
	#DMA2_CHANNEL3_IRQH™dÀr
 
dma2_ch™√l3_i§


	)

68 
	#DMA2_CHANNEL4_5_IRQH™dÀr
 
dma2_ch™√l4_5_i§


	)

69 
	#DMA2_CHANNEL5_IRQH™dÀr
 
dma2_ch™√l5_i§


	)

70 
	#ETH_IRQH™dÀr
 
ëh_i§


	)

71 
	#ETH_WKUP_IRQH™dÀr
 
ëh_wkup_i§


	)

72 
	#CAN2_TX_IRQH™dÀr
 
ˇn2_tx_i§


	)

73 
	#CAN2_RX0_IRQH™dÀr
 
ˇn2_rx0_i§


	)

74 
	#CAN2_RX1_IRQH™dÀr
 
ˇn2_rx1_i§


	)

75 
	#CAN2_SCE_IRQH™dÀr
 
ˇn2_s˚_i§


	)

76 
	#OTG_FS_IRQH™dÀr
 
Ÿg_fs_i§


	)

	@libopencm3/include/libopencmsis/stm32/f2/irqhandlers.h

9 
	#NVIC_WWDG_IRQH™dÀr
 
nvic_wwdg_i§


	)

10 
	#PVD_IRQH™dÀr
 
pvd_i§


	)

11 
	#TAMP_STAMP_IRQH™dÀr
 
èmp_°amp_i§


	)

12 
	#RTC_WKUP_IRQH™dÀr
 
πc_wkup_i§


	)

13 
	#FLASH_IRQH™dÀr
 
Êash_i§


	)

14 
	#RCC_IRQH™dÀr
 
rcc_i§


	)

15 
	#EXTI0_IRQH™dÀr
 
exti0_i§


	)

16 
	#EXTI1_IRQH™dÀr
 
exti1_i§


	)

17 
	#EXTI2_IRQH™dÀr
 
exti2_i§


	)

18 
	#EXTI3_IRQH™dÀr
 
exti3_i§


	)

19 
	#EXTI4_IRQH™dÀr
 
exti4_i§


	)

20 
	#DMA1_STREAM0_IRQH™dÀr
 
dma1_°ªam0_i§


	)

21 
	#DMA1_STREAM1_IRQH™dÀr
 
dma1_°ªam1_i§


	)

22 
	#DMA1_STREAM2_IRQH™dÀr
 
dma1_°ªam2_i§


	)

23 
	#DMA1_STREAM3_IRQH™dÀr
 
dma1_°ªam3_i§


	)

24 
	#DMA1_STREAM4_IRQH™dÀr
 
dma1_°ªam4_i§


	)

25 
	#DMA1_STREAM5_IRQH™dÀr
 
dma1_°ªam5_i§


	)

26 
	#DMA1_STREAM6_IRQH™dÀr
 
dma1_°ªam6_i§


	)

27 
	#ADC_IRQH™dÀr
 
adc_i§


	)

28 
	#CAN1_TX_IRQH™dÀr
 
ˇn1_tx_i§


	)

29 
	#CAN1_RX0_IRQH™dÀr
 
ˇn1_rx0_i§


	)

30 
	#CAN1_RX1_IRQH™dÀr
 
ˇn1_rx1_i§


	)

31 
	#CAN1_SCE_IRQH™dÀr
 
ˇn1_s˚_i§


	)

32 
	#EXTI9_5_IRQH™dÀr
 
exti9_5_i§


	)

33 
	#TIM1_BRK_TIM9_IRQH™dÀr
 
tim1_brk_tim9_i§


	)

34 
	#TIM1_UP_TIM10_IRQH™dÀr
 
tim1_up_tim10_i§


	)

35 
	#TIM1_TRG_COM_TIM11_IRQH™dÀr
 
tim1_åg_com_tim11_i§


	)

36 
	#TIM1_CC_IRQH™dÀr
 
tim1_cc_i§


	)

37 
	#TIM2_IRQH™dÀr
 
tim2_i§


	)

38 
	#TIM3_IRQH™dÀr
 
tim3_i§


	)

39 
	#TIM4_IRQH™dÀr
 
tim4_i§


	)

40 
	#I2C1_EV_IRQH™dÀr
 
i2c1_ev_i§


	)

41 
	#I2C1_ER_IRQH™dÀr
 
i2c1_î_i§


	)

42 
	#I2C2_EV_IRQH™dÀr
 
i2c2_ev_i§


	)

43 
	#I2C2_ER_IRQH™dÀr
 
i2c2_î_i§


	)

44 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

45 
	#SPI2_IRQH™dÀr
 
•i2_i§


	)

46 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

47 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

48 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

49 
	#EXTI15_10_IRQH™dÀr
 
exti15_10_i§


	)

50 
	#RTC_ALARM_IRQH™dÀr
 
πc_Æ¨m_i§


	)

51 
	#USB_FS_WKUP_IRQH™dÀr
 
usb_fs_wkup_i§


	)

52 
	#TIM8_BRK_TIM12_IRQH™dÀr
 
tim8_brk_tim12_i§


	)

53 
	#TIM8_UP_TIM13_IRQH™dÀr
 
tim8_up_tim13_i§


	)

54 
	#TIM8_TRG_COM_TIM14_IRQH™dÀr
 
tim8_åg_com_tim14_i§


	)

55 
	#TIM8_CC_IRQH™dÀr
 
tim8_cc_i§


	)

56 
	#DMA1_STREAM7_IRQH™dÀr
 
dma1_°ªam7_i§


	)

57 
	#FSMC_IRQH™dÀr
 
fsmc_i§


	)

58 
	#SDIO_IRQH™dÀr
 
sdio_i§


	)

59 
	#TIM5_IRQH™dÀr
 
tim5_i§


	)

60 
	#SPI3_IRQH™dÀr
 
•i3_i§


	)

61 
	#UART4_IRQH™dÀr
 
u¨t4_i§


	)

62 
	#UART5_IRQH™dÀr
 
u¨t5_i§


	)

63 
	#TIM6_DAC_IRQH™dÀr
 
tim6_dac_i§


	)

64 
	#TIM7_IRQH™dÀr
 
tim7_i§


	)

65 
	#DMA2_STREAM0_IRQH™dÀr
 
dma2_°ªam0_i§


	)

66 
	#DMA2_STREAM1_IRQH™dÀr
 
dma2_°ªam1_i§


	)

67 
	#DMA2_STREAM2_IRQH™dÀr
 
dma2_°ªam2_i§


	)

68 
	#DMA2_STREAM3_IRQH™dÀr
 
dma2_°ªam3_i§


	)

69 
	#DMA2_STREAM4_IRQH™dÀr
 
dma2_°ªam4_i§


	)

70 
	#ETH_IRQH™dÀr
 
ëh_i§


	)

71 
	#ETH_WKUP_IRQH™dÀr
 
ëh_wkup_i§


	)

72 
	#CAN2_TX_IRQH™dÀr
 
ˇn2_tx_i§


	)

73 
	#CAN2_RX0_IRQH™dÀr
 
ˇn2_rx0_i§


	)

74 
	#CAN2_RX1_IRQH™dÀr
 
ˇn2_rx1_i§


	)

75 
	#CAN2_SCE_IRQH™dÀr
 
ˇn2_s˚_i§


	)

76 
	#OTG_FS_IRQH™dÀr
 
Ÿg_fs_i§


	)

77 
	#DMA2_STREAM5_IRQH™dÀr
 
dma2_°ªam5_i§


	)

78 
	#DMA2_STREAM6_IRQH™dÀr
 
dma2_°ªam6_i§


	)

79 
	#DMA2_STREAM7_IRQH™dÀr
 
dma2_°ªam7_i§


	)

80 
	#USART6_IRQH™dÀr
 
ußπ6_i§


	)

81 
	#I2C3_EV_IRQH™dÀr
 
i2c3_ev_i§


	)

82 
	#I2C3_ER_IRQH™dÀr
 
i2c3_î_i§


	)

83 
	#OTG_HS_EP1_OUT_IRQH™dÀr
 
Ÿg_hs_ï1_out_i§


	)

84 
	#OTG_HS_EP1_IN_IRQH™dÀr
 
Ÿg_hs_ï1_ö_i§


	)

85 
	#OTG_HS_WKUP_IRQH™dÀr
 
Ÿg_hs_wkup_i§


	)

86 
	#OTG_HS_IRQH™dÀr
 
Ÿg_hs_i§


	)

87 
	#DCMI_IRQH™dÀr
 
dcmi_i§


	)

88 
	#CRYP_IRQH™dÀr
 
¸yp_i§


	)

89 
	#HASH_RNG_IRQH™dÀr
 
hash_∫g_i§


	)

	@libopencm3/include/libopencmsis/stm32/f3/irqhandlers.h

9 
	#NVIC_WWDG_IRQH™dÀr
 
nvic_wwdg_i§


	)

10 
	#PVD_IRQH™dÀr
 
pvd_i§


	)

11 
	#TAMP_STAMP_IRQH™dÀr
 
èmp_°amp_i§


	)

12 
	#RTC_WKUP_IRQH™dÀr
 
πc_wkup_i§


	)

13 
	#FLASH_IRQH™dÀr
 
Êash_i§


	)

14 
	#RCC_IRQH™dÀr
 
rcc_i§


	)

15 
	#EXTI0_IRQH™dÀr
 
exti0_i§


	)

16 
	#EXTI1_IRQH™dÀr
 
exti1_i§


	)

17 
	#EXTI2_TSC_IRQH™dÀr
 
exti2_tsc_i§


	)

18 
	#EXTI3_IRQH™dÀr
 
exti3_i§


	)

19 
	#EXTI4_IRQH™dÀr
 
exti4_i§


	)

20 
	#DMA1_CHANNEL1_IRQH™dÀr
 
dma1_ch™√l1_i§


	)

21 
	#DMA1_CHANNEL2_IRQH™dÀr
 
dma1_ch™√l2_i§


	)

22 
	#DMA1_CHANNEL3_IRQH™dÀr
 
dma1_ch™√l3_i§


	)

23 
	#DMA1_CHANNEL4_IRQH™dÀr
 
dma1_ch™√l4_i§


	)

24 
	#DMA1_CHANNEL5_IRQH™dÀr
 
dma1_ch™√l5_i§


	)

25 
	#DMA1_CHANNEL6_IRQH™dÀr
 
dma1_ch™√l6_i§


	)

26 
	#DMA1_CHANNEL7_IRQH™dÀr
 
dma1_ch™√l7_i§


	)

27 
	#ADC1_2_IRQH™dÀr
 
adc1_2_i§


	)

28 
	#USB_HP_CAN1_TX_IRQH™dÀr
 
usb_hp_ˇn1_tx_i§


	)

29 
	#USB_LP_CAN1_RX0_IRQH™dÀr
 
usb_Õ_ˇn1_rx0_i§


	)

30 
	#CAN1_RX1_IRQH™dÀr
 
ˇn1_rx1_i§


	)

31 
	#CAN1_SCE_IRQH™dÀr
 
ˇn1_s˚_i§


	)

32 
	#EXTI9_5_IRQH™dÀr
 
exti9_5_i§


	)

33 
	#TIM1_BRK_TIM15_IRQH™dÀr
 
tim1_brk_tim15_i§


	)

34 
	#TIM1_UP_TIM16_IRQH™dÀr
 
tim1_up_tim16_i§


	)

35 
	#TIM1_TRG_COM_TIM17_IRQH™dÀr
 
tim1_åg_com_tim17_i§


	)

36 
	#TIM1_CC_IRQH™dÀr
 
tim1_cc_i§


	)

37 
	#TIM2_IRQH™dÀr
 
tim2_i§


	)

38 
	#TIM3_IRQH™dÀr
 
tim3_i§


	)

39 
	#TIM4_IRQH™dÀr
 
tim4_i§


	)

40 
	#I2C1_EV_EXTI23_IRQH™dÀr
 
i2c1_ev_exti23_i§


	)

41 
	#I2C1_ER_IRQH™dÀr
 
i2c1_î_i§


	)

42 
	#I2C2_EV_EXTI24_IRQH™dÀr
 
i2c2_ev_exti24_i§


	)

43 
	#I2C2_ER_IRQH™dÀr
 
i2c2_î_i§


	)

44 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

45 
	#SPI2_IRQH™dÀr
 
•i2_i§


	)

46 
	#USART1_EXTI25_IRQH™dÀr
 
ußπ1_exti25_i§


	)

47 
	#USART2_EXTI26_IRQH™dÀr
 
ußπ2_exti26_i§


	)

48 
	#USART3_EXTI28_IRQH™dÀr
 
ußπ3_exti28_i§


	)

49 
	#EXTI15_10_IRQH™dÀr
 
exti15_10_i§


	)

50 
	#RTC_ALARM_IRQH™dÀr
 
πc_Æ¨m_i§


	)

51 
	#USB_WKUP_A_IRQH™dÀr
 
usb_wkup_a_i§


	)

52 
	#TIM8_BRK_IRQH™dÀr
 
tim8_brk_i§


	)

53 
	#TIM8_UP_IRQH™dÀr
 
tim8_up_i§


	)

54 
	#TIM8_TRG_COM_IRQH™dÀr
 
tim8_åg_com_i§


	)

55 
	#TIM8_CC_IRQH™dÀr
 
tim8_cc_i§


	)

56 
	#ADC3_IRQH™dÀr
 
adc3_i§


	)

57 
	#RESERVED_1_IRQH™dÀr
 
ª£rved_1_i§


	)

58 
	#RESERVED_2_IRQH™dÀr
 
ª£rved_2_i§


	)

59 
	#RESERVED_3_IRQH™dÀr
 
ª£rved_3_i§


	)

60 
	#SPI3_IRQH™dÀr
 
•i3_i§


	)

61 
	#UART4_EXTI34_IRQH™dÀr
 
u¨t4_exti34_i§


	)

62 
	#UART5_EXTI35_IRQH™dÀr
 
u¨t5_exti35_i§


	)

63 
	#TIM6_DAC_IRQH™dÀr
 
tim6_dac_i§


	)

64 
	#TIM7_IRQH™dÀr
 
tim7_i§


	)

65 
	#DMA2_CHANNEL1_IRQH™dÀr
 
dma2_ch™√l1_i§


	)

66 
	#DMA2_CHANNEL2_IRQH™dÀr
 
dma2_ch™√l2_i§


	)

67 
	#DMA2_CHANNEL3_IRQH™dÀr
 
dma2_ch™√l3_i§


	)

68 
	#DMA2_CHANNEL4_IRQH™dÀr
 
dma2_ch™√l4_i§


	)

69 
	#DMA2_CHANNEL5_IRQH™dÀr
 
dma2_ch™√l5_i§


	)

70 
	#ETH_IRQH™dÀr
 
ëh_i§


	)

71 
	#RESERVED_4_IRQH™dÀr
 
ª£rved_4_i§


	)

72 
	#RESERVED_5_IRQH™dÀr
 
ª£rved_5_i§


	)

73 
	#COMP123_IRQH™dÀr
 
comp123_i§


	)

74 
	#COMP456_IRQH™dÀr
 
comp456_i§


	)

75 
	#COMP7_IRQH™dÀr
 
comp7_i§


	)

76 
	#HRTIM_MASTER_IRQH™dÀr
 
hπim_ma°î_i§


	)

77 
	#HRTIM_TIMA_IRQH™dÀr
 
hπim_tima_i§


	)

78 
	#HRTIM_TIMB_IRQH™dÀr
 
hπim_timb_i§


	)

79 
	#HRTIM_TIMC_IRQH™dÀr
 
hπim_timc_i§


	)

80 
	#HRTIM_TIMD_IRQH™dÀr
 
hπim_timd_i§


	)

81 
	#HRTIM_TIME_IRQH™dÀr
 
hπim_time_i§


	)

82 
	#HRTIM_FLT_IRQH™dÀr
 
hπim_Êt_i§


	)

83 
	#USB_HP_IRQH™dÀr
 
usb_hp_i§


	)

84 
	#USB_LP_IRQH™dÀr
 
usb_Õ_i§


	)

85 
	#USB_WKUP_IRQH™dÀr
 
usb_wkup_i§


	)

86 
	#RESERVED_13_IRQH™dÀr
 
ª£rved_13_i§


	)

87 
	#RESERVED_14_IRQH™dÀr
 
ª£rved_14_i§


	)

88 
	#RESERVED_15_IRQH™dÀr
 
ª£rved_15_i§


	)

89 
	#RESERVED_16_IRQH™dÀr
 
ª£rved_16_i§


	)

	@libopencm3/include/libopencmsis/stm32/f4/irqhandlers.h

9 
	#NVIC_WWDG_IRQH™dÀr
 
nvic_wwdg_i§


	)

10 
	#PVD_IRQH™dÀr
 
pvd_i§


	)

11 
	#TAMP_STAMP_IRQH™dÀr
 
èmp_°amp_i§


	)

12 
	#RTC_WKUP_IRQH™dÀr
 
πc_wkup_i§


	)

13 
	#FLASH_IRQH™dÀr
 
Êash_i§


	)

14 
	#RCC_IRQH™dÀr
 
rcc_i§


	)

15 
	#EXTI0_IRQH™dÀr
 
exti0_i§


	)

16 
	#EXTI1_IRQH™dÀr
 
exti1_i§


	)

17 
	#EXTI2_IRQH™dÀr
 
exti2_i§


	)

18 
	#EXTI3_IRQH™dÀr
 
exti3_i§


	)

19 
	#EXTI4_IRQH™dÀr
 
exti4_i§


	)

20 
	#DMA1_STREAM0_IRQH™dÀr
 
dma1_°ªam0_i§


	)

21 
	#DMA1_STREAM1_IRQH™dÀr
 
dma1_°ªam1_i§


	)

22 
	#DMA1_STREAM2_IRQH™dÀr
 
dma1_°ªam2_i§


	)

23 
	#DMA1_STREAM3_IRQH™dÀr
 
dma1_°ªam3_i§


	)

24 
	#DMA1_STREAM4_IRQH™dÀr
 
dma1_°ªam4_i§


	)

25 
	#DMA1_STREAM5_IRQH™dÀr
 
dma1_°ªam5_i§


	)

26 
	#DMA1_STREAM6_IRQH™dÀr
 
dma1_°ªam6_i§


	)

27 
	#ADC_IRQH™dÀr
 
adc_i§


	)

28 
	#CAN1_TX_IRQH™dÀr
 
ˇn1_tx_i§


	)

29 
	#CAN1_RX0_IRQH™dÀr
 
ˇn1_rx0_i§


	)

30 
	#CAN1_RX1_IRQH™dÀr
 
ˇn1_rx1_i§


	)

31 
	#CAN1_SCE_IRQH™dÀr
 
ˇn1_s˚_i§


	)

32 
	#EXTI9_5_IRQH™dÀr
 
exti9_5_i§


	)

33 
	#TIM1_BRK_TIM9_IRQH™dÀr
 
tim1_brk_tim9_i§


	)

34 
	#TIM1_UP_TIM10_IRQH™dÀr
 
tim1_up_tim10_i§


	)

35 
	#TIM1_TRG_COM_TIM11_IRQH™dÀr
 
tim1_åg_com_tim11_i§


	)

36 
	#TIM1_CC_IRQH™dÀr
 
tim1_cc_i§


	)

37 
	#TIM2_IRQH™dÀr
 
tim2_i§


	)

38 
	#TIM3_IRQH™dÀr
 
tim3_i§


	)

39 
	#TIM4_IRQH™dÀr
 
tim4_i§


	)

40 
	#I2C1_EV_IRQH™dÀr
 
i2c1_ev_i§


	)

41 
	#I2C1_ER_IRQH™dÀr
 
i2c1_î_i§


	)

42 
	#I2C2_EV_IRQH™dÀr
 
i2c2_ev_i§


	)

43 
	#I2C2_ER_IRQH™dÀr
 
i2c2_î_i§


	)

44 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

45 
	#SPI2_IRQH™dÀr
 
•i2_i§


	)

46 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

47 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

48 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

49 
	#EXTI15_10_IRQH™dÀr
 
exti15_10_i§


	)

50 
	#RTC_ALARM_IRQH™dÀr
 
πc_Æ¨m_i§


	)

51 
	#USB_FS_WKUP_IRQH™dÀr
 
usb_fs_wkup_i§


	)

52 
	#TIM8_BRK_TIM12_IRQH™dÀr
 
tim8_brk_tim12_i§


	)

53 
	#TIM8_UP_TIM13_IRQH™dÀr
 
tim8_up_tim13_i§


	)

54 
	#TIM8_TRG_COM_TIM14_IRQH™dÀr
 
tim8_åg_com_tim14_i§


	)

55 
	#TIM8_CC_IRQH™dÀr
 
tim8_cc_i§


	)

56 
	#DMA1_STREAM7_IRQH™dÀr
 
dma1_°ªam7_i§


	)

57 
	#FSMC_IRQH™dÀr
 
fsmc_i§


	)

58 
	#SDIO_IRQH™dÀr
 
sdio_i§


	)

59 
	#TIM5_IRQH™dÀr
 
tim5_i§


	)

60 
	#SPI3_IRQH™dÀr
 
•i3_i§


	)

61 
	#UART4_IRQH™dÀr
 
u¨t4_i§


	)

62 
	#UART5_IRQH™dÀr
 
u¨t5_i§


	)

63 
	#TIM6_DAC_IRQH™dÀr
 
tim6_dac_i§


	)

64 
	#TIM7_IRQH™dÀr
 
tim7_i§


	)

65 
	#DMA2_STREAM0_IRQH™dÀr
 
dma2_°ªam0_i§


	)

66 
	#DMA2_STREAM1_IRQH™dÀr
 
dma2_°ªam1_i§


	)

67 
	#DMA2_STREAM2_IRQH™dÀr
 
dma2_°ªam2_i§


	)

68 
	#DMA2_STREAM3_IRQH™dÀr
 
dma2_°ªam3_i§


	)

69 
	#DMA2_STREAM4_IRQH™dÀr
 
dma2_°ªam4_i§


	)

70 
	#ETH_IRQH™dÀr
 
ëh_i§


	)

71 
	#ETH_WKUP_IRQH™dÀr
 
ëh_wkup_i§


	)

72 
	#CAN2_TX_IRQH™dÀr
 
ˇn2_tx_i§


	)

73 
	#CAN2_RX0_IRQH™dÀr
 
ˇn2_rx0_i§


	)

74 
	#CAN2_RX1_IRQH™dÀr
 
ˇn2_rx1_i§


	)

75 
	#CAN2_SCE_IRQH™dÀr
 
ˇn2_s˚_i§


	)

76 
	#OTG_FS_IRQH™dÀr
 
Ÿg_fs_i§


	)

77 
	#DMA2_STREAM5_IRQH™dÀr
 
dma2_°ªam5_i§


	)

78 
	#DMA2_STREAM6_IRQH™dÀr
 
dma2_°ªam6_i§


	)

79 
	#DMA2_STREAM7_IRQH™dÀr
 
dma2_°ªam7_i§


	)

80 
	#USART6_IRQH™dÀr
 
ußπ6_i§


	)

81 
	#I2C3_EV_IRQH™dÀr
 
i2c3_ev_i§


	)

82 
	#I2C3_ER_IRQH™dÀr
 
i2c3_î_i§


	)

83 
	#OTG_HS_EP1_OUT_IRQH™dÀr
 
Ÿg_hs_ï1_out_i§


	)

84 
	#OTG_HS_EP1_IN_IRQH™dÀr
 
Ÿg_hs_ï1_ö_i§


	)

85 
	#OTG_HS_WKUP_IRQH™dÀr
 
Ÿg_hs_wkup_i§


	)

86 
	#OTG_HS_IRQH™dÀr
 
Ÿg_hs_i§


	)

87 
	#DCMI_IRQH™dÀr
 
dcmi_i§


	)

88 
	#CRYP_IRQH™dÀr
 
¸yp_i§


	)

89 
	#HASH_RNG_IRQH™dÀr
 
hash_∫g_i§


	)

90 
	#FPU_IRQH™dÀr
 
Âu_i§


	)

91 
	#UART7_IRQH™dÀr
 
u¨t7_i§


	)

92 
	#UART8_IRQH™dÀr
 
u¨t8_i§


	)

93 
	#SPI4_IRQH™dÀr
 
•i4_i§


	)

94 
	#SPI5_IRQH™dÀr
 
•i5_i§


	)

95 
	#SPI6_IRQH™dÀr
 
•i6_i§


	)

96 
	#SAI1_IRQH™dÀr
 
ßi1_i§


	)

97 
	#LCD_TFT_IRQH™dÀr
 
lcd_t·_i§


	)

98 
	#LCD_TFT_ERR_IRQH™dÀr
 
lcd_t·_îr_i§


	)

99 
	#DMA2D_IRQH™dÀr
 
dma2d_i§


	)

	@libopencm3/include/libopencmsis/stm32/f7/irqhandlers.h

9 
	#NVIC_WWDG_IRQH™dÀr
 
nvic_wwdg_i§


	)

10 
	#PVD_IRQH™dÀr
 
pvd_i§


	)

11 
	#TAMP_STAMP_IRQH™dÀr
 
èmp_°amp_i§


	)

12 
	#RTC_WKUP_IRQH™dÀr
 
πc_wkup_i§


	)

13 
	#FLASH_IRQH™dÀr
 
Êash_i§


	)

14 
	#RCC_IRQH™dÀr
 
rcc_i§


	)

15 
	#EXTI0_IRQH™dÀr
 
exti0_i§


	)

16 
	#EXTI1_IRQH™dÀr
 
exti1_i§


	)

17 
	#EXTI2_IRQH™dÀr
 
exti2_i§


	)

18 
	#EXTI3_IRQH™dÀr
 
exti3_i§


	)

19 
	#EXTI4_IRQH™dÀr
 
exti4_i§


	)

20 
	#DMA1_STREAM0_IRQH™dÀr
 
dma1_°ªam0_i§


	)

21 
	#DMA1_STREAM1_IRQH™dÀr
 
dma1_°ªam1_i§


	)

22 
	#DMA1_STREAM2_IRQH™dÀr
 
dma1_°ªam2_i§


	)

23 
	#DMA1_STREAM3_IRQH™dÀr
 
dma1_°ªam3_i§


	)

24 
	#DMA1_STREAM4_IRQH™dÀr
 
dma1_°ªam4_i§


	)

25 
	#DMA1_STREAM5_IRQH™dÀr
 
dma1_°ªam5_i§


	)

26 
	#DMA1_STREAM6_IRQH™dÀr
 
dma1_°ªam6_i§


	)

27 
	#ADC_IRQH™dÀr
 
adc_i§


	)

28 
	#CAN1_TX_IRQH™dÀr
 
ˇn1_tx_i§


	)

29 
	#CAN1_RX0_IRQH™dÀr
 
ˇn1_rx0_i§


	)

30 
	#CAN1_RX1_IRQH™dÀr
 
ˇn1_rx1_i§


	)

31 
	#CAN1_SCE_IRQH™dÀr
 
ˇn1_s˚_i§


	)

32 
	#EXTI9_5_IRQH™dÀr
 
exti9_5_i§


	)

33 
	#TIM1_BRK_TIM9_IRQH™dÀr
 
tim1_brk_tim9_i§


	)

34 
	#TIM1_UP_TIM10_IRQH™dÀr
 
tim1_up_tim10_i§


	)

35 
	#TIM1_TRG_COM_TIM11_IRQH™dÀr
 
tim1_åg_com_tim11_i§


	)

36 
	#TIM1_CC_IRQH™dÀr
 
tim1_cc_i§


	)

37 
	#TIM2_IRQH™dÀr
 
tim2_i§


	)

38 
	#TIM3_IRQH™dÀr
 
tim3_i§


	)

39 
	#TIM4_IRQH™dÀr
 
tim4_i§


	)

40 
	#I2C1_EV_IRQH™dÀr
 
i2c1_ev_i§


	)

41 
	#I2C1_ER_IRQH™dÀr
 
i2c1_î_i§


	)

42 
	#I2C2_EV_IRQH™dÀr
 
i2c2_ev_i§


	)

43 
	#I2C2_ER_IRQH™dÀr
 
i2c2_î_i§


	)

44 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

45 
	#SPI2_IRQH™dÀr
 
•i2_i§


	)

46 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

47 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

48 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

49 
	#EXTI15_10_IRQH™dÀr
 
exti15_10_i§


	)

50 
	#RTC_ALARM_IRQH™dÀr
 
πc_Æ¨m_i§


	)

51 
	#USB_FS_WKUP_IRQH™dÀr
 
usb_fs_wkup_i§


	)

52 
	#TIM8_BRK_TIM12_IRQH™dÀr
 
tim8_brk_tim12_i§


	)

53 
	#TIM8_UP_TIM13_IRQH™dÀr
 
tim8_up_tim13_i§


	)

54 
	#TIM8_TRG_COM_TIM14_IRQH™dÀr
 
tim8_åg_com_tim14_i§


	)

55 
	#TIM8_CC_IRQH™dÀr
 
tim8_cc_i§


	)

56 
	#DMA1_STREAM7_IRQH™dÀr
 
dma1_°ªam7_i§


	)

57 
	#FSMC_IRQH™dÀr
 
fsmc_i§


	)

58 
	#SDMMC1_IRQH™dÀr
 
sdmmc1_i§


	)

59 
	#TIM5_IRQH™dÀr
 
tim5_i§


	)

60 
	#SPI3_IRQH™dÀr
 
•i3_i§


	)

61 
	#UART4_IRQH™dÀr
 
u¨t4_i§


	)

62 
	#UART5_IRQH™dÀr
 
u¨t5_i§


	)

63 
	#TIM6_DAC_IRQH™dÀr
 
tim6_dac_i§


	)

64 
	#TIM7_IRQH™dÀr
 
tim7_i§


	)

65 
	#DMA2_STREAM0_IRQH™dÀr
 
dma2_°ªam0_i§


	)

66 
	#DMA2_STREAM1_IRQH™dÀr
 
dma2_°ªam1_i§


	)

67 
	#DMA2_STREAM2_IRQH™dÀr
 
dma2_°ªam2_i§


	)

68 
	#DMA2_STREAM3_IRQH™dÀr
 
dma2_°ªam3_i§


	)

69 
	#DMA2_STREAM4_IRQH™dÀr
 
dma2_°ªam4_i§


	)

70 
	#ETH_IRQH™dÀr
 
ëh_i§


	)

71 
	#ETH_WKUP_IRQH™dÀr
 
ëh_wkup_i§


	)

72 
	#CAN2_TX_IRQH™dÀr
 
ˇn2_tx_i§


	)

73 
	#CAN2_RX0_IRQH™dÀr
 
ˇn2_rx0_i§


	)

74 
	#CAN2_RX1_IRQH™dÀr
 
ˇn2_rx1_i§


	)

75 
	#CAN2_SCE_IRQH™dÀr
 
ˇn2_s˚_i§


	)

76 
	#OTG_FS_IRQH™dÀr
 
Ÿg_fs_i§


	)

77 
	#DMA2_STREAM5_IRQH™dÀr
 
dma2_°ªam5_i§


	)

78 
	#DMA2_STREAM6_IRQH™dÀr
 
dma2_°ªam6_i§


	)

79 
	#DMA2_STREAM7_IRQH™dÀr
 
dma2_°ªam7_i§


	)

80 
	#USART6_IRQH™dÀr
 
ußπ6_i§


	)

81 
	#I2C3_EV_IRQH™dÀr
 
i2c3_ev_i§


	)

82 
	#I2C3_ER_IRQH™dÀr
 
i2c3_î_i§


	)

83 
	#OTG_HS_EP1_OUT_IRQH™dÀr
 
Ÿg_hs_ï1_out_i§


	)

84 
	#OTG_HS_EP1_IN_IRQH™dÀr
 
Ÿg_hs_ï1_ö_i§


	)

85 
	#OTG_HS_WKUP_IRQH™dÀr
 
Ÿg_hs_wkup_i§


	)

86 
	#OTG_HS_IRQH™dÀr
 
Ÿg_hs_i§


	)

87 
	#DCMI_IRQH™dÀr
 
dcmi_i§


	)

88 
	#CRYP_IRQH™dÀr
 
¸yp_i§


	)

89 
	#HASH_RNG_IRQH™dÀr
 
hash_∫g_i§


	)

90 
	#FPU_IRQH™dÀr
 
Âu_i§


	)

91 
	#UART7_IRQH™dÀr
 
u¨t7_i§


	)

92 
	#UART8_IRQH™dÀr
 
u¨t8_i§


	)

93 
	#SPI4_IRQH™dÀr
 
•i4_i§


	)

94 
	#SPI5_IRQH™dÀr
 
•i5_i§


	)

95 
	#SPI6_IRQH™dÀr
 
•i6_i§


	)

96 
	#SAI1_IRQH™dÀr
 
ßi1_i§


	)

97 
	#LCD_TFT_IRQH™dÀr
 
lcd_t·_i§


	)

98 
	#LCD_TFT_ERR_IRQH™dÀr
 
lcd_t·_îr_i§


	)

99 
	#DMA2D_IRQH™dÀr
 
dma2d_i§


	)

100 
	#SAI2_IRQH™dÀr
 
ßi2_i§


	)

101 
	#QUADSPI_IRQH™dÀr
 
quad•i_i§


	)

102 
	#I2C4_EV_IRQH™dÀr
 
i2c4_ev_i§


	)

103 
	#I2C4_ER_IRQH™dÀr
 
i2c4_î_i§


	)

104 
	#SPDIFRX_IRQH™dÀr
 
•di‰x_i§


	)

	@libopencm3/include/libopencmsis/stm32/l0/irqhandlers.h

9 
	#WWDG_IRQH™dÀr
 
wwdg_i§


	)

10 
	#PVD_IRQH™dÀr
 
pvd_i§


	)

11 
	#RTC_IRQH™dÀr
 
πc_i§


	)

12 
	#FLASH_IRQH™dÀr
 
Êash_i§


	)

13 
	#RCC_IRQH™dÀr
 
rcc_i§


	)

14 
	#EXTI0_1_IRQH™dÀr
 
exti0_1_i§


	)

15 
	#EXTI2_3_IRQH™dÀr
 
exti2_3_i§


	)

16 
	#EXTI4_15_IRQH™dÀr
 
exti4_15_i§


	)

17 
	#TSC_IRQH™dÀr
 
tsc_i§


	)

18 
	#DMA1_CHANNEL1_IRQH™dÀr
 
dma1_ch™√l1_i§


	)

19 
	#DMA1_CHANNEL2_3_IRQH™dÀr
 
dma1_ch™√l2_3_i§


	)

20 
	#DMA1_CHANNEL4_5_IRQH™dÀr
 
dma1_ch™√l4_5_i§


	)

21 
	#ADC_COMP_IRQH™dÀr
 
adc_comp_i§


	)

22 
	#LPTIM1_IRQH™dÀr
 
Õtim1_i§


	)

23 
	#USART4_5_IRQH™dÀr
 
ußπ4_5_i§


	)

24 
	#TIM2_IRQH™dÀr
 
tim2_i§


	)

25 
	#TIM3_IRQH™dÀr
 
tim3_i§


	)

26 
	#TIM6_DAC_IRQH™dÀr
 
tim6_dac_i§


	)

27 
	#TIM7_IRQH™dÀr
 
tim7_i§


	)

28 
	#RESERVED4_IRQH™dÀr
 
ª£rved4_i§


	)

29 
	#TIM21_IRQH™dÀr
 
tim21_i§


	)

30 
	#I2C3_IRQH™dÀr
 
i2c3_i§


	)

31 
	#TIM22_IRQH™dÀr
 
tim22_i§


	)

32 
	#I2C1_IRQH™dÀr
 
i2c1_i§


	)

33 
	#I2C2_IRQH™dÀr
 
i2c2_i§


	)

34 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

35 
	#SPI2_IRQH™dÀr
 
•i2_i§


	)

36 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

37 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

38 
	#LPUART1_AES_RNG_IRQH™dÀr
 
Õu¨t1_´s_∫g_i§


	)

39 
	#LCD_IRQH™dÀr
 
lcd_i§


	)

40 
	#USB_IRQH™dÀr
 
usb_i§


	)

	@libopencm3/include/libopencmsis/stm32/l1/irqhandlers.h

9 
	#WWDG_IRQH™dÀr
 
wwdg_i§


	)

10 
	#PVD_IRQH™dÀr
 
pvd_i§


	)

11 
	#TAMPER_STAMP_IRQH™dÀr
 
èm≥r_°amp_i§


	)

12 
	#RTC_WKUP_IRQH™dÀr
 
πc_wkup_i§


	)

13 
	#FLASH_IRQH™dÀr
 
Êash_i§


	)

14 
	#RCC_IRQH™dÀr
 
rcc_i§


	)

15 
	#EXTI0_IRQH™dÀr
 
exti0_i§


	)

16 
	#EXTI1_IRQH™dÀr
 
exti1_i§


	)

17 
	#EXTI2_IRQH™dÀr
 
exti2_i§


	)

18 
	#EXTI3_IRQH™dÀr
 
exti3_i§


	)

19 
	#EXTI4_IRQH™dÀr
 
exti4_i§


	)

20 
	#DMA1_CHANNEL1_IRQH™dÀr
 
dma1_ch™√l1_i§


	)

21 
	#DMA1_CHANNEL2_IRQH™dÀr
 
dma1_ch™√l2_i§


	)

22 
	#DMA1_CHANNEL3_IRQH™dÀr
 
dma1_ch™√l3_i§


	)

23 
	#DMA1_CHANNEL4_IRQH™dÀr
 
dma1_ch™√l4_i§


	)

24 
	#DMA1_CHANNEL5_IRQH™dÀr
 
dma1_ch™√l5_i§


	)

25 
	#DMA1_CHANNEL6_IRQH™dÀr
 
dma1_ch™√l6_i§


	)

26 
	#DMA1_CHANNEL7_IRQH™dÀr
 
dma1_ch™√l7_i§


	)

27 
	#ADC1_IRQH™dÀr
 
adc1_i§


	)

28 
	#USB_HP_IRQH™dÀr
 
usb_hp_i§


	)

29 
	#USB_LP_IRQH™dÀr
 
usb_Õ_i§


	)

30 
	#DAC_IRQH™dÀr
 
dac_i§


	)

31 
	#COMP_IRQH™dÀr
 
comp_i§


	)

32 
	#EXTI9_5_IRQH™dÀr
 
exti9_5_i§


	)

33 
	#LCD_IRQH™dÀr
 
lcd_i§


	)

34 
	#TIM9_IRQH™dÀr
 
tim9_i§


	)

35 
	#TIM10_IRQH™dÀr
 
tim10_i§


	)

36 
	#TIM11_IRQH™dÀr
 
tim11_i§


	)

37 
	#TIM2_IRQH™dÀr
 
tim2_i§


	)

38 
	#TIM3_IRQH™dÀr
 
tim3_i§


	)

39 
	#TIM4_IRQH™dÀr
 
tim4_i§


	)

40 
	#I2C1_EV_IRQH™dÀr
 
i2c1_ev_i§


	)

41 
	#I2C1_ER_IRQH™dÀr
 
i2c1_î_i§


	)

42 
	#I2C2_EV_IRQH™dÀr
 
i2c2_ev_i§


	)

43 
	#I2C2_ER_IRQH™dÀr
 
i2c2_î_i§


	)

44 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

45 
	#SPI2_IRQH™dÀr
 
•i2_i§


	)

46 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

47 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

48 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

49 
	#EXTI15_10_IRQH™dÀr
 
exti15_10_i§


	)

50 
	#RTC_ALARM_IRQH™dÀr
 
πc_Æ¨m_i§


	)

51 
	#USB_FS_WAKEUP_IRQH™dÀr
 
usb_fs_wakeup_i§


	)

52 
	#TIM6_IRQH™dÀr
 
tim6_i§


	)

53 
	#TIM7_IRQH™dÀr
 
tim7_i§


	)

54 
	#SDIO_IRQH™dÀr
 
sdio_i§


	)

55 
	#TIM5_IRQH™dÀr
 
tim5_i§


	)

56 
	#SPI3_IRQH™dÀr
 
•i3_i§


	)

57 
	#UART4_IRQH™dÀr
 
u¨t4_i§


	)

58 
	#UART5_IRQH™dÀr
 
u¨t5_i§


	)

59 
	#DMA2_CH1_IRQH™dÀr
 
dma2_ch1_i§


	)

60 
	#DMA2_CH2_IRQH™dÀr
 
dma2_ch2_i§


	)

61 
	#DMA2_CH3_IRQH™dÀr
 
dma2_ch3_i§


	)

62 
	#DMA2_CH4_IRQH™dÀr
 
dma2_ch4_i§


	)

63 
	#DMA2_CH5_IRQH™dÀr
 
dma2_ch5_i§


	)

64 
	#AES_IRQH™dÀr
 
´s_i§


	)

65 
	#COMP_ACQ_IRQH™dÀr
 
comp_acq_i§


	)

	@libopencm3/include/libopencmsis/stm32/l4/irqhandlers.h

9 
	#WWDG_IRQH™dÀr
 
wwdg_i§


	)

10 
	#PVD_PVM_IRQH™dÀr
 
pvd_pvm_i§


	)

11 
	#TAMP_STAMP_IRQH™dÀr
 
èmp_°amp_i§


	)

12 
	#RTC_WKUP_IRQH™dÀr
 
πc_wkup_i§


	)

13 
	#FLASH_IRQH™dÀr
 
Êash_i§


	)

14 
	#RCC_IRQH™dÀr
 
rcc_i§


	)

15 
	#EXTI0_IRQH™dÀr
 
exti0_i§


	)

16 
	#EXTI1_IRQH™dÀr
 
exti1_i§


	)

17 
	#EXTI2_IRQH™dÀr
 
exti2_i§


	)

18 
	#EXTI3_IRQH™dÀr
 
exti3_i§


	)

19 
	#EXTI4_IRQH™dÀr
 
exti4_i§


	)

20 
	#DMA1_CHANNEL1_IRQH™dÀr
 
dma1_ch™√l1_i§


	)

21 
	#DMA1_CHANNEL2_IRQH™dÀr
 
dma1_ch™√l2_i§


	)

22 
	#DMA1_CHANNEL3_IRQH™dÀr
 
dma1_ch™√l3_i§


	)

23 
	#DMA1_CHANNEL4_IRQH™dÀr
 
dma1_ch™√l4_i§


	)

24 
	#DMA1_CHANNEL5_IRQH™dÀr
 
dma1_ch™√l5_i§


	)

25 
	#DMA1_CHANNEL6_IRQH™dÀr
 
dma1_ch™√l6_i§


	)

26 
	#DMA1_CHANNEL7_IRQH™dÀr
 
dma1_ch™√l7_i§


	)

27 
	#ADC1_2_IRQH™dÀr
 
adc1_2_i§


	)

28 
	#CAN1_TX_IRQH™dÀr
 
ˇn1_tx_i§


	)

29 
	#CAN1_RX0_IRQH™dÀr
 
ˇn1_rx0_i§


	)

30 
	#CAN1_RX1_IRQH™dÀr
 
ˇn1_rx1_i§


	)

31 
	#CAN1_SCE_IRQH™dÀr
 
ˇn1_s˚_i§


	)

32 
	#EXTI9_5_IRQH™dÀr
 
exti9_5_i§


	)

33 
	#TIM1_BRK_TIM15_IRQH™dÀr
 
tim1_brk_tim15_i§


	)

34 
	#TIM1_UP_TIM16_IRQH™dÀr
 
tim1_up_tim16_i§


	)

35 
	#TIM1_TRG_COM_TIM17_IRQH™dÀr
 
tim1_åg_com_tim17_i§


	)

36 
	#TIM1_CC_IRQH™dÀr
 
tim1_cc_i§


	)

37 
	#TIM2_IRQH™dÀr
 
tim2_i§


	)

38 
	#TIM3_IRQH™dÀr
 
tim3_i§


	)

39 
	#TIM4_IRQH™dÀr
 
tim4_i§


	)

40 
	#I2C1_EV_IRQH™dÀr
 
i2c1_ev_i§


	)

41 
	#I2C1_ER_IRQH™dÀr
 
i2c1_î_i§


	)

42 
	#I2C2_EV_IRQH™dÀr
 
i2c2_ev_i§


	)

43 
	#I2C2_ER_IRQH™dÀr
 
i2c2_î_i§


	)

44 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

45 
	#SPI2_IRQH™dÀr
 
•i2_i§


	)

46 
	#USART1_IRQH™dÀr
 
ußπ1_i§


	)

47 
	#USART2_IRQH™dÀr
 
ußπ2_i§


	)

48 
	#USART3_IRQH™dÀr
 
ußπ3_i§


	)

49 
	#EXTI15_10_IRQH™dÀr
 
exti15_10_i§


	)

50 
	#RTC_ALARM_IRQH™dÀr
 
πc_Æ¨m_i§


	)

51 
	#DFSDM3_IRQH™dÀr
 
dfsdm3_i§


	)

52 
	#TIM8_BRK_IRQH™dÀr
 
tim8_brk_i§


	)

53 
	#TIM8_UP_IRQH™dÀr
 
tim8_up_i§


	)

54 
	#TIM8_TRG_COM_IRQH™dÀr
 
tim8_åg_com_i§


	)

55 
	#TIM8_CC_IRQH™dÀr
 
tim8_cc_i§


	)

56 
	#ADC3_IRQH™dÀr
 
adc3_i§


	)

57 
	#FMC_IRQH™dÀr
 
fmc_i§


	)

58 
	#SDMMC1_IRQH™dÀr
 
sdmmc1_i§


	)

59 
	#TIM5_IRQH™dÀr
 
tim5_i§


	)

60 
	#SPI3_IRQH™dÀr
 
•i3_i§


	)

61 
	#UART4_IRQH™dÀr
 
u¨t4_i§


	)

62 
	#UART5_IRQH™dÀr
 
u¨t5_i§


	)

63 
	#TIM6_DACUNDER_IRQH™dÀr
 
tim6_dacundî_i§


	)

64 
	#TIM7_IRQH™dÀr
 
tim7_i§


	)

65 
	#DMA2_CHANNEL1_IRQH™dÀr
 
dma2_ch™√l1_i§


	)

66 
	#DMA2_CHANNEL2_IRQH™dÀr
 
dma2_ch™√l2_i§


	)

67 
	#DMA2_CHANNEL3_IRQH™dÀr
 
dma2_ch™√l3_i§


	)

68 
	#DMA2_CHANNEL4_IRQH™dÀr
 
dma2_ch™√l4_i§


	)

69 
	#DMA2_CHANNEL5_IRQH™dÀr
 
dma2_ch™√l5_i§


	)

70 
	#DFSDM0_IRQH™dÀr
 
dfsdm0_i§


	)

71 
	#DFSDM1_IRQH™dÀr
 
dfsdm1_i§


	)

72 
	#DFSDM2_IRQH™dÀr
 
dfsdm2_i§


	)

73 
	#COMP_IRQH™dÀr
 
comp_i§


	)

74 
	#LPTIM1_IRQH™dÀr
 
Õtim1_i§


	)

75 
	#LPTIM2_IRQH™dÀr
 
Õtim2_i§


	)

76 
	#OTG_FS_IRQH™dÀr
 
Ÿg_fs_i§


	)

77 
	#DMA2_CHANNEL6_IRQH™dÀr
 
dma2_ch™√l6_i§


	)

78 
	#DMA2_CHANNEL7_IRQH™dÀr
 
dma2_ch™√l7_i§


	)

79 
	#LPUART1_IRQH™dÀr
 
Õu¨t1_i§


	)

80 
	#QUADSPI_IRQH™dÀr
 
quad•i_i§


	)

81 
	#I2C3_EV_IRQH™dÀr
 
i2c3_ev_i§


	)

82 
	#I2C3_ER_IRQH™dÀr
 
i2c3_î_i§


	)

83 
	#SAI1_IRQH™dÀr
 
ßi1_i§


	)

84 
	#SAI2_IRQH™dÀr
 
ßi2_i§


	)

85 
	#SWPMI1_IRQH™dÀr
 
swpmi1_i§


	)

86 
	#TSC_IRQH™dÀr
 
tsc_i§


	)

87 
	#LCD_IRQH™dÀr
 
lcd_i§


	)

88 
	#AES_IRQH™dÀr
 
´s_i§


	)

89 
	#RNG_IRQH™dÀr
 
∫g_i§


	)

90 
	#FPU_IRQH™dÀr
 
Âu_i§


	)

	@libopencm3/include/libopencmsis/vf6xx/irqhandlers.h

9 
	#CPU2CPU_INT0_IRQH™dÀr
 
˝u2˝u_öt0_i§


	)

10 
	#CPU2CPU_INT1_IRQH™dÀr
 
˝u2˝u_öt1_i§


	)

11 
	#CPU2CPU_INT2_IRQH™dÀr
 
˝u2˝u_öt2_i§


	)

12 
	#CPU2CPU_INT3_IRQH™dÀr
 
˝u2˝u_öt3_i§


	)

13 
	#DIRECTED0_SEMA4_IRQH™dÀr
 
dúe˘ed0_£ma4_i§


	)

14 
	#DIRECTED1_MCM_IRQH™dÀr
 
dúe˘ed1_mcm_i§


	)

15 
	#DIRECTED2_IRQH™dÀr
 
dúe˘ed2_i§


	)

16 
	#DIRECTED3_IRQH™dÀr
 
dúe˘ed3_i§


	)

17 
	#DMA0_IRQH™dÀr
 
dma0_i§


	)

18 
	#DMA0_ERROR_IRQH™dÀr
 
dma0_îr‹_i§


	)

19 
	#DMA1_IRQH™dÀr
 
dma1_i§


	)

20 
	#DMA1_ERROR_IRQH™dÀr
 
dma1_îr‹_i§


	)

21 
	#RESERVED0_IRQH™dÀr
 
ª£rved0_i§


	)

22 
	#RESERVED1_IRQH™dÀr
 
ª£rved1_i§


	)

23 
	#MSCM_ECC0_IRQH™dÀr
 
mscm_ecc0_i§


	)

24 
	#MSCM_ECC1_IRQH™dÀr
 
mscm_ecc1_i§


	)

25 
	#CSU_ALARM_IRQH™dÀr
 
csu_Æ¨m_i§


	)

26 
	#RESERVED2_IRQH™dÀr
 
ª£rved2_i§


	)

27 
	#MSCM_ACTZS_IRQH™dÀr
 
mscm_a˘zs_i§


	)

28 
	#RESERVED3_IRQH™dÀr
 
ª£rved3_i§


	)

29 
	#WDOG_A5_IRQH™dÀr
 
wdog_a5_i§


	)

30 
	#WDOG_M4_IRQH™dÀr
 
wdog_m4_i§


	)

31 
	#WDOG_SNVS_IRQH™dÀr
 
wdog_¢vs_i§


	)

32 
	#CP1_BOOT_FAIL_IRQH™dÀr
 
˝1_boŸ_Áû_i§


	)

33 
	#QSPI0_IRQH™dÀr
 
q•i0_i§


	)

34 
	#QSPI1_IRQH™dÀr
 
q•i1_i§


	)

35 
	#DDRMC_IRQH™dÀr
 
ddrmc_i§


	)

36 
	#SDHC0_IRQH™dÀr
 
sdhc0_i§


	)

37 
	#SDHC1_IRQH™dÀr
 
sdhc1_i§


	)

38 
	#RESERVED4_IRQH™dÀr
 
ª£rved4_i§


	)

39 
	#DCU0_IRQH™dÀr
 
dcu0_i§


	)

40 
	#DCU1_IRQH™dÀr
 
dcu1_i§


	)

41 
	#VIU_IRQH™dÀr
 
viu_i§


	)

42 
	#RESERVED5_IRQH™dÀr
 
ª£rved5_i§


	)

43 
	#RESERVED6_IRQH™dÀr
 
ª£rved6_i§


	)

44 
	#RLE_IRQH™dÀr
 
æe_i§


	)

45 
	#SEG_LCD_IRQH™dÀr
 
£g_lcd_i§


	)

46 
	#RESERVED7_IRQH™dÀr
 
ª£rved7_i§


	)

47 
	#RESERVED8_IRQH™dÀr
 
ª£rved8_i§


	)

48 
	#PIT_IRQH™dÀr
 
pô_i§


	)

49 
	#LPTIMER0_IRQH™dÀr
 
Õtimî0_i§


	)

50 
	#RESERVED9_IRQH™dÀr
 
ª£rved9_i§


	)

51 
	#FLEXTIMER0_IRQH™dÀr
 
Êextimî0_i§


	)

52 
	#FLEXTIMER1_IRQH™dÀr
 
Êextimî1_i§


	)

53 
	#FLEXTIMER2_IRQH™dÀr
 
Êextimî2_i§


	)

54 
	#FLEXTIMER3_IRQH™dÀr
 
Êextimî3_i§


	)

55 
	#RESERVED10_IRQH™dÀr
 
ª£rved10_i§


	)

56 
	#RESERVED11_IRQH™dÀr
 
ª£rved11_i§


	)

57 
	#RESERVED12_IRQH™dÀr
 
ª£rved12_i§


	)

58 
	#RESERVED13_IRQH™dÀr
 
ª£rved13_i§


	)

59 
	#USBPHY0_IRQH™dÀr
 
usbphy0_i§


	)

60 
	#USBPHY1_IRQH™dÀr
 
usbphy1_i§


	)

61 
	#RESERVED14_IRQH™dÀr
 
ª£rved14_i§


	)

62 
	#ADC0_IRQH™dÀr
 
adc0_i§


	)

63 
	#ADC1_IRQH™dÀr
 
adc1_i§


	)

64 
	#DAC0_IRQH™dÀr
 
dac0_i§


	)

65 
	#DAC1_IRQH™dÀr
 
dac1_i§


	)

66 
	#RESERVED15_IRQH™dÀr
 
ª£rved15_i§


	)

67 
	#FLEXCAN0_IRQH™dÀr
 
Êexˇn0_i§


	)

68 
	#FLEXCAN1_IRQH™dÀr
 
Êexˇn1_i§


	)

69 
	#RESERVED16_IRQH™dÀr
 
ª£rved16_i§


	)

70 
	#UART0_IRQH™dÀr
 
u¨t0_i§


	)

71 
	#UART1_IRQH™dÀr
 
u¨t1_i§


	)

72 
	#UART2_IRQH™dÀr
 
u¨t2_i§


	)

73 
	#UART3_IRQH™dÀr
 
u¨t3_i§


	)

74 
	#UART4_IRQH™dÀr
 
u¨t4_i§


	)

75 
	#UART5_IRQH™dÀr
 
u¨t5_i§


	)

76 
	#SPI0_IRQH™dÀr
 
•i0_i§


	)

77 
	#SPI1_IRQH™dÀr
 
•i1_i§


	)

78 
	#SPI2_IRQH™dÀr
 
•i2_i§


	)

79 
	#SPI3_IRQH™dÀr
 
•i3_i§


	)

80 
	#I2C0_IRQH™dÀr
 
i2c0_i§


	)

81 
	#I2C1_IRQH™dÀr
 
i2c1_i§


	)

82 
	#I2C2_IRQH™dÀr
 
i2c2_i§


	)

83 
	#I2C3_IRQH™dÀr
 
i2c3_i§


	)

84 
	#USBC0_IRQH™dÀr
 
usbc0_i§


	)

85 
	#USBC1_IRQH™dÀr
 
usbc1_i§


	)

86 
	#RESERVED17_IRQH™dÀr
 
ª£rved17_i§


	)

87 
	#ENET0_IRQH™dÀr
 
íë0_i§


	)

88 
	#ENET1_IRQH™dÀr
 
íë1_i§


	)

89 
	#ENET0_1588_IRQH™dÀr
 
íë0_1588_i§


	)

90 
	#ENET1_1588_IRQH™dÀr
 
íë1_1588_i§


	)

91 
	#ENET_SWITCH_IRQH™dÀr
 
íë_swôch_i§


	)

92 
	#NFC_IRQH™dÀr
 
nfc_i§


	)

93 
	#SAI0_IRQH™dÀr
 
ßi0_i§


	)

94 
	#SAI1_IRQH™dÀr
 
ßi1_i§


	)

95 
	#SAI2_IRQH™dÀr
 
ßi2_i§


	)

96 
	#SAI3_IRQH™dÀr
 
ßi3_i§


	)

97 
	#ESAI_BIFIFO_IRQH™dÀr
 
eßi_bififo_i§


	)

98 
	#SPDIF_IRQH™dÀr
 
•dif_i§


	)

99 
	#ASRC_IRQH™dÀr
 
a§c_i§


	)

100 
	#VREG_IRQH™dÀr
 
vªg_i§


	)

101 
	#WKPU0_IRQH™dÀr
 
wkpu0_i§


	)

102 
	#RESERVED18_IRQH™dÀr
 
ª£rved18_i§


	)

103 
	#CCM_FXOSC_IRQH™dÀr
 
ccm_fxosc_i§


	)

104 
	#CCM_IRQH™dÀr
 
ccm_i§


	)

105 
	#SRC_IRQH™dÀr
 
§c_i§


	)

106 
	#PDB_IRQH™dÀr
 
pdb_i§


	)

107 
	#EWM_IRQH™dÀr
 
ewm_i§


	)

108 
	#RESERVED19_IRQH™dÀr
 
ª£rved19_i§


	)

109 
	#RESERVED20_IRQH™dÀr
 
ª£rved20_i§


	)

110 
	#RESERVED21_IRQH™dÀr
 
ª£rved21_i§


	)

111 
	#RESERVED22_IRQH™dÀr
 
ª£rved22_i§


	)

112 
	#RESERVED23_IRQH™dÀr
 
ª£rved23_i§


	)

113 
	#RESERVED24_IRQH™dÀr
 
ª£rved24_i§


	)

114 
	#RESERVED25_IRQH™dÀr
 
ª£rved25_i§


	)

115 
	#RESERVED26_IRQH™dÀr
 
ª£rved26_i§


	)

116 
	#GPIO0_IRQH™dÀr
 
gpio0_i§


	)

117 
	#GPIO1_IRQH™dÀr
 
gpio1_i§


	)

118 
	#GPIO2_IRQH™dÀr
 
gpio2_i§


	)

119 
	#GPIO3_IRQH™dÀr
 
gpio3_i§


	)

120 
	#GPIO4_IRQH™dÀr
 
gpio4_i§


	)

	@libopencm3/lib/cm3/assert.c

20 
	~<lib›ícm3/cm3/as£π.h
>

22 
__©åibuã__
((
wók
)Ë
	$cm3_as£π_Áûed
()

25 
	}
}

27 
__©åibuã__
((
wók
)Ë
cm3_as£π_Áûed_vîbo£
(

28 c⁄° *
fûe
 
__©åibuã__
((
unu£d
)),

29 
löe
 
__©åibuã__
((
unu£d
)),

30 c⁄° *
func
 
__©åibuã__
((
unu£d
)),

31 c⁄° *
as£π_ex¥
 
__©åibuã__
((
unu£d
)))

33 
cm3_as£π_Áûed
();

	@libopencm3/lib/cm3/dwt.c

20 
	~<lib›ícm3/cm3/scs.h
>

21 
	~<lib›ícm3/cm3/dwt.h
>

32 
boﬁ
 
	$dwt_íabÀ_cy˛e_cou¡î
()

34 #i‡
	`deföed
(
__ARM_ARCH_6M__
)

35  
Ál£
;

38 #i‡
	`deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

40 
SCS_DEMCR
 |
SCS_DEMCR_TRCENA
;

41 i‡(
DWT_CTRL
 & 
DWT_CTRL_NOCYCCNT
) {

42  
Ál£
;

45 
DWT_CYCCNT
 = 0;

46 
DWT_CTRL
 |
DWT_CTRL_CYCCNTENA
;

47  
åue
;

51  
Ál£
;

52 
	}
}

64 
uöt32_t
 
	$dwt_ªad_cy˛e_cou¡î
()

66 #i‡
	`deföed
(
__ARM_ARCH_6M__
)

70 #i‡
	`deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

71 i‡(
DWT_CTRL
 & 
DWT_CTRL_CYCCNTENA
) {

72  
DWT_CYCCNT
;

77 
	}
}

	@libopencm3/lib/cm3/nvic.c

46 
	~<lib›ícm3/cm3/nvic.h
>

47 
	~<lib›ícm3/cm3/scs.h
>

57 
	$nvic_íabÀ_úq
(
uöt8_t
 
úqn
)

59 
	`NVIC_ISER
(
úqn
 / 32) = (1 << (irqn % 32));

60 
	}
}

70 
	$nvic_dißbÀ_úq
(
uöt8_t
 
úqn
)

72 
	`NVIC_ICER
(
úqn
 / 32) = (1 << (irqn % 32));

73 
	}
}

84 
uöt8_t
 
	$nvic_gë_≥ndög_úq
(
uöt8_t
 
úqn
)

86  
	`NVIC_ISPR
(
úqn
 / 32) & (1 << (irqn % 32)) ? 1 : 0;

87 
	}
}

98 
	$nvic_£t_≥ndög_úq
(
uöt8_t
 
úqn
)

100 
	`NVIC_ISPR
(
úqn
 / 32) = (1 << (irqn % 32));

101 
	}
}

112 
	$nvic_˛ór_≥ndög_úq
(
uöt8_t
 
úqn
)

114 
	`NVIC_ICPR
(
úqn
 / 32) = (1 << (irqn % 32));

115 
	}
}

126 
uöt8_t
 
	$nvic_gë_úq_íabÀd
(
uöt8_t
 
úqn
)

128  
	`NVIC_ISER
(
úqn
 / 32) & (1 << (irqn % 32)) ? 1 : 0;

129 
	}
}

152 
	$nvic_£t_¥i‹ôy
(
uöt8_t
 
úqn
, uöt8_à
¥i‹ôy
)

157 i‡(
úqn
 >
NVIC_IRQ_COUNT
) {

159 
	`SCS_SHPR
((
úqn
 & 0xFË- 4Ë
¥i‹ôy
;

162 
	`NVIC_IPR
(
úqn
Ë
¥i‹ôy
;

164 
	}
}

167 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

177 
uöt8_t
 
	$nvic_gë_a˘ive_úq
(
uöt8_t
 
úqn
)

179  
	`NVIC_IABR
(
úqn
 / 32) & (1 << (irqn % 32)) ? 1 : 0;

180 
	}
}

192 
	$nvic_gíî©e_so·w¨e_öãºu±
(
uöt16_t
 
úqn
)

194 i‡(
úqn
 <= 239) {

195 
NVIC_STIR
 |
úqn
;

197 
	}
}

	@libopencm3/lib/cm3/scb.c

20 
	~<°dlib.h
>

22 
	~<lib›ícm3/cm3/scb.h
>

25 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

26 
	$scb_ª£t_c‹e
()

28 
SCB_AIRCR
 = 
SCB_AIRCR_VECTKEY
 | 
SCB_AIRCR_VECTRESET
;

31 
	}
}

34 
	$scb_ª£t_sy°em
()

36 
SCB_AIRCR
 = 
SCB_AIRCR_VECTKEY
 | 
SCB_AIRCR_SYSRESETREQ
;

39 
	}
}

42 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

43 
	$scb_£t_¥i‹ôy_groupög
(
uöt32_t
 
¥igroup
)

45 
SCB_AIRCR
 = 
SCB_AIRCR_VECTKEY
 | 
¥igroup
;

46 
	}
}

	@libopencm3/lib/cm3/sync.c

20 
	~<lib›ícm3/cm3/sync.h
>

23 
	$__dmb
()

25 
__asm__
 volatile ("dmb");

26 
	}
}

29 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

31 
uöt32_t
 
	$__ldªx
(vﬁ©ûê
uöt32_t
 *
addr
)

33 
uöt32_t
 
ªs
;

34 
__asm__
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªs
Ë: "r" (
addr
));

35  
ªs
;

36 
	}
}

38 
uöt32_t
 
	$__°ªx
(
uöt32_t
 
vÆ
, vﬁ©ûêuöt32_à*
addr
)

40 
uöt32_t
 
ªs
;

41 
__asm__
 volatile ("strex %0, %2, [%1]"

42 : "=&r" (
ªs
Ë: "r" (
addr
), "r" (
vÆ
));

43  
ªs
;

44 
	}
}

46 
	$muãx_lock
(
muãx_t
 *
m
)

48 !
	`muãx_åylock
(
m
));

49 
	}
}

52 
uöt32_t
 
	$muãx_åylock
(
muãx_t
 *
m
)

54 
uöt32_t
 
°©us
 = 1;

57 i‡(
	`__ldªx
(
m
Ë=
MUTEX_UNLOCKED
) {

59 
°©us
 = 
	`__°ªx
(
MUTEX_LOCKED
, 
m
);

63 
	`__dmb
();

67  
°©us
 == 0;

68 
	}
}

70 
	$muãx_u∆ock
(
muãx_t
 *
m
)

73 
	`__dmb
();

76 *
m
 = 
MUTEX_UNLOCKED
;

77 
	}
}

	@libopencm3/lib/cm3/systick.c

41 
	~<lib›ícm3/cm3/sy°ick.h
>

56 
	$sy°ick_£t_ªlﬂd
(
uöt32_t
 
vÆue
)

58 
STK_RVR
 = (
vÆue
 & 
STK_RVR_RELOAD
);

59 
	}
}

67 
uöt32_t
 
	$sy°ick_gë_ªlﬂd
()

69  
STK_RVR
 & 
STK_RVR_RELOAD
;

70 
	}
}

82 
boﬁ
 
	$sy°ick_£t_‰equícy
(
uöt32_t
 
‰eq
, uöt32_à
ahb
)

84 
uöt32_t
 
øtio
 = 
ahb
 / 
‰eq
;

86 #i‡
	`deföed
(
__ARM_ARCH_6M__
)

87 
	`sy°ick_£t_˛ocksour˚
(
STK_CSR_CLKSOURCE_AHB
);

89 i‡(
øtio
 >(
STK_RVR_RELOAD
 * 8)) {

91  
Ál£
;

92 } i‡(
øtio
 >
STK_RVR_RELOAD
) {

93 
øtio
 /= 8;

94 
	`sy°ick_£t_˛ocksour˚
(
STK_CSR_CLKSOURCE_AHB_DIV8
);

96 
	`sy°ick_£t_˛ocksour˚
(
STK_CSR_CLKSOURCE_AHB
);

99 
	`sy°ick_£t_ªlﬂd
(
øtio
 - 1);

100  
åue
;

101 
	}
}

109 
uöt32_t
 
	$sy°ick_gë_vÆue
()

111  
STK_CVR
 & 
STK_CVR_CURRENT
;

112 
	}
}

122 
	$sy°ick_£t_˛ocksour˚
(
uöt8_t
 
˛ocksour˚
)

124 
STK_CSR
 = (STK_CSR & ~
STK_CSR_CLKSOURCE
) |

125 (
˛ocksour˚
 & 
STK_CSR_CLKSOURCE
);

126 
	}
}

133 
	$sy°ick_öãºu±_íabÀ
()

135 
STK_CSR
 |
STK_CSR_TICKINT
;

136 
	}
}

143 
	$sy°ick_öãºu±_dißbÀ
()

145 
STK_CSR
 &~
STK_CSR_TICKINT
;

146 
	}
}

153 
	$sy°ick_cou¡î_íabÀ
()

155 
STK_CSR
 |
STK_CSR_ENABLE
;

156 
	}
}

163 
	$sy°ick_cou¡î_dißbÀ
()

165 
STK_CSR
 &~
STK_CSR_ENABLE
;

166 
	}
}

177 
uöt8_t
 
	$sy°ick_gë_cou¡Êag
()

179  (
STK_CSR
 & 
STK_CSR_COUNTFLAG
) ? 1 : 0;

180 
	}
}

188 
	$sy°ick_˛ór
()

190 
STK_CVR
 = 0;

191 
	}
}

198 
uöt32_t
 
	$sy°ick_gë_ˇlib
()

200  
STK_CALIB
 & 
STK_CALIB_TENMS
;

201 
	}
}

	@libopencm3/lib/cm3/vector.c

21 
	~<lib›ícm3/cm3/scb.h
>

22 
	~<lib›ícm3/cm3/ve˘‹.h
>

25 
	~"../di•©ch/ve˘‹_chù£t.c
"

27 
	~"../di•©ch/ve˘‹_nvic.c
"

30 (*
	tfun˝_t
) ();

31 
fun˝_t
 
__¥eöô_¨øy_°¨t
, 
__¥eöô_¨øy_íd
;

32 
fun˝_t
 
__öô_¨øy_°¨t
, 
__öô_¨øy_íd
;

33 
fun˝_t
 
__föi_¨øy_°¨t
, 
__föi_¨øy_íd
;

35 
	`maö
();

36 
	`blockög_h™dÀr
();

37 
	`nuŒ_h™dÀr
();

39 
	`__©åibuã__
 ((
	`£˘i⁄
(".vectors")))

40 
ve˘‹_èbÀ_t
 
ve˘‹_èbÀ
 = {

41 .
öôül_•_vÆue
 = &
_°ack
,

42 .
ª£t
 = 
ª£t_h™dÀr
,

43 .
nmi
 = 
nmi_h™dÀr
,

44 .
h¨d_Áu…
 = 
h¨d_Áu…_h™dÀr
,

47 #i‡
	`deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

48 .
mem‹y_m™age_Áu…
 = 
mem_m™age_h™dÀr
,

49 .
bus_Áu…
 = 
bus_Áu…_h™dÀr
,

50 .
ußge_Áu…
 = 
ußge_Áu…_h™dÀr
,

51 .
debug_m⁄ô‹
 = 
debug_m⁄ô‹_h™dÀr
,

54 .
sv_ˇŒ
 = 
sv_ˇŒ_h™dÀr
,

55 .
≥nd_sv
 = 
≥nd_sv_h™dÀr
,

56 .
sy°ick
 = 
sys_tick_h™dÀr
,

57 .
úq
 = {

58 
IRQ_HANDLERS


60 
	}
};

62 
__©åibuã__
 ((
wók
, 
«ked
)Ë
	$ª£t_h™dÀr
()

64 vﬁ©ûê*
§c
, *
de°
;

65 
fun˝_t
 *
Â
;

67 
§c
 = &
_d©a_lﬂdaddr
, 
de°
 = &
_d©a
;

68 
de°
 < &
_ed©a
;

69 
§c
++, 
de°
++) {

70 *
de°
 = *
§c
;

73 
de°
 < &
_ebss
) {

74 *
de°
++ = 0;

79 
SCB_CCR
 |
SCB_CCR_STKALIGN
;

82 
	`¥e_maö
();

85 
Â
 = &
__¥eöô_¨øy_°¨t
; f∞< &
__¥eöô_¨øy_íd
; fp++) {

86 (*
Â
)();

88 
Â
 = &
__öô_¨øy_°¨t
; f∞< &
__öô_¨øy_íd
; fp++) {

89 (*
Â
)();

93 
	`maö
();

96 
Â
 = &
__föi_¨øy_°¨t
; f∞< &
__föi_¨øy_íd
; fp++) {

97 (*
Â
)();

100 
	}
}

102 
	$blockög_h™dÀr
()

105 
	}
}

107 
	$nuŒ_h™dÀr
()

110 
	}
}

112 #¥agm®
wók
 
nmi_h™dÀr
 = 
nuŒ_h™dÀr


113 #¥agm®
wók
 
h¨d_Áu…_h™dÀr
 = 
blockög_h™dÀr


114 #¥agm®
wók
 
sv_ˇŒ_h™dÀr
 = 
nuŒ_h™dÀr


115 #¥agm®
wók
 
≥nd_sv_h™dÀr
 = 
nuŒ_h™dÀr


116 #¥agm®
wók
 
sys_tick_h™dÀr
 = 
nuŒ_h™dÀr


119 #i‡
deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

120 #¥agm®
wók
 
mem_m™age_h™dÀr
 = 
blockög_h™dÀr


121 #¥agm®
wók
 
bus_Áu…_h™dÀr
 = 
blockög_h™dÀr


122 #¥agm®
wók
 
ußge_Áu…_h™dÀr
 = 
blockög_h™dÀr


123 #¥agm®
wók
 
debug_m⁄ô‹_h™dÀr
 = 
nuŒ_h™dÀr


	@libopencm3/lib/dispatch/vector_chipset.c

1 #i‡
deföed
(
STM32F3
)

2 
	~"../°m32/f3/ve˘‹_chù£t.c
"

3 #ñi‡
deföed
(
STM32F4
)

4 
	~"../°m32/f4/ve˘‹_chù£t.c
"

5 #ñi‡
deföed
(
STM32F7
)

6 
	~"../°m32/f7/ve˘‹_chù£t.c
"

7 #ñi‡
deföed
(
STM32L4
)

8 
	~"../°m32/l4/ve˘‹_chù£t.c
"

9 #ñi‡
deföed
(
LM4F
)

10 
	~"../lm4f/ve˘‹_chù£t.c
"

11 #ñi‡
deföed
(
LPC43XX_M4
)

12 
	~"../Õc43xx/m4/ve˘‹_chù£t.c
"

13 #ñi‡
deföed
(
VF6XX
)

14 
	~"../vf6xx/ve˘‹_chù£t.c
"

15 #ñi‡
deföed
(
EFM32WG
)

16 
	~"../efm32/wg/ve˘‹_chù£t.c
"

17 #ñi‡
deföed
(
EZR32WG
)

18 
	~"../efm32/ezr32wg/ve˘‹_chù£t.c
"

21 
	$¥e_maö
(Ë{
	}
}

	@libopencm3/lib/dispatch/vector_nvic.c

1 #i‡
deföed
(
STM32F0
)

2 
	~"../°m32/f0/ve˘‹_nvic.c
"

3 #ñi‡
deföed
(
STM32F1
)

4 
	~"../°m32/f1/ve˘‹_nvic.c
"

5 #ñi‡
deföed
(
STM32F2
)

6 
	~"../°m32/f2/ve˘‹_nvic.c
"

7 #ñi‡
deföed
(
STM32F3
)

8 
	~"../°m32/f3/ve˘‹_nvic.c
"

9 #ñi‡
deföed
(
STM32F4
)

10 
	~"../°m32/f4/ve˘‹_nvic.c
"

11 #ñi‡
deföed
(
STM32F7
)

12 
	~"../°m32/f7/ve˘‹_nvic.c
"

13 #ñi‡
deföed
(
STM32L0
)

14 
	~"../°m32/l0/ve˘‹_nvic.c
"

15 #ñi‡
deföed
(
STM32L1
)

16 
	~"../°m32/l1/ve˘‹_nvic.c
"

17 #ñi‡
deföed
(
STM32L4
)

18 
	~"../°m32/l4/ve˘‹_nvic.c
"

20 #ñi‡
deföed
(
EFM32TG
)

21 
	~"../efm32/tg/ve˘‹_nvic.c
"

22 #ñi‡
deföed
(
EFM32G
)

23 
	~"../efm32/g/ve˘‹_nvic.c
"

24 #ñi‡
deföed
(
EFM32LG
)

25 
	~"../efm32/lg/ve˘‹_nvic.c
"

26 #ñi‡
deföed
(
EFM32GG
)

27 
	~"../efm32/gg/ve˘‹_nvic.c
"

28 #ñi‡
deföed
(
EFM32HG
)

29 
	~"../efm32/hg/ve˘‹_nvic.c
"

30 #ñi‡
deföed
(
EFM32WG
)

31 
	~"../efm32/wg/ve˘‹_nvic.c
"

32 #ñi‡
deföed
(
EZR32WG
)

33 
	~"../efm32/ezr32wg/ve˘‹_nvic.c
"

35 #ñi‡
deföed
(
LPC13XX
)

36 
	~"../Õc13xx/ve˘‹_nvic.c
"

37 #ñi‡
deföed
(
LPC17XX
)

38 
	~"../Õc17xx/ve˘‹_nvic.c
"

39 #ñi‡
deföed
(
LPC43XX_M4
)

40 
	~"../Õc43xx/m4/ve˘‹_nvic.c
"

41 #ñi‡
deföed
(
LPC43XX_M0
)

42 
	~"../Õc43xx/m0/ve˘‹_nvic.c
"

44 #ñi‡
deföed
(
SAM3A
)

45 
	~"../ßm/3a/ve˘‹_nvic.c
"

46 #ñi‡
deföed
(
SAM3N
)

47 
	~"../ßm/3n/ve˘‹_nvic.c
"

48 #ñi‡
deföed
(
SAM3S
)

49 
	~"../ßm/3s/ve˘‹_nvic.c
"

50 #ñi‡
deföed
(
SAM3U
)

51 
	~"../ßm/3u/ve˘‹_nvic.c
"

52 #ñi‡
deföed
(
SAM3X
)

53 
	~"../ßm/3x/ve˘‹_nvic.c
"

54 #ñi‡
deföed
(
SAM4L
)

55 
	~"../ßm/4l/ve˘‹_nvic.c
"

56 #ñi‡
deföed
(
SAMD
)

57 
	~"../ßm/d/ve˘‹_nvic.c
"

59 #ñi‡
deföed
(
VF6XX
)

60 
	~"../vf6xx/ve˘‹_nvic.c
"

62 #ñi‡
deföed
(
LM3S
Ë|| deföed(
LM4F
)

64 
	~"../lm3s/ve˘‹_nvic.c
"

70 
	#IRQ_HANDLERS


	)

	@libopencm3/lib/efm32/common/adc_common.c

20 
	~<lib›ícm3/efm32/adc.h
>

27 
	$adc_£t_ovîßm∂ög
(
uöt32_t
 
adc
, uöt32_à
ovîßmp
)

29 
	`ADC_CTRL
(
adc
Ë(ADC_CTRL◊dcË& ~
ADC_CTRL_OVERSEL_MASK
Ë| 
ovîßmp
;

30 
	}
}

38 
	$adc_£t_w¨m_up
(
uöt32_t
 
adc
, 
uöt8_t
 
˛ocks
)

40 
uöt32_t
 
timeba£
 = 
	`ADC_CTRL_TIMEBASE
(
˛ocks
 - 1);

41 
	`ADC_CTRL
(
adc
Ë(ADC_CTRL◊dcË& ~
ADC_CTRL_TIMEBASE_MASK
Ë| 
timeba£
;

42 
	}
}

49 
	$adc_£t_˛ock_¥esˇÀr
(
uöt32_t
 
adc
, 
uöt8_t
 
Á˘‹
)

51 
uöt32_t
 
¥esc
 = 
	`ADC_CTRL_PRESC
(
Á˘‹
 - 1);

52 
	`ADC_CTRL
(
adc
Ë(ADC_CTRL◊dcË& ~
ADC_CTRL_PRESC_MASK
Ë| 
¥esc
;

53 
	}
}

60 
	$adc_£t_low∑ss_fûãr
(
uöt32_t
 
adc
, uöt32_à
Õfmode
)

62 
	`ADC_CTRL
(
adc
Ë(ADC_CTRL◊dcË& ~
ADC_CTRL_LPFMODE_MASK
Ë| 
Õfmode
;

63 
	}
}

69 
	$adc_íabÀ_èûg©ög
(
uöt32_t
 
adc
)

71 
	`ADC_CTRL
(
adc
Ë|
ADC_CTRL_TAILGATE
;

72 
	}
}

78 
	$adc_dißbÀ_èûg©ög
(
uöt32_t
 
adc
)

80 
	`ADC_CTRL
(
adc
Ë&~
ADC_CTRL_TAILGATE
;

81 
	}
}

88 
	$adc_£t_w¨m_up_mode
(
uöt32_t
 
adc
, uöt32_à
w¨mupmode
)

90 
	`ADC_CTRL
(
adc
Ë(ADC_CTRL◊dcË& ~
ADC_CTRL_WARMUPMODE_MASK
)

91 | 
w¨mupmode
;

92 
	}
}

98 
	$adc_sögÀ_°¨t
(
uöt32_t
 
adc
)

100 
	`ADC_CMD
(
adc
Ë
ADC_CMD_SINGLESTART
;

101 
	}
}

107 
	$adc_sögÀ_°›
(
uöt32_t
 
adc
)

109 
	`ADC_CMD
(
adc
Ë
ADC_CMD_SINGLESTOP
;

110 
	}
}

116 
	$adc_sˇn_°¨t
(
uöt32_t
 
adc
)

118 
	`ADC_CMD
(
adc
Ë
ADC_CMD_SCANSTART
;

119 
	}
}

125 
	$adc_sˇn_°›
(
uöt32_t
 
adc
)

127 
	`ADC_CMD
(
adc
Ë
ADC_CMD_SCANSTOP
;

128 
	}
}

136 
	$adc_£t_sögÀ_¥s_åiggî
(
uöt32_t
 
adc
, 
uöt8_t
 
¥s£l
)

138 
	`ADC_SINGLECTRL
(
adc
) =

139 (
	`ADC_SINGLECTRL
(
adc
Ë& ~
ADC_SINGLECTRL_PRSSEL_MASK
) |

140 (
	`ADC_SINGLECTRL_PRSSEL_PRSCHx
(
¥s£l
));

141 
	}
}

147 
	$adc_íabÀ_sögÀ_¥s_åiggî
(
uöt32_t
 
adc
)

149 
	`ADC_SINGLECTRL
(
adc
Ë|
ADC_SINGLECTRL_PRSEN
;

150 
	}
}

156 
	$adc_dißbÀ_sögÀ_¥s_åiggî
(
uöt32_t
 
adc
)

158 
	`ADC_SINGLECTRL
(
adc
Ë&~
ADC_SINGLECTRL_PRSEN
;

159 
	}
}

166 
	$adc_£t_sögÀ_acquisôi⁄_cy˛e
(
uöt32_t
 
adc
, uöt32_à
©
)

168 
	`ADC_SINGLECTRL
(
adc
) =

169 (
	`ADC_SINGLECTRL
(
adc
Ë& ~
ADC_SINGLECTRL_AT_MASK
Ë| 
©
;

170 
	}
}

177 
	$adc_£t_sögÀ_ª„ªn˚
(
uöt32_t
 
adc
, uöt32_à
ªf
)

179 
	`ADC_SINGLECTRL
(
adc
) =

180 (
	`ADC_SINGLECTRL
(
adc
Ë& ~
ADC_SINGLECTRL_REF_MASK
Ë| 
ªf
;

181 
	}
}

188 
	$adc_£t_sögÀ_ch™√l
(
uöt32_t
 
adc
, 
uöt8_t
 
ch
)

190 
	`ADC_SINGLECTRL
(
adc
) =

191 (
	`ADC_SINGLECTRL
(
adc
Ë& ~
ADC_SINGLECTRL_INPUTSEL_MASK
) |

192 
	`ADC_SINGLECTRL_INPUTSEL
(
ch
);

193 
	}
}

200 
	$adc_£t_sögÀ_ªsﬁuti⁄
(
uöt32_t
 
adc
, uöt32_à
ªs
)

202 
	`ADC_SINGLECTRL
(
adc
) =

203 (
	`ADC_SINGLECTRL
(
adc
Ë& ~
ADC_SINGLECTRL_RES_MASK
Ë| 
ªs
;

204 
	}
}

210 
	$adc_£t_sögÀ_À·_Æig√d
(
uöt32_t
 
adc
)

212 
	`ADC_SINGLECTRL
(
adc
Ë|
ADC_SINGLECTRL_ADJ
;

213 
	}
}

219 
	$adc_£t_sögÀ_right_Æig√d
(
uöt32_t
 
adc
)

221 
	`ADC_SINGLECTRL
(
adc
Ë&~
ADC_SINGLECTRL_ADJ
;

222 
	}
}

228 
	$adc_£t_sögÀ_sögÀ_íded
(
uöt32_t
 
adc
)

230 
	`ADC_SINGLECTRL
(
adc
Ë&~
ADC_SINGLECTRL_DIFF
;

231 
	}
}

237 
	$adc_£t_sögÀ_dif„ª¡ül
(
uöt32_t
 
adc
)

239 
	`ADC_SINGLECTRL
(
adc
Ë|
ADC_SINGLECTRL_DIFF
;

240 
	}
}

246 
	$adc_íabÀ_sögÀ_ª≥©_c⁄v
(
uöt32_t
 
adc
)

248 
	`ADC_SINGLECTRL
(
adc
Ë|
ADC_SINGLECTRL_REP
;

249 
	}
}

255 
	$adc_dißbÀ_sögÀ_ª≥©_c⁄v
(
uöt32_t
 
adc
)

257 
	`ADC_SINGLECTRL
(
adc
Ë&~
ADC_SINGLECTRL_REP
;

258 
	}
}

266 
	$adc_£t_sˇn_¥s_åiggî
(
uöt32_t
 
adc
, 
uöt8_t
 
¥s£l
)

268 
	`ADC_SCANCTRL
(
adc
) =

269 (
	`ADC_SCANCTRL
(
adc
Ë& ~
ADC_SCANCTRL_PRSSEL_MASK
) |

270 
	`ADC_SCANCTRL_PRSSEL_PRSCHx
(
¥s£l
);

271 
	}
}

277 
	$adc_íabÀ_sˇn_¥s_åiggî
(
uöt32_t
 
adc
)

279 
	`ADC_SCANCTRL
(
adc
Ë|
ADC_SCANCTRL_PRSEN
;

280 
	}
}

286 
	$adc_dißbÀ_sˇn_¥s_åiggî
(
uöt32_t
 
adc
)

288 
	`ADC_SCANCTRL
(
adc
Ë&~
ADC_SCANCTRL_PRSEN
;

289 
	}
}

296 
	$adc_£t_sˇn_acquisôi⁄_cy˛e
(
uöt32_t
 
adc
, uöt32_à
©
)

298 
	`ADC_SCANCTRL
(
adc
) =

299 (
	`ADC_SCANCTRL
(
adc
Ë& ~
ADC_SCANCTRL_AT_MASK
Ë| 
©
;

300 
	}
}

307 
	$adc_£t_sˇn_ª„ªn˚
(
uöt32_t
 
adc
, uöt32_à
ªf
)

309 
	`ADC_SCANCTRL
(
adc
) =

310 (
	`ADC_SCANCTRL
(
adc
Ë& ~
ADC_SCANCTRL_REF_MASK
Ë| 
ªf
;

311 
	}
}

320 
	$adc_£t_sˇn_ch™√l
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[])

322 
i
;

323 
uöt32_t
 
vÆ
 = 0;

325 
i
 = 0; i < 
Àngth
; i++) {

326 
vÆ
 |1 << (
ch™√l
[
i
] + 
ADC_SCANCTRL_INPUTSEL_SHIFT
);

329 
	`ADC_SCANCTRL
(
adc
) =

330 (
	`ADC_SCANCTRL
(
adc
Ë& ~
ADC_SCANCTRL_INPUTSEL_MASK
) |

331 (
vÆ
 & 
ADC_SCANCTRL_INPUTSEL_MASK
);

332 
	}
}

339 
	$adc_£t_sˇn_ªsﬁuti⁄
(
uöt32_t
 
adc
, uöt32_à
ªs
)

341 
	`ADC_SCANCTRL
(
adc
) =

342 (
	`ADC_SCANCTRL
(
adc
Ë& ~
ADC_SCANCTRL_RES_MASK
Ë| 
ªs
;

343 
	}
}

349 
	$adc_£t_sˇn_À·_Æig√d
(
uöt32_t
 
adc
)

351 
	`ADC_SCANCTRL
(
adc
Ë|
ADC_SCANCTRL_ADJ
;

352 
	}
}

358 
	$adc_£t_sˇn_right_Æig√d
(
uöt32_t
 
adc
)

360 
	`ADC_SCANCTRL
(
adc
Ë&~
ADC_SCANCTRL_ADJ
;

361 
	}
}

367 
	$adc_£t_sˇn_sögÀ_íded
(
uöt32_t
 
adc
)

369 
	`ADC_SCANCTRL
(
adc
Ë&~
ADC_SCANCTRL_DIFF
;

370 
	}
}

376 
	$adc_£t_sˇn_dif„ª¡ül
(
uöt32_t
 
adc
)

378 
	`ADC_SCANCTRL
(
adc
Ë|
ADC_SCANCTRL_DIFF
;

379 
	}
}

387 
	$adc_íabÀ_sˇn_ª≥©_c⁄v
(
uöt32_t
 
adc
)

389 
	`ADC_SCANCTRL
(
adc
Ë|
ADC_SCANCTRL_REP
;

390 
	}
}

396 
	$adc_dißbÀ_sˇn_ª≥©_c⁄v
(
uöt32_t
 
adc
)

398 
	`ADC_SCANCTRL
(
adc
Ë&~
ADC_SCANCTRL_REP
;

399 
	}
}

405 
	$adc_íabÀ_sögÀ_ªsu…_ovîÊow_öãºu±
(
uöt32_t
 
adc
)

407 
	`ADC_IEN
(
adc
Ë|
ADC_IEN_SINGLEOF
;

408 
	}
}

414 
	$adc_dißbÀ_sögÀ_ªsu…_ovîÊow_öãºu±
(
uöt32_t
 
adc
)

416 
	`ADC_IEN
(
adc
Ë&~
ADC_IEN_SINGLEOF
;

417 
	}
}

423 
	$adc_íabÀ_sögÀ_c⁄vîsi⁄_com∂ëe_öãºu±
(
uöt32_t
 
adc
)

425 
	`ADC_IEN
(
adc
Ë|
ADC_IEN_SINGLE
;

426 
	}
}

432 
	$adc_dißbÀ_sögÀ_c⁄vîsi⁄_com∂ëe_öãºu±
(
uöt32_t
 
adc
)

434 
	`ADC_IEN
(
adc
Ë&~
ADC_IEN_SINGLE
;

435 
	}
}

441 
	$adc_íabÀ_sˇn_ªsu…_ovîÊow_öãºu±
(
uöt32_t
 
adc
)

443 
	`ADC_IEN
(
adc
Ë|
ADC_IEN_SCANOF
;

444 
	}
}

450 
	$adc_dißbÀ_sˇn_ªsu…_ovîÊow_öãºu±
(
uöt32_t
 
adc
)

452 
	`ADC_IEN
(
adc
Ë&~
ADC_IEN_SCANOF
;

453 
	}
}

459 
	$adc_íabÀ_sˇn_c⁄vîsi⁄_com∂ëe_öãºu±
(
uöt32_t
 
adc
)

461 
	`ADC_IEN
(
adc
Ë|
ADC_IEN_SCAN
;

462 
	}
}

468 
	$adc_dißbÀ_sˇn_c⁄vîsi⁄_com∂ëe_öãºu±
(
uöt32_t
 
adc
)

470 
	`ADC_IEN
(
adc
Ë&~
ADC_IEN_SCAN
;

471 
	}
}

479 
boﬁ
 
	$adc_gë_sögÀ_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
)

481  (
	`ADC_IF
(
adc
Ë& 
ADC_IF_SCANOF
) != 0;

482 
	}
}

490 
boﬁ
 
	$adc_gë_sögÀ_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
)

492  (
	`ADC_IF
(
adc
Ë& 
ADC_IF_SINGLE
) != 0;

493 
	}
}

501 
boﬁ
 
	$adc_gë_sˇn_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
)

503  (
	`ADC_IF
(
adc
Ë& 
ADC_IF_SCANOF
) != 0;

504 
	}
}

512 
boﬁ
 
	$adc_gë_sˇn_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
)

514  (
	`ADC_IF
(
adc
Ë& 
ADC_IF_SCAN
) != 0;

515 
	}
}

521 
	$adc_£t_sögÀ_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
)

523 
	`ADC_IFS
(
adc
Ë
ADC_IFS_SINGLEOF
;

524 
	}
}

530 
	$adc_£t_sögÀ_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
)

532 
	`ADC_IFS
(
adc
Ë
ADC_IFS_SINGLE
;

533 
	}
}

539 
	$adc_£t_sˇn_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
)

541 
	`ADC_IFS
(
adc
Ë
ADC_IFS_SCANOF
;

542 
	}
}

548 
	$adc_£t_sˇn_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
)

550 
	`ADC_IFS
(
adc
Ë
ADC_IFS_SCAN
;

551 
	}
}

557 
	$adc_˛ór_sögÀ_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
)

559 
	`ADC_IFC
(
adc
Ë
ADC_IFC_SINGLEOF
;

560 
	}
}

566 
	$adc_˛ór_sögÀ_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
)

568 
	`ADC_IFC
(
adc
Ë
ADC_IFC_SINGLE
;

569 
	}
}

575 
	$adc_˛ór_sˇn_ªsu…_ovîÊow_Êag
(
uöt32_t
 
adc
)

577 
	`ADC_IFC
(
adc
Ë
ADC_IFC_SCANOF
;

578 
	}
}

584 
	$adc_˛ór_sˇn_c⁄vîsi⁄_com∂ëe_Êag
(
uöt32_t
 
adc
)

586 
	`ADC_IFC
(
adc
Ë
ADC_IFC_SCAN
;

587 
	}
}

594 
uöt32_t
 
	$adc_sögÀ_d©a
(
uöt32_t
 
adc
)

596  
	`ADC_SINGLEDATA
(
adc
);

597 
	}
}

604 
uöt32_t
 
	$adc_sˇn_d©a
(
uöt32_t
 
adc
)

606  
	`ADC_SCANDATA
(
adc
);

607 
	}
}

616 
uöt32_t
 
	$adc_sögÀ_d©a_≥ak
(
uöt32_t
 
adc
)

618  
	`ADC_SINGLEDATAP
(
adc
);

619 
	}
}

628 
uöt32_t
 
	$adc_sˇn_d©a_≥ak
(
uöt32_t
 
adc
)

630  
	`ADC_SCANDATAP
(
adc
);

631 
	}
}

637 
	$adc_£t_ˇlibøti⁄_sˇn_gaö
(
uöt32_t
 
adc
, 
uöt8_t
 
sˇn_gaö
)

639 
	`ADC_CAL
(
adc
Ë(ADC_CAL◊dcË& 
ADC_CAL_SCANGAIN_MASK
Ë| 
sˇn_gaö
;

640 
	}
}

646 
	$adc_£t_ˇlibøti⁄_sˇn_off£t
(
uöt32_t
 
adc
, 
uöt8_t
 
sˇn_off£t
)

648 
	`ADC_CAL
(
adc
Ë(ADC_CAL◊dcË& 
ADC_CAL_SCANOFF_MASK
Ë| 
sˇn_off£t
;

649 
	}
}

655 
	$adc_£t_ˇlibøti⁄_sögÀ_gaö
(
uöt32_t
 
adc
, 
uöt8_t
 
sögÀ_gaö
)

657 
	`ADC_CAL
(
adc
Ë(ADC_CAL◊dcË& 
ADC_CAL_SINGLEGAIN_MASK
Ë| 
sögÀ_gaö
;

658 
	}
}

664 
	$adc_£t_ˇlibøti⁄_sögÀ_off£t
(
uöt32_t
 
adc
, 
uöt8_t
 
sögÀ_off£t
)

666 
	`ADC_CAL
(
adc
Ë(ADC_CAL◊dcË& 
ADC_CAL_SINGLEOFF_MASK
Ë| 
sögÀ_off£t
;

667 
	}
}

	@libopencm3/lib/efm32/common/cmu_common.c

20 
	~<lib›ícm3/efm32/cmu.h
>

21 
	~<lib›ícm3/efm32/msc.h
>

26 
	$cmu_íabÀ_lock
()

28 
CMU_LOCK
 = 
CMU_LOCK_LOCKKEY_LOCK
;

29 
	}
}

34 
	$cmu_dißbÀ_lock
()

36 
CMU_LOCK
 = 
CMU_LOCK_LOCKKEY_UNLOCK
;

37 
	}
}

44 
boﬁ
 
	$cmu_gë_lock_Êag
()

46  (
CMU_LOCK
 & 
CMU_LOCK_LOCKKEY_MASK
Ë=
CMU_LOCK_LOCKKEY_LOCKED
;

47 
	}
}

49 
	#_CMU_REG
(
i
Ë
	`MMIO32
(
CMU_BASE
 + ((iË>> 5))

	)

50 
	#_CMU_BIT
(
i
Ë(1 << ((iË& 0x1f))

	)

63 
	$cmu_≥rùh_˛ock_íabÀ
(
cmu_≥rùh_˛kí
 
˛kí
)

65 
	`_CMU_REG
(
˛kí
Ë|
	`_CMU_BIT
(clken);

66 
	}
}

78 
	$cmu_≥rùh_˛ock_dißbÀ
(
cmu_≥rùh_˛kí
 
˛kí
)

80 
	`_CMU_REG
(
˛kí
Ë&~
	`_CMU_BIT
(clken);

81 
	}
}

87 
	$cmu_osc_⁄
(
cmu_osc
 
osc
)

89 
osc
) {

90 
HFRCO
:

91 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_HFRCOEN
;

93 
LFRCO
:

94 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_LFRCOEN
;

96 
ULFRCO
:

99 
HFXO
:

100 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_HFXOEN
;

102 
LFXO
:

103 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_LFXOEN
;

105 
AUXHFRCO
:

106 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_AUXHFRCOEN
;

109 
	}
}

115 
	$cmu_osc_off
(
cmu_osc
 
osc
)

117 
osc
) {

118 
HFRCO
:

119 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_HFRCODIS
;

121 
LFRCO
:

122 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_LFRCODIS
;

124 
ULFRCO
:

127 
HFXO
:

128 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_HFXODIS
;

130 
LFXO
:

131 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_LFXODIS
;

133 
AUXHFRCO
:

134 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_AUXHFRCODIS
;

137 
	}
}

145 
boﬁ
 
	$cmu_osc_ªady_Êag
(
cmu_osc
 
osc
)

147 
osc
) {

148 
HFRCO
:

149  (
CMU_STATUS
 & 
CMU_STATUS_HFRCORDY
) != 0;

151 
LFRCO
:

152  (
CMU_STATUS
 & 
CMU_STATUS_LFRCORDY
) != 0;

154 
ULFRCO
:

157 
HFXO
:

158  (
CMU_STATUS
 & 
CMU_STATUS_HFXORDY
) != 0;

160 
LFXO
:

161  (
CMU_STATUS
 & 
CMU_STATUS_LFXORDY
) != 0;

163 
AUXHFRCO
:

164  (
CMU_STATUS
 & 
CMU_STATUS_AUXHFRCORDY
) != 0;

168  
Ál£
;

169 
	}
}

175 
	$cmu_waô_f‹_osc_ªady
(
cmu_osc
 
osc
)

177 
osc
) {

178 
HFRCO
:

179 (
CMU_STATUS
 & 
CMU_STATUS_HFRCORDY
) == 0);

181 
LFRCO
:

182 (
CMU_STATUS
 & 
CMU_STATUS_LFRCORDY
) == 0);

184 
ULFRCO
:

187 
HFXO
:

188 (
CMU_STATUS
 & 
CMU_STATUS_HFXORDY
) == 0);

190 
LFXO
:

191 (
CMU_STATUS
 & 
CMU_STATUS_LFXORDY
) == 0);

193 
AUXHFRCO
:

194 (
CMU_STATUS
 & 
CMU_STATUS_AUXHFRCORDY
) == 0);

197 
	}
}

206 
	$cmu_£t_hf˛k_sour˚
(
cmu_osc
 
osc
)

208 
osc
) {

209 
HFXO
:

210 
CMU_CMD
 = 
CMU_CMD_HFCLKSEL_HFXO
;

212 
HFRCO
:

213 
CMU_CMD
 = 
CMU_CMD_HFCLKSEL_HFRCO
;

215 
LFXO
:

216 
CMU_CMD
 = 
CMU_CMD_HFCLKSEL_LFXO
;

218 
LFRCO
:

219 
CMU_CMD
 = 
CMU_CMD_HFCLKSEL_LFRCO
;

225 
	}
}

227 
cmu_osc
 
	$cmu_gë_hf˛k_sour˚
()

229 
uöt32_t
 
°©us
 = 
CMU_STATUS
;

230 i‡(
°©us
 & 
CMU_STATUS_LFXOSEL
) {

231  
LFXO
;

232 } i‡(
°©us
 & 
CMU_STATUS_LFRCOSEL
) {

233  
LFRCO
;

234 } i‡(
°©us
 & 
CMU_STATUS_HFXOSEL
) {

235  
HFXO
;

236 } i‡(
°©us
 & 
CMU_STATUS_HFRCOSEL
) {

237  
HFRCO
;

241  (
cmu_osc
) -1;

242 
	}
}

247 
	$cmu_˛ock_£tup_ö_hfxo_out_48mhz
()

250 
CMU_HFCORECLKDIV
 = 
CMU_HFCORECLKDIV_HFCORECLKDIV_NODIV


251 | 
CMU_HFCORECLKDIV_HFCORECLKLEDIV
;

252 
CMU_CTRL
 = (CMU_CTRL

253 & ~(
CMU_CTRL_HFCLKDIV_MASK
 | 
CMU_CTRL_HFXOBUFCUR_MASK
))

254 | (
CMU_CTRL_HFCLKDIV_NODIV


255 | 
CMU_CTRL_HFXOBUFCUR_BOOSTABOVE32MHZ
);

258 
	`cmu_osc_⁄
(
HFXO
);

261 
	`cmu_waô_f‹_osc_ªady
(
HFXO
);

264 
MSC_READCTRL
 = (MSC_READCTRL & ~
MSC_READCTRL_MODE_MASK
)

265 | 
MSC_READCTRL_MODE_WS2
;

268 
	`cmu_£t_hf˛k_sour˚
(
HFXO
);

271 
	`cmu_gë_hf˛k_sour˚
(Ë!
HFXO
);

272 
	}
}

	@libopencm3/lib/efm32/common/dac_common.c

23 
	~<lib›ícm3/efm32/dac.h
>

32 
	$dac_£t_ª‰esh_cy˛e
(
uöt32_t
 
dac
, uöt32_à
ª‰£l
)

34 
	`DAC_CTRL
(
dac
Ë(DAC_CTRL(dacË& ~
DAC_CTRL_REFRSEL_MASK
Ë| 
ª‰£l
;

35 
	}
}

42 
	$dac_£t_˛ock_¥esˇÀr
(
uöt32_t
 
dac
, uöt32_à
¥esc
)

44 
	`DAC_CTRL
(
dac
Ë(DAC_CTRL(dacË& ~
DAC_CTRL_PRESC_MASK
Ë| 
¥esc
;

45 
	}
}

52 
	$dac_£t_ª„ªn˚
(
uöt32_t
 
dac
, uöt32_à
ªf£l
)

54 
	`DAC_CTRL
(
dac
Ë(DAC_CTRL(dacË& ~
DAC_CTRL_REFSEL_MASK
Ë| 
ªf£l
;

55 
	}
}

62 
	$dac_£t_out_mode
(
uöt32_t
 
dac
, uöt32_à
outmode
)

64 
	`DAC_CTRL
(
dac
Ë(DAC_CTRL(dacË& ~
DAC_CTRL_OUTMODE_MASK
Ë| 
outmode
;

65 
	}
}

72 
	$dac_£t_c⁄vîsi⁄_mode
(
uöt32_t
 
dac
, uöt32_à
c⁄vmode
)

74 
	`DAC_CTRL
(
dac
Ë(DAC_CTRL(dacË& ~
DAC_CTRL_CONVMODE_MASK
Ë| 
c⁄vmode
;

75 
	}
}

81 
	$dac_íabÀ_söe
(
uöt32_t
 
dac
)

83 
	`DAC_CTRL
(
dac
Ë|
DAC_CTRL_SINMODE
;

84 
	}
}

90 
	$dac_dißbÀ_söe
(
uöt32_t
 
dac
)

92 
	`DAC_CTRL
(
dac
Ë&~
DAC_CTRL_SINMODE
;

93 
	}
}

101 
	$dac_£t_¥s_åiggî
(
uöt32_t
 
dac
, 
dac_ch
 
dac_ch™
,

102 
¥s_ch
 
¥s_ch™
)

104 
uöt32_t
 
ch_˘æ
 = 
	`DAC_CHx_CTRL
(
dac
, 
dac_ch™
);

105 
ch_˘æ
 &
DAC_CH_CTRL_PRSSEL_MASK
;

106 
ch_˘æ
 |
	`DAC_CH_CTRL_PRSSEL
(
¥s_ch™
);

107 
	`DAC_CHx_CTRL
(
dac
, 
dac_ch™
Ë
ch_˘æ
;

108 
	}
}

115 
	$dac_íabÀ_¥s_åiggî
(
uöt32_t
 
dac
, 
dac_ch
 
ch
)

117 
	`DAC_CHx_CTRL
(
dac
, 
ch
Ë|
DAC_CH_CTRL_PRSEN
;

118 
	}
}

125 
	$dac_dißbÀ_¥s_åiggî
(
uöt32_t
 
dac
, 
dac_ch
 
ch
)

127 
	`DAC_CHx_CTRL
(
dac
, 
ch
Ë&~
DAC_CH_CTRL_PRSEN
;

128 
	}
}

135 
	$dac_íabÀ_auto_ª‰esh
(
uöt32_t
 
dac
, 
dac_ch
 
ch
)

137 
	`DAC_CHx_CTRL
(
dac
, 
ch
Ë|
DAC_CH_CTRL_REFREN
;

138 
	}
}

145 
	$dac_dißbÀ_auto_ª‰esh
(
uöt32_t
 
dac
, 
dac_ch
 
ch
)

147 
	`DAC_CHx_CTRL
(
dac
, 
ch
Ë&~
DAC_CH_CTRL_REFREN
;

148 
	}
}

155 
	$dac_íabÀ_ch™√l
(
uöt32_t
 
dac
, 
dac_ch
 
ch
)

157 
	`DAC_CHx_CTRL
(
dac
, 
ch
Ë|
DAC_CH_CTRL_EN
;

158 
	}
}

165 
	$dac_dißbÀ_ch™√l
(
uöt32_t
 
dac
, 
dac_ch
 
ch
)

167 
	`DAC_CHx_CTRL
(
dac
, 
ch
Ë&~
DAC_CH_CTRL_REFREN
;

168 
	}
}

	@libopencm3/lib/efm32/common/dma_common.c

20 
	~<lib›ícm3/efm32/dma.h
>

22 
	#CHANNEL_SUPPORT_LOOP
(
ch
Ë(((chË=
DMA_CH0
Ë|| ((chË=
DMA_CH1
))

	)

28 
	$dma_íabÀ_wôh_¥ivûeged_ac˚ss
()

30 
DMA_CONFIG
 = 
DMA_CONFIG_EN
 | 
DMA_CONFIG_CHPROT
;

31 
	}
}

37 
	$dma_íabÀ_wôh_u≈rivûeged_ac˚ss
()

39 
DMA_CONFIG
 = 
DMA_CONFIG_EN
;

40 
	}
}

46 
	$dma_íabÀ
()

48 
	`dma_íabÀ_wôh_u≈rivûeged_ac˚ss
();

49 
	}
}

54 
	$dma_dißbÀ
()

56 
DMA_CONFIG
 = 0;

57 
	}
}

64 
	$dma_£t_desc_addªss
(
uöt32_t
 
desc_ba£
)

66 i‡(
desc_ba£
 & 0xFF) {

70 
DMA_CTRLBASE
 = 
desc_ba£
;

71 
	}
}

78 
boﬁ
 
	$dma_gë_waô_⁄_ªque°_Êag
(
dma_ch
 
ch
)

80 
uöt32_t
 
mask
 = 
	`DMA_CHWAITSTATUS_CHxWAITSTATUS
(
ch
);

81  (
DMA_CHWAITSTATUS
 & 
mask
) != 0;

82 
	}
}

88 
	$dma_gíî©e_so·w¨e_ªque°
(
dma_ch
 
ch
)

90 
DMA_CHSWREQ
 = 
	`DMA_CHSWREQ_CHxSWREQ
(
ch
);

91 
	}
}

97 
	$dma_íabÀ_bur°_⁄ly
(
dma_ch
 
ch
)

99 
DMA_CHUSEBURSTS
 = 
	`DMA_CHUSEBURSTS_CHxSUSEBURSTS
(
ch
);

100 
	}
}

106 
	$dma_íabÀ_sögÀ_™d_bur°
(
dma_ch
 
ch
)

108 
DMA_CHUSEBURSTC
 = 
	`DMA_CHUSEBURSTC_CHxSUSEBURSTC
(
ch
);

109 
	}
}

115 
	$dma_íabÀ_≥rùh_ªque°
(
dma_ch
 
ch
)

117 
DMA_CHREQMASKC
 = 
	`DMA_CHREQMASKC_CHxSREQMASKC
(
ch
);

118 
	}
}

124 
	$dma_dißbÀ_≥rùh_ªque°
(
dma_ch
 
ch
)

126 
DMA_CHREQMASKS
 = 
	`DMA_CHREQMASKS_CHxSREQMASKS
(
ch
);

127 
	}
}

133 
	$dma_íabÀ_ch™√l
(
dma_ch
 
ch
)

135 
DMA_CHENS
 = 
	`DMA_CHENS_CHxSENS
(
ch
);

136 
	}
}

142 
	$dma_dißbÀ_ch™√l
(
dma_ch
 
ch
)

144 
DMA_CHENC
 = 
	`DMA_CHENC_CHxSENC
(
ch
);

145 
	}
}

151 
	$dma_dißbÀ_Æã∫©e_°ru˘uª
(
dma_ch
 
ch
)

153 
DMA_CHALTC
 = 
	`DMA_CHALTC_CHxSALTC
(
ch
);

154 
	}
}

160 
	$dma_íabÀ_Æã∫©e_°ru˘uª
(
dma_ch
 
ch
)

162 
DMA_CHALTS
 = 
	`DMA_CHALTS_CHxSALTS
(
ch
);

163 
	}
}

169 
	$dma_íabÀ_¥i‹ôy
(
dma_ch
 
ch
)

171 
DMA_CHPRIS
 = 
	`DMA_CHPRIS_CHxSPRIC
(
ch
);

172 
	}
}

178 
	$dma_dißbÀ_¥i‹ôy
(
dma_ch
 
ch
)

180 
DMA_CHPRIC
 = 
	`DMA_CHPRIC_CHxSPRIC
(
ch
);

181 
	}
}

188 
boﬁ
 
	$dma_gë_bus_îr‹_Êag
()

190  (
DMA_ERRORC
 & 
DMA_ERRORC_ERRORC
) != 0;

191 
	}
}

196 
	$dma_˛ór_bus_îr‹_Êag
()

198 
DMA_ERRORC
 = 
DMA_ERRORC_ERRORC
;

199 
	}
}

207 
boﬁ
 
	$dma_gë_ªque°_Êag
(
dma_ch
 
ch
)

209 
uöt32_t
 
mask
 = 
	`DMA_CHREQSTATUS_CHxSREQSTATUS
(
ch
);

210  (
DMA_CHREQSTATUS
 & 
mask
) != 0;

211 
	}
}

218 
boﬁ
 
	$dma_gë_bus_îr‹_öãºu±_Êag
()

220  (
DMA_IF
 & 
DMA_IF_ERR
) != 0;

221 
	}
}

230 
boﬁ
 
	$dma_gë_d⁄e_öãºu±_Êag
(
dma_ch
 
ch
)

232  (
DMA_IF
 & 
	`DMA_IF_CHxDONE
(
ch
)) != 0;

233 
	}
}

238 
	$dma_£t_bus_îr‹_öãºu±_Êag
()

240 
DMA_IFS
 = 
DMA_IFS_ERR
;

241 
	}
}

247 
	$dma_£t_d⁄e_öãºu±_Êag
(
dma_ch
 
ch
)

249 
DMA_IFS
 = 
	`DMA_IFS_CHxDONE
(
ch
);

250 
	}
}

255 
	$dma_˛ór_bus_îr‹_öãºu±_Êag
()

257 
DMA_IFC
 = 
DMA_IFC_ERR
;

258 
	}
}

264 
	$dma_˛ór_d⁄e_öãºu±_Êag
(
dma_ch
 
ch
)

266 
DMA_IFC
 = 
	`DMA_IFC_CHxDONE
(
ch
);

267 
	}
}

272 
	$dma_íabÀ_bus_îr‹_öãºu±
()

274 
DMA_IEN
 |
DMA_IEN_ERR
;

275 
	}
}

280 
	$dma_dißbÀ_bus_îr‹_öãºu±
()

282 
DMA_IEN
 &~
DMA_IEN_ERR
;

283 
	}
}

289 
	$dma_íabÀ_d⁄e_öãºu±
(
dma_ch
 
ch
)

291 
DMA_IEN
 |
	`DMA_IEN_CHxDONE
(
ch
);

292 
	}
}

298 
	$dma_dißbÀ_d⁄e_öãºu±
(
dma_ch
 
ch
)

300 
DMA_IEN
 &~
	`DMA_IEN_CHxDONE
(
ch
);

301 
	}
}

308 
	$dma_£t_sour˚
(
dma_ch
 
ch
, 
uöt32_t
 
sour˚
)

310 
	`DMA_CHx_CTRL
(
ch
Ë(DMA_CHx_CTRL(chË& ~
DMA_CH_CTRL_SOURCESEL_MASK
)

311 | 
sour˚
;

312 
	}
}

319 
	$dma_£t_sig«l
(
dma_ch
 
ch
, 
uöt32_t
 
sig«l
)

321 
	`DMA_CHx_CTRL
(
ch
Ë(DMA_CHx_CTRL(chË& ~
DMA_CH_CTRL_SIGSEL_MASK
)

322 | 
sig«l
;

323 
	}
}

329 
	$dma_ch™√l_ª£t
(
dma_ch
 
ch
)

332 
DMA_CHENC
 = 
	`DMA_CHENC_CHxSENC
(
ch
);

334 
DMA_CHALTC
 = 
	`DMA_CHALTC_CHxSALTC
(
ch
);

336 
DMA_CHPRIC
 = 
	`DMA_CHPRIC_CHxSPRIC
(
ch
);

338 
DMA_IFC
 = 
	`DMA_IFC_CHxDONE
(
ch
);

340 i‡(
	`CHANNEL_SUPPORT_LOOP
(
ch
)) {

341 
	`DMA_LOOPx
(
ch
) = 0;

344 
	`DMA_CHx_CTRL
(
ch
) = 0;

345 
	}
}

353 
	$dma_£t_lo›_cou¡
(
dma_ch
 
ch
, 
uöt16_t
 
cou¡
)

355 i‡(!
	`CHANNEL_SUPPORT_LOOP
(
ch
)) {

359 
	`DMA_LOOPx
(
ch
Ë(DMA_LOOPx(chË& ~
DMA_LOOP_WIDTH_MASK
)

360 | 
	`DMA_LOOP_WIDTH
(
cou¡
 - 1);

361 
	}
}

367 
	$dma_íabÀ_lo›
(
dma_ch
 
ch
)

369 i‡(!
	`CHANNEL_SUPPORT_LOOP
(
ch
)) {

373 
	`DMA_LOOPx
(
ch
Ë|
DMA_LOOP_EN
;

374 
	}
}

380 
	$dma_dißbÀ_lo›
(
dma_ch
 
ch
)

382 i‡(!
	`CHANNEL_SUPPORT_LOOP
(
ch
)) {

386 
	`DMA_LOOPx
(
ch
Ë&~
DMA_LOOP_EN
;

387 
	}
}

396 
	$dma_desc_£t_de°_size
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

397 
dma_mem
 
size
)

399 
uöt32_t
 
cfg
 = 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
);

400 
cfg
 &~
DMA_DESC_CH_CFG_DEST_SIZE_MASK
;

401 
cfg
 |
	`DMA_DESC_CH_CFG_DEST_SIZE
(
size
);

402 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
Ë
cfg
;

403 
	}
}

412 
	$dma_desc_£t_de°_öc
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

413 
dma_mem
 
öc
)

415 
uöt32_t
 
cfg
 = 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
);

416 
cfg
 &~
DMA_DESC_CH_CFG_DEST_INC_MASK
;

417 
cfg
 |
	`DMA_DESC_CH_CFG_DEST_INC
(
öc
);

418 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
Ë
cfg
;

419 
	}
}

428 
	$dma_desc_£t_§c_size
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

429 
dma_mem
 
size
)

431 
uöt32_t
 
cfg
 = 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
);

432 
cfg
 &~
DMA_DESC_CH_CFG_SRC_SIZE_MASK
;

433 
cfg
 |
	`DMA_DESC_CH_CFG_SRC_SIZE
(
size
);

434 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
Ë
cfg
;

435 
	}
}

444 
	$dma_desc_£t_§c_öc
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
, 
dma_mem
 
öc
)

447 
uöt32_t
 
cfg
 = 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
);

448 
cfg
 &~
DMA_DESC_CH_CFG_SRC_INC_MASK
;

449 
cfg
 |
	`DMA_DESC_CH_CFG_SRC_INC
(
öc
);

450 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
Ë
cfg
;

451 
	}
}

460 
	$dma_desc_£t_r_powî
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

461 
dma_r_powî
 
r_powî
)

463 
uöt32_t
 
cfg
 = 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
);

464 
cfg
 &~
DMA_DESC_CH_CFG_R_POWER_MASK
;

465 
cfg
 |
	`DMA_DESC_CH_CFG_R_POWER
(
r_powî
);

466 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
Ë
cfg
;

467 
	}
}

475 
	$dma_desc_íabÀ_√xt_u£bur°
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
)

477 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
Ë&~
DMA_DESC_CH_CFG_NEXT_USEBURST
;

478 
	}
}

486 
	$dma_desc_dißbÀ_√xt_u£bur°
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
)

488 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
Ë|
DMA_DESC_CH_CFG_NEXT_USEBURST
;

489 
	}
}

498 
	$dma_desc_£t_cou¡
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
, 
uöt16_t
 
cou¡
)

500 
uöt32_t
 
cfg
 = 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
);

501 
cfg
 &~
DMA_DESC_CH_CFG_N_MINUS_1_MASK
;

502 
cfg
 |
	`DMA_DESC_CH_CFG_N_MINUS_1
(
cou¡
 - 1);

503 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
Ë
cfg
;

504 
	}
}

513 
	$dma_desc_£t_u£r_d©a
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

514 
uöt32_t
 
u£r_d©a
)

516 
	`DMA_DESC_CHx_USER_DATA
(
desc_ba£
, 
ch
Ë
u£r_d©a
;

517 
	}
}

526 
uöt32_t
 
	$dma_desc_gë_u£r_d©a
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
)

528  
	`DMA_DESC_CHx_USER_DATA
(
desc_ba£
, 
ch
);

529 
	}
}

543 
ölöe
 
uöt32_t
 
	$dma_ˇlc_íd_‰om_°¨t
(
uöt32_t
 
°¨t
, 
uöt8_t
 
öc
,

544 
uöt16_t
 
n_möus_1
)

546 
öc
) {

547 
DMA_MEM_BYTE
:

548  
°¨t
 + 
n_möus_1
;

549 
DMA_MEM_HALF_WORD
:

550  
°¨t
 + (
n_möus_1
 << 1);

551 
DMA_MEM_WORD
:

552  
°¨t
 + (
n_möus_1
 << 2);

553 
DMA_MEM_NONE
:

554  
°¨t
;

558 
	}
}

571 
	$dma_desc_£t_§c_addªss
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

572 
uöt32_t
 
§c_°¨t
)

574 
uöt32_t
 
cfg
 = 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
);

575 
uöt8_t
 
öc
 = (
cfg
 & 
DMA_DESC_CH_CFG_SRC_INC_MASK
)

576 >> 
DMA_DESC_CH_CFG_SRC_INC_SHIFT
;

577 
uöt16_t
 
n_möus_1
 = (
cfg
 & 
DMA_DESC_CH_CFG_N_MINUS_1_MASK
)

578 >> 
DMA_DESC_CH_CFG_N_MINUS_1_SHIFT
;

579 
uöt32_t
 
§c_íd
 = 
	`dma_ˇlc_íd_‰om_°¨t
(
§c_°¨t
, 
öc
, 
n_möus_1
);

580 
	`DMA_DESC_CHx_SRC_DATA_END_PTR
(
desc_ba£
, 
ch
Ë
§c_íd
;

581 
	}
}

595 
	$dma_desc_£t_de°_addªss
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
,

596 
uöt32_t
 
de°_°¨t
)

598 
uöt32_t
 
cfg
 = 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
);

599 
uöt8_t
 
öc
 = (
cfg
 & 
DMA_DESC_CH_CFG_DEST_INC_MASK
)

600 >> 
DMA_DESC_CH_CFG_DEST_INC_SHIFT
;

601 
uöt16_t
 
n_möus_1
 = (
cfg
 & 
DMA_DESC_CH_CFG_N_MINUS_1_MASK
)

602 >> 
DMA_DESC_CH_CFG_N_MINUS_1_SHIFT
;

603 
uöt32_t
 
de°_íd
 = 
	`dma_ˇlc_íd_‰om_°¨t
(
de°_°¨t
, 
öc
,

604 
n_möus_1
);

605 
	`DMA_DESC_CHx_DEST_DATA_END_PTR
(
desc_ba£
, 
ch
Ë
de°_íd
;

606 
	}
}

615 
	$dma_desc_£t_mode
(
uöt32_t
 
desc_ba£
, 
dma_ch
 
ch
, 
dma_mode
 
mode
)

617 
uöt32_t
 
cfg
 = 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
);

618 
cfg
 &~
DMA_DESC_CH_CFG_CYCLE_CTRL_MASK
;

619 
cfg
 |
	`DMA_DESC_CH_CFG_CYCLE_CTRL
(
mode
);

620 
	`DMA_DESC_CHx_CFG
(
desc_ba£
, 
ch
Ë
cfg
;

621 
	}
}

	@libopencm3/lib/efm32/common/gpio_common.c

20 
	~<lib›ícm3/efm32/gpio.h
>

27 
	$gpio_íabÀ_lock
()

29 
GPIO_LOCK
 = 
GPIO_LOCK_LOCKKEY_LOCK
;

30 
	}
}

37 
	$gpio_dißbÀ_lock
()

39 
GPIO_LOCK
 = 
GPIO_LOCK_LOCKKEY_UNLOCK
;

40 
	}
}

49 
boﬁ
 
	$gpio_gë_lock_Êag
()

51  (
GPIO_LOCK
 & 
GPIO_LOCK_LOCKKEY_MASK
)

52 =
GPIO_LOCK_LOCKKEY_LOCKED
;

53 
	}
}

60 
	$gpio_£t_drive_°ªngth
(
uöt32_t
 
gpio_p‹t
,

61 
gpio_drive_°ªngth
 
drive_°ígth
)

63 
	`GPIO_P_CTRL
(
gpio_p‹t
Ë
	`GPIO_P_CTRL_DRIVEMODE
(
drive_°ígth
);

64 
	}
}

73 
	$gpio_mode_£tup
(
uöt32_t
 
gpio_p‹t
, 
gpio_mode
 
mode
, 
uöt16_t
 
gpios
)

75 
i
;

77 
uöt32_t
 
high
 = 
	`GPIO_P_MODEH
(
gpio_p‹t
);

78 
uöt32_t
 
low
 = 
	`GPIO_P_MODEL
(
gpio_p‹t
);

80 
i
 = 0; i < 8; i++) {

81 i‡(
gpios
 & (1 << 
i
)) {

82 
low
 &~
	`GPIO_P_MODE_MODEx_MASK
(
i
);

83 
low
 |
	`GPIO_P_MODE_MODEx
(
i
, 
mode
);

86 i‡(
gpios
 & (1 << (
i
 + 8))) {

87 
high
 &~
	`GPIO_P_MODE_MODEx_MASK
(
i
);

88 
high
 |
	`GPIO_P_MODE_MODEx
(
i
, 
mode
);

92 
	`GPIO_P_MODEL
(
gpio_p‹t
Ë
low
;

93 
	`GPIO_P_MODEH
(
gpio_p‹t
Ë
high
;

94 
	}
}

102 
	$gpio_£t
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
)

104 
	`GPIO_P_DOUTSET
(
gpio_p‹t
Ë
gpios
;

105 
	}
}

113 
	$gpio_˛ór
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
)

115 
	`GPIO_P_DOUTCLR
(
gpio_p‹t
Ë
gpios
;

116 
	}
}

125 
uöt16_t
 
	$gpio_gë
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
)

127  
	`GPIO_P_DIN
(
gpio_p‹t
Ë& 
gpios
;

128 
	}
}

136 
	$gpio_toggÀ
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
)

138 
	`GPIO_P_DOUTTGL
(
gpio_p‹t
Ë
gpios
;

139 
	}
}

146 
uöt16_t
 
	$gpio_p‹t_ªad
(
uöt32_t
 
gpio_p‹t
)

148  
	`GPIO_P_DIN
(
gpio_p‹t
);

149 
	}
}

156 
	$gpio_p‹t_wrôe
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
d©a
)

158 
	`GPIO_P_DOUT
(
gpio_p‹t
Ë
d©a
;

159 
	}
}

172 
	$gpio_p‹t_c⁄fig_lock
(
uöt32_t
 
gpio_p‹t
, 
uöt16_t
 
gpios
)

174 
	`GPIO_P_PINLOCKN
(
gpio_p‹t
Ë~
gpios
;

175 
	}
}

	@libopencm3/lib/efm32/common/prs_common.c

20 
	~<lib›ícm3/efm32/¥s.h
>

27 
	$¥s_íabÀ_gpio_ouçut
(
¥s_ch
 
ch
)

29 
PRS_ROUTE
 |
	`PRS_ROUTE_CHxPEN
(
ch
);

30 
	}
}

37 
	$¥s_dißbÀ_gpio_ouçut
(
¥s_ch
 
ch
)

39 
PRS_ROUTE
 &~
	`PRS_ROUTE_CHxPEN
(
ch
);

40 
	}
}

47 
	$¥s_£t_ouçut_loc
(
uöt32_t
 
loc
)

49 
PRS_ROUTE
 = (PRS_ROUTE & ~
PRS_ROUTE_LOCATION_MASK
Ë| 
loc
;

50 
	}
}

59 
	$¥s_so·w¨e_pul£
(
¥s_ch
 
ch
)

61 
PRS_SWPULSE
 = 
	`PRS_SWPULSE_CHxPULSE
(
ch
);

62 
	}
}

71 
	$¥s_so·w¨e_Àvñ_high
(
¥s_ch
 
ch
)

73 
PRS_SWLEVEL
 |
	`PRS_SWLEVEL_CHxLEVEL
(
ch
);

74 
	}
}

83 
	$¥s_so·w¨e_Àvñ_low
(
¥s_ch
 
ch
)

85 
PRS_SWLEVEL
 &~
	`PRS_SWLEVEL_CHxLEVEL
(
ch
);

86 
	}
}

93 
	$¥s_íabÀ_async
(
¥s_ch
 
ch
)

95 
	`PRS_CHx_CTRL
(
ch
Ë|
PRS_CH_CTRL_ASYNC
;

96 
	}
}

103 
	$¥s_dißbÀ_async
(
¥s_ch
 
ch
)

105 
	`PRS_CHx_CTRL
(
ch
Ë&~
PRS_CH_CTRL_ASYNC
;

106 
	}
}

113 
	$¥s_£t_edge
(
¥s_ch
 
ch
, 
uöt32_t
 
edge
)

115 
	`PRS_CHx_CTRL
(
ch
Ë(PRS_CHx_CTRL(chË& ~
PRS_CH_CTRL_EDSEL_MASK
Ë| 
edge
;

116 
	}
}

124 
	$¥s_£t_sour˚
(
¥s_ch
 
ch
, 
uöt32_t
 
sour˚
)

126 
	`PRS_CHx_CTRL
(
ch
Ë(PRS_CHx_CTRL(chË& ~
PRS_CH_CTRL_SOURCESEL_MASK
)

127 | 
sour˚
;

128 
	}
}

136 
	$¥s_£t_sig«l
(
¥s_ch
 
ch
, 
uöt32_t
 
sig«l
)

138 
	`PRS_CHx_CTRL
(
ch
Ë(PRS_CHx_CTRL(chË& ~
PRS_CH_CTRL_SIGSEL_MASK
)

139 | 
sig«l
;

140 
	}
}

	@libopencm3/lib/efm32/common/timer_common.c

20 
	~<lib›ícm3/efm32/timî.h
>

22 
	#HAS_DEAD_TIME_INSERTION
(
timî
Ë—imî =
TIMER0
)

	)

28 
	$timî_°¨t
(
uöt32_t
 
timî
)

30 
	`TIMER_CMD
(
timî
Ë
TIMER_CMD_START
;

31 
	}
}

37 
	$timî_°›
(
uöt32_t
 
timî
)

39 
	`TIMER_CMD
(
timî
Ë
TIMER_CMD_STOP
;

40 
	}
}

47 
	$timî_£t_˛ock_¥esˇÀr
(
uöt32_t
 
timî
, uöt32_à
¥esc
)

49 
	`TIMER_CTRL
(
timî
Ë(TIMER_CTRL—imîË& ~
TIMER_CTRL_PRESC_MASK
)

50 | 
	`TIMER_CTRL_PRESC
(
¥esc
);

51 
	}
}

59 
	$timî_£t_t›
(
uöt32_t
 
timî
, uöt32_à
t›
)

61 
	`TIMER_TOP
(
timî
Ë
t›
;

62 
	}
}

	@libopencm3/lib/efm32/ezr32wg/vector_chipset.c

21 
	~<lib›ícm3/cm3/scb.h
>

23 
	$¥e_maö
()

26 
SCB_CPACR
 |
SCB_CPACR_FULL
 * (
SCB_CPACR_CP10
 | 
SCB_CPACR_CP11
);

27 
	}
}

	@libopencm3/lib/efm32/ezr32wg/vector_nvic.c

15 #¥agm®
wók
 
dma_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
gpio_eví_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
timî0_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
ußπ0_rx_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
ußπ0_tx_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
usb_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
acmp01_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
adc0_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
dac0_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
i2c1_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
gpio_odd_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
timî1_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
timî2_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
timî3_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
ußπ1_rx_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
ußπ1_tx_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
À£n£_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
ußπ2_rx_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ußπ2_tx_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
u¨t0_rx_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
u¨t0_tx_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
u¨t1_rx_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
u¨t1_tx_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
Àu¨t0_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
Àu¨t1_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
Àtimî0_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
p˙t0_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
p˙t1_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
p˙t2_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
buπc_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
cmu_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
vcmp_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
lcd_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
msc_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
´s_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ebi_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
emu_i§
 = 
blockög_h™dÀr


62 
	#IRQ_HANDLERS
 \

63 [
NVIC_DMA_IRQ
] = 
dma_i§
, \

64 [
NVIC_GPIO_EVEN_IRQ
] = 
gpio_eví_i§
, \

65 [
NVIC_TIMER0_IRQ
] = 
timî0_i§
, \

66 [
NVIC_USART0_RX_IRQ
] = 
ußπ0_rx_i§
, \

67 [
NVIC_USART0_TX_IRQ
] = 
ußπ0_tx_i§
, \

68 [
NVIC_USB_IRQ
] = 
usb_i§
, \

69 [
NVIC_ACMP01_IRQ
] = 
acmp01_i§
, \

70 [
NVIC_ADC0_IRQ
] = 
adc0_i§
, \

71 [
NVIC_DAC0_IRQ
] = 
dac0_i§
, \

72 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

73 [
NVIC_I2C1_IRQ
] = 
i2c1_i§
, \

74 [
NVIC_GPIO_ODD_IRQ
] = 
gpio_odd_i§
, \

75 [
NVIC_TIMER1_IRQ
] = 
timî1_i§
, \

76 [
NVIC_TIMER2_IRQ
] = 
timî2_i§
, \

77 [
NVIC_TIMER3_IRQ
] = 
timî3_i§
, \

78 [
NVIC_USART1_RX_IRQ
] = 
ußπ1_rx_i§
, \

79 [
NVIC_USART1_TX_IRQ
] = 
ußπ1_tx_i§
, \

80 [
NVIC_LESENSE_IRQ
] = 
À£n£_i§
, \

81 [
NVIC_USART2_RX_IRQ
] = 
ußπ2_rx_i§
, \

82 [
NVIC_USART2_TX_IRQ
] = 
ußπ2_tx_i§
, \

83 [
NVIC_UART0_RX_IRQ
] = 
u¨t0_rx_i§
, \

84 [
NVIC_UART0_TX_IRQ
] = 
u¨t0_tx_i§
, \

85 [
NVIC_UART1_RX_IRQ
] = 
u¨t1_rx_i§
, \

86 [
NVIC_UART1_TX_IRQ
] = 
u¨t1_tx_i§
, \

87 [
NVIC_LEUART0_IRQ
] = 
Àu¨t0_i§
, \

88 [
NVIC_LEUART1_IRQ
] = 
Àu¨t1_i§
, \

89 [
NVIC_LETIMER0_IRQ
] = 
Àtimî0_i§
, \

90 [
NVIC_PCNT0_IRQ
] = 
p˙t0_i§
, \

91 [
NVIC_PCNT1_IRQ
] = 
p˙t1_i§
, \

92 [
NVIC_PCNT2_IRQ
] = 
p˙t2_i§
, \

93 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

94 [
NVIC_BURTC_IRQ
] = 
buπc_i§
, \

95 [
NVIC_CMU_IRQ
] = 
cmu_i§
, \

96 [
NVIC_VCMP_IRQ
] = 
vcmp_i§
, \

97 [
NVIC_LCD_IRQ
] = 
lcd_i§
, \

98 [
NVIC_MSC_IRQ
] = 
msc_i§
, \

99 [
NVIC_AES_IRQ
] = 
´s_i§
, \

100 [
NVIC_EBI_IRQ
] = 
ebi_i§
, \

101 [
NVIC_EMU_IRQ
] = 
emu_i§


	)

	@libopencm3/lib/efm32/g/vector_nvic.c

15 #¥agm®
wók
 
dma_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
gpio_eví_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
timî0_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
ußπ0_rx_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
ußπ0_tx_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
acmp01_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
adc0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
dac0_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
gpio_odd_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
timî1_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
timî2_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
ußπ1_rx_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
ußπ1_tx_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
ußπ2_rx_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
ußπ2_tx_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
u¨t0_rx_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
u¨t0_tx_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
Àu¨t0_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
Àu¨t1_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
Àtimî0_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
p˙t0_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
p˙t1_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
p˙t2_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
cmu_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
vcmp_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
lcd_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
msc_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
´s_i§
 = 
blockög_h™dÀr


53 
	#IRQ_HANDLERS
 \

54 [
NVIC_DMA_IRQ
] = 
dma_i§
, \

55 [
NVIC_GPIO_EVEN_IRQ
] = 
gpio_eví_i§
, \

56 [
NVIC_TIMER0_IRQ
] = 
timî0_i§
, \

57 [
NVIC_USART0_RX_IRQ
] = 
ußπ0_rx_i§
, \

58 [
NVIC_USART0_TX_IRQ
] = 
ußπ0_tx_i§
, \

59 [
NVIC_ACMP01_IRQ
] = 
acmp01_i§
, \

60 [
NVIC_ADC0_IRQ
] = 
adc0_i§
, \

61 [
NVIC_DAC0_IRQ
] = 
dac0_i§
, \

62 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

63 [
NVIC_GPIO_ODD_IRQ
] = 
gpio_odd_i§
, \

64 [
NVIC_TIMER1_IRQ
] = 
timî1_i§
, \

65 [
NVIC_TIMER2_IRQ
] = 
timî2_i§
, \

66 [
NVIC_USART1_RX_IRQ
] = 
ußπ1_rx_i§
, \

67 [
NVIC_USART1_TX_IRQ
] = 
ußπ1_tx_i§
, \

68 [
NVIC_USART2_RX_IRQ
] = 
ußπ2_rx_i§
, \

69 [
NVIC_USART2_TX_IRQ
] = 
ußπ2_tx_i§
, \

70 [
NVIC_UART0_RX_IRQ
] = 
u¨t0_rx_i§
, \

71 [
NVIC_UART0_TX_IRQ
] = 
u¨t0_tx_i§
, \

72 [
NVIC_LEUART0_IRQ
] = 
Àu¨t0_i§
, \

73 [
NVIC_LEUART1_IRQ
] = 
Àu¨t1_i§
, \

74 [
NVIC_LETIMER0_IRQ
] = 
Àtimî0_i§
, \

75 [
NVIC_PCNT0_IRQ
] = 
p˙t0_i§
, \

76 [
NVIC_PCNT1_IRQ
] = 
p˙t1_i§
, \

77 [
NVIC_PCNT2_IRQ
] = 
p˙t2_i§
, \

78 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

79 [
NVIC_CMU_IRQ
] = 
cmu_i§
, \

80 [
NVIC_VCMP_IRQ
] = 
vcmp_i§
, \

81 [
NVIC_LCD_IRQ
] = 
lcd_i§
, \

82 [
NVIC_MSC_IRQ
] = 
msc_i§
, \

83 [
NVIC_AES_IRQ
] = 
´s_i§


	)

	@libopencm3/lib/efm32/gg/vector_nvic.c

15 #¥agm®
wók
 
dma_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
gpio_eví_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
timî0_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
ußπ0_rx_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
ußπ0_tx_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
usb_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
acmp01_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
adc0_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
dac0_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
i2c1_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
gpio_odd_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
timî1_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
timî2_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
timî3_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
ußπ1_rx_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
ußπ1_tx_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
À£n£_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
ußπ2_rx_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ußπ2_tx_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
u¨t0_rx_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
u¨t0_tx_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
u¨t1_rx_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
u¨t1_tx_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
Àu¨t0_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
Àu¨t1_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
Àtimî0_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
p˙t0_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
p˙t1_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
p˙t2_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
buπc_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
cmu_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
vcmp_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
lcd_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
msc_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
´s_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ebi_i§
 = 
blockög_h™dÀr


61 
	#IRQ_HANDLERS
 \

62 [
NVIC_DMA_IRQ
] = 
dma_i§
, \

63 [
NVIC_GPIO_EVEN_IRQ
] = 
gpio_eví_i§
, \

64 [
NVIC_TIMER0_IRQ
] = 
timî0_i§
, \

65 [
NVIC_USART0_RX_IRQ
] = 
ußπ0_rx_i§
, \

66 [
NVIC_USART0_TX_IRQ
] = 
ußπ0_tx_i§
, \

67 [
NVIC_USB_IRQ
] = 
usb_i§
, \

68 [
NVIC_ACMP01_IRQ
] = 
acmp01_i§
, \

69 [
NVIC_ADC0_IRQ
] = 
adc0_i§
, \

70 [
NVIC_DAC0_IRQ
] = 
dac0_i§
, \

71 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

72 [
NVIC_I2C1_IRQ
] = 
i2c1_i§
, \

73 [
NVIC_GPIO_ODD_IRQ
] = 
gpio_odd_i§
, \

74 [
NVIC_TIMER1_IRQ
] = 
timî1_i§
, \

75 [
NVIC_TIMER2_IRQ
] = 
timî2_i§
, \

76 [
NVIC_TIMER3_IRQ
] = 
timî3_i§
, \

77 [
NVIC_USART1_RX_IRQ
] = 
ußπ1_rx_i§
, \

78 [
NVIC_USART1_TX_IRQ
] = 
ußπ1_tx_i§
, \

79 [
NVIC_LESENSE_IRQ
] = 
À£n£_i§
, \

80 [
NVIC_USART2_RX_IRQ
] = 
ußπ2_rx_i§
, \

81 [
NVIC_USART2_TX_IRQ
] = 
ußπ2_tx_i§
, \

82 [
NVIC_UART0_RX_IRQ
] = 
u¨t0_rx_i§
, \

83 [
NVIC_UART0_TX_IRQ
] = 
u¨t0_tx_i§
, \

84 [
NVIC_UART1_RX_IRQ
] = 
u¨t1_rx_i§
, \

85 [
NVIC_UART1_TX_IRQ
] = 
u¨t1_tx_i§
, \

86 [
NVIC_LEUART0_IRQ
] = 
Àu¨t0_i§
, \

87 [
NVIC_LEUART1_IRQ
] = 
Àu¨t1_i§
, \

88 [
NVIC_LETIMER0_IRQ
] = 
Àtimî0_i§
, \

89 [
NVIC_PCNT0_IRQ
] = 
p˙t0_i§
, \

90 [
NVIC_PCNT1_IRQ
] = 
p˙t1_i§
, \

91 [
NVIC_PCNT2_IRQ
] = 
p˙t2_i§
, \

92 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

93 [
NVIC_BURTC_IRQ
] = 
buπc_i§
, \

94 [
NVIC_CMU_IRQ
] = 
cmu_i§
, \

95 [
NVIC_VCMP_IRQ
] = 
vcmp_i§
, \

96 [
NVIC_LCD_IRQ
] = 
lcd_i§
, \

97 [
NVIC_MSC_IRQ
] = 
msc_i§
, \

98 [
NVIC_AES_IRQ
] = 
´s_i§
, \

99 [
NVIC_EBI_IRQ
] = 
ebi_i§


	)

	@libopencm3/lib/efm32/hg/cmu.c

21 
	~<lib›ícm3/efm32/cmu.h
>

26 
	$cmu_íabÀ_lock
()

28 
CMU_LOCK
 = 
CMU_LOCK_LOCKKEY_LOCK
;

29 
	}
}

34 
	$cmu_dißbÀ_lock
()

36 
CMU_LOCK
 = 
CMU_LOCK_LOCKKEY_UNLOCK
;

37 
	}
}

44 
boﬁ
 
	$cmu_gë_lock_Êag
()

46  (
CMU_LOCK
 & 
CMU_LOCK_LOCKKEY_MASK
Ë=
CMU_LOCK_LOCKKEY_LOCKED
;

47 
	}
}

49 
	#_CMU_REG
(
i
Ë
	`MMIO32
(
CMU_BASE
 + ((iË>> 5))

	)

50 
	#_CMU_BIT
(
i
Ë(1 << ((iË& 0x1f))

	)

63 
	$cmu_≥rùh_˛ock_íabÀ
(
cmu_≥rùh_˛kí
 
˛kí
)

65 
	`_CMU_REG
(
˛kí
Ë|
	`_CMU_BIT
(clken);

66 
	}
}

78 
	$cmu_≥rùh_˛ock_dißbÀ
(
cmu_≥rùh_˛kí
 
˛kí
)

80 
	`_CMU_REG
(
˛kí
Ë&~
	`_CMU_BIT
(clken);

81 
	}
}

87 
	$cmu_osc_⁄
(
cmu_osc
 
osc
)

89 
osc
) {

90 
HFRCO
:

91 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_HFRCOEN
;

93 
LFRCO
:

94 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_LFRCOEN
;

96 
USHFRCO
:

97 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_USHFRCOEN
;

99 
HFXO
:

100 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_HFXOEN
;

102 
LFXO
:

103 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_LFXOEN
;

105 
AUXHFRCO
:

106 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_AUXHFRCOEN
;

109 
	}
}

115 
	$cmu_osc_off
(
cmu_osc
 
osc
)

117 
osc
) {

118 
HFRCO
:

119 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_HFRCODIS
;

121 
LFRCO
:

122 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_LFRCODIS
;

124 
USHFRCO
:

125 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_USHFRCODIS
;

127 
HFXO
:

128 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_HFXODIS
;

130 
LFXO
:

131 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_LFXODIS
;

133 
AUXHFRCO
:

134 
CMU_OSCENCMD
 = 
CMU_OSCENCMD_AUXHFRCODIS
;

137 
	}
}

145 
boﬁ
 
	$cmu_osc_ªady_Êag
(
cmu_osc
 
osc
)

147 
osc
) {

148 
HFRCO
:

149  (
CMU_STATUS
 & 
CMU_STATUS_HFRCORDY
) != 0;

151 
LFRCO
:

152  (
CMU_STATUS
 & 
CMU_STATUS_LFRCORDY
) != 0;

154 
USHFRCO
:

155  (
CMU_STATUS
 & 
CMU_STATUS_USHFRCORDY
) != 0;

157 
HFXO
:

158  (
CMU_STATUS
 & 
CMU_STATUS_HFXORDY
) != 0;

160 
LFXO
:

161  (
CMU_STATUS
 & 
CMU_STATUS_LFXORDY
) != 0;

163 
AUXHFRCO
:

164  (
CMU_STATUS
 & 
CMU_STATUS_AUXHFRCORDY
) != 0;

168  
Ál£
;

169 
	}
}

175 
	$cmu_waô_f‹_osc_ªady
(
cmu_osc
 
osc
)

177 
osc
) {

178 
HFRCO
:

179 (
CMU_STATUS
 & 
CMU_STATUS_HFRCORDY
) == 0);

181 
LFRCO
:

182 (
CMU_STATUS
 & 
CMU_STATUS_LFRCORDY
) == 0);

184 
USHFRCO
:

185 (
CMU_STATUS
 & 
CMU_STATUS_USHFRCORDY
) == 0);

187 
HFXO
:

188 (
CMU_STATUS
 & 
CMU_STATUS_HFXORDY
) == 0);

190 
LFXO
:

191 (
CMU_STATUS
 & 
CMU_STATUS_LFXORDY
) == 0);

193 
AUXHFRCO
:

194 (
CMU_STATUS
 & 
CMU_STATUS_AUXHFRCORDY
) == 0);

197 
	}
}

206 
	$cmu_£t_hf˛k_sour˚
(
cmu_osc
 
osc
)

208 
osc
) {

209 
HFXO
:

210 
CMU_CMD
 = 
CMU_CMD_HFCLKSEL_HFXO
;

212 
HFRCO
:

213 
CMU_CMD
 = 
CMU_CMD_HFCLKSEL_HFRCO
;

215 
LFXO
:

216 
CMU_CMD
 = 
CMU_CMD_HFCLKSEL_LFXO
;

218 
LFRCO
:

219 
CMU_CMD
 = 
CMU_CMD_HFCLKSEL_LFRCO
;

225 
	}
}

231 
cmu_osc
 
	$cmu_gë_hf˛k_sour˚
()

233 
uöt32_t
 
°©us
 = 
CMU_STATUS
;

234 i‡(
°©us
 & 
CMU_STATUS_LFXOSEL
) {

235  
LFXO
;

236 } i‡(
°©us
 & 
CMU_STATUS_LFRCOSEL
) {

237  
LFRCO
;

238 } i‡(
°©us
 & 
CMU_STATUS_HFXOSEL
) {

239  
HFXO
;

240 } i‡(
°©us
 & 
CMU_STATUS_HFRCOSEL
) {

241  
HFRCO
;

245  (
cmu_osc
) -1;

246 
	}
}

252 
	$cmu_£t_usb˛k_sour˚
(
cmu_osc
 
osc
)

254 
osc
) {

255 
LFXO
:

256 
CMU_CMD
 = 
CMU_CMD_USBCCLKSEL_LFXO
;

258 
LFRCO
:

259 
CMU_CMD
 = 
CMU_CMD_USBCCLKSEL_LFRCO
;

261 
USHFRCO
:

262 
CMU_CMD
 = 
CMU_CMD_USBCCLKSEL_USHFRCO
;

268 
	}
}

274 
	$cmu_waô_f‹_usb˛k_£À˘ed
(
cmu_osc
 
osc
)

276 
osc
) {

277 
LFXO
:

278 (
CMU_STATUS
 & 
CMU_STATUS_USBCLFXOSEL
) == 0);

280 
LFRCO
:

281 (
CMU_STATUS
 & 
CMU_STATUS_USBCLFRCOSEL
) == 0);

283 
USHFRCO
:

284 (
CMU_STATUS
 & 
CMU_STATUS_USBCUSHFRCOSEL
) == 0);

290 
	}
}

	@libopencm3/lib/efm32/hg/vector_nvic.c

15 #¥agm®
wók
 
dma_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
gpio_eví_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
timî0_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
acmp0_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
adc0_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
gpio_odd_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
timî1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
ußπ1_rx_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
ußπ1_tx_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
Àu¨t0_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
p˙t0_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
cmu_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
vcmp_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
msc_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
´s_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
ußπ0_rx_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
ußπ0_tx_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
usb_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
timî2_i§
 = 
blockög_h™dÀr


44 
	#IRQ_HANDLERS
 \

45 [
NVIC_DMA_IRQ
] = 
dma_i§
, \

46 [
NVIC_GPIO_EVEN_IRQ
] = 
gpio_eví_i§
, \

47 [
NVIC_TIMER0_IRQ
] = 
timî0_i§
, \

48 [
NVIC_ACMP0_IRQ
] = 
acmp0_i§
, \

49 [
NVIC_ADC0_IRQ
] = 
adc0_i§
, \

50 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

51 [
NVIC_GPIO_ODD_IRQ
] = 
gpio_odd_i§
, \

52 [
NVIC_TIMER1_IRQ
] = 
timî1_i§
, \

53 [
NVIC_USART1_RX_IRQ
] = 
ußπ1_rx_i§
, \

54 [
NVIC_USART1_TX_IRQ
] = 
ußπ1_tx_i§
, \

55 [
NVIC_LEUART0_IRQ
] = 
Àu¨t0_i§
, \

56 [
NVIC_PCNT0_IRQ
] = 
p˙t0_i§
, \

57 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

58 [
NVIC_CMU_IRQ
] = 
cmu_i§
, \

59 [
NVIC_VCMP_IRQ
] = 
vcmp_i§
, \

60 [
NVIC_MSC_IRQ
] = 
msc_i§
, \

61 [
NVIC_AES_IRQ
] = 
´s_i§
, \

62 [
NVIC_USART0_RX_IRQ
] = 
ußπ0_rx_i§
, \

63 [
NVIC_USART0_TX_IRQ
] = 
ußπ0_tx_i§
, \

64 [
NVIC_USB_IRQ
] = 
usb_i§
, \

65 [
NVIC_TIMER2_IRQ
] = 
timî2_i§


	)

	@libopencm3/lib/efm32/lg/vector_nvic.c

15 #¥agm®
wók
 
dma_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
gpio_eví_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
timî0_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
ußπ0_rx_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
ußπ0_tx_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
usb_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
acmp01_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
adc0_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
dac0_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
i2c1_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
gpio_odd_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
timî1_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
timî2_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
timî3_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
ußπ1_rx_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
ußπ1_tx_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
À£n£_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
ußπ2_rx_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ußπ2_tx_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
u¨t0_rx_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
u¨t0_tx_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
u¨t1_rx_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
u¨t1_tx_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
Àu¨t0_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
Àu¨t1_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
Àtimî0_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
p˙t0_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
p˙t1_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
p˙t2_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
buπc_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
cmu_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
vcmp_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
lcd_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
msc_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
´s_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ebi_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
emu_i§
 = 
blockög_h™dÀr


62 
	#IRQ_HANDLERS
 \

63 [
NVIC_DMA_IRQ
] = 
dma_i§
, \

64 [
NVIC_GPIO_EVEN_IRQ
] = 
gpio_eví_i§
, \

65 [
NVIC_TIMER0_IRQ
] = 
timî0_i§
, \

66 [
NVIC_USART0_RX_IRQ
] = 
ußπ0_rx_i§
, \

67 [
NVIC_USART0_TX_IRQ
] = 
ußπ0_tx_i§
, \

68 [
NVIC_USB_IRQ
] = 
usb_i§
, \

69 [
NVIC_ACMP01_IRQ
] = 
acmp01_i§
, \

70 [
NVIC_ADC0_IRQ
] = 
adc0_i§
, \

71 [
NVIC_DAC0_IRQ
] = 
dac0_i§
, \

72 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

73 [
NVIC_I2C1_IRQ
] = 
i2c1_i§
, \

74 [
NVIC_GPIO_ODD_IRQ
] = 
gpio_odd_i§
, \

75 [
NVIC_TIMER1_IRQ
] = 
timî1_i§
, \

76 [
NVIC_TIMER2_IRQ
] = 
timî2_i§
, \

77 [
NVIC_TIMER3_IRQ
] = 
timî3_i§
, \

78 [
NVIC_USART1_RX_IRQ
] = 
ußπ1_rx_i§
, \

79 [
NVIC_USART1_TX_IRQ
] = 
ußπ1_tx_i§
, \

80 [
NVIC_LESENSE_IRQ
] = 
À£n£_i§
, \

81 [
NVIC_USART2_RX_IRQ
] = 
ußπ2_rx_i§
, \

82 [
NVIC_USART2_TX_IRQ
] = 
ußπ2_tx_i§
, \

83 [
NVIC_UART0_RX_IRQ
] = 
u¨t0_rx_i§
, \

84 [
NVIC_UART0_TX_IRQ
] = 
u¨t0_tx_i§
, \

85 [
NVIC_UART1_RX_IRQ
] = 
u¨t1_rx_i§
, \

86 [
NVIC_UART1_TX_IRQ
] = 
u¨t1_tx_i§
, \

87 [
NVIC_LEUART0_IRQ
] = 
Àu¨t0_i§
, \

88 [
NVIC_LEUART1_IRQ
] = 
Àu¨t1_i§
, \

89 [
NVIC_LETIMER0_IRQ
] = 
Àtimî0_i§
, \

90 [
NVIC_PCNT0_IRQ
] = 
p˙t0_i§
, \

91 [
NVIC_PCNT1_IRQ
] = 
p˙t1_i§
, \

92 [
NVIC_PCNT2_IRQ
] = 
p˙t2_i§
, \

93 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

94 [
NVIC_BURTC_IRQ
] = 
buπc_i§
, \

95 [
NVIC_CMU_IRQ
] = 
cmu_i§
, \

96 [
NVIC_VCMP_IRQ
] = 
vcmp_i§
, \

97 [
NVIC_LCD_IRQ
] = 
lcd_i§
, \

98 [
NVIC_MSC_IRQ
] = 
msc_i§
, \

99 [
NVIC_AES_IRQ
] = 
´s_i§
, \

100 [
NVIC_EBI_IRQ
] = 
ebi_i§
, \

101 [
NVIC_EMU_IRQ
] = 
emu_i§


	)

	@libopencm3/lib/efm32/tg/vector_nvic.c

15 #¥agm®
wók
 
dma_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
gpio_eví_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
timî0_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
ußπ0_rx_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
ußπ0_tx_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
acmp01_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
adc0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
dac0_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
gpio_odd_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
timî1_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
ußπ1_rx_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
ußπ1_tx_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
À£n£_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
Àu¨t0_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
Àtimî0_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
p˙t0_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
cmu_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
vcmp_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
lcd_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
msc_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
´s_i§
 = 
blockög_h™dÀr


46 
	#IRQ_HANDLERS
 \

47 [
NVIC_DMA_IRQ
] = 
dma_i§
, \

48 [
NVIC_GPIO_EVEN_IRQ
] = 
gpio_eví_i§
, \

49 [
NVIC_TIMER0_IRQ
] = 
timî0_i§
, \

50 [
NVIC_USART0_RX_IRQ
] = 
ußπ0_rx_i§
, \

51 [
NVIC_USART0_TX_IRQ
] = 
ußπ0_tx_i§
, \

52 [
NVIC_ACMP01_IRQ
] = 
acmp01_i§
, \

53 [
NVIC_ADC0_IRQ
] = 
adc0_i§
, \

54 [
NVIC_DAC0_IRQ
] = 
dac0_i§
, \

55 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

56 [
NVIC_GPIO_ODD_IRQ
] = 
gpio_odd_i§
, \

57 [
NVIC_TIMER1_IRQ
] = 
timî1_i§
, \

58 [
NVIC_USART1_RX_IRQ
] = 
ußπ1_rx_i§
, \

59 [
NVIC_USART1_TX_IRQ
] = 
ußπ1_tx_i§
, \

60 [
NVIC_LESENSE_IRQ
] = 
À£n£_i§
, \

61 [
NVIC_LEUART0_IRQ
] = 
Àu¨t0_i§
, \

62 [
NVIC_LETIMER0_IRQ
] = 
Àtimî0_i§
, \

63 [
NVIC_PCNT0_IRQ
] = 
p˙t0_i§
, \

64 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

65 [
NVIC_CMU_IRQ
] = 
cmu_i§
, \

66 [
NVIC_VCMP_IRQ
] = 
vcmp_i§
, \

67 [
NVIC_LCD_IRQ
] = 
lcd_i§
, \

68 [
NVIC_MSC_IRQ
] = 
msc_i§
, \

69 [
NVIC_AES_IRQ
] = 
´s_i§


	)

	@libopencm3/lib/efm32/wg/vector_chipset.c

21 
	~<lib›ícm3/cm3/scb.h
>

23 
	$¥e_maö
()

26 
SCB_CPACR
 |
SCB_CPACR_FULL
 * (
SCB_CPACR_CP10
 | 
SCB_CPACR_CP11
);

27 
	}
}

	@libopencm3/lib/efm32/wg/vector_nvic.c

15 #¥agm®
wók
 
dma_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
gpio_eví_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
timî0_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
ußπ0_rx_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
ußπ0_tx_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
usb_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
acmp01_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
adc0_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
dac0_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
i2c1_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
gpio_odd_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
timî1_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
timî2_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
timî3_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
ußπ1_rx_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
ußπ1_tx_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
À£n£_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
ußπ2_rx_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ußπ2_tx_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
u¨t0_rx_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
u¨t0_tx_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
u¨t1_rx_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
u¨t1_tx_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
Àu¨t0_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
Àu¨t1_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
Àtimî0_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
p˙t0_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
p˙t1_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
p˙t2_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
buπc_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
cmu_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
vcmp_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
lcd_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
msc_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
´s_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ebi_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
emu_i§
 = 
blockög_h™dÀr


62 
	#IRQ_HANDLERS
 \

63 [
NVIC_DMA_IRQ
] = 
dma_i§
, \

64 [
NVIC_GPIO_EVEN_IRQ
] = 
gpio_eví_i§
, \

65 [
NVIC_TIMER0_IRQ
] = 
timî0_i§
, \

66 [
NVIC_USART0_RX_IRQ
] = 
ußπ0_rx_i§
, \

67 [
NVIC_USART0_TX_IRQ
] = 
ußπ0_tx_i§
, \

68 [
NVIC_USB_IRQ
] = 
usb_i§
, \

69 [
NVIC_ACMP01_IRQ
] = 
acmp01_i§
, \

70 [
NVIC_ADC0_IRQ
] = 
adc0_i§
, \

71 [
NVIC_DAC0_IRQ
] = 
dac0_i§
, \

72 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

73 [
NVIC_I2C1_IRQ
] = 
i2c1_i§
, \

74 [
NVIC_GPIO_ODD_IRQ
] = 
gpio_odd_i§
, \

75 [
NVIC_TIMER1_IRQ
] = 
timî1_i§
, \

76 [
NVIC_TIMER2_IRQ
] = 
timî2_i§
, \

77 [
NVIC_TIMER3_IRQ
] = 
timî3_i§
, \

78 [
NVIC_USART1_RX_IRQ
] = 
ußπ1_rx_i§
, \

79 [
NVIC_USART1_TX_IRQ
] = 
ußπ1_tx_i§
, \

80 [
NVIC_LESENSE_IRQ
] = 
À£n£_i§
, \

81 [
NVIC_USART2_RX_IRQ
] = 
ußπ2_rx_i§
, \

82 [
NVIC_USART2_TX_IRQ
] = 
ußπ2_tx_i§
, \

83 [
NVIC_UART0_RX_IRQ
] = 
u¨t0_rx_i§
, \

84 [
NVIC_UART0_TX_IRQ
] = 
u¨t0_tx_i§
, \

85 [
NVIC_UART1_RX_IRQ
] = 
u¨t1_rx_i§
, \

86 [
NVIC_UART1_TX_IRQ
] = 
u¨t1_tx_i§
, \

87 [
NVIC_LEUART0_IRQ
] = 
Àu¨t0_i§
, \

88 [
NVIC_LEUART1_IRQ
] = 
Àu¨t1_i§
, \

89 [
NVIC_LETIMER0_IRQ
] = 
Àtimî0_i§
, \

90 [
NVIC_PCNT0_IRQ
] = 
p˙t0_i§
, \

91 [
NVIC_PCNT1_IRQ
] = 
p˙t1_i§
, \

92 [
NVIC_PCNT2_IRQ
] = 
p˙t2_i§
, \

93 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

94 [
NVIC_BURTC_IRQ
] = 
buπc_i§
, \

95 [
NVIC_CMU_IRQ
] = 
cmu_i§
, \

96 [
NVIC_VCMP_IRQ
] = 
vcmp_i§
, \

97 [
NVIC_LCD_IRQ
] = 
lcd_i§
, \

98 [
NVIC_MSC_IRQ
] = 
msc_i§
, \

99 [
NVIC_AES_IRQ
] = 
´s_i§
, \

100 [
NVIC_EBI_IRQ
] = 
ebi_i§
, \

101 [
NVIC_EMU_IRQ
] = 
emu_i§


	)

	@libopencm3/lib/ethernet/mac.c

35 
	~<lib›ícm3/ëhî√t/mac.h
>

36 
	~<lib›ícm3/ëhî√t/phy.h
>

	@libopencm3/lib/ethernet/mac_stm32fxx7.c

34 
	~<°rög.h
>

35 
	~<lib›ícm3/ëhî√t/mac.h
>

36 
	~<lib›ícm3/ëhî√t/phy.h
>

37 
	~<lib›ícm3/°m32/gpio.h
>

38 
	~<lib›ícm3/cm3/nvic.h
>

42 
uöt32_t
 
	gTxBD
;

43 
uöt32_t
 
	gRxBD
;

50 
	$ëh_£t_mac
(c⁄° 
uöt8_t
 *
mac
)

52 
	`ETH_MACAHR
(0Ë((
uöt32_t
)
mac
[5] << 8) | (uint32_t)mac[4] |

53 
ETH_MACA0HR_MACA0H
;

54 
	`ETH_MACALR
(0Ë((
uöt32_t
)
mac
[3] << 24) | ((uint32_t)mac[2] << 16) |

55 ((
uöt32_t
)
mac
[1] << 8) | mac[0];

56 
	}
}

73 
	$ëh_desc_öô
(
uöt8_t
 *
buf
, 
uöt32_t
 
nTx
, uöt32_à
nRx
, uöt32_à
cTx
,

74 
uöt32_t
 
cRx
, 
boﬁ
 
i£xt
)

76 
uöt32_t
 
bd
 = (uöt32_t)
buf
;

77 
uöt32_t
 
sz
 = 
i£xt
 ? 
ETH_DES_EXT_SIZE
 : 
ETH_DES_STD_SIZE
;

79 
	`mem£t
(
buf
, 0, 
nTx
 * (
cTx
 + 
sz
Ë+ 
nRx
 * (
cRx
 + sz));

82 i‡(
i£xt
) {

83 
ETH_DMABMR
 |
ETH_DMABMR_EDFE
;

85 
ETH_DMABMR
 &~
ETH_DMABMR_EDFE
;

88 
TxBD
 = 
bd
;

89 --
nTx
 > 0) {

90 
	`ETH_DES0
(
bd
Ë
ETH_TDES0_TCH
;

91 
	`ETH_DES2
(
bd
Ëbd + 
sz
;

92 
	`ETH_DES3
(
bd
Ëbd + 
sz
 + 
cTx
;

93 
bd
 = 
	`ETH_DES3
(bd);

96 
	`ETH_DES0
(
bd
Ë
ETH_TDES0_TCH
;

97 
	`ETH_DES2
(
bd
Ëbd + 
sz
;

98 
	`ETH_DES3
(
bd
Ë
TxBD
;

99 
bd
 +
sz
 + 
cTx
;

101 
RxBD
 = 
bd
;

102 --
nRx
 > 0) {

103 
	`ETH_DES0
(
bd
Ë
ETH_RDES0_OWN
;

104 
	`ETH_DES1
(
bd
Ë
ETH_RDES1_RCH
 | 
cRx
;

105 
	`ETH_DES2
(
bd
Ëbd + 
sz
;

106 
	`ETH_DES3
(
bd
Ëbd + 
sz
 + 
cRx
;

107 
bd
 = 
	`ETH_DES3
(bd);

110 
	`ETH_DES0
(
bd
Ë
ETH_RDES0_OWN
;

111 
	`ETH_DES1
(
bd
Ë
ETH_RDES1_RCH
 | 
cRx
;

112 
	`ETH_DES2
(
bd
Ëbd + 
sz
;

113 
	`ETH_DES3
(
bd
Ë
RxBD
;

115 
ETH_DMARDLAR
 = (
uöt32_t
Ë
RxBD
;

116 
ETH_DMATDLAR
 = (
uöt32_t
Ë
TxBD
;

117 
	}
}

126 
boﬁ
 
	$ëh_tx
(
uöt8_t
 *
µkt
, 
uöt32_t
 
n
)

128 i‡(
	`ETH_DES0
(
TxBD
Ë& 
ETH_TDES0_OWN
) {

129  
Ál£
;

132 
	`mem˝y
((*)
	`ETH_DES2
(
TxBD
), 
µkt
, 
n
);

134 
	`ETH_DES1
(
TxBD
Ë
n
 & 
ETH_TDES1_TBS1
;

135 
	`ETH_DES0
(
TxBD
Ë|
ETH_TDES0_LS
 | 
ETH_TDES0_FS
 | 
ETH_TDES0_OWN
;

136 
TxBD
 = 
	`ETH_DES3
(TxBD);

138 i‡(
ETH_DMASR
 & 
ETH_DMASR_TBUS
) {

139 
ETH_DMASR
 = 
ETH_DMASR_TBUS
;

140 
ETH_DMATPDR
 = 0;

143  
åue
;

144 
	}
}

154 
boﬁ
 
	$ëh_rx
(
uöt8_t
 *
µkt
, 
uöt32_t
 *
Àn
, uöt32_à
maxÀn
)

156 
boﬁ
 
fs
 = 
Ál£
;

157 
boﬁ
 
ls
 = 
Ál£
;

158 
boﬁ
 
ovîrun
 = 
Ál£
;

159 
uöt32_t
 
l
 = 0;

161 !(
	`ETH_DES0
(
RxBD
Ë& 
ETH_RDES0_OWN
Ë&& !
ls
) {

162 
l
 = (
	`ETH_DES0
(
RxBD
Ë& 
ETH_RDES0_FL
Ë>> 
ETH_RDES0_FL_SHIFT
;

164 
fs
 |
	`ETH_DES0
(
RxBD
Ë& 
ETH_RDES0_FS
;

165 
ls
 |
	`ETH_DES0
(
RxBD
Ë& 
ETH_RDES0_LS
;

167 
ovîrun
 |
fs
 && (
maxÀn
 < 
l
);

169 i‡(
fs
 && !
ovîrun
) {

170 
	`mem˝y
(
µkt
, (*)
	`ETH_DES2
(
RxBD
), 
l
);

171 
µkt
 +
l
;

172 *
Àn
 +
l
;

173 
maxÀn
 -
l
;

176 
	`ETH_DES0
(
RxBD
Ë
ETH_RDES0_OWN
;

177 
RxBD
 = 
	`ETH_DES3
(RxBD);

180 i‡(
ETH_DMASR
 & 
ETH_DMASR_RBUS
) {

181 
ETH_DMASR
 = 
ETH_DMASR_RBUS
;

182 
ETH_DMARPDR
 = 0;

185  
fs
 && 
ls
 && !
ovîrun
;

186 
	}
}

191 
	$ëh_°¨t
()

193 
ETH_MACCR
 |
ETH_MACCR_TE
;

194 
ETH_DMAOMR
 |
ETH_DMAOMR_FTF
;

195 
ETH_MACCR
 |
ETH_MACCR_RE
;

197 
ETH_DMAOMR
 |
ETH_DMAOMR_ST
;

198 
ETH_DMAOMR
 |
ETH_DMAOMR_SR
;

199 
	}
}

209 
	$ëh_öô
(
uöt8_t
 
phy
, 
ëh_˛k
 
˛ock
)

211 
ETH_MACMIIAR
 = 
˛ock
;

212 
	`phy_ª£t
(
phy
);

214 
ETH_MACCR
 = 
ETH_MACCR_CSTF
 | 
ETH_MACCR_FES
 | 
ETH_MACCR_DM
 |

215 
ETH_MACCR_APCS
 | 
ETH_MACCR_RD
;

216 
ETH_MACFFR
 = 
ETH_MACFFR_RA
 | 
ETH_MACFFR_PM
;

217 
ETH_MACHTHR
 = 0;

218 
ETH_MACHTLR
 = 0;

219 
ETH_MACFCR
 = (0x100 << 
ETH_MACFCR_PT_SHIFT
);

220 
ETH_MACVLANTR
 = 0;

221 
ETH_DMAOMR
 = 
ETH_DMAOMR_DTCEFD
 | 
ETH_DMAOMR_RSF
 | 
ETH_DMAOMR_DFRF
 |

222 
ETH_DMAOMR_TSF
 | 
ETH_DMAOMR_FEF
 | 
ETH_DMAOMR_OSF
;

223 
ETH_DMABMR
 = 
ETH_DMABMR_AAB
 | 
ETH_DMABMR_FB
 |

224 (32 << 
ETH_DMABMR_RDP_SHIFT
Ë| (32 << 
ETH_DMABMR_PBL_SHIFT
) |

225 
ETH_DMABMR_PM_2_1
 | 
ETH_DMABMR_USP
;

226 
	}
}

233 
	$ëh_úq_íabÀ
(
uöt32_t
 
ªas⁄
)

235 
ETH_DMAIER
 |
ªas⁄
;

236 
	}
}

243 
	$ëh_úq_dißbÀ
(
uöt32_t
 
ªas⁄
)

245 
ETH_DMAIER
 &~
ªas⁄
;

246 
	}
}

254 
boﬁ
 
	$ëh_úq_is_≥ndög
(
uöt32_t
 
ªas⁄
)

256  (
ETH_DMASR
 & 
ªas⁄
) != 0;

257 
	}
}

265 
boﬁ
 
	$ëh_úq_ack_≥ndög
(
uöt32_t
 
ªas⁄
)

267 
ªas⁄
 &
ETH_DMASR
;

268 
ETH_DMASR
 = 
ªas⁄
;

269  
ªas⁄
 != 0;

270 
	}
}

279 
	$ëh_íabÀ_checksum_ofÊﬂd
()

281 
uöt32_t
 
èb
 = 
TxBD
;

283 
	`ETH_DES0
(
èb
Ë|
ETH_TDES0_CIC_IPPLPH
;

284 
èb
 = 
	`ETH_DES3
(tab);

286 
èb
 !
TxBD
);

288 
ETH_MACCR
 |
ETH_MACCR_IPCO
;

289 
	}
}

294 
	$ëh_smi_å™ß˘
()

297 
ETH_MACMIIAR
 |
ETH_MACMIIAR_MB
;

300 
ETH_MACMIIAR
 & 
ETH_MACMIIAR_MB
);

301 
	}
}

310 
	$ëh_smi_wrôe
(
uöt8_t
 
phy
, uöt8_à
ªg
, 
uöt16_t
 
d©a
)

313 
ETH_MACMIIAR
 = (ETH_MACMIIAR & 
ETH_MACMIIAR_CR
) |

314 (
phy
 << 
ETH_MACMIIAR_PA_SHIFT
) |

315 (
ªg
 << 
ETH_MACMIIAR_MR_SHIFT
) |

316 
ETH_MACMIIAR_MW
;

318 
ETH_MACMIIDR
 = 
d©a
 & 
ETH_MACMIIDR_MD
;

320 
	`ëh_smi_å™ß˘
();

321 
	}
}

330 
uöt16_t
 
	$ëh_smi_ªad
(
uöt8_t
 
phy
, uöt8_à
ªg
)

333 
ETH_MACMIIAR
 = (ETH_MACMIIAR & 
ETH_MACMIIAR_CR
) |

334 (
phy
 << 
ETH_MACMIIAR_PA_SHIFT
) |

335 (
ªg
 << 
ETH_MACMIIAR_MR_SHIFT
);

337 
	`ëh_smi_å™ß˘
();

339  (
uöt16_t
)(
ETH_MACMIIDR
 & 
ETH_MACMIIDR_MD
);

340 
	}
}

350 
	$ëh_smi_bô_›
(
uöt8_t
 
phy
, uöt8_à
ªg
, 
uöt16_t
 
bôs
, uöt16_à
mask
)

352 
uöt16_t
 
vÆ
 = 
	`ëh_smi_ªad
(
phy
, 
ªg
);

353 
	`ëh_smi_wrôe
(
phy
, 
ªg
, (
vÆ
 & 
mask
Ë| 
bôs
);

354 
	}
}

363 
	$ëh_smi_bô_˛ór
(
uöt8_t
 
phy
, uöt8_à
ªg
, 
uöt16_t
 
˛órbôs
)

365 
uöt16_t
 
vÆ
 = 
	`ëh_smi_ªad
(
phy
, 
ªg
);

366 
	`ëh_smi_wrôe
(
phy
, 
ªg
, 
vÆ
 & (
uöt16_t
)~(
˛órbôs
));

367 
	}
}

376 
	$ëh_smi_bô_£t
(
uöt8_t
 
phy
, uöt8_à
ªg
, 
uöt16_t
 
£tbôs
)

378 
uöt16_t
 
vÆ
 = 
	`ëh_smi_ªad
(
phy
, 
ªg
);

379 
	`ëh_smi_wrôe
(
phy
, 
ªg
, 
vÆ
 | 
£tbôs
);

380 
	}
}

	@libopencm3/lib/ethernet/phy.c

35 
	~<lib›ícm3/ëhî√t/mac.h
>

36 
	~<lib›ícm3/ëhî√t/phy.h
>

46 
boﬁ
 
	$phy_lök_isup
(
uöt8_t
 
phy
)

48  
	`ëh_smi_ªad
(
phy
, 
PHY_REG_BSR
Ë& 
PHY_REG_BSR_UP
;

49 
	}
}

57 
	$phy_ª£t
(
uöt8_t
 
phy
)

59 
	`ëh_smi_wrôe
(
phy
, 
PHY_REG_BCR
, 
PHY_REG_BCR_RESET
);

60 
	`ëh_smi_ªad
(
phy
, 
PHY_REG_BCR
Ë& 
PHY_REG_BCR_RESET
);

61 
	}
}

	@libopencm3/lib/ethernet/phy_ksz80x1.c

34 
	~<lib›ícm3/ëhî√t/mac.h
>

35 
	~<lib›ícm3/ëhî√t/phy.h
>

36 
	~<lib›ícm3/ëhî√t/phy_ksz80x1.h
>

49 
phy_°©us
 
	$phy_lök_°©us
(
uöt8_t
 
phy
)

51  
	`ëh_smi_ªad
(
phy
, 
KSZ80X1_CR1
) & 0x07;

52 
	}
}

62 
	$phy_aut⁄eg_f‹˚
(
uöt8_t
 
phy
, 
phy_°©us
 
mode
)

64 
uöt16_t
 
b°
 = 0;

66 i‡((
mode
 =
LINK_FD_10M
Ë|| (modê=
LINK_FD_100M
) ||

67 (
mode
 =
LINK_FD_1000M
Ë|| (modê=
LINK_FD_10000M
)) {

68 
b°
 |
PHY_REG_BCR_FD
;

71 i‡((
mode
 =
LINK_FD_100M
Ë|| (modê=
LINK_HD_100M
)) {

72 
b°
 |
PHY_REG_BCR_100M
;

75 
	`ëh_smi_bô_›
(
phy
, 
PHY_REG_BCR
, 
b°
,

76 ~(
PHY_REG_BCR_AN
 | 
PHY_REG_BCR_100M
 | 
PHY_REG_BCR_FD
));

77 
	}
}

86 
	$phy_aut⁄eg_íabÀ
(
uöt8_t
 
phy
)

88 
	`ëh_smi_bô_£t
(
phy
, 
PHY_REG_BCR
, 
PHY_REG_BCR_AN
 | 
PHY_REG_BCR_ANRST
);

89 
	}
}

	@libopencm3/lib/lm3s/gpio.c

38 
	~<lib›ícm3/lm3s/gpio.h
>

40 
	$gpio_£t
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
)

43 
	`GPIO_DATA
(
gpi›‹t
)[
gpios
] = 0xff;

44 
	}
}

46 
	$gpio_˛ór
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
)

48 
	`GPIO_DATA
(
gpi›‹t
)[
gpios
] = 0;

49 
	}
}

	@libopencm3/lib/lm3s/rcc.c

35 
	~<°döt.h
>

36 
	~<lib›ícm3/lm3s/rcc.h
>

37 
	~<lib›ícm3/cm3/sync.h
>

39 
	$rcc_˛ock_£tup_ö_xèl_8mhz_out_50mhz
()

41 
uöt32_t
 
rcc
 = 
RCC_RESET_VALUE
;

42 
uöt32_t
 
rcc2
 = 
RCC2_RESET_VALUE
;

45 
RCC_CR
 = 
rcc
;

46 
RCC2_CR
 = 
rcc2
;

47 
	`__dmb
();

50 
RCC_CR
 = 
RCC_SYSDIV_50MHZ
 | 
RCC_PWMDIV_64
 | 
RCC_XTAL_8MHZ_400MHZ
 | 
RCC_USEPWMDIV
;

51 
RCC2_CR
 = (4 - 1Ë<< 
RCC2_SYSDIV2_SHIFT
;

52 
	`__dmb
();

55 
rcc
 &~
RCC_OFF
;

56 
rcc2
 &~
RCC2_OFF
;

57 
RCC_CR
 = 
rcc
;

58 
RCC2_CR
 = 
rcc2
;

59 
	`__dmb
();

62 
rcc
 |
RCC_BYPASS
 | 
RCC_USESYSDIV
;

63 
RCC_CR
 = 
rcc
;

64 
	`__dmb
();

67 (
RCC_RIS
 & 
RIS_PLLLRIS
) == 0)

71 
rcc
 &~
RCC_BYPASS
;

72 
rcc2
 &~
RCC2_BYPASS
;

73 
RCC_CR
 = 
rcc
;

74 
RCC2_CR
 = 
rcc2
;

75 
	`__dmb
();

77 
	}
}

	@libopencm3/lib/lm3s/usart.c

21 
	~<lib›ícm3/lm3s/ußπ.h
>

23 
	$ußπ_£nd
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
)

25 
	`USART_DR
(
ußπ
Ë
d©a
;

26 
	}
}

28 
uöt16_t
 
	$ußπ_ªcv
(
uöt32_t
 
ußπ
)

30  
	`USART_DR
(
ußπ
) & 0xff;

31 
	}
}

33 
	$ußπ_£nd_blockög
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
)

35 !
	`ußπ_is_£nd_ªady
(
ußπ
));

36 
	`ußπ_£nd
(
ußπ
, 
d©a
);

37 
	}
}

39 
boﬁ
 
	$ußπ_is_ªcv_ªady
(
uöt32_t
 
ußπ
)

41  ((
	`USART_FR
(
ußπ
Ë& 
USART_FR_RXFE
) == 0);

42 
	}
}

44 
boﬁ
 
	$ußπ_is_£nd_ªady
(
uöt32_t
 
ußπ
)

46  ((
	`USART_FR
(
ußπ
Ë& 
USART_FR_BUSY
) == 0);

47 
	}
}

49 
uöt16_t
 
	$ußπ_ªcv_blockög
(
uöt32_t
 
ußπ
)

51 !
	`ußπ_is_ªcv_ªady
(
ußπ
));

52  
	`ußπ_ªcv
(
ußπ
);

53 
	}
}

55 
	$ußπ_íabÀ_rx_öãºu±
(
uöt32_t
 
ußπ
)

57 
	`USART_IM
(
ußπ
Ë|
USART_IM_RX
;

58 
	}
}

60 
	$ußπ_íabÀ_tx_öãºu±
(
uöt32_t
 
ußπ
)

62 
	`USART_IM
(
ußπ
Ë|
USART_IM_TX
;

63 
	}
}

65 
	$ußπ_dißbÀ_rx_öãºu±
(
uöt32_t
 
ußπ
)

67 
	`USART_IM
(
ußπ
Ë&(~
USART_IM_RX
);

68 
	}
}

70 
	$ußπ_dißbÀ_tx_öãºu±
(
uöt32_t
 
ußπ
)

72 
	`USART_IM
(
ußπ
Ë&(~
USART_IM_TX
);

73 
	}
}

75 
	$ußπ_˛ór_rx_öãºu±
(
uöt32_t
 
ußπ
)

77 
	`USART_IC
(
ußπ
Ë|
USART_IC_RX
;

78 
	}
}

80 
	$ußπ_˛ór_tx_öãºu±
(
uöt32_t
 
ußπ
)

82 
	`USART_IC
(
ußπ
Ë|
USART_IC_TX
;

83 
	}
}

85 
boﬁ
 
	$ußπ_gë_öãºu±_sour˚
(
uöt32_t
 
ußπ
, uöt32_à
Êag
)

87  ((
	`USART_RIS
(
ußπ
Ë& 
Êag
) != 0);

88 
	}
}

	@libopencm3/lib/lm3s/vector_nvic.c

15 #¥agm®
wók
 
gpioq7_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
gpioq6_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
pwm1_3_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
pwm1_2_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
pwm1_1_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
pwm1_0_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
pwm1_Áu…_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
timî2b_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
comp0_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
comp1_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
comp2_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
timî0b_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
timî1a_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
timî1b_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
timî2a_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
sys˘l_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
Êash_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
gpiﬂ_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
gpi€_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
gpi›4_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
gpi›5_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
gpi›6_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
gpi›7_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
gpioq0_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
gpioq1_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
gpioq2_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
gpioq3_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
gpioq4_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
gpioq5_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
u¨t3_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
ssi3_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
gpiok_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
gpioj_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
ssi2_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
gpiﬁ_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
adc1ss3_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
adc1ss2_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
ïi0_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
i2s0_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
Án0_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
gpi›1_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
gpi›0_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
gpiom_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
i2c5_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
gpi⁄_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
gpi›3_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
gpi›2_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
gpiod_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
ssi0_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
Õc0_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
i2c4_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
wtimî4a_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
wtimî4b_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
wtimî3a_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
wtimî3b_i§
 = 
blockög_h™dÀr


71 #¥agm®
wók
 
sy£xc_i§
 = 
blockög_h™dÀr


72 #¥agm®
wók
 
≥ci0_i§
 = 
blockög_h™dÀr


73 #¥agm®
wók
 
wtimî5a_i§
 = 
blockög_h™dÀr


74 #¥agm®
wók
 
wtimî5b_i§
 = 
blockög_h™dÀr


75 #¥agm®
wók
 
ˇn0_i§
 = 
blockög_h™dÀr


76 #¥agm®
wók
 
qei1_i§
 = 
blockög_h™dÀr


77 #¥agm®
wók
 
u¨t2_i§
 = 
blockög_h™dÀr


78 #¥agm®
wók
 
gpioh_i§
 = 
blockög_h™dÀr


79 #¥agm®
wók
 
gpiog_i§
 = 
blockög_h™dÀr


80 #¥agm®
wók
 
gpiof_i§
 = 
blockög_h™dÀr


81 #¥agm®
wók
 
i2c1_i§
 = 
blockög_h™dÀr


82 #¥agm®
wók
 
timî3b_i§
 = 
blockög_h™dÀr


83 #¥agm®
wók
 
timî3a_i§
 = 
blockög_h™dÀr


84 #¥agm®
wók
 
ssi1_i§
 = 
blockög_h™dÀr


85 #¥agm®
wók
 
u¨t4_i§
 = 
blockög_h™dÀr


86 #¥agm®
wók
 
u¨t5_i§
 = 
blockög_h™dÀr


87 #¥agm®
wók
 
u¨t6_i§
 = 
blockög_h™dÀr


88 #¥agm®
wók
 
u¨t7_i§
 = 
blockög_h™dÀr


89 #¥agm®
wók
 
i2c2_i§
 = 
blockög_h™dÀr


90 #¥agm®
wók
 
i2c3_i§
 = 
blockög_h™dÀr


91 #¥agm®
wók
 
gpioc_i§
 = 
blockög_h™dÀr


92 #¥agm®
wók
 
u¨t1_i§
 = 
blockög_h™dÀr


93 #¥agm®
wók
 
wtimî2b_i§
 = 
blockög_h™dÀr


94 #¥agm®
wók
 
wtimî2a_i§
 = 
blockög_h™dÀr


95 #¥agm®
wók
 
timî5b_i§
 = 
blockög_h™dÀr


96 #¥agm®
wók
 
timî5a_i§
 = 
blockög_h™dÀr


97 #¥agm®
wók
 
wtimî0b_i§
 = 
blockög_h™dÀr


98 #¥agm®
wók
 
wtimî0a_i§
 = 
blockög_h™dÀr


99 #¥agm®
wók
 
wtimî1b_i§
 = 
blockög_h™dÀr


100 #¥agm®
wók
 
wtimî1a_i§
 = 
blockög_h™dÀr


101 #¥agm®
wók
 
pwm0_1_i§
 = 
blockög_h™dÀr


102 #¥agm®
wók
 
pwm0_0_i§
 = 
blockög_h™dÀr


103 #¥agm®
wók
 
qei0_i§
 = 
blockög_h™dÀr


104 #¥agm®
wók
 
pwm0_2_i§
 = 
blockög_h™dÀr


105 #¥agm®
wók
 
adc0ss1_i§
 = 
blockög_h™dÀr


106 #¥agm®
wók
 
adc0ss0_i§
 = 
blockög_h™dÀr


107 #¥agm®
wók
 
adc0ss3_i§
 = 
blockög_h™dÀr


108 #¥agm®
wók
 
adc0ss2_i§
 = 
blockög_h™dÀr


109 #¥agm®
wók
 
timî0a_i§
 = 
blockög_h™dÀr


110 #¥agm®
wók
 
w©chdog_i§
 = 
blockög_h™dÀr


111 #¥agm®
wók
 
adc1ss0_i§
 = 
blockög_h™dÀr


112 #¥agm®
wók
 
adc1ss1_i§
 = 
blockög_h™dÀr


113 #¥agm®
wók
 
udma_i§
 = 
blockög_h™dÀr


114 #¥agm®
wók
 
udm´º_i§
 = 
blockög_h™dÀr


115 #¥agm®
wók
 
usb0_i§
 = 
blockög_h™dÀr


116 #¥agm®
wók
 
pwm0_3_i§
 = 
blockög_h™dÀr


117 #¥agm®
wók
 
ëh_i§
 = 
blockög_h™dÀr


118 #¥agm®
wók
 
hibî«ã_i§
 = 
blockög_h™dÀr


119 #¥agm®
wók
 
ˇn1_i§
 = 
blockög_h™dÀr


120 #¥agm®
wók
 
ˇn2_i§
 = 
blockög_h™dÀr


121 #¥agm®
wók
 
gpiob_i§
 = 
blockög_h™dÀr


122 #¥agm®
wók
 
u¨t0_i§
 = 
blockög_h™dÀr


123 #¥agm®
wók
 
pwm0_Áu…_i§
 = 
blockög_h™dÀr


124 #¥agm®
wók
 
timî4b_i§
 = 
blockög_h™dÀr


125 #¥agm®
wók
 
timî4a_i§
 = 
blockög_h™dÀr


134 
	#IRQ_HANDLERS
 \

135 [
NVIC_GPIOQ7_IRQ
] = 
gpioq7_i§
, \

136 [
NVIC_GPIOQ6_IRQ
] = 
gpioq6_i§
, \

137 [
NVIC_PWM1_3_IRQ
] = 
pwm1_3_i§
, \

138 [
NVIC_PWM1_2_IRQ
] = 
pwm1_2_i§
, \

139 [
NVIC_PWM1_1_IRQ
] = 
pwm1_1_i§
, \

140 [
NVIC_PWM1_0_IRQ
] = 
pwm1_0_i§
, \

141 [
NVIC_PWM1_FAULT_IRQ
] = 
pwm1_Áu…_i§
, \

142 [
NVIC_TIMER2B_IRQ
] = 
timî2b_i§
, \

143 [
NVIC_COMP0_IRQ
] = 
comp0_i§
, \

144 [
NVIC_COMP1_IRQ
] = 
comp1_i§
, \

145 [
NVIC_COMP2_IRQ
] = 
comp2_i§
, \

146 [
NVIC_TIMER0B_IRQ
] = 
timî0b_i§
, \

147 [
NVIC_TIMER1A_IRQ
] = 
timî1a_i§
, \

148 [
NVIC_TIMER1B_IRQ
] = 
timî1b_i§
, \

149 [
NVIC_TIMER2A_IRQ
] = 
timî2a_i§
, \

150 [
NVIC_SYSCTL_IRQ
] = 
sys˘l_i§
, \

151 [
NVIC_FLASH_IRQ
] = 
Êash_i§
, \

152 [
NVIC_GPIOA_IRQ
] = 
gpiﬂ_i§
, \

153 [
NVIC_GPIOE_IRQ
] = 
gpi€_i§
, \

154 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

155 [
NVIC_GPIOP4_IRQ
] = 
gpi›4_i§
, \

156 [
NVIC_GPIOP5_IRQ
] = 
gpi›5_i§
, \

157 [
NVIC_GPIOP6_IRQ
] = 
gpi›6_i§
, \

158 [
NVIC_GPIOP7_IRQ
] = 
gpi›7_i§
, \

159 [
NVIC_GPIOQ0_IRQ
] = 
gpioq0_i§
, \

160 [
NVIC_GPIOQ1_IRQ
] = 
gpioq1_i§
, \

161 [
NVIC_GPIOQ2_IRQ
] = 
gpioq2_i§
, \

162 [
NVIC_GPIOQ3_IRQ
] = 
gpioq3_i§
, \

163 [
NVIC_GPIOQ4_IRQ
] = 
gpioq4_i§
, \

164 [
NVIC_GPIOQ5_IRQ
] = 
gpioq5_i§
, \

165 [
NVIC_UART3_IRQ
] = 
u¨t3_i§
, \

166 [
NVIC_SSI3_IRQ
] = 
ssi3_i§
, \

167 [
NVIC_GPIOK_IRQ
] = 
gpiok_i§
, \

168 [
NVIC_GPIOJ_IRQ
] = 
gpioj_i§
, \

169 [
NVIC_SSI2_IRQ
] = 
ssi2_i§
, \

170 [
NVIC_GPIOL_IRQ
] = 
gpiﬁ_i§
, \

171 [
NVIC_ADC1SS3_IRQ
] = 
adc1ss3_i§
, \

172 [
NVIC_ADC1SS2_IRQ
] = 
adc1ss2_i§
, \

173 [
NVIC_EPI0_IRQ
] = 
ïi0_i§
, \

174 [
NVIC_I2S0_IRQ
] = 
i2s0_i§
, \

175 [
NVIC_FAN0_IRQ
] = 
Án0_i§
, \

176 [
NVIC_GPIOP1_IRQ
] = 
gpi›1_i§
, \

177 [
NVIC_GPIOP0_IRQ
] = 
gpi›0_i§
, \

178 [
NVIC_GPIOM_IRQ
] = 
gpiom_i§
, \

179 [
NVIC_I2C5_IRQ
] = 
i2c5_i§
, \

180 [
NVIC_GPION_IRQ
] = 
gpi⁄_i§
, \

181 [
NVIC_GPIOP3_IRQ
] = 
gpi›3_i§
, \

182 [
NVIC_GPIOP2_IRQ
] = 
gpi›2_i§
, \

183 [
NVIC_GPIOD_IRQ
] = 
gpiod_i§
, \

184 [
NVIC_SSI0_IRQ
] = 
ssi0_i§
, \

185 [
NVIC_LPC0_IRQ
] = 
Õc0_i§
, \

186 [
NVIC_I2C4_IRQ
] = 
i2c4_i§
, \

187 [
NVIC_WTIMER4A_IRQ
] = 
wtimî4a_i§
, \

188 [
NVIC_WTIMER4B_IRQ
] = 
wtimî4b_i§
, \

189 [
NVIC_WTIMER3A_IRQ
] = 
wtimî3a_i§
, \

190 [
NVIC_WTIMER3B_IRQ
] = 
wtimî3b_i§
, \

191 [
NVIC_SYSEXC_IRQ
] = 
sy£xc_i§
, \

192 [
NVIC_PECI0_IRQ
] = 
≥ci0_i§
, \

193 [
NVIC_WTIMER5A_IRQ
] = 
wtimî5a_i§
, \

194 [
NVIC_WTIMER5B_IRQ
] = 
wtimî5b_i§
, \

195 [
NVIC_CAN0_IRQ
] = 
ˇn0_i§
, \

196 [
NVIC_QEI1_IRQ
] = 
qei1_i§
, \

197 [
NVIC_UART2_IRQ
] = 
u¨t2_i§
, \

198 [
NVIC_GPIOH_IRQ
] = 
gpioh_i§
, \

199 [
NVIC_GPIOG_IRQ
] = 
gpiog_i§
, \

200 [
NVIC_GPIOF_IRQ
] = 
gpiof_i§
, \

201 [
NVIC_I2C1_IRQ
] = 
i2c1_i§
, \

202 [
NVIC_TIMER3B_IRQ
] = 
timî3b_i§
, \

203 [
NVIC_TIMER3A_IRQ
] = 
timî3a_i§
, \

204 [
NVIC_SSI1_IRQ
] = 
ssi1_i§
, \

205 [
NVIC_UART4_IRQ
] = 
u¨t4_i§
, \

206 [
NVIC_UART5_IRQ
] = 
u¨t5_i§
, \

207 [
NVIC_UART6_IRQ
] = 
u¨t6_i§
, \

208 [
NVIC_UART7_IRQ
] = 
u¨t7_i§
, \

209 [
NVIC_I2C2_IRQ
] = 
i2c2_i§
, \

210 [
NVIC_I2C3_IRQ
] = 
i2c3_i§
, \

211 [
NVIC_GPIOC_IRQ
] = 
gpioc_i§
, \

212 [
NVIC_UART1_IRQ
] = 
u¨t1_i§
, \

213 [
NVIC_WTIMER2B_IRQ
] = 
wtimî2b_i§
, \

214 [
NVIC_WTIMER2A_IRQ
] = 
wtimî2a_i§
, \

215 [
NVIC_TIMER5B_IRQ
] = 
timî5b_i§
, \

216 [
NVIC_TIMER5A_IRQ
] = 
timî5a_i§
, \

217 [
NVIC_WTIMER0B_IRQ
] = 
wtimî0b_i§
, \

218 [
NVIC_WTIMER0A_IRQ
] = 
wtimî0a_i§
, \

219 [
NVIC_WTIMER1B_IRQ
] = 
wtimî1b_i§
, \

220 [
NVIC_WTIMER1A_IRQ
] = 
wtimî1a_i§
, \

221 [
NVIC_PWM0_1_IRQ
] = 
pwm0_1_i§
, \

222 [
NVIC_PWM0_0_IRQ
] = 
pwm0_0_i§
, \

223 [
NVIC_QEI0_IRQ
] = 
qei0_i§
, \

224 [
NVIC_PWM0_2_IRQ
] = 
pwm0_2_i§
, \

225 [
NVIC_ADC0SS1_IRQ
] = 
adc0ss1_i§
, \

226 [
NVIC_ADC0SS0_IRQ
] = 
adc0ss0_i§
, \

227 [
NVIC_ADC0SS3_IRQ
] = 
adc0ss3_i§
, \

228 [
NVIC_ADC0SS2_IRQ
] = 
adc0ss2_i§
, \

229 [
NVIC_TIMER0A_IRQ
] = 
timî0a_i§
, \

230 [
NVIC_WATCHDOG_IRQ
] = 
w©chdog_i§
, \

231 [
NVIC_ADC1SS0_IRQ
] = 
adc1ss0_i§
, \

232 [
NVIC_ADC1SS1_IRQ
] = 
adc1ss1_i§
, \

233 [
NVIC_UDMA_IRQ
] = 
udma_i§
, \

234 [
NVIC_UDMAERR_IRQ
] = 
udm´º_i§
, \

235 [
NVIC_USB0_IRQ
] = 
usb0_i§
, \

236 [
NVIC_PWM0_3_IRQ
] = 
pwm0_3_i§
, \

237 [
NVIC_ETH_IRQ
] = 
ëh_i§
, \

238 [
NVIC_HIBERNATE_IRQ
] = 
hibî«ã_i§
, \

239 [
NVIC_CAN1_IRQ
] = 
ˇn1_i§
, \

240 [
NVIC_CAN2_IRQ
] = 
ˇn2_i§
, \

241 [
NVIC_GPIOB_IRQ
] = 
gpiob_i§
, \

242 [
NVIC_UART0_IRQ
] = 
u¨t0_i§
, \

243 [
NVIC_PWM0_FAULT_IRQ
] = 
pwm0_Áu…_i§
, \

244 [
NVIC_TIMER4B_IRQ
] = 
timî4b_i§
, \

245 [
NVIC_TIMER4A_IRQ
] = 
timî4a_i§


	)

	@libopencm3/lib/lm4f/gpio.c

57 
	~<lib›ícm3/lm4f/gpio.h
>

58 
	~<lib›ícm3/lm4f/sy°emc⁄åﬁ.h
>

61 
	#GPIO_LOCK_UNLOCK_CODE
 0x4C4F434B

	)

186 
	$gpio_íabÀ_ahb_≠îtuª
()

188 
SYSCTL_GPIOHBCTL
 = 0xffffffff;

189 
	}
}

209 
	$gpio_mode_£tup
(
uöt32_t
 
gpi›‹t
, 
gpio_mode
 
mode
,

210 
gpio_puŒup
 
puŒup
, 
uöt8_t
 
gpios
)

212 
mode
) {

213 
GPIO_MODE_OUTPUT
:

214 
	`GPIO_DIR
(
gpi›‹t
Ë|
gpios
;

215 
	`GPIO_DEN
(
gpi›‹t
Ë|
gpios
;

216 
	`GPIO_AMSEL
(
gpi›‹t
Ë&~
gpios
;

218 
GPIO_MODE_INPUT
:

219 
	`GPIO_DIR
(
gpi›‹t
Ë&~
gpios
;

220 
	`GPIO_DEN
(
gpi›‹t
Ë|
gpios
;

221 
	`GPIO_AMSEL
(
gpi›‹t
Ë&~
gpios
;

223 
GPIO_MODE_ANALOG
:

224 
	`GPIO_DEN
(
gpi›‹t
Ë&~
gpios
;

225 
	`GPIO_AMSEL
(
gpi›‹t
Ë|
gpios
;

236 
puŒup
) {

237 
GPIO_PUPD_PULLUP
:

238 
	`GPIO_PUR
(
gpi›‹t
Ë|
gpios
;

240 
GPIO_PUPD_PULLDOWN
:

241 
	`GPIO_PDR
(
gpi›‹t
Ë|
gpios
;

243 
GPIO_PUPD_NONE
:

245 
	`GPIO_PUR
(
gpi›‹t
Ë&~
gpios
;

246 
	`GPIO_PDR
(
gpi›‹t
Ë&~
gpios
;

249 
	}
}

270 
	$gpio_£t_ouçut_c⁄fig
(
uöt32_t
 
gpi›‹t
, 
gpio_ouçut_ty≥
 
Ÿy≥
,

271 
gpio_drive_°ªngth
 
drive
, 
uöt8_t
 
gpios
)

273 i‡(
Ÿy≥
 =
GPIO_OTYPE_OD
) {

274 
	`GPIO_ODR
(
gpi›‹t
Ë|
gpios
;

276 
	`GPIO_ODR
(
gpi›‹t
Ë&~
gpios
;

283 
drive
) {

284 
GPIO_DRIVE_8MA_SLEW_CTL
:

285 
	`GPIO_DR8R
(
gpi›‹t
Ë|
gpios
;

286 
	`GPIO_SLR
(
gpi›‹t
Ë|
gpios
;

288 
GPIO_DRIVE_8MA
:

289 
	`GPIO_DR8R
(
gpi›‹t
Ë|
gpios
;

290 
	`GPIO_SLR
(
gpi›‹t
Ë&~
gpios
;

292 
GPIO_DRIVE_4MA
:

293 
	`GPIO_DR4R
(
gpi›‹t
Ë|
gpios
;

295 
GPIO_DRIVE_2MA
:

297 
	`GPIO_DR2R
(
gpi›‹t
Ë|
gpios
;

300 
	}
}

302 
	#PCTL_AF
(
pö
, 
af
Ë(◊fË<< (’öË<< 2))

	)

303 
	#PCTL_MASK
(
pö
Ë
	`PCTL_AF
(’ö), 0xf)

	)

321 
	$gpio_£t_af
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
Æt_func_num
, uöt8_à
gpios
)

323 
uöt32_t
 
p˘l32
;

324 
uöt8_t
 
pö_mask
;

325 
i
;

328 i‡(
Æt_func_num
 == 0) {

329 
	`GPIO_AFSEL
(
gpi›‹t
Ë&~
gpios
;

334 
	`GPIO_AFSEL
(
gpi›‹t
Ë|
gpios
;

336 
	`GPIO_DEN
(
gpi›‹t
Ë|
gpios
;

339 
p˘l32
 = 
	`GPIO_PCTL
(
gpi›‹t
);

340 
i
 = 0; i < 8; i++) {

341 
pö_mask
 = (1 << 
i
);

343 i‡(!(
gpios
 & 
pö_mask
)) {

347 
p˘l32
 &~
	`PCTL_MASK
(
i
);

348 
p˘l32
 |
	`PCTL_AF
(
i
, (
Æt_func_num
 & 0xf));

351 
	`GPIO_PCTL
(
gpi›‹t
Ë
p˘l32
;

352 
	}
}

365 
	$gpio_u∆ock_commô
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
)

368 
	`GPIO_LOCK
(
gpi›‹t
Ë
GPIO_LOCK_UNLOCK_CODE
;

370 
	`GPIO_CR
(
gpi›‹t
Ë|
gpios
;

372 
	`GPIO_LOCK
(
gpi›‹t
Ë~
GPIO_LOCK_UNLOCK_CODE
;

373 
	}
}

441 
	$gpio_toggÀ
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
)

444 
	`GPIO_DATA
(
gpi›‹t
)[
gpios
] ^
GPIO_ALL
;

445 
	}
}

527 
	$gpio_c⁄figuª_åiggî
(
uöt32_t
 
gpi›‹t
, 
gpio_åiggî
 
åiggî
,

528 
uöt8_t
 
gpios
)

530 
åiggî
) {

531 
GPIO_TRIG_LVL_LOW
:

532 
	`GPIO_IS
(
gpi›‹t
Ë|
gpios
;

533 
	`GPIO_IEV
(
gpi›‹t
Ë&~
gpios
;

535 
GPIO_TRIG_LVL_HIGH
:

536 
	`GPIO_IS
(
gpi›‹t
Ë|
gpios
;

537 
	`GPIO_IEV
(
gpi›‹t
Ë|
gpios
;

539 
GPIO_TRIG_EDGE_FALL
:

540 
	`GPIO_IS
(
gpi›‹t
Ë&~
gpios
;

541 
	`GPIO_IBE
(
gpi›‹t
Ë&~
gpios
;

542 
	`GPIO_IEV
(
gpi›‹t
Ë&~
gpios
;

544 
GPIO_TRIG_EDGE_RISE
:

545 
	`GPIO_IS
(
gpi›‹t
Ë&~
gpios
;

546 
	`GPIO_IBE
(
gpi›‹t
Ë&~
gpios
;

547 
	`GPIO_IEV
(
gpi›‹t
Ë|
gpios
;

549 
GPIO_TRIG_EDGE_BOTH
:

550 
	`GPIO_IS
(
gpi›‹t
Ë&~
gpios
;

551 
	`GPIO_IBE
(
gpi›‹t
Ë|
gpios
;

557 
	}
}

572 
	$gpio_íabÀ_öãºu±s
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
)

574 
	`GPIO_IM
(
gpi›‹t
Ë|
gpios
;

575 
	}
}

590 
	$gpio_dißbÀ_öãºu±s
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
gpios
)

592 
	`GPIO_IM
(
gpi›‹t
Ë|
gpios
;

593 
	}
}

	@libopencm3/lib/lm4f/rcc.c

79 
	~<lib›ícm3/lm4f/rcc.h
>

106 
uöt32_t
 
	glm4f_rcc_sys˛k_‰eq
 = 16000000;

119 
	$rcc_c⁄figuª_xèl
(
xèl_t
 
xèl
)

121 
uöt32_t
 
ªg32
;

123 
ªg32
 = 
SYSCTL_RCC
;

124 
ªg32
 &~
SYSCTL_RCC_XTAL_MASK
;

125 
ªg32
 |(
xèl
 & 
SYSCTL_RCC_XTAL_MASK
);

126 
SYSCTL_RCC
 = 
ªg32
;

127 
	}
}

134 
	$rcc_dißbÀ_maö_osc
()

136 
SYSCTL_RCC
 |
SYSCTL_RCC_MOSCDIS
;

137 
	}
}

144 
	$rcc_dißbÀ_öãøl_osc
()

146 
SYSCTL_RCC
 |
SYSCTL_RCC_IOSCDIS
;

147 
	}
}

154 
	$rcc_íabÀ_maö_osc
()

156 
SYSCTL_RCC
 &~
SYSCTL_RCC_MOSCDIS
;

157 
	}
}

164 
	$rcc_íabÀ_öãøl_osc
()

166 
SYSCTL_RCC
 &~
SYSCTL_RCC_IOSCDIS
;

167 
	}
}

177 
	$rcc_íabÀ_rcc2
()

179 
SYSCTL_RCC2
 |
SYSCTL_RCC2_USERCC2
;

180 
	}
}

190 
	$rcc_∂l_off
()

192 
SYSCTL_RCC2
 |
SYSCTL_RCC2_PWRDN2
;

193 
	}
}

203 
	$rcc_∂l_⁄
()

205 
SYSCTL_RCC2
 &~
SYSCTL_RCC2_PWRDN2
;

206 
	}
}

216 
	$rcc_£t_osc_sour˚
(
osc_§c
 
§c
)

218 
uöt32_t
 
ªg32
;

220 
ªg32
 = 
SYSCTL_RCC2
;

221 
ªg32
 &~
SYSCTL_RCC2_OSCSRC2_MASK
;

222 
ªg32
 |(
§c
 & 
SYSCTL_RCC2_OSCSRC2_MASK
);

223 
SYSCTL_RCC2
 = 
ªg32
;

224 
	}
}

235 
	$rcc_∂l_by∑ss_dißbÀ
()

237 
SYSCTL_RCC2
 &~
SYSCTL_RCC2_BYPASS2
;

238 
	}
}

249 
	$rcc_∂l_by∑ss_íabÀ
()

251 
SYSCTL_RCC2
 |
SYSCTL_RCC2_BYPASS2
;

252 
	}
}

273 
	$rcc_£t_∂l_divis‹
(
uöt8_t
 
div400
)

275 
uöt32_t
 
ªg32
;

277 
SYSCTL_RCC
 |
SYSCTL_RCC_USESYSDIV
;

279 
ªg32
 = 
SYSCTL_RCC2
;

280 
ªg32
 &~
SYSCTL_RCC2_SYSDIV400_MASK
;

281 
ªg32
 |((
div400
 - 1Ë<< 22Ë& 
SYSCTL_RCC2_SYSDIV400_MASK
;

283 
ªg32
 |
SYSCTL_RCC2_DIV400
;

284 
SYSCTL_RCC2
 = 
ªg32
;

285 
	}
}

294 
	$rcc_£t_pwm_divis‹
(
pwm_˛kdiv
 
div
)

296 
uöt32_t
 
ªg32
;

298 
ªg32
 = 
SYSCTL_RCC
;

299 
ªg32
 &~
SYSCTL_RCC_PWMDIV_MASK
;

300 
ªg32
 |(
div
 & 
SYSCTL_RCC_PWMDIV_MASK
);

301 
SYSCTL_RCC
 = 
ªg32
;

302 
	}
}

312 
	$rcc_usb_∂l_off
()

314 
SYSCTL_RCC2
 |
SYSCTL_RCC2_USBPWRDN
;

315 
	}
}

325 
	$rcc_usb_∂l_⁄
()

327 
SYSCTL_RCC2
 &~
SYSCTL_RCC2_USBPWRDN
;

328 
	}
}

336 
	$rcc_waô_f‹_∂l_ªady
()

338 !(
SYSCTL_PLLSTAT
 & 
SYSCTL_PLLSTAT_LOCK
));

339 
	}
}

364 
	$rcc_ch™ge_∂l_divis‹
(
uöt8_t
 
∂l_div400
)

367 
	`rcc_∂l_by∑ss_íabÀ
();

369 
	`rcc_£t_∂l_divis‹
(
∂l_div400
);

371 
	`rcc_waô_f‹_∂l_ªady
();

373 
	`rcc_∂l_by∑ss_dißbÀ
();

375 
lm4f_rcc_sys˛k_‰eq
 = (
uöt32_t
)400E6 / 
∂l_div400
;

376 
	}
}

383 
uöt32_t
 
	$rcc_gë_sy°em_˛ock_‰equícy
()

385  
lm4f_rcc_sys˛k_‰eq
;

386 
	}
}

389 
uöt32_t
 
	$xèl_to_‰eq
(
xèl_t
 
xèl
)

391 c⁄° 
uöt32_t
 
‰eqs
[] = {

415  
‰eqs
[
xèl
 - 
XTAL_4M
];

416 
	}
}

443 
	$rcc_sys˛k_c⁄fig
(
osc_§c
 
§c
, 
xèl_t
 
xèl
, 
uöt8_t
 
∂l_div400
)

449 
	`rcc_∂l_by∑ss_íabÀ
();

452 i‡(
§c
 =
OSCSRC_MOSC
) {

453 
	`rcc_íabÀ_maö_osc
();

457 
	`rcc_íabÀ_rcc2
();

460 
	`rcc_c⁄figuª_xèl
(
xèl
);

462 
	`rcc_£t_osc_sour˚
(
§c
);

463 i‡(
∂l_div400
) {

465 
	`rcc_∂l_⁄
();

467 
	`rcc_ch™ge_∂l_divis‹
(
∂l_div400
);

470 
§c
) {

471 
OSCSRC_PIOSC
:

472 
lm4f_rcc_sys˛k_‰eq
 = 16000000;

474 
OSCSRC_PIOSC_D4
:

475 
lm4f_rcc_sys˛k_‰eq
 = 4000000;

477 
OSCSRC_MOSC
:

478 
lm4f_rcc_sys˛k_‰eq
 = 
	`xèl_to_‰eq
(
xèl
);

480 
OSCSRC_32K_EXT
:

481 
lm4f_rcc_sys˛k_‰eq
 = 32768;

483 
OSCSRC_30K_INT
:

490 
lm4f_rcc_sys˛k_‰eq
 = 0;

494 
	}
}

	@libopencm3/lib/lm4f/systemcontrol.c

20 
	~<lib›ícm3/lm4f/sy°emc⁄åﬁ.h
>

27 
	$≥rùh_˛ock_íabÀ
(
lm4f_˛kí
 
≥rùh
)

29 
	`MMIO32
(
SYSCTL_BASE
 + (
≥rùh
 >> 5)) |= 1 << (periph & 0x1f);

30 
	}
}

37 
	$≥rùh_˛ock_dißbÀ
(
lm4f_˛kí
 
≥rùh
)

39 
	`MMIO32
(
SYSCTL_BASE
 + (
≥rùh
 >> 5)) &= ~(1 << (periph & 0x1f));

40 
	}
}

	@libopencm3/lib/lm4f/uart.c

41 
	~<lib›ícm3/lm4f/u¨t.h
>

42 
	~<lib›ícm3/lm4f/sy°emc⁄åﬁ.h
>

43 
	~<lib›ícm3/lm4f/rcc.h
>

93 
	$u¨t_íabÀ
(
uöt32_t
 
u¨t
)

95 
	`UART_CTL
(
u¨t
Ë|(
UART_CTL_UARTEN
 | 
UART_CTL_RXE
 | 
UART_CTL_TXE
);

96 
	}
}

103 
	$u¨t_dißbÀ
(
uöt32_t
 
u¨t
)

105 
	`UART_CTL
(
u¨t
Ë&~
UART_CTL_UARTEN
;

106 
	}
}

114 
	$u¨t_£t_baudøã
(
uöt32_t
 
u¨t
, uöt32_à
baud
)

116 
uöt32_t
 
˛ock
;

119 i‡(
	`UART_CC
(
u¨t
Ë=
UART_CC_CS_PIOSC
) {

120 
˛ock
 = 16000000;

122 
˛ock
 = 
	`rcc_gë_sy°em_˛ock_‰equícy
();

126 
uöt32_t
 
div
 = (((
˛ock
 * 8Ë/ 
baud
) + 1) / 2;

129 
	`UART_IBRD
(
u¨t
Ë
div
 / 64;

130 
	`UART_FBRD
(
u¨t
Ë
div
 % 64;

131 
	}
}

139 
	$u¨t_£t_d©abôs
(
uöt32_t
 
u¨t
, 
uöt8_t
 
d©abôs
)

141 
uöt32_t
 
ªg32
, 
bôöt32_t
;

144 
bôöt32_t
 = (
d©abôs
 - 5) << 5;

148 
ªg32
 = 
	`UART_LCRH
(
u¨t
);

149 
ªg32
 &~
UART_LCRH_WLEN_MASK
;

150 
ªg32
 |
bôöt32_t
;

151 
	`UART_LCRH
(
u¨t
Ë
ªg32
;

152 
	}
}

160 
	$u¨t_£t_°›bôs
(
uöt32_t
 
u¨t
, 
uöt8_t
 
°›bôs
)

162 i‡(
°›bôs
 == 2) {

163 
	`UART_LCRH
(
u¨t
Ë|
UART_LCRH_STP2
;

165 
	`UART_LCRH
(
u¨t
Ë&~
UART_LCRH_STP2
;

167 
	}
}

175 
	$u¨t_£t_∑rôy
(
uöt32_t
 
u¨t
, 
u¨t_∑rôy
 
∑rôy
)

177 
uöt32_t
 
ªg32
;

179 
ªg32
 = 
	`UART_LCRH
(
u¨t
);

180 
ªg32
 |
UART_LCRH_PEN
;

181 
ªg32
 &~(
UART_LCRH_SPS
 | 
UART_LCRH_EPS
);

183 
∑rôy
) {

184 
UART_PARITY_NONE
:

186 
	`UART_LCRH
(
u¨t
Ë&~
UART_LCRH_PEN
;

188 
UART_PARITY_ODD
:

190 
UART_PARITY_EVEN
:

191 
ªg32
 |
UART_LCRH_EPS
;

193 
UART_PARITY_STICK_0
:

194 
ªg32
 |(
UART_LCRH_SPS
 | 
UART_LCRH_EPS
);

196 
UART_PARITY_STICK_1
:

197 
ªg32
 |
UART_LCRH_SPS
;

201 
	`UART_LCRH
(
u¨t
Ë
ªg32
;

202 
	}
}

216 
	$u¨t_£t_Êow_c⁄åﬁ
(
uöt32_t
 
u¨t
, 
u¨t_Êow˘l
 
Êow
)

218 
uöt32_t
 
ªg32
 = 
	`UART_CTL
(
u¨t
);

220 
ªg32
 &~(
UART_CTL_RTSEN
 | 
UART_CTL_CTSEN
);

222 i‡(
Êow
 =
UART_FLOWCTL_RTS
) {

223 
ªg32
 |
UART_CTL_RTSEN
;

224 } i‡(
Êow
 =
UART_FLOWCTL_CTS
) {

225 
ªg32
 |
UART_CTL_CTSEN
;

226 } i‡(
Êow
 =
UART_FLOWCTL_RTS_CTS
) {

227 
ªg32
 |(
UART_CTL_RTSEN
 | 
UART_CTL_CTSEN
);

230 
	`UART_CTL
(
u¨t
Ë
ªg32
;

231 
	}
}

238 
	$u¨t_˛ock_‰om_piosc
(
uöt32_t
 
u¨t
)

240 
	`UART_CC
(
u¨t
Ë
UART_CC_CS_PIOSC
;

241 
	}
}

248 
	$u¨t_˛ock_‰om_sys˛k
(
uöt32_t
 
u¨t
)

250 
	`UART_CC
(
u¨t
Ë
UART_CC_CS_SYSCLK
;

251 
	}
}

275 
	$u¨t_£nd
(
uöt32_t
 
u¨t
, 
uöt16_t
 
d©a
)

277 
d©a
 &= 0xFF;

278 
	`UART_DR
(
u¨t
Ë
d©a
;

279 
	}
}

287 
uöt16_t
 
	$u¨t_ªcv
(
uöt32_t
 
u¨t
)

289  
	`UART_DR
(
u¨t
Ë& 
UART_DR_DATA_MASK
;

290 
	}
}

303 
	$u¨t_waô_£nd_ªady
(
uöt32_t
 
u¨t
)

306 
	`UART_FR
(
u¨t
Ë& 
UART_FR_TXFF
);

307 
	}
}

316 
	$u¨t_waô_ªcv_ªady
(
uöt32_t
 
u¨t
)

319 
	`UART_FR
(
u¨t
Ë& 
UART_FR_RXFE
);

320 
	}
}

330 
	$u¨t_£nd_blockög
(
uöt32_t
 
u¨t
, 
uöt16_t
 
d©a
)

332 
	`u¨t_waô_£nd_ªady
(
u¨t
);

333 
	`u¨t_£nd
(
u¨t
, 
d©a
);

334 
	}
}

344 
uöt16_t
 
	$u¨t_ªcv_blockög
(
uöt32_t
 
u¨t
)

346 
	`u¨t_waô_ªcv_ªady
(
u¨t
);

347  
	`u¨t_ªcv
(
u¨t
);

348 
	}
}

430 
	$u¨t_íabÀ_öãºu±s
(
uöt32_t
 
u¨t
, 
u¨t_öãºu±_Êag
 
öts
)

432 
	`UART_IM
(
u¨t
Ë|
öts
;

433 
	}
}

446 
	$u¨t_dißbÀ_öãºu±s
(
uöt32_t
 
u¨t
, 
u¨t_öãºu±_Êag
 
öts
)

448 
	`UART_IM
(
u¨t
Ë&~
öts
;

449 
	}
}

459 
	$u¨t_íabÀ_rx_öãºu±
(
uöt32_t
 
u¨t
)

461 
	`u¨t_íabÀ_öãºu±s
(
u¨t
, 
UART_INT_RX
);

462 
	}
}

469 
	$u¨t_dißbÀ_rx_öãºu±
(
uöt32_t
 
u¨t
)

471 
	`u¨t_dißbÀ_öãºu±s
(
u¨t
, 
UART_INT_RX
);

472 
	}
}

482 
	$u¨t_íabÀ_tx_öãºu±
(
uöt32_t
 
u¨t
)

484 
	`u¨t_íabÀ_öãºu±s
(
u¨t
, 
UART_INT_TX
);

485 
	}
}

492 
	$u¨t_dißbÀ_tx_öãºu±
(
uöt32_t
 
u¨t
)

494 
	`u¨t_dißbÀ_öãºu±s
(
u¨t
, 
UART_INT_TX
);

495 
	}
}

508 
	$u¨t_˛ór_öãºu±_Êag
(
uöt32_t
 
u¨t
, 
u¨t_öãºu±_Êag
 
öts
)

510 
	`UART_ICR
(
u¨t
Ë|
öts
;

511 
	}
}

527 
	$u¨t_íabÀ_rx_dma
(
uöt32_t
 
u¨t
)

529 
	`UART_DMACTL
(
u¨t
Ë|
UART_DMACTL_RXDMAE
;

530 
	}
}

537 
	$u¨t_dißbÀ_rx_dma
(
uöt32_t
 
u¨t
)

539 
	`UART_DMACTL
(
u¨t
Ë&~
UART_DMACTL_RXDMAE
;

540 
	}
}

547 
	$u¨t_íabÀ_tx_dma
(
uöt32_t
 
u¨t
)

549 
	`UART_DMACTL
(
u¨t
Ë|
UART_DMACTL_TXDMAE
;

550 
	}
}

557 
	$u¨t_dißbÀ_tx_dma
(
uöt32_t
 
u¨t
)

559 
	`UART_DMACTL
(
u¨t
Ë&~
UART_DMACTL_TXDMAE
;

560 
	}
}

594 
	$u¨t_íabÀ_fifo
(
uöt32_t
 
u¨t
)

596 
	`UART_LCRH
(
u¨t
Ë|
UART_LCRH_FEN
;

597 
	}
}

604 
	$u¨t_dißbÀ_fifo
(
uöt32_t
 
u¨t
)

606 
	`UART_LCRH
(
u¨t
Ë&~
UART_LCRH_FEN
;

607 
	}
}

616 
	$u¨t_£t_fifo_åiggî_Àvñs
(
uöt32_t
 
u¨t
,

617 
u¨t_fifo_rx_åiggî_Àvñ
 
rx_Àvñ
,

618 
u¨t_fifo_tx_åiggî_Àvñ
 
tx_Àvñ
)

620 
	`UART_IFLS
(
u¨t
Ë
rx_Àvñ
 | 
tx_Àvñ
;

621 
	}
}

	@libopencm3/lib/lm4f/vector_chipset.c

20 
	$¥e_maö
()

23 
SCB_CPACR
 |
SCB_CPACR_FULL
 * (
SCB_CPACR_CP10
 | 
SCB_CPACR_CP11
);

24 
	}
}

	@libopencm3/lib/lpc13xx/gpio.c

34 
	~<lib›ícm3/Õc13xx/gpio.h
>

36 
	$gpio_£t
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
)

38 
	`GPIO_DATA
(
gpi›‹t
Ë
gpios
;

39 
	}
}

	@libopencm3/lib/lpc13xx/vector_nvic.c

15 #¥agm®
wók
 
s•1_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pio2_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
˘16b1_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
usb_fiq_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
˘32b0_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
adc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
pio3_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
pio2_0_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
pio2_1_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
pio2_2_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
pio2_3_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
pio1_8_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
pio1_9_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
pio1_10_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
pio1_11_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
u¨t_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
usb_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
˘32b1_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
s•0_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
pio2_4_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
pio2_5_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
˘16b0_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
pio0_1_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
pio0_0_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
pio0_3_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
pio0_2_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
pio0_5_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
pio0_4_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
pio0_7_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
pio0_6_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
pio0_9_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
pio0_8_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
bod_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
pio3_3_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
pio3_2_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
pio0_11_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
pio0_10_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
pio1_1_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
pio1_0_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
pio1_3_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
pio1_2_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
pio1_5_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
pio1_4_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
pio1_7_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
pio1_6_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
pio2_7_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
pio2_6_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
pio3_1_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
pio3_0_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
pio2_11_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
pio2_10_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
pio2_9_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
pio1_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
pio2_8_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
wdt_i§
 = 
blockög_h™dÀr


79 
	#IRQ_HANDLERS
 \

80 [
NVIC_SSP1_IRQ
] = 
s•1_i§
, \

81 [
NVIC_PIO2_IRQ
] = 
pio2_i§
, \

82 [
NVIC_CT16B1_IRQ
] = 
˘16b1_i§
, \

83 [
NVIC_USB_FIQ_IRQ
] = 
usb_fiq_i§
, \

84 [
NVIC_CT32B0_IRQ
] = 
˘32b0_i§
, \

85 [
NVIC_ADC_IRQ
] = 
adc_i§
, \

86 [
NVIC_PIO3_IRQ
] = 
pio3_i§
, \

87 [
NVIC_PIO2_0_IRQ
] = 
pio2_0_i§
, \

88 [
NVIC_PIO2_1_IRQ
] = 
pio2_1_i§
, \

89 [
NVIC_PIO2_2_IRQ
] = 
pio2_2_i§
, \

90 [
NVIC_PIO2_3_IRQ
] = 
pio2_3_i§
, \

91 [
NVIC_PIO1_8_IRQ
] = 
pio1_8_i§
, \

92 [
NVIC_PIO1_9_IRQ
] = 
pio1_9_i§
, \

93 [
NVIC_PIO1_10_IRQ
] = 
pio1_10_i§
, \

94 [
NVIC_PIO1_11_IRQ
] = 
pio1_11_i§
, \

95 [
NVIC_UART_IRQ
] = 
u¨t_i§
, \

96 [
NVIC_USB_IRQ
] = 
usb_i§
, \

97 [
NVIC_CT32B1_IRQ
] = 
˘32b1_i§
, \

98 [
NVIC_SSP0_IRQ
] = 
s•0_i§
, \

99 [
NVIC_PIO2_4_IRQ
] = 
pio2_4_i§
, \

100 [
NVIC_PIO2_5_IRQ
] = 
pio2_5_i§
, \

101 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

102 [
NVIC_CT16B0_IRQ
] = 
˘16b0_i§
, \

103 [
NVIC_PIO0_1_IRQ
] = 
pio0_1_i§
, \

104 [
NVIC_PIO0_0_IRQ
] = 
pio0_0_i§
, \

105 [
NVIC_PIO0_3_IRQ
] = 
pio0_3_i§
, \

106 [
NVIC_PIO0_2_IRQ
] = 
pio0_2_i§
, \

107 [
NVIC_PIO0_5_IRQ
] = 
pio0_5_i§
, \

108 [
NVIC_PIO0_4_IRQ
] = 
pio0_4_i§
, \

109 [
NVIC_PIO0_7_IRQ
] = 
pio0_7_i§
, \

110 [
NVIC_PIO0_6_IRQ
] = 
pio0_6_i§
, \

111 [
NVIC_PIO0_9_IRQ
] = 
pio0_9_i§
, \

112 [
NVIC_PIO0_8_IRQ
] = 
pio0_8_i§
, \

113 [
NVIC_BOD_IRQ
] = 
bod_i§
, \

114 [
NVIC_PIO3_3_IRQ
] = 
pio3_3_i§
, \

115 [
NVIC_PIO3_2_IRQ
] = 
pio3_2_i§
, \

116 [
NVIC_PIO0_11_IRQ
] = 
pio0_11_i§
, \

117 [
NVIC_PIO0_10_IRQ
] = 
pio0_10_i§
, \

118 [
NVIC_PIO1_1_IRQ
] = 
pio1_1_i§
, \

119 [
NVIC_PIO1_0_IRQ
] = 
pio1_0_i§
, \

120 [
NVIC_PIO1_3_IRQ
] = 
pio1_3_i§
, \

121 [
NVIC_PIO1_2_IRQ
] = 
pio1_2_i§
, \

122 [
NVIC_PIO1_5_IRQ
] = 
pio1_5_i§
, \

123 [
NVIC_PIO1_4_IRQ
] = 
pio1_4_i§
, \

124 [
NVIC_PIO1_7_IRQ
] = 
pio1_7_i§
, \

125 [
NVIC_PIO1_6_IRQ
] = 
pio1_6_i§
, \

126 [
NVIC_PIO2_7_IRQ
] = 
pio2_7_i§
, \

127 [
NVIC_PIO2_6_IRQ
] = 
pio2_6_i§
, \

128 [
NVIC_PIO3_1_IRQ
] = 
pio3_1_i§
, \

129 [
NVIC_PIO3_0_IRQ
] = 
pio3_0_i§
, \

130 [
NVIC_PIO2_11_IRQ
] = 
pio2_11_i§
, \

131 [
NVIC_PIO2_10_IRQ
] = 
pio2_10_i§
, \

132 [
NVIC_PIO2_9_IRQ
] = 
pio2_9_i§
, \

133 [
NVIC_PIO1_IRQ
] = 
pio1_i§
, \

134 [
NVIC_PIO2_8_IRQ
] = 
pio2_8_i§
, \

135 [
NVIC_WDT_IRQ
] = 
wdt_i§


	)

	@libopencm3/lib/lpc17xx/gpio.c

35 
	~<lib›ícm3/Õc17xx/gpio.h
>

37 
	$gpio_£t
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

39 
	`GPIO_SET
(
gpi›‹t
Ë
gpios
;

40 
	}
}

42 
	$gpio_˛ór
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

44 
	`GPIO_CLR
(
gpi›‹t
Ë
gpios
;

45 
	}
}

	@libopencm3/lib/lpc17xx/pwr.c

35 
	~<lib›ícm3/Õc17xx/pwr.h
>

37 
	$pwr_íabÀ_≥rùhîÆs
(
uöt32_t
 
≥rùhîÆs
)

39 
PWR_PCONP
 |
≥rùhîÆs
;

40 
	}
}

42 
	$pwr_dißbÀ_≥rùhîÆs
(
uöt32_t
 
≥rùhîÆs
)

44 
PWR_PCONP
 &~
≥rùhîÆs
;

45 
	}
}

	@libopencm3/lib/lpc17xx/vector_nvic.c

15 #¥agm®
wók
 
usb_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
ˇn_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
gpdma_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
i2s_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
eöt2_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
eöt3_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
adc_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
bod_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
ëhî√t_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
rô_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
timî0_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
wdt_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
timî2_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
timî1_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
u¨t0_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
timî3_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
u¨t2_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
u¨t1_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
pwm_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
u¨t3_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
i2c1_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
•i_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
i2c2_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
s•1_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
s•0_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
∂l0_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
eöt1_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
eöt0_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
qei_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
mŸ‹_pwm_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
ˇn_a˘_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
usb_a˘_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
∂l1_i§
 = 
blockög_h™dÀr


58 
	#IRQ_HANDLERS
 \

59 [
NVIC_USB_IRQ
] = 
usb_i§
, \

60 [
NVIC_CAN_IRQ
] = 
ˇn_i§
, \

61 [
NVIC_GPDMA_IRQ
] = 
gpdma_i§
, \

62 [
NVIC_I2S_IRQ
] = 
i2s_i§
, \

63 [
NVIC_EINT2_IRQ
] = 
eöt2_i§
, \

64 [
NVIC_EINT3_IRQ
] = 
eöt3_i§
, \

65 [
NVIC_ADC_IRQ
] = 
adc_i§
, \

66 [
NVIC_BOD_IRQ
] = 
bod_i§
, \

67 [
NVIC_ETHERNET_IRQ
] = 
ëhî√t_i§
, \

68 [
NVIC_RIT_IRQ
] = 
rô_i§
, \

69 [
NVIC_TIMER0_IRQ
] = 
timî0_i§
, \

70 [
NVIC_WDT_IRQ
] = 
wdt_i§
, \

71 [
NVIC_TIMER2_IRQ
] = 
timî2_i§
, \

72 [
NVIC_TIMER1_IRQ
] = 
timî1_i§
, \

73 [
NVIC_UART0_IRQ
] = 
u¨t0_i§
, \

74 [
NVIC_TIMER3_IRQ
] = 
timî3_i§
, \

75 [
NVIC_UART2_IRQ
] = 
u¨t2_i§
, \

76 [
NVIC_UART1_IRQ
] = 
u¨t1_i§
, \

77 [
NVIC_PWM_IRQ
] = 
pwm_i§
, \

78 [
NVIC_UART3_IRQ
] = 
u¨t3_i§
, \

79 [
NVIC_I2C1_IRQ
] = 
i2c1_i§
, \

80 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

81 [
NVIC_SPI_IRQ
] = 
•i_i§
, \

82 [
NVIC_I2C2_IRQ
] = 
i2c2_i§
, \

83 [
NVIC_SSP1_IRQ
] = 
s•1_i§
, \

84 [
NVIC_SSP0_IRQ
] = 
s•0_i§
, \

85 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

86 [
NVIC_PLL0_IRQ
] = 
∂l0_i§
, \

87 [
NVIC_EINT1_IRQ
] = 
eöt1_i§
, \

88 [
NVIC_EINT0_IRQ
] = 
eöt0_i§
, \

89 [
NVIC_QEI_IRQ
] = 
qei_i§
, \

90 [
NVIC_MOTOR_PWM_IRQ
] = 
mŸ‹_pwm_i§
, \

91 [
NVIC_CAN_ACT_IRQ
] = 
ˇn_a˘_i§
, \

92 [
NVIC_USB_ACT_IRQ
] = 
usb_a˘_i§
, \

93 [
NVIC_PLL1_IRQ
] = 
∂l1_i§


	)

	@libopencm3/lib/lpc43xx/gpio.c

35 
	~<lib›ícm3/Õc43xx/gpio.h
>

37 
	$gpio_£t
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

39 
	`GPIO_SET
(
gpi›‹t
Ë
gpios
;

40 
	}
}

42 
	$gpio_˛ór
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

44 
	`GPIO_CLR
(
gpi›‹t
Ë
gpios
;

45 
	}
}

47 
	$gpio_toggÀ
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

49 
	`GPIO_NOT
(
gpi›‹t
Ë
gpios
;

50 
	}
}

	@libopencm3/lib/lpc43xx/i2c.c

40 
	~<lib›ícm3/Õc43xx/i2c.h
>

41 
	~<lib›ícm3/Õc43xx/scu.h
>

42 
	~<lib›ícm3/Õc43xx/cgu.h
>

44 
	$i2c0_öô
(c⁄° 
uöt16_t
 
duty_cy˛e_cou¡
)

47 
SCU_SFSI2C0
 = 
SCU_I2C0_NOMINAL
;

49 
I2C0_SCLH
 = 
duty_cy˛e_cou¡
;

50 
I2C0_SCLL
 = 
duty_cy˛e_cou¡
;

53 
I2C0_CONCLR
 = (
I2C_CONCLR_AAC
 | 
I2C_CONCLR_SIC


54 | 
I2C_CONCLR_STAC
 | 
I2C_CONCLR_I2ENC
);

57 
I2C0_CONSET
 = 
I2C_CONSET_I2EN
;

58 
	}
}

61 
	$i2c0_tx_°¨t
()

63 
I2C0_CONCLR
 = 
I2C_CONCLR_SIC
;

64 
I2C0_CONSET
 = 
I2C_CONSET_STA
;

65 !(
I2C0_CONSET
 & 
I2C_CONSET_SI
));

66 
I2C0_CONCLR
 = 
I2C_CONCLR_STAC
;

67 
	}
}

70 
	$i2c0_tx_byã
(
uöt8_t
 
byã
)

72 i‡(
I2C0_CONSET
 & 
I2C_CONSET_STA
) {

73 
I2C0_CONCLR
 = 
I2C_CONCLR_STAC
;

75 
I2C0_DAT
 = 
byã
;

76 
I2C0_CONCLR
 = 
I2C_CONCLR_SIC
;

77 !(
I2C0_CONSET
 & 
I2C_CONSET_SI
));

78 
	}
}

81 
uöt8_t
 
	$i2c0_rx_byã
()

83 i‡(
I2C0_CONSET
 & 
I2C_CONSET_STA
) {

84 
I2C0_CONCLR
 = 
I2C_CONCLR_STAC
;

86 
I2C0_CONCLR
 = 
I2C_CONCLR_SIC
;

87 !(
I2C0_CONSET
 & 
I2C_CONSET_SI
));

88  
I2C0_DAT
;

89 
	}
}

92 
	$i2c0_°›
()

94 i‡(
I2C0_CONSET
 & 
I2C_CONSET_STA
) {

95 
I2C0_CONCLR
 = 
I2C_CONCLR_STAC
;

97 
I2C0_CONSET
 = 
I2C_CONSET_STO
;

98 
I2C0_CONCLR
 = 
I2C_CONCLR_SIC
;

99 
	}
}

	@libopencm3/lib/lpc43xx/ipc.c

20 
	~<lib›ícm3/Õc43xx/ùc.h
>

21 
	~<lib›ícm3/Õc43xx/¸eg.h
>

22 
	~<lib›ícm3/Õc43xx/rgu.h
>

25 
	$ùc_hÆt_m0
()

27 vﬁ©ûê
uöt32_t
 
r°_a˘ive_°©us1
;

30 
r°_a˘ive_°©us1
 = 
RESET_ACTIVE_STATUS1
;

33 
r°_a˘ive_°©us1
 & 
RESET_CTRL1_M0APP_RST
) {

34 
RESET_CTRL1
 = ((~
r°_a˘ive_°©us1
Ë| 
RESET_CTRL1_M0APP_RST
);

35 
r°_a˘ive_°©us1
 = 
RESET_ACTIVE_STATUS1
;

37 
	}
}

39 
	$ùc_°¨t_m0
(
uöt32_t
 
cm0_ba£addr
)

41 vﬁ©ûê
uöt32_t
 
r°_a˘ive_°©us1
;

44 
CREG_M0APPMEMMAP
 = 
cm0_ba£addr
;

49 
r°_a˘ive_°©us1
 = 
RESET_ACTIVE_STATUS1
;

53 !(
r°_a˘ive_°©us1
 & 
RESET_CTRL1_M0APP_RST
)) {

54 
RESET_CTRL1
 = ((~
r°_a˘ive_°©us1
Ë& ~
RESET_CTRL1_M0APP_RST
);

55 
r°_a˘ive_°©us1
 = 
RESET_ACTIVE_STATUS1
;

57 
	}
}

	@libopencm3/lib/lpc43xx/m0/vector_nvic.c

15 #¥agm®
wók
 
ußπ0_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
u¨t1_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
ußπ2_‹_c_ˇn1_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
•i_‹_dac_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
adc1_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
s•0_‹_s•1_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
evíåouãr_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
i2s0_‹_i2s1_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
c_ˇn0_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
m4c‹e_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
dma_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
ëhî√t_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
Êashì¥om©_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
lcd_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
sdio_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
usb1_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
usb0_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
rôimî_‹_wwdt_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
s˘_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
göt1_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
timî0_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
timî3_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
pö_öt4_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
adc0_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
m˝wm_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
sgpio_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
i2c0_‹_úc1_i§
 = 
blockög_h™dÀr


52 
	#IRQ_HANDLERS
 \

53 [
NVIC_USART0_IRQ
] = 
ußπ0_i§
, \

54 [
NVIC_UART1_IRQ
] = 
u¨t1_i§
, \

55 [
NVIC_USART2_OR_C_CAN1_IRQ
] = 
ußπ2_‹_c_ˇn1_i§
, \

56 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

57 [
NVIC_SPI_OR_DAC_IRQ
] = 
•i_‹_dac_i§
, \

58 [
NVIC_ADC1_IRQ
] = 
adc1_i§
, \

59 [
NVIC_SSP0_OR_SSP1_IRQ
] = 
s•0_‹_s•1_i§
, \

60 [
NVIC_EVENTROUTER_IRQ
] = 
evíåouãr_i§
, \

61 [
NVIC_I2S0_OR_I2S1_IRQ
] = 
i2s0_‹_i2s1_i§
, \

62 [
NVIC_C_CAN0_IRQ
] = 
c_ˇn0_i§
, \

63 [
NVIC_M4CORE_IRQ
] = 
m4c‹e_i§
, \

64 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

65 [
NVIC_DMA_IRQ
] = 
dma_i§
, \

66 [
NVIC_ETHERNET_IRQ
] = 
ëhî√t_i§
, \

67 [
NVIC_FLASHEEPROMAT_IRQ
] = 
Êashì¥om©_i§
, \

68 [
NVIC_LCD_IRQ
] = 
lcd_i§
, \

69 [
NVIC_SDIO_IRQ
] = 
sdio_i§
, \

70 [
NVIC_USB1_IRQ
] = 
usb1_i§
, \

71 [
NVIC_USB0_IRQ
] = 
usb0_i§
, \

72 [
NVIC_RITIMER_OR_WWDT_IRQ
] = 
rôimî_‹_wwdt_i§
, \

73 [
NVIC_SCT_IRQ
] = 
s˘_i§
, \

74 [
NVIC_GINT1_IRQ
] = 
göt1_i§
, \

75 [
NVIC_TIMER0_IRQ
] = 
timî0_i§
, \

76 [
NVIC_TIMER3_IRQ
] = 
timî3_i§
, \

77 [
NVIC_PIN_INT4_IRQ
] = 
pö_öt4_i§
, \

78 [
NVIC_ADC0_IRQ
] = 
adc0_i§
, \

79 [
NVIC_MCPWM_IRQ
] = 
m˝wm_i§
, \

80 [
NVIC_SGPIO_IRQ
] = 
sgpio_i§
, \

81 [
NVIC_I2C0_OR_IRC1_IRQ
] = 
i2c0_‹_úc1_i§


	)

	@libopencm3/lib/lpc43xx/m4/vector_chipset.c

21 
	~<lib›ícm3/cm3/comm⁄.h
>

23 
_ëext_øm
, 
_ãxt_øm
, 
_ëext_rom
;

25 
	#CREG_M4MEMMAP
 
	`MMIO32
((0x40043000U + 0x100))

	)

27 
	$¥e_maö
()

29 vﬁ©ûê*
§c
, *
de°
;

32 i‡((&
_ëext_øm
-&
_ãxt_øm
) > 0) {

33 
§c
 = &
_ëext_rom
-(&
_ëext_øm
-&
_ãxt_øm
);

37 
CREG_M4MEMMAP
 = ()
§c
;

39 
de°
 = &
_ãxt_øm
; de° < &
_ëext_øm
; ) {

40 *
de°
++ = *
§c
++;

44 
CREG_M4MEMMAP
 = ()&
_ãxt_øm
;

48 
	}
}

	@libopencm3/lib/lpc43xx/m4/vector_nvic.c

15 #¥agm®
wók
 
evíåouãr_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
c_ˇn1_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
wwdt_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
qei_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
ußπ0_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
u¨t1_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
•i_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
adc1_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
s•0_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
s•1_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
©imî_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
i2s0_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
i2s1_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
göt0_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
göt1_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
m0c‹e_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
dac_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
dma_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
ëhî√t_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
lcd_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
sdio_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
usb1_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
usb0_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
c_ˇn0_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
pö_öt7_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
pö_öt6_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
rôimî_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
s˘_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
timî1_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
timî0_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
timî3_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
timî2_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
adc0_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
m˝wm_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
i2c1_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
sgpio_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
•ifi_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
pö_öt5_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
pö_öt4_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
pö_öt3_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
pö_öt2_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
pö_öt1_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
pö_öt0_i§
 = 
blockög_h™dÀr


70 
	#IRQ_HANDLERS
 \

71 [
NVIC_EVENTROUTER_IRQ
] = 
evíåouãr_i§
, \

72 [
NVIC_C_CAN1_IRQ
] = 
c_ˇn1_i§
, \

73 [
NVIC_WWDT_IRQ
] = 
wwdt_i§
, \

74 [
NVIC_QEI_IRQ
] = 
qei_i§
, \

75 [
NVIC_USART0_IRQ
] = 
ußπ0_i§
, \

76 [
NVIC_UART1_IRQ
] = 
u¨t1_i§
, \

77 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

78 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

79 [
NVIC_SPI_IRQ
] = 
•i_i§
, \

80 [
NVIC_ADC1_IRQ
] = 
adc1_i§
, \

81 [
NVIC_SSP0_IRQ
] = 
s•0_i§
, \

82 [
NVIC_SSP1_IRQ
] = 
s•1_i§
, \

83 [
NVIC_ATIMER_IRQ
] = 
©imî_i§
, \

84 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

85 [
NVIC_I2S0_IRQ
] = 
i2s0_i§
, \

86 [
NVIC_I2S1_IRQ
] = 
i2s1_i§
, \

87 [
NVIC_GINT0_IRQ
] = 
göt0_i§
, \

88 [
NVIC_GINT1_IRQ
] = 
göt1_i§
, \

89 [
NVIC_M0CORE_IRQ
] = 
m0c‹e_i§
, \

90 [
NVIC_DAC_IRQ
] = 
dac_i§
, \

91 [
NVIC_DMA_IRQ
] = 
dma_i§
, \

92 [
NVIC_ETHERNET_IRQ
] = 
ëhî√t_i§
, \

93 [
NVIC_LCD_IRQ
] = 
lcd_i§
, \

94 [
NVIC_SDIO_IRQ
] = 
sdio_i§
, \

95 [
NVIC_USB1_IRQ
] = 
usb1_i§
, \

96 [
NVIC_USB0_IRQ
] = 
usb0_i§
, \

97 [
NVIC_C_CAN0_IRQ
] = 
c_ˇn0_i§
, \

98 [
NVIC_PIN_INT7_IRQ
] = 
pö_öt7_i§
, \

99 [
NVIC_PIN_INT6_IRQ
] = 
pö_öt6_i§
, \

100 [
NVIC_RITIMER_IRQ
] = 
rôimî_i§
, \

101 [
NVIC_SCT_IRQ
] = 
s˘_i§
, \

102 [
NVIC_TIMER1_IRQ
] = 
timî1_i§
, \

103 [
NVIC_TIMER0_IRQ
] = 
timî0_i§
, \

104 [
NVIC_TIMER3_IRQ
] = 
timî3_i§
, \

105 [
NVIC_TIMER2_IRQ
] = 
timî2_i§
, \

106 [
NVIC_ADC0_IRQ
] = 
adc0_i§
, \

107 [
NVIC_MCPWM_IRQ
] = 
m˝wm_i§
, \

108 [
NVIC_I2C1_IRQ
] = 
i2c1_i§
, \

109 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

110 [
NVIC_SGPIO_IRQ
] = 
sgpio_i§
, \

111 [
NVIC_SPIFI_IRQ
] = 
•ifi_i§
, \

112 [
NVIC_PIN_INT5_IRQ
] = 
pö_öt5_i§
, \

113 [
NVIC_PIN_INT4_IRQ
] = 
pö_öt4_i§
, \

114 [
NVIC_PIN_INT3_IRQ
] = 
pö_öt3_i§
, \

115 [
NVIC_PIN_INT2_IRQ
] = 
pö_öt2_i§
, \

116 [
NVIC_PIN_INT1_IRQ
] = 
pö_öt1_i§
, \

117 [
NVIC_PIN_INT0_IRQ
] = 
pö_öt0_i§


	)

	@libopencm3/lib/lpc43xx/scu.c

35 
	~<lib›ícm3/Õc43xx/scu.h
>

40 
	$scu_pömux
(
scu_gΩ_pö_t
 
group_pö
, 
uöt32_t
 
scu_c⁄f
)

42 
	`MMIO32
(
group_pö
Ë
scu_c⁄f
;

43 
	}
}

	@libopencm3/lib/lpc43xx/ssp.c

35 
	~<lib›ícm3/Õc43xx/s•.h
>

36 
	~<lib›ícm3/Õc43xx/cgu.h
>

39 
	$s•_dißbÀ
(
s•_num_t
 
s•_num
)

41 
uöt32_t
 
s•_p‹t
;

43 i‡(
s•_num
 =
SSP0_NUM
) {

44 
s•_p‹t
 = 
SSP0
;

46 
s•_p‹t
 = 
SSP1
;

49 
	`SSP_CR1
(
s•_p‹t
) = 0x0;

50 
	}
}

55 
	$s•_öô
(
s•_num_t
 
s•_num
,

56 
s•_d©asize_t
 
d©a_size
,

57 
s•_‰ame_f‹m©_t
 
‰ame_f‹m©
,

58 
s•_˝ﬁ_˝ha_t
 
˝ﬁ_˝ha_f‹m©
,

59 
uöt8_t
 
£rül_˛ock_øã
,

60 
uöt8_t
 
˛k_¥esˇÀ
,

61 
s•_mode_t
 
mode
,

62 
s•_ma°î_¶ave_t
 
ma°î_¶ave
,

63 
s•_¶ave_›ti⁄_t
 
¶ave_›ti⁄
)

65 
uöt32_t
 
s•_p‹t
;

66 
uöt32_t
 
˛ock
;

68 i‡(
s•_num
 =
SSP0_NUM
) {

69 
s•_p‹t
 = 
SSP0
;

71 
s•_p‹t
 = 
SSP1
;

75 
CGU_BASE_SSP1_CLK
 =

76 
	`CGU_BASE_SSP1_CLK_CLK_SEL
(
CGU_SRC_PLL1
)

77 | 
CGU_BASE_SSP1_CLK_AUTOBLOCK
;

80 
	`SSP_CR1
(
s•_p‹t
) = 0x0;

83 
˛ock
 = 
£rül_˛ock_øã
;

84 
	`SSP_CPSR
(
s•_p‹t
Ë
˛k_¥esˇÀ
;

85 
	`SSP_CR0
(
s•_p‹t
) =

86 (
d©a_size
 | 
‰ame_f‹m©
 | 
˝ﬁ_˝ha_f‹m©
 | (
˛ock
<<8));

89 
	`SSP_CR1
(
s•_p‹t
Ë(
SSP_ENABLE
 | 
mode
 | 
ma°î_¶ave
 | 
¶ave_›ti⁄
);

90 
	}
}

92 
	$s•_waô_u¡û_nŸ_busy
(
s•_num_t
 
s•_num
)

94 
uöt32_t
 
s•_p‹t
;

96 i‡(
s•_num
 =
SSP0_NUM
) {

97 
s•_p‹t
 = 
SSP0
;

99 
s•_p‹t
 = 
SSP1
;

102 (
	`SSP_SR
(
s•_p‹t
Ë& 
SSP_SR_BSY
));

103 
	}
}

106 
uöt16_t
 
	$s•_å™s„r
(
s•_num_t
 
s•_num
, 
uöt16_t
 
d©a
)

108 
uöt32_t
 
s•_p‹t
;

110 i‡(
s•_num
 =
SSP0_NUM
) {

111 
s•_p‹t
 = 
SSP0
;

113 
s•_p‹t
 = 
SSP1
;

117 (
	`SSP_SR
(
s•_p‹t
Ë& 
SSP_SR_TNF
) == 0);

119 
	`SSP_DR
(
s•_p‹t
Ë
d©a
;

130 
	`s•_waô_u¡û_nŸ_busy
(
s•_num
);

133 (
	`SSP_SR
(
s•_p‹t
Ë& 
SSP_SR_RNE
) == 0);

135  
	`SSP_DR
(
s•_p‹t
);

136 
	}
}

	@libopencm3/lib/lpc43xx/timer.c

23 
	~<lib›ícm3/Õc43xx/timî.h
>

25 
	$timî_ª£t
(
uöt32_t
 
timî_≥rùhîÆ
)

27 
	`TIMER_TCR
(
timî_≥rùhîÆ
Ë|
TIMER_TCR_CRST
;

28 
	`TIMER_TCR
(
timî_≥rùhîÆ
Ë&~
TIMER_TCR_CRST
;

29 
	}
}

31 
	$timî_íabÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
)

33 
	`TIMER_TCR
(
timî_≥rùhîÆ
Ë|
TIMER_TCR_CEN
;

34 
	}
}

36 
	$timî_dißbÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
)

38 
	`TIMER_TCR
(
timî_≥rùhîÆ
Ë&~
TIMER_TCR_CEN
;

39 
	}
}

41 
	$timî_£t_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
cou¡
)

43 
	`TIMER_TC
(
timî_≥rùhîÆ
Ë
cou¡
;

44 
	}
}

46 
uöt32_t
 
	$timî_gë_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
)

48  
	`TIMER_TC
(
timî_≥rùhîÆ
);

49 
	}
}

51 
uöt32_t
 
	$timî_gë_¥esˇÀr
(
uöt32_t
 
timî_≥rùhîÆ
)

53  
	`TIMER_PR
(
timî_≥rùhîÆ
);

54 
	}
}

56 
	$timî_£t_¥esˇÀr
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
¥esˇÀr
)

58 
	`TIMER_PR
(
timî_≥rùhîÆ
Ë
¥esˇÀr
;

59 
	}
}

61 
	$timî_£t_mode
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
mode
)

63 
	`TIMER_CTCR
(
timî_≥rùhîÆ
Ë
mode
 |

64 (
	`TIMER_CTCR
(
timî_≥rùhîÆ
Ë& 
TIMER_CTCR_MODE_MASK
);

65 
	}
}

67 
	$timî_£t_cou¡_öput
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
öput
)

69 
	`TIMER_CTCR
(
timî_≥rùhîÆ
Ë
öput
 |

70 (
	`TIMER_CTCR
(
timî_≥rùhîÆ
Ë& 
TIMER_CTCR_CINSEL_MASK
);

71 
	}
}

	@libopencm3/lib/lpc43xx/uart.c

20 
	~<lib›ícm3/Õc43xx/u¨t.h
>

21 
	~<lib›ícm3/Õc43xx/cgu.h
>

23 
	#UART_SRC_32K
 0x00

	)

24 
	#UART_SRC_IRC
 0x01

	)

25 
	#UART_SRC_ENET_RX
 0x02

	)

26 
	#UART_SRC_ENET_TX
 0x03

	)

27 
	#UART_SRC_GP_CLKIN
 0x04

	)

28 
	#UART_SRC_XTAL
 0x06

	)

29 
	#UART_SRC_PLL0USB
 0x07

	)

30 
	#UART_SRC_PLL0AUDIO
 0x08

	)

31 
	#UART_SRC_PLL1
 0x09

	)

32 
	#UART_SRC_IDIVA
 0x0C

	)

33 
	#UART_SRC_IDIVB
 0x0D

	)

34 
	#UART_SRC_IDIVC
 0x0E

	)

35 
	#UART_SRC_IDIVD
 0x0F

	)

36 
	#UART_SRC_IDIVE
 0x10

	)

38 
	#UART_CGU_AUTOBLOCK_CLOCK_BIT
 11

	)

40 
	#UART_CGU_BASE_CLK_SEL_SHIFT
 24

	)

42 
uöt32_t
 
	gdummy_ªad
;

47 
	$u¨t_öô
(
u¨t_num_t
 
u¨t_num
, 
u¨t_d©abô_t
 
d©a_nb_bôs
,

48 
u¨t_°›bô_t
 
d©a_nb_°›
, 
u¨t_∑rôy_t
 
d©a_∑rôy
,

49 
uöt16_t
 
u¨t_divis‹
, 
uöt8_t
 
u¨t_divaddvÆ
, uöt8_à
u¨t_mulvÆ
)

51 
uöt32_t
 
l¸_c⁄fig
;

52 
uöt32_t
 
u¨t_p‹t
;

54 
u¨t_p‹t
 = 
u¨t_num
;

56 
u¨t_num
) {

57 
UART0_NUM
:

59 
CGU_BASE_UART0_CLK
 = (1<<
UART_CGU_AUTOBLOCK_CLOCK_BIT
) |

60 (
CGU_SRC_PLL1
<<
UART_CGU_BASE_CLK_SEL_SHIFT
);

63 
UART1_NUM
:

65 
CGU_BASE_UART1_CLK
 = (1<<
UART_CGU_AUTOBLOCK_CLOCK_BIT
) |

66 (
CGU_SRC_PLL1
<<
UART_CGU_BASE_CLK_SEL_SHIFT
);

69 
UART2_NUM
:

71 
CGU_BASE_UART2_CLK
 = (1<<
UART_CGU_AUTOBLOCK_CLOCK_BIT
) |

72 (
CGU_SRC_PLL1
<<
UART_CGU_BASE_CLK_SEL_SHIFT
);

75 
UART3_NUM
:

77 
CGU_BASE_UART3_CLK
 = (1<<
UART_CGU_AUTOBLOCK_CLOCK_BIT
) |

78 (
CGU_SRC_PLL1
<<
UART_CGU_BASE_CLK_SEL_SHIFT
);

86 
	`UART_FCR
(
u¨t_p‹t
Ë(
UART_FCR_FIFO_EN
 | 
UART_FCR_RX_RS
 |

87 
UART_FCR_TX_RS
);

89 
	`UART_FCR
(
u¨t_p‹t
) = 0;

92 
	`UART_LSR
(
u¨t_p‹t
Ë& 
UART_LSR_RDR
) {

93 
dummy_ªad
 = 
	`UART_RBR
(
u¨t_p‹t
);

97 
	`UART_TER
(
u¨t_p‹t
Ë
UART_TER_TXEN
;

100 !(
	`UART_LSR
(
u¨t_p‹t
Ë& 
UART_LSR_THRE
));

103 
	`UART_TER
(
u¨t_p‹t
) = 0;

106 
	`UART_IER
(
u¨t_p‹t
) = 0;

109 
	`UART_LCR
(
u¨t_p‹t
) = 0;

112 
	`UART_ACR
(
u¨t_p‹t
) = 0;

115 
dummy_ªad
 = 
	`UART_LSR
(
u¨t_p‹t
);

128 
	`UART_LCR
(
u¨t_p‹t
Ë|
UART_LCR_DLAB_EN
;

129 
	`UART_DLM
(
u¨t_p‹t
Ë
	`UART_LOAD_DLM
(
u¨t_divis‹
);

130 
	`UART_DLL
(
u¨t_p‹t
Ë
	`UART_LOAD_DLL
(
u¨t_divis‹
);

132 
	`UART_LCR
(
u¨t_p‹t
Ë&(~
UART_LCR_DLAB_EN
Ë& 
UART_LCR_BITMASK
;

133 
	`UART_FDR
(
u¨t_p‹t
Ë
UART_FDR_BITMASK
 &

134 (
	`UART_FDR_MULVAL
(
u¨t_mulvÆ
Ë| 
	`UART_FDR_DIVADDVAL
(
u¨t_divaddvÆ
));

137 
l¸_c⁄fig
 = (
	`UART_LCR
(
u¨t_p‹t
Ë& 
UART_LCR_DLAB_EN
) &

138 
UART_LCR_BITMASK
;

139 
l¸_c⁄fig
 |
d©a_nb_bôs
;

140 
l¸_c⁄fig
 |
d©a_nb_°›
;

141 
l¸_c⁄fig
 |
d©a_∑rôy
;

144 
	`UART_LCR
(
u¨t_p‹t
Ë(
l¸_c⁄fig
 & 
UART_LCR_BITMASK
);

147 
	`UART_TER
(
u¨t_p‹t
Ë
UART_TER_TXEN
;

148 
	}
}

153 
u¨t_rx_d©a_ªady_t
 
	$u¨t_rx_d©a_ªady
(
u¨t_num_t
 
u¨t_num
)

155 
uöt32_t
 
u¨t_p‹t
;

156 
uöt8_t
 
u¨t_°©us
;

157 
u¨t_rx_d©a_ªady_t
 
d©a_ªady
;

159 
u¨t_p‹t
 = 
u¨t_num
;

161 
u¨t_°©us
 = 
	`UART_LSR
(
u¨t_p‹t
) & 0xFF;

164 i‡((
u¨t_°©us
 & 
UART_LSR_ERROR_MASK
) == 0) {

166 i‡((
u¨t_°©us
 & 
UART_LSR_RDR
) == 0) {

167 
d©a_ªady
 = 
UART_RX_NO_DATA
;

169 
d©a_ªady
 = 
UART_RX_DATA_READY
;

173 
d©a_ªady
 = 
UART_RX_DATA_ERROR
;

176  
d©a_ªady
;

177 
	}
}

182 
uöt8_t
 
	$u¨t_ªad
(
u¨t_num_t
 
u¨t_num
)

184 
uöt32_t
 
u¨t_p‹t
;

185 
uöt8_t
 
u¨t_vÆ
;

187 
u¨t_p‹t
 = 
u¨t_num
;

190 (
	`UART_LSR
(
u¨t_p‹t
Ë& 
UART_LSR_RDR
) == 0);

192 
u¨t_vÆ
 = (
	`UART_RBR
(
u¨t_p‹t
Ë& 
UART_RBR_MASKBIT
);

194  
u¨t_vÆ
;

195 
	}
}

200 
uöt8_t
 
	$u¨t_ªad_timeout
(
u¨t_num_t
 
u¨t_num
, 
uöt32_t
 
rx_timeout_nb_cy˛es
,

201 
u¨t_îr‹_t
 *
îr‹
)

203 
uöt32_t
 
u¨t_p‹t
;

204 
uöt8_t
 
u¨t_vÆ
;

205 
uöt32_t
 
cou¡î
;

207 
u¨t_p‹t
 = 
u¨t_num
;

210 
cou¡î
 = 0;

211 (
	`UART_LSR
(
u¨t_p‹t
Ë& 
UART_LSR_RDR
) == 0) {

212 i‡(
rx_timeout_nb_cy˛es
 > 0) {

213 
cou¡î
++;

214 i‡(
cou¡î
 >
rx_timeout_nb_cy˛es
) {

215 *
îr‹
 = 
UART_TIMEOUT_ERROR
;

221 
u¨t_vÆ
 = (
	`UART_RBR
(
u¨t_p‹t
Ë& 
UART_RBR_MASKBIT
);

224 *
îr‹
 = 
UART_NO_ERROR
;

226  
u¨t_vÆ
;

227 
	}
}

232 
	$u¨t_wrôe
(
u¨t_num_t
 
u¨t_num
, 
uöt8_t
 
d©a
)

234 
uöt32_t
 
u¨t_p‹t
;

236 
u¨t_p‹t
 = 
u¨t_num
;

239 (
	`UART_LSR
(
u¨t_p‹t
Ë& 
UART_LSR_THRE
) == 0);

241 
	`UART_THR
(
u¨t_p‹t
Ë
d©a
;

242 
	}
}

	@libopencm3/lib/sam/3a/vector_nvic.c

15 #¥agm®
wók
 
supc_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
r°c_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πt_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
wdt_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
pmc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
ìfc0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
ìfc1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
u¨t_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
smc_sdømc_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
sdømc_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
piﬂ_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
piob_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
pioc_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
piod_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
pi€_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
piof_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
ußπ0_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
hsmci_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
twi0_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
twi1_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
•i0_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
ssc_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tc0_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tc1_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
tc2_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
tc3_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
tc4_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
tc5_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
tc6_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
tc7_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
tc8_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
pwm_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
adc_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
dacc_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
dmac_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
uŸghs_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
ång_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
ª£rved0_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
ˇn0_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
ˇn1_i§
 = 
blockög_h™dÀr


68 
	#IRQ_HANDLERS
 \

69 [
NVIC_SUPC_IRQ
] = 
supc_i§
, \

70 [
NVIC_RSTC_IRQ
] = 
r°c_i§
, \

71 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

72 [
NVIC_RTT_IRQ
] = 
πt_i§
, \

73 [
NVIC_WDT_IRQ
] = 
wdt_i§
, \

74 [
NVIC_PMC_IRQ
] = 
pmc_i§
, \

75 [
NVIC_EEFC0_IRQ
] = 
ìfc0_i§
, \

76 [
NVIC_EEFC1_IRQ
] = 
ìfc1_i§
, \

77 [
NVIC_UART_IRQ
] = 
u¨t_i§
, \

78 [
NVIC_SMC_SDRAMC_IRQ
] = 
smc_sdømc_i§
, \

79 [
NVIC_SDRAMC_IRQ
] = 
sdømc_i§
, \

80 [
NVIC_PIOA_IRQ
] = 
piﬂ_i§
, \

81 [
NVIC_PIOB_IRQ
] = 
piob_i§
, \

82 [
NVIC_PIOC_IRQ
] = 
pioc_i§
, \

83 [
NVIC_PIOD_IRQ
] = 
piod_i§
, \

84 [
NVIC_PIOE_IRQ
] = 
pi€_i§
, \

85 [
NVIC_PIOF_IRQ
] = 
piof_i§
, \

86 [
NVIC_USART0_IRQ
] = 
ußπ0_i§
, \

87 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

88 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

89 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

90 [
NVIC_HSMCI_IRQ
] = 
hsmci_i§
, \

91 [
NVIC_TWI0_IRQ
] = 
twi0_i§
, \

92 [
NVIC_TWI1_IRQ
] = 
twi1_i§
, \

93 [
NVIC_SPI0_IRQ
] = 
•i0_i§
, \

94 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

95 [
NVIC_SSC_IRQ
] = 
ssc_i§
, \

96 [
NVIC_TC0_IRQ
] = 
tc0_i§
, \

97 [
NVIC_TC1_IRQ
] = 
tc1_i§
, \

98 [
NVIC_TC2_IRQ
] = 
tc2_i§
, \

99 [
NVIC_TC3_IRQ
] = 
tc3_i§
, \

100 [
NVIC_TC4_IRQ
] = 
tc4_i§
, \

101 [
NVIC_TC5_IRQ
] = 
tc5_i§
, \

102 [
NVIC_TC6_IRQ
] = 
tc6_i§
, \

103 [
NVIC_TC7_IRQ
] = 
tc7_i§
, \

104 [
NVIC_TC8_IRQ
] = 
tc8_i§
, \

105 [
NVIC_PWM_IRQ
] = 
pwm_i§
, \

106 [
NVIC_ADC_IRQ
] = 
adc_i§
, \

107 [
NVIC_DACC_IRQ
] = 
dacc_i§
, \

108 [
NVIC_DMAC_IRQ
] = 
dmac_i§
, \

109 [
NVIC_UOTGHS_IRQ
] = 
uŸghs_i§
, \

110 [
NVIC_TRNG_IRQ
] = 
ång_i§
, \

111 [
NVIC_RESERVED0_IRQ
] = 
ª£rved0_i§
, \

112 [
NVIC_CAN0_IRQ
] = 
ˇn0_i§
, \

113 [
NVIC_CAN1_IRQ
] = 
ˇn1_i§


	)

	@libopencm3/lib/sam/3n/vector_nvic.c

15 #¥agm®
wók
 
supc_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
r°c_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πt_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
wdt_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
pmc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
ìfc_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
ª£rved0_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
u¨t0_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
u¨t1_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
ª£rved1_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
piﬂ_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
piob_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
pioc_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
ußπ0_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
ª£rved2_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
ª£rved3_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
ª£rved4_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
twi0_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
twi1_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
•i_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
ª£rved5_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
tc0_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
tc1_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
tc2_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
tc3_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tc4_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tc5_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
adc_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
dacc_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
pwm_i§
 = 
blockög_h™dÀr


55 
	#IRQ_HANDLERS
 \

56 [
NVIC_SUPC_IRQ
] = 
supc_i§
, \

57 [
NVIC_RSTC_IRQ
] = 
r°c_i§
, \

58 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

59 [
NVIC_RTT_IRQ
] = 
πt_i§
, \

60 [
NVIC_WDT_IRQ
] = 
wdt_i§
, \

61 [
NVIC_PMC_IRQ
] = 
pmc_i§
, \

62 [
NVIC_EEFC_IRQ
] = 
ìfc_i§
, \

63 [
NVIC_RESERVED0_IRQ
] = 
ª£rved0_i§
, \

64 [
NVIC_UART0_IRQ
] = 
u¨t0_i§
, \

65 [
NVIC_UART1_IRQ
] = 
u¨t1_i§
, \

66 [
NVIC_RESERVED1_IRQ
] = 
ª£rved1_i§
, \

67 [
NVIC_PIOA_IRQ
] = 
piﬂ_i§
, \

68 [
NVIC_PIOB_IRQ
] = 
piob_i§
, \

69 [
NVIC_PIOC_IRQ
] = 
pioc_i§
, \

70 [
NVIC_USART0_IRQ
] = 
ußπ0_i§
, \

71 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

72 [
NVIC_RESERVED2_IRQ
] = 
ª£rved2_i§
, \

73 [
NVIC_RESERVED3_IRQ
] = 
ª£rved3_i§
, \

74 [
NVIC_RESERVED4_IRQ
] = 
ª£rved4_i§
, \

75 [
NVIC_TWI0_IRQ
] = 
twi0_i§
, \

76 [
NVIC_TWI1_IRQ
] = 
twi1_i§
, \

77 [
NVIC_SPI_IRQ
] = 
•i_i§
, \

78 [
NVIC_RESERVED5_IRQ
] = 
ª£rved5_i§
, \

79 [
NVIC_TC0_IRQ
] = 
tc0_i§
, \

80 [
NVIC_TC1_IRQ
] = 
tc1_i§
, \

81 [
NVIC_TC2_IRQ
] = 
tc2_i§
, \

82 [
NVIC_TC3_IRQ
] = 
tc3_i§
, \

83 [
NVIC_TC4_IRQ
] = 
tc4_i§
, \

84 [
NVIC_TC5_IRQ
] = 
tc5_i§
, \

85 [
NVIC_ADC_IRQ
] = 
adc_i§
, \

86 [
NVIC_DACC_IRQ
] = 
dacc_i§
, \

87 [
NVIC_PWM_IRQ
] = 
pwm_i§


	)

	@libopencm3/lib/sam/3s/vector_nvic.c

15 #¥agm®
wók
 
supc_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
r°c_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πt_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
wdt_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
pmc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
ìfc_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
ª£rved0_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
u¨t0_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
u¨t1_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
smc_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
piﬂ_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
piob_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
pioc_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
ußπ0_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
ª£rved1_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
hsmci_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
twi0_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
twi1_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
•i_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
ssc_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
tc0_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
tc1_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
tc2_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
tc3_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tc4_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tc5_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
adc_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
dacc_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
pwm_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
¸ccu_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
acc_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
udp_i§
 = 
blockög_h™dÀr


58 
	#IRQ_HANDLERS
 \

59 [
NVIC_SUPC_IRQ
] = 
supc_i§
, \

60 [
NVIC_RSTC_IRQ
] = 
r°c_i§
, \

61 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

62 [
NVIC_RTT_IRQ
] = 
πt_i§
, \

63 [
NVIC_WDT_IRQ
] = 
wdt_i§
, \

64 [
NVIC_PMC_IRQ
] = 
pmc_i§
, \

65 [
NVIC_EEFC_IRQ
] = 
ìfc_i§
, \

66 [
NVIC_RESERVED0_IRQ
] = 
ª£rved0_i§
, \

67 [
NVIC_UART0_IRQ
] = 
u¨t0_i§
, \

68 [
NVIC_UART1_IRQ
] = 
u¨t1_i§
, \

69 [
NVIC_SMC_IRQ
] = 
smc_i§
, \

70 [
NVIC_PIOA_IRQ
] = 
piﬂ_i§
, \

71 [
NVIC_PIOB_IRQ
] = 
piob_i§
, \

72 [
NVIC_PIOC_IRQ
] = 
pioc_i§
, \

73 [
NVIC_USART0_IRQ
] = 
ußπ0_i§
, \

74 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

75 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

76 [
NVIC_RESERVED1_IRQ
] = 
ª£rved1_i§
, \

77 [
NVIC_HSMCI_IRQ
] = 
hsmci_i§
, \

78 [
NVIC_TWI0_IRQ
] = 
twi0_i§
, \

79 [
NVIC_TWI1_IRQ
] = 
twi1_i§
, \

80 [
NVIC_SPI_IRQ
] = 
•i_i§
, \

81 [
NVIC_SSC_IRQ
] = 
ssc_i§
, \

82 [
NVIC_TC0_IRQ
] = 
tc0_i§
, \

83 [
NVIC_TC1_IRQ
] = 
tc1_i§
, \

84 [
NVIC_TC2_IRQ
] = 
tc2_i§
, \

85 [
NVIC_TC3_IRQ
] = 
tc3_i§
, \

86 [
NVIC_TC4_IRQ
] = 
tc4_i§
, \

87 [
NVIC_TC5_IRQ
] = 
tc5_i§
, \

88 [
NVIC_ADC_IRQ
] = 
adc_i§
, \

89 [
NVIC_DACC_IRQ
] = 
dacc_i§
, \

90 [
NVIC_PWM_IRQ
] = 
pwm_i§
, \

91 [
NVIC_CRCCU_IRQ
] = 
¸ccu_i§
, \

92 [
NVIC_ACC_IRQ
] = 
acc_i§
, \

93 [
NVIC_UDP_IRQ
] = 
udp_i§


	)

	@libopencm3/lib/sam/3u/vector_nvic.c

15 #¥agm®
wók
 
supc_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
r°c_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πt_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
wdt_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
pmc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
ìfc0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
ìfc1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
u¨t_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
smc_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
piﬂ_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
piob_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
pioc_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
ußπ0_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
hsmci_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
twi0_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
twi1_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
•i_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
ssc_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
tc0_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
tc1_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
tc2_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
pwm_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
adc12b_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
adc_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
dmac_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
udphs_i§
 = 
blockög_h™dÀr


53 
	#IRQ_HANDLERS
 \

54 [
NVIC_SUPC_IRQ
] = 
supc_i§
, \

55 [
NVIC_RSTC_IRQ
] = 
r°c_i§
, \

56 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

57 [
NVIC_RTT_IRQ
] = 
πt_i§
, \

58 [
NVIC_WDT_IRQ
] = 
wdt_i§
, \

59 [
NVIC_PMC_IRQ
] = 
pmc_i§
, \

60 [
NVIC_EEFC0_IRQ
] = 
ìfc0_i§
, \

61 [
NVIC_EEFC1_IRQ
] = 
ìfc1_i§
, \

62 [
NVIC_UART_IRQ
] = 
u¨t_i§
, \

63 [
NVIC_SMC_IRQ
] = 
smc_i§
, \

64 [
NVIC_PIOA_IRQ
] = 
piﬂ_i§
, \

65 [
NVIC_PIOB_IRQ
] = 
piob_i§
, \

66 [
NVIC_PIOC_IRQ
] = 
pioc_i§
, \

67 [
NVIC_USART0_IRQ
] = 
ußπ0_i§
, \

68 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

69 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

70 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

71 [
NVIC_HSMCI_IRQ
] = 
hsmci_i§
, \

72 [
NVIC_TWI0_IRQ
] = 
twi0_i§
, \

73 [
NVIC_TWI1_IRQ
] = 
twi1_i§
, \

74 [
NVIC_SPI_IRQ
] = 
•i_i§
, \

75 [
NVIC_SSC_IRQ
] = 
ssc_i§
, \

76 [
NVIC_TC0_IRQ
] = 
tc0_i§
, \

77 [
NVIC_TC1_IRQ
] = 
tc1_i§
, \

78 [
NVIC_TC2_IRQ
] = 
tc2_i§
, \

79 [
NVIC_PWM_IRQ
] = 
pwm_i§
, \

80 [
NVIC_ADC12B_IRQ
] = 
adc12b_i§
, \

81 [
NVIC_ADC_IRQ
] = 
adc_i§
, \

82 [
NVIC_DMAC_IRQ
] = 
dmac_i§
, \

83 [
NVIC_UDPHS_IRQ
] = 
udphs_i§


	)

	@libopencm3/lib/sam/3x/vector_nvic.c

15 #¥agm®
wók
 
supc_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
r°c_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πt_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
wdt_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
pmc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
ìfc0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
ìfc1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
u¨t_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
smc_sdømc_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
sdømc_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
piﬂ_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
piob_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
pioc_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
piod_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
pi€_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
piof_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
ußπ0_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
hsmci_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
twi0_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
twi1_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
•i0_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
ssc_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tc0_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tc1_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
tc2_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
tc3_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
tc4_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
tc5_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
tc6_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
tc7_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
tc8_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
pwm_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
adc_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
dacc_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
dmac_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
uŸghs_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
ång_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
emac_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
ˇn0_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
ˇn1_i§
 = 
blockög_h™dÀr


68 
	#IRQ_HANDLERS
 \

69 [
NVIC_SUPC_IRQ
] = 
supc_i§
, \

70 [
NVIC_RSTC_IRQ
] = 
r°c_i§
, \

71 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

72 [
NVIC_RTT_IRQ
] = 
πt_i§
, \

73 [
NVIC_WDT_IRQ
] = 
wdt_i§
, \

74 [
NVIC_PMC_IRQ
] = 
pmc_i§
, \

75 [
NVIC_EEFC0_IRQ
] = 
ìfc0_i§
, \

76 [
NVIC_EEFC1_IRQ
] = 
ìfc1_i§
, \

77 [
NVIC_UART_IRQ
] = 
u¨t_i§
, \

78 [
NVIC_SMC_SDRAMC_IRQ
] = 
smc_sdømc_i§
, \

79 [
NVIC_SDRAMC_IRQ
] = 
sdømc_i§
, \

80 [
NVIC_PIOA_IRQ
] = 
piﬂ_i§
, \

81 [
NVIC_PIOB_IRQ
] = 
piob_i§
, \

82 [
NVIC_PIOC_IRQ
] = 
pioc_i§
, \

83 [
NVIC_PIOD_IRQ
] = 
piod_i§
, \

84 [
NVIC_PIOE_IRQ
] = 
pi€_i§
, \

85 [
NVIC_PIOF_IRQ
] = 
piof_i§
, \

86 [
NVIC_USART0_IRQ
] = 
ußπ0_i§
, \

87 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

88 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

89 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

90 [
NVIC_HSMCI_IRQ
] = 
hsmci_i§
, \

91 [
NVIC_TWI0_IRQ
] = 
twi0_i§
, \

92 [
NVIC_TWI1_IRQ
] = 
twi1_i§
, \

93 [
NVIC_SPI0_IRQ
] = 
•i0_i§
, \

94 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

95 [
NVIC_SSC_IRQ
] = 
ssc_i§
, \

96 [
NVIC_TC0_IRQ
] = 
tc0_i§
, \

97 [
NVIC_TC1_IRQ
] = 
tc1_i§
, \

98 [
NVIC_TC2_IRQ
] = 
tc2_i§
, \

99 [
NVIC_TC3_IRQ
] = 
tc3_i§
, \

100 [
NVIC_TC4_IRQ
] = 
tc4_i§
, \

101 [
NVIC_TC5_IRQ
] = 
tc5_i§
, \

102 [
NVIC_TC6_IRQ
] = 
tc6_i§
, \

103 [
NVIC_TC7_IRQ
] = 
tc7_i§
, \

104 [
NVIC_TC8_IRQ
] = 
tc8_i§
, \

105 [
NVIC_PWM_IRQ
] = 
pwm_i§
, \

106 [
NVIC_ADC_IRQ
] = 
adc_i§
, \

107 [
NVIC_DACC_IRQ
] = 
dacc_i§
, \

108 [
NVIC_DMAC_IRQ
] = 
dmac_i§
, \

109 [
NVIC_UOTGHS_IRQ
] = 
uŸghs_i§
, \

110 [
NVIC_TRNG_IRQ
] = 
ång_i§
, \

111 [
NVIC_EMAC_IRQ
] = 
emac_i§
, \

112 [
NVIC_CAN0_IRQ
] = 
ˇn0_i§
, \

113 [
NVIC_CAN1_IRQ
] = 
ˇn1_i§


	)

	@libopencm3/lib/sam/4l/adcife.c

11 
	~<lib›ícm3/ßm/adci„.h
>

18 
	$adci„_íabÀ_sync
()

20 
ADCIFE_CR
 = 
ADCIFE_CR_EN
;

21 !(
ADCIFE_SR
 & 
ADCIFE_SR_EN
));

22 
	}
}

24 
	$adci„_c⁄figuª
(

25 
adci„_ªf£l
 
ªf
,

26 
adci„_•ìd
 
•ìd
,

27 
adci„_˛k
 
˛k
,

28 
adci„_¥esˇl
 
¥esˇl
)

30 
ADCIFE_CFG
 = 
	`ADCIFE_CFG_REFSEL_MASKED
(
ªf
)

31 | 
	`ADCIFE_CFG_SPEED_MASKED
(
•ìd
)

32 | 
	`ADCIFE_CFG_PRESCAL_MASKED
(
¥esˇl
)

33 | 
˛k
;

34 
	}
}

36 
	$adci„_£À˘_ch™√l
(
adci„_ch™√l
 
ad
)

38 
ADCIFE_SEQCFG
 |
	`ADCIFE_SEQCFG_MUXPOS_MASKED
(
ad
);

39 
	}
}

41 
	$adci„_£t_ªsﬁuti⁄
(
adci„_ªsﬁuti⁄
 
ªs
)

43 i‡(
ADCIFE_RESOLUTION_12BITS
 =
ªs
) {

44 
ADCIFE_SEQCFG
 &~
ADCIFE_SEQCFG_RES
;

46 
ADCIFE_SEQCFG
 |
ADCIFE_SEQCFG_RES
;

48 
	}
}

50 
	$adci„_£À˘_åiggî
(
adci„_åiggî
 
åig
)

52 
ADCIFE_SEQCFG
 &~
ADCIFE_SEQCFG_TRGSEL_MASK
;

53 
ADCIFE_SEQCFG
 |
	`ADCIFE_SEQCFG_TRGSEL_MASKED
(
åig
);

54 
	}
}

56 
	$adci„_£t_gaö
(
adci„_gaö
 
gaö
)

58 
ADCIFE_SEQCFG
 &~
ADCIFE_SEQCFG_GAIN_MASK
;

59 
ADCIFE_SEQCFG
 |
	`ADCIFE_SEQCFG_GAIN_MASKED
(
gaö
);

60 
	}
}

62 
	$adci„_£t_bùﬁ¨
(
boﬁ
 
íabÀ
)

64 i‡(
íabÀ
) {

65 
ADCIFE_SEQCFG
 |
ADCIFE_SEQCFG_BIPOLAR
;

67 
ADCIFE_SEQCFG
 &~
ADCIFE_SEQCFG_BIPOLAR
;

69 
	}
}

71 
	$adci„_£t_À·_adju°
(
boﬁ
 
íabÀ
)

73 i‡(
íabÀ
) {

74 
ADCIFE_SEQCFG
 |
ADCIFE_SEQCFG_HWLA
;

76 
ADCIFE_SEQCFG
 &~
ADCIFE_SEQCFG_HWLA
;

78 
	}
}

80 
	$adci„_°¨t_c⁄vîsi⁄
()

82 
ADCIFE_CR
 = 
ADCIFE_CR_STRIG
;

83 
	}
}

85 
	$adci„_waô_c⁄vîsi⁄
()

87 !(
ADCIFE_SR
 & 
ADCIFE_SR_SEOC
));

88 
ADCIFE_SCR
 = 
ADCIFE_SR_SEOC
;

89 
	}
}

91 
adci„_lcv
 
	$adci„_gë_lcv
()

93 
adci„_lcv
 
ªs
;

94 
ªs
.
_lc_u
.
lcv
 = 
ADCIFE_LCV
;

95  
ªs
;

96 
	}
}

98 
	$adci„_íabÀ_öãºu±s
(
uöt32_t
 
imask
)

100 
ADCIFE_IER
 = 
imask
;

101 
	}
}

103 
	$adci„_dißbÀ_öãºu±s
(
uöt32_t
 
imask
)

105 
ADCIFE_IDR
 = 
imask
;

106 
	}
}

108 
	$adci„_timî_°¨t
()

110 
ADCIFE_CR
 = 
ADCIFE_CR_TSTART
;

111 
	}
}

113 
	$adci„_timî_°›
()

115 
ADCIFE_CR
 = 
ADCIFE_CR_TSTOP
;

116 
	}
}

118 
	$adci„_timî_£t_timeout
(
uöt16_t
 
timeout
)

120 
ADCIFE_TIM
 = 
timeout
;

121 
	}
}

	@libopencm3/lib/sam/4l/gpio.c

31 
	~<lib›ícm3/ßm/gpio.h
>

38 
	$gpio_£t
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

40 
	`GPIO_OVRS
(
gpi›‹t
Ë
gpios
;

41 
	}
}

48 
	$gpio_˛ór
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

50 
	`GPIO_OVRC
(
gpi›‹t
Ë
gpios
;

51 
	}
}

58 
	$gpio_toggÀ
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

60 
	`GPIO_OVRT
(
gpi›‹t
Ë
gpios
;

61 
	}
}

72 
	$gpio_íabÀ
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
, 
gpio_mode
 
mode
)

74 i‡(
mode
 < 
GPIO_MODE_IN
) {

75 
	`GPIO_GPERC
(
gpi›‹t
Ë
gpios
;

76 
uöt8_t
 
i
 = 0;

77 ; 
i
 < 3; ++i, 
mode
 >>= 1) {

78 
	`GPIO_PMR_SETVAL
(
gpi›‹t
, 
i
, 
mode
 & 1Ë
gpios
;

80 } i‡(
mode
 =
GPIO_MODE_OUT
) {

81 
	`GPIO_GPERS
(
gpi›‹t
Ë
gpios
;

82 
	`GPIO_ODERS
(
gpi›‹t
Ë
gpios
;

83 } i‡(
mode
 =
GPIO_MODE_IN
) {

84 
	`GPIO_GPERS
(
gpi›‹t
Ë
gpios
;

85 
	`GPIO_ODERC
(
gpi›‹t
Ë
gpios
;

87 
	}
}

97 
	$gpio_dißbÀ
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

99 
	`GPIO_GPERC
(
gpi›‹t
Ë
gpios
;

100 
	}
}

	@libopencm3/lib/sam/4l/pm.c

28 
	~<lib›ícm3/ßm/pm.h
>

30 
	$pm_£À˘_maö_˛ock
(
mck_§c
 
sour˚_˛ock
)

32 
PM_UNLOCK
 = 
PM_MCCTRL_KEY
;

33 
PM_MCCTRL
 = ((
sour˚_˛ock
 & 
PM_MCCTRL_MCSEL_MASK
Ë<< 
PM_MCCTRL_MCSEL_SHIFT
);

34 !(
PM_SR
 & 
PM_SR_CKRDY
));

35 
	}
}

37 
	$pm_íabÀ_˛ock_div
(
pm_ck£l
 
£l_èrgë
, 
uöt8_t
 
div
)

39 !(
PM_SR
 & 
PM_SR_CKRDY
));

40 
uöt32_t
 
ªg
 = (
PM_CKSEL_DIV
 | (
div
 & 
PM_CKSEL_MASK
));

42 
PM_UNLOCK
 = 
	`PM_CKSEL_KEY
(
£l_èrgë
);

43 
	`PM_CKSEL
(
£l_èrgë
Ë
ªg
;

44 !(
PM_SR
 & 
PM_SR_CKRDY
));

45 
	}
}

47 
	$pm_£t_divmask_˛ock
(
uöt8_t
 
mask
)

49 
PM_UNLOCK
 = 
PM_PBADIVMASK_KEY
;

50 
PM_PBADIVMASK
 = 
mask
;

51 
	}
}

53 
	$£t_≥rùhîÆ_˛ock_°©us
(
pm_≥rùhîÆ
 
≥rùh
, 
boﬁ
 
⁄
)

55 
uöt8_t
 
ªg_id
 = 
≥rùh
/32;

56 
uöt8_t
 
bô_off£t
 = 
≥rùh
 % 32;

57 
uöt32_t
 
ªg_mask
 = 
	`PM_MASK
(
ªg_id
);

58 i‡(
⁄
) {

59 
ªg_mask
 |(1 << 
bô_off£t
);

61 
ªg_mask
 &~(1 << 
bô_off£t
);

63 
PM_UNLOCK
 = 
	`PM_MASK_KEY
(
ªg_id
);

64 
	`PM_MASK
(
ªg_id
Ë
ªg_mask
;

65 
	}
}

67 
	$pm_íabÀ_≥rùhîÆ_˛ock
(
pm_≥rùhîÆ
 
≥rùh
)

69 
	`£t_≥rùhîÆ_˛ock_°©us
(
≥rùh
, 
åue
);

70 
	}
}

72 
	$pm_dißbÀ_≥rùhîÆ_˛ock
(
pm_≥rùhîÆ
 
≥rùh
)

74 
	`£t_≥rùhîÆ_˛ock_°©us
(
≥rùh
, 
Ál£
);

75 
	}
}

	@libopencm3/lib/sam/4l/scif.c

28 
	~<lib›ícm3/ßm/scif.h
>

38 
	$scif_osc_íabÀ
(
osc_mode
 
mode
, 
uöt32_t
 
‰eq
, 
osc_°¨tup
 
°¨tup
)

40 
uöt8_t
 
gaö
;

41 c⁄° 
uöt32_t
 
kHz
 = 1000;

42 c⁄° 
uöt32_t
 
MHz
 = 1000 * 
kHz
;

44 i‡(
‰eq
 > 600 * 
kHz
 && fªq <2 * 
MHz
) {

45 
gaö
 = 0;

46 } i‡(
‰eq
 > 2 * 
MHz
 && freq <= 4 * MHz) {

47 
gaö
 = 1;

48 } i‡(
‰eq
 > 4 * 
MHz
 && freq <= 8 * MHz) {

49 
gaö
 = 2;

50 } i‡(
‰eq
 > 8 * 
MHz
 && freq <= 16 * MHz) {

51 
gaö
 = 3;

52 } i‡(
‰eq
 > 16 * 
MHz
 && freq <= 30 * MHz) {

53 
gaö
 = 4;

58 
SCIF_UNLOCK
 = 
SCIF_OSCCTRL0_KEY
;

59 
SCIF_OSCCTRL0
 = 
mode
 | 
SCIF_OSCCTRL_OSCEN
 |

60 (
gaö
 << 
SCIF_OSCCTRL_GAIN_SHIFT
Ë| (
°¨tup
 << 
SCIF_OSCCTRL_STARTUP_SHIFT
);

62 !(
SCIF_PCLKSR
 & 
SCIF_OSC0RDY
));

64 
	}
}

83 
	$scif_íabÀ_∂l
(
uöt8_t
 
dñay
, uöt8_à
mul
, uöt8_à
div
, uöt8_à
∂l_›t
, 
∂l_˛k_§c
 
sour˚_˛ock
)

87 
uöt32_t
 
∂l_vÆ
 = 
SCIF_PLL0
;

88 i‡(
∂l_vÆ
 & 
SCIF_PLL0_PLLEN
) {

89 
SCIF_UNLOCK
 = 
SCIF_PLL0_KEY
;

90 
SCIF_PLL0
 = 
∂l_vÆ
 & (~
SCIF_PLL0_PLLEN
);

93 i‡(
mul
 == 0)

94 
mul
 = 1;

96 
∂l_vÆ
 = 
	`SCIF_PLL0_PLLOSC_MASKED
(
sour˚_˛ock
)

97 | 
	`SCIF_PLL0_PLLOPT_MASKED
(
∂l_›t
)

98 | 
	`SCIF_PLL0_PLLDIV_MASKED
(
div
)

99 | 
	`SCIF_PLL0_PLLMUL_MASKED
(
mul
)

100 | 
	`SCIF_PLL0_PLLCOUNT_MASKED
(
dñay
);

102 
SCIF_UNLOCK
 = 
SCIF_PLL0_KEY
;

103 
SCIF_PLL0
 = 
∂l_vÆ
;

106 
SCIF_UNLOCK
 = 
SCIF_PLL0_KEY
;

107 
SCIF_PLL0
 = 
∂l_vÆ
 | 
SCIF_PLL0_PLLEN
;

109 !(
SCIF_PCLKSR
 & 
SCIF_PLL0LOCK
));

112 
	}
}

121 
	$scif_íabÀ_g˛k
(
gíîic_˛ock
 
g˛k
, 
g˛k_§c
 
sour˚_˛ock
, 
uöt16_t
 
div
)

123 
uöt32_t
 
ªg_vÆ
 = 
SCIF_GCCTRL_CEN
 | 
	`SCIF_GCCTRL_OSCSEL_MASKED
(
sour˚_˛ock
);

124 i‡(
div
) {

125 i‡(
g˛k
 < 
GENERIC_CLOCK11
) {

126 
div
 &= 0xf;

129 
ªg_vÆ
 |
	`SCIF_GCCTRL_DIV_MASKED
(
div
Ë| 
SCIF_GCCTRL_DIVEN
;

132 
	`SCIF_GCTRL
(
g˛k
Ë
ªg_vÆ
;

133 
	}
}

	@libopencm3/lib/sam/4l/usart.c

20 
	~<lib›ícm3/ßm/ußπ.h
>

22 
	$ußπ_£t_baudøã
(
uöt32_t
 
ußπ
, uöt32_à
baud
)

24 
	`USART_BRGR
(
ußπ
Ë
baud
;

25 
	}
}

	@libopencm3/lib/sam/4l/vector_nvic.c

15 #¥agm®
wók
 
hÊashc_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pdˇ0_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
pdˇ1_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
pdˇ2_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
pdˇ3_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
pdˇ4_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
pdˇ5_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
pdˇ6_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
pdˇ7_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
pdˇ8_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
pdˇ9_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
pdˇ10_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
pdˇ11_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
pdˇ12_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
pdˇ13_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
pdˇ14_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
pdˇ15_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
¸ccu_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
usbc_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
≥vc_å_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
≥vc_ov_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
´ß_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
pm_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
scim_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
‰eqm_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
gpio0_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
gpio1_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
gpio2_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
gpio3_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
gpio4_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
gpio5_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
gpio6_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
gpio7_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
gpio8_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
gpio9_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
gpio10_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
gpio11_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
bpm_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
bscif_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
a°_Æ¨m_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
a°_≥r_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
a°_ovf_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
a°_ªady_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
a°_˛kªady_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
wdt_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
eic1_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
eic2_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
eic3_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
eic4_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
eic5_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
eic6_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
eic7_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
eic8_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
iisc_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
•i_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
tc00_i§
 = 
blockög_h™dÀr


71 #¥agm®
wók
 
tc01_i§
 = 
blockög_h™dÀr


72 #¥agm®
wók
 
tc02_i§
 = 
blockög_h™dÀr


73 #¥agm®
wók
 
tc10_i§
 = 
blockög_h™dÀr


74 #¥agm®
wók
 
tc11_i§
 = 
blockög_h™dÀr


75 #¥agm®
wók
 
tc12_i§
 = 
blockög_h™dÀr


76 #¥agm®
wók
 
twim0_i§
 = 
blockög_h™dÀr


77 #¥agm®
wók
 
twis0_i§
 = 
blockög_h™dÀr


78 #¥agm®
wók
 
twim1_i§
 = 
blockög_h™dÀr


79 #¥agm®
wók
 
twis1_i§
 = 
blockög_h™dÀr


80 #¥agm®
wók
 
ußπ0_i§
 = 
blockög_h™dÀr


81 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


82 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


83 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


84 #¥agm®
wók
 
adci„_i§
 = 
blockög_h™dÀr


85 #¥agm®
wók
 
dacc_i§
 = 
blockög_h™dÀr


86 #¥agm®
wók
 
acifc_i§
 = 
blockög_h™dÀr


87 #¥agm®
wók
 
abdacb_i§
 = 
blockög_h™dÀr


88 #¥agm®
wók
 
ång_i§
 = 
blockög_h™dÀr


89 #¥agm®
wók
 
∑rc_i§
 = 
blockög_h™dÀr


90 #¥agm®
wók
 
ˇtb_i§
 = 
blockög_h™dÀr


91 #¥agm®
wók
 
ª£rved0_i§
 = 
blockög_h™dÀr


92 #¥agm®
wók
 
twim2_i§
 = 
blockög_h™dÀr


93 #¥agm®
wók
 
twim3_i§
 = 
blockög_h™dÀr


94 #¥agm®
wók
 
lcdˇ_i§
 = 
blockög_h™dÀr


103 
	#IRQ_HANDLERS
 \

104 [
NVIC_HFLASHC_IRQ
] = 
hÊashc_i§
, \

105 [
NVIC_PDCA0_IRQ
] = 
pdˇ0_i§
, \

106 [
NVIC_PDCA1_IRQ
] = 
pdˇ1_i§
, \

107 [
NVIC_PDCA2_IRQ
] = 
pdˇ2_i§
, \

108 [
NVIC_PDCA3_IRQ
] = 
pdˇ3_i§
, \

109 [
NVIC_PDCA4_IRQ
] = 
pdˇ4_i§
, \

110 [
NVIC_PDCA5_IRQ
] = 
pdˇ5_i§
, \

111 [
NVIC_PDCA6_IRQ
] = 
pdˇ6_i§
, \

112 [
NVIC_PDCA7_IRQ
] = 
pdˇ7_i§
, \

113 [
NVIC_PDCA8_IRQ
] = 
pdˇ8_i§
, \

114 [
NVIC_PDCA9_IRQ
] = 
pdˇ9_i§
, \

115 [
NVIC_PDCA10_IRQ
] = 
pdˇ10_i§
, \

116 [
NVIC_PDCA11_IRQ
] = 
pdˇ11_i§
, \

117 [
NVIC_PDCA12_IRQ
] = 
pdˇ12_i§
, \

118 [
NVIC_PDCA13_IRQ
] = 
pdˇ13_i§
, \

119 [
NVIC_PDCA14_IRQ
] = 
pdˇ14_i§
, \

120 [
NVIC_PDCA15_IRQ
] = 
pdˇ15_i§
, \

121 [
NVIC_CRCCU_IRQ
] = 
¸ccu_i§
, \

122 [
NVIC_USBC_IRQ
] = 
usbc_i§
, \

123 [
NVIC_PEVC_TR_IRQ
] = 
≥vc_å_i§
, \

124 [
NVIC_PEVC_OV_IRQ
] = 
≥vc_ov_i§
, \

125 [
NVIC_AESA_IRQ
] = 
´ß_i§
, \

126 [
NVIC_PM_IRQ
] = 
pm_i§
, \

127 [
NVIC_SCIM_IRQ
] = 
scim_i§
, \

128 [
NVIC_FREQM_IRQ
] = 
‰eqm_i§
, \

129 [
NVIC_GPIO0_IRQ
] = 
gpio0_i§
, \

130 [
NVIC_GPIO1_IRQ
] = 
gpio1_i§
, \

131 [
NVIC_GPIO2_IRQ
] = 
gpio2_i§
, \

132 [
NVIC_GPIO3_IRQ
] = 
gpio3_i§
, \

133 [
NVIC_GPIO4_IRQ
] = 
gpio4_i§
, \

134 [
NVIC_GPIO5_IRQ
] = 
gpio5_i§
, \

135 [
NVIC_GPIO6_IRQ
] = 
gpio6_i§
, \

136 [
NVIC_GPIO7_IRQ
] = 
gpio7_i§
, \

137 [
NVIC_GPIO8_IRQ
] = 
gpio8_i§
, \

138 [
NVIC_GPIO9_IRQ
] = 
gpio9_i§
, \

139 [
NVIC_GPIO10_IRQ
] = 
gpio10_i§
, \

140 [
NVIC_GPIO11_IRQ
] = 
gpio11_i§
, \

141 [
NVIC_BPM_IRQ
] = 
bpm_i§
, \

142 [
NVIC_BSCIF_IRQ
] = 
bscif_i§
, \

143 [
NVIC_AST_ALARM_IRQ
] = 
a°_Æ¨m_i§
, \

144 [
NVIC_AST_PER_IRQ
] = 
a°_≥r_i§
, \

145 [
NVIC_AST_OVF_IRQ
] = 
a°_ovf_i§
, \

146 [
NVIC_AST_READY_IRQ
] = 
a°_ªady_i§
, \

147 [
NVIC_AST_CLKREADY_IRQ
] = 
a°_˛kªady_i§
, \

148 [
NVIC_WDT_IRQ
] = 
wdt_i§
, \

149 [
NVIC_EIC1_IRQ
] = 
eic1_i§
, \

150 [
NVIC_EIC2_IRQ
] = 
eic2_i§
, \

151 [
NVIC_EIC3_IRQ
] = 
eic3_i§
, \

152 [
NVIC_EIC4_IRQ
] = 
eic4_i§
, \

153 [
NVIC_EIC5_IRQ
] = 
eic5_i§
, \

154 [
NVIC_EIC6_IRQ
] = 
eic6_i§
, \

155 [
NVIC_EIC7_IRQ
] = 
eic7_i§
, \

156 [
NVIC_EIC8_IRQ
] = 
eic8_i§
, \

157 [
NVIC_IISC_IRQ
] = 
iisc_i§
, \

158 [
NVIC_SPI_IRQ
] = 
•i_i§
, \

159 [
NVIC_TC00_IRQ
] = 
tc00_i§
, \

160 [
NVIC_TC01_IRQ
] = 
tc01_i§
, \

161 [
NVIC_TC02_IRQ
] = 
tc02_i§
, \

162 [
NVIC_TC10_IRQ
] = 
tc10_i§
, \

163 [
NVIC_TC11_IRQ
] = 
tc11_i§
, \

164 [
NVIC_TC12_IRQ
] = 
tc12_i§
, \

165 [
NVIC_TWIM0_IRQ
] = 
twim0_i§
, \

166 [
NVIC_TWIS0_IRQ
] = 
twis0_i§
, \

167 [
NVIC_TWIM1_IRQ
] = 
twim1_i§
, \

168 [
NVIC_TWIS1_IRQ
] = 
twis1_i§
, \

169 [
NVIC_USART0_IRQ
] = 
ußπ0_i§
, \

170 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

171 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

172 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

173 [
NVIC_ADCIFE_IRQ
] = 
adci„_i§
, \

174 [
NVIC_DACC_IRQ
] = 
dacc_i§
, \

175 [
NVIC_ACIFC_IRQ
] = 
acifc_i§
, \

176 [
NVIC_ABDACB_IRQ
] = 
abdacb_i§
, \

177 [
NVIC_TRNG_IRQ
] = 
ång_i§
, \

178 [
NVIC_PARC_IRQ
] = 
∑rc_i§
, \

179 [
NVIC_CATB_IRQ
] = 
ˇtb_i§
, \

180 [
NVIC_RESERVED0_IRQ
] = 
ª£rved0_i§
, \

181 [
NVIC_TWIM2_IRQ
] = 
twim2_i§
, \

182 [
NVIC_TWIM3_IRQ
] = 
twim3_i§
, \

183 [
NVIC_LCDCA_IRQ
] = 
lcdˇ_i§


	)

	@libopencm3/lib/sam/common/gpio_common_3a3u3x.c

33 
	~<lib›ícm3/ßm/gpio.h
>

42 
	$gpio_öô
(
uöt32_t
 
p‹t
, uöt32_à
pös
, 
gpio_Êags
 
Êags
)

44 
Êags
 & 0x7) {

45 
GPIO_FLAG_GPINPUT
:

46 
	`PIO_ODR
(
p‹t
Ë
pös
;

47 
	`PIO_PER
(
p‹t
Ë
pös
;

49 
GPIO_FLAG_GPOUTPUT
:

50 
	`PIO_OER
(
p‹t
Ë
pös
;

51 
	`PIO_PER
(
p‹t
Ë
pös
;

53 
GPIO_FLAG_PERIPHA
:

54 
	`PIO_ABSR
(
p‹t
Ë&~
pös
;

55 
	`PIO_PDR
(
p‹t
Ë
pös
;

57 
GPIO_FLAG_PERIPHB
:

58 
	`PIO_ABSR
(
p‹t
Ë|
pös
;

59 
	`PIO_PDR
(
p‹t
Ë
pös
;

62 i‡(
Êags
 & 
GPIO_FLAG_OPEN_DRAIN
) {

63 
	`PIO_MDER
(
p‹t
Ë
pös
;

65 
	`PIO_MDDR
(
p‹t
Ë
pös
;

68 i‡(
Êags
 & 
GPIO_FLAG_PULL_UP
) {

69 
	`PIO_PUER
(
p‹t
Ë
pös
;

71 
	`PIO_PUDR
(
p‹t
Ë
pös
;

73 
	}
}

	@libopencm3/lib/sam/common/gpio_common_3n3s.c

33 
	~<lib›ícm3/ßm/gpio.h
>

42 
	$gpio_öô
(
uöt32_t
 
p‹t
, uöt32_à
pös
, 
gpio_Êags
 
Êags
)

44 
Êags
 & 0x7) {

45 
GPIO_FLAG_GPINPUT
:

46 
	`PIO_ODR
(
p‹t
Ë
pös
;

47 
	`PIO_PER
(
p‹t
Ë
pös
;

49 
GPIO_FLAG_GPOUTPUT
:

50 
	`PIO_OER
(
p‹t
Ë
pös
;

51 
	`PIO_PER
(
p‹t
Ë
pös
;

53 
GPIO_FLAG_PERIPHA
:

54 
	`PIO_ABCDSR1
(
p‹t
Ë&~
pös
;

55 
	`PIO_ABCDSR2
(
p‹t
Ë&~
pös
;

56 
	`PIO_PDR
(
p‹t
Ë
pös
;

58 
GPIO_FLAG_PERIPHB
:

59 
	`PIO_ABCDSR1
(
p‹t
Ë|
pös
;

60 
	`PIO_ABCDSR2
(
p‹t
Ë&~
pös
;

61 
	`PIO_PDR
(
p‹t
Ë
pös
;

63 
GPIO_FLAG_PERIPHC
:

64 
	`PIO_ABCDSR1
(
p‹t
Ë&~
pös
;

65 
	`PIO_ABCDSR2
(
p‹t
Ë|
pös
;

66 
	`PIO_PDR
(
p‹t
Ë
pös
;

68 
GPIO_FLAG_PERIPHD
:

69 
	`PIO_ABCDSR1
(
p‹t
Ë|
pös
;

70 
	`PIO_ABCDSR2
(
p‹t
Ë|
pös
;

71 
	`PIO_PDR
(
p‹t
Ë
pös
;

75 i‡(
Êags
 & 
GPIO_FLAG_OPEN_DRAIN
) {

76 
	`PIO_MDER
(
p‹t
Ë
pös
;

78 
	`PIO_MDDR
(
p‹t
Ë
pös
;

81 i‡(
Êags
 & 
GPIO_FLAG_PULL_UP
) {

82 
	`PIO_PUER
(
p‹t
Ë
pös
;

84 
	`PIO_PUDR
(
p‹t
Ë
pös
;

86 
	}
}

	@libopencm3/lib/sam/common/gpio_common_all.c

33 
	~<lib›ícm3/ßm/gpio.h
>

40 
	$gpio_£t
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

42 
	`PIO_SODR
(
gpi›‹t
Ë
gpios
;

43 
	}
}

50 
	$gpio_˛ór
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

52 
	`PIO_CODR
(
gpi›‹t
Ë
gpios
;

53 
	}
}

60 
	$gpio_toggÀ
(
uöt32_t
 
gpi›‹t
, uöt32_à
gpios
)

62 
uöt32_t
 
od§
 = 
	`PIO_ODSR
(
gpi›‹t
);

63 
	`PIO_CODR
(
gpi›‹t
Ë
od§
 & 
gpios
;

64 
	`PIO_SODR
(
gpi›‹t
Ë~
od§
 & 
gpios
;

65 
	}
}

	@libopencm3/lib/sam/common/pmc.c

20 
	~<lib›ícm3/ßm/pmc.h
>

21 
	~<lib›ícm3/ßm/ìfc.h
>

24 
uöt32_t
 
	gpmc_mck_‰equícy
 = 4000000;

26 
	$pmc_xèl_íabÀ
(
boﬁ
 
í
, 
uöt8_t
 
°¨tup_time
)

28 i‡(
í
) {

29 
CKGR_MOR
 = (CKGR_MOR & ~
CKGR_MOR_MOSCXTST_MASK
) |

30 
CKGR_MOR_KEY
 | 
CKGR_MOR_MOSCXTEN
 |

31 (
°¨tup_time
 << 8);

32 !(
PMC_SR
 & 
PMC_SR_MOSCXTS
));

34 
CKGR_MOR
 = 
CKGR_MOR_KEY
 | (CKGR_MOR & ~
CKGR_MOR_MOSCXTEN
);

36 
	}
}

38 
	$pmc_∂œ_c⁄fig
(
uöt8_t
 
mul
, uöt8_à
div
)

40 
CKGR_PLLAR
 = 
CKGR_PLLAR_ONE
 | ((
mul
 - 1) << 16) |

41 
CKGR_PLLAR_PLLACOUNT_MASK
 | 
div
;

42 !(
PMC_SR
 & 
PMC_SR_LOCKA
));

43 
	}
}

45 
	$pmc_≥rùhîÆ_˛ock_íabÀ
(
uöt8_t
 
pid
)

47 #i‡
	`deföed
(
PMC_PCER1
)

48 i‡(
pid
 < 32) {

49 
PMC_PCER0
 = 1 << 
pid
;

51 
PMC_PCER1
 = 1 << (
pid
 & 31);

55 
PMC_PCER
 = 1 << 
pid
;

57 
	}
}

59 
	$pmc_≥rùhîÆ_˛ock_dißbÀ
(
uöt8_t
 
pid
)

61 #i‡
	`deföed
(
PMC_PCER1
)

62 i‡(
pid
 < 32) {

63 
PMC_PCDR0
 = 1 << 
pid
;

65 
PMC_PCDR1
 = 1 << (
pid
 & 31);

68 
PMC_PCDR
 = 1 << 
pid
;

70 
	}
}

72 
	$pmc_mck_£t_sour˚
(
mck_§c
 
§c
)

74 
PMC_MCKR
 = (PMC_MCKR & ~
PMC_MCKR_CSS_MASK
Ë| 
§c
;

75 !(
PMC_SR
 & 
PMC_SR_MCKRDY
));

76 
	}
}

78 
	$pmc_˛ock_£tup_ö_xèl_12mhz_out_84mhz
()

80 
	`ìfc_£t_œãncy
(4);

83 
	`pmc_xèl_íabÀ
(
åue
, 0xff);

85 
CKGR_MOR
 |
CKGR_MOR_KEY
 | 
CKGR_MOR_MOSCSEL
;

87 
	`pmc_∂œ_c⁄fig
(7, 1);

88 
	`pmc_mck_£t_sour˚
(
MCK_SRC_PLLA
);

90 
pmc_mck_‰equícy
 = 84000000;

91 
	}
}

93 
	$pmc_˛ock_£tup_ö_rc_4mhz_out_84mhz
()

95 
	`ìfc_£t_œãncy
(4);

98 
CKGR_MOR
 = 
CKGR_MOR_KEY
 |

99 (
CKGR_MOR
 & ~(
CKGR_MOR_MOSCSEL
 | 
CKGR_MOR_MOSCRCF_MASK
));

101 
	`pmc_∂œ_c⁄fig
(21, 1);

102 
	`pmc_mck_£t_sour˚
(
MCK_SRC_PLLA
);

104 
pmc_mck_‰equícy
 = 84000000;

105 
	}
}

	@libopencm3/lib/sam/common/usart_common_3.c

20 
	~<lib›ícm3/ßm/ußπ.h
>

22 
uöt32_t
 
pmc_mck_‰equícy
;

24 
	$ußπ_£t_baudøã
(
uöt32_t
 
ußπ
, uöt32_à
baud
)

26 
	`USART_BRGR
(
ußπ
Ë
pmc_mck_‰equícy
 / (16 * 
baud
);

27 
	}
}

	@libopencm3/lib/sam/common/usart_common_all.c

20 
	~<lib›ícm3/ßm/ußπ.h
>

22 
	$ußπ_£t_d©abôs
(
uöt32_t
 
ußπ
, 
bôs
)

24 
	`USART_MR
(
ußπ
Ë(USART_MR(ußπË& ~
USART_MR_CHRL_MASK
) |

25 ((
bôs
 - 5) << 6);

26 
	}
}

28 
	$ußπ_£t_°›bôs
(
uöt32_t
 
ußπ
, 
ußπ_°›bôs
 
sb
)

30 
	`USART_MR
(
ußπ
Ë(USART_MR(ußπË& ~
USART_MR_NBSTOP_MASK
) |

31 (
sb
 << 12);

32 
	}
}

34 
	$ußπ_£t_∑rôy
(
uöt32_t
 
ußπ
, 
ußπ_∑rôy
 
∑r
)

36 
	`USART_MR
(
ußπ
Ë(USART_MR(ußπË& ~
USART_MR_PAR_MASK
Ë| (
∑r
 << 9);

37 
	}
}

39 
	$ußπ_£t_mode
(
uöt32_t
 
ußπ
, 
ußπ_mode
 
mode
)

41 
	`USART_CR
(
ußπ
) =

42 (
mode
 & 
USART_MODE_RX
Ë? 
USART_CR_RXEN
 : 
USART_CR_RXDIS
;

43 
	`USART_CR
(
ußπ
Ë(
mode
 & 
USART_MODE_TX
Ë? 
USART_CR_TXEN


44 : 
USART_CR_TXDIS
;

45 
	}
}

47 
	$ußπ_£t_Êow_c⁄åﬁ
(
uöt32_t
 
ußπ
, 
ußπ_Êowc⁄åﬁ
 
fc
)

49 
	`USART_MR
(
ußπ
Ë(USART_MR(ußπË& ~
USART_MR_MODE_MASK
) |

50 (
fc
 ? 
USART_MR_MODE_HW_HANDSHAKING
 : 0);

51 
	}
}

53 
	$ußπ_íabÀ
(
uöt32_t
 
ußπ
)

55 
	`USART_CR
(
ußπ
Ë
USART_CR_TXEN
 | 
USART_CR_RXEN
;

56 
	}
}

58 
	$ußπ_dißbÀ
(
uöt32_t
 
ußπ
)

60 
	`USART_CR
(
ußπ
Ë
USART_CR_TXDIS
 | 
USART_CR_RXDIS
;

61 
	}
}

63 
	$ußπ_£nd
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
)

65 
	`USART_THR
(
ußπ
Ë
d©a
;

66 
	}
}

68 
uöt16_t
 
	$ußπ_ªcv
(
uöt32_t
 
ußπ
)

70  
	`USART_RHR
(
ußπ
) & 0x1f;

71 
	}
}

73 
	$ußπ_waô_£nd_ªady
(
uöt32_t
 
ußπ
)

75 (
	`USART_CSR
(
ußπ
Ë& 
USART_CSR_TXRDY
) == 0);

76 
	}
}

78 
	$ußπ_waô_ªcv_ªady
(
uöt32_t
 
ußπ
)

80 (
	`USART_CSR
(
ußπ
Ë& 
USART_CSR_RXRDY
) == 0);

81 
	}
}

83 
	$ußπ_£nd_blockög
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
)

85 
	`ußπ_waô_£nd_ªady
(
ußπ
);

86 
	`ußπ_£nd
(
ußπ
, 
d©a
);

87 
	}
}

89 
uöt16_t
 
	$ußπ_ªcv_blockög
(
uöt32_t
 
ußπ
)

91 
	`ußπ_waô_ªcv_ªady
(
ußπ
);

93  
	`ußπ_ªcv
(
ußπ
);

94 
	}
}

96 
	$ußπ_íabÀ_rx_öãºu±
(
uöt32_t
 
ußπ
)

98 
	`USART_IER
(
ußπ
Ë
USART_CSR_RXRDY
;

99 
	}
}

101 
	$ußπ_dißbÀ_rx_öãºu±
(
uöt32_t
 
ußπ
)

103 
	`USART_IDR
(
ußπ
Ë
USART_CSR_RXRDY
;

104 
	}
}

106 
	$ußπ_wp_íabÀ
(
uöt32_t
 
ußπ
)

108 
	`USART_WPMR
(
ußπ
Ë
USART_WPMR_KEY
 | 
USART_WPMR_WPEN
;

109 
	}
}

111 
	$ußπ_wp_dißbÀ
(
uöt32_t
 
ußπ
)

113 
	`USART_WPMR
(
ußπ
Ë
USART_WPMR_KEY
 & (~
USART_WPMR_WPEN
);

114 
	}
}

116 
	$ußπ_£À˘_˛ock
(
uöt32_t
 
ußπ
, 
ußπ_˛ock
 
˛k
)

118 
uöt32_t
 
ªg_mr
 = 
	`USART_MR
(
ußπ
Ë& (~
USART_MR_USCLKS_MASK
);

119 
	`USART_MR
(
ußπ
Ë((
˛k
 << 
USART_MR_USCLKS_SHIFT
Ë& 
USART_MR_USCLKS_MASK
Ë| 
ªg_mr
;

120 
	}
}

122 
	$ußπ_£t_ch¨a˘î_Àngth
(
uöt32_t
 
ußπ
, 
ußπ_chæ
 
chæ
)

124 
uöt32_t
 
ªg_mr
 = 
	`USART_MR
(
ußπ
Ë& (~
USART_MR_CHRL_MASK
);

125 
	`USART_MR
(
ußπ
Ë
ªg_mr
 | (
chæ
 << 
USART_MR_CHRL_SHIFT
);

126 
	}
}

	@libopencm3/lib/sam/d/vector_nvic.c

15 #¥agm®
wók
 
pm_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
sys˘æ_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
wdt_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
eic_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
nvm˘æ_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
dmac_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
ª£rved1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
evsys_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
£rcom0_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
£rcom1_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
£rcom2_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
tcc0_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
tc1_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
tc2_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
adc_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
ac_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
dac_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
±c_i§
 = 
blockög_h™dÀr


42 
	#IRQ_HANDLERS
 \

43 [
NVIC_PM_IRQ
] = 
pm_i§
, \

44 [
NVIC_SYSCTRL_IRQ
] = 
sys˘æ_i§
, \

45 [
NVIC_WDT_IRQ
] = 
wdt_i§
, \

46 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

47 [
NVIC_EIC_IRQ
] = 
eic_i§
, \

48 [
NVIC_NVMCTRL_IRQ
] = 
nvm˘æ_i§
, \

49 [
NVIC_DMAC_IRQ
] = 
dmac_i§
, \

50 [
NVIC_RESERVED1_IRQ
] = 
ª£rved1_i§
, \

51 [
NVIC_EVSYS_IRQ
] = 
evsys_i§
, \

52 [
NVIC_SERCOM0_IRQ
] = 
£rcom0_i§
, \

53 [
NVIC_SERCOM1_IRQ
] = 
£rcom1_i§
, \

54 [
NVIC_SERCOM2_IRQ
] = 
£rcom2_i§
, \

55 [
NVIC_TCC0_IRQ
] = 
tcc0_i§
, \

56 [
NVIC_TC1_IRQ
] = 
tc1_i§
, \

57 [
NVIC_TC2_IRQ
] = 
tc2_i§
, \

58 [
NVIC_ADC_IRQ
] = 
adc_i§
, \

59 [
NVIC_AC_IRQ
] = 
ac_i§
, \

60 [
NVIC_DAC_IRQ
] = 
dac_i§
, \

61 [
NVIC_PTC_IRQ
] = 
±c_i§


	)

	@libopencm3/lib/stm32/can.c

38 
	~<lib›ícm3/°m32/ˇn.h
>

39 
	~<lib›ícm3/°m32/rcc.h
>

51 
	#CAN_MSR_INAK_TIMEOUT
 0x0000FFFF

	)

63 
	$ˇn_ª£t
(
uöt32_t
 
ˇ≈‹t
)

65 i‡(
ˇ≈‹t
 =
CAN1
) {

66 
	`rcc_≥rùh_ª£t_pul£
(
RST_CAN1
);

68 #i‡
	`deföed
(
BX_CAN2_BASE
)

69 
	`rcc_≥rùh_ª£t_pul£
(
RST_CAN2
);

72 
	}
}

92 
	$ˇn_öô
(
uöt32_t
 
ˇ≈‹t
, 
boﬁ
 
âcm
, boﬁ 
abom
, boﬁ 
awum
, boﬁ 
«π
,

93 
boﬁ
 
rÊm
, boﬁ 
txÂ
, 
uöt32_t
 
sjw
, uöt32_à
ts1
, uöt32_à
ts2
,

94 
uöt32_t
 
bΩ
, 
boﬁ
 
lo›back
, boﬁ 
sûít
)

96 vﬁ©ûê
uöt32_t
 
waô_ack
;

97 
ªt
 = 0;

100 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_SLEEP
;

103 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_INRQ
;

106 
waô_ack
 = 
CAN_MSR_INAK_TIMEOUT
;

107 (--
waô_ack
) &&

108 ((
	`CAN_MSR
(
ˇ≈‹t
Ë& 
CAN_MSR_INAK
) != CAN_MSR_INAK));

111 i‡((
	`CAN_MSR
(
ˇ≈‹t
Ë& 
CAN_MSR_INAK
) != CAN_MSR_INAK) {

116 
	`CAN_BTR
(
ˇ≈‹t
) = 0;

119 i‡(
âcm
) {

120 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_TTCM
;

122 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_TTCM
;

125 i‡(
abom
) {

126 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_ABOM
;

128 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_ABOM
;

131 i‡(
awum
) {

132 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_AWUM
;

134 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_AWUM
;

137 i‡(
«π
) {

138 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_NART
;

140 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_NART
;

143 i‡(
rÊm
) {

144 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_RFLM
;

146 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_RFLM
;

149 i‡(
txÂ
) {

150 
	`CAN_MCR
(
ˇ≈‹t
Ë|
CAN_MCR_TXFP
;

152 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_TXFP
;

155 i‡(
sûít
) {

156 
	`CAN_BTR
(
ˇ≈‹t
Ë|
CAN_BTR_SILM
;

158 
	`CAN_BTR
(
ˇ≈‹t
Ë&~
CAN_BTR_SILM
;

161 i‡(
lo›back
) {

162 
	`CAN_BTR
(
ˇ≈‹t
Ë|
CAN_BTR_LBKM
;

164 
	`CAN_BTR
(
ˇ≈‹t
Ë&~
CAN_BTR_LBKM
;

168 
	`CAN_BTR
(
ˇ≈‹t
Ë|
sjw
 | 
ts2
 | 
ts1
 |

169 ((
bΩ
 - 1ulË& 
CAN_BTR_BRP_MASK
);

172 
	`CAN_MCR
(
ˇ≈‹t
Ë&~
CAN_MCR_INRQ
;

175 
waô_ack
 = 
CAN_MSR_INAK_TIMEOUT
;

176 (--
waô_ack
) &&

177 ((
	`CAN_MSR
(
ˇ≈‹t
Ë& 
CAN_MSR_INAK
) == CAN_MSR_INAK));

179 i‡((
	`CAN_MSR
(
ˇ≈‹t
Ë& 
CAN_MSR_INAK
) == CAN_MSR_INAK) {

180 
ªt
 = 1;

183  
ªt
;

184 
	}
}

199 
	$ˇn_fûãr_öô
(
uöt32_t
 
ƒ
, 
boﬁ
 
sˇÀ_32bô
,

200 
boﬁ
 
id_li°_mode
, 
uöt32_t
 
‰1
, uöt32_à
‰2
,

201 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
)

203 
uöt32_t
 
fûãr_£À˘_bô
 = 0x00000001 << 
ƒ
;

206 
	`CAN_FMR
(
CAN1
Ë|
CAN_FMR_FINIT
;

209 
	`CAN_FA1R
(
CAN1
Ë&~
fûãr_£À˘_bô
;

211 i‡(
sˇÀ_32bô
) {

213 
	`CAN_FS1R
(
CAN1
Ë|
fûãr_£À˘_bô
;

216 
	`CAN_FS1R
(
CAN1
Ë&~
fûãr_£À˘_bô
;

219 i‡(
id_li°_mode
) {

221 
	`CAN_FM1R
(
CAN1
Ë|
fûãr_£À˘_bô
;

224 
	`CAN_FM1R
(
CAN1
Ë&~
fûãr_£À˘_bô
;

228 
	`CAN_FiR1
(
CAN1
, 
ƒ
Ë
‰1
;

231 
	`CAN_FiR2
(
CAN1
, 
ƒ
Ë
‰2
;

234 i‡(
fifo
) {

235 
	`CAN_FFA1R
(
CAN1
Ë|
fûãr_£À˘_bô
;

237 
	`CAN_FFA1R
(
CAN1
Ë&~
fûãr_£À˘_bô
;

240 i‡(
íabÀ
) {

241 
	`CAN_FA1R
(
CAN1
Ë|
fûãr_£À˘_bô
;

245 
	`CAN_FMR
(
CAN1
Ë&~
CAN_FMR_FINIT
;

246 
	}
}

259 
	$ˇn_fûãr_id_mask_16bô_öô
(
uöt32_t
 
ƒ
, 
uöt16_t
 
id1
,

260 
uöt16_t
 
mask1
, uöt16_à
id2
,

261 
uöt16_t
 
mask2
, 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
)

263 
	`ˇn_fûãr_öô
(
ƒ
, 
Ál£
, false,

264 ((
uöt32_t
)
mask1
 << 16Ë| (uöt32_t)
id1
,

265 ((
uöt32_t
)
mask2
 << 16Ë| (uöt32_t)
id2
, 
fifo
, 
íabÀ
);

266 
	}
}

277 
	$ˇn_fûãr_id_mask_32bô_öô
(
uöt32_t
 
ƒ
, uöt32_à
id
,

278 
uöt32_t
 
mask
, uöt32_à
fifo
, 
boﬁ
 
íabÀ
)

280 
	`ˇn_fûãr_öô
(
ƒ
, 
åue
, 
Ál£
, 
id
, 
mask
, 
fifo
, 
íabÀ
);

281 
	}
}

294 
	$ˇn_fûãr_id_li°_16bô_öô
(
uöt32_t
 
ƒ
,

295 
uöt16_t
 
id1
, uöt16_à
id2
,

296 
uöt16_t
 
id3
, uöt16_à
id4
,

297 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
)

299 
	`ˇn_fûãr_öô
(
ƒ
, 
Ál£
, 
åue
,

300 ((
uöt32_t
)
id1
 << 16Ë| (uöt32_t)
id2
,

301 ((
uöt32_t
)
id3
 << 16Ë| (uöt32_t)
id4
, 
fifo
, 
íabÀ
);

302 
	}
}

313 
	$ˇn_fûãr_id_li°_32bô_öô
(
uöt32_t
 
ƒ
,

314 
uöt32_t
 
id1
, uöt32_à
id2
,

315 
uöt32_t
 
fifo
, 
boﬁ
 
íabÀ
)

317 
	`ˇn_fûãr_öô
(
ƒ
, 
åue
,Årue, 
id1
, 
id2
, 
fifo
, 
íabÀ
);

318 
	}
}

326 
	$ˇn_íabÀ_úq
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
úq
)

328 
	`CAN_IER
(
ˇ≈‹t
Ë|
úq
;

329 
	}
}

337 
	$ˇn_dißbÀ_úq
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
úq
)

339 
	`CAN_IER
(
ˇ≈‹t
Ë&~
úq
;

340 
	}
}

354 
	$ˇn_å™smô
(
uöt32_t
 
ˇ≈‹t
, uöt32_à
id
, 
boﬁ
 
ext
, boﬁ 
πr
,

355 
uöt8_t
 
Àngth
, uöt8_à*
d©a
)

357 
ªt
 = 0;

358 
uöt32_t
 
maûbox
 = 0;

360 
uöt8_t
 
d©a8
[4];

361 
uöt32_t
 
d©a32
;

362 } 
tdlxr
, 
tdhxr
;

365 i‡((
	`CAN_TSR
(
ˇ≈‹t
Ë& 
CAN_TSR_TME0
) == CAN_TSR_TME0) {

366 
ªt
 = 0;

367 
maûbox
 = 
CAN_MBOX0
;

368 } i‡((
	`CAN_TSR
(
ˇ≈‹t
Ë& 
CAN_TSR_TME1
) == CAN_TSR_TME1) {

369 
ªt
 = 1;

370 
maûbox
 = 
CAN_MBOX1
;

371 } i‡((
	`CAN_TSR
(
ˇ≈‹t
Ë& 
CAN_TSR_TME2
) == CAN_TSR_TME2) {

372 
ªt
 = 2;

373 
maûbox
 = 
CAN_MBOX2
;

375 
ªt
 = -1;

379 i‡(
ªt
 == -1) {

380  
ªt
;

383 i‡(
ext
) {

385 
	`CAN_TIxR
(
ˇ≈‹t
, 
maûbox
Ë(
id
 << 
CAN_TIxR_EXID_SHIFT
) |

386 
CAN_TIxR_IDE
;

389 
	`CAN_TIxR
(
ˇ≈‹t
, 
maûbox
Ë
id
 << 
CAN_TIxR_STID_SHIFT
;

393 i‡(
πr
) {

394 
	`CAN_TIxR
(
ˇ≈‹t
, 
maûbox
Ë|
CAN_TIxR_RTR
;

398 
	`CAN_TDTxR
(
ˇ≈‹t
, 
maûbox
Ë&~
CAN_TDTxR_DLC_MASK
;

399 
	`CAN_TDTxR
(
ˇ≈‹t
, 
maûbox
Ë|(
Àngth
 & 
CAN_TDTxR_DLC_MASK
);

401 
Àngth
) {

403 
tdhxr
.
d©a8
[3] = 
d©a
[7];

406 
tdhxr
.
d©a8
[2] = 
d©a
[6];

409 
tdhxr
.
d©a8
[1] = 
d©a
[5];

412 
tdhxr
.
d©a8
[0] = 
d©a
[4];

415 
tdlxr
.
d©a8
[3] = 
d©a
[3];

418 
tdlxr
.
d©a8
[2] = 
d©a
[2];

421 
tdlxr
.
d©a8
[1] = 
d©a
[1];

424 
tdlxr
.
d©a8
[0] = 
d©a
[0];

431 
	`CAN_TDLxR
(
ˇ≈‹t
, 
maûbox
Ë
tdlxr
.
d©a32
;

432 
	`CAN_TDHxR
(
ˇ≈‹t
, 
maûbox
Ë
tdhxr
.
d©a32
;

435 
	`CAN_TIxR
(
ˇ≈‹t
, 
maûbox
Ë|
CAN_TIxR_TXRQ
;

437  
ªt
;

438 
	}
}

446 
	$ˇn_fifo_ªÀa£
(
uöt32_t
 
ˇ≈‹t
, 
uöt8_t
 
fifo
)

448 i‡(
fifo
 == 0) {

449 
	`CAN_RF0R
(
ˇ≈‹t
Ë|
CAN_RF1R_RFOM1
;

451 
	`CAN_RF1R
(
ˇ≈‹t
Ë|
CAN_RF1R_RFOM1
;

453 
	}
}

470 
	$ˇn_ª˚ive
(
uöt32_t
 
ˇ≈‹t
, 
uöt8_t
 
fifo
, 
boﬁ
 
ªÀa£
, uöt32_à*
id
,

471 
boﬁ
 *
ext
, boﬁ *
πr
, 
uöt8_t
 *
fmi
, uöt8_à*
Àngth
,

472 
uöt8_t
 *
d©a
, 
uöt16_t
 *
time°amp
)

474 
uöt32_t
 
fifo_id
 = 0;

476 
uöt8_t
 
d©a8
[4];

477 
uöt32_t
 
d©a32
;

478 } 
rdlxr
, 
rdhxr
;

479 c⁄° 
uöt32_t
 
fifoid_¨øy
[2] = {
CAN_FIFO0
, 
CAN_FIFO1
};

481 
fifo_id
 = 
fifoid_¨øy
[
fifo
];

484 i‡(
	`CAN_RIxR
(
ˇ≈‹t
, 
fifo_id
Ë& 
CAN_RIxR_IDE
) {

485 *
ext
 = 
åue
;

487 *
id
 = (
	`CAN_RIxR
(
ˇ≈‹t
, 
fifo_id
Ë>> 
CAN_RIxR_EXID_SHIFT
) &

488 
CAN_RIxR_EXID_MASK
;

490 *
ext
 = 
Ál£
;

492 *
id
 = (
	`CAN_RIxR
(
ˇ≈‹t
, 
fifo_id
Ë>> 
CAN_RIxR_STID_SHIFT
) &

493 
CAN_RIxR_STID_MASK
;

497 i‡(
	`CAN_RIxR
(
ˇ≈‹t
, 
fifo_id
Ë& 
CAN_RIxR_RTR
) {

498 *
πr
 = 
åue
;

500 *
πr
 = 
Ál£
;

504 *
fmi
 = ((
	`CAN_RDTxR
(
ˇ≈‹t
, 
fifo_id
Ë& 
CAN_RDTxR_FMI_MASK
) >>

505 
CAN_RDTxR_FMI_SHIFT
);

508 *
Àngth
 = 
	`CAN_RDTxR
(
ˇ≈‹t
, 
fifo_id
Ë& 
CAN_RDTxR_DLC_MASK
;

513 i‡(
time°amp
) {

514 *
time°amp
 = (
	`CAN_RDTxR
(
ˇ≈‹t
, 
fifo_id
) &

515 
CAN_RDTxR_TIME_MASK
Ë>> 
CAN_RDTxR_TIME_SHIFT
;

518 
rdlxr
.
d©a32
 = 
	`CAN_RDLxR
(
ˇ≈‹t
, 
fifo_id
);

519 
rdhxr
.
d©a32
 = 
	`CAN_RDHxR
(
ˇ≈‹t
, 
fifo_id
);

532 
d©a
[0] = 
rdlxr
.
d©a8
[0];

533 
d©a
[1] = 
rdlxr
.
d©a8
[1];

534 
d©a
[2] = 
rdlxr
.
d©a8
[2];

535 
d©a
[3] = 
rdlxr
.
d©a8
[3];

536 
d©a
[4] = 
rdhxr
.
d©a8
[0];

537 
d©a
[5] = 
rdhxr
.
d©a8
[1];

538 
d©a
[6] = 
rdhxr
.
d©a8
[2];

539 
d©a
[7] = 
rdhxr
.
d©a8
[3];

542 i‡(
ªÀa£
) {

543 
	`ˇn_fifo_ªÀa£
(
ˇ≈‹t
, 
fifo
);

545 
	}
}

547 
boﬁ
 
	$ˇn_avaûabÀ_maûbox
(
uöt32_t
 
ˇ≈‹t
)

549  
	`CAN_TSR
(
ˇ≈‹t
Ë& (
CAN_TSR_TME0
 | 
CAN_TSR_TME1
 | 
CAN_TSR_TME2
);

550 
	}
}

	@libopencm3/lib/stm32/common/adc_common_v1.c

97 
	~<lib›ícm3/°m32/adc.h
>

108 
	$adc_powî_off
(
uöt32_t
 
adc
)

110 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_ADON
;

111 
	}
}

123 
	$adc_íabÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
)

125 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_AWDEN
;

126 
	}
}

135 
	$adc_dißbÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
)

137 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_AWDEN
;

138 
	}
}

150 
	$adc_íabÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
)

152 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_JAWDEN
;

153 
	}
}

161 
	$adc_dißbÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
)

163 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_JAWDEN
;

164 
	}
}

182 
	$adc_íabÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
)

184 i‡((
Àngth
-1) > 7) {

187 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_DISCEN
;

188 
	`ADC_CR1
(
adc
Ë|((
Àngth
-1Ë<< 
ADC_CR1_DISCNUM_SHIFT
);

189 
	}
}

197 
	$adc_dißbÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
)

199 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_DISCEN
;

200 
	}
}

212 
	$adc_íabÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
)

214 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_JDISCEN
;

215 
	}
}

223 
	$adc_dißbÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
)

225 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_JDISCEN
;

226 
	}
}

239 
	$adc_íabÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
)

241 
	`adc_dißbÀ_exã∫Æ_åiggî_öje˘ed
(
adc
);

242 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_JAUTO
;

243 
	}
}

251 
	$adc_dißbÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
)

253 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_JAUTO
;

254 
	}
}

272 
	$adc_íabÀ_™Æog_w©chdog_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
)

274 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_AWDSGL
;

275 
	}
}

294 
	$adc_íabÀ_™Æog_w©chdog_⁄_£À˘ed_ch™√l
(
uöt32_t
 
adc
,

295 
uöt8_t
 
ch™√l
)

297 
uöt32_t
 
ªg32
;

299 
ªg32
 = (
	`ADC_CR1
(
adc
Ë& ~
ADC_CR1_AWDCH_MASK
);

300 i‡(
ch™√l
 <
ADC_CR1_AWDCH_MAX
) {

301 
ªg32
 |
ch™√l
;

303 
	`ADC_CR1
(
adc
Ë
ªg32
;

304 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_AWDSGL
;

305 
	}
}

317 
	$adc_íabÀ_sˇn_mode
(
uöt32_t
 
adc
)

319 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_SCAN
;

320 
	}
}

328 
	$adc_dißbÀ_sˇn_mode
(
uöt32_t
 
adc
)

330 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_SCAN
;

331 
	}
}

339 
	$adc_íabÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
)

341 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_JEOCIE
;

342 
	}
}

350 
	$adc_dißbÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
)

352 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_JEOCIE
;

353 
	}
}

361 
	$adc_íabÀ_awd_öãºu±
(
uöt32_t
 
adc
)

363 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_AWDIE
;

364 
	}
}

372 
	$adc_dißbÀ_awd_öãºu±
(
uöt32_t
 
adc
)

374 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_AWDIE
;

375 
	}
}

384 
	$adc_íabÀ_eoc_öãºu±
(
uöt32_t
 
adc
)

386 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_EOCIE
;

387 
	}
}

395 
	$adc_dißbÀ_eoc_öãºu±
(
uöt32_t
 
adc
)

397 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_EOCIE
;

398 
	}
}

408 
	$adc_£t_À·_Æig√d
(
uöt32_t
 
adc
)

410 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_ALIGN
;

411 
	}
}

420 
	$adc_£t_right_Æig√d
(
uöt32_t
 
adc
)

422 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_ALIGN
;

423 
	}
}

435 
boﬁ
 
	$adc_eoc
(
uöt32_t
 
adc
)

437  (
	`ADC_SR
(
adc
Ë& 
ADC_SR_EOC
) != 0;

438 
	}
}

449 
boﬁ
 
	$adc_eoc_öje˘ed
(
uöt32_t
 
adc
)

451  (
	`ADC_SR
(
adc
Ë& 
ADC_SR_JEOC
) != 0;

452 
	}
}

465 
uöt32_t
 
	$adc_ªad_ªguœr
(
uöt32_t
 
adc
)

467  
	`ADC_DR
(
adc
);

468 
	}
}

483 
uöt32_t
 
	$adc_ªad_öje˘ed
(
uöt32_t
 
adc
, 
uöt8_t
 
ªg
)

485 
ªg
) {

487  
	`ADC_JDR1
(
adc
);

489  
	`ADC_JDR2
(
adc
);

491  
	`ADC_JDR3
(
adc
);

493  
	`ADC_JDR4
(
adc
);

496 
	}
}

507 
	$adc_£t_c⁄töuous_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
)

509 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_CONT
;

510 
	}
}

523 
	$adc_£t_sögÀ_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
)

525 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_CONT
;

526 
	}
}

535 
	$adc_£t_w©chdog_high_thªshﬁd
(
uöt32_t
 
adc
, 
uöt16_t
 
thªshﬁd
)

537 
uöt32_t
 
ªg32
 = 0;

539 
ªg32
 = (
uöt32_t
)
thªshﬁd
;

540 
ªg32
 &
ADC_HT_MSK
;

541 
	`ADC_HTR
(
adc
Ë
ªg32
;

542 
	}
}

551 
	$adc_£t_w©chdog_low_thªshﬁd
(
uöt32_t
 
adc
, 
uöt16_t
 
thªshﬁd
)

553 
uöt32_t
 
ªg32
 = 0;

555 
ªg32
 = (
uöt32_t
)
thªshﬁd
;

556 
ªg32
 &
ADC_LT_MSK
;

557 
	`ADC_LTR
(
adc
Ë
ªg32
;

558 
	}
}

574 
	$adc_£t_ªguœr_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[])

576 
uöt32_t
 
fi·h6
 = 0;

577 
uöt32_t
 
fouπh6
 = 0;

578 
uöt32_t
 
thúd6
 = 0;

579 
uöt32_t
 
£c⁄d6
 = 0;

580 
uöt32_t
 
fú°6
 = 0;

581 
uöt8_t
 
i
 = 0;

583 i‡(
Àngth
 > 
ADC_SQR_MAX_CHANNELS_REGULAR
) {

587 
i
 = 1; i <
Àngth
; i++) {

588 i‡(
i
 <= 6) {

589 
fú°6
 |(
ch™√l
[
i
 - 1] << ((i - 1) * 5));

591 i‡((
i
 > 6) & (i <= 12)) {

592 
£c⁄d6
 |(
ch™√l
[
i
 - 1] << ((i - 6 - 1) * 5));

594 i‡((
i
 > 12) & (i <= 18)) {

595 
thúd6
 |(
ch™√l
[
i
 - 1] << ((i - 12 - 1) * 5));

597 i‡((
i
 > 18) & (i <= 24)) {

598 
fouπh6
 |(
ch™√l
[
i
 - 1] << ((i - 18 - 1) * 5));

600 i‡((
i
 > 24) & (i <= 28)) {

601 
fi·h6
 |(
ch™√l
[
i
 - 1] << ((i - 24 - 1) * 5));

604 #i‡
	`deföed
(
ADC_SQR5
)

605 
	`ADC_SQR1
(
adc
Ë
fi·h6
 | ((
Àngth
 - 1Ë<< 
ADC_SQR1_L_LSB
);

606 
	`ADC_SQR2
(
adc
Ë
fouπh6
;

607 
	`ADC_SQR3
(
adc
Ë
thúd6
;

608 
	`ADC_SQR4
(
adc
Ë
£c⁄d6
;

609 
	`ADC_SQR5
(
adc
Ë
fú°6
;

611 
	`ADC_SQR1
(
adc
Ë
thúd6
 | ((
Àngth
 - 1Ë<< 
ADC_SQR1_L_LSB
);

612 
	`ADC_SQR2
(
adc
Ë
£c⁄d6
;

613 
	`ADC_SQR3
(
adc
Ë
fú°6
;

615 
	}
}

630 
	$adc_£t_öje˘ed_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[])

632 
uöt32_t
 
ªg32
 = 0;

633 
uöt8_t
 
i
 = 0;

636 i‡((
Àngth
 - 1) > 3) {

640 
i
 = 0; i < 
Àngth
; i++) {

641 
ªg32
 |
	`ADC_JSQR_JSQ_VAL
(4 - 
i
, 
ch™√l
[
Àngth
 - i - 1]);

644 
ªg32
 |
	`ADC_JSQR_JL_VAL
(
Àngth
);

646 
	`ADC_JSQR
(
adc
Ë
ªg32
;

647 
	}
}

662 
	$adc_£t_öje˘ed_off£t
(
uöt32_t
 
adc
, 
uöt8_t
 
ªg
, uöt32_à
off£t
)

664 
ªg
) {

666 
	`ADC_JOFR1
(
adc
Ë
off£t
;

669 
	`ADC_JOFR2
(
adc
Ë
off£t
;

672 
	`ADC_JOFR3
(
adc
Ë
off£t
;

675 
	`ADC_JOFR4
(
adc
Ë
off£t
;

678 
	}
}

695 
	$adc_°¨t_c⁄vîsi⁄_ªguœr
(
uöt32_t
 
adc
)

698 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_SWSTART
;

701 
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_SWSTART
);

702 
	}
}

719 
	$adc_°¨t_c⁄vîsi⁄_öje˘ed
(
uöt32_t
 
adc
)

722 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_JSWSTART
;

725 
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_JSWSTART
);

726 
	}
}

735 
	$adc_íabÀ_dma
(
uöt32_t
 
adc
)

737 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_DMA
;

738 
	}
}

746 
	$adc_dißbÀ_dma
(
uöt32_t
 
adc
)

748 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_DMA
;

749 
	}
}

	@libopencm3/lib/stm32/common/adc_common_v2.c

37 
	~<lib›ícm3/°m32/adc.h
>

49 
boﬁ
 
	$adc_eoc
(
uöt32_t
 
adc
)

51  
	`ADC_ISR
(
adc
Ë& 
ADC_ISR_EOC
;

52 
	}
}

63 
boﬁ
 
	$adc_eos
(
uöt32_t
 
adc
)

65  
	`ADC_ISR
(
adc
Ë& 
ADC_ISR_EOS
;

66 
	}
}

73 
	$adc_powî_⁄_async
(
uöt32_t
 
adc
)

75 
	`ADC_CR
(
adc
Ë|
ADC_CR_ADEN
;

76 
	}
}

84 
boﬁ
 
	$adc_is_powî_⁄
(
uöt32_t
 
adc
)

86  
	`ADC_ISR
(
adc
Ë& 
ADC_ISR_ADRDY
;

87 
	}
}

94 
	$adc_powî_⁄
(
uöt32_t
 
adc
)

96 
	`adc_powî_⁄_async
(
adc
);

97 !
	`adc_is_powî_⁄
(
adc
));

98 
	}
}

108 
	$adc_powî_off_async
(
uöt32_t
 
adc
)

110 i‡(
	`adc_is_powî_off
(
adc
)) {

114 
uöt32_t
 
checks
 = 
ADC_CR_ADSTART
;

115 
uöt32_t
 
°›s
 = 
ADC_CR_ADSTP
;

116 #i‡
	`deföed
(
ADC_CR_JADSTART
)

117 
checks
 |
ADC_CR_JADSTART
;

118 
°›s
 |
ADC_CR_JADSTP
;

120 i‡(
	`ADC_CR
(
adc
Ë& 
checks
) {

121 
	`ADC_CR
(
adc
Ë|
°›s
;

122 
	`ADC_CR
(
adc
Ë& 
checks
);

124 
	`ADC_CR
(
adc
Ë|
ADC_CR_ADDIS
;

125 
	}
}

132 
boﬁ
 
	$adc_is_powî_off
(
uöt32_t
 
adc
)

134  !(
	`ADC_CR
(
adc
Ë& 
ADC_CR_ADEN
);

135 
	}
}

144 
	$adc_powî_off
(
uöt32_t
 
adc
)

146 
	`adc_powî_off_async
(
adc
);

147 !
	`adc_is_powî_off
(
adc
));

148 
	}
}

156 
	$adc_ˇlibøã_async
(
uöt32_t
 
adc
)

158 
	`ADC_CR
(
adc
Ë
ADC_CR_ADCAL
;

159 
	}
}

166 
boﬁ
 
	$adc_is_ˇlibøtög
(
uöt32_t
 
adc
)

168  
	`ADC_CR
(
adc
Ë& 
ADC_CR_ADCAL
;

169 
	}
}

175 
	$adc_ˇlibøã
(
uöt32_t
 
adc
)

177 
	`adc_ˇlibøã_async
(
adc
);

178 
	`adc_is_ˇlibøtög
(
adc
));

179 
	}
}

189 
	$adc_£t_c⁄töuous_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
)

191 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_CONT
;

192 
	}
}

201 
	$adc_£t_sögÀ_c⁄vîsi⁄_mode
(
uöt32_t
 
adc
)

203 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_CONT
;

204 
	}
}

214 
	$adc_£t_ªsﬁuti⁄
(
uöt32_t
 
adc
, 
uöt16_t
 
ªsﬁuti⁄
)

216 
	`ADC_CFGR1
(
adc
Ë(ADC_CFGR1◊dcË& ~
ADC_CFGR1_RES_MASK
Ë| 
ªsﬁuti⁄
;

217 
	}
}

223 
	$adc_£t_À·_Æig√d
(
uöt32_t
 
adc
)

225 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_ALIGN
;

226 
	}
}

232 
	$adc_£t_right_Æig√d
(
uöt32_t
 
adc
)

234 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_ALIGN
;

235 
	}
}

241 
	$adc_íabÀ_dma
(
uöt32_t
 
adc
)

243 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_DMAEN
;

244 
	}
}

250 
	$adc_dißbÀ_dma
(
uöt32_t
 
adc
)

252 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_DMAEN
;

253 
	}
}

263 
	$adc_íabÀ_ovîrun_öãºu±
(
uöt32_t
 
adc
)

265 
	`ADC_IER
(
adc
Ë|
ADC_IER_OVRIE
;

266 
	}
}

272 
	$adc_dißbÀ_ovîrun_öãºu±
(
uöt32_t
 
adc
)

274 
	`ADC_IER
(
adc
Ë&~
ADC_IER_OVRIE
;

275 
	}
}

285 
boﬁ
 
	$adc_gë_ovîrun_Êag
(
uöt32_t
 
adc
)

287  
	`ADC_ISR
(
adc
Ë& 
ADC_ISR_OVR
;

288 
	}
}

299 
	$adc_˛ór_ovîrun_Êag
(
uöt32_t
 
adc
)

301 
	`ADC_ISR
(
adc
Ë
ADC_ISR_OVR
;

302 
	}
}

308 
	$adc_íabÀ_eoc_öãºu±
(
uöt32_t
 
adc
)

310 
	`ADC_IER
(
adc
Ë|
ADC_IER_EOCIE
;

311 
	}
}

317 
	$adc_dißbÀ_eoc_öãºu±
(
uöt32_t
 
adc
)

319 
	`ADC_IER
(
adc
Ë&~
ADC_IER_EOCIE
;

320 
	}
}

331 
uöt32_t
 
	$adc_ªad_ªguœr
(
uöt32_t
 
adc
)

333  
	`ADC_DR
(
adc
);

334 
	}
}

342 
	$adc_íabÀ_ãm≥øtuª_£ns‹
()

344 
	`ADC_CCR
(
ADC1
Ë|
ADC_CCR_TSEN
;

345 
	}
}

351 
	$adc_dißbÀ_ãm≥øtuª_£ns‹
()

353 
	`ADC_CCR
(
ADC1
Ë&~
ADC_CCR_TSEN
;

354 
	}
}

363 
	$adc_íabÀ_vªföt
()

365 
	`ADC_CCR
(
ADC1
Ë|
ADC_CCR_VREFEN
;

366 
	}
}

372 
	$adc_dißbÀ_vªföt
()

374 
	`ADC_CCR
(
ADC1
Ë&~
ADC_CCR_VREFEN
;

375 
	}
}

386 
	$adc_°¨t_c⁄vîsi⁄_ªguœr
(
uöt32_t
 
adc
)

389 
	`ADC_CR
(
adc
Ë|
ADC_CR_ADSTART
;

390 
	}
}

	@libopencm3/lib/stm32/common/adc_common_v2_multi.c

35 
	~<lib›ícm3/°m32/adc.h
>

47 
	$adc_£t_ßm∂e_time
(
uöt32_t
 
adc
, 
uöt8_t
 
ch™√l
, uöt8_à
time
)

49 
uöt32_t
 
ªg32
;

51 i‡(
ch™√l
 < 10) {

52 
ªg32
 = 
	`ADC_SMPR1
(
adc
);

53 
ªg32
 &~(0x7 << (
ch™√l
 * 3));

54 
ªg32
 |(
time
 << (
ch™√l
 * 3));

55 
	`ADC_SMPR1
(
adc
Ë
ªg32
;

57 
ªg32
 = 
	`ADC_SMPR2
(
adc
);

58 
ªg32
 &~(0x7 << ((
ch™√l
 - 10) * 3));

59 
ªg32
 |(
time
 << ((
ch™√l
 - 10) * 3));

60 
	`ADC_SMPR2
(
adc
Ë
ªg32
;

62 
	}
}

72 
	$adc_£t_ßm∂e_time_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
, 
uöt8_t
 
time
)

74 
uöt8_t
 
i
;

75 
uöt32_t
 
ªg32
 = 0;

77 
i
 = 0; i <= 9; i++) {

78 
ªg32
 |(
time
 << (
i
 * 3));

80 
	`ADC_SMPR1
(
adc
Ë
ªg32
;

82 
i
 = 10; i <= 17; i++) {

83 
ªg32
 |(
time
 << ((
i
 - 10) * 3));

85 
	`ADC_SMPR2
(
adc
Ë
ªg32
;

86 
	}
}

100 
	$adc_£t_ªguœr_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[])

102 
uöt32_t
 
ªg32_1
 = 0, 
ªg32_2
 = 0, 
ªg32_3
 = 0, 
ªg32_4
 = 0;

103 
uöt8_t
 
i
 = 0;

106 i‡(
Àngth
 > 16) {

110 
i
 = 1; i <
Àngth
; i++) {

111 i‡(
i
 <= 4) {

112 
ªg32_1
 |(
ch™√l
[
i
 - 1] << (i * 6));

114 i‡((
i
 > 4) & (i <= 9)) {

115 
ªg32_2
 |(
ch™√l
[
i
 - 1] << ((i - 4 - 1) * 6));

117 i‡((
i
 > 9) & (i <= 14)) {

118 
ªg32_3
 |(
ch™√l
[
i
 - 1] << ((i - 9 - 1) * 6));

120 i‡((
i
 > 14) & (i <= 16)) {

121 
ªg32_4
 |(
ch™√l
[
i
 - 1] << ((i - 14 - 1) * 6));

124 
ªg32_1
 |((
Àngth
 - 1Ë<< 
ADC_SQR1_L_SHIFT
);

126 
	`ADC_SQR1
(
adc
Ë
ªg32_1
;

127 
	`ADC_SQR2
(
adc
Ë
ªg32_2
;

128 
	`ADC_SQR3
(
adc
Ë
ªg32_3
;

129 
	`ADC_SQR4
(
adc
Ë
ªg32_4
;

130 
	}
}

	@libopencm3/lib/stm32/common/crc_common_all.c

27 
	~<lib›ícm3/°m32/¸c.h
>

38 
	$¸c_ª£t
()

40 
CRC_CR
 |
CRC_CR_RESET
;

41 
	}
}

53 
uöt32_t
 
	$¸c_ˇlcuœã
(
uöt32_t
 
d©a
)

55 
CRC_DR
 = 
d©a
;

57  
CRC_DR
;

58 
	}
}

71 
uöt32_t
 
	$¸c_ˇlcuœã_block
(
uöt32_t
 *
d©≠
, 
size
)

73 
i
;

75 
i
 = 0; i < 
size
; i++) {

76 
CRC_DR
 = 
d©≠
[
i
];

79  
CRC_DR
;

80 
	}
}

	@libopencm3/lib/stm32/common/crc_v2.c

30 
	~<lib›ícm3/°m32/¸c.h
>

38 
	$¸c_ªvî£_ouçut_íabÀ
()

40 
CRC_CR
 |
CRC_CR_REV_OUT
;

41 
	}
}

49 
	$¸c_ªvî£_ouçut_dißbÀ
()

51 
CRC_CR
 &~
CRC_CR_REV_OUT
;

52 
	}
}

61 
	$¸c_£t_ªvî£_öput
(
uöt32_t
 
ªvî£_ö
)

63 
uöt32_t
 
ªg32
 = 
CRC_CR
;

64 
ªg32
 = (ªg32 & ~
CRC_CR_REV_IN
Ë| 
ªvî£_ö
;

65 
CRC_CR
 = 
ªg32
;

66 
	}
}

75 
	$¸c_£t_pﬁysize
(
uöt32_t
 
pﬁysize
)

77 
uöt32_t
 
ªg32
 = 
CRC_CR
;

78 
ªg32
 = (ªg32 & ~
CRC_CR_POLYSIZE
Ë| 
pﬁysize
;

79 
CRC_CR
 = 
ªg32
;

80 
	}
}

98 
	$¸c_£t_pﬁynomül
(
uöt32_t
 
pﬁynomül
)

100 
CRC_POL
 = 
pﬁynomül
;

101 
	}
}

110 
	$¸c_£t_öôül
(
uöt32_t
 
öôül
)

112 
CRC_INIT
 = 
öôül
;

113 
	}
}

	@libopencm3/lib/stm32/common/crs_common_all.c

31 
	~<lib›ícm3/°m32/¸s.h
>

32 
	~<lib›ícm3/°m32/rcc.h
>

38 
	$¸s_autŸrim_usb_íabÀ
()

40 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_CRS
);

42 
CRS_CFGR
 &~
CRS_CFGR_SYNCSRC
;

43 
CRS_CFGR
 |
CRS_CFGR_SYNCSRC_USB_SOF
;

45 
CRS_CR
 |
CRS_CR_AUTOTRIMEN
;

46 
CRS_CR
 |
CRS_CR_CEN
;

47 
	}
}

	@libopencm3/lib/stm32/common/crypto_common_f24.c

35 
	~<lib›ícm3/°m32/¸y±o.h
>

37 
	#CRYP_CR_ALGOMODE_MASK
 ((1 << 19Ë| 
CRYP_CR_ALGOMODE
)

	)

42 
	$¸y±o_waô_busy
()

44 
CRYP_SR
 & 
CRYP_SR_BUSY
);

45 
	}
}

52 
	$¸y±o_£t_key
(
¸y±o_keysize
 
keysize
, 
uöt64_t
 
key
[])

54 
i
;

56 
	`¸y±o_waô_busy
();

58 
CRYP_CR
 = (CRYP_CR & ~
CRYP_CR_KEYSIZE
) |

59 (
keysize
 << 
CRYP_CR_KEYSIZE_SHIFT
);

61 
i
 = 0; i < 4; i++) {

62 
	`CRYP_KR
(
i
Ë
key
[i];

64 
	}
}

73 
	$¸y±o_£t_iv
(
uöt64_t
 
iv
[])

75 
i
;

77 
	`¸y±o_waô_busy
();

79 
i
 = 0; i < 4; i++) {

80 
	`CRYP_IVR
(
i
Ë
iv
[i];

82 
	}
}

89 
	$¸y±o_£t_d©©y≥
(
¸y±o_d©©y≥
 
d©©y≥
)

91 
CRYP_CR
 = (CRYP_CR & ~
CRYP_CR_DATATYPE
) |

92 (
d©©y≥
 << 
CRYP_CR_DATATYPE_SHIFT
);

93 
	}
}

100 
	$¸y±o_£t_Æg‹ôhm
(
¸y±o_mode
 
mode
)

102 
mode
 &~
CRYP_CR_ALGOMODE_MASK
;

104 i‡((
mode
 =
DECRYPT_AES_ECB
Ë|| (modê=
DECRYPT_AES_CBC
)) {

107 
CRYP_CR
 = (CRYP_CR & ~
CRYP_CR_ALGOMODE_MASK
) |

108 
CRYP_CR_ALGOMODE_AES_PREP
;

110 
	`¸y±o_°¨t
();

111 
	`¸y±o_waô_busy
();

115 
CRYP_CR
 = (CRYP_CR & ~
CRYP_CR_ALGOMODE_MASK
Ë| 
mode
;

118 
CRYP_CR
 |
CRYP_CR_FFLUSH
;

119 
	}
}

124 
	$¸y±o_°¨t
()

126 
CRYP_CR
 |
CRYP_CR_CRYPEN
;

127 
	}
}

133 
	$¸y±o_°›
()

135 
CRYP_CR
 &~
CRYP_CR_CRYPEN
;

136 
	}
}

152 
uöt32_t
 
	$¸y±o_¥o˚ss_block
(
uöt32_t
 *
öp
, uöt32_à*
ouç
, uöt32_à
Àngth
)

154 
uöt32_t
 
rd
 = 0, 
wr
 = 0;

157 
rd
 !
Àngth
) {

158 i‡((
wr
 < 
Àngth
Ë&& (
CRYP_SR
 & 
CRYP_SR_IFNF
)) {

159 
CRYP_DIN
 = *
öp
++;

160 
wr
++;

163 i‡(
CRYP_SR
 & 
CRYP_SR_OFNE
) {

164 *
ouç
++ = 
CRYP_DOUT
;

165 
rd
++;

170 
	`¸y±o_waô_busy
();

172  
wr
;

173 
	}
}

	@libopencm3/lib/stm32/common/dac_common_all.c

121 
	~<lib›ícm3/°m32/dac.h
>

123 
	#MASK8
 0xFF

	)

124 
	#MASK12
 0xFFF

	)

136 
	$dac_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
)

138 
dac_ch™√l
) {

139 
CHANNEL_1
:

140 
DAC_CR
 |
DAC_CR_EN1
;

142 
CHANNEL_2
:

143 
DAC_CR
 |
DAC_CR_EN2
;

145 
CHANNEL_D
:

146 
DAC_CR
 |(
DAC_CR_EN1
 | 
DAC_CR_EN2
);

149 
	}
}

159 
	$dac_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
)

161 
dac_ch™√l
) {

162 
CHANNEL_1
:

163 
DAC_CR
 &~
DAC_CR_EN1
;

165 
CHANNEL_2
:

166 
DAC_CR
 &~
DAC_CR_EN2
;

168 
CHANNEL_D
:

169 
DAC_CR
 &~(
DAC_CR_EN1
 | 
DAC_CR_EN2
);

172 
	}
}

185 
	$dac_buf„r_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
)

187 
dac_ch™√l
) {

188 
CHANNEL_1
:

189 
DAC_CR
 &~
DAC_CR_BOFF1
;

191 
CHANNEL_2
:

192 
DAC_CR
 &~
DAC_CR_BOFF2
;

194 
CHANNEL_D
:

195 
DAC_CR
 &~(
DAC_CR_BOFF1
 | 
DAC_CR_BOFF2
);

198 
	}
}

209 
	$dac_buf„r_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
)

211 
dac_ch™√l
) {

212 
CHANNEL_1
:

213 
DAC_CR
 |
DAC_CR_BOFF1
;

215 
CHANNEL_2
:

216 
DAC_CR
 |
DAC_CR_BOFF2
;

218 
CHANNEL_D
:

219 
DAC_CR
 |(
DAC_CR_BOFF1
 | 
DAC_CR_BOFF2
);

222 
	}
}

233 
	$dac_dma_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
)

235 
dac_ch™√l
) {

236 
CHANNEL_1
:

237 
DAC_CR
 |
DAC_CR_DMAEN1
;

239 
CHANNEL_2
:

240 
DAC_CR
 |
DAC_CR_DMAEN2
;

242 
CHANNEL_D
:

243 
DAC_CR
 |(
DAC_CR_DMAEN1
 | 
DAC_CR_DMAEN2
);

246 
	}
}

256 
	$dac_dma_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
)

258 
dac_ch™√l
) {

259 
CHANNEL_1
:

260 
DAC_CR
 &~
DAC_CR_DMAEN1
;

262 
CHANNEL_2
:

263 
DAC_CR
 &~
DAC_CR_DMAEN2
;

265 
CHANNEL_D
:

266 
DAC_CR
 &~(
DAC_CR_DMAEN1
 | 
DAC_CR_DMAEN2
);

269 
	}
}

282 
	$dac_åiggî_íabÀ
(
d©a_ch™√l
 
dac_ch™√l
)

284 
dac_ch™√l
) {

285 
CHANNEL_1
:

286 
DAC_CR
 |
DAC_CR_TEN1
;

288 
CHANNEL_2
:

289 
DAC_CR
 |
DAC_CR_TEN2
;

291 
CHANNEL_D
:

292 
DAC_CR
 |(
DAC_CR_TEN1
 | 
DAC_CR_TEN2
);

295 
	}
}

305 
	$dac_åiggî_dißbÀ
(
d©a_ch™√l
 
dac_ch™√l
)

307 
dac_ch™√l
) {

308 
CHANNEL_1
:

309 
DAC_CR
 &~
DAC_CR_TEN1
;

311 
CHANNEL_2
:

312 
DAC_CR
 &~
DAC_CR_TEN2
;

314 
CHANNEL_D
:

315 
DAC_CR
 &~(
DAC_CR_TEN1
 | 
DAC_CR_TEN2
);

318 
	}
}

331 
	$dac_£t_åiggî_sour˚
(
uöt32_t
 
dac_åig_§c
)

333 
DAC_CR
 |
dac_åig_§c
;

334 
	}
}

350 
	$dac_£t_wavef‹m_gíî©i⁄
(
uöt32_t
 
dac_wave_ís
)

352 
DAC_CR
 |
dac_wave_ís
;

353 
	}
}

363 
	$dac_dißbÀ_wavef‹m_gíî©i⁄
(
d©a_ch™√l
 
dac_ch™√l
)

365 
dac_ch™√l
) {

366 
CHANNEL_1
:

367 
DAC_CR
 &~
DAC_CR_WAVE1_DIS
;

369 
CHANNEL_2
:

370 
DAC_CR
 &~
DAC_CR_WAVE2_DIS
;

372 
CHANNEL_D
:

373 
DAC_CR
 &~(
DAC_CR_WAVE1_DIS
 | 
DAC_CR_WAVE2_DIS
);

376 
	}
}

398 
	$dac_£t_wavef‹m_ch¨a˘îi°ics
(
uöt32_t
 
dac_mamp
)

400 
DAC_CR
 |
dac_mamp
;

401 
	}
}

417 
	$dac_lﬂd_d©a_buf„r_sögÀ
(
uöt16_t
 
dac_d©a
, 
d©a_Æign
 
dac_d©a_f‹m©
,

418 
d©a_ch™√l
 
dac_ch™√l
)

420 i‡(
dac_ch™√l
 =
CHANNEL_1
) {

421 
dac_d©a_f‹m©
) {

422 
RIGHT8
:

423 
DAC_DHR8R1
 = 
dac_d©a
;

425 
RIGHT12
:

426 
DAC_DHR12R1
 = 
dac_d©a
;

428 
LEFT12
:

429 
DAC_DHR12L1
 = 
dac_d©a
;

432 } i‡(
dac_ch™√l
 =
CHANNEL_2
) {

433 
dac_d©a_f‹m©
) {

434 
RIGHT8
:

435 
DAC_DHR8R2
 = 
dac_d©a
;

437 
RIGHT12
:

438 
DAC_DHR12R2
 = 
dac_d©a
;

440 
LEFT12
:

441 
DAC_DHR12L2
 = 
dac_d©a
;

445 
	}
}

461 
	$dac_lﬂd_d©a_buf„r_duÆ
(
uöt16_t
 
dac_d©a1
, uöt16_à
dac_d©a2
,

462 
d©a_Æign
 
dac_d©a_f‹m©
)

464 
dac_d©a_f‹m©
) {

465 
RIGHT8
:

466 
DAC_DHR8RD
 = ((
dac_d©a1
 & 
MASK8
Ë| ((
dac_d©a2
 & MASK8) << 8));

468 
RIGHT12
:

469 
DAC_DHR12RD
 = ((
dac_d©a1
 & 
MASK12
) |

470 ((
dac_d©a2
 & 
MASK12
) << 16));

472 
LEFT12
:

473 
DAC_DHR12LD
 = ((
dac_d©a1
 & 
MASK12
) |

474 ((
dac_d©a2
 & 
MASK12
) << 16));

477 
	}
}

488 
	$dac_so·w¨e_åiggî
(
d©a_ch™√l
 
dac_ch™√l
)

490 
dac_ch™√l
) {

491 
CHANNEL_1
:

492 
DAC_SWTRIGR
 |
DAC_SWTRIGR_SWTRIG1
;

494 
CHANNEL_2
:

495 
DAC_SWTRIGR
 |
DAC_SWTRIGR_SWTRIG2
;

497 
CHANNEL_D
:

498 
DAC_SWTRIGR
 |(
DAC_SWTRIGR_SWTRIG1
 | 
DAC_SWTRIGR_SWTRIG2
);

501 
	}
}

	@libopencm3/lib/stm32/common/dma_common_f24.c

49 
	~<lib›ícm3/°m32/dma.h
>

60 
	$dma_°ªam_ª£t
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

63 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~
DMA_SxCR_EN
;

65 
	`DMA_SCR
(
dma
, 
°ªam
) = 0;

67 
	`DMA_SNDTR
(
dma
, 
°ªam
) = 0;

69 
	`DMA_SPAR
(
dma
, 
°ªam
) = 0;

70 
	`DMA_SM0AR
(
dma
, 
°ªam
) = 0;

71 
	`DMA_SM1AR
(
dma
, 
°ªam
) = 0;

73 
	`DMA_SFCR
(
dma
, 
°ªam
) = 0x21;

75 
uöt32_t
 
mask
 = 
	`DMA_ISR_MASK
(
°ªam
);

76 i‡(
°ªam
 < 4) {

77 
	`DMA_LIFCR
(
dma
Ë|
mask
;

79 
	`DMA_HIFCR
(
dma
Ë|
mask
;

81 
	}
}

95 
	$dma_˛ór_öãºu±_Êags
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
,

96 
uöt32_t
 
öãºu±s
)

99 
uöt32_t
 
Êags
 = (
öãºu±s
 << 
	`DMA_ISR_OFFSET
(
°ªam
));

103 i‡(
°ªam
 < 4) {

104 
	`DMA_LIFCR
(
dma
Ë
Êags
;

106 
	`DMA_HIFCR
(
dma
Ë
Êags
;

108 
	}
}

121 
boﬁ
 
	$dma_gë_öãºu±_Êag
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
öãºu±
)

126 
uöt32_t
 
Êag
 = (
öãºu±
 << 
	`DMA_ISR_OFFSET
(
°ªam
));

128 i‡(
°ªam
 < 4) {

129  ((
	`DMA_LISR
(
dma
Ë& 
Êag
) > 0);

131  ((
	`DMA_HISR
(
dma
Ë& 
Êag
) > 0);

133 
	}
}

149 
	$dma_£t_å™s„r_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
dúe˘i⁄
)

151 
uöt32_t
 
ªg32
 = (
	`DMA_SCR
(
dma
, 
°ªam
Ë& ~
DMA_SxCR_DIR_MASK
);

156 i‡(
dúe˘i⁄
 =
DMA_SxCR_DIR_MEM_TO_MEM
) {

157 
ªg32
 &~(
DMA_SxCR_CIRC
 | 
DMA_SxCR_DBM
);

160 
	`DMA_SCR
(
dma
, 
°ªam
Ë(
ªg32
 | 
dúe˘i⁄
);

161 
	}
}

177 
	$dma_£t_¥i‹ôy
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
¥io
)

179 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~(
DMA_SxCR_PL_MASK
);

180 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
¥io
;

181 
	}
}

196 
	$dma_£t_mem‹y_size
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
mem_size
)

198 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~(
DMA_SxCR_MSIZE_MASK
);

199 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
mem_size
;

200 
	}
}

217 
	$dma_£t_≥rùhîÆ_size
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
,

218 
uöt32_t
 
≥rùhîÆ_size
)

220 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~(
DMA_SxCR_PSIZE_MASK
);

221 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
≥rùhîÆ_size
;

222 
	}
}

237 
	$dma_íabÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

239 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
DMA_SxCR_MINC
;

240 
	}
}

251 
	$dma_dißbÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

253 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~
DMA_SxCR_MINC
;

254 
	}
}

269 
	$dma_íabÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

271 
uöt32_t
 
ªg32
 = (
	`DMA_SCR
(
dma
, 
°ªam
Ë| 
DMA_SxCR_PINC
);

272 
	`DMA_SCR
(
dma
, 
°ªam
Ë(
ªg32
 & ~
DMA_SxCR_PINCOS
);

273 
	}
}

284 
	$dma_dißbÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

286 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~
DMA_SxCR_PINC
;

287 
	}
}

302 
	$dma_íabÀ_fixed_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

304 
	`DMA_SCR
(
dma
, 
°ªam
Ë|(
DMA_SxCR_PINC
 | 
DMA_SxCR_PINCOS
);

305 
	}
}

324 
	$dma_íabÀ_cúcuœr_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

326 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
DMA_SxCR_CIRC
;

327 
	}
}

343 
	$dma_ch™√l_£À˘
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
ch™√l
)

345 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
ch™√l
;

346 
	}
}

361 
	$dma_£t_mem‹y_bur°
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
bur°
)

363 
uöt32_t
 
ªg32
 = (
	`DMA_SCR
(
dma
, 
°ªam
Ë& ~
DMA_SxCR_MBURST_MASK
);

364 
	`DMA_SCR
(
dma
, 
°ªam
Ë(
ªg32
 | 
bur°
);

365 
	}
}

380 
	$dma_£t_≥rùhîÆ_bur°
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
bur°
)

382 
uöt32_t
 
ªg32
 = (
	`DMA_SCR
(
dma
, 
°ªam
Ë& ~
DMA_SxCR_PBURST_MASK
);

383 
	`DMA_SCR
(
dma
, 
°ªam
Ë(
ªg32
 | 
bur°
);

384 
	}
}

399 
	$dma_£t_öôül_èrgë
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt8_à
mem‹y
)

401 
uöt32_t
 
ªg32
 = (
	`DMA_SCR
(
dma
, 
°ªam
Ë& ~
DMA_SxCR_CT
);

402 i‡(
mem‹y
 == 1) {

403 
ªg32
 |
DMA_SxCR_CT
;

406 
	`DMA_SCR
(
dma
, 
°ªam
Ë
ªg32
;

407 
	}
}

422 
uöt8_t
 
	$dma_gë_èrgë
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

424 i‡(
	`DMA_SCR
(
dma
, 
°ªam
Ë& 
DMA_SxCR_CT
) {

429 
	}
}

446 
	$dma_íabÀ_doubÀ_buf„r_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

448 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
DMA_SxCR_DBM
;

449 
	}
}

458 
	$dma_dißbÀ_doubÀ_buf„r_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

460 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~
DMA_SxCR_DBM
;

461 
	}
}

475 
	$dma_£t_≥rùhîÆ_Êow_c⁄åﬁ
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

477 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
DMA_SxCR_PFCTRL
;

478 
	}
}

491 
	$dma_£t_dma_Êow_c⁄åﬁ
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

493 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~
DMA_SxCR_PFCTRL
;

494 
	}
}

503 
	$dma_íabÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

505 
	`dma_˛ór_öãºu±_Êags
(
dma
, 
°ªam
, 
DMA_TEIF
);

506 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
DMA_SxCR_TEIE
;

507 
	}
}

516 
	$dma_dißbÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

518 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~
DMA_SxCR_TEIE
;

519 
	}
}

528 
	$dma_íabÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

530 
	`dma_˛ór_öãºu±_Êags
(
dma
, 
°ªam
, 
DMA_HTIF
);

531 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
DMA_SxCR_HTIE
;

532 
	}
}

541 
	$dma_dißbÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

543 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~
DMA_SxCR_HTIE
;

544 
	}
}

553 
	$dma_íabÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

555 
	`dma_˛ór_öãºu±_Êags
(
dma
, 
°ªam
, 
DMA_TCIF
);

556 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
DMA_SxCR_TCIE
;

557 
	}
}

566 
	$dma_dißbÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

568 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~
DMA_SxCR_TCIE
;

569 
	}
}

578 
	$dma_íabÀ_dúe˘_mode_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

580 
	`dma_˛ór_öãºu±_Êags
(
dma
, 
°ªam
, 
DMA_DMEIF
);

581 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
DMA_SxCR_DMEIE
;

582 
	}
}

591 
	$dma_dißbÀ_dúe˘_mode_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

593 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~
DMA_SxCR_DMEIE
;

594 
	}
}

603 
	$dma_íabÀ_fifo_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

605 
	`dma_˛ór_öãºu±_Êags
(
dma
, 
°ªam
, 
DMA_FEIF
);

606 
	`DMA_SFCR
(
dma
, 
°ªam
Ë|
DMA_SxFCR_FEIE
;

607 
	}
}

616 
	$dma_dißbÀ_fifo_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

618 
	`DMA_SFCR
(
dma
, 
°ªam
Ë&~
DMA_SxFCR_FEIE
;

619 
	}
}

632 
uöt32_t
 
	$dma_fifo_°©us
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

634  
	`DMA_SFCR
(
dma
, 
°ªam
Ë& 
DMA_SxFCR_FS_MASK
;

635 
	}
}

648 
	$dma_íabÀ_dúe˘_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

650 
	`DMA_SFCR
(
dma
, 
°ªam
Ë&~
DMA_SxFCR_DMDIS
;

651 
	}
}

662 
	$dma_íabÀ_fifo_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

664 
	`DMA_SFCR
(
dma
, 
°ªam
Ë|
DMA_SxFCR_DMDIS
;

665 
	}
}

678 
	$dma_£t_fifo_thªshﬁd
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
thªshﬁd
)

680 
uöt32_t
 
ªg32
 = (
	`DMA_SFCR
(
dma
, 
°ªam
Ë& ~
DMA_SxFCR_FTH_MASK
);

681 
	`DMA_SFCR
(
dma
, 
°ªam
Ë(
ªg32
 | 
thªshﬁd
);

682 
	}
}

691 
	$dma_íabÀ_°ªam
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

693 
	`DMA_SCR
(
dma
, 
°ªam
Ë|
DMA_SxCR_EN
;

694 
	}
}

705 
	$dma_dißbÀ_°ªam
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
)

707 
	`DMA_SCR
(
dma
, 
°ªam
Ë&~
DMA_SxCR_EN
;

708 
	}
}

724 
	$dma_£t_≥rùhîÆ_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
addªss
)

726 i‡(!(
	`DMA_SCR
(
dma
, 
°ªam
Ë& 
DMA_SxCR_EN
)) {

727 
	`DMA_SPAR
(
dma
, 
°ªam
Ë(
uöt32_t
 *Ë
addªss
;

729 
	}
}

746 
	$dma_£t_mem‹y_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
addªss
)

748 
uöt32_t
 
ªg32
 = 
	`DMA_SCR
(
dma
, 
°ªam
);

749 i‡(!(
ªg32
 & 
DMA_SxCR_EN
) ||

750 ((
ªg32
 & 
DMA_SxCR_CT
Ë&& (ªg32 & 
DMA_SxCR_DBM
))) {

751 
	`DMA_SM0AR
(
dma
, 
°ªam
Ë(
uöt32_t
 *Ë
addªss
;

753 
	}
}

768 
	$dma_£t_mem‹y_addªss_1
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, uöt32_à
addªss
)

770 
uöt32_t
 
ªg32
 = 
	`DMA_SCR
(
dma
, 
°ªam
);

771 i‡(!(
ªg32
 & 
DMA_SxCR_EN
) ||

772 (!(
ªg32
 & 
DMA_SxCR_CT
Ë&& (ªg32 & 
DMA_SxCR_DBM
))) {

773 
	`DMA_SM1AR
(
dma
, 
°ªam
Ë(
uöt32_t
 *Ë
addªss
;

775 
	}
}

789 
	$dma_£t_numbî_of_d©a
(
uöt32_t
 
dma
, 
uöt8_t
 
°ªam
, 
uöt16_t
 
numbî
)

791 
	`DMA_SNDTR
(
dma
, 
°ªam
Ë
numbî
;

792 
	}
}

	@libopencm3/lib/stm32/common/dma_common_l1f013.c

41 
	~<lib›ícm3/°m32/dma.h
>

52 
	$dma_ch™√l_ª£t
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

55 
	`DMA_CCR
(
dma
, 
ch™√l
) = 0;

57 
	`DMA_CNDTR
(
dma
, 
ch™√l
) = 0;

59 
	`DMA_CPAR
(
dma
, 
ch™√l
) = 0;

61 
	`DMA_CMAR
(
dma
, 
ch™√l
) = 0;

63 
	`DMA_IFCR
(
dma
Ë|
	`DMA_IFCR_CIF
(
ch™√l
);

64 
	}
}

78 
	$dma_˛ór_öãºu±_Êags
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
,

79 
uöt32_t
 
öãºu±s
)

82 
uöt32_t
 
Êags
 = (
öãºu±s
 << 
	`DMA_FLAG_OFFSET
(
ch™√l
));

83 
	`DMA_IFCR
(
dma
Ë
Êags
;

84 
	}
}

97 
boﬁ
 
	$dma_gë_öãºu±_Êag
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
öãºu±
)

100 
uöt32_t
 
Êag
 = (
öãºu±
 << 
	`DMA_FLAG_OFFSET
(
ch™√l
));

101  ((
	`DMA_ISR
(
dma
Ë& 
Êag
) > 0);

102 
	}
}

115 
	$dma_íabÀ_mem2mem_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

117 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_MEM2MEM
;

118 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_CIRC
;

119 
	}
}

132 
	$dma_£t_¥i‹ôy
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
¥io
)

134 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~(
DMA_CCR_PL_MASK
);

135 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
¥io
;

136 
	}
}

149 
	$dma_£t_mem‹y_size
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
mem_size
)

152 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~(
DMA_CCR_MSIZE_MASK
);

153 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
mem_size
;

154 
	}
}

169 
	$dma_£t_≥rùhîÆ_size
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
,

170 
uöt32_t
 
≥rùhîÆ_size
)

172 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~(
DMA_CCR_PSIZE_MASK
);

173 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
≥rùhîÆ_size
;

174 
	}
}

187 
	$dma_íabÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

189 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_MINC
;

190 
	}
}

199 
	$dma_dißbÀ_mem‹y_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

201 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_MINC
;

202 
	}
}

215 
	$dma_íabÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

217 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_PINC
;

218 
	}
}

227 
	$dma_dißbÀ_≥rùhîÆ_ö¸emít_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

229 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_PINC
;

230 
	}
}

246 
	$dma_íabÀ_cúcuœr_mode
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

248 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_CIRC
;

249 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_MEM2MEM
;

250 
	}
}

261 
	$dma_£t_ªad_‰om_≥rùhîÆ
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

263 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_DIR
;

264 
	}
}

275 
	$dma_£t_ªad_‰om_mem‹y
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

277 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_DIR
;

278 
	}
}

287 
	$dma_íabÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

289 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_TEIE
;

290 
	}
}

299 
	$dma_dißbÀ_å™s„r_îr‹_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

301 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_TEIE
;

302 
	}
}

311 
	$dma_íabÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

313 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_HTIE
;

314 
	}
}

323 
	$dma_dißbÀ_hÆf_å™s„r_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

325 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_HTIE
;

326 
	}
}

335 
	$dma_íabÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

337 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_TCIE
;

338 
	}
}

347 
	$dma_dißbÀ_å™s„r_com∂ëe_öãºu±
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

349 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_TCIE
;

350 
	}
}

359 
	$dma_íabÀ_ch™√l
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

361 
	`DMA_CCR
(
dma
, 
ch™√l
Ë|
DMA_CCR_EN
;

362 
	}
}

374 
	$dma_dißbÀ_ch™√l
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
)

376 
	`DMA_CCR
(
dma
, 
ch™√l
Ë&~
DMA_CCR_EN
;

377 
	}
}

393 
	$dma_£t_≥rùhîÆ_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
addªss
)

395 i‡(!(
	`DMA_CCR
(
dma
, 
ch™√l
Ë& 
DMA_CCR_EN
)) {

396 
	`DMA_CPAR
(
dma
, 
ch™√l
Ë(
uöt32_t
Ë
addªss
;

398 
	}
}

411 
	$dma_£t_mem‹y_addªss
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, uöt32_à
addªss
)

413 i‡(!(
	`DMA_CCR
(
dma
, 
ch™√l
Ë& 
DMA_CCR_EN
)) {

414 
	`DMA_CMAR
(
dma
, 
ch™√l
Ë(
uöt32_t
Ë
addªss
;

416 
	}
}

430 
	$dma_£t_numbî_of_d©a
(
uöt32_t
 
dma
, 
uöt8_t
 
ch™√l
, 
uöt16_t
 
numbî
)

432 
	`DMA_CNDTR
(
dma
, 
ch™√l
Ë
numbî
;

433 
	}
}

	@libopencm3/lib/stm32/common/exti_common_all.c

26 
	~<lib›ícm3/°m32/exti.h
>

27 
	~<lib›ícm3/°m32/gpio.h
>

28 #i‡!
deföed
(
AFIO_BASE
)

29 
	~<lib›ícm3/°m32/syscfg.h
>

32 
	$exti_£t_åiggî
(
uöt32_t
 
extis
, 
exti_åiggî_ty≥
 
åig
)

34 
åig
) {

35 
EXTI_TRIGGER_RISING
:

36 
EXTI_RTSR
 |
extis
;

37 
EXTI_FTSR
 &~
extis
;

39 
EXTI_TRIGGER_FALLING
:

40 
EXTI_RTSR
 &~
extis
;

41 
EXTI_FTSR
 |
extis
;

43 
EXTI_TRIGGER_BOTH
:

44 
EXTI_RTSR
 |
extis
;

45 
EXTI_FTSR
 |
extis
;

48 
	}
}

50 
	$exti_íabÀ_ªque°
(
uöt32_t
 
extis
)

53 
EXTI_IMR
 |
extis
;

56 
EXTI_EMR
 |
extis
;

57 
	}
}

59 
	$exti_dißbÀ_ªque°
(
uöt32_t
 
extis
)

62 
EXTI_IMR
 &~
extis
;

65 
EXTI_EMR
 &~
extis
;

66 
	}
}

72 
	$exti_ª£t_ªque°
(
uöt32_t
 
extis
)

74 
EXTI_PR
 = 
extis
;

75 
	}
}

80 
uöt32_t
 
	$exti_gë_Êag_°©us
(
uöt32_t
 
exti
)

82  
EXTI_PR
 & 
exti
;

83 
	}
}

91 
	$exti_£À˘_sour˚
(
uöt32_t
 
exti
, uöt32_à
gpi›‹t
)

93 
uöt32_t
 
löe
;

94 
löe
 = 0;Üine < 16;Üine++) {

95 i‡(!(
exti
 & (1 << 
löe
))) {

99 
uöt32_t
 
bôs
 = 0, 
mask
 = 0x0F;

101 
gpi›‹t
) {

102 
GPIOA
:

103 
bôs
 = 0;

105 
GPIOB
:

106 
bôs
 = 1;

108 
GPIOC
:

109 
bôs
 = 2;

111 
GPIOD
:

112 
bôs
 = 3;

114 #i‡
	`deföed
(
GPIOE
Ë&& deföed(
GPIO_PORT_E_BASE
)

115 
GPIOE
:

116 
bôs
 = 4;

119 #i‡
	`deföed
(
GPIOF
Ë&& deföed(
GPIO_PORT_F_BASE
)

120 
GPIOF
:

121 
bôs
 = 5;

124 #i‡
	`deföed
(
GPIOG
Ë&& deföed(
GPIO_PORT_G_BASE
)

125 
GPIOG
:

126 
bôs
 = 6;

129 #i‡
	`deföed
(
GPIOH
Ë&& deföed(
GPIO_PORT_H_BASE
)

130 
GPIOH
:

131 
bôs
 = 7;

134 #i‡
	`deföed
(
GPIOI
Ë&& deföed(
GPIO_PORT_I_BASE
)

135 
GPIOI
:

136 
bôs
 = 8;

139 #i‡
	`deföed
(
GPIOJ
Ë&& deföed(
GPIO_PORT_J_BASE
)

140 
GPIOJ
:

141 
bôs
 = 9;

144 #i‡
	`deföed
(
GPIOK
Ë&& deföed(
GPIO_PORT_K_BASE
)

145 
GPIOK
:

146 
bôs
 = 10;

151 
uöt8_t
 
shi·
 = (uöt8_t)(4 * (
löe
 % 4));

152 
uöt32_t
 
ªg
 = 
löe
 / 4;

153 
bôs
 <<
shi·
;

154 
mask
 <<
shi·
;

156 #i‡
	`deföed
(
AFIO_BASE
)

157 
	`AFIO_EXTICR
(
ªg
Ë(AFIO_EXTICR‘egË& ~
mask
Ë| 
bôs
;

159 
	`SYSCFG_EXTICR
(
ªg
Ë(SYSCFG_EXTICR‘egË& ~
mask
Ë| 
bôs
;

162 
	}
}

	@libopencm3/lib/stm32/common/flash_common_f01.c

26 
	~<lib›ícm3/°m32/Êash.h
>

40 
	$Êash_¥e„tch_íabÀ
()

42 
FLASH_ACR
 |
FLASH_ACR_PRFTBE
;

43 
	}
}

52 
	$Êash_¥e„tch_dißbÀ
()

54 
FLASH_ACR
 &~
FLASH_ACR_PRFTBE
;

55 
	}
}

67 
	$Êash_£t_ws
(
uöt32_t
 
ws
)

69 
FLASH_ACR
 = (FLASH_ACR & ~
FLASH_ACR_LATENCY
Ë| 
ws
;

70 
	}
}

79 
	$Êash_u∆ock
()

82 
FLASH_CR
 |
FLASH_CR_LOCK
;

85 
FLASH_KEYR
 = 
FLASH_KEYR_KEY1
;

86 
FLASH_KEYR
 = 
FLASH_KEYR_KEY2
;

87 
	}
}

95 
	$Êash_lock
()

97 
FLASH_CR
 |
FLASH_CR_LOCK
;

98 
	}
}

105 
	$Êash_˛ór_pgîr_Êag
()

107 
FLASH_SR
 |
FLASH_SR_PGERR
;

108 
	}
}

115 
	$Êash_˛ór_e›_Êag
()

117 
FLASH_SR
 |
FLASH_SR_EOP
;

118 
	}
}

125 
	$Êash_˛ór_wΩπîr_Êag
()

127 
FLASH_SR
 |
FLASH_SR_WRPRTERR
;

128 
	}
}

135 
	$Êash_˛ór_bsy_Êag
()

137 
FLASH_SR
 &~
FLASH_SR_BSY
;

138 
	}
}

147 
	$Êash_waô_f‹_œ°_›î©i⁄
()

149 (
	`Êash_gë_°©us_Êags
(Ë& 
FLASH_SR_BSY
) == FLASH_SR_BSY);

150 
	}
}

165 
	$Êash_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
)

167 
	`Êash_¥ogøm_hÆf_w‹d
(
addªss
, (
uöt16_t
)
d©a
);

168 
	`Êash_¥ogøm_hÆf_w‹d
(
addªss
+2, (
uöt16_t
)(
d©a
>>16));

169 
	}
}

178 
	$Êash_u∆ock_›ti⁄_byãs
()

181 
FLASH_OPTKEYR
 = 
FLASH_KEYR_KEY1
;

182 
FLASH_OPTKEYR
 = 
FLASH_KEYR_KEY2
;

183 
	}
}

193 
	$Êash_îa£_›ti⁄_byãs
()

195 
	`Êash_waô_f‹_œ°_›î©i⁄
();

197 i‡((
FLASH_CR
 & 
FLASH_CR_OPTWRE
) == 0) {

198 
	`Êash_u∆ock_›ti⁄_byãs
();

201 
FLASH_CR
 |
FLASH_CR_OPTER
;

202 
FLASH_CR
 |
FLASH_CR_STRT
;

203 
	`Êash_waô_f‹_œ°_›î©i⁄
();

204 
FLASH_CR
 &~
FLASH_CR_OPTER
;

205 
	}
}

220 
	$Êash_¥ogøm_›ti⁄_byãs
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
)

222 
	`Êash_waô_f‹_œ°_›î©i⁄
();

224 i‡((
FLASH_CR
 & 
FLASH_CR_OPTWRE
) == 0) {

225 
	`Êash_u∆ock_›ti⁄_byãs
();

228 
FLASH_CR
 |
FLASH_CR_OPTPG
;

229 
	`MMIO16
(
addªss
Ë
d©a
;

230 
	`Êash_waô_f‹_œ°_›î©i⁄
();

231 
FLASH_CR
 &~
FLASH_CR_OPTPG
;

232 
	}
}

	@libopencm3/lib/stm32/common/flash_common_f234.c

27 
	~<lib›ícm3/°m32/Êash.h
>

39 
	$Êash_£t_ws
(
uöt32_t
 
ws
)

41 
uöt32_t
 
ªg32
;

43 
ªg32
 = 
FLASH_ACR
;

44 
ªg32
 &~(
FLASH_ACR_LATENCY_MASK
);

45 
ªg32
 |
ws
;

46 
FLASH_ACR
 = 
ªg32
;

47 
	}
}

56 
	$Êash_u∆ock
()

59 
FLASH_CR
 |
FLASH_CR_LOCK
;

62 
FLASH_KEYR
 = 
FLASH_KEYR_KEY1
;

63 
FLASH_KEYR
 = 
FLASH_KEYR_KEY2
;

64 
	}
}

72 
	$Êash_lock
()

74 
FLASH_CR
 |
FLASH_CR_LOCK
;

75 
	}
}

82 
	$Êash_˛ór_pg≥º_Êag
()

84 
FLASH_SR
 |
FLASH_SR_PGPERR
;

85 
	}
}

92 
	$Êash_˛ór_e›_Êag
()

94 
FLASH_SR
 |
FLASH_SR_EOP
;

95 
	}
}

102 
	$Êash_˛ór_bsy_Êag
()

104 
FLASH_SR
 &~
FLASH_SR_BSY
;

105 
	}
}

115 
	$Êash_waô_f‹_œ°_›î©i⁄
()

117 (
FLASH_SR
 & 
FLASH_SR_BSY
) == FLASH_SR_BSY);

118 
	}
}

	@libopencm3/lib/stm32/common/flash_common_f24.c

27 
	~<lib›ícm3/°m32/Êash.h
>

38 
ölöe
 
	$Êash_£t_¥ogøm_size
(
uöt32_t
 
psize
)

40 
FLASH_CR
 &~(
FLASH_CR_PROGRAM_MASK
 << 
FLASH_CR_PROGRAM_SHIFT
);

41 
FLASH_CR
 |
psize
 << 
FLASH_CR_PROGRAM_SHIFT
;

42 
	}
}

49 
	$Êash_dˇche_íabÀ
()

51 
FLASH_ACR
 |
FLASH_ACR_DCEN
;

52 
	}
}

59 
	$Êash_dˇche_dißbÀ
()

61 
FLASH_ACR
 &~
FLASH_ACR_DCEN
;

62 
	}
}

69 
	$Êash_iˇche_íabÀ
()

71 
FLASH_ACR
 |
FLASH_ACR_ICEN
;

72 
	}
}

79 
	$Êash_iˇche_dißbÀ
()

81 
FLASH_ACR
 &~
FLASH_ACR_ICEN
;

82 
	}
}

96 
	$Êash_¥e„tch_íabÀ
()

98 
FLASH_ACR
 |
FLASH_ACR_PRFTEN
;

99 
	}
}

108 
	$Êash_¥e„tch_dißbÀ
()

110 
FLASH_ACR
 &~
FLASH_ACR_PRFTEN
;

111 
	}
}

119 
	$Êash_dˇche_ª£t
()

121 
FLASH_ACR
 |
FLASH_ACR_DCRST
;

122 
	}
}

130 
	$Êash_iˇche_ª£t
()

132 
FLASH_ACR
 |
FLASH_ACR_ICRST
;

133 
	}
}

141 
	$Êash_˛ór_pg£º_Êag
()

143 
FLASH_SR
 |
FLASH_SR_PGSERR
;

144 
	}
}

151 
	$Êash_˛ór_pg´º_Êag
()

153 
FLASH_SR
 |
FLASH_SR_PGAERR
;

154 
	}
}

161 
	$Êash_˛ór_wΩîr_Êag
()

163 
FLASH_SR
 |
FLASH_SR_WRPERR
;

164 
	}
}

172 
	$Êash_˛ór_°©us_Êags
()

174 
	`Êash_˛ór_pg£º_Êag
();

175 
	`Êash_˛ór_pg´º_Êag
();

176 
	`Êash_˛ór_wΩîr_Êag
();

177 
	`Êash_˛ór_pg≥º_Êag
();

178 
	`Êash_˛ór_e›_Êag
();

179 
	`Êash_˛ór_bsy_Êag
();

180 
	}
}

189 
	$Êash_u∆ock_›ti⁄_byãs
()

192 
FLASH_OPTCR
 |
FLASH_OPTCR_OPTLOCK
;

195 
FLASH_OPTKEYR
 = 
FLASH_OPTKEYR_KEY1
;

196 
FLASH_OPTKEYR
 = 
FLASH_OPTKEYR_KEY2
;

197 
	}
}

206 
	$Êash_lock_›ti⁄_byãs
()

208 
FLASH_OPTCR
 |
FLASH_OPTCR_OPTLOCK
;

209 
	}
}

222 
	$Êash_¥ogøm_doubÀ_w‹d
(
uöt32_t
 
addªss
, 
uöt64_t
 
d©a
)

225 
	`Êash_waô_f‹_œ°_›î©i⁄
();

226 
	`Êash_£t_¥ogøm_size
(
FLASH_CR_PROGRAM_X64
);

229 
FLASH_CR
 |
FLASH_CR_PG
;

232 
	`MMIO64
(
addªss
Ë
d©a
;

235 
	`Êash_waô_f‹_œ°_›î©i⁄
();

238 
FLASH_CR
 &~
FLASH_CR_PG
;

239 
	}
}

252 
	$Êash_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
)

255 
	`Êash_waô_f‹_œ°_›î©i⁄
();

256 
	`Êash_£t_¥ogøm_size
(
FLASH_CR_PROGRAM_X32
);

259 
FLASH_CR
 |
FLASH_CR_PG
;

262 
	`MMIO32
(
addªss
Ë
d©a
;

265 
	`Êash_waô_f‹_œ°_›î©i⁄
();

268 
FLASH_CR
 &~
FLASH_CR_PG
;

269 
	}
}

282 
	$Êash_¥ogøm_hÆf_w‹d
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
)

284 
	`Êash_waô_f‹_œ°_›î©i⁄
();

285 
	`Êash_£t_¥ogøm_size
(
FLASH_CR_PROGRAM_X16
);

287 
FLASH_CR
 |
FLASH_CR_PG
;

289 
	`MMIO16
(
addªss
Ë
d©a
;

291 
	`Êash_waô_f‹_œ°_›î©i⁄
();

293 
FLASH_CR
 &~
FLASH_CR_PG
;

294 
	}
}

307 
	$Êash_¥ogøm_byã
(
uöt32_t
 
addªss
, 
uöt8_t
 
d©a
)

309 
	`Êash_waô_f‹_œ°_›î©i⁄
();

310 
	`Êash_£t_¥ogøm_size
(
FLASH_CR_PROGRAM_X8
);

312 
FLASH_CR
 |
FLASH_CR_PG
;

314 
	`MMIO8
(
addªss
Ë
d©a
;

316 
	`Êash_waô_f‹_œ°_›î©i⁄
();

318 
FLASH_CR
 &~
FLASH_CR_PG
;

319 
	}
}

333 
	$Êash_¥ogøm
(
uöt32_t
 
addªss
, c⁄° 
uöt8_t
 *
d©a
, uöt32_à
Àn
)

338 
uöt32_t
 
i
;

339 
i
 = 0; i < 
Àn
; i++) {

340 
	`Êash_¥ogøm_byã
(
addªss
+
i
, 
d©a
[i]);

342 
	}
}

357 
	$Êash_îa£_£˘‹
(
uöt8_t
 
£˘‹
, 
uöt32_t
 
¥ogøm_size
)

359 
	`Êash_waô_f‹_œ°_›î©i⁄
();

360 
	`Êash_£t_¥ogøm_size
(
¥ogøm_size
);

362 
FLASH_CR
 &~(
FLASH_CR_SNB_MASK
 << 
FLASH_CR_SNB_SHIFT
);

363 
FLASH_CR
 |(
£˘‹
 & 
FLASH_CR_SNB_MASK
Ë<< 
FLASH_CR_SNB_SHIFT
;

364 
FLASH_CR
 |
FLASH_CR_SER
;

365 
FLASH_CR
 |
FLASH_CR_STRT
;

367 
	`Êash_waô_f‹_œ°_›î©i⁄
();

368 
FLASH_CR
 &~
FLASH_CR_SER
;

369 
FLASH_CR
 &~(
FLASH_CR_SNB_MASK
 << 
FLASH_CR_SNB_SHIFT
);

370 
	}
}

381 
	$Êash_îa£_Æl_£˘‹s
(
uöt32_t
 
¥ogøm_size
)

383 
	`Êash_waô_f‹_œ°_›î©i⁄
();

384 
	`Êash_£t_¥ogøm_size
(
¥ogøm_size
);

386 
FLASH_CR
 |
FLASH_CR_MER
;

387 
FLASH_CR
 |
FLASH_CR_STRT
;

389 
	`Êash_waô_f‹_œ°_›î©i⁄
();

390 
FLASH_CR
 &~
FLASH_CR_MER
;

391 
	}
}

402 
	$Êash_¥ogøm_›ti⁄_byãs
(
uöt32_t
 
d©a
)

404 
	`Êash_waô_f‹_œ°_›î©i⁄
();

406 i‡(
FLASH_OPTCR
 & 
FLASH_OPTCR_OPTLOCK
) {

407 
	`Êash_u∆ock_›ti⁄_byãs
();

410 
FLASH_OPTCR
 = 
d©a
 & ~0x3;

411 
FLASH_OPTCR
 |
FLASH_OPTCR_OPTSTRT
;

412 
	`Êash_waô_f‹_œ°_›î©i⁄
();

413 
	}
}

	@libopencm3/lib/stm32/common/flash_common_l01.c

30 
	~<lib›ícm3/°m32/Êash.h
>

43 
	$Êash_¥e„tch_íabÀ
()

45 
FLASH_ACR
 |
FLASH_ACR_PRFTEN
;

46 
	}
}

55 
	$Êash_¥e„tch_dißbÀ
()

57 
FLASH_ACR
 &~
FLASH_ACR_PRFTEN
;

58 
	}
}

72 
	$Êash_£t_ws
(
uöt32_t
 
ws
)

74 
uöt32_t
 
ªg32
;

76 
ªg32
 = 
FLASH_ACR
;

77 
ªg32
 &= ~(1 << 0);

78 
ªg32
 |
ws
;

79 
FLASH_ACR
 = 
ªg32
;

80 
	}
}

88 
	$Êash_u∆ock_≥¸
()

90 
FLASH_PEKEYR
 = 
FLASH_PEKEYR_PEKEY1
;

91 
FLASH_PEKEYR
 = 
FLASH_PEKEYR_PEKEY2
;

92 
	}
}

94 
	$Êash_lock_≥¸
()

96 
FLASH_PECR
 |
FLASH_PECR_PELOCK
;

97 
	}
}

105 
	$Êash_u∆ock_¥ogmem
()

107 
FLASH_PRGKEYR
 = 
FLASH_PRGKEYR_PRGKEY1
;

108 
FLASH_PRGKEYR
 = 
FLASH_PRGKEYR_PRGKEY2
;

109 
	}
}

111 
	$Êash_lock_¥ogmem
()

113 
FLASH_PECR
 |
FLASH_PECR_PRGLOCK
;

114 
	}
}

122 
	$Êash_u∆ock_›ti⁄_byãs
()

124 
FLASH_OPTKEYR
 = 
FLASH_OPTKEYR_OPTKEY1
;

125 
FLASH_OPTKEYR
 = 
FLASH_OPTKEYR_OPTKEY2
;

126 
	}
}

128 
	$Êash_lock_›ti⁄_byãs
()

130 
FLASH_PECR
 |
FLASH_PECR_OPTLOCK
;

131 
	}
}

136 
	$Êash_u∆ock
()

138 
	`Êash_u∆ock_≥¸
();

139 
	`Êash_u∆ock_¥ogmem
();

140 
	`Êash_u∆ock_›ti⁄_byãs
();

141 
	}
}

146 
	$Êash_lock
()

148 
	`Êash_lock_›ti⁄_byãs
();

149 
	`Êash_lock_¥ogmem
();

150 
	`Êash_lock_≥¸
();

151 
	}
}

158 
	$ì¥om_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
)

160 
	`Êash_u∆ock_≥¸
();

162 
FLASH_PECR
 &~
FLASH_PECR_FTDW
;

163 
	`MMIO32
(
addªss
Ë
d©a
;

164 
	`Êash_lock_≥¸
();

165 
	}
}

177 
	$ì¥om_¥ogøm_w‹ds
(
uöt32_t
 
addªss
, uöt32_à*
d©a
, 
Àngth_ö_w‹ds
)

179 
i
;

180 
	`Êash_u∆ock_≥¸
();

181 
FLASH_SR
 & 
FLASH_SR_BSY
);

183 
FLASH_PECR
 &~
FLASH_PECR_FTDW
;

184 
i
 = 0; i < 
Àngth_ö_w‹ds
; i++) {

185 
	`MMIO32
(
addªss
 + (
i
 * (
uöt32_t
))Ë*(
d©a
+i);

186 
FLASH_SR
 & 
FLASH_SR_BSY
);

188 
	`Êash_lock_≥¸
();

189 
	}
}

	@libopencm3/lib/stm32/common/gpio_common_all.c

26 
	~<lib›ícm3/°m32/gpio.h
>

40 
	$gpio_£t
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
)

42 
	`GPIO_BSRR
(
gpi›‹t
Ë
gpios
;

43 
	}
}

55 
	$gpio_˛ór
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
)

57 
	`GPIO_BSRR
(
gpi›‹t
Ë(
gpios
 << 16);

58 
	}
}

70 
uöt16_t
 
	$gpio_gë
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
)

72  
	`gpio_p‹t_ªad
(
gpi›‹t
Ë& 
gpios
;

73 
	}
}

86 
	$gpio_toggÀ
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
)

88 
uöt32_t
 
p‹t
 = 
	`GPIO_ODR
(
gpi›‹t
);

89 
	`GPIO_BSRR
(
gpi›‹t
Ë((
p‹t
 & 
gpios
) << 16) | (~port & gpios);

90 
	}
}

101 
uöt16_t
 
	$gpio_p‹t_ªad
(
uöt32_t
 
gpi›‹t
)

103  (
uöt16_t
)
	`GPIO_IDR
(
gpi›‹t
);

104 
	}
}

114 
	$gpio_p‹t_wrôe
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
d©a
)

116 
	`GPIO_ODR
(
gpi›‹t
Ë
d©a
;

117 
	}
}

131 
	$gpio_p‹t_c⁄fig_lock
(
uöt32_t
 
gpi›‹t
, 
uöt16_t
 
gpios
)

133 
uöt32_t
 
ªg32
;

136 
	`GPIO_LCKR
(
gpi›‹t
Ë
GPIO_LCKK
 | 
gpios
;

137 
	`GPIO_LCKR
(
gpi›‹t
Ë~
GPIO_LCKK
 & 
gpios
;

138 
	`GPIO_LCKR
(
gpi›‹t
Ë
GPIO_LCKK
 | 
gpios
;

139 
ªg32
 = 
	`GPIO_LCKR
(
gpi›‹t
);

140 
ªg32
 = 
	`GPIO_LCKR
(
gpi›‹t
);

145 
ªg32
 =Ñeg32;

148 
	}
}

	@libopencm3/lib/stm32/common/gpio_common_f0234.c

73 
	~<lib›ícm3/°m32/gpio.h
>

89 
	$gpio_mode_£tup
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
mode
, uöt8_à
puŒ_up_down
,

90 
uöt16_t
 
gpios
)

92 
uöt16_t
 
i
;

93 
uöt32_t
 
modî
, 
pupd
;

99 
modî
 = 
	`GPIO_MODER
(
gpi›‹t
);

100 
pupd
 = 
	`GPIO_PUPDR
(
gpi›‹t
);

102 
i
 = 0; i < 16; i++) {

103 i‡(!((1 << 
i
Ë& 
gpios
)) {

107 
modî
 &~
	`GPIO_MODE_MASK
(
i
);

108 
modî
 |
	`GPIO_MODE
(
i
, 
mode
);

109 
pupd
 &~
	`GPIO_PUPD_MASK
(
i
);

110 
pupd
 |
	`GPIO_PUPD
(
i
, 
puŒ_up_down
);

114 
	`GPIO_MODER
(
gpi›‹t
Ë
modî
;

115 
	`GPIO_PUPDR
(
gpi›‹t
Ë
pupd
;

116 
	}
}

132 
	$gpio_£t_ouçut_›ti⁄s
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
Ÿy≥
, uöt8_à
•ìd
,

133 
uöt16_t
 
gpios
)

135 
uöt16_t
 
i
;

136 
uöt32_t
 
o•ìdr
;

138 i‡(
Ÿy≥
 == 0x1) {

139 
	`GPIO_OTYPER
(
gpi›‹t
Ë|
gpios
;

141 
	`GPIO_OTYPER
(
gpi›‹t
Ë&~
gpios
;

144 
o•ìdr
 = 
	`GPIO_OSPEEDR
(
gpi›‹t
);

146 
i
 = 0; i < 16; i++) {

147 i‡(!((1 << 
i
Ë& 
gpios
)) {

150 
o•ìdr
 &~
	`GPIO_OSPEED_MASK
(
i
);

151 
o•ìdr
 |
	`GPIO_OSPEED
(
i
, 
•ìd
);

154 
	`GPIO_OSPEEDR
(
gpi›‹t
Ë
o•ìdr
;

155 
	}
}

178 
	$gpio_£t_af
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
Æt_func_num
, 
uöt16_t
 
gpios
)

180 
uöt16_t
 
i
;

181 
uöt32_t
 
a‰l
, 
a‰h
;

183 
a‰l
 = 
	`GPIO_AFRL
(
gpi›‹t
);

184 
a‰h
 = 
	`GPIO_AFRH
(
gpi›‹t
);

186 
i
 = 0; i < 8; i++) {

187 i‡(!((1 << 
i
Ë& 
gpios
)) {

190 
a‰l
 &~
	`GPIO_AFR_MASK
(
i
);

191 
a‰l
 |
	`GPIO_AFR
(
i
, 
Æt_func_num
);

194 
i
 = 8; i < 16; i++) {

195 i‡(!((1 << 
i
Ë& 
gpios
)) {

198 
a‰h
 &~
	`GPIO_AFR_MASK
(
i
 - 8);

199 
a‰h
 |
	`GPIO_AFR
(
i
 - 8, 
Æt_func_num
);

202 
	`GPIO_AFRL
(
gpi›‹t
Ë
a‰l
;

203 
	`GPIO_AFRH
(
gpi›‹t
Ë
a‰h
;

204 
	}
}

	@libopencm3/lib/stm32/common/hash_common_f24.c

33 
	~<lib›ícm3/°m32/hash.h
>

43 
	$hash_£t_mode
(
uöt8_t
 
mode
)

45 
HASH_CR
 &~
HASH_CR_MODE
;

46 
HASH_CR
 |
mode
;

47 
	}
}

57 
	$hash_£t_Æg‹ôhm
(
uöt8_t
 
Æg‹ôhm
)

59 
HASH_CR
 &~
HASH_CR_ALGO
;

60 
HASH_CR
 |
Æg‹ôhm
;

61 
	}
}

71 
	$hash_£t_d©a_ty≥
(
uöt8_t
 
d©©y≥
)

73 
HASH_CR
 &~
HASH_CR_DATATYPE
;

74 
HASH_CR
 |
d©©y≥
;

75 
	}
}

85 
	$hash_£t_key_Àngth
(
uöt8_t
 
keyÀngth
)

87 
HASH_CR
 &~
HASH_CR_LKEY
;

88 
HASH_CR
 |
keyÀngth
;

89 
	}
}

99 
	$hash_£t_œ°_w‹d_vÆid_bôs
(
uöt8_t
 
vÆidbôs
)

101 
HASH_STR
 &~(
HASH_STR_NBW
);

102 
HASH_STR
 |
vÆidbôs
;

103 
	}
}

112 
	$hash_öô
()

114 
HASH_CR
 |
HASH_CR_INIT
;

115 
	}
}

125 
	$hash_add_d©a
(
uöt32_t
 
d©a
)

127 
HASH_DIN
 = 
d©a
;

128 
	}
}

137 
	$hash_dige°
()

139 
HASH_STR
 |
HASH_STR_DCAL
;

140 
	}
}

151 
	$hash_gë_ªsu…
(
uöt32_t
 *
d©a
)

153 
d©a
[0] = 
HASH_HR
[0];

154 
d©a
[1] = 
HASH_HR
[1];

155 
d©a
[2] = 
HASH_HR
[2];

156 
d©a
[3] = 
HASH_HR
[3];

158 i‡((
HASH_CR
 & 
HASH_CR_ALGO
Ë=
HASH_ALGO_SHA1
) {

159 
d©a
[4] = 
HASH_HR
[4];

161 
	}
}

	@libopencm3/lib/stm32/common/i2c_common_v1.c

39 
	~<lib›ícm3/°m32/i2c.h
>

40 
	~<lib›ícm3/°m32/rcc.h
>

53 
	$i2c_ª£t
(
uöt32_t
 
i2c
)

55 
i2c
) {

56 
I2C1
:

57 
	`rcc_≥rùh_ª£t_pul£
(
RST_I2C1
);

59 #i‡
	`deföed
(
I2C2_BASE
)

60 
I2C2
:

61 
	`rcc_≥rùh_ª£t_pul£
(
RST_I2C2
);

64 #i‡
	`deföed
(
I2C3_BASE
)

65 
I2C3
:

66 
	`rcc_≥rùh_ª£t_pul£
(
RST_I2C3
);

69 #i‡
	`deföed
(
I2C4_BASE
)

70 
I2C4
:

71 
	`rcc_≥rùh_ª£t_pul£
(
RST_I2C4
);

77 
	}
}

85 
	$i2c_≥rùhîÆ_íabÀ
(
uöt32_t
 
i2c
)

87 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_PE
;

88 
	}
}

99 
	$i2c_≥rùhîÆ_dißbÀ
(
uöt32_t
 
i2c
)

101 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_PE
;

102 
	}
}

114 
	$i2c_£nd_°¨t
(
uöt32_t
 
i2c
)

116 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_START
;

117 
	}
}

128 
	$i2c_£nd_°›
(
uöt32_t
 
i2c
)

130 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_STOP
;

131 
	}
}

140 
	$i2c_˛ór_°›
(
uöt32_t
 
i2c
)

142 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_STOP
;

143 
	}
}

154 
	$i2c_£t_own_7bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
)

156 
uöt16_t
 
vÆ
 = (uöt16_t)(
¶ave
 << 1);

158 
vÆ
 |= (1 << 14);

159 
	`I2C_OAR1
(
i2c
Ë
vÆ
;

160 
	}
}

173 
	$i2c_£t_own_10bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt16_t
 
¶ave
)

175 
	`I2C_OAR1
(
i2c
Ë(
uöt16_t
)(
I2C_OAR1_ADDMODE
 | 
¶ave
);

176 
	}
}

188 
	$i2c_£t_own_7bô_¶ave_addªss_two
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
)

190 
uöt16_t
 
vÆ
 = (uöt16_t)(
¶ave
 << 1);

191 
	`I2C_OAR2
(
i2c
Ë
vÆ
;

192 
	}
}

202 
	$i2c_íabÀ_duÆ_addªssög_mode
(
uöt32_t
 
i2c
)

204 
	`I2C_OAR2
(
i2c
Ë|
I2C_OAR2_ENDUAL
;

205 
	}
}

215 
	$i2c_dißbÀ_duÆ_addªssög_mode
(
uöt32_t
 
i2c
)

217 
	`I2C_OAR2
(
i2c
Ë&~(
I2C_OAR2_ENDUAL
);

218 
	}
}

232 
	$i2c_£t_˛ock_‰equícy
(
uöt32_t
 
i2c
, 
uöt8_t
 
‰eq
)

234 
uöt16_t
 
ªg16
;

235 
ªg16
 = 
	`I2C_CR2
(
i2c
) & 0xffc0;

236 
ªg16
 |
‰eq
;

237 
	`I2C_CR2
(
i2c
Ë
ªg16
;

238 
	}
}

247 
	$i2c_£nd_d©a
(
uöt32_t
 
i2c
, 
uöt8_t
 
d©a
)

249 
	`I2C_DR
(
i2c
Ë
d©a
;

250 
	}
}

261 
	$i2c_£t_Á°_mode
(
uöt32_t
 
i2c
)

263 
	`I2C_CCR
(
i2c
Ë|
I2C_CCR_FS
;

264 
	}
}

275 
	$i2c_£t_°™d¨d_mode
(
uöt32_t
 
i2c
)

277 
	`I2C_CCR
(
i2c
Ë&~
I2C_CCR_FS
;

278 
	}
}

295 
	$i2c_£t_c¸
(
uöt32_t
 
i2c
, 
uöt16_t
 
‰eq
)

297 
uöt16_t
 
ªg16
;

298 
ªg16
 = 
	`I2C_CCR
(
i2c
) & 0xf000;

299 
ªg16
 |
‰eq
;

300 
	`I2C_CCR
(
i2c
Ë
ªg16
;

301 
	}
}

316 
	$i2c_£t_åi£
(
uöt32_t
 
i2c
, 
uöt16_t
 
åi£
)

318 
	`I2C_TRISE
(
i2c
Ë
åi£
;

319 
	}
}

330 
	$i2c_£nd_7bô_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
, uöt8_à
ªadwrôe
)

332 
	`I2C_DR
(
i2c
Ë(
uöt8_t
)((
¶ave
 << 1Ë| 
ªadwrôe
);

333 
	}
}

340 
uöt8_t
 
	$i2c_gë_d©a
(
uöt32_t
 
i2c
)

342  
	`I2C_DR
(
i2c
) & 0xff;

343 
	}
}

351 
	$i2c_íabÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
)

353 
	`I2C_CR2
(
i2c
Ë|
öãºu±
;

354 
	}
}

362 
	$i2c_dißbÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
)

364 
	`I2C_CR2
(
i2c
Ë&~
öãºu±
;

365 
	}
}

373 
	$i2c_íabÀ_ack
(
uöt32_t
 
i2c
)

375 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_ACK
;

376 
	}
}

384 
	$i2c_dißbÀ_ack
(
uöt32_t
 
i2c
)

386 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_ACK
;

387 
	}
}

395 
	$i2c_«ck_√xt
(
uöt32_t
 
i2c
)

397 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_POS
;

398 
	}
}

407 
	$i2c_«ck_cuºít
(
uöt32_t
 
i2c
)

409 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_POS
;

410 
	}
}

418 
	$i2c_£t_dutycy˛e
(
uöt32_t
 
i2c
, uöt32_à
dutycy˛e
)

420 i‡(
dutycy˛e
 =
I2C_CCR_DUTY_DIV2
) {

421 
	`I2C_CCR
(
i2c
Ë&~
I2C_CCR_DUTY
;

423 
	`I2C_CCR
(
i2c
Ë|
I2C_CCR_DUTY
;

425 
	}
}

432 
	$i2c_íabÀ_dma
(
uöt32_t
 
i2c
)

434 
	`I2C_CR2
(
i2c
Ë|
I2C_CR2_DMAEN
;

435 
	}
}

442 
	$i2c_dißbÀ_dma
(
uöt32_t
 
i2c
)

444 
	`I2C_CR2
(
i2c
Ë&~
I2C_CR2_DMAEN
;

445 
	}
}

452 
	$i2c_£t_dma_œ°_å™s„r
(
uöt32_t
 
i2c
)

454 
	`I2C_CR2
(
i2c
Ë|
I2C_CR2_LAST
;

455 
	}
}

462 
	$i2c_˛ór_dma_œ°_å™s„r
(
uöt32_t
 
i2c
)

464 
	`I2C_CR2
(
i2c
Ë&~
I2C_CR2_LAST
;

465 
	}
}

467 
	$i2c_wrôe7_v1
(
uöt32_t
 
i2c
, 
addr
, 
uöt8_t
 *
d©a
, 
size_t
 
n
)

469 (
	`I2C_SR2
(
i2c
Ë& 
I2C_SR2_BUSY
)) {

472 
	`i2c_£nd_°¨t
(
i2c
);

475 !((
	`I2C_SR1
(
i2c
Ë& 
I2C_SR1_SB
)

476 & (
	`I2C_SR2
(
i2c
Ë& (
I2C_SR2_MSL
 | 
I2C_SR2_BUSY
))));

478 
	`i2c_£nd_7bô_addªss
(
i2c
, 
addr
, 
I2C_WRITE
);

481 !(
	`I2C_SR1
(
i2c
Ë& 
I2C_SR1_ADDR
));

484 ()
	`I2C_SR2
(
i2c
);

486 
size_t
 
i
 = 0; i < 
n
; i++) {

487 
	`i2c_£nd_d©a
(
i2c
, 
d©a
[
i
]);

488 !(
	`I2C_SR1
(
i2c
Ë& (
I2C_SR1_BTF
)));

490 
	}
}

492 
	$i2c_ªad7_v1
(
uöt32_t
 
i2c
, 
addr
, 
uöt8_t
 *
ªs
, 
size_t
 
n
)

494 
	`i2c_£nd_°¨t
(
i2c
);

495 
	`i2c_íabÀ_ack
(
i2c
);

498 !((
	`I2C_SR1
(
i2c
Ë& 
I2C_SR1_SB
)

499 & (
	`I2C_SR2
(
i2c
Ë& (
I2C_SR2_MSL
 | 
I2C_SR2_BUSY
))));

501 
	`i2c_£nd_7bô_addªss
(
i2c
, 
addr
, 
I2C_READ
);

504 !(
	`I2C_SR1
(
i2c
Ë& 
I2C_SR1_ADDR
));

506 ()
	`I2C_SR2
(
i2c
);

508 
size_t
 
i
 = 0; i < 
n
; ++i) {

509 i‡(
i
 =
n
 - 1) {

510 
	`i2c_dißbÀ_ack
(
i2c
);

512 !(
	`I2C_SR1
(
i2c
Ë& 
I2C_SR1_RxNE
));

513 
ªs
[
i
] = 
	`i2c_gë_d©a
(
i2c
);

515 
	`i2c_£nd_°›
(
i2c
);

518 
	}
}

532 
	$i2c_å™s„r7
(
uöt32_t
 
i2c
, 
uöt8_t
 
addr
, uöt8_à*
w
, 
size_t
 
wn
, uöt8_à*
r
, size_à
∫
) {

533 i‡(
wn
) {

534 
	`i2c_wrôe7_v1
(
i2c
, 
addr
, 
w
, 
wn
);

536 i‡(
∫
) {

537 
	`i2c_ªad7_v1
(
i2c
, 
addr
, 
r
, 
∫
);

539 
	`i2c_£nd_°›
(
i2c
);

541 
	}
}

549 
	$i2c_£t_•ìd
(
uöt32_t
 
i2c
, 
i2c_•ìds
 
•ìd
, uöt32_à
˛ock_megahz
)

551 
	`i2c_£t_˛ock_‰equícy
(
i2c
, 
˛ock_megahz
);

552 
•ìd
) {

553 
i2c_•ìd_fm_400k
:

554 
	`i2c_£t_Á°_mode
(
i2c
);

555 
	`i2c_£t_c¸
(
i2c
, 
˛ock_megahz
 * 5 / 6);

556 
	`i2c_£t_åi£
(
i2c
, 
˛ock_megahz
 + 1);

560 
i2c_•ìd_sm_100k
:

561 
	`i2c_£t_°™d¨d_mode
(
i2c
);

563 
	`i2c_£t_c¸
(
i2c
, 
˛ock_megahz
 * 5);

565 
	`i2c_£t_åi£
(
i2c
, 
˛ock_megahz
 + 1);

568 
	}
}

	@libopencm3/lib/stm32/common/i2c_common_v2.c

22 
	~<lib›ícm3/°m32/i2c.h
>

23 
	~<lib›ícm3/°m32/rcc.h
>

37 
	$i2c_ª£t
(
uöt32_t
 
i2c
)

39 
i2c
) {

40 
I2C1
:

41 
	`rcc_≥rùh_ª£t_pul£
(
RST_I2C1
);

43 #i‡
	`deföed
(
I2C2_BASE
)

44 
I2C2
:

45 
	`rcc_≥rùh_ª£t_pul£
(
RST_I2C2
);

48 #i‡
	`deföed
(
I2C3_BASE
)

49 
I2C3
:

50 
	`rcc_≥rùh_ª£t_pul£
(
RST_I2C3
);

53 #i‡
	`deföed
(
I2C4_BASE
)

54 
I2C4
:

55 
	`rcc_≥rùh_ª£t_pul£
(
RST_I2C4
);

61 
	}
}

69 
	$i2c_≥rùhîÆ_íabÀ
(
uöt32_t
 
i2c
)

71 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_PE
;

72 
	}
}

84 
	$i2c_≥rùhîÆ_dißbÀ
(
uöt32_t
 
i2c
)

86 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_PE
;

87 
	}
}

99 
	$i2c_£nd_°¨t
(
uöt32_t
 
i2c
)

101 
	`I2C_CR2
(
i2c
Ë|
I2C_CR2_START
;

102 
	}
}

113 
	$i2c_£nd_°›
(
uöt32_t
 
i2c
)

115 
	`I2C_CR2
(
i2c
Ë|
I2C_CR2_STOP
;

116 
	}
}

125 
	$i2c_˛ór_°›
(
uöt32_t
 
i2c
)

127 
	`I2C_ICR
(
i2c
Ë|
I2C_ICR_STOPCF
;

128 
	}
}

139 
	$i2c_£t_own_7bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
¶ave
)

141 
	`I2C_OAR1
(
i2c
Ë(
uöt16_t
)(
¶ave
 << 1);

142 
	`I2C_OAR1
(
i2c
Ë&~
I2C_OAR1_OA1MODE
;

143 
	}
}

154 
	$i2c_£t_own_10bô_¶ave_addªss
(
uöt32_t
 
i2c
, 
uöt16_t
 
¶ave
)

156 
	`I2C_OAR1
(
i2c
Ë(
uöt16_t
)(
I2C_OAR1_OA1MODE
 | 
¶ave
);

157 
	}
}

166 
	$i2c_£nd_d©a
(
uöt32_t
 
i2c
, 
uöt8_t
 
d©a
)

168 
	`I2C_TXDR
(
i2c
Ë
d©a
;

169 
	}
}

176 
uöt8_t
 
	$i2c_gë_d©a
(
uöt32_t
 
i2c
)

178  
	`I2C_RXDR
(
i2c
) & 0xff;

179 
	}
}

181 
	$i2c_íabÀ_™Æog_fûãr
(
uöt32_t
 
i2c
)

183 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_ANFOFF
;

184 
	}
}

186 
	$i2c_dißbÀ_™Æog_fûãr
(
uöt32_t
 
i2c
)

188 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_ANFOFF
;

189 
	}
}

199 
	$i2c_£t_digôÆ_fûãr
(
uöt32_t
 
i2c
, 
uöt8_t
 
dnf_£âög
)

201 
	`I2C_CR1
(
i2c
Ë(I2C_CR1(i2cË& ~(
I2C_CR1_DNF_MASK
 << 
I2C_CR1_DNF_SHIFT
)) |

202 (
dnf_£âög
 << 
I2C_CR1_DNF_SHIFT
);

203 
	}
}

206 
	$i2c_£t_¥esˇÀr
(
uöt32_t
 
i2c
, 
uöt8_t
 
¥esc
)

208 
	`I2C_TIMINGR
(
i2c
Ë(I2C_TIMINGR(i2cË& ~
I2C_TIMINGR_PRESC_MASK
) |

209 (
¥esc
 << 
I2C_TIMINGR_PRESC_SHIFT
);

210 
	}
}

212 
	$i2c_£t_d©a_£tup_time
(
uöt32_t
 
i2c
, 
uöt8_t
 
s_time
)

214 
	`I2C_TIMINGR
(
i2c
Ë(I2C_TIMINGR(i2cË& ~
I2C_TIMINGR_SCLDEL_MASK
) |

215 (
s_time
 << 
I2C_TIMINGR_SCLDEL_SHIFT
);

216 
	}
}

218 
	$i2c_£t_d©a_hﬁd_time
(
uöt32_t
 
i2c
, 
uöt8_t
 
h_time
)

220 
	`I2C_TIMINGR
(
i2c
Ë(I2C_TIMINGR(i2cË& ~
I2C_TIMINGR_SDADEL_MASK
) |

221 (
h_time
 << 
I2C_TIMINGR_SDADEL_SHIFT
);

222 
	}
}

224 
	$i2c_£t_s˛_high_≥riod
(
uöt32_t
 
i2c
, 
uöt8_t
 
≥riod
)

226 
	`I2C_TIMINGR
(
i2c
Ë(I2C_TIMINGR(i2cË& ~
I2C_TIMINGR_SCLH_MASK
) |

227 (
≥riod
 << 
I2C_TIMINGR_SCLH_SHIFT
);

228 
	}
}

230 
	$i2c_£t_s˛_low_≥riod
(
uöt32_t
 
i2c
, 
uöt8_t
 
≥riod
)

232 
	`I2C_TIMINGR
(
i2c
Ë(I2C_TIMINGR(i2cË& ~
I2C_TIMINGR_SCLL_MASK
) |

233 (
≥riod
 << 
I2C_TIMINGR_SCLL_SHIFT
);

234 
	}
}

236 
	$i2c_íabÀ_°ªtchög
(
uöt32_t
 
i2c
)

238 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_NOSTRETCH
;

239 
	}
}

241 
	$i2c_dißbÀ_°ªtchög
(
uöt32_t
 
i2c
)

243 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_NOSTRETCH
;

244 
	}
}

246 
	$i2c_£t_7bô_addr_mode
(
uöt32_t
 
i2c
)

248 
	`I2C_CR2
(
i2c
Ë&~
I2C_CR2_ADD10
;

249 
	}
}

251 
	$i2c_£t_10bô_addr_mode
(
uöt32_t
 
i2c
)

253 
	`I2C_CR2
(
i2c
Ë|
I2C_CR2_ADD10
;

254 
	}
}

256 
	$i2c_£t_7bô_addªss
(
uöt32_t
 
i2c
, 
uöt8_t
 
addr
)

258 
	`I2C_CR2
(
i2c
Ë(I2C_CR2(i2cË& ~
I2C_CR2_SADD_7BIT_MASK
) |

259 ((
addr
 & 0x7FË<< 
I2C_CR2_SADD_7BIT_SHIFT
);

260 
	}
}

262 
	$i2c_£t_10bô_addªss
(
uöt32_t
 
i2c
, 
uöt16_t
 
addr
)

264 
	`I2C_CR2
(
i2c
Ë(I2C_CR2(i2cË& ~
I2C_CR2_SADD_10BIT_MASK
) |

265 ((
addr
 & 0x3FFË<< 
I2C_CR2_SADD_10BIT_SHIFT
);

266 
	}
}

268 
	$i2c_£t_wrôe_å™s„r_dú
(
uöt32_t
 
i2c
)

270 
	`I2C_CR2
(
i2c
Ë&~
I2C_CR2_RD_WRN
;

271 
	}
}

273 
	$i2c_£t_ªad_å™s„r_dú
(
uöt32_t
 
i2c
)

275 
	`I2C_CR2
(
i2c
Ë|
I2C_CR2_RD_WRN
;

276 
	}
}

278 
	$i2c_£t_byãs_to_å™s„r
(
uöt32_t
 
i2c
, uöt32_à
n_byãs
)

280 
	`I2C_CR2
(
i2c
Ë(I2C_CR2(i2cË& ~
I2C_CR2_NBYTES_MASK
) |

281 (
n_byãs
 << 
I2C_CR2_NBYTES_SHIFT
);

282 
	}
}

284 
boﬁ
 
	$i2c_is_°¨t
(
uöt32_t
 
i2c
)

286  (
	`I2C_CR2
(
i2c
Ë& 
I2C_CR2_START
);

287 
	}
}

289 
	$i2c_íabÀ_aut€nd
(
uöt32_t
 
i2c
)

291 
	`I2C_CR2
(
i2c
Ë|
I2C_CR2_AUTOEND
;

292 
	}
}

294 
	$i2c_dißbÀ_aut€nd
(
uöt32_t
 
i2c
)

296 
	`I2C_CR2
(
i2c
Ë&~
I2C_CR2_AUTOEND
;

297 
	}
}

299 
boﬁ
 
	$i2c_«ck
(
uöt32_t
 
i2c
)

301  (
	`I2C_ISR
(
i2c
Ë& 
I2C_ISR_NACKF
);

302 
	}
}

304 
boﬁ
 
	$i2c_busy
(
uöt32_t
 
i2c
)

306  (
	`I2C_ISR
(
i2c
Ë& 
I2C_ISR_BUSY
);

307 
	}
}

309 
boﬁ
 
	$i2c_å™smô_öt_°©us
(
uöt32_t
 
i2c
)

311  (
	`I2C_ISR
(
i2c
Ë& 
I2C_ISR_TXIS
);

312 
	}
}

314 
boﬁ
 
	$i2c_å™s„r_com∂ëe
(
uöt32_t
 
i2c
)

316  (
	`I2C_ISR
(
i2c
Ë& 
I2C_ISR_TC
);

317 
	}
}

319 
boﬁ
 
	$i2c_ª˚ived_d©a
(
uöt32_t
 
i2c
)

321  (
	`I2C_ISR
(
i2c
Ë& 
I2C_ISR_RXNE
);

322 
	}
}

331 
	$i2c_íabÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
)

333 
	`I2C_CR1
(
i2c
Ë|
öãºu±
;

334 
	}
}

342 
	$i2c_dißbÀ_öãºu±
(
uöt32_t
 
i2c
, uöt32_à
öãºu±
)

344 
	`I2C_CR1
(
i2c
Ë&~
öãºu±
;

345 
	}
}

352 
	$i2c_íabÀ_rxdma
(
uöt32_t
 
i2c
)

354 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_RXDMAEN
;

355 
	}
}

362 
	$i2c_dißbÀ_rxdma
(
uöt32_t
 
i2c
)

364 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_RXDMAEN
;

365 
	}
}

372 
	$i2c_íabÀ_txdma
(
uöt32_t
 
i2c
)

374 
	`I2C_CR1
(
i2c
Ë|
I2C_CR1_TXDMAEN
;

375 
	}
}

382 
	$i2c_dißbÀ_txdma
(
uöt32_t
 
i2c
)

384 
	`I2C_CR1
(
i2c
Ë&~
I2C_CR1_TXDMAEN
;

385 
	}
}

398 
	$i2c_å™s„r7
(
uöt32_t
 
i2c
, 
uöt8_t
 
addr
, uöt8_à*
w
, 
size_t
 
wn
, uöt8_à*
r
, size_à
∫
)

401 i‡(
wn
) {

402 
	`i2c_£t_7bô_addªss
(
i2c
, 
addr
);

403 
	`i2c_£t_wrôe_å™s„r_dú
(
i2c
);

404 
	`i2c_£t_byãs_to_å™s„r
(
i2c
, 
wn
);

405 i‡(
∫
) {

406 
	`i2c_dißbÀ_aut€nd
(
i2c
);

408 
	`i2c_íabÀ_aut€nd
(
i2c
);

410 
	`i2c_£nd_°¨t
(
i2c
);

412 
wn
--) {

413 
boﬁ
 
waô
 = 
åue
;

414 
waô
) {

415 i‡(
	`i2c_å™smô_öt_°©us
(
i2c
)) {

416 
waô
 = 
Ál£
;

418 
	`i2c_«ck
(
i2c
));

420 
	`i2c_£nd_d©a
(
i2c
, *
w
++);

425 i‡(
∫
) {

426 !
	`i2c_å™s„r_com∂ëe
(
i2c
));

430 i‡(
∫
) {

432 
	`i2c_£t_7bô_addªss
(
i2c
, 
addr
);

433 
	`i2c_£t_ªad_å™s„r_dú
(
i2c
);

434 
	`i2c_£t_byãs_to_å™s„r
(
i2c
, 
∫
);

436 
	`i2c_£nd_°¨t
(
i2c
);

438 
	`i2c_íabÀ_aut€nd
(
i2c
);

440 
size_t
 
i
 = 0; i < 
∫
; i++) {

441 
	`i2c_ª˚ived_d©a
(
i2c
) == 0);

442 
r
[
i
] = 
	`i2c_gë_d©a
(
i2c
);

445 
	}
}

456 
	$i2c_£t_•ìd
(
uöt32_t
 
i2c
, 
i2c_•ìds
 
•ìd
, uöt32_à
˛ock_megahz
)

458 
¥esˇÀr
;

459 
•ìd
) {

460 
i2c_•ìd_fmp_1m
:

463 
i2c_•ìd_fm_400k
:

465 
¥esˇÀr
 = 
˛ock_megahz
 / 8 - 1;

466 
	`i2c_£t_¥esˇÀr
(
i2c
, 
¥esˇÀr
);

467 
	`i2c_£t_s˛_low_≥riod
(
i2c
, 10-1);

468 
	`i2c_£t_s˛_high_≥riod
(
i2c
, 4-1);

469 
	`i2c_£t_d©a_hﬁd_time
(
i2c
, 3);

470 
	`i2c_£t_d©a_£tup_time
(
i2c
, 4-1);

474 
i2c_•ìd_sm_100k
:

476 
¥esˇÀr
 = (
˛ock_megahz
 / 4) - 1;

477 
	`i2c_£t_¥esˇÀr
(
i2c
, 
¥esˇÀr
);

478 
	`i2c_£t_s˛_low_≥riod
(
i2c
, 20-1);

479 
	`i2c_£t_s˛_high_≥riod
(
i2c
, 16-1);

480 
	`i2c_£t_d©a_hﬁd_time
(
i2c
, 2);

481 
	`i2c_£t_d©a_£tup_time
(
i2c
, 5-1);

484 
	}
}

	@libopencm3/lib/stm32/common/iwdg_common_all.c

40 
	~<lib›ícm3/°m32/iwdg.h
>

42 
	#LSI_FREQUENCY
 32000

	)

43 
	#COUNT_LENGTH
 12

	)

44 
	#COUNT_MASK
 ((1 << 
COUNT_LENGTH
)-1)

	)

54 
	$iwdg_°¨t
()

56 
IWDG_KR
 = 
IWDG_KR_START
;

57 
	}
}

74 
	$iwdg_£t_≥riod_ms
(
uöt32_t
 
≥riod
)

76 
uöt32_t
 
cou¡
, 
¥esˇÀ
, 
ªlﬂd
, 
exp⁄ít
;

79 
cou¡
 = (
≥riod
 << 5);

82 
¥esˇÀ
 = (
cou¡
 >> 12);

83 i‡(
¥esˇÀ
 > 256) {

84 
exp⁄ít
 = 
IWDG_PR_DIV256
; 
ªlﬂd
 = 
COUNT_MASK
;

85 } i‡(
¥esˇÀ
 > 128) {

86 
exp⁄ít
 = 
IWDG_PR_DIV256
; 
ªlﬂd
 = (
cou¡
 >> 8);

87 } i‡(
¥esˇÀ
 > 64) {

88 
exp⁄ít
 = 
IWDG_PR_DIV128
; 
ªlﬂd
 = (
cou¡
 >> 7);

89 } i‡(
¥esˇÀ
 > 32) {

90 
exp⁄ít
 = 
IWDG_PR_DIV64
; 
ªlﬂd
 = (
cou¡
 >> 6);

91 } i‡(
¥esˇÀ
 > 16) {

92 
exp⁄ít
 = 
IWDG_PR_DIV32
; 
ªlﬂd
 = (
cou¡
 >> 5);

93 } i‡(
¥esˇÀ
 > 8) {

94 
exp⁄ít
 = 
IWDG_PR_DIV16
; 
ªlﬂd
 = (
cou¡
 >> 4);

95 } i‡(
¥esˇÀ
 > 4) {

96 
exp⁄ít
 = 
IWDG_PR_DIV8
; 
ªlﬂd
 = (
cou¡
 >> 3);

98 
exp⁄ít
 = 
IWDG_PR_DIV4
; 
ªlﬂd
 = (
cou¡
 >> 2);

102 i‡(
cou¡
 == 0) {

103 
cou¡
 = 1;

106 
	`iwdg_¥esˇÀr_busy
());

107 
IWDG_KR
 = 
IWDG_KR_UNLOCK
;

108 
IWDG_PR
 = 
exp⁄ít
;

109 
	`iwdg_ªlﬂd_busy
());

110 
IWDG_KR
 = 
IWDG_KR_UNLOCK
;

111 
IWDG_RLR
 = (
ªlﬂd
 & 
COUNT_MASK
);

112 
	}
}

121 
boﬁ
 
	$iwdg_ªlﬂd_busy
()

123  
IWDG_SR
 & 
IWDG_SR_RVU
;

124 
	}
}

133 
boﬁ
 
	$iwdg_¥esˇÀr_busy
()

135  
IWDG_SR
 & 
IWDG_SR_PVU
;

136 
	}
}

145 
	$iwdg_ª£t
()

147 
IWDG_KR
 = 
IWDG_KR_RESET
;

148 
	}
}

	@libopencm3/lib/stm32/common/pwr_common_v1.c

28 
	~<lib›ícm3/°m32/pwr.h
>

37 
	$pwr_dißbÀ_backup_domaö_wrôe_¥Ÿe˘
()

39 
PWR_CR
 |
PWR_CR_DBP
;

40 
	}
}

48 
	$pwr_íabÀ_backup_domaö_wrôe_¥Ÿe˘
()

50 
PWR_CR
 &~
PWR_CR_DBP
;

51 
	}
}

63 
	$pwr_íabÀ_powî_vﬁège_dëe˘
(
uöt32_t
 
pvd_Àvñ
)

65 
PWR_CR
 &~
PWR_CR_PLS_MASK
;

66 
PWR_CR
 |(
PWR_CR_PVDE
 | 
pvd_Àvñ
);

67 
	}
}

74 
	$pwr_dißbÀ_powî_vﬁège_dëe˘
()

76 
PWR_CR
 &~
PWR_CR_PVDE
;

77 
	}
}

85 
	$pwr_˛ór_°™dby_Êag
()

87 
PWR_CR
 |
PWR_CR_CSBF
;

88 
	}
}

96 
	$pwr_˛ór_wakeup_Êag
()

98 
PWR_CR
 |
PWR_CR_CWUF
;

99 
	}
}

106 
	$pwr_£t_°™dby_mode
()

108 
PWR_CR
 |
PWR_CR_PDDS
;

109 
	}
}

116 
	$pwr_£t_°›_mode
()

118 
PWR_CR
 &~
PWR_CR_PDDS
;

119 
	}
}

126 
	$pwr_vﬁège_ªguœt‹_⁄_ö_°›
()

128 
PWR_CR
 &~
PWR_CR_LPDS
;

129 
	}
}

136 
	$pwr_vﬁège_ªguœt‹_low_powî_ö_°›
()

138 
PWR_CR
 |
PWR_CR_LPDS
;

139 
	}
}

147 
	$pwr_íabÀ_wakeup_pö
()

149 
PWR_CSR
 |
PWR_CSR_EWUP
;

150 
	}
}

158 
	$pwr_dißbÀ_wakeup_pö
()

160 
PWR_CSR
 &~
PWR_CSR_EWUP
;

161 
	}
}

173 
boﬁ
 
	$pwr_vﬁège_high
()

175  !(
PWR_CSR
 & 
PWR_CSR_PVDO
);

176 
	}
}

187 
boﬁ
 
	$pwr_gë_°™dby_Êag
()

189  
PWR_CSR
 & 
PWR_CSR_SBF
;

190 
	}
}

201 
boﬁ
 
	$pwr_gë_wakeup_Êag
()

203  
PWR_CSR
 & 
PWR_CSR_WUF
;

204 
	}
}

	@libopencm3/lib/stm32/common/pwr_common_v2.c

25 
	~<lib›ícm3/°m32/pwr.h
>

26 
	~<lib›ícm3/°m32/rcc.h
>

28 
	$pwr_£t_vos_sˇÀ
(
pwr_vos_sˇÀ
 
sˇÀ
)

31 
uöt32_t
 
ªg
 = 
PWR_CR
;

32 
ªg
 &~(
PWR_CR_VOS_MASK
);

33 
sˇÀ
) {

34 
PWR_SCALE1
:

35 
ªg
 |
PWR_CR_VOS_RANGE1
;

37 
PWR_SCALE2
:

38 
ªg
 |
PWR_CR_VOS_RANGE2
;

40 
PWR_SCALE3
:

41 
ªg
 |
PWR_CR_VOS_RANGE3
;

44 
PWR_CR
 = 
ªg
;

45 
	}
}

	@libopencm3/lib/stm32/common/rcc_common_all.c

22 
	~<lib›ícm3/°m32/rcc.h
>

41 
	$rcc_≥rùhîÆ_íabÀ_˛ock
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
í
)

43 *
ªg
 |
í
;

44 
	}
}

62 
	$rcc_≥rùhîÆ_dißbÀ_˛ock
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
í
)

64 *
ªg
 &~
í
;

65 
	}
}

82 
	$rcc_≥rùhîÆ_ª£t
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
ª£t
)

84 *
ªg
 |
ª£t
;

85 
	}
}

103 
	$rcc_≥rùhîÆ_˛ór_ª£t
(vﬁ©ûê
uöt32_t
 *
ªg
, uöt32_à
˛ór_ª£t
)

105 *
ªg
 &~
˛ór_ª£t
;

106 
	}
}

108 
	#_RCC_REG
(
i
Ë
	`MMIO32
(
RCC_BASE
 + ((iË>> 5))

	)

109 
	#_RCC_BIT
(
i
Ë(1 << ((iË& 0x1f))

	)

121 
	$rcc_≥rùh_˛ock_íabÀ
(
rcc_≥rùh_˛kí
 
˛kí
)

123 
	`_RCC_REG
(
˛kí
Ë|
	`_RCC_BIT
(clken);

124 
	}
}

135 
	$rcc_≥rùh_˛ock_dißbÀ
(
rcc_≥rùh_˛kí
 
˛kí
)

137 
	`_RCC_REG
(
˛kí
Ë&~
	`_RCC_BIT
(clken);

138 
	}
}

150 
	$rcc_≥rùh_ª£t_pul£
(
rcc_≥rùh_r°
 
r°
)

152 
	`_RCC_REG
(
r°
Ë|
	`_RCC_BIT
(rst);

153 
	`_RCC_REG
(
r°
Ë&~
	`_RCC_BIT
(rst);

154 
	}
}

166 
	$rcc_≥rùh_ª£t_hﬁd
(
rcc_≥rùh_r°
 
r°
)

168 
	`_RCC_REG
(
r°
Ë|
	`_RCC_BIT
(rst);

169 
	}
}

181 
	$rcc_≥rùh_ª£t_ªÀa£
(
rcc_≥rùh_r°
 
r°
)

183 
	`_RCC_REG
(
r°
Ë&~
	`_RCC_BIT
(rst);

184 
	}
}

194 
	$rcc_£t_mco
(
uöt32_t
 
mco§c
)

196 
RCC_CFGR
 = (RCC_CFGR & ~(
RCC_CFGR_MCO_MASK
 << 
RCC_CFGR_MCO_SHIFT
)) |

197 (
mco§c
 << 
RCC_CFGR_MCO_SHIFT
);

198 
	}
}

211 
	$rcc_osc_by∑ss_íabÀ
(
rcc_osc
 
osc
)

213 
osc
) {

214 
RCC_HSE
:

215 
RCC_CR
 |
RCC_CR_HSEBYP
;

217 
RCC_LSE
:

218 #ifde‡
RCC_CSR_LSEBYP


219 
RCC_CSR
 |
RCC_CSR_LSEBYP
;

221 
RCC_BDCR
 |
RCC_BDCR_LSEBYP
;

228 
	}
}

241 
	$rcc_osc_by∑ss_dißbÀ
(
rcc_osc
 
osc
)

243 
osc
) {

244 
RCC_HSE
:

245 
RCC_CR
 &~
RCC_CR_HSEBYP
;

247 
RCC_LSE
:

248 #ifde‡
RCC_CSR_LSEBYP


249 
RCC_CSR
 &~
RCC_CSR_LSEBYP
;

251 
RCC_BDCR
 &~
RCC_BDCR_LSEBYP
;

258 
	}
}

262 #unde‡
_RCC_REG


263 #unde‡
_RCC_BIT


	@libopencm3/lib/stm32/common/rng_common_v1.c

26 
	~<lib›ícm3/°m32/∫g.h
>

32 
	$∫g_dißbÀ
()

34 
RNG_CR
 &~
RNG_CR_RNGEN
;

35 
	}
}

39 
	$∫g_íabÀ
()

41 
RNG_CR
 |
RNG_CR_RNGEN
;

42 
	}
}

51 
boﬁ
 
	$∫g_gë_øndom
(
uöt32_t
 *
ønd_ƒ
)

54 i‡(!(
RNG_SR
 & 
RNG_SR_DRDY
)) {

55  
Ál£
;

59 i‡(
RNG_SR
 & (
RNG_SR_CECS
 | 
RNG_SR_SECS
)) {

60  
Ál£
;

63 *
ønd_ƒ
 = 
RNG_DR
;

65  
åue
;

66 
	}
}

75 
uöt32_t
 
	$∫g_gë_øndom_blockög
()

77 
uöt32_t
 
rv
;

78 
boﬁ
 
d⁄e
;

80 i‡(
RNG_SR
 & 
RNG_SR_SECS
) {

81 
	`∫g_dißbÀ
();

82 
	`∫g_íabÀ
();

84 
d⁄e
 = 
	`∫g_gë_øndom
(&
rv
);

85 } !
d⁄e
);

87  
rv
;

88 
	}
}

	@libopencm3/lib/stm32/common/rtc_common_l1f024.c

28 
	~<lib›ícm3/°m32/πc.h
>

36 
	$πc_£t_¥esˇÀr
(
uöt32_t
 
sync
, uöt32_à
async
)

42 
RTC_PRER
 = (
sync
 & 
RTC_PRER_PREDIV_S_MASK
);

43 
RTC_PRER
 |(
async
 << 
RTC_PRER_PREDIV_A_SHIFT
);

44 
	}
}

52 
	$πc_waô_f‹_synchro
()

55 
RTC_WPR
 = 0xca;

56 
RTC_WPR
 = 0x53;

58 
RTC_ISR
 &~(
RTC_ISR_RSF
);

60 !(
RTC_ISR
 & 
RTC_ISR_RSF
));

63 
RTC_WPR
 = 0xff;

64 
	}
}

70 
	$πc_u∆ock
()

72 
RTC_WPR
 = 0xca;

73 
RTC_WPR
 = 0x53;

74 
	}
}

80 
	$πc_lock
()

82 
RTC_WPR
 = 0xff;

83 
	}
}

89 
	$πc_£t_wakeup_time
(
uöt16_t
 
wkup_time
, 
uöt8_t
 
πc_¸_wuck£l
)

96 
RTC_CR
 &~
RTC_CR_WUTE
;

102 !((
RTC_ISR
Ë& (
RTC_ISR_WUTWF
)));

108 
RTC_WUTR
 = 
wkup_time
;

109 
RTC_CR
 |(
πc_¸_wuck£l
 << 
RTC_CR_WUCLKSEL_SHIFT
);

110 
RTC_CR
 |
RTC_CR_WUTE
;

111 
	}
}

118 
	$πc_˛ór_wakeup_Êag
()

120 
RTC_ISR
 &~
RTC_ISR_WUTF
;

121 
	}
}

	@libopencm3/lib/stm32/common/spi_common_all.c

54 
	~<lib›ícm3/°m32/•i.h
>

55 
	~<lib›ícm3/°m32/rcc.h
>

69 
	$•i_ª£t
(
uöt32_t
 
•i_≥rùhîÆ
)

70 { 
•i_≥rùhîÆ
) {

71 #i‡
	`deföed
(
SPI1_BASE
)

72 
SPI1_BASE
:

73 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI1
);

76 #i‡
	`deföed
(
SPI2_BASE
)

77 
SPI2_BASE
:

78 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI2
);

81 #i‡
	`deföed
(
SPI3_BASE
)

82 
SPI3_BASE
:

83 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI3
);

86 #i‡
	`deföed
(
SPI4_BASE
)

87 
SPI4_BASE
:

88 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI4
);

91 #i‡
	`deföed
(
SPI5_BASE
)

92 
SPI5_BASE
:

93 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI5
);

96 #i‡
	`deföed
(
SPI6_BASE
)

97 
SPI6_BASE
:

98 
	`rcc_≥rùh_ª£t_pul£
(
RST_SPI6
);

104 
	}
}

117 
	$•i_íabÀ
(
uöt32_t
 
•i
)

119 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_SPE
;

120 
	}
}

131 
	$•i_dißbÀ
(
uöt32_t
 
•i
)

133 
uöt32_t
 
ªg32
;

135 
ªg32
 = 
	`SPI_CR1
(
•i
);

136 
ªg32
 &~(
SPI_CR1_SPE
);

137 
	`SPI_CR1
(
•i
Ë
ªg32
;

138 
	}
}

151 
uöt16_t
 
	$•i_˛ón_dißbÀ
(
uöt32_t
 
•i
)

154 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_RXNE
));

156 
uöt16_t
 
d©a
 = 
	`SPI_DR
(
•i
);

159 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_TXE
));

162 
	`SPI_SR
(
•i
Ë& 
SPI_SR_BSY
);

164 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_SPE
;

166  
d©a
;

167 
	}
}

178 
	$•i_wrôe
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a
)

181 
	`SPI_DR
(
•i
Ë
d©a
;

182 
	}
}

194 
	$•i_£nd
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a
)

197 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_TXE
));

200 
	`SPI_DR
(
•i
Ë
d©a
;

201 
	}
}

212 
uöt16_t
 
	$•i_ªad
(
uöt32_t
 
•i
)

215 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_RXNE
));

218  
	`SPI_DR
(
•i
);

219 
	}
}

232 
uöt16_t
 
	$•i_x„r
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a
)

234 
	`•i_wrôe
(
•i
, 
d©a
);

237 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_RXNE
));

240  
	`SPI_DR
(
•i
);

241 
	}
}

252 
	$•i_£t_bidúe˘i⁄Æ_mode
(
uöt32_t
 
•i
)

254 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_BIDIMODE
;

255 
	}
}

267 
	$•i_£t_unidúe˘i⁄Æ_mode
(
uöt32_t
 
•i
)

269 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_BIDIMODE
;

270 
	}
}

282 
	$•i_£t_bidúe˘i⁄Æ_ª˚ive_⁄ly_mode
(
uöt32_t
 
•i
)

284 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_BIDIMODE
;

285 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_BIDIOE
;

286 
	}
}

298 
	$•i_£t_bidúe˘i⁄Æ_å™smô_⁄ly_mode
(
uöt32_t
 
•i
)

300 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_BIDIMODE
;

301 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_BIDIOE
;

302 
	}
}

312 
	$•i_íabÀ_¸c
(
uöt32_t
 
•i
)

314 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_CRCEN
;

315 
	}
}

323 
	$•i_dißbÀ_¸c
(
uöt32_t
 
•i
)

325 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_CRCEN
;

326 
	}
}

338 
	$•i_£t_√xt_tx_‰om_buf„r
(
uöt32_t
 
•i
)

340 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_CRCNEXT
;

341 
	}
}

353 
	$•i_£t_√xt_tx_‰om_¸c
(
uöt32_t
 
•i
)

355 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_CRCNEXT
;

356 
	}
}

364 
	$•i_£t_fuŒ_du∂ex_mode
(
uöt32_t
 
•i
)

366 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_RXONLY
;

367 
	}
}

376 
	$•i_£t_ª˚ive_⁄ly_mode
(
uöt32_t
 
•i
)

378 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_RXONLY
;

379 
	}
}

389 
	$•i_dißbÀ_so·w¨e_¶ave_m™agemít
(
uöt32_t
 
•i
)

391 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_SSM
;

392 
	}
}

403 
	$•i_íabÀ_so·w¨e_¶ave_m™agemít
(
uöt32_t
 
•i
)

405 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_SSM
;

407 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_SSOE
;

408 
	}
}

422 
	$•i_£t_nss_high
(
uöt32_t
 
•i
)

424 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_SSI
;

425 
	}
}

436 
	$•i_£t_nss_low
(
uöt32_t
 
•i
)

438 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_SSI
;

439 
	}
}

447 
	$•i_£nd_lsb_fú°
(
uöt32_t
 
•i
)

449 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_LSBFIRST
;

450 
	}
}

458 
	$•i_£nd_msb_fú°
(
uöt32_t
 
•i
)

460 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_LSBFIRST
;

461 
	}
}

473 
	$•i_£t_baudøã_¥esˇÀr
(
uöt32_t
 
•i
, 
uöt8_t
 
baudøã
)

475 
uöt32_t
 
ªg32
;

477 i‡(
baudøã
 > 7) {

481 
ªg32
 = (
	`SPI_CR1
(
•i
) & 0xffc7);

482 
ªg32
 |(
baudøã
 << 3);

483 
	`SPI_CR1
(
•i
Ë
ªg32
;

484 
	}
}

492 
	$•i_£t_ma°î_mode
(
uöt32_t
 
•i
)

494 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_MSTR
;

495 
	}
}

503 
	$•i_£t_¶ave_mode
(
uöt32_t
 
•i
)

505 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_MSTR
;

506 
	}
}

515 
	$•i_£t_˛ock_pﬁ¨ôy_1
(
uöt32_t
 
•i
)

517 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_CPOL
;

518 
	}
}

527 
	$•i_£t_˛ock_pﬁ¨ôy_0
(
uöt32_t
 
•i
)

529 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_CPOL
;

530 
	}
}

539 
	$•i_£t_˛ock_pha£_1
(
uöt32_t
 
•i
)

541 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_CPHA
;

542 
	}
}

551 
	$•i_£t_˛ock_pha£_0
(
uöt32_t
 
•i
)

553 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_CPHA
;

554 
	}
}

562 
	$•i_íabÀ_tx_buf„r_em±y_öãºu±
(
uöt32_t
 
•i
)

564 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_TXEIE
;

565 
	}
}

573 
	$•i_dißbÀ_tx_buf„r_em±y_öãºu±
(
uöt32_t
 
•i
)

575 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_TXEIE
;

576 
	}
}

584 
	$•i_íabÀ_rx_buf„r_nŸ_em±y_öãºu±
(
uöt32_t
 
•i
)

586 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_RXNEIE
;

587 
	}
}

595 
	$•i_dißbÀ_rx_buf„r_nŸ_em±y_öãºu±
(
uöt32_t
 
•i
)

597 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_RXNEIE
;

598 
	}
}

606 
	$•i_íabÀ_îr‹_öãºu±
(
uöt32_t
 
•i
)

608 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_ERRIE
;

609 
	}
}

617 
	$•i_dißbÀ_îr‹_öãºu±
(
uöt32_t
 
•i
)

619 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_ERRIE
;

620 
	}
}

631 
	$•i_íabÀ_ss_ouçut
(
uöt32_t
 
•i
)

633 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_SSOE
;

634 
	}
}

646 
	$•i_dißbÀ_ss_ouçut
(
uöt32_t
 
•i
)

648 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_SSOE
;

649 
	}
}

661 
	$•i_íabÀ_tx_dma
(
uöt32_t
 
•i
)

663 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_TXDMAEN
;

664 
	}
}

672 
	$•i_dißbÀ_tx_dma
(
uöt32_t
 
•i
)

674 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_TXDMAEN
;

675 
	}
}

687 
	$•i_íabÀ_rx_dma
(
uöt32_t
 
•i
)

689 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_RXDMAEN
;

690 
	}
}

698 
	$•i_dißbÀ_rx_dma
(
uöt32_t
 
•i
)

700 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_RXDMAEN
;

701 
	}
}

718 
	$•i_£t_°™d¨d_mode
(
uöt32_t
 
•i
, 
uöt8_t
 
mode
)

720 i‡(
mode
 > 3) {

724 
uöt32_t
 
ªg32
 = 
	`SPI_CR1
(
•i
Ë& ~(
SPI_CR1_CPOL
 | 
SPI_CR1_CPHA
);

725 
	`SPI_CR1
(
•i
Ë
ªg32
 | 
mode
;

726 
	}
}

	@libopencm3/lib/stm32/common/spi_common_v1.c

55 
	~<lib›ícm3/°m32/•i.h
>

56 
	~<lib›ícm3/°m32/rcc.h
>

83 
	$•i_öô_ma°î
(
uöt32_t
 
•i
, uöt32_à
br
, uöt32_à
˝ﬁ
, uöt32_à
˝ha
,

84 
uöt32_t
 
dff
, uöt32_à
lsbfú°
)

86 
uöt32_t
 
ªg32
 = 
	`SPI_CR1
(
•i
);

89 
ªg32
 &
SPI_CR1_SPE
 | 
SPI_CR1_CRCEN
 | 
SPI_CR1_CRCNEXT
;

91 
ªg32
 |
SPI_CR1_MSTR
;

93 
ªg32
 |
br
;

94 
ªg32
 |
˝ﬁ
;

95 
ªg32
 |
˝ha
;

96 
ªg32
 |
dff
;

97 
ªg32
 |
lsbfú°
;

99 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_SSOE
;

100 
	`SPI_CR1
(
•i
Ë
ªg32
;

103 
	}
}

111 
	$•i_£t_dff_8bô
(
uöt32_t
 
•i
)

113 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_DFF
;

114 
	}
}

122 
	$•i_£t_dff_16bô
(
uöt32_t
 
•i
)

124 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_DFF
;

125 
	}
}

	@libopencm3/lib/stm32/common/spi_common_v1_frf.c

32 
	~<lib›ícm3/°m32/•i.h
>

42 
	$•i_£t_‰f_ti
(
uöt32_t
 
•i
)

44 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_FRF
;

45 
	}
}

53 
	$•i_£t_‰f_mŸ‹ﬁa
(
uöt32_t
 
•i
)

55 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_FRF
;

56 
	}
}

58 
	#SPI_CR2_FRF
 (1 << 4)

	)

59 
	#SPI_CR2_FRF_MOTOROLA_MODE
 (0 << 4)

	)

60 
	#SPI_CR2_FRF_TI_MODE
 (1 << 4)

	)

65 
	#SPI_SR_TIFRFE
 (1 << 8)

66 
	#SPI_SR_FRE
 (1 << 8)

67 

	)

	@libopencm3/lib/stm32/common/spi_common_v2.c

54 
	~<lib›ícm3/°m32/•i.h
>

55 
	~<lib›ícm3/°m32/rcc.h
>

76 
	$•i_öô_ma°î
(
uöt32_t
 
•i
, uöt32_à
br
, uöt32_à
˝ﬁ
, uöt32_à
˝ha
,

77 
uöt32_t
 
lsbfú°
)

79 
uöt32_t
 
ªg32
 = 
	`SPI_CR1
(
•i
);

82 
ªg32
 &
SPI_CR1_SPE
 | 
SPI_CR1_CRCEN
 | 
SPI_CR1_CRCNEXT
 | 
SPI_CR1_CRCL
;

84 
ªg32
 |
SPI_CR1_MSTR
;

86 
ªg32
 |
br
;

87 
ªg32
 |
˝ﬁ
;

88 
ªg32
 |
˝ha
;

89 
ªg32
 |
lsbfú°
;

91 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_SSOE
;

92 
	`SPI_CR1
(
•i
Ë
ªg32
;

95 
	}
}

97 
	$•i_£nd8
(
uöt32_t
 
•i
, 
uöt8_t
 
d©a
)

100 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_TXE
));

102 
	`SPI_DR8
(
•i
Ë
d©a
;

103 
	}
}

105 
uöt8_t
 
	$•i_ªad8
(
uöt32_t
 
•i
)

108 !(
	`SPI_SR
(
•i
Ë& 
SPI_SR_RXNE
));

110  
	`SPI_DR8
(
•i
);

111 
	}
}

119 
	$•i_£t_¸˛_8bô
(
uöt32_t
 
•i
)

121 
	`SPI_CR1
(
•i
Ë&~
SPI_CR1_CRCL
;

122 
	}
}

130 
	$•i_£t_¸˛_16bô
(
uöt32_t
 
•i
)

132 
	`SPI_CR1
(
•i
Ë|
SPI_CR1_CRCL
;

133 
	}
}

141 
	$•i_£t_d©a_size
(
uöt32_t
 
•i
, 
uöt16_t
 
d©a_s
)

143 
	`SPI_CR2
(
•i
Ë(SPI_CR2(•iË& ~
SPI_CR2_DS_MASK
) |

144 (
d©a_s
 & 
SPI_CR2_DS_MASK
);

145 
	}
}

153 
	$•i_fifo_ª˚±i⁄_thªshﬁd_8bô
(
uöt32_t
 
•i
)

155 
	`SPI_CR2
(
•i
Ë|
SPI_CR2_FRXTH
;

156 
	}
}

164 
	$•i_fifo_ª˚±i⁄_thªshﬁd_16bô
(
uöt32_t
 
•i
)

166 
	`SPI_CR2
(
•i
Ë&~
SPI_CR2_FRXTH
;

167 
	}
}

	@libopencm3/lib/stm32/common/st_usbfs_core.c

21 
	~<lib›ícm3/cm3/comm⁄.h
>

22 
	~<lib›ícm3/°m32/rcc.h
>

23 
	~<lib›ícm3/°m32/toﬁs.h
>

24 
	~<lib›ícm3/°m32/°_usbfs.h
>

25 
	~<lib›ícm3/usb/usbd.h
>

26 
	~"../../usb/usb_¥iv©e.h
"

27 
	~"°_usbfs_c‹e.h
"

30 
uöt8_t
 
	g°_usbfs_f‹˚_«k
[8];

31 
_usbd_devi˚
 
	g°_usbfs_dev
;

33 
	$°_usbfs_£t_addªss
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
)

35 ()
dev
;

37 
	`SET_REG
(
USB_DADDR_REG
, (
addr
 & 
USB_DADDR_ADDR
Ë| 
USB_DADDR_EF
);

38 
	}
}

46 
	$°_usbfs_£t_ï_rx_bufsize
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
ï
, 
uöt32_t
 
size
)

48 ()
dev
;

49 i‡(
size
 > 62) {

50 i‡(
size
 & 0x1f) {

51 
size
 -= 32;

53 
	`USB_SET_EP_RX_COUNT
(
ï
, (
size
 << 5) | 0x8000);

55 i‡(
size
 & 1) {

56 
size
++;

58 
	`USB_SET_EP_RX_COUNT
(
ï
, 
size
 << 10);

60 
	}
}

62 
	$°_usbfs_ï_£tup
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
, uöt8_à
ty≥
,

63 
uöt16_t
 
max_size
,

64 (*
ˇŒback
Ë(
usbd_devi˚
 *
usbd_dev
,

65 
uöt8_t
 
ï
))

68 c⁄° 
uöt16_t
 
ty≥lookup
[] = {

69 [
USB_ENDPOINT_ATTR_CONTROL
] = 
USB_EP_TYPE_CONTROL
,

70 [
USB_ENDPOINT_ATTR_ISOCHRONOUS
] = 
USB_EP_TYPE_ISO
,

71 [
USB_ENDPOINT_ATTR_BULK
] = 
USB_EP_TYPE_BULK
,

72 [
USB_ENDPOINT_ATTR_INTERRUPT
] = 
USB_EP_TYPE_INTERRUPT
,

74 
uöt8_t
 
dú
 = 
addr
 & 0x80;

75 
addr
 &= 0x7f;

78 
	`USB_SET_EP_ADDR
(
addr
,áddr);

79 
	`USB_SET_EP_TYPE
(
addr
, 
ty≥lookup
[
ty≥
]);

81 i‡(
dú
 || (
addr
 == 0)) {

82 
	`USB_SET_EP_TX_ADDR
(
addr
, 
dev
->
pm_t›
);

83 i‡(
ˇŒback
) {

84 
dev
->
u£r_ˇŒback_˘r
[
addr
][
USB_TRANSACTION_IN
] =

85 (*)
ˇŒback
;

87 
	`USB_CLR_EP_TX_DTOG
(
addr
);

88 
	`USB_SET_EP_TX_STAT
(
addr
, 
USB_EP_TX_STAT_NAK
);

89 
dev
->
pm_t›
 +
max_size
;

92 i‡(!
dú
) {

93 
	`USB_SET_EP_RX_ADDR
(
addr
, 
dev
->
pm_t›
);

94 
	`°_usbfs_£t_ï_rx_bufsize
(
dev
, 
addr
, 
max_size
);

95 i‡(
ˇŒback
) {

96 
dev
->
u£r_ˇŒback_˘r
[
addr
][
USB_TRANSACTION_OUT
] =

97 (*)
ˇŒback
;

99 
	`USB_CLR_EP_RX_DTOG
(
addr
);

100 
	`USB_SET_EP_RX_STAT
(
addr
, 
USB_EP_RX_STAT_VALID
);

101 
dev
->
pm_t›
 +
max_size
;

103 
	}
}

105 
	$°_usbfs_ídpoöts_ª£t
(
usbd_devi˚
 *
dev
)

107 
i
;

110 
i
 = 1; i < 8; i++) {

111 
	`USB_SET_EP_TX_STAT
(
i
, 
USB_EP_TX_STAT_DISABLED
);

112 
	`USB_SET_EP_RX_STAT
(
i
, 
USB_EP_RX_STAT_DISABLED
);

114 
dev
->
pm_t›
 = 
USBD_PM_TOP
 + (2 * dev->
desc
->
bMaxPackëSize0
);

115 
	}
}

117 
	$°_usbfs_ï_°Æl_£t
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
,

118 
uöt8_t
 
°Æl
)

120 ()
dev
;

121 i‡(
addr
 == 0) {

122 
	`USB_SET_EP_TX_STAT
(
addr
, 
°Æl
 ? 
USB_EP_TX_STAT_STALL
 :

123 
USB_EP_TX_STAT_NAK
);

126 i‡(
addr
 & 0x80) {

127 
addr
 &= 0x7F;

129 
	`USB_SET_EP_TX_STAT
(
addr
, 
°Æl
 ? 
USB_EP_TX_STAT_STALL
 :

130 
USB_EP_TX_STAT_NAK
);

133 i‡(!
°Æl
) {

134 
	`USB_CLR_EP_TX_DTOG
(
addr
);

138 i‡(!
°Æl
) {

139 
	`USB_CLR_EP_RX_DTOG
(
addr
);

142 
	`USB_SET_EP_RX_STAT
(
addr
, 
°Æl
 ? 
USB_EP_RX_STAT_STALL
 :

143 
USB_EP_RX_STAT_VALID
);

145 
	}
}

147 
uöt8_t
 
	$°_usbfs_ï_°Æl_gë
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
)

149 ()
dev
;

150 i‡(
addr
 & 0x80) {

151 i‡((*
	`USB_EP_REG
(
addr
 & 0x7FË& 
USB_EP_TX_STAT
) ==

152 
USB_EP_TX_STAT_STALL
) {

156 i‡((*
	`USB_EP_REG
(
addr
Ë& 
USB_EP_RX_STAT
) ==

157 
USB_EP_RX_STAT_STALL
) {

162 
	}
}

164 
	$°_usbfs_ï_«k_£t
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
, uöt8_à
«k
)

166 ()
dev
;

168 i‡(
addr
 & 0x80) {

172 
°_usbfs_f‹˚_«k
[
addr
] = 
«k
;

174 i‡(
«k
) {

175 
	`USB_SET_EP_RX_STAT
(
addr
, 
USB_EP_RX_STAT_NAK
);

177 
	`USB_SET_EP_RX_STAT
(
addr
, 
USB_EP_RX_STAT_VALID
);

179 
	}
}

181 
uöt16_t
 
	$°_usbfs_ï_wrôe_∑ckë
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
,

182 c⁄° *
buf
, 
uöt16_t
 
Àn
)

184 ()
dev
;

185 
addr
 &= 0x7F;

187 i‡((*
	`USB_EP_REG
(
addr
Ë& 
USB_EP_TX_STAT
Ë=
USB_EP_TX_STAT_VALID
) {

191 
	`°_usbfs_c›y_to_pm
(
	`USB_GET_EP_TX_BUFF
(
addr
), 
buf
, 
Àn
);

192 
	`USB_SET_EP_TX_COUNT
(
addr
, 
Àn
);

193 
	`USB_SET_EP_TX_STAT
(
addr
, 
USB_EP_TX_STAT_VALID
);

195  
Àn
;

196 
	}
}

198 
uöt16_t
 
	$°_usbfs_ï_ªad_∑ckë
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
,

199 *
buf
, 
uöt16_t
 
Àn
)

201 ()
dev
;

202 i‡((*
	`USB_EP_REG
(
addr
Ë& 
USB_EP_RX_STAT
Ë=
USB_EP_RX_STAT_VALID
) {

206 
Àn
 = 
	`MIN
(
	`USB_GET_EP_RX_COUNT
(
addr
) & 0x3ff,Üen);

207 
	`°_usbfs_c›y_‰om_pm
(
buf
, 
	`USB_GET_EP_RX_BUFF
(
addr
), 
Àn
);

208 
	`USB_CLR_EP_RX_CTR
(
addr
);

210 i‡(!
°_usbfs_f‹˚_«k
[
addr
]) {

211 
	`USB_SET_EP_RX_STAT
(
addr
, 
USB_EP_RX_STAT_VALID
);

214  
Àn
;

215 
	}
}

217 
	$°_usbfs_pﬁl
(
usbd_devi˚
 *
dev
)

219 
uöt16_t
 
i°r
 = *
USB_ISTR_REG
;

221 i‡(
i°r
 & 
USB_ISTR_RESET
) {

222 
	`USB_CLR_ISTR_RESET
();

223 
dev
->
pm_t›
 = 
USBD_PM_TOP
;

224 
	`_usbd_ª£t
(
dev
);

228 i‡(
i°r
 & 
USB_ISTR_CTR
) {

229 
uöt8_t
 
ï
 = 
i°r
 & 
USB_ISTR_EP_ID
;

230 
uöt8_t
 
ty≥
;

232 i‡(
i°r
 & 
USB_ISTR_DIR
) {

234 i‡(*
	`USB_EP_REG
(
ï
Ë& 
USB_EP_SETUP
) {

235 
ty≥
 = 
USB_TRANSACTION_SETUP
;

237 
ty≥
 = 
USB_TRANSACTION_OUT
;

240 
ty≥
 = 
USB_TRANSACTION_IN
;

241 
	`USB_CLR_EP_TX_CTR
(
ï
);

244 i‡(
dev
->
u£r_ˇŒback_˘r
[
ï
][
ty≥
]) {

245 
dev
->
u£r_ˇŒback_˘r
[
ï
][
ty≥
] (dev,Ép);

247 
	`USB_CLR_EP_RX_CTR
(
ï
);

251 i‡(
i°r
 & 
USB_ISTR_SUSP
) {

252 
	`USB_CLR_ISTR_SUSP
();

253 i‡(
dev
->
u£r_ˇŒback_su•íd
) {

254 
dev
->
	`u£r_ˇŒback_su•íd
();

258 i‡(
i°r
 & 
USB_ISTR_WKUP
) {

259 
	`USB_CLR_ISTR_WKUP
();

260 i‡(
dev
->
u£r_ˇŒback_ªsume
) {

261 
dev
->
	`u£r_ˇŒback_ªsume
();

265 i‡(
i°r
 & 
USB_ISTR_SOF
) {

266 
	`USB_CLR_ISTR_SOF
();

267 i‡(
dev
->
u£r_ˇŒback_sof
) {

268 
dev
->
	`u£r_ˇŒback_sof
();

272 i‡(
dev
->
u£r_ˇŒback_sof
) {

273 *
USB_CNTR_REG
 |
USB_CNTR_SOFM
;

275 *
USB_CNTR_REG
 &~
USB_CNTR_SOFM
;

277 
	}
}

	@libopencm3/lib/stm32/common/st_usbfs_core.h

27 #i‚de‡
ST_USBFS_CORE


28 
	#ST_USBFS_CORE


	)

30 
	~<lib›ícm3/°m32/°_usbfs.h
>

31 
	~<lib›ícm3/usb/usbd.h
>

33 
	#USBD_PM_TOP
 0x40

	)

35 
°_usbfs_£t_addªss
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
addr
);

36 
°_usbfs_£t_ï_rx_bufsize
(
usbd_devi˚
 *
dev
, 
uöt8_t
 
ï
, 
uöt32_t
 
size
);

38 
°_usbfs_ï_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

39 
uöt8_t
 
ty≥
, 
uöt16_t
 
max_size
,

40 (*
ˇŒback
Ë(
usbd_devi˚
 *
usbd_dev
,

41 
uöt8_t
 
ï
));

43 
	`°_usbfs_ídpoöts_ª£t
(
usbd_devi˚
 *
usbd_dev
);

44 
	`°_usbfs_ï_°Æl_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
°Æl
);

45 
uöt8_t
 
	`°_usbfs_ï_°Æl_gë
(
usbd_devi˚
 *
usbd_dev
, uöt8_à
addr
);

46 
	`°_usbfs_ï_«k_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
«k
);

47 
uöt16_t
 
	`°_usbfs_ï_wrôe_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

48 c⁄° *
buf
, 
uöt16_t
 
Àn
);

49 
uöt16_t
 
	`°_usbfs_ï_ªad_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

50 *
buf
, 
uöt16_t
 
Àn
);

51 
	`°_usbfs_pﬁl
(
usbd_devi˚
 *
usbd_dev
);

62 
	`°_usbfs_c›y_‰om_pm
(*
buf
, c⁄° vﬁ©ûê*
vPM
, 
uöt16_t
 
Àn
);

71 
	`°_usbfs_c›y_to_pm
(vﬁ©ûê*
vPM
, c⁄° *
buf
, 
uöt16_t
 
Àn
);

73 
uöt8_t
 
°_usbfs_f‹˚_«k
[8];

74 
_usbd_devi˚
 
°_usbfs_dev
;

	@libopencm3/lib/stm32/common/timer_common_all.c

112 
	~<lib›ícm3/°m32/timî.h
>

113 
	~<lib›ícm3/°m32/rcc.h
>

124 
	$timî_íabÀ_úq
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
úq
)

126 
	`TIM_DIER
(
timî_≥rùhîÆ
Ë|
úq
;

127 
	}
}

138 
	$timî_dißbÀ_úq
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
úq
)

140 
	`TIM_DIER
(
timî_≥rùhîÆ
Ë&~
úq
;

141 
	}
}

159 
boﬁ
 
	$timî_öãºu±_sour˚
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
)

162 i‡(((
	`TIM_SR
(
timî_≥rùhîÆ
) &

163 
	`TIM_DIER
(
timî_≥rùhîÆ
Ë& 
Êag
) == 0) ||

164 (
Êag
 > 
TIM_SR_BIF
)) {

165  
Ál£
;

167  
åue
;

168 
	}
}

179 
boﬁ
 
	$timî_gë_Êag
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
)

181 i‡((
	`TIM_SR
(
timî_≥rùhîÆ
Ë& 
Êag
) != 0) {

182  
åue
;

185  
Ál£
;

186 
	}
}

196 
	$timî_˛ór_Êag
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Êag
)

199 
	`TIM_SR
(
timî_≥rùhîÆ
Ë~
Êag
;

200 
	}
}

230 
	$timî_£t_mode
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
˛ock_div
,

231 
uöt32_t
 
Æignmít
, uöt32_à
dúe˘i⁄
)

233 
uöt32_t
 
¸1
;

235 
¸1
 = 
	`TIM_CR1
(
timî_≥rùhîÆ
);

237 
¸1
 &~(
TIM_CR1_CKD_CK_INT_MASK
 | 
TIM_CR1_CMS_MASK
 | 
TIM_CR1_DIR_DOWN
);

239 
¸1
 |
˛ock_div
 | 
Æignmít
 | 
dúe˘i⁄
;

241 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë
¸1
;

242 
	}
}

256 
	$timî_£t_˛ock_divisi⁄
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
˛ock_div
)

258 
˛ock_div
 &
TIM_CR1_CKD_CK_INT_MASK
;

259 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_CKD_CK_INT_MASK
;

260 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
˛ock_div
;

261 
	}
}

273 
	$timî_íabÀ_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
)

275 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_ARPE
;

276 
	}
}

289 
	$timî_dißbÀ_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
)

291 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_ARPE
;

292 
	}
}

304 
	$timî_£t_Æignmít
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
Æignmít
)

306 
Æignmít
 &
TIM_CR1_CMS_MASK
;

307 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_CMS_MASK
;

308 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
Æignmít
;

309 
	}
}

320 
	$timî_dúe˘i⁄_up
(
uöt32_t
 
timî_≥rùhîÆ
)

322 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_DIR_DOWN
;

323 
	}
}

334 
	$timî_dúe˘i⁄_down
(
uöt32_t
 
timî_≥rùhîÆ
)

336 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_DIR_DOWN
;

337 
	}
}

346 
	$timî_⁄e_shŸ_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

348 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_OPM
;

349 
	}
}

358 
	$timî_c⁄töuous_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

360 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_OPM
;

361 
	}
}

375 
	$timî_upd©e_⁄_™y
(
uöt32_t
 
timî_≥rùhîÆ
)

377 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_URS
;

378 
	}
}

388 
	$timî_upd©e_⁄_ovîÊow
(
uöt32_t
 
timî_≥rùhîÆ
)

390 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_URS
;

391 
	}
}

400 
	$timî_íabÀ_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
)

402 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_UDIS
;

403 
	}
}

414 
	$timî_dißbÀ_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
)

416 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_UDIS
;

417 
	}
}

428 
	$timî_íabÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
)

430 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë|
TIM_CR1_CEN
;

431 
	}
}

440 
	$timî_dißbÀ_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
)

442 
	`TIM_CR1
(
timî_≥rùhîÆ
Ë&~
TIM_CR1_CEN
;

443 
	}
}

461 
	$timî_£t_ouçut_idÀ_°©e
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
ouçuts
)

463 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
ouçuts
 & 
TIM_CR2_OIS_MASK
;

464 
	}
}

481 
	$timî_ª£t_ouçut_idÀ_°©e
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
ouçuts
)

483 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~(
ouçuts
 & 
TIM_CR2_OIS_MASK
);

484 
	}
}

496 
	$timî_£t_ti1_ch123_x‹
(
uöt32_t
 
timî_≥rùhîÆ
)

498 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_TI1S
;

499 
	}
}

510 
	$timî_£t_ti1_ch1
(
uöt32_t
 
timî_≥rùhîÆ
)

512 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_TI1S
;

513 
	}
}

526 
	$timî_£t_ma°î_mode
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
mode
)

528 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_MMS_MASK
;

529 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
mode
;

530 
	}
}

541 
	$timî_£t_dma_⁄_com∑ª_evít
(
uöt32_t
 
timî_≥rùhîÆ
)

543 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_CCDS
;

544 
	}
}

555 
	$timî_£t_dma_⁄_upd©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
)

557 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_CCDS
;

558 
	}
}

574 
	$timî_íabÀ_com∑ª_c⁄åﬁ_upd©e_⁄_åiggî
(
uöt32_t
 
timî_≥rùhîÆ
)

576 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_CCUS
;

577 
	}
}

593 
	$timî_dißbÀ_com∑ª_c⁄åﬁ_upd©e_⁄_åiggî
(
uöt32_t
 
timî_≥rùhîÆ
)

595 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_CCUS
;

596 
	}
}

611 
	$timî_íabÀ_¥ñﬂd_com∂emíåy_íabÀ_bôs
(
uöt32_t
 
timî_≥rùhîÆ
)

613 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_CCPC
;

614 
	}
}

628 
	$timî_dißbÀ_¥ñﬂd_com∂emíåy_íabÀ_bôs
(
uöt32_t
 
timî_≥rùhîÆ
)

630 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_CCPC
;

631 
	}
}

643 
	$timî_£t_¥esˇÀr
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
vÆue
)

645 
	`TIM_PSC
(
timî_≥rùhîÆ
Ë
vÆue
;

646 
	}
}

661 
	$timî_£t_ª≥tôi⁄_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
vÆue
)

663 
	`TIM_RCR
(
timî_≥rùhîÆ
Ë
vÆue
;

664 
	}
}

676 
	$timî_£t_≥riod
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
≥riod
)

678 
	`TIM_ARR
(
timî_≥rùhîÆ
Ë
≥riod
;

679 
	}
}

695 
	$timî_íabÀ_oc_˛ór
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

697 
oc_id
) {

698 
TIM_OC1
:

699 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1CE
;

701 
TIM_OC2
:

702 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2CE
;

704 
TIM_OC3
:

705 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3CE
;

707 
TIM_OC4
:

708 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4CE
;

710 
TIM_OC1N
:

711 
TIM_OC2N
:

712 
TIM_OC3N
:

718 
	}
}

729 
	$timî_dißbÀ_oc_˛ór
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

731 
oc_id
) {

732 
TIM_OC1
:

733 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC1CE
;

735 
TIM_OC2
:

736 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC2CE
;

738 
TIM_OC3
:

739 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC3CE
;

741 
TIM_OC4
:

742 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC4CE
;

744 
TIM_OC1N
:

745 
TIM_OC2N
:

746 
TIM_OC3N
:

752 
	}
}

768 
	$timî_£t_oc_Á°_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

770 
oc_id
) {

771 
TIM_OC1
:

772 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1FE
;

774 
TIM_OC2
:

775 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2FE
;

777 
TIM_OC3
:

778 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3FE
;

780 
TIM_OC4
:

781 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4FE
;

783 
TIM_OC1N
:

784 
TIM_OC2N
:

785 
TIM_OC3N
:

789 
	}
}

803 
	$timî_£t_oc_¶ow_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

805 
oc_id
) {

806 
TIM_OC1
:

807 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC1FE
;

809 
TIM_OC2
:

810 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC2FE
;

812 
TIM_OC3
:

813 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC3FE
;

815 
TIM_OC4
:

816 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC4FE
;

818 
TIM_OC1N
:

819 
TIM_OC2N
:

820 
TIM_OC3N
:

824 
	}
}

853 
	$timî_£t_oc_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
,

854 
tim_oc_mode
 
oc_mode
)

856 
oc_id
) {

857 
TIM_OC1
:

858 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_CC1S_MASK
;

859 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_CC1S_OUT
;

860 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC1M_MASK
;

861 
oc_mode
) {

862 
TIM_OCM_FROZEN
:

863 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_FROZEN
;

865 
TIM_OCM_ACTIVE
:

866 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_ACTIVE
;

868 
TIM_OCM_INACTIVE
:

869 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_INACTIVE
;

871 
TIM_OCM_TOGGLE
:

872 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_TOGGLE
;

874 
TIM_OCM_FORCE_LOW
:

875 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_FORCE_LOW
;

877 
TIM_OCM_FORCE_HIGH
:

878 
	`TIM_CCMR1
(
timî_≥rùhîÆ
) |=

879 
TIM_CCMR1_OC1M_FORCE_HIGH
;

881 
TIM_OCM_PWM1
:

882 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_PWM1
;

884 
TIM_OCM_PWM2
:

885 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1M_PWM2
;

889 
TIM_OC2
:

890 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_CC2S_MASK
;

891 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_CC2S_OUT
;

892 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC2M_MASK
;

893 
oc_mode
) {

894 
TIM_OCM_FROZEN
:

895 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_FROZEN
;

897 
TIM_OCM_ACTIVE
:

898 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_ACTIVE
;

900 
TIM_OCM_INACTIVE
:

901 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_INACTIVE
;

903 
TIM_OCM_TOGGLE
:

904 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_TOGGLE
;

906 
TIM_OCM_FORCE_LOW
:

907 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_FORCE_LOW
;

909 
TIM_OCM_FORCE_HIGH
:

910 
	`TIM_CCMR1
(
timî_≥rùhîÆ
) |=

911 
TIM_CCMR1_OC2M_FORCE_HIGH
;

913 
TIM_OCM_PWM1
:

914 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_PWM1
;

916 
TIM_OCM_PWM2
:

917 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2M_PWM2
;

921 
TIM_OC3
:

922 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_CC3S_MASK
;

923 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_CC3S_OUT
;

924 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC3M_MASK
;

925 
oc_mode
) {

926 
TIM_OCM_FROZEN
:

927 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_FROZEN
;

929 
TIM_OCM_ACTIVE
:

930 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_ACTIVE
;

932 
TIM_OCM_INACTIVE
:

933 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_INACTIVE
;

935 
TIM_OCM_TOGGLE
:

936 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_TOGGLE
;

938 
TIM_OCM_FORCE_LOW
:

939 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_FORCE_LOW
;

941 
TIM_OCM_FORCE_HIGH
:

942 
	`TIM_CCMR2
(
timî_≥rùhîÆ
) |=

943 
TIM_CCMR2_OC3M_FORCE_HIGH
;

945 
TIM_OCM_PWM1
:

946 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_PWM1
;

948 
TIM_OCM_PWM2
:

949 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3M_PWM2
;

953 
TIM_OC4
:

954 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_CC4S_MASK
;

955 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_CC4S_OUT
;

956 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC4M_MASK
;

957 
oc_mode
) {

958 
TIM_OCM_FROZEN
:

959 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_FROZEN
;

961 
TIM_OCM_ACTIVE
:

962 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_ACTIVE
;

964 
TIM_OCM_INACTIVE
:

965 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_INACTIVE
;

967 
TIM_OCM_TOGGLE
:

968 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_TOGGLE
;

970 
TIM_OCM_FORCE_LOW
:

971 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_FORCE_LOW
;

973 
TIM_OCM_FORCE_HIGH
:

974 
	`TIM_CCMR2
(
timî_≥rùhîÆ
) |=

975 
TIM_CCMR2_OC4M_FORCE_HIGH
;

977 
TIM_OCM_PWM1
:

978 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_PWM1
;

980 
TIM_OCM_PWM2
:

981 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4M_PWM2
;

985 
TIM_OC1N
:

986 
TIM_OC2N
:

987 
TIM_OC3N
:

991 
	}
}

1002 
	$timî_íabÀ_oc_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1004 
oc_id
) {

1005 
TIM_OC1
:

1006 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC1PE
;

1008 
TIM_OC2
:

1009 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
TIM_CCMR1_OC2PE
;

1011 
TIM_OC3
:

1012 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC3PE
;

1014 
TIM_OC4
:

1015 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
TIM_CCMR2_OC4PE
;

1017 
TIM_OC1N
:

1018 
TIM_OC2N
:

1019 
TIM_OC3N
:

1023 
	}
}

1034 
	$timî_dißbÀ_oc_¥ñﬂd
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1036 
oc_id
) {

1037 
TIM_OC1
:

1038 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC1PE
;

1040 
TIM_OC2
:

1041 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_OC2PE
;

1043 
TIM_OC3
:

1044 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC3PE
;

1046 
TIM_OC4
:

1047 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_OC4PE
;

1049 
TIM_OC1N
:

1050 
TIM_OC2N
:

1051 
TIM_OC3N
:

1055 
	}
}

1069 
	$timî_£t_oc_pﬁ¨ôy_high
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1071 
oc_id
) {

1072 
TIM_OC1
:

1073 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC1P
;

1075 
TIM_OC2
:

1076 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC2P
;

1078 
TIM_OC3
:

1079 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC3P
;

1081 
TIM_OC4
:

1082 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC4P
;

1084 
TIM_OC1N
:

1085 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC1NP
;

1087 
TIM_OC2N
:

1088 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC2NP
;

1090 
TIM_OC3N
:

1091 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC3NP
;

1094 
	}
}

1108 
	$timî_£t_oc_pﬁ¨ôy_low
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1110 
oc_id
) {

1111 
TIM_OC1
:

1112 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC1P
;

1114 
TIM_OC2
:

1115 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC2P
;

1117 
TIM_OC3
:

1118 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC3P
;

1120 
TIM_OC4
:

1121 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC4P
;

1123 
TIM_OC1N
:

1124 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC1NP
;

1126 
TIM_OC2N
:

1127 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC2NP
;

1129 
TIM_OC3N
:

1130 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC3NP
;

1133 
	}
}

1147 
	$timî_íabÀ_oc_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1149 
oc_id
) {

1150 
TIM_OC1
:

1151 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC1E
;

1153 
TIM_OC2
:

1154 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC2E
;

1156 
TIM_OC3
:

1157 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC3E
;

1159 
TIM_OC4
:

1160 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC4E
;

1162 
TIM_OC1N
:

1163 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC1NE
;

1165 
TIM_OC2N
:

1166 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC2NE
;

1168 
TIM_OC3N
:

1169 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|
TIM_CCER_CC3NE
;

1172 
	}
}

1186 
	$timî_dißbÀ_oc_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
)

1188 
oc_id
) {

1189 
TIM_OC1
:

1190 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC1E
;

1192 
TIM_OC2
:

1193 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC2E
;

1195 
TIM_OC3
:

1196 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC3E
;

1198 
TIM_OC4
:

1199 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC4E
;

1201 
TIM_OC1N
:

1202 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC1NE
;

1204 
TIM_OC2N
:

1205 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC2NE
;

1207 
TIM_OC3N
:

1208 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~
TIM_CCER_CC3NE
;

1211 
	}
}

1228 
	$timî_£t_oc_idÀ_°©e_£t
(
uöt32_t
 
timî_≥rùhîÆ
,

1229 
tim_oc_id
 
oc_id
)

1231 
oc_id
) {

1232 
TIM_OC1
:

1233 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS1
;

1235 
TIM_OC1N
:

1236 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS1N
;

1238 
TIM_OC2
:

1239 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS2
;

1241 
TIM_OC2N
:

1242 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS2N
;

1244 
TIM_OC3
:

1245 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS3
;

1247 
TIM_OC3N
:

1248 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS3N
;

1250 
TIM_OC4
:

1251 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë|
TIM_CR2_OIS4
;

1254 
	}
}

1271 
	$timî_£t_oc_idÀ_°©e_un£t
(
uöt32_t
 
timî_≥rùhîÆ
,

1272 
tim_oc_id
 
oc_id
)

1274 
oc_id
) {

1275 
TIM_OC1
:

1276 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS1
;

1278 
TIM_OC1N
:

1279 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS1N
;

1281 
TIM_OC2
:

1282 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS2
;

1284 
TIM_OC2N
:

1285 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS2N
;

1287 
TIM_OC3
:

1288 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS3
;

1290 
TIM_OC3N
:

1291 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS3N
;

1293 
TIM_OC4
:

1294 
	`TIM_CR2
(
timî_≥rùhîÆ
Ë&~
TIM_CR2_OIS4
;

1297 
	}
}

1312 
	$timî_£t_oc_vÆue
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_oc_id
 
oc_id
,

1313 
uöt32_t
 
vÆue
)

1315 
oc_id
) {

1316 
TIM_OC1
:

1317 
	`TIM_CCR1
(
timî_≥rùhîÆ
Ë
vÆue
;

1319 
TIM_OC2
:

1320 
	`TIM_CCR2
(
timî_≥rùhîÆ
Ë
vÆue
;

1322 
TIM_OC3
:

1323 
	`TIM_CCR3
(
timî_≥rùhîÆ
Ë
vÆue
;

1325 
TIM_OC4
:

1326 
	`TIM_CCR4
(
timî_≥rùhîÆ
Ë
vÆue
;

1328 
TIM_OC1N
:

1329 
TIM_OC2N
:

1330 
TIM_OC3N
:

1334 
	}
}

1352 
	$timî_íabÀ_bªak_maö_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
)

1354 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_MOE
;

1355 
	}
}

1369 
	$timî_dißbÀ_bªak_maö_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
)

1371 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_MOE
;

1372 
	}
}

1387 
	$timî_íabÀ_bªak_autom©ic_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
)

1389 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_AOE
;

1390 
	}
}

1405 
	$timî_dißbÀ_bªak_autom©ic_ouçut
(
uöt32_t
 
timî_≥rùhîÆ
)

1407 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_AOE
;

1408 
	}
}

1421 
	$timî_£t_bªak_pﬁ¨ôy_high
(
uöt32_t
 
timî_≥rùhîÆ
)

1423 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_BKP
;

1424 
	}
}

1437 
	$timî_£t_bªak_pﬁ¨ôy_low
(
uöt32_t
 
timî_≥rùhîÆ
)

1439 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_BKP
;

1440 
	}
}

1453 
	$timî_íabÀ_bªak
(
uöt32_t
 
timî_≥rùhîÆ
)

1455 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_BKE
;

1456 
	}
}

1469 
	$timî_dißbÀ_bªak
(
uöt32_t
 
timî_≥rùhîÆ
)

1471 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_BKE
;

1472 
	}
}

1489 
	$timî_£t_íabÀd_off_°©e_ö_run_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

1491 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_OSSR
;

1492 
	}
}

1508 
	$timî_£t_dißbÀd_off_°©e_ö_run_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

1510 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_OSSR
;

1511 
	}
}

1526 
	$timî_£t_íabÀd_off_°©e_ö_idÀ_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

1528 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
TIM_BDTR_OSSI
;

1529 
	}
}

1543 
	$timî_£t_dißbÀd_off_°©e_ö_idÀ_mode
(
uöt32_t
 
timî_≥rùhîÆ
)

1545 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë&~
TIM_BDTR_OSSI
;

1546 
	}
}

1562 
	$timî_£t_bªak_lock
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
lock
)

1564 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
lock
;

1565 
	}
}

1587 
	$timî_£t_dódtime
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
dódtime
)

1589 
	`TIM_BDTR
(
timî_≥rùhîÆ
Ë|
dódtime
;

1590 
	}
}

1605 
	$timî_gíî©e_evít
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
evít
)

1607 
	`TIM_EGR
(
timî_≥rùhîÆ
Ë|
evít
;

1608 
	}
}

1619 
uöt32_t
 
	$timî_gë_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
)

1621  
	`TIM_CNT
(
timî_≥rùhîÆ
);

1622 
	}
}

1633 
	$timî_£t_cou¡î
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
cou¡
)

1635 
	`TIM_CNT
(
timî_≥rùhîÆ
Ë
cou¡
;

1636 
	}
}

1652 
	$timî_ic_£t_fûãr
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
,

1653 
tim_ic_fûãr
 
Êt
)

1655 
ic
) {

1656 
TIM_IC1
:

1657 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_IC1F_MASK
;

1658 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
Êt
 << 4;

1660 
TIM_IC2
:

1661 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_IC2F_MASK
;

1662 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
Êt
 << 12;

1664 
TIM_IC3
:

1665 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_IC3F_MASK
;

1666 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
Êt
 << 4;

1668 
TIM_IC4
:

1669 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_IC4F_MASK
;

1670 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
Êt
 << 12;

1673 
	}
}

1685 
	$timî_ic_£t_¥esˇÀr
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
,

1686 
tim_ic_psc
 
psc
)

1688 
ic
) {

1689 
TIM_IC1
:

1690 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_IC1PSC_MASK
;

1691 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
psc
 << 2;

1693 
TIM_IC2
:

1694 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_IC2PSC_MASK
;

1695 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
psc
 << 10;

1697 
TIM_IC3
:

1698 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_IC3PSC_MASK
;

1699 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
psc
 << 2;

1701 
TIM_IC4
:

1702 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_IC4PSC_MASK
;

1703 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
psc
 << 10;

1706 
	}
}

1729 
	$timî_ic_£t_öput
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
,

1730 
tim_ic_öput
 
ö
)

1732 
ö
 &= 3;

1734 i‡(((
ic
 =
TIM_IC2
Ë|| (i¯=
TIM_IC4
)) &&

1735 ((
ö
 =
TIM_IC_IN_TI1
Ë|| (ö =
TIM_IC_IN_TI2
))) {

1737 
ö
 ^= 3;

1740 
ic
) {

1741 
TIM_IC1
:

1742 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_CC1S_MASK
;

1743 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
ö
;

1745 
TIM_IC2
:

1746 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR1_CC2S_MASK
;

1747 
	`TIM_CCMR1
(
timî_≥rùhîÆ
Ë|
ö
 << 8;

1749 
TIM_IC3
:

1750 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_CC3S_MASK
;

1751 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
ö
;

1753 
TIM_IC4
:

1754 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë&~
TIM_CCMR2_CC4S_MASK
;

1755 
	`TIM_CCMR2
(
timî_≥rùhîÆ
Ë|
ö
 << 8;

1758 
	}
}

1767 
	$timî_ic_íabÀ
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
)

1769 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|(0x1 << (
ic
 * 4));

1770 
	}
}

1779 
	$timî_ic_dißbÀ
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
)

1781 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~(0x1 << (
ic
 * 4));

1782 
	}
}

1797 
	$timî_¶ave_£t_fûãr
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_fûãr
 
Êt
)

1799 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë&~
TIM_SMCR_ETF_MASK
;

1800 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë|
Êt
 << 8;

1801 
	}
}

1812 
	$timî_¶ave_£t_¥esˇÀr
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_psc
 
psc
)

1814 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë&~
TIM_SMCR_ETPS_MASK
;

1815 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë|
psc
 << 12;

1816 
	}
}

1825 
	$timî_¶ave_£t_pﬁ¨ôy
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ë_pﬁ
 
pﬁ
)

1827 i‡(
pﬁ
) {

1828 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë|
TIM_SMCR_ETP
;

1830 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë&~
TIM_SMCR_ETP
;

1832 
	}
}

1841 
	$timî_¶ave_£t_mode
(
uöt32_t
 
timî_≥rùhîÆ
, 
uöt8_t
 
mode
)

1843 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë&~
TIM_SMCR_SMS_MASK
;

1844 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë|
mode
;

1845 
	}
}

1854 
	$timî_¶ave_£t_åiggî
(
uöt32_t
 
timî_≥rùhîÆ
, 
uöt8_t
 
åiggî
)

1856 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë&~
TIM_SMCR_TS_MASK
;

1857 
	`TIM_SMCR
(
timî_≥rùhîÆ
Ë|
åiggî
;

1858 
	}
}

	@libopencm3/lib/stm32/common/timer_common_f0234.c

27 
	~<lib›ícm3/°m32/timî.h
>

39 
	$timî_ic_£t_pﬁ¨ôy
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
,

40 
tim_ic_pﬁ
 
pﬁ
)

45 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~(0x®<< (
ic
 * 4));

46 
pﬁ
) {

47 
TIM_IC_RISING
:

49 
TIM_IC_BOTH
:

50 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|(0x®<< (
ic
 * 4));

52 
TIM_IC_FALLING
:

53 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|(0x2 << (
ic
 * 4));

55 
	}
}

	@libopencm3/lib/stm32/common/timer_common_f24.c

27 
	~<lib›ícm3/°m32/timî.h
>

40 
	$timî_£t_›ti⁄
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
›ti⁄
)

42 i‡(
timî_≥rùhîÆ
 =
TIM2
) {

43 
	`TIM_OR
(
timî_≥rùhîÆ
Ë&~
TIM2_OR_ITR1_RMP_MASK
;

44 
	`TIM_OR
(
timî_≥rùhîÆ
Ë|
›ti⁄
;

45 } i‡(
timî_≥rùhîÆ
 =
TIM5
) {

46 
	`TIM_OR
(
timî_≥rùhîÆ
Ë&~
TIM5_OR_TI4_RMP_MASK
;

47 
	`TIM_OR
(
timî_≥rùhîÆ
Ë|
›ti⁄
;

49 
	}
}

	@libopencm3/lib/stm32/common/usart_common_all.c

34 
	~<lib›ícm3/°m32/ußπ.h
>

35 
	~<lib›ícm3/°m32/rcc.h
>

50 
	$ußπ_£t_baudøã
(
uöt32_t
 
ußπ
, uöt32_à
baud
)

52 
uöt32_t
 
˛ock
 = 
rcc_≠b1_‰equícy
;

54 #i‡
deföed
 
USART1


55 i‡((
ußπ
 =
USART1
)

56 #i‡
deföed
 
USART6


57 || (
ußπ
 =
USART6
)

60 
˛ock
 = 
rcc_≠b2_‰equícy
;

73 
	`USART_BRR
(
ußπ
Ë((2 * 
˛ock
Ë+ 
baud
) / (2 * baud);

74 
	}
}

88 
	$ußπ_£t_d©abôs
(
uöt32_t
 
ußπ
, uöt32_à
bôs
)

90 i‡(
bôs
 == 8) {

91 
	`USART_CR1
(
ußπ
Ë&~
USART_CR1_M
;

93 
	`USART_CR1
(
ußπ
Ë|
USART_CR1_M
;

95 
	}
}

107 
	$ußπ_£t_°›bôs
(
uöt32_t
 
ußπ
, uöt32_à
°›bôs
)

109 
uöt32_t
 
ªg32
;

111 
ªg32
 = 
	`USART_CR2
(
ußπ
);

112 
ªg32
 = (ªg32 & ~
USART_CR2_STOPBITS_MASK
Ë| 
°›bôs
;

113 
	`USART_CR2
(
ußπ
Ë
ªg32
;

114 
	}
}

126 
	$ußπ_£t_∑rôy
(
uöt32_t
 
ußπ
, uöt32_à
∑rôy
)

128 
uöt32_t
 
ªg32
;

130 
ªg32
 = 
	`USART_CR1
(
ußπ
);

131 
ªg32
 = (ªg32 & ~
USART_PARITY_MASK
Ë| 
∑rôy
;

132 
	`USART_CR1
(
ußπ
Ë
ªg32
;

133 
	}
}

145 
	$ußπ_£t_mode
(
uöt32_t
 
ußπ
, uöt32_à
mode
)

147 
uöt32_t
 
ªg32
;

149 
ªg32
 = 
	`USART_CR1
(
ußπ
);

150 
ªg32
 = (ªg32 & ~
USART_MODE_MASK
Ë| 
mode
;

151 
	`USART_CR1
(
ußπ
Ë
ªg32
;

152 
	}
}

164 
	$ußπ_£t_Êow_c⁄åﬁ
(
uöt32_t
 
ußπ
, uöt32_à
Êowc⁄åﬁ
)

166 
uöt32_t
 
ªg32
;

168 
ªg32
 = 
	`USART_CR3
(
ußπ
);

169 
ªg32
 = (ªg32 & ~
USART_FLOWCONTROL_MASK
Ë| 
Êowc⁄åﬁ
;

170 
	`USART_CR3
(
ußπ
Ë
ªg32
;

171 
	}
}

180 
	$ußπ_íabÀ
(
uöt32_t
 
ußπ
)

182 
	`USART_CR1
(
ußπ
Ë|
USART_CR1_UE
;

183 
	}
}

194 
	$ußπ_dißbÀ
(
uöt32_t
 
ußπ
)

196 
	`USART_CR1
(
ußπ
Ë&~
USART_CR1_UE
;

197 
	}
}

210 
	$ußπ_£nd_blockög
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
)

212 
	`ußπ_waô_£nd_ªady
(
ußπ
);

213 
	`ußπ_£nd
(
ußπ
, 
d©a
);

214 
	}
}

226 
uöt16_t
 
	$ußπ_ªcv_blockög
(
uöt32_t
 
ußπ
)

228 
	`ußπ_waô_ªcv_ªady
(
ußπ
);

230  
	`ußπ_ªcv
(
ußπ
);

231 
	}
}

246 
	$ußπ_íabÀ_rx_dma
(
uöt32_t
 
ußπ
)

248 
	`USART_CR3
(
ußπ
Ë|
USART_CR3_DMAR
;

249 
	}
}

258 
	$ußπ_dißbÀ_rx_dma
(
uöt32_t
 
ußπ
)

260 
	`USART_CR3
(
ußπ
Ë&~
USART_CR3_DMAR
;

261 
	}
}

276 
	$ußπ_íabÀ_tx_dma
(
uöt32_t
 
ußπ
)

278 
	`USART_CR3
(
ußπ
Ë|
USART_CR3_DMAT
;

279 
	}
}

288 
	$ußπ_dißbÀ_tx_dma
(
uöt32_t
 
ußπ
)

290 
	`USART_CR3
(
ußπ
Ë&~
USART_CR3_DMAT
;

291 
	}
}

300 
	$ußπ_íabÀ_rx_öãºu±
(
uöt32_t
 
ußπ
)

302 
	`USART_CR1
(
ußπ
Ë|
USART_CR1_RXNEIE
;

303 
	}
}

313 
	$ußπ_dißbÀ_rx_öãºu±
(
uöt32_t
 
ußπ
)

315 
	`USART_CR1
(
ußπ
Ë&~
USART_CR1_RXNEIE
;

316 
	}
}

325 
	$ußπ_íabÀ_tx_öãºu±
(
uöt32_t
 
ußπ
)

327 
	`USART_CR1
(
ußπ
Ë|
USART_CR1_TXEIE
;

328 
	}
}

337 
	$ußπ_dißbÀ_tx_öãºu±
(
uöt32_t
 
ußπ
)

339 
	`USART_CR1
(
ußπ
Ë&~
USART_CR1_TXEIE
;

340 
	}
}

349 
	$ußπ_íabÀ_îr‹_öãºu±
(
uöt32_t
 
ußπ
)

351 
	`USART_CR3
(
ußπ
Ë|
USART_CR3_EIE
;

352 
	}
}

361 
	$ußπ_dißbÀ_îr‹_öãºu±
(
uöt32_t
 
ußπ
)

363 
	`USART_CR3
(
ußπ
Ë&~
USART_CR3_EIE
;

364 
	}
}

	@libopencm3/lib/stm32/common/usart_common_f124.c

34 
	~<lib›ícm3/°m32/ußπ.h
>

35 
	~<lib›ícm3/°m32/rcc.h
>

45 
	$ußπ_£nd
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
)

48 
	`USART_DR
(
ußπ
Ë(
d©a
 & 
USART_DR_MASK
);

49 
	}
}

62 
uöt16_t
 
	$ußπ_ªcv
(
uöt32_t
 
ußπ
)

65  
	`USART_DR
(
ußπ
Ë& 
USART_DR_MASK
;

66 
	}
}

78 
	$ußπ_waô_£nd_ªady
(
uöt32_t
 
ußπ
)

81 (
	`USART_SR
(
ußπ
Ë& 
USART_SR_TXE
) == 0);

82 
	}
}

93 
	$ußπ_waô_ªcv_ªady
(
uöt32_t
 
ußπ
)

96 (
	`USART_SR
(
ußπ
Ë& 
USART_SR_RXNE
) == 0);

97 
	}
}

108 
boﬁ
 
	$ußπ_gë_Êag
(
uöt32_t
 
ußπ
, uöt32_à
Êag
)

110  ((
	`USART_SR
(
ußπ
Ë& 
Êag
) != 0);

111 
	}
}

	@libopencm3/lib/stm32/common/usart_common_v2.c

29 
	~<lib›ícm3/°m32/ußπ.h
>

41 
	$ußπ_íabÀ_d©a_övîsi⁄
(
uöt32_t
 
ußπ
)

43 
	`USART_CR2
(
ußπ
Ë|
USART_CR2_DATAINV
;

44 
	}
}

56 
	$ußπ_dißbÀ_d©a_övîsi⁄
(
uöt32_t
 
ußπ
)

58 
	`USART_CR2
(
ußπ
Ë&~
USART_CR2_DATAINV
;

59 
	}
}

70 
	$ußπ_íabÀ_tx_övîsi⁄
(
uöt32_t
 
ußπ
)

72 
	`USART_CR2
(
ußπ
Ë|
USART_CR2_TXINV
;

73 
	}
}

84 
	$ußπ_dißbÀ_tx_övîsi⁄
(
uöt32_t
 
ußπ
)

86 
	`USART_CR2
(
ußπ
Ë&~
USART_CR2_TXINV
;

87 
	}
}

98 
	$ußπ_íabÀ_rx_övîsi⁄
(
uöt32_t
 
ußπ
)

100 
	`USART_CR2
(
ußπ
Ë|
USART_CR2_RXINV
;

101 
	}
}

112 
	$ußπ_dißbÀ_rx_övîsi⁄
(
uöt32_t
 
ußπ
)

115 
	`USART_CR2
(
ußπ
Ë&~
USART_CR2_RXINV
;

116 
	}
}

135 
	$ußπ_íabÀ_hÆfdu∂ex
(
uöt32_t
 
ußπ
)

137 
	`USART_CR3
(
ußπ
Ë|
USART_CR3_HDSEL
;

138 
	}
}

147 
	$ußπ_dißbÀ_hÆfdu∂ex
(
uöt32_t
 
ußπ
)

149 
	`USART_CR3
(
ußπ
Ë&~
USART_CR3_HDSEL
;

150 
	}
}

166 
	$ußπ_£t_rx_timeout_vÆue
(
uöt32_t
 
ußπ
, uöt32_à
vÆue
)

168 
uöt32_t
 
ªg
;

169 
ªg
 = 
	`USART_RTOR
(
ußπ
Ë& ~
USART_RTOR_RTO_MASK
;

170 
ªg
 |(
	`USART_RTOR_RTO_VAL
(
vÆue
Ë& 
USART_RTOR_RTO_MASK
);

171 
	`USART_RTOR
(
ußπ
Ë
ªg
;

172 
	}
}

182 
	$ußπ_íabÀ_rx_timeout
(
uöt32_t
 
ußπ
)

184 
	`USART_CR2
(
ußπ
Ë|
USART_CR2_RTOEN
;

185 
	}
}

195 
	$ußπ_dißbÀ_rx_timeout
(
uöt32_t
 
ußπ
)

197 
	`USART_CR2
(
ußπ
Ë&~
USART_CR2_RTOEN
;

198 
	}
}

211 
	$ußπ_íabÀ_rx_timeout_öãºu±
(
uöt32_t
 
ußπ
)

213 
	`USART_CR1
(
ußπ
Ë|
USART_CR1_RTOIE
;

214 
	}
}

224 
	$ußπ_dißbÀ_rx_timeout_öãºu±
(
uöt32_t
 
ußπ
)

226 
	`USART_CR1
(
ußπ
Ë&~
USART_CR1_RTOIE
;

227 
	}
}

237 
	$ußπ_£nd
(
uöt32_t
 
ußπ
, 
uöt16_t
 
d©a
)

240 
	`USART_TDR
(
ußπ
Ë(
d©a
 & 
USART_TDR_MASK
);

241 
	}
}

254 
uöt16_t
 
	$ußπ_ªcv
(
uöt32_t
 
ußπ
)

257  
	`USART_RDR
(
ußπ
Ë& 
USART_RDR_MASK
;

258 
	}
}

270 
	$ußπ_waô_£nd_ªady
(
uöt32_t
 
ußπ
)

273 (
	`USART_ISR
(
ußπ
Ë& 
USART_ISR_TXE
) == 0);

274 
	}
}

285 
	$ußπ_waô_ªcv_ªady
(
uöt32_t
 
ußπ
)

288 (
	`USART_ISR
(
ußπ
Ë& 
USART_ISR_RXNE
) == 0);

289 
	}
}

300 
boﬁ
 
	$ußπ_gë_Êag
(
uöt32_t
 
ußπ
, uöt32_à
Êag
)

302  ((
	`USART_ISR
(
ußπ
Ë& 
Êag
) != 0);

303 
	}
}

	@libopencm3/lib/stm32/desig.c

20 
	~<lib›ícm3/°m32/desig.h
>

22 
uöt16_t
 
	$desig_gë_Êash_size
()

24  
DESIG_FLASH_SIZE
;

25 
	}
}

27 
	$desig_gë_unique_id
(
uöt32_t
 *
ªsu…
)

29 *
ªsu…
++ = 
DESIG_UNIQUE_ID2
;

30 *
ªsu…
++ = 
DESIG_UNIQUE_ID1
;

31 *
ªsu…
 = 
DESIG_UNIQUE_ID0
;

32 
	}
}

34 
	$desig_gë_unique_id_as_°rög
(*
°rög
,

35 
°rög_Àn
)

37 
i
, 
Àn
;

38 
uöt32_t
 
dev_id_buf
[3];

39 
uöt8_t
 *
devi˚_id
 = (uöt8_à*)
dev_id_buf
;

40 c⁄° 
ch¨s
[] = "0123456789ABCDEF";

42 
	`desig_gë_unique_id
(
dev_id_buf
);

45 
Àn
 = (2 * (
dev_id_buf
Ë< 
°rög_Àn
) ?

46 2 * (
dev_id_buf
Ë: 
°rög_Àn
 - 1;

48 
i
 = 0; i < 
Àn
; i += 2) {

49 
°rög
[
i
] = 
ch¨s
[(
devi˚_id
[i / 2] >> 4) & 0x0F];

50 
°rög
[
i
 + 1] = 
ch¨s
[(
devi˚_id
[i / 2] >> 0) & 0x0F];

53 
°rög
[
Àn
] = '\0';

54 
	}
}

68 
	$desig_gë_unique_id_as_dfu
(*
°rög
) {

69 
uöt8_t
 *
id
 = (uöt8_à*)
DESIG_UNIQUE_ID_BASE
;

71 
uöt8_t
 
£rül
[6];

72 
£rül
[0] = 
id
[11];

73 
£rül
[1] = 
id
[10] + id[2];

74 
£rül
[2] = 
id
[9];

75 
£rül
[3] = 
id
[8] + id[0];

76 
£rül
[4] = 
id
[7];

77 
£rül
[5] = 
id
[6];

79 
uöt8_t
 *
£r
 = &
£rül
[0];

80 
uöt8_t
 *
íd
 = &
£rül
[6];

81 c⁄° 
hex_digô
[] = "0123456789ABCDEF";

83 ; 
£r
 < 
íd
; ser++) {

84 *
°rög
++ = 
hex_digô
[(*
£r
 >> 4) & 0x0f];

85 *
°rög
++ = 
hex_digô
[(*
£r
 >> 0) & 0x0f];

87 *
°rög
 = '\0';

88 
	}
}

	@libopencm3/lib/stm32/f0/adc.c

29 
	~<lib›ícm3/cm3/as£π.h
>

30 
	~<lib›ícm3/°m32/adc.h
>

50 
	$adc_íabÀ_disc⁄töuous_mode
(
uöt32_t
 
adc
)

52 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_DISCEN
;

53 
	}
}

61 
	$adc_dißbÀ_disc⁄töuous_mode
(
uöt32_t
 
adc
)

63 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_DISCEN
;

64 
	}
}

123 
	$adc_£t_›î©i⁄_mode
(
uöt32_t
 
adc
, 
adc_›mode
 
›mode
)

125 
›mode
) {

126 
ADC_MODE_SEQUENTIAL
:

127 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_CONT
;

128 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_DISCEN
;

131 
ADC_MODE_SCAN
:

132 
	`ADC_CFGR1
(
adc
Ë&~(
ADC_CFGR1_CONT
 | 
ADC_CFGR1_DISCEN
);

135 
ADC_MODE_SCAN_INFINITE
:

136 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_DISCEN
;

137 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_CONT
;

140 
	}
}

168 
	$adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

169 
uöt32_t
 
pﬁ¨ôy
)

171 
	`ADC_CFGR1
(
adc
Ë(ADC_CFGR1◊dcË& ~
ADC_CFGR1_EXTSEL
Ë| 
åiggî
;

172 
	`ADC_CFGR1
(
adc
Ë(ADC_CFGR1◊dcË& ~
ADC_CFGR1_EXTEN_MASK
Ë| 
pﬁ¨ôy
;

173 
	}
}

181 
	$adc_dißbÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
)

183 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_EXTEN_MASK
;

184 
	}
}

205 
	$adc_íabÀ_w©chdog_öãºu±
(
uöt32_t
 
adc
)

207 
	`ADC_IER
(
adc
Ë|
ADC_IER_AWD1IE
;

208 
	}
}

216 
	$adc_dißbÀ_w©chdog_öãºu±
(
uöt32_t
 
adc
)

218 
	`ADC_IER
(
adc
Ë&~
ADC_IER_AWD1IE
;

219 
	}
}

231 
boﬁ
 
	$adc_gë_w©chdog_Êag
(
uöt32_t
 
adc
)

233  
	`ADC_ISR
(
adc
Ë& 
ADC_ISR_AWD1
;

234 
	}
}

242 
	$adc_˛ór_w©chdog_Êag
(
uöt32_t
 
adc
)

244 
	`ADC_ISR
(
adc
Ë
ADC_ISR_AWD1
;

245 
	}
}

253 
	$adc_íabÀ_eoc_£quí˚_öãºu±
(
uöt32_t
 
adc
)

255 
	`ADC_IER
(
adc
Ë|
ADC_IER_EOSEQIE
;

256 
	}
}

264 
	$adc_dißbÀ_eoc_£quí˚_öãºu±
(
uöt32_t
 
adc
)

266 
	`ADC_IER
(
adc
Ë&~
ADC_IER_EOSEQIE
;

267 
	}
}

275 
boﬁ
 
	$adc_gë_eoc_£quí˚_Êag
(
uöt32_t
 
adc
)

277  
	`ADC_ISR
(
adc
Ë& 
ADC_ISR_EOSEQ
;

278 
	}
}

302 
	$adc_£t_˛k_sour˚
(
uöt32_t
 
adc
, uöt32_à
sour˚
)

304 
	`ADC_CFGR2
(
adc
Ë((ADC_CFGR2◊dcË& ~
ADC_CFGR2_CKMODE
Ë| 
sour˚
);

305 
	}
}

324 
	$adc_£t_ªguœr_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[])

326 
uöt32_t
 
ªg32
 = 0;

327 
uöt8_t
 
i
 = 0;

328 
boﬁ
 
°ïup
 = 
Ál£
, 
°ïdn
 = false;

330 i‡(
Àngth
 == 0) {

331 
	`ADC_CHSELR
(
adc
) = 0;

335 
ªg32
 |(1 << 
ch™√l
[0]);

337 
i
 = 1; i < 
Àngth
; i++) {

338 
ªg32
 |(1 << 
ch™√l
[
i
]);

339 
°ïup
 |
ch™√l
[
i
-1] < channel[i];

340 
°ïdn
 |
ch™√l
[
i
-1] > channel[i];

344 i‡(
°ïup
 && 
°ïdn
) {

345 
	`cm3_as£π_nŸ_ªached
();

349 i‡(
°ïdn
) {

350 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_SCANDIR
;

352 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_SCANDIR
;

355 
	`ADC_CHSELR
(
adc
Ë
ªg32
;

356 
	}
}

368 
	$adc_£t_ßm∂e_time_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
, 
uöt8_t
 
time
)

370 
	`ADC_SMPR
(
adc
Ë
time
 & 
ADC_SMPR_SMP
;

371 
	}
}

379 
	$adc_íabÀ_vb©_£ns‹
()

381 
	`ADC_CCR
(
ADC1
Ë|
ADC_CCR_VBATEN
;

382 
	}
}

391 
	$adc_dißbÀ_vb©_£ns‹
()

393 
	`ADC_CCR
(
ADC1
Ë&~
ADC_CCR_VBATEN
;

394 
	}
}

403 
	$adc_ˇlibøã_°¨t
(
uöt32_t
 
adc
)

405 
	`ADC_CR
(
adc
Ë
ADC_CR_ADCAL
;

406 
	}
}

415 
	$adc_ˇlibøã_waô_föish
(
uöt32_t
 
adc
)

417 
	`ADC_CR
(
adc
Ë& 
ADC_CR_ADCAL
);

418 
	}
}

474 
	$adc_íabÀ_™Æog_w©chdog_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
)

476 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_AWD1EN
;

477 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_AWD1SGL
;

478 
	}
}

487 
	$adc_íabÀ_™Æog_w©chdog_⁄_£À˘ed_ch™√l
(
uöt32_t
 
adc
, 
uöt8_t
 
ch™
)

489 
	`ADC_CFGR1
(
adc
Ë(ADC_CFGR1◊dcË& ~
ADC_CFGR1_AWD1CH
) |

490 
	`ADC_CFGR1_AWD1CH_VAL
(
ch™
);

492 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_AWD1EN
 | 
ADC_CFGR1_AWD1SGL
;

493 
	}
}

500 
	$adc_dißbÀ_™Æog_w©chdog
(
uöt32_t
 
adc
)

502 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_AWD1EN
;

503 
	}
}

512 
	$adc_£t_w©chdog_high_thªshﬁd
(
uöt32_t
 
adc
, 
uöt8_t
 
thªshﬁd
)

514 
	`ADC_TR1
(
adc
Ë(ADC_TR1◊dcË& ~
ADC_TR1_HT
Ë| 
	`ADC_TR1_HT_VAL
(
thªshﬁd
);

515 
	}
}

524 
	$adc_£t_w©chdog_low_thªshﬁd
(
uöt32_t
 
adc
, 
uöt8_t
 
thªshﬁd
)

526 
	`ADC_TR1
(
adc
Ë(ADC_TR1◊dcË& ~
ADC_TR1_LT
Ë| 
	`ADC_TR1_LT_VAL
(
thªshﬁd
);

527 
	}
}

	@libopencm3/lib/stm32/f0/comparator.c

32 
	~<lib›ícm3/°m32/com∑øt‹.h
>

34 
	$comp_íabÀ
(
uöt8_t
 
id
)

36 
	`COMP_CSR
(
id
Ë|
COMP_CSR_EN
;

37 
	}
}

39 
	$comp_dißbÀ
(
uöt8_t
 
id
)

41 
	`COMP_CSR
(
id
Ë&~
COMP_CSR_EN
;

42 
	}
}

44 
	$comp_£À˘_öput
(
uöt8_t
 
id
, 
uöt32_t
 
öput
)

46 
	`COMP_CSR
(
id
Ë(COMP_CSR(idË& ~
COMP_CSR_INSEL
Ë| 
öput
;

47 
	}
}

49 
	$comp_£À˘_ouçut
(
uöt8_t
 
id
, 
uöt32_t
 
ouçut
)

51 
	`COMP_CSR
(
id
Ë(COMP_CSR(idË& ~
COMP_CSR_OUTSEL
Ë| 
ouçut
;

52 
	}
}

54 
	$comp_£À˘_hy°
(
uöt8_t
 
id
, 
uöt32_t
 
hy°
)

56 
	`COMP_CSR
(
id
Ë(COMP_CSR(idË& ~
COMP_CSR_HYST
Ë| 
hy°
;

57 
	}
}

59 
	$comp_£À˘_•ìd
(
uöt8_t
 
id
, 
uöt32_t
 
•ìd
)

61 
	`COMP_CSR
(
id
Ë(COMP_CSR(idË& ~
COMP_CSR_SPEED
Ë| 
•ìd
;

62 
	}
}

	@libopencm3/lib/stm32/f0/dac.c

31 
	~<lib›ícm3/°m32/dac.h
>

	@libopencm3/lib/stm32/f0/dma.c

31 
	~<lib›ícm3/°m32/dma.h
>

	@libopencm3/lib/stm32/f0/flash.c

51 
	~<lib›ícm3/°m32/Êash.h
>

59 
	$Êash_˛ór_°©us_Êags
()

61 
	`Êash_˛ór_pgîr_Êag
();

62 
	`Êash_˛ór_e›_Êag
();

63 
	`Êash_˛ór_wΩπîr_Êag
();

64 
	`Êash_˛ór_bsy_Êag
();

65 
	}
}

77 
uöt32_t
 
	$Êash_gë_°©us_Êags
()

79  
FLASH_SR
 & (
FLASH_SR_PGERR
 |

80 
FLASH_SR_EOP
 |

81 
FLASH_SR_WRPRTERR
 |

82 
FLASH_SR_BSY
);

83 
	}
}

98 
	$Êash_¥ogøm_hÆf_w‹d
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
)

100 
	`Êash_waô_f‹_œ°_›î©i⁄
();

102 
FLASH_CR
 |
FLASH_CR_PG
;

104 
	`MMIO16
(
addªss
Ë
d©a
;

106 
	`Êash_waô_f‹_œ°_›î©i⁄
();

108 
FLASH_CR
 &~
FLASH_CR_PG
;

109 
	}
}

124 
	$Êash_îa£_∑ge
(
uöt32_t
 
∑ge_addªss
)

126 
	`Êash_waô_f‹_œ°_›î©i⁄
();

128 
FLASH_CR
 |
FLASH_CR_PER
;

129 
FLASH_AR
 = 
∑ge_addªss
;

130 
FLASH_CR
 |
FLASH_CR_STRT
;

132 
	`Êash_waô_f‹_œ°_›î©i⁄
();

134 
FLASH_CR
 &~
FLASH_CR_PER
;

135 
	}
}

144 
	$Êash_îa£_Æl_∑ges
()

146 
	`Êash_waô_f‹_œ°_›î©i⁄
();

148 
FLASH_CR
 |
FLASH_CR_MER
;

149 
FLASH_CR
 |
FLASH_CR_STRT
;

151 
	`Êash_waô_f‹_œ°_›î©i⁄
();

152 
FLASH_CR
 &~
FLASH_CR_MER
;

154 
	}
}

	@libopencm3/lib/stm32/f0/gpio.c

31 
	~<lib›ícm3/°m32/gpio.h
>

	@libopencm3/lib/stm32/f0/i2c.c

31 
	~<lib›ícm3/°m32/i2c.h
>

	@libopencm3/lib/stm32/f0/pwr.c

35 
	~<lib›ícm3/°m32/pwr.h
>

	@libopencm3/lib/stm32/f0/rcc.c

39 
	~<lib›ícm3/cm3/as£π.h
>

40 
	~<lib›ícm3/°m32/rcc.h
>

41 
	~<lib›ícm3/°m32/Êash.h
>

42 
	~<lib›ícm3/°m32/i2c.h
>

45 
uöt32_t
 
	grcc_ahb_‰equícy
 = 8000000;

46 
uöt32_t
 
	grcc_≠b1_‰equícy
 = 8000000;

57 
	$rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
)

59 
osc
) {

60 
RCC_HSI48
:

61 
RCC_CIR
 |
RCC_CIR_HSI48RDYC
;

63 
RCC_HSI14
:

64 
RCC_CIR
 |
RCC_CIR_HSI14RDYC
;

66 
RCC_HSI
:

67 
RCC_CIR
 |
RCC_CIR_HSIRDYC
;

69 
RCC_HSE
:

70 
RCC_CIR
 |
RCC_CIR_HSERDYC
;

72 
RCC_PLL
:

73 
RCC_CIR
 |
RCC_CIR_PLLRDYC
;

75 
RCC_LSE
:

76 
RCC_CIR
 |
RCC_CIR_LSERDYC
;

78 
RCC_LSI
:

79 
RCC_CIR
 |
RCC_CIR_LSIRDYC
;

82 
	}
}

90 
	$rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
)

92 
osc
) {

93 
RCC_HSI48
:

94 
RCC_CIR
 |
RCC_CIR_HSI48RDYIE
;

96 
RCC_HSI14
:

97 
RCC_CIR
 |
RCC_CIR_HSI14RDYIE
;

99 
RCC_HSI
:

100 
RCC_CIR
 |
RCC_CIR_HSIRDYIE
;

102 
RCC_HSE
:

103 
RCC_CIR
 |
RCC_CIR_HSERDYIE
;

105 
RCC_PLL
:

106 
RCC_CIR
 |
RCC_CIR_PLLRDYIE
;

108 
RCC_LSE
:

109 
RCC_CIR
 |
RCC_CIR_LSERDYIE
;

111 
RCC_LSI
:

112 
RCC_CIR
 |
RCC_CIR_LSIRDYIE
;

115 
	}
}

123 
	$rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
)

125 
osc
) {

126 
RCC_HSI48
:

127 
RCC_CIR
 &~
RCC_CIR_HSI48RDYC
;

129 
RCC_HSI14
:

130 
RCC_CIR
 &~
RCC_CIR_HSI14RDYC
;

132 
RCC_HSI
:

133 
RCC_CIR
 &~
RCC_CIR_HSIRDYC
;

135 
RCC_HSE
:

136 
RCC_CIR
 &~
RCC_CIR_HSERDYC
;

138 
RCC_PLL
:

139 
RCC_CIR
 &~
RCC_CIR_PLLRDYC
;

141 
RCC_LSE
:

142 
RCC_CIR
 &~
RCC_CIR_LSERDYC
;

144 
RCC_LSI
:

145 
RCC_CIR
 &~
RCC_CIR_LSIRDYC
;

148 
	}
}

157 
	$rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
)

159 
osc
) {

160 
RCC_HSI48
:

161  (
RCC_CIR
 & 
RCC_CIR_HSI48RDYF
) != 0;

163 
RCC_HSI14
:

164  (
RCC_CIR
 & 
RCC_CIR_HSI14RDYF
) != 0;

166 
RCC_HSI
:

167  (
RCC_CIR
 & 
RCC_CIR_HSIRDYF
) != 0;

169 
RCC_HSE
:

170  (
RCC_CIR
 & 
RCC_CIR_HSERDYF
) != 0;

172 
RCC_PLL
:

173  (
RCC_CIR
 & 
RCC_CIR_PLLRDYF
) != 0;

175 
RCC_LSE
:

176  (
RCC_CIR
 & 
RCC_CIR_LSERDYF
) != 0;

178 
RCC_LSI
:

179  (
RCC_CIR
 & 
RCC_CIR_LSIRDYF
) != 0;

183 
	`cm3_as£π_nŸ_ªached
();

184 
	}
}

190 
	$rcc_css_öt_˛ór
()

192 
RCC_CIR
 |
RCC_CIR_CSSC
;

193 
	}
}

201 
	$rcc_css_öt_Êag
()

203  ((
RCC_CIR
 & 
RCC_CIR_CSSF
) != 0);

204 
	}
}

206 
boﬁ
 
	$rcc_is_osc_ªady
(
rcc_osc
 
osc
)

208 
osc
) {

209 
RCC_HSI48
:

210  
RCC_CR2
 & 
RCC_CR2_HSI48RDY
;

211 
RCC_HSI14
:

212  
RCC_CR2
 & 
RCC_CR2_HSI14RDY
;

213 
RCC_HSI
:

214  
RCC_CR
 & 
RCC_CR_HSIRDY
;

215 
RCC_HSE
:

216  
RCC_CR
 & 
RCC_CR_HSERDY
;

217 
RCC_PLL
:

218  
RCC_CR
 & 
RCC_CR_PLLRDY
;

219 
RCC_LSE
:

220  
RCC_BDCR
 & 
RCC_BDCR_LSERDY
;

221 
RCC_LSI
:

222  
RCC_CSR
 & 
RCC_CSR_LSIRDY
;

224  
Ál£
;

225 
	}
}

227 
	$rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
)

229 !
	`rcc_is_osc_ªady
(
osc
));

230 
	}
}

244 
	$rcc_osc_⁄
(
rcc_osc
 
osc
)

246 
osc
) {

247 
RCC_HSI48
:

248 
RCC_CR2
 |
RCC_CR2_HSI48ON
;

250 
RCC_HSI14
:

251 
RCC_CR2
 |
RCC_CR2_HSI14ON
;

253 
RCC_HSI
:

254 
RCC_CR
 |
RCC_CR_HSION
;

256 
RCC_HSE
:

257 
RCC_CR
 |
RCC_CR_HSEON
;

259 
RCC_LSE
:

260 
RCC_BDCR
 |
RCC_BDCR_LSEON
;

262 
RCC_LSI
:

263 
RCC_CSR
 |
RCC_CSR_LSION
;

265 
RCC_PLL
:

266 
RCC_CR
 |
RCC_CR_PLLON
;

269 
	}
}

282 
	$rcc_osc_off
(
rcc_osc
 
osc
)

284 
osc
) {

285 
RCC_HSI48
:

286 
RCC_CR2
 &~
RCC_CR2_HSI48ON
;

288 
RCC_HSI14
:

289 
RCC_CR2
 &~
RCC_CR2_HSI14ON
;

291 
RCC_HSI
:

292 
RCC_CR
 &~
RCC_CR_HSION
;

294 
RCC_HSE
:

295 
RCC_CR
 &~
RCC_CR_HSEON
;

297 
RCC_LSE
:

298 
RCC_BDCR
 &~
RCC_BDCR_LSEON
;

300 
RCC_LSI
:

301 
RCC_CSR
 &~
RCC_CSR_LSION
;

303 
RCC_PLL
:

307 
	}
}

313 
	$rcc_css_íabÀ
()

315 
RCC_CR
 |
RCC_CR_CSSON
;

316 
	}
}

322 
	$rcc_css_dißbÀ
()

324 
RCC_CR
 &~
RCC_CR_CSSON
;

325 
	}
}

334 
	$rcc_£t_sys˛k_sour˚
(
rcc_osc
 
˛k
)

336 
˛k
) {

337 
RCC_HSI
:

338 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_SW
Ë| 
RCC_CFGR_SW_HSI
;

340 
RCC_HSE
:

341 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_SW
Ë| 
RCC_CFGR_SW_HSE
;

343 
RCC_PLL
:

344 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_SW
Ë| 
RCC_CFGR_SW_PLL
;

346 
RCC_HSI48
:

347 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_SW
Ë| 
RCC_CFGR_SW_HSI48
;

349 
RCC_LSI
:

350 
RCC_LSE
:

351 
RCC_HSI14
:

355 
	}
}

363 
	$rcc_£t_usb˛k_sour˚
(
rcc_osc
 
˛k
)

365 
˛k
) {

366 
RCC_PLL
:

367 
RCC_CFGR3
 |
RCC_CFGR3_USBSW
;

369 
RCC_HSI48
:

370 
RCC_CFGR3
 &~
RCC_CFGR3_USBSW
;

372 
RCC_HSI
:

373 
RCC_HSE
:

374 
RCC_LSI
:

375 
RCC_LSE
:

376 
RCC_HSI14
:

380 
	}
}

387 
	$rcc_íabÀ_πc_˛ock
()

389 
RCC_BDCR
 |
RCC_BDCR_RTCEN
;

390 
	}
}

397 
	$rcc_dißbÀ_πc_˛ock
()

399 
RCC_BDCR
 &~
RCC_BDCR_RTCEN
;

400 
	}
}

408 
	$rcc_£t_πc_˛ock_sour˚
(
rcc_osc
 
˛k
)

410 
˛k
) {

411 
RCC_HSE
:

412 
RCC_BDCR
 = (RCC_BDCR & ~
RCC_BDCR_RTCSEL
Ë| 
RCC_BDCR_RTCSEL_HSE
;

414 
RCC_LSE
:

415 
RCC_BDCR
 = (RCC_BDCR & ~
RCC_BDCR_RTCSEL
Ë| 
RCC_BDCR_RTCSEL_LSE
;

417 
RCC_LSI
:

418 
RCC_BDCR
 = (RCC_BDCR & ~
RCC_BDCR_RTCSEL
Ë| 
RCC_BDCR_RTCSEL_LSI
;

424 
	}
}

434 
	$rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
)

436 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PLLMUL
Ë| 
mul
;

437 
	}
}

447 
	$rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
)

449 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PLLSRC
) |

450 (
∂l§c
 << 16);

451 
	}
}

461 
	$rcc_£t_∂lxçª
(
uöt32_t
 
∂lxçª
)

463 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PLLXTPRE
) |

464 (
∂lxçª
 << 17);

465 
	}
}

473 
	$rcc_£t_µª
(
uöt32_t
 
µª
)

475 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PPRE
Ë| 
µª
;

476 
	}
}

484 
	$rcc_£t_h¥e
(
uöt32_t
 
h¥e
)

486 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_HPRE
Ë| 
h¥e
;

487 
	}
}

495 
	$rcc_£t_¥ediv
(
uöt32_t
 
¥ediv
)

497 
RCC_CFGR2
 = (RCC_CFGR2 & ~
RCC_CFGR2_PREDIV
Ë| 
¥ediv
;

498 
	}
}

507 
rcc_osc
 
	$rcc_sy°em_˛ock_sour˚
()

510 
RCC_CFGR
 & 
RCC_CFGR_SWS
) {

511 
RCC_CFGR_SWS_HSI
:

512  
RCC_HSI
;

513 
RCC_CFGR_SWS_HSE
:

514  
RCC_HSE
;

515 
RCC_CFGR_SWS_PLL
:

516  
RCC_PLL
;

517 
RCC_CFGR_SWS_HSI48
:

518  
RCC_HSI48
;

521 
	`cm3_as£π_nŸ_ªached
();

522 
	}
}

524 
	$rcc_£t_i2c_˛ock_hsi
(
uöt32_t
 
i2c
)

526 i‡(
i2c
 =
I2C1
) {

527 
RCC_CFGR3
 &~
RCC_CFGR3_I2C1SW
;

529 
	}
}

531 
	$rcc_£t_i2c_˛ock_sys˛k
(
uöt32_t
 
i2c
)

533 i‡(
i2c
 =
I2C1
) {

534 
RCC_CFGR3
 |
RCC_CFGR3_I2C1SW
;

536 
	}
}

538 
uöt32_t
 
	$rcc_gë_i2c_˛ocks
()

540  
RCC_CFGR3
 & 
RCC_CFGR3_I2C1SW
;

541 
	}
}

549 
rcc_osc
 
	$rcc_usb_˛ock_sour˚
()

551  (
RCC_CFGR3
 & 
RCC_CFGR3_USBSW
Ë? 
RCC_PLL
 : 
RCC_HSI48
;

552 
	}
}

557 
	$rcc_˛ock_£tup_ö_h£_8mhz_out_48mhz
()

559 
	`rcc_osc_⁄
(
RCC_HSE
);

560 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

561 
	`rcc_£t_sys˛k_sour˚
(
RCC_HSE
);

563 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_NODIV
);

564 
	`rcc_£t_µª
(
RCC_CFGR_PPRE_NODIV
);

566 
	`Êash_¥e„tch_íabÀ
();

567 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_024_048MHZ
);

570 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_MUL6
);

571 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSE_CLK
);

572 
	`rcc_£t_∂lxçª
(
RCC_CFGR_PLLXTPRE_HSE_CLK
);

574 
	`rcc_osc_⁄
(
RCC_PLL
);

575 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

576 
	`rcc_£t_sys˛k_sour˚
(
RCC_PLL
);

578 
rcc_≠b1_‰equícy
 = 48000000;

579 
rcc_ahb_‰equícy
 = 48000000;

580 
	}
}

585 
	$rcc_˛ock_£tup_ö_hsi_out_48mhz
()

587 
	`rcc_osc_⁄
(
RCC_HSI
);

588 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

589 
	`rcc_£t_sys˛k_sour˚
(
RCC_HSI
);

591 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_NODIV
);

592 
	`rcc_£t_µª
(
RCC_CFGR_PPRE_NODIV
);

594 
	`Êash_¥e„tch_íabÀ
();

595 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_024_048MHZ
);

598 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_MUL12
);

599 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSI_CLK_DIV2
);

601 
	`rcc_osc_⁄
(
RCC_PLL
);

602 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

603 
	`rcc_£t_sys˛k_sour˚
(
RCC_PLL
);

605 
rcc_≠b1_‰equícy
 = 48000000;

606 
rcc_ahb_‰equícy
 = 48000000;

607 
	}
}

612 
	$rcc_˛ock_£tup_ö_hsi48_out_48mhz
()

614 
	`rcc_osc_⁄
(
RCC_HSI48
);

615 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI48
);

617 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_NODIV
);

618 
	`rcc_£t_µª
(
RCC_CFGR_PPRE_NODIV
);

620 
	`Êash_¥e„tch_íabÀ
();

621 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_024_048MHZ
);

623 
	`rcc_£t_sys˛k_sour˚
(
RCC_HSI48
);

625 
rcc_≠b1_‰equícy
 = 48000000;

626 
rcc_ahb_‰equícy
 = 48000000;

627 
	}
}

	@libopencm3/lib/stm32/f0/rtc.c

31 
	~<lib›ícm3/°m32/πc.h
>

	@libopencm3/lib/stm32/f0/spi.c

31 
	~<lib›ícm3/°m32/•i.h
>

	@libopencm3/lib/stm32/f0/syscfg.c

31 
	~<lib›ícm3/°m32/syscfg.h
>

	@libopencm3/lib/stm32/f0/timer.c

33 
	~<lib›ícm3/°m32/timî.h
>

	@libopencm3/lib/stm32/f0/vector_nvic.c

15 #¥agm®
wók
 
wwdg_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pvd_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
Êash_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
rcc_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
exti0_1_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
exti2_3_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
exti4_15_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
tsc_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
dma1_ch™√l1_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
dma1_ch™√l2_3_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
dma1_ch™√l4_5_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
adc_comp_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
tim1_brk_up_åg_com_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
tim1_cc_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
tim2_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
tim3_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
tim6_dac_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
tim7_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
tim14_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
tim15_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
tim16_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
tim17_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
i2c1_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
i2c2_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
•i2_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
ußπ3_4_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
˚c_ˇn_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
usb_i§
 = 
blockög_h™dÀr


55 
	#IRQ_HANDLERS
 \

56 [
NVIC_WWDG_IRQ
] = 
wwdg_i§
, \

57 [
NVIC_PVD_IRQ
] = 
pvd_i§
, \

58 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

59 [
NVIC_FLASH_IRQ
] = 
Êash_i§
, \

60 [
NVIC_RCC_IRQ
] = 
rcc_i§
, \

61 [
NVIC_EXTI0_1_IRQ
] = 
exti0_1_i§
, \

62 [
NVIC_EXTI2_3_IRQ
] = 
exti2_3_i§
, \

63 [
NVIC_EXTI4_15_IRQ
] = 
exti4_15_i§
, \

64 [
NVIC_TSC_IRQ
] = 
tsc_i§
, \

65 [
NVIC_DMA1_CHANNEL1_IRQ
] = 
dma1_ch™√l1_i§
, \

66 [
NVIC_DMA1_CHANNEL2_3_IRQ
] = 
dma1_ch™√l2_3_i§
, \

67 [
NVIC_DMA1_CHANNEL4_5_IRQ
] = 
dma1_ch™√l4_5_i§
, \

68 [
NVIC_ADC_COMP_IRQ
] = 
adc_comp_i§
, \

69 [
NVIC_TIM1_BRK_UP_TRG_COM_IRQ
] = 
tim1_brk_up_åg_com_i§
, \

70 [
NVIC_TIM1_CC_IRQ
] = 
tim1_cc_i§
, \

71 [
NVIC_TIM2_IRQ
] = 
tim2_i§
, \

72 [
NVIC_TIM3_IRQ
] = 
tim3_i§
, \

73 [
NVIC_TIM6_DAC_IRQ
] = 
tim6_dac_i§
, \

74 [
NVIC_TIM7_IRQ
] = 
tim7_i§
, \

75 [
NVIC_TIM14_IRQ
] = 
tim14_i§
, \

76 [
NVIC_TIM15_IRQ
] = 
tim15_i§
, \

77 [
NVIC_TIM16_IRQ
] = 
tim16_i§
, \

78 [
NVIC_TIM17_IRQ
] = 
tim17_i§
, \

79 [
NVIC_I2C1_IRQ
] = 
i2c1_i§
, \

80 [
NVIC_I2C2_IRQ
] = 
i2c2_i§
, \

81 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

82 [
NVIC_SPI2_IRQ
] = 
•i2_i§
, \

83 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

84 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

85 [
NVIC_USART3_4_IRQ
] = 
ußπ3_4_i§
, \

86 [
NVIC_CEC_CAN_IRQ
] = 
˚c_ˇn_i§
, \

87 [
NVIC_USB_IRQ
] = 
usb_i§


	)

	@libopencm3/lib/stm32/f1/adc.c

109 
	~<lib›ícm3/°m32/adc.h
>

122 
	$adc_powî_⁄
(
uöt32_t
 
adc
)

124 i‡(!(
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_ADON
)) {

125 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_ADON
;

127 
	}
}

142 
	$adc_°¨t_c⁄vîsi⁄_dúe˘
(
uöt32_t
 
adc
)

144 i‡(
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_ADON
) {

145 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_ADON
;

147 
	}
}

186 
	$adc_£t_duÆ_mode
(
uöt32_t
 
mode
)

188 
ADC1_CR1
 |
mode
;

189 
	}
}

201 
	$adc_íabÀ_ãm≥øtuª_£ns‹
()

203 
	`ADC_CR2
(
ADC1
Ë|
ADC_CR2_TSVREFE
;

204 
	}
}

213 
	$adc_dißbÀ_ãm≥øtuª_£ns‹
()

215 
	`ADC_CR2
(
ADC1
Ë&~
ADC_CR2_TSVREFE
;

216 
	}
}

250 
	$adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
)

252 
uöt32_t
 
ªg32
;

254 
ªg32
 = (
	`ADC_CR2
(
adc
Ë& ~(
ADC_CR2_EXTSEL_MASK
));

255 
ªg32
 |(
åiggî
);

256 
	`ADC_CR2
(
adc
Ë
ªg32
;

257 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_EXTTRIG
;

258 
	}
}

267 
	$adc_dißbÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
)

269 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_EXTTRIG
;

270 
	}
}

303 
	$adc_íabÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
, uöt32_à
åiggî
)

305 
uöt32_t
 
ªg32
;

307 
ªg32
 = (
	`ADC_CR2
(
adc
Ë& ~(
ADC_CR2_JEXTSEL_MASK
));

309 
ªg32
 |(
åiggî
);

310 
	`ADC_CR2
(
adc
Ë
ªg32
;

311 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_JEXTTRIG
;

312 
	}
}

321 
	$adc_dißbÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
)

323 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_JEXTTRIG
;

324 
	}
}

336 
	$adc_ª£t_ˇlibøti⁄
(
uöt32_t
 
adc
)

338 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_RSTCAL
;

339 
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_RSTCAL
);

340 
	}
}

356 
	$adc_ˇlibøti⁄
(
uöt32_t
 
adc
)

358 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_CAL
;

359 
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_CAL
);

360 
	}
}

368 
	$adc_ˇlibøã_async
(
uöt32_t
 
adc
)

370 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_CAL
;

371 
	}
}

378 
boﬁ
 
	$adc_is_ˇlibøtög
(
uöt32_t
 
adc
)

380  (
	`ADC_CR2
(
adc
Ë& 
ADC_CR2_CAL
);

381 
	}
}

389 
	$adc_ˇlibøã
(
uöt32_t
 
adc
)

391 
	`adc_ˇlibøã_async
(
adc
);

392 
	`adc_is_ˇlibøtög
(
adc
));

393 
	}
}

409 
	$adc_£t_ßm∂e_time
(
uöt32_t
 
adc
, 
uöt8_t
 
ch™√l
, uöt8_à
time
)

411 
uöt32_t
 
ªg32
;

413 i‡(
ch™√l
 < 10) {

414 
ªg32
 = 
	`ADC_SMPR2
(
adc
);

415 
ªg32
 &~(0x7 << (
ch™√l
 * 3));

416 
ªg32
 |(
time
 << (
ch™√l
 * 3));

417 
	`ADC_SMPR2
(
adc
Ë
ªg32
;

419 
ªg32
 = 
	`ADC_SMPR1
(
adc
);

420 
ªg32
 &~(0x7 << ((
ch™√l
 - 10) * 3));

421 
ªg32
 |(
time
 << ((
ch™√l
 - 10) * 3));

422 
	`ADC_SMPR1
(
adc
Ë
ªg32
;

424 
	}
}

438 
	$adc_£t_ßm∂e_time_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
, 
uöt8_t
 
time
)

440 
uöt8_t
 
i
;

441 
uöt32_t
 
ªg32
 = 0;

443 
i
 = 0; i <= 9; i++) {

444 
ªg32
 |(
time
 << (
i
 * 3));

446 
	`ADC_SMPR2
(
adc
Ë
ªg32
;

448 
i
 = 10; i <= 17; i++) {

449 
ªg32
 |(
time
 << ((
i
 - 10) * 3));

451 
	`ADC_SMPR1
(
adc
Ë
ªg32
;

452 
	}
}

	@libopencm3/lib/stm32/f1/dac.c

31 
	~<lib›ícm3/°m32/dac.h
>

	@libopencm3/lib/stm32/f1/dma.c

31 
	~<lib›ícm3/°m32/dma.h
>

	@libopencm3/lib/stm32/f1/flash.c

62 
	~<lib›ícm3/°m32/desig.h
>

63 
	~<lib›ícm3/°m32/Êash.h
>

76 
	$Êash_hÆfcy˛e_íabÀ
()

78 
FLASH_ACR
 |
FLASH_ACR_HLFCYA
;

79 
	}
}

86 
	$Êash_hÆfcy˛e_dißbÀ
()

88 
FLASH_ACR
 &~
FLASH_ACR_HLFCYA
;

89 
	}
}

98 
	$Êash_u∆ock_uµî
()

100 i‡(
DESIG_FLASH_SIZE
 > 512) {

103 
FLASH_CR2
 |
FLASH_CR_LOCK
;

106 
FLASH_KEYR2
 = 
FLASH_KEYR_KEY1
;

107 
FLASH_KEYR2
 = 
FLASH_KEYR_KEY2
;

109 
	}
}

117 
	$Êash_lock_uµî
()

119 
FLASH_CR2
 |
FLASH_CR_LOCK
;

120 
	}
}

127 
	$Êash_˛ór_pgîr_Êag_uµî
()

129 i‡(
DESIG_FLASH_SIZE
 > 512) {

130 
FLASH_SR2
 |
FLASH_SR_PGERR
;

132 
	}
}

139 
	$Êash_˛ór_e›_Êag_uµî
()

141 i‡(
DESIG_FLASH_SIZE
 > 512) {

142 
FLASH_SR2
 |
FLASH_SR_EOP
;

144 
	}
}

151 
	$Êash_˛ór_wΩπîr_Êag_uµî
()

153 i‡(
DESIG_FLASH_SIZE
 > 512) {

154 
FLASH_SR2
 |
FLASH_SR_WRPRTERR
;

156 
	}
}

163 
	$Êash_˛ór_bsy_Êag_uµî
()

165 i‡(
DESIG_FLASH_SIZE
 > 512) {

166 
FLASH_SR2
 &~
FLASH_SR_BSY
;

168 
	}
}

176 
	$Êash_˛ór_°©us_Êags
()

178 
	`Êash_˛ór_pgîr_Êag
();

179 
	`Êash_˛ór_e›_Êag
();

180 
	`Êash_˛ór_wΩπîr_Êag
();

181 
	`Êash_˛ór_bsy_Êag
();

182 i‡(
DESIG_FLASH_SIZE
 > 512) {

183 
	`Êash_˛ór_pgîr_Êag_uµî
();

184 
	`Êash_˛ór_e›_Êag_uµî
();

185 
	`Êash_˛ór_wΩπîr_Êag_uµî
();

186 
	`Êash_˛ór_bsy_Êag_uµî
();

188 
	}
}

203 
uöt32_t
 
	$Êash_gë_°©us_Êags
()

205 
uöt32_t
 
Êags
 = (
FLASH_SR
 & (
FLASH_SR_PGERR
 |

206 
FLASH_SR_EOP
 |

207 
FLASH_SR_WRPRTERR
 |

208 
FLASH_SR_BSY
));

209 i‡(
DESIG_FLASH_SIZE
 > 512) {

210 
Êags
 |(
FLASH_SR2
 & (
FLASH_SR_PGERR
 |

211 
FLASH_SR_EOP
 |

212 
FLASH_SR_WRPRTERR
 |

213 
FLASH_SR_BSY
));

216  
Êags
;

217 
	}
}

232 
	$Êash_¥ogøm_hÆf_w‹d
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
)

234 
	`Êash_waô_f‹_œ°_›î©i⁄
();

236 i‡((
DESIG_FLASH_SIZE
 > 512Ë&& (
addªss
 >
FLASH_BASE
+0x00080000)) {

237 
FLASH_CR2
 |
FLASH_CR_PG
;

239 
FLASH_CR
 |
FLASH_CR_PG
;

242 
	`MMIO16
(
addªss
Ë
d©a
;

244 
	`Êash_waô_f‹_œ°_›î©i⁄
();

246 i‡((
DESIG_FLASH_SIZE
 > 512Ë&& (
addªss
 >
FLASH_BASE
+0x00080000)) {

247 
FLASH_CR2
 &~
FLASH_CR_PG
;

249 
FLASH_CR
 &~
FLASH_CR_PG
;

251 
	}
}

266 
	$Êash_îa£_∑ge
(
uöt32_t
 
∑ge_addªss
)

268 
	`Êash_waô_f‹_œ°_›î©i⁄
();

270 i‡((
DESIG_FLASH_SIZE
 > 512)

271 && (
∑ge_addªss
 >
FLASH_BASE
+0x00080000)) {

272 
FLASH_CR2
 |
FLASH_CR_PER
;

273 
FLASH_AR2
 = 
∑ge_addªss
;

274 
FLASH_CR2
 |
FLASH_CR_STRT
;

276 
FLASH_CR
 |
FLASH_CR_PER
;

277 
FLASH_AR
 = 
∑ge_addªss
;

278 
FLASH_CR
 |
FLASH_CR_STRT
;

281 
	`Êash_waô_f‹_œ°_›î©i⁄
();

283 i‡((
DESIG_FLASH_SIZE
 > 512)

284 && (
∑ge_addªss
 >
FLASH_BASE
+0x00080000)) {

285 
FLASH_CR2
 &~
FLASH_CR_PER
;

287 
FLASH_CR
 &~
FLASH_CR_PER
;

289 
	}
}

298 
	$Êash_îa£_Æl_∑ges
()

300 
	`Êash_waô_f‹_œ°_›î©i⁄
();

302 
FLASH_CR
 |
FLASH_CR_MER
;

303 
FLASH_CR
 |
FLASH_CR_STRT
;

305 
	`Êash_waô_f‹_œ°_›î©i⁄
();

306 
FLASH_CR
 &~
FLASH_CR_MER
;

309 
FLASH_CR2
 |
FLASH_CR_MER
;

310 
FLASH_CR2
 |
FLASH_CR_STRT
;

312 
	`Êash_waô_f‹_œ°_›î©i⁄
();

313 
FLASH_CR2
 &~
FLASH_CR_MER
;

314 
	}
}

	@libopencm3/lib/stm32/f1/gpio.c

77 
	~<lib›ícm3/°m32/gpio.h
>

95 
	$gpio_£t_mode
(
uöt32_t
 
gpi›‹t
, 
uöt8_t
 
mode
, uöt8_à
˙f
, 
uöt16_t
 
gpios
)

97 
uöt16_t
 
i
, 
off£t
 = 0;

98 
uöt32_t
 
¸l
 = 0, 
¸h
 = 0, 
tmp32
 = 0;

104 
¸l
 = 
	`GPIO_CRL
(
gpi›‹t
);

105 
¸h
 = 
	`GPIO_CRH
(
gpi›‹t
);

108 
i
 = 0; i < 16; i++) {

110 i‡(!((1 << 
i
Ë& 
gpios
)) {

115 
off£t
 = (
i
 < 8) ? (i * 4) : ((i - 8) * 4);

118 
tmp32
 = (
i
 < 8Ë? 
¸l
 : 
¸h
;

121 
tmp32
 &~(0x‡<< 
off£t
);

122 
tmp32
 |(
mode
 << 
off£t
Ë| (
˙f
 << (offset + 2));

125 
¸l
 = (
i
 < 8Ë? 
tmp32
 : crl;

126 
¸h
 = (
i
 >8Ë? 
tmp32
 : crh;

129 
	`GPIO_CRL
(
gpi›‹t
Ë
¸l
;

130 
	`GPIO_CRH
(
gpi›‹t
Ë
¸h
;

131 
	}
}

141 
	$gpio_£t_evítout
(
uöt8_t
 
evouç‹t
, uöt8_à
evouçö
)

143 
AFIO_EVCR
 = 
AFIO_EVCR_EVOE
 | 
evouç‹t
 | 
evouçö
;

144 
	}
}

169 
	$gpio_¥im¨y_ªm≠
(
uöt32_t
 
swjdißbÀ
, uöt32_à
m≠s
)

176 
uöt32_t
 
ªg
 = 
AFIO_MAPR
 & ~
AFIO_MAPR_SWJ_MASK
;

177 
AFIO_MAPR
 = 
ªg
 | 
swjdißbÀ
 | 
m≠s
;

178 
	}
}

194 
	$gpio_£c⁄d¨y_ªm≠
(
uöt32_t
 
m≠s
)

196 
AFIO_MAPR2
 |
m≠s
;

197 
	}
}

	@libopencm3/lib/stm32/f1/i2c.c

31 
	~<lib›ícm3/°m32/i2c.h
>

	@libopencm3/lib/stm32/f1/pwr.c

40 
	~<lib›ícm3/°m32/pwr.h
>

	@libopencm3/lib/stm32/f1/rcc.c

52 
	~<lib›ícm3/cm3/as£π.h
>

53 
	~<lib›ícm3/°m32/rcc.h
>

54 
	~<lib›ícm3/°m32/Êash.h
>

57 
uöt32_t
 
	grcc_≠b1_‰equícy
 = 8000000;

58 
uöt32_t
 
	grcc_≠b2_‰equícy
 = 8000000;

59 
uöt32_t
 
	grcc_ahb_‰equícy
 = 8000000;

70 
	$rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
)

72 
osc
) {

73 
RCC_PLL
:

74 
RCC_CIR
 |
RCC_CIR_PLLRDYC
;

76 
RCC_PLL2
:

77 
RCC_CIR
 |
RCC_CIR_PLL2RDYC
;

79 
RCC_PLL3
:

80 
RCC_CIR
 |
RCC_CIR_PLL3RDYC
;

82 
RCC_HSE
:

83 
RCC_CIR
 |
RCC_CIR_HSERDYC
;

85 
RCC_HSI
:

86 
RCC_CIR
 |
RCC_CIR_HSIRDYC
;

88 
RCC_LSE
:

89 
RCC_CIR
 |
RCC_CIR_LSERDYC
;

91 
RCC_LSI
:

92 
RCC_CIR
 |
RCC_CIR_LSIRDYC
;

95 
	}
}

103 
	$rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
)

105 
osc
) {

106 
RCC_PLL
:

107 
RCC_CIR
 |
RCC_CIR_PLLRDYIE
;

109 
RCC_PLL2
:

110 
RCC_CIR
 |
RCC_CIR_PLL2RDYIE
;

112 
RCC_PLL3
:

113 
RCC_CIR
 |
RCC_CIR_PLL3RDYIE
;

115 
RCC_HSE
:

116 
RCC_CIR
 |
RCC_CIR_HSERDYIE
;

118 
RCC_HSI
:

119 
RCC_CIR
 |
RCC_CIR_HSIRDYIE
;

121 
RCC_LSE
:

122 
RCC_CIR
 |
RCC_CIR_LSERDYIE
;

124 
RCC_LSI
:

125 
RCC_CIR
 |
RCC_CIR_LSIRDYIE
;

128 
	}
}

136 
	$rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
)

138 
osc
) {

139 
RCC_PLL
:

140 
RCC_CIR
 &~
RCC_CIR_PLLRDYIE
;

142 
RCC_PLL2
:

143 
RCC_CIR
 &~
RCC_CIR_PLL2RDYIE
;

145 
RCC_PLL3
:

146 
RCC_CIR
 &~
RCC_CIR_PLL3RDYIE
;

148 
RCC_HSE
:

149 
RCC_CIR
 &~
RCC_CIR_HSERDYIE
;

151 
RCC_HSI
:

152 
RCC_CIR
 &~
RCC_CIR_HSIRDYIE
;

154 
RCC_LSE
:

155 
RCC_CIR
 &~
RCC_CIR_LSERDYIE
;

157 
RCC_LSI
:

158 
RCC_CIR
 &~
RCC_CIR_LSIRDYIE
;

161 
	}
}

170 
	$rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
)

172 
osc
) {

173 
RCC_PLL
:

174  ((
RCC_CIR
 & 
RCC_CIR_PLLRDYF
) != 0);

176 
RCC_PLL2
:

177  ((
RCC_CIR
 & 
RCC_CIR_PLL2RDYF
) != 0);

179 
RCC_PLL3
:

180  ((
RCC_CIR
 & 
RCC_CIR_PLL3RDYF
) != 0);

182 
RCC_HSE
:

183  ((
RCC_CIR
 & 
RCC_CIR_HSERDYF
) != 0);

185 
RCC_HSI
:

186  ((
RCC_CIR
 & 
RCC_CIR_HSIRDYF
) != 0);

188 
RCC_LSE
:

189  ((
RCC_CIR
 & 
RCC_CIR_LSERDYF
) != 0);

191 
RCC_LSI
:

192  ((
RCC_CIR
 & 
RCC_CIR_LSIRDYF
) != 0);

196 
	`cm3_as£π_nŸ_ªached
();

197 
	}
}

204 
	$rcc_css_öt_˛ór
()

206 
RCC_CIR
 |
RCC_CIR_CSSC
;

207 
	}
}

215 
	$rcc_css_öt_Êag
()

217  ((
RCC_CIR
 & 
RCC_CIR_CSSF
) != 0);

218 
	}
}

220 
boﬁ
 
	$rcc_is_osc_ªady
(
rcc_osc
 
osc
)

222 
osc
) {

223 
RCC_PLL
:

224  
RCC_CR
 & 
RCC_CR_PLLRDY
;

225 
RCC_PLL2
:

226  
RCC_CR
 & 
RCC_CR_PLL2RDY
;

227 
RCC_PLL3
:

228  
RCC_CR
 & 
RCC_CR_PLL3RDY
;

229 
RCC_HSE
:

230  
RCC_CR
 & 
RCC_CR_HSERDY
;

231 
RCC_HSI
:

232  
RCC_CR
 & 
RCC_CR_HSIRDY
;

233 
RCC_LSE
:

234  
RCC_BDCR
 & 
RCC_BDCR_LSERDY
;

235 
RCC_LSI
:

236  
RCC_CSR
 & 
RCC_CSR_LSIRDY
;

238  
Ál£
;

239 
	}
}

241 
	$rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
)

243 !
	`rcc_is_osc_ªady
(
osc
));

244 
	}
}

261 
	$rcc_osc_⁄
(
rcc_osc
 
osc
)

263 
osc
) {

264 
RCC_PLL
:

265 
RCC_CR
 |
RCC_CR_PLLON
;

267 
RCC_PLL2
:

268 
RCC_CR
 |
RCC_CR_PLL2ON
;

270 
RCC_PLL3
:

271 
RCC_CR
 |
RCC_CR_PLL3ON
;

273 
RCC_HSE
:

274 
RCC_CR
 |
RCC_CR_HSEON
;

276 
RCC_HSI
:

277 
RCC_CR
 |
RCC_CR_HSION
;

279 
RCC_LSE
:

280 
RCC_BDCR
 |
RCC_BDCR_LSEON
;

282 
RCC_LSI
:

283 
RCC_CSR
 |
RCC_CSR_LSION
;

286 
	}
}

302 
	$rcc_osc_off
(
rcc_osc
 
osc
)

304 
osc
) {

305 
RCC_PLL
:

306 
RCC_CR
 &~
RCC_CR_PLLON
;

308 
RCC_PLL2
:

309 
RCC_CR
 &~
RCC_CR_PLL2ON
;

311 
RCC_PLL3
:

312 
RCC_CR
 &~
RCC_CR_PLL3ON
;

314 
RCC_HSE
:

315 
RCC_CR
 &~
RCC_CR_HSEON
;

317 
RCC_HSI
:

318 
RCC_CR
 &~
RCC_CR_HSION
;

320 
RCC_LSE
:

321 
RCC_BDCR
 &~
RCC_BDCR_LSEON
;

323 
RCC_LSI
:

324 
RCC_CSR
 &~
RCC_CSR_LSION
;

327 
	}
}

334 
	$rcc_css_íabÀ
()

336 
RCC_CR
 |
RCC_CR_CSSON
;

337 
	}
}

344 
	$rcc_css_dißbÀ
()

346 
RCC_CR
 &~
RCC_CR_CSSON
;

347 
	}
}

355 
	$rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
)

357 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_SW
) |

358 (
˛k
 << 
RCC_CFGR_SW_SHIFT
);

359 
	}
}

369 
	$rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
)

371 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PLLMUL
) |

372 (
mul
 << 
RCC_CFGR_PLLMUL_SHIFT
);

373 
	}
}

383 
	$rcc_£t_∂l2_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
)

385 
RCC_CFGR2
 = (RCC_CFGR2 & ~
RCC_CFGR2_PLL2MUL
) |

386 (
mul
 << 
RCC_CFGR2_PLL2MUL_SHIFT
);

387 
	}
}

397 
	$rcc_£t_∂l3_mu…ùliˇti⁄_Á˘‹
(
uöt32_t
 
mul
)

399 
RCC_CFGR2
 = (RCC_CFGR2 & ~
RCC_CFGR2_PLL3MUL
) |

400 (
mul
 << 
RCC_CFGR2_PLL3MUL_SHIFT
);

401 
	}
}

411 
	$rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
)

413 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PLLSRC
) |

414 (
∂l§c
 << 16);

415 
	}
}

425 
	$rcc_£t_∂lxçª
(
uöt32_t
 
∂lxçª
)

427 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PLLXTPRE
) |

428 (
∂lxçª
 << 17);

429 
	}
}

437 
uöt32_t
 
	$rcc_πc_˛ock_íabÀd_Êag
()

439  
RCC_BDCR
 & 
RCC_BDCR_RTCEN
;

440 
	}
}

447 
	$rcc_íabÀ_πc_˛ock
()

449 
RCC_BDCR
 |
RCC_BDCR_RTCEN
;

450 
	}
}

458 
	$rcc_£t_πc_˛ock_sour˚
(
rcc_osc
 
˛ock_sour˚
)

460 
uöt32_t
 
ªg32
;

462 
˛ock_sour˚
) {

463 
RCC_LSE
:

465 
RCC_BDCR
 |
RCC_BDCR_LSEON
;

466 (
ªg32
 = (
RCC_BDCR
 & 
RCC_BDCR_LSERDY
)) == 0);

469 
RCC_BDCR
 &= ~((1 << 8) | (1 << 9));

470 
RCC_BDCR
 |= (1 << 8);

472 
RCC_LSI
:

474 
RCC_CSR
 |
RCC_CSR_LSION
;

475 (
ªg32
 = (
RCC_CSR
 & 
RCC_CSR_LSIRDY
)) == 0);

478 
RCC_BDCR
 &= ~((1 << 8) | (1 << 9));

479 
RCC_BDCR
 |= (1 << 9);

481 
RCC_HSE
:

483 
RCC_CR
 |
RCC_CR_HSEON
;

484 (
ªg32
 = (
RCC_CR
 & 
RCC_CR_HSERDY
)) == 0);

487 
RCC_BDCR
 &= ~((1 << 8) | (1 << 9));

488 
RCC_BDCR
 |= (1 << 9) | (1 << 8);

490 
RCC_PLL
:

491 
RCC_PLL2
:

492 
RCC_PLL3
:

493 
RCC_HSI
:

496 
RCC_BDCR
 &= ~((1 << 8) | (1 << 9));

499 
	}
}

509 
	$rcc_£t_ad˝ª
(
uöt32_t
 
ad˝ª
)

511 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_ADCPRE
) |

512 (
ad˝ª
 << 
RCC_CFGR_ADCPRE_SHIFT
);

513 
	}
}

521 
	$rcc_£t_µª2
(
uöt32_t
 
µª2
)

523 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PPRE2
) |

524 (
µª2
 << 
RCC_CFGR_PPRE2_SHIFT
);

525 
	}
}

535 
	$rcc_£t_µª1
(
uöt32_t
 
µª1
)

537 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_PPRE1
) |

538 (
µª1
 << 
RCC_CFGR_PPRE1_SHIFT
);

540 
	}
}

548 
	$rcc_£t_h¥e
(
uöt32_t
 
h¥e
)

550 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_HPRE
) |

551 (
h¥e
 << 
RCC_CFGR_HPRE_SHIFT
);

553 
	}
}

566 
	$rcc_£t_usb¥e
(
uöt32_t
 
usb¥e
)

568 i‡(
usb¥e
) {

569 
RCC_CFGR
 |
RCC_CFGR_USBPRE
;

571 
RCC_CFGR
 &~
RCC_CFGR_USBPRE
;

573 
	}
}

575 
	$rcc_£t_¥ediv1
(
uöt32_t
 
¥ediv
)

577 
RCC_CFGR2
 = (RCC_CFGR2 & ~
RCC_CFGR2_PREDIV1
) |

578 (
¥ediv
 << 
RCC_CFGR2_PREDIV1_SHIFT
);

579 
	}
}

581 
	$rcc_£t_¥ediv2
(
uöt32_t
 
¥ediv
)

583 
RCC_CFGR2
 = (RCC_CFGR2 & ~
RCC_CFGR2_PREDIV2
) |

584 (
¥ediv
 << 
RCC_CFGR2_PREDIV2_SHIFT
);

585 
	}
}

587 
	$rcc_£t_¥ediv1_sour˚
(
uöt32_t
 
rcc§c
)

589 i‡(
rcc§c
) {

590 
RCC_CFGR2
 |
RCC_CFGR2_PREDIV1SRC
;

592 
RCC_CFGR2
 &~
RCC_CFGR2_PREDIV1SRC
;

594 
	}
}

605 
uöt32_t
 
	$rcc_sy°em_˛ock_sour˚
()

608  (
RCC_CFGR
 & 
RCC_CFGR_SWS
Ë>> 
RCC_CFGR_SWS_SHIFT
;

609 
	}
}

621 
	$rcc_˛ock_£tup_ö_hsi_out_64mhz
()

624 
	`rcc_osc_⁄
(
RCC_HSI
);

625 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

628 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

634 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

635 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV8
);

636 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

637 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

645 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_2WS
);

651 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL16
);

654 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSI_CLK_DIV2
);

657 
	`rcc_osc_⁄
(
RCC_PLL
);

658 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

661 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

664 
rcc_ahb_‰equícy
 = 64000000;

665 
rcc_≠b1_‰equícy
 = 32000000;

666 
rcc_≠b2_‰equícy
 = 64000000;

667 
	}
}

674 
	$rcc_˛ock_£tup_ö_hsi_out_48mhz
()

677 
	`rcc_osc_⁄
(
RCC_HSI
);

678 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

681 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

687 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

688 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV8
);

689 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

690 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

691 
	`rcc_£t_usb¥e
(
RCC_CFGR_USBPRE_PLL_CLK_NODIV
);

699 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_1WS
);

705 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL12
);

708 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSI_CLK_DIV2
);

711 
	`rcc_osc_⁄
(
RCC_PLL
);

712 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

715 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

718 
rcc_ahb_‰equícy
 = 48000000;

719 
rcc_≠b1_‰equícy
 = 24000000;

720 
rcc_≠b2_‰equícy
 = 48000000;

721 
	}
}

728 
	$rcc_˛ock_£tup_ö_hsi_out_24mhz
()

731 
	`rcc_osc_⁄
(
RCC_HSI
);

732 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

735 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

741 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

742 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV2
);

743 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_NODIV
);

744 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

752 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_0WS
);

758 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL6
);

761 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSI_CLK_DIV2
);

764 
	`rcc_osc_⁄
(
RCC_PLL
);

765 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

768 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

771 
rcc_ahb_‰equícy
 = 24000000;

772 
rcc_≠b1_‰equícy
 = 24000000;

773 
rcc_≠b2_‰equícy
 = 24000000;

774 
	}
}

781 
	$rcc_˛ock_£tup_ö_h£_8mhz_out_24mhz
()

784 
	`rcc_osc_⁄
(
RCC_HSI
);

785 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

788 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

791 
	`rcc_osc_⁄
(
RCC_HSE
);

792 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

793 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSECLK
);

799 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

800 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV2
);

801 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_NODIV
);

802 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

810 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_0WS
);

816 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL3
);

819 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSE_CLK
);

825 
	`rcc_£t_∂lxçª
(
RCC_CFGR_PLLXTPRE_HSE_CLK
);

828 
	`rcc_osc_⁄
(
RCC_PLL
);

829 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

832 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

835 
rcc_ahb_‰equícy
 = 24000000;

836 
rcc_≠b1_‰equícy
 = 24000000;

837 
rcc_≠b2_‰equícy
 = 24000000;

838 
	}
}

845 
	$rcc_˛ock_£tup_ö_h£_8mhz_out_72mhz
()

848 
	`rcc_osc_⁄
(
RCC_HSI
);

849 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

852 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

855 
	`rcc_osc_⁄
(
RCC_HSE
);

856 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

857 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSECLK
);

863 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

864 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV8
);

865 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

866 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

874 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_2WS
);

880 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL9
);

883 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSE_CLK
);

889 
	`rcc_£t_∂lxçª
(
RCC_CFGR_PLLXTPRE_HSE_CLK
);

892 
	`rcc_osc_⁄
(
RCC_PLL
);

893 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

896 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

899 
rcc_ahb_‰equícy
 = 72000000;

900 
rcc_≠b1_‰equícy
 = 36000000;

901 
rcc_≠b2_‰equícy
 = 72000000;

902 
	}
}

909 
	$rcc_˛ock_£tup_ö_h£_12mhz_out_72mhz
()

912 
	`rcc_osc_⁄
(
RCC_HSI
);

913 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

916 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

919 
	`rcc_osc_⁄
(
RCC_HSE
);

920 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

921 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSECLK
);

927 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

928 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV6
);

929 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

930 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

938 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_2WS
);

944 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL6
);

947 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSE_CLK
);

953 
	`rcc_£t_∂lxçª
(
RCC_CFGR_PLLXTPRE_HSE_CLK
);

956 
	`rcc_osc_⁄
(
RCC_PLL
);

957 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

960 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

963 
rcc_ahb_‰equícy
 = 72000000;

964 
rcc_≠b1_‰equícy
 = 36000000;

965 
rcc_≠b2_‰equícy
 = 72000000;

966 
	}
}

973 
	$rcc_˛ock_£tup_ö_h£_16mhz_out_72mhz
()

976 
	`rcc_osc_⁄
(
RCC_HSI
);

977 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

980 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

983 
	`rcc_osc_⁄
(
RCC_HSE
);

984 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

985 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSECLK
);

991 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

992 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV6
);

993 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

994 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

1002 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_2WS
);

1008 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL9
);

1011 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_HSE_CLK
);

1017 
	`rcc_£t_∂lxçª
(
RCC_CFGR_PLLXTPRE_HSE_CLK_DIV2
);

1020 
	`rcc_osc_⁄
(
RCC_PLL
);

1021 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

1024 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

1027 
rcc_ahb_‰equícy
 = 72000000;

1028 
rcc_≠b1_‰equícy
 = 36000000;

1029 
rcc_≠b2_‰equícy
 = 72000000;

1030 
	}
}

1037 
	$rcc_˛ock_£tup_ö_h£_25mhz_out_72mhz
()

1040 
	`rcc_osc_⁄
(
RCC_HSE
);

1041 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

1042 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSECLK
);

1050 
	`Êash_£t_ws
(
FLASH_ACR_LATENCY_2WS
);

1056 
	`rcc_£t_h¥e
(
RCC_CFGR_HPRE_SYSCLK_NODIV
);

1057 
	`rcc_£t_ad˝ª
(
RCC_CFGR_ADCPRE_PCLK2_DIV6
);

1058 
	`rcc_£t_µª1
(
RCC_CFGR_PPRE1_HCLK_DIV2
);

1059 
	`rcc_£t_µª2
(
RCC_CFGR_PPRE2_HCLK_NODIV
);

1062 
	`rcc_£t_¥ediv2
(
RCC_CFGR2_PREDIV2_DIV5
);

1063 
	`rcc_£t_∂l2_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL8
);

1066 
	`rcc_osc_⁄
(
RCC_PLL2
);

1067 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL2
);

1070 
	`rcc_£t_∂lxçª
(
RCC_CFGR_PLLXTPRE_HSE_CLK
);

1071 
	`rcc_£t_¥ediv1_sour˚
(
RCC_CFGR2_PREDIV1SRC_PLL2_CLK
);

1072 
	`rcc_£t_¥ediv1
(
RCC_CFGR2_PREDIV_DIV5
);

1073 
	`rcc_£t_∂l_mu…ùliˇti⁄_Á˘‹
(
RCC_CFGR_PLLMUL_PLL_CLK_MUL9
);

1074 
	`rcc_£t_∂l_sour˚
(
RCC_CFGR_PLLSRC_PREDIV1_CLK
);

1075 
	`rcc_£t_usb¥e
(
RCC_CFGR_USBPRE_PLL_VCO_CLK_DIV3
);

1078 
	`rcc_osc_⁄
(
RCC_PLL
);

1079 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

1082 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

1085 
rcc_ahb_‰equícy
 = 72000000;

1086 
rcc_≠b1_‰equícy
 = 36000000;

1087 
rcc_≠b2_‰equícy
 = 72000000;

1088 
	}
}

1097 
	$rcc_backupdomaö_ª£t
()

1100 
RCC_BDCR
 |
RCC_BDCR_BDRST
;

1103 
RCC_BDCR
 &~
RCC_BDCR_BDRST
;

1104 
	}
}

	@libopencm3/lib/stm32/f1/rtc.c

71 
	~<lib›ícm3/°m32/rcc.h
>

72 
	~<lib›ícm3/°m32/πc.h
>

73 
	~<lib›ícm3/°m32/pwr.h
>

85 
	$πc_awake_‰om_off
(
rcc_osc
 
˛ock_sour˚
)

87 
uöt32_t
 
ªg32
;

90 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

91 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_BKP
);

94 
	`pwr_dißbÀ_backup_domaö_wrôe_¥Ÿe˘
();

97 
	`rcc_£t_πc_˛ock_sour˚
(
˛ock_sour˚
);

100 
RTC_CRH
 = 0;

101 
RTC_CRL
 = 0;

104 
	`rcc_íabÀ_πc_˛ock
();

107 
	`πc_íãr_c⁄fig_mode
();

108 
RTC_PRLH
 = 0;

109 
RTC_PRLL
 = 0;

110 
RTC_CNTH
 = 0;

111 
RTC_CNTL
 = 0;

112 
RTC_ALRH
 = 0xFFFF;

113 
RTC_ALRL
 = 0xFFFF;

114 
	`πc_exô_c⁄fig_mode
();

117 
RTC_CRL
 &~
RTC_CRL_RSF
;

118 (
ªg32
 = (
RTC_CRL
 & 
RTC_CRL_RSF
)) == 0);

119 
	}
}

128 
	$πc_íãr_c⁄fig_mode
()

130 
uöt32_t
 
ªg32
;

133 (
ªg32
 = (
RTC_CRL
 & 
RTC_CRL_RTOFF
)) == 0);

136 
RTC_CRL
 |
RTC_CRL_CNF
;

137 
	}
}

145 
	$πc_exô_c⁄fig_mode
()

147 
uöt32_t
 
ªg32
;

150 
RTC_CRL
 &~
RTC_CRL_CNF
;

153 (
ªg32
 = (
RTC_CRL
 & 
RTC_CRL_RTOFF
)) == 0);

154 
	}
}

162 
	$πc_£t_Æ¨m_time
(
uöt32_t
 
Æ¨m_time
)

164 
	`πc_íãr_c⁄fig_mode
();

165 
RTC_ALRL
 = (
Æ¨m_time
 & 0x0000ffff);

166 
RTC_ALRH
 = (
Æ¨m_time
 & 0xffff0000) >> 16;

167 
	`πc_exô_c⁄fig_mode
();

168 
	}
}

175 
	$πc_íabÀ_Æ¨m
()

177 
	`πc_íãr_c⁄fig_mode
();

178 
RTC_CRH
 |
RTC_CRH_ALRIE
;

179 
	`πc_exô_c⁄fig_mode
();

180 
	}
}

187 
	$πc_dißbÀ_Æ¨m
()

189 
	`πc_íãr_c⁄fig_mode
();

190 
RTC_CRH
 &~
RTC_CRH_ALRIE
;

191 
	`πc_exô_c⁄fig_mode
();

192 
	}
}

200 
	$πc_£t_¥esˇÀ_vÆ
(
uöt32_t
 
¥esˇÀ_vÆ
)

202 
	`πc_íãr_c⁄fig_mode
();

203 
RTC_PRLL
 = 
¥esˇÀ_vÆ
 & 0x0000ffff;

204 
RTC_PRLH
 = (
¥esˇÀ_vÆ
 & 0x000f0000) >> 16;

205 
	`πc_exô_c⁄fig_mode
();

206 
	}
}

214 
uöt32_t
 
	$πc_gë_cou¡î_vÆ
()

216  (
RTC_CNTH
 << 16Ë| 
RTC_CNTL
;

217 
	}
}

225 
uöt32_t
 
	$πc_gë_¥esˇÀ_div_vÆ
()

227  (
RTC_DIVH
 << 16Ë| 
RTC_DIVL
;

228 
	}
}

236 
uöt32_t
 
	$πc_gë_Æ¨m_vÆ
()

238  (
RTC_ALRH
 << 16Ë| 
RTC_ALRL
;

239 
	}
}

247 
	$πc_£t_cou¡î_vÆ
(
uöt32_t
 
cou¡î_vÆ
)

249 
	`πc_íãr_c⁄fig_mode
();

250 
RTC_CNTH
 = (
cou¡î_vÆ
 & 0xffff0000) >> 16;

251 
RTC_CNTL
 = 
cou¡î_vÆ
 & 0x0000ffff;

252 
	`πc_exô_c⁄fig_mode
();

253 
	}
}

261 
	$πc_öãºu±_íabÀ
(
πcÊag_t
 
Êag_vÆ
)

263 
	`πc_íãr_c⁄fig_mode
();

266 
Êag_vÆ
) {

267 
RTC_SEC
:

268 
RTC_CRH
 |
RTC_CRH_SECIE
;

270 
RTC_ALR
:

271 
RTC_CRH
 |
RTC_CRH_ALRIE
;

273 
RTC_OW
:

274 
RTC_CRH
 |
RTC_CRH_OWIE
;

278 
	`πc_exô_c⁄fig_mode
();

279 
	}
}

287 
	$πc_öãºu±_dißbÀ
(
πcÊag_t
 
Êag_vÆ
)

289 
	`πc_íãr_c⁄fig_mode
();

292 
Êag_vÆ
) {

293 
RTC_SEC
:

294 
RTC_CRH
 &~
RTC_CRH_SECIE
;

296 
RTC_ALR
:

297 
RTC_CRH
 &~
RTC_CRH_ALRIE
;

299 
RTC_OW
:

300 
RTC_CRH
 &~
RTC_CRH_OWIE
;

304 
	`πc_exô_c⁄fig_mode
();

305 
	}
}

313 
	$πc_˛ór_Êag
(
πcÊag_t
 
Êag_vÆ
)

318 
Êag_vÆ
) {

319 
RTC_SEC
:

320 
RTC_CRL
 &~
RTC_CRL_SECF
;

322 
RTC_ALR
:

323 
RTC_CRL
 &~
RTC_CRL_ALRF
;

325 
RTC_OW
:

326 
RTC_CRL
 &~
RTC_CRL_OWF
;

329 
	}
}

338 
uöt32_t
 
	$πc_check_Êag
(
πcÊag_t
 
Êag_vÆ
)

340 
uöt32_t
 
ªg32
;

343 
Êag_vÆ
) {

344 
RTC_SEC
:

345 
ªg32
 = 
RTC_CRL
 & 
RTC_CRL_SECF
;

347 
RTC_ALR
:

348 
ªg32
 = 
RTC_CRL
 & 
RTC_CRL_ALRF
;

350 
RTC_OW
:

351 
ªg32
 = 
RTC_CRL
 & 
RTC_CRL_OWF
;

354 
ªg32
 = 0;

358  
ªg32
;

359 
	}
}

368 
	$πc_awake_‰om_°™dby
()

370 
uöt32_t
 
ªg32
;

373 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

374 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_BKP
);

377 
	`pwr_dißbÀ_backup_domaö_wrôe_¥Ÿe˘
();

380 
RTC_CRL
 &~
RTC_CRL_RSF
;

381 (
ªg32
 = (
RTC_CRL
 & 
RTC_CRL_RSF
)) == 0);

385 (
ªg32
 = (
RTC_CRL
 & 
RTC_CRL_RTOFF
)) == 0);

386 
	}
}

400 
	$πc_auto_awake
(
rcc_osc
 
˛ock_sour˚
, 
uöt32_t
 
¥esˇÀ_vÆ
)

402 
uöt32_t
 
ªg32
;

405 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

406 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_BKP
);

408 
ªg32
 = 
	`rcc_πc_˛ock_íabÀd_Êag
();

410 i‡(
ªg32
 != 0) {

411 
	`πc_awake_‰om_°™dby
();

413 
	`πc_awake_‰om_off
(
˛ock_sour˚
);

414 
	`πc_£t_¥esˇÀ_vÆ
(
¥esˇÀ_vÆ
);

416 
	}
}

	@libopencm3/lib/stm32/f1/spi.c

31 
	~<lib›ícm3/°m32/•i.h
>

	@libopencm3/lib/stm32/f1/timer.c

38 
	~<lib›ícm3/°m32/timî.h
>

48 
	$timî_ic_£t_pﬁ¨ôy
(
uöt32_t
 
timî_≥rùhîÆ
, 
tim_ic_id
 
ic
,

49 
tim_ic_pﬁ
 
pﬁ
)

51 i‡(
pﬁ
) {

52 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë|(0x2 << (
ic
 * 4));

54 
	`TIM_CCER
(
timî_≥rùhîÆ
Ë&~(0x2 << (
ic
 * 4));

56 
	}
}

	@libopencm3/lib/stm32/f1/vector_nvic.c

15 #¥agm®
wók
 
wwdg_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pvd_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
èm≥r_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
Êash_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
rcc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
exti0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
exti1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
exti2_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
exti3_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
exti4_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
dma1_ch™√l1_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
dma1_ch™√l2_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
dma1_ch™√l3_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
dma1_ch™√l4_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
dma1_ch™√l5_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
dma1_ch™√l6_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
dma1_ch™√l7_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
adc1_2_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
usb_hp_ˇn_tx_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
usb_Õ_ˇn_rx0_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
ˇn_rx1_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
ˇn_s˚_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
exti9_5_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
tim1_brk_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
tim1_up_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
tim1_åg_com_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tim1_cc_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tim2_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
tim3_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
tim4_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
i2c1_ev_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
i2c1_î_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
i2c2_ev_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
i2c2_î_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
•i2_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
exti15_10_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
πc_Æ¨m_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
usb_wakeup_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
tim8_brk_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
tim8_up_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
tim8_åg_com_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
tim8_cc_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
adc3_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
fsmc_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
sdio_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
tim5_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
•i3_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
u¨t4_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
u¨t5_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
tim6_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
tim7_i§
 = 
blockög_h™dÀr


71 #¥agm®
wók
 
dma2_ch™√l1_i§
 = 
blockög_h™dÀr


72 #¥agm®
wók
 
dma2_ch™√l2_i§
 = 
blockög_h™dÀr


73 #¥agm®
wók
 
dma2_ch™√l3_i§
 = 
blockög_h™dÀr


74 #¥agm®
wók
 
dma2_ch™√l4_5_i§
 = 
blockög_h™dÀr


75 #¥agm®
wók
 
dma2_ch™√l5_i§
 = 
blockög_h™dÀr


76 #¥agm®
wók
 
ëh_i§
 = 
blockög_h™dÀr


77 #¥agm®
wók
 
ëh_wkup_i§
 = 
blockög_h™dÀr


78 #¥agm®
wók
 
ˇn2_tx_i§
 = 
blockög_h™dÀr


79 #¥agm®
wók
 
ˇn2_rx0_i§
 = 
blockög_h™dÀr


80 #¥agm®
wók
 
ˇn2_rx1_i§
 = 
blockög_h™dÀr


81 #¥agm®
wók
 
ˇn2_s˚_i§
 = 
blockög_h™dÀr


82 #¥agm®
wók
 
Ÿg_fs_i§
 = 
blockög_h™dÀr


91 
	#IRQ_HANDLERS
 \

92 [
NVIC_WWDG_IRQ
] = 
wwdg_i§
, \

93 [
NVIC_PVD_IRQ
] = 
pvd_i§
, \

94 [
NVIC_TAMPER_IRQ
] = 
èm≥r_i§
, \

95 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

96 [
NVIC_FLASH_IRQ
] = 
Êash_i§
, \

97 [
NVIC_RCC_IRQ
] = 
rcc_i§
, \

98 [
NVIC_EXTI0_IRQ
] = 
exti0_i§
, \

99 [
NVIC_EXTI1_IRQ
] = 
exti1_i§
, \

100 [
NVIC_EXTI2_IRQ
] = 
exti2_i§
, \

101 [
NVIC_EXTI3_IRQ
] = 
exti3_i§
, \

102 [
NVIC_EXTI4_IRQ
] = 
exti4_i§
, \

103 [
NVIC_DMA1_CHANNEL1_IRQ
] = 
dma1_ch™√l1_i§
, \

104 [
NVIC_DMA1_CHANNEL2_IRQ
] = 
dma1_ch™√l2_i§
, \

105 [
NVIC_DMA1_CHANNEL3_IRQ
] = 
dma1_ch™√l3_i§
, \

106 [
NVIC_DMA1_CHANNEL4_IRQ
] = 
dma1_ch™√l4_i§
, \

107 [
NVIC_DMA1_CHANNEL5_IRQ
] = 
dma1_ch™√l5_i§
, \

108 [
NVIC_DMA1_CHANNEL6_IRQ
] = 
dma1_ch™√l6_i§
, \

109 [
NVIC_DMA1_CHANNEL7_IRQ
] = 
dma1_ch™√l7_i§
, \

110 [
NVIC_ADC1_2_IRQ
] = 
adc1_2_i§
, \

111 [
NVIC_USB_HP_CAN_TX_IRQ
] = 
usb_hp_ˇn_tx_i§
, \

112 [
NVIC_USB_LP_CAN_RX0_IRQ
] = 
usb_Õ_ˇn_rx0_i§
, \

113 [
NVIC_CAN_RX1_IRQ
] = 
ˇn_rx1_i§
, \

114 [
NVIC_CAN_SCE_IRQ
] = 
ˇn_s˚_i§
, \

115 [
NVIC_EXTI9_5_IRQ
] = 
exti9_5_i§
, \

116 [
NVIC_TIM1_BRK_IRQ
] = 
tim1_brk_i§
, \

117 [
NVIC_TIM1_UP_IRQ
] = 
tim1_up_i§
, \

118 [
NVIC_TIM1_TRG_COM_IRQ
] = 
tim1_åg_com_i§
, \

119 [
NVIC_TIM1_CC_IRQ
] = 
tim1_cc_i§
, \

120 [
NVIC_TIM2_IRQ
] = 
tim2_i§
, \

121 [
NVIC_TIM3_IRQ
] = 
tim3_i§
, \

122 [
NVIC_TIM4_IRQ
] = 
tim4_i§
, \

123 [
NVIC_I2C1_EV_IRQ
] = 
i2c1_ev_i§
, \

124 [
NVIC_I2C1_ER_IRQ
] = 
i2c1_î_i§
, \

125 [
NVIC_I2C2_EV_IRQ
] = 
i2c2_ev_i§
, \

126 [
NVIC_I2C2_ER_IRQ
] = 
i2c2_î_i§
, \

127 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

128 [
NVIC_SPI2_IRQ
] = 
•i2_i§
, \

129 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

130 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

131 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

132 [
NVIC_EXTI15_10_IRQ
] = 
exti15_10_i§
, \

133 [
NVIC_RTC_ALARM_IRQ
] = 
πc_Æ¨m_i§
, \

134 [
NVIC_USB_WAKEUP_IRQ
] = 
usb_wakeup_i§
, \

135 [
NVIC_TIM8_BRK_IRQ
] = 
tim8_brk_i§
, \

136 [
NVIC_TIM8_UP_IRQ
] = 
tim8_up_i§
, \

137 [
NVIC_TIM8_TRG_COM_IRQ
] = 
tim8_åg_com_i§
, \

138 [
NVIC_TIM8_CC_IRQ
] = 
tim8_cc_i§
, \

139 [
NVIC_ADC3_IRQ
] = 
adc3_i§
, \

140 [
NVIC_FSMC_IRQ
] = 
fsmc_i§
, \

141 [
NVIC_SDIO_IRQ
] = 
sdio_i§
, \

142 [
NVIC_TIM5_IRQ
] = 
tim5_i§
, \

143 [
NVIC_SPI3_IRQ
] = 
•i3_i§
, \

144 [
NVIC_UART4_IRQ
] = 
u¨t4_i§
, \

145 [
NVIC_UART5_IRQ
] = 
u¨t5_i§
, \

146 [
NVIC_TIM6_IRQ
] = 
tim6_i§
, \

147 [
NVIC_TIM7_IRQ
] = 
tim7_i§
, \

148 [
NVIC_DMA2_CHANNEL1_IRQ
] = 
dma2_ch™√l1_i§
, \

149 [
NVIC_DMA2_CHANNEL2_IRQ
] = 
dma2_ch™√l2_i§
, \

150 [
NVIC_DMA2_CHANNEL3_IRQ
] = 
dma2_ch™√l3_i§
, \

151 [
NVIC_DMA2_CHANNEL4_5_IRQ
] = 
dma2_ch™√l4_5_i§
, \

152 [
NVIC_DMA2_CHANNEL5_IRQ
] = 
dma2_ch™√l5_i§
, \

153 [
NVIC_ETH_IRQ
] = 
ëh_i§
, \

154 [
NVIC_ETH_WKUP_IRQ
] = 
ëh_wkup_i§
, \

155 [
NVIC_CAN2_TX_IRQ
] = 
ˇn2_tx_i§
, \

156 [
NVIC_CAN2_RX0_IRQ
] = 
ˇn2_rx0_i§
, \

157 [
NVIC_CAN2_RX1_IRQ
] = 
ˇn2_rx1_i§
, \

158 [
NVIC_CAN2_SCE_IRQ
] = 
ˇn2_s˚_i§
, \

159 [
NVIC_OTG_FS_IRQ
] = 
Ÿg_fs_i§


	)

	@libopencm3/lib/stm32/f2/crypto.c

31 
	~<lib›ícm3/°m32/¸y±o.h
>

	@libopencm3/lib/stm32/f2/dac.c

31 
	~<lib›ícm3/°m32/dac.h
>

	@libopencm3/lib/stm32/f2/dma.c

31 
	~<lib›ícm3/°m32/dma.h
>

	@libopencm3/lib/stm32/f2/flash.c

50 
	~<lib›ícm3/°m32/Êash.h
>

	@libopencm3/lib/stm32/f2/gpio.c

31 
	~<lib›ícm3/°m32/gpio.h
>

	@libopencm3/lib/stm32/f2/hash.c

31 
	~<lib›ícm3/°m32/hash.h
>

	@libopencm3/lib/stm32/f2/i2c.c

31 
	~<lib›ícm3/°m32/i2c.h
>

	@libopencm3/lib/stm32/f2/pwr.c

38 
	~<lib›ícm3/°m32/pwr.h
>

	@libopencm3/lib/stm32/f2/rcc.c

40 
	~<lib›ícm3/cm3/as£π.h
>

41 
	~<lib›ícm3/°m32/rcc.h
>

42 
	~<lib›ícm3/°m32/Êash.h
>

47 
uöt32_t
 
	grcc_ahb_‰equícy
 = 16000000;

48 
uöt32_t
 
	grcc_≠b1_‰equícy
 = 16000000;

49 
uöt32_t
 
	grcc_≠b2_‰equícy
 = 16000000;

51 c⁄° 
rcc_˛ock_sˇÀ
 
	grcc_h£_8mhz_3v3
[
RCC_CLOCK_3V3_END
] = {

53 .
∂lm
 = 8,

54 .
	g∂ 
 = 240,

55 .
	g∂Õ
 = 2,

56 .
	g∂lq
 = 5,

57 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

58 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

59 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

60 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

61 
FLASH_ACR_LATENCY_3WS
,

62 .
	g≠b1_‰equícy
 = 30000000,

63 .
	g≠b2_‰equícy
 = 60000000,

67 
	$rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
)

69 
osc
) {

70 
RCC_PLL
:

71 
RCC_CIR
 |
RCC_CIR_PLLRDYC
;

73 
RCC_HSE
:

74 
RCC_CIR
 |
RCC_CIR_HSERDYC
;

76 
RCC_HSI
:

77 
RCC_CIR
 |
RCC_CIR_HSIRDYC
;

79 
RCC_LSE
:

80 
RCC_CIR
 |
RCC_CIR_LSERDYC
;

82 
RCC_LSI
:

83 
RCC_CIR
 |
RCC_CIR_LSIRDYC
;

86 
	}
}

88 
	$rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
)

90 
osc
) {

91 
RCC_PLL
:

92 
RCC_CIR
 |
RCC_CIR_PLLRDYIE
;

94 
RCC_HSE
:

95 
RCC_CIR
 |
RCC_CIR_HSERDYIE
;

97 
RCC_HSI
:

98 
RCC_CIR
 |
RCC_CIR_HSIRDYIE
;

100 
RCC_LSE
:

101 
RCC_CIR
 |
RCC_CIR_LSERDYIE
;

103 
RCC_LSI
:

104 
RCC_CIR
 |
RCC_CIR_LSIRDYIE
;

107 
	}
}

109 
	$rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
)

111 
osc
) {

112 
RCC_PLL
:

113 
RCC_CIR
 &~
RCC_CIR_PLLRDYIE
;

115 
RCC_HSE
:

116 
RCC_CIR
 &~
RCC_CIR_HSERDYIE
;

118 
RCC_HSI
:

119 
RCC_CIR
 &~
RCC_CIR_HSIRDYIE
;

121 
RCC_LSE
:

122 
RCC_CIR
 &~
RCC_CIR_LSERDYIE
;

124 
RCC_LSI
:

125 
RCC_CIR
 &~
RCC_CIR_LSIRDYIE
;

128 
	}
}

130 
	$rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
)

132 
osc
) {

133 
RCC_PLL
:

134  ((
RCC_CIR
 & 
RCC_CIR_PLLRDYF
) != 0);

136 
RCC_HSE
:

137  ((
RCC_CIR
 & 
RCC_CIR_HSERDYF
) != 0);

139 
RCC_HSI
:

140  ((
RCC_CIR
 & 
RCC_CIR_HSIRDYF
) != 0);

142 
RCC_LSE
:

143  ((
RCC_CIR
 & 
RCC_CIR_LSERDYF
) != 0);

145 
RCC_LSI
:

146  ((
RCC_CIR
 & 
RCC_CIR_LSIRDYF
) != 0);

150 
	`cm3_as£π_nŸ_ªached
();

151 
	}
}

153 
	$rcc_css_öt_˛ór
()

155 
RCC_CIR
 |
RCC_CIR_CSSC
;

156 
	}
}

158 
	$rcc_css_öt_Êag
()

160  ((
RCC_CIR
 & 
RCC_CIR_CSSF
) != 0);

161 
	}
}

163 
boﬁ
 
	$rcc_is_osc_ªady
(
rcc_osc
 
osc
)

165 
osc
) {

166 
RCC_PLL
:

167  
RCC_CR
 & 
RCC_CR_PLLRDY
;

168 
RCC_HSE
:

169  
RCC_CR
 & 
RCC_CR_HSERDY
;

170 
RCC_HSI
:

171  
RCC_CR
 & 
RCC_CR_HSIRDY
;

172 
RCC_LSE
:

173  
RCC_BDCR
 & 
RCC_BDCR_LSERDY
;

174 
RCC_LSI
:

175  
RCC_CSR
 & 
RCC_CSR_LSIRDY
;

177  
Ál£
;

178 
	}
}

180 
	$rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
)

182 !
	`rcc_is_osc_ªady
(
osc
));

183 
	}
}

185 
	$rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
)

187 
osc
) {

188 
RCC_PLL
:

189 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

190 
RCC_CFGR_SWS_PLL
);

192 
RCC_HSE
:

193 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

194 
RCC_CFGR_SWS_HSE
);

196 
RCC_HSI
:

197 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

198 
RCC_CFGR_SWS_HSI
);

204 
	}
}

206 
	$rcc_osc_⁄
(
rcc_osc
 
osc
)

208 
osc
) {

209 
RCC_PLL
:

210 
RCC_CR
 |
RCC_CR_PLLON
;

212 
RCC_HSE
:

213 
RCC_CR
 |
RCC_CR_HSEON
;

215 
RCC_HSI
:

216 
RCC_CR
 |
RCC_CR_HSION
;

218 
RCC_LSE
:

219 
RCC_BDCR
 |
RCC_BDCR_LSEON
;

221 
RCC_LSI
:

222 
RCC_CSR
 |
RCC_CSR_LSION
;

225 
	}
}

227 
	$rcc_osc_off
(
rcc_osc
 
osc
)

229 
osc
) {

230 
RCC_PLL
:

231 
RCC_CR
 &~
RCC_CR_PLLON
;

233 
RCC_HSE
:

234 
RCC_CR
 &~
RCC_CR_HSEON
;

236 
RCC_HSI
:

237 
RCC_CR
 &~
RCC_CR_HSION
;

239 
RCC_LSE
:

240 
RCC_BDCR
 &~
RCC_BDCR_LSEON
;

242 
RCC_LSI
:

243 
RCC_CSR
 &~
RCC_CSR_LSION
;

246 
	}
}

248 
	$rcc_css_íabÀ
()

250 
RCC_CR
 |
RCC_CR_CSSON
;

251 
	}
}

253 
	$rcc_css_dißbÀ
()

255 
RCC_CR
 &~
RCC_CR_CSSON
;

256 
	}
}

258 
	$rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
)

260 
uöt32_t
 
ªg32
;

262 
ªg32
 = 
RCC_CFGR
;

263 
ªg32
 &= ~((1 << 1) | (1 << 0));

264 
RCC_CFGR
 = (
ªg32
 | 
˛k
);

265 
	}
}

267 
	$rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
)

269 
uöt32_t
 
ªg32
;

271 
ªg32
 = 
RCC_PLLCFGR
;

272 
ªg32
 &= ~(1 << 22);

273 
RCC_PLLCFGR
 = (
ªg32
 | (
∂l§c
 << 22));

274 
	}
}

276 
	$rcc_£t_µª2
(
uöt32_t
 
µª2
)

278 
uöt32_t
 
ªg32
;

280 
ªg32
 = 
RCC_CFGR
;

281 
ªg32
 &= ~((1 << 13) | (1 << 14) | (1 << 15));

282 
RCC_CFGR
 = (
ªg32
 | (
µª2
 << 13));

283 
	}
}

285 
	$rcc_£t_µª1
(
uöt32_t
 
µª1
)

287 
uöt32_t
 
ªg32
;

289 
ªg32
 = 
RCC_CFGR
;

290 
ªg32
 &= ~((1 << 10) | (1 << 11) | (1 << 12));

291 
RCC_CFGR
 = (
ªg32
 | (
µª1
 << 10));

292 
	}
}

294 
	$rcc_£t_h¥e
(
uöt32_t
 
h¥e
)

296 
uöt32_t
 
ªg32
;

298 
ªg32
 = 
RCC_CFGR
;

299 
ªg32
 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));

300 
RCC_CFGR
 = (
ªg32
 | (
h¥e
 << 4));

301 
	}
}

303 
	$rcc_£t_π˝ª
(
uöt32_t
 
π˝ª
)

305 
uöt32_t
 
ªg32
;

307 
ªg32
 = 
RCC_CFGR
;

308 
ªg32
 &= ~((1 << 16) | (1 << 17) | (1 << 18) | (1 << 19) | (1 << 20));

309 
RCC_CFGR
 = (
ªg32
 | (
π˝ª
 << 16));

310 
	}
}

312 
	$rcc_£t_maö_∂l_hsi
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

313 
uöt32_t
 
∂lq
)

315 
RCC_PLLCFGR
 = (
∂lm
 << 
RCC_PLLCFGR_PLLM_SHIFT
) |

316 (
∂ 
 << 
RCC_PLLCFGR_PLLN_SHIFT
) |

317 (((
∂Õ
 >> 1Ë- 1Ë<< 
RCC_PLLCFGR_PLLP_SHIFT
) |

318 (
∂lq
 << 
RCC_PLLCFGR_PLLQ_SHIFT
);

319 
	}
}

321 
	$rcc_£t_maö_∂l_h£
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

322 
uöt32_t
 
∂lq
)

324 
RCC_PLLCFGR
 = (
∂lm
 << 
RCC_PLLCFGR_PLLM_SHIFT
) |

325 (
∂ 
 << 
RCC_PLLCFGR_PLLN_SHIFT
) |

326 (((
∂Õ
 >> 1Ë- 1Ë<< 
RCC_PLLCFGR_PLLP_SHIFT
) |

327 
RCC_PLLCFGR_PLLSRC
 |

328 (
∂lq
 << 
RCC_PLLCFGR_PLLQ_SHIFT
);

329 
	}
}

331 
uöt32_t
 
	$rcc_sy°em_˛ock_sour˚
()

334  (
RCC_CFGR
 & 0x000c) >> 2;

335 
	}
}

337 
	$rcc_˛ock_£tup_h£_3v3
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
)

340 
	`rcc_osc_⁄
(
RCC_HSI
);

341 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

344 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_HSI
);

347 
	`rcc_osc_⁄
(
RCC_HSE
);

348 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

354 
	`rcc_£t_h¥e
(
˛ock
->
h¥e
);

355 
	`rcc_£t_µª1
(
˛ock
->
µª1
);

356 
	`rcc_£t_µª2
(
˛ock
->
µª2
);

358 
	`rcc_£t_maö_∂l_h£
(
˛ock
->
∂lm
, clock->
∂ 
,

359 
˛ock
->
∂Õ
, clock->
∂lq
);

362 
	`rcc_osc_⁄
(
RCC_PLL
);

363 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

366 
	`Êash_£t_ws
(
˛ock
->
Êash_c⁄fig
);

369 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_PLL
);

372 
	`rcc_waô_f‹_sys˛k_°©us
(
RCC_PLL
);

375 
rcc_≠b1_‰equícy
 = 
˛ock
->
≠b1_‰equícy
;

376 
rcc_≠b2_‰equícy
 = 
˛ock
->
≠b2_‰equícy
;

377 
	}
}

379 
	$rcc_backupdomaö_ª£t
()

382 
RCC_BDCR
 |
RCC_BDCR_BDRST
;

385 
RCC_BDCR
 &~
RCC_BDCR_BDRST
;

386 
	}
}

	@libopencm3/lib/stm32/f2/rng.c

31 
	~<lib›ícm3/°m32/∫g.h
>

	@libopencm3/lib/stm32/f2/rtc.c

31 
	~<lib›ícm3/°m32/πc.h
>

	@libopencm3/lib/stm32/f2/spi.c

31 
	~<lib›ícm3/°m32/•i.h
>

	@libopencm3/lib/stm32/f2/timer.c

38 
	~<lib›ícm3/°m32/timî.h
>

	@libopencm3/lib/stm32/f2/vector_nvic.c

15 #¥agm®
wók
 
nvic_wwdg_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pvd_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
èmp_°amp_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πc_wkup_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
Êash_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
rcc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
exti0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
exti1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
exti2_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
exti3_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
exti4_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
dma1_°ªam0_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
dma1_°ªam1_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
dma1_°ªam2_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
dma1_°ªam3_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
dma1_°ªam4_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
dma1_°ªam5_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
dma1_°ªam6_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
adc_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ˇn1_tx_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
ˇn1_rx0_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
ˇn1_rx1_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
ˇn1_s˚_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
exti9_5_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
tim1_brk_tim9_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
tim1_up_tim10_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
tim1_åg_com_tim11_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tim1_cc_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tim2_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
tim3_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
tim4_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
i2c1_ev_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
i2c1_î_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
i2c2_ev_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
i2c2_î_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
•i2_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
exti15_10_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
πc_Æ¨m_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
usb_fs_wkup_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
tim8_brk_tim12_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
tim8_up_tim13_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
tim8_åg_com_tim14_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
tim8_cc_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
dma1_°ªam7_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
fsmc_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
sdio_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
tim5_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
•i3_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
u¨t4_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
u¨t5_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
tim6_dac_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
tim7_i§
 = 
blockög_h™dÀr


71 #¥agm®
wók
 
dma2_°ªam0_i§
 = 
blockög_h™dÀr


72 #¥agm®
wók
 
dma2_°ªam1_i§
 = 
blockög_h™dÀr


73 #¥agm®
wók
 
dma2_°ªam2_i§
 = 
blockög_h™dÀr


74 #¥agm®
wók
 
dma2_°ªam3_i§
 = 
blockög_h™dÀr


75 #¥agm®
wók
 
dma2_°ªam4_i§
 = 
blockög_h™dÀr


76 #¥agm®
wók
 
ëh_i§
 = 
blockög_h™dÀr


77 #¥agm®
wók
 
ëh_wkup_i§
 = 
blockög_h™dÀr


78 #¥agm®
wók
 
ˇn2_tx_i§
 = 
blockög_h™dÀr


79 #¥agm®
wók
 
ˇn2_rx0_i§
 = 
blockög_h™dÀr


80 #¥agm®
wók
 
ˇn2_rx1_i§
 = 
blockög_h™dÀr


81 #¥agm®
wók
 
ˇn2_s˚_i§
 = 
blockög_h™dÀr


82 #¥agm®
wók
 
Ÿg_fs_i§
 = 
blockög_h™dÀr


83 #¥agm®
wók
 
dma2_°ªam5_i§
 = 
blockög_h™dÀr


84 #¥agm®
wók
 
dma2_°ªam6_i§
 = 
blockög_h™dÀr


85 #¥agm®
wók
 
dma2_°ªam7_i§
 = 
blockög_h™dÀr


86 #¥agm®
wók
 
ußπ6_i§
 = 
blockög_h™dÀr


87 #¥agm®
wók
 
i2c3_ev_i§
 = 
blockög_h™dÀr


88 #¥agm®
wók
 
i2c3_î_i§
 = 
blockög_h™dÀr


89 #¥agm®
wók
 
Ÿg_hs_ï1_out_i§
 = 
blockög_h™dÀr


90 #¥agm®
wók
 
Ÿg_hs_ï1_ö_i§
 = 
blockög_h™dÀr


91 #¥agm®
wók
 
Ÿg_hs_wkup_i§
 = 
blockög_h™dÀr


92 #¥agm®
wók
 
Ÿg_hs_i§
 = 
blockög_h™dÀr


93 #¥agm®
wók
 
dcmi_i§
 = 
blockög_h™dÀr


94 #¥agm®
wók
 
¸yp_i§
 = 
blockög_h™dÀr


95 #¥agm®
wók
 
hash_∫g_i§
 = 
blockög_h™dÀr


104 
	#IRQ_HANDLERS
 \

105 [
NVIC_NVIC_WWDG_IRQ
] = 
nvic_wwdg_i§
, \

106 [
NVIC_PVD_IRQ
] = 
pvd_i§
, \

107 [
NVIC_TAMP_STAMP_IRQ
] = 
èmp_°amp_i§
, \

108 [
NVIC_RTC_WKUP_IRQ
] = 
πc_wkup_i§
, \

109 [
NVIC_FLASH_IRQ
] = 
Êash_i§
, \

110 [
NVIC_RCC_IRQ
] = 
rcc_i§
, \

111 [
NVIC_EXTI0_IRQ
] = 
exti0_i§
, \

112 [
NVIC_EXTI1_IRQ
] = 
exti1_i§
, \

113 [
NVIC_EXTI2_IRQ
] = 
exti2_i§
, \

114 [
NVIC_EXTI3_IRQ
] = 
exti3_i§
, \

115 [
NVIC_EXTI4_IRQ
] = 
exti4_i§
, \

116 [
NVIC_DMA1_STREAM0_IRQ
] = 
dma1_°ªam0_i§
, \

117 [
NVIC_DMA1_STREAM1_IRQ
] = 
dma1_°ªam1_i§
, \

118 [
NVIC_DMA1_STREAM2_IRQ
] = 
dma1_°ªam2_i§
, \

119 [
NVIC_DMA1_STREAM3_IRQ
] = 
dma1_°ªam3_i§
, \

120 [
NVIC_DMA1_STREAM4_IRQ
] = 
dma1_°ªam4_i§
, \

121 [
NVIC_DMA1_STREAM5_IRQ
] = 
dma1_°ªam5_i§
, \

122 [
NVIC_DMA1_STREAM6_IRQ
] = 
dma1_°ªam6_i§
, \

123 [
NVIC_ADC_IRQ
] = 
adc_i§
, \

124 [
NVIC_CAN1_TX_IRQ
] = 
ˇn1_tx_i§
, \

125 [
NVIC_CAN1_RX0_IRQ
] = 
ˇn1_rx0_i§
, \

126 [
NVIC_CAN1_RX1_IRQ
] = 
ˇn1_rx1_i§
, \

127 [
NVIC_CAN1_SCE_IRQ
] = 
ˇn1_s˚_i§
, \

128 [
NVIC_EXTI9_5_IRQ
] = 
exti9_5_i§
, \

129 [
NVIC_TIM1_BRK_TIM9_IRQ
] = 
tim1_brk_tim9_i§
, \

130 [
NVIC_TIM1_UP_TIM10_IRQ
] = 
tim1_up_tim10_i§
, \

131 [
NVIC_TIM1_TRG_COM_TIM11_IRQ
] = 
tim1_åg_com_tim11_i§
, \

132 [
NVIC_TIM1_CC_IRQ
] = 
tim1_cc_i§
, \

133 [
NVIC_TIM2_IRQ
] = 
tim2_i§
, \

134 [
NVIC_TIM3_IRQ
] = 
tim3_i§
, \

135 [
NVIC_TIM4_IRQ
] = 
tim4_i§
, \

136 [
NVIC_I2C1_EV_IRQ
] = 
i2c1_ev_i§
, \

137 [
NVIC_I2C1_ER_IRQ
] = 
i2c1_î_i§
, \

138 [
NVIC_I2C2_EV_IRQ
] = 
i2c2_ev_i§
, \

139 [
NVIC_I2C2_ER_IRQ
] = 
i2c2_î_i§
, \

140 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

141 [
NVIC_SPI2_IRQ
] = 
•i2_i§
, \

142 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

143 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

144 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

145 [
NVIC_EXTI15_10_IRQ
] = 
exti15_10_i§
, \

146 [
NVIC_RTC_ALARM_IRQ
] = 
πc_Æ¨m_i§
, \

147 [
NVIC_USB_FS_WKUP_IRQ
] = 
usb_fs_wkup_i§
, \

148 [
NVIC_TIM8_BRK_TIM12_IRQ
] = 
tim8_brk_tim12_i§
, \

149 [
NVIC_TIM8_UP_TIM13_IRQ
] = 
tim8_up_tim13_i§
, \

150 [
NVIC_TIM8_TRG_COM_TIM14_IRQ
] = 
tim8_åg_com_tim14_i§
, \

151 [
NVIC_TIM8_CC_IRQ
] = 
tim8_cc_i§
, \

152 [
NVIC_DMA1_STREAM7_IRQ
] = 
dma1_°ªam7_i§
, \

153 [
NVIC_FSMC_IRQ
] = 
fsmc_i§
, \

154 [
NVIC_SDIO_IRQ
] = 
sdio_i§
, \

155 [
NVIC_TIM5_IRQ
] = 
tim5_i§
, \

156 [
NVIC_SPI3_IRQ
] = 
•i3_i§
, \

157 [
NVIC_UART4_IRQ
] = 
u¨t4_i§
, \

158 [
NVIC_UART5_IRQ
] = 
u¨t5_i§
, \

159 [
NVIC_TIM6_DAC_IRQ
] = 
tim6_dac_i§
, \

160 [
NVIC_TIM7_IRQ
] = 
tim7_i§
, \

161 [
NVIC_DMA2_STREAM0_IRQ
] = 
dma2_°ªam0_i§
, \

162 [
NVIC_DMA2_STREAM1_IRQ
] = 
dma2_°ªam1_i§
, \

163 [
NVIC_DMA2_STREAM2_IRQ
] = 
dma2_°ªam2_i§
, \

164 [
NVIC_DMA2_STREAM3_IRQ
] = 
dma2_°ªam3_i§
, \

165 [
NVIC_DMA2_STREAM4_IRQ
] = 
dma2_°ªam4_i§
, \

166 [
NVIC_ETH_IRQ
] = 
ëh_i§
, \

167 [
NVIC_ETH_WKUP_IRQ
] = 
ëh_wkup_i§
, \

168 [
NVIC_CAN2_TX_IRQ
] = 
ˇn2_tx_i§
, \

169 [
NVIC_CAN2_RX0_IRQ
] = 
ˇn2_rx0_i§
, \

170 [
NVIC_CAN2_RX1_IRQ
] = 
ˇn2_rx1_i§
, \

171 [
NVIC_CAN2_SCE_IRQ
] = 
ˇn2_s˚_i§
, \

172 [
NVIC_OTG_FS_IRQ
] = 
Ÿg_fs_i§
, \

173 [
NVIC_DMA2_STREAM5_IRQ
] = 
dma2_°ªam5_i§
, \

174 [
NVIC_DMA2_STREAM6_IRQ
] = 
dma2_°ªam6_i§
, \

175 [
NVIC_DMA2_STREAM7_IRQ
] = 
dma2_°ªam7_i§
, \

176 [
NVIC_USART6_IRQ
] = 
ußπ6_i§
, \

177 [
NVIC_I2C3_EV_IRQ
] = 
i2c3_ev_i§
, \

178 [
NVIC_I2C3_ER_IRQ
] = 
i2c3_î_i§
, \

179 [
NVIC_OTG_HS_EP1_OUT_IRQ
] = 
Ÿg_hs_ï1_out_i§
, \

180 [
NVIC_OTG_HS_EP1_IN_IRQ
] = 
Ÿg_hs_ï1_ö_i§
, \

181 [
NVIC_OTG_HS_WKUP_IRQ
] = 
Ÿg_hs_wkup_i§
, \

182 [
NVIC_OTG_HS_IRQ
] = 
Ÿg_hs_i§
, \

183 [
NVIC_DCMI_IRQ
] = 
dcmi_i§
, \

184 [
NVIC_CRYP_IRQ
] = 
¸yp_i§
, \

185 [
NVIC_HASH_RNG_IRQ
] = 
hash_∫g_i§


	)

	@libopencm3/lib/stm32/f3/adc.c

84 
	~<lib›ícm3/°m32/adc.h
>

99 
	$adc_íabÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
)

101 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_AWD1EN
;

102 
	}
}

114 
	$adc_dißbÀ_™Æog_w©chdog_ªguœr
(
uöt32_t
 
adc
)

116 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_AWD1EN
;

117 
	}
}

130 
	$adc_íabÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
)

132 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_JAWD1EN
;

133 
	}
}

142 
	$adc_dißbÀ_™Æog_w©chdog_öje˘ed
(
uöt32_t
 
adc
)

144 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_JAWD1EN
;

145 
	}
}

163 
	$adc_íabÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
)

165 i‡((
Àngth
-1) > 7) {

168 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_DISCEN
;

169 
	`ADC_CFGR1
(
adc
Ë|((
Àngth
-1Ë<< 
ADC_CFGR1_DISCNUM_SHIFT
);

170 
	}
}

179 
	$adc_dißbÀ_disc⁄töuous_mode_ªguœr
(
uöt32_t
 
adc
)

181 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_DISCEN
;

182 
	}
}

195 
	$adc_íabÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
)

197 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_JDISCEN
;

198 
	}
}

207 
	$adc_dißbÀ_disc⁄töuous_mode_öje˘ed
(
uöt32_t
 
adc
)

209 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_JDISCEN
;

210 
	}
}

223 
	$adc_íabÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
)

225 
	`adc_dißbÀ_exã∫Æ_åiggî_öje˘ed
(
adc
);

226 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_JAUTO
;

227 
	}
}

236 
	$adc_dißbÀ_autom©ic_öje˘ed_group_c⁄vîsi⁄
(
uöt32_t
 
adc
)

238 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_JAUTO
;

239 
	}
}

258 
	$adc_íabÀ_™Æog_w©chdog_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
)

260 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_AWD1SGL
;

261 
	}
}

282 
	$adc_íabÀ_™Æog_w©chdog_⁄_£À˘ed_ch™√l
(
uöt32_t
 
adc
,

283 
uöt8_t
 
ch™√l
)

285 
uöt32_t
 
ªg32
;

287 
ªg32
 = (
	`ADC_CFGR1
(
adc
Ë& ~
ADC_CFGR1_AWD1CH
);

288 i‡(
ch™√l
 < 18) {

289 
ªg32
 |
ch™√l
;

291 
	`ADC_CFGR1
(
adc
Ë
ªg32
;

292 
	`ADC_CFGR1
(
adc
Ë|
ADC_CFGR1_AWD1SGL
;

293 
	}
}

303 
	$adc_íabÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
)

305 
	`ADC_IER
(
adc
Ë|
ADC_IER_JEOCIE
;

306 
	}
}

315 
	$adc_dißbÀ_eoc_öãºu±_öje˘ed
(
uöt32_t
 
adc
)

317 
	`ADC_IER
(
adc
Ë&~
ADC_IER_JEOCIE
;

318 
	}
}

327 
	$adc_íabÀ_eos_öãºu±_öje˘ed
(
uöt32_t
 
adc
)

329 
	`ADC_IER
(
adc
Ë|
ADC_IER_JEOSIE
;

330 
	}
}

339 
	$adc_dißbÀ_eos_öãºu±_öje˘ed
(
uöt32_t
 
adc
)

341 
	`ADC_IER
(
adc
Ë&~
ADC_IER_JEOSIE
;

342 
	}
}

352 
	$adc_íabÀ_Æl_awd_öãºu±
(
uöt32_t
 
adc
)

354 
	`ADC_IER
(
adc
Ë|
ADC_IER_AWD1IE
;

355 
	`ADC_IER
(
adc
Ë|
ADC_IER_AWD2IE
;

356 
	`ADC_IER
(
adc
Ë|
ADC_IER_AWD3IE
;

357 
	}
}

366 
	$adc_dißbÀ_Æl_awd_öãºu±
(
uöt32_t
 
adc
)

368 
	`ADC_IER
(
adc
Ë&~
ADC_IER_AWD1IE
;

369 
	`ADC_IER
(
adc
Ë&~
ADC_IER_AWD2IE
;

370 
	`ADC_IER
(
adc
Ë&~
ADC_IER_AWD3IE
;

371 
	}
}

380 
	$adc_íabÀ_eos_öãºu±
(
uöt32_t
 
adc
)

382 
	`ADC_IER
(
adc
Ë|
ADC_IER_EOSIE
;

383 
	}
}

392 
	$adc_dißbÀ_eos_öãºu±
(
uöt32_t
 
adc
)

394 
	`ADC_IER
(
adc
Ë&~
ADC_IER_EOSIE
;

395 
	}
}

410 
	$adc_°¨t_c⁄vîsi⁄_öje˘ed
(
uöt32_t
 
adc
)

413 
	`ADC_CR
(
adc
Ë|
ADC_CR_JADSTART
;

414 
	}
}

425 
	$adc_£t_w©chdog_high_thªshﬁd
(
uöt32_t
 
adc
, 
uöt8_t
 
thªshﬁd
)

427 
uöt32_t
 
ªg32
 = 0;

429 
ªg32
 |(
thªshﬁd
 << 16);

430 
ªg32
 &= ~0xff00ffff;

431 
	`ADC_TR1
(
adc
Ë
ªg32
;

432 
	`ADC_TR2
(
adc
Ë
ªg32
;

433 
	`ADC_TR3
(
adc
Ë
ªg32
;

434 
	}
}

444 
	$adc_£t_w©chdog_low_thªshﬁd
(
uöt32_t
 
adc
, 
uöt8_t
 
thªshﬁd
)

446 
uöt32_t
 
ªg32
 = 0;

448 
ªg32
 = (
uöt32_t
)
thªshﬁd
;

449 
ªg32
 &= ~0xffffff00;

450 
	`ADC_TR1
(
adc
Ë
ªg32
;

451 
	`ADC_TR2
(
adc
Ë
ªg32
;

452 
	`ADC_TR3
(
adc
Ë
ªg32
;

453 
	}
}

470 
	$adc_£t_öje˘ed_£quí˚
(
uöt32_t
 
adc
, 
uöt8_t
 
Àngth
, uöt8_à
ch™√l
[])

472 
uöt32_t
 
ªg32
 = 0;

473 
uöt8_t
 
i
 = 0;

476 i‡((
Àngth
 - 1) > 3) {

480 
i
 = 0; i < 
Àngth
; i++) {

481 
ªg32
 |
	`ADC_JSQR_JSQ_VAL
(4 - 
i
, 
ch™√l
[
Àngth
 - i - 1]);

484 
ªg32
 |
	`ADC_JSQR_JL_VAL
(
Àngth
);

486 
	`ADC_JSQR
(
adc
Ë
ªg32
;

487 
	}
}

500 
boﬁ
 
	$adc_eoc_öje˘ed
(
uöt32_t
 
adc
)

502  
	`ADC_ISR
(
adc
Ë& 
ADC_ISR_JEOC
;

503 
	}
}

515 
boﬁ
 
	$adc_eos_öje˘ed
(
uöt32_t
 
adc
)

517  
	`ADC_ISR
(
adc
Ë& 
ADC_ISR_JEOS
;

518 
	}
}

535 
uöt32_t
 
	$adc_ªad_öje˘ed
(
uöt32_t
 
adc
, 
uöt8_t
 
ªg
)

537 
ªg
) {

539  
	`ADC_JDR1
(
adc
);

541  
	`ADC_JDR2
(
adc
);

543  
	`ADC_JDR3
(
adc
);

545  
	`ADC_JDR4
(
adc
);

548 
	}
}

563 
	$adc_£t_öje˘ed_off£t
(
uöt32_t
 
adc
, 
uöt8_t
 
ªg
, uöt32_à
off£t
)

565 
ªg
) {

567 
	`ADC_OFR1
(
adc
Ë|
ADC_OFR1_OFFSET1_EN
;

568 
	`ADC_OFR1
(
adc
Ë|
off£t
;

571 
	`ADC_OFR2
(
adc
Ë|
ADC_OFR2_OFFSET2_EN
;

572 
	`ADC_OFR2
(
adc
Ë|
off£t
;

575 
	`ADC_OFR3
(
adc
Ë|
ADC_OFR3_OFFSET3_EN
;

576 
	`ADC_OFR3
(
adc
Ë|
off£t
;

579 
	`ADC_OFR4
(
adc
Ë|
ADC_OFR4_OFFSET4_EN
;

580 
	`ADC_OFR4
(
adc
Ë|
off£t
;

583 
	}
}

594 
	$adc_£t_˛k_¥esˇÀ
(
uöt32_t
 
adc
, uöt32_à
¥esˇÀ
)

596 
uöt32_t
 
ªg32
 = ((
	`ADC_CCR
(
adc
Ë& ~
ADC_CCR_CKMODE_MASK
Ë| 
¥esˇÀ
);

597 
	`ADC_CCR
(
adc
Ë
ªg32
;

598 
	}
}

612 
	$adc_£t_mu…i_mode
(
uöt32_t
 
adc
, uöt32_à
mode
)

614 
	`ADC_CCR
(
adc
Ë|
mode
;

615 
	}
}

632 
	$adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

633 
uöt32_t
 
pﬁ¨ôy
)

635 
uöt32_t
 
ªg32
 = 
	`ADC_CFGR1
(
adc
);

637 
ªg32
 &~(
ADC_CFGR1_EXTSEL_MASK
 | 
ADC_CFGR1_EXTEN_MASK
);

638 
ªg32
 |(
åiggî
 | 
pﬁ¨ôy
);

639 
	`ADC_CFGR1
(
adc
Ë
ªg32
;

640 
	}
}

649 
	$adc_dißbÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
)

651 
	`ADC_CFGR1
(
adc
Ë&~
ADC_CFGR1_EXTEN_MASK
;

652 
	}
}

668 
	$adc_íabÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

669 
uöt32_t
 
pﬁ¨ôy
)

671 
uöt32_t
 
ªg32
 = 
	`ADC_JSQR
(
adc
);

673 
ªg32
 &~(
ADC_JSQR_JEXTSEL_MASK
 | 
ADC_JSQR_JEXTEN_MASK
);

674 
ªg32
 |(
åiggî
 | 
pﬁ¨ôy
);

675 
	`ADC_JSQR
(
adc
Ë
ªg32
;

676 
	}
}

685 
	$adc_dißbÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
)

687 
	`ADC_JSQR
(
adc
Ë&~
ADC_JSQR_JEXTEN_MASK
;

688 
	}
}

702 
boﬁ
 
	$adc_awd
(
uöt32_t
 
adc
)

704  (
	`ADC_ISR
(
adc
Ë& 
ADC_ISR_AWD1
) &&

705 (
	`ADC_ISR
(
adc
Ë& 
ADC_ISR_AWD2
) &&

706 (
	`ADC_ISR
(
adc
Ë& 
ADC_ISR_AWD3
);

707 
	}
}

717 
	$adc_íabÀ_ªguœt‹
(
uöt32_t
 
adc
)

719 
	`ADC_CR
(
adc
Ë&~
ADC_CR_ADVREGEN_MASK
;

720 
	`ADC_CR
(
adc
Ë|
ADC_CR_ADVREGEN_ENABLE
;

721 
	}
}

729 
	$adc_dißbÀ_ªguœt‹
(
uöt32_t
 
adc
)

731 
	`ADC_CR
(
adc
Ë&~
ADC_CR_ADVREGEN_MASK
;

732 
	`ADC_CR
(
adc
Ë|
ADC_CR_ADVREGEN_DISABLE
;

733 
	}
}

	@libopencm3/lib/stm32/f3/dac.c

31 
	~<lib›ícm3/°m32/dac.h
>

	@libopencm3/lib/stm32/f3/dma.c

31 
	~<lib›ícm3/°m32/dma.h
>

	@libopencm3/lib/stm32/f3/flash.c

47 
	~<lib›ícm3/°m32/Êash.h
>

55 
	$Êash_˛ór_°©us_Êags
()

57 
	`Êash_˛ór_pg≥º_Êag
();

58 
	`Êash_˛ór_e›_Êag
();

59 
	`Êash_˛ór_bsy_Êag
();

60 
	}
}

67 
	$Êash_¥e„tch_íabÀ
()

69 
FLASH_ACR
 |
FLASH_ACR_PRFTBE
;

70 
	}
}

77 
	$Êash_¥e„tch_dißbÀ
()

79 
FLASH_ACR
 &~
FLASH_ACR_PRFTBE
;

80 
	}
}

	@libopencm3/lib/stm32/f3/i2c.c

31 
	~<lib›ícm3/°m32/i2c.h
>

	@libopencm3/lib/stm32/f3/pwr.c

38 
	~<lib›ícm3/°m32/pwr.h
>

	@libopencm3/lib/stm32/f3/rcc.c

37 
	~<lib›ícm3/cm3/as£π.h
>

38 
	~<lib›ícm3/°m32/rcc.h
>

39 
	~<lib›ícm3/°m32/Êash.h
>

40 
	~<lib›ícm3/°m32/i2c.h
>

43 
uöt32_t
 
	grcc_ahb_‰equícy
 = 8000000;

44 
uöt32_t
 
	grcc_≠b1_‰equícy
 = 8000000;

45 
uöt32_t
 
	grcc_≠b2_‰equícy
 = 8000000;

47 c⁄° 
rcc_˛ock_sˇÀ
 
	grcc_hsi_c⁄figs
[] = {

49 .
∂lmul
 = 
RCC_CFGR_PLLMUL_MUL12
,

50 .
	g∂l§c
 = 
RCC_CFGR_PLLSRC_HSI_DIV2
,

51 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

52 .
	gµª1
 = 
RCC_CFGR_PPRE1_DIV_2
,

53 .
	gµª2
 = 
RCC_CFGR_PPRE2_DIV_NONE
,

54 .
	gÊash_waô°©es
 = 1,

55 .
	gahb_‰equícy
 = 48000000,

56 .
	g≠b1_‰equícy
 = 24000000,

57 .
	g≠b2_‰equícy
 = 48000000,

60 .
	g∂lmul
 = 
RCC_CFGR_PLLMUL_MUL16
,

61 .
	g∂l§c
 = 
RCC_CFGR_PLLSRC_HSI_DIV2
,

62 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

63 .
	gµª1
 = 
RCC_CFGR_PPRE1_DIV_2
,

64 .
	gµª2
 = 
RCC_CFGR_PPRE2_DIV_NONE
,

65 .
	gÊash_waô°©es
 = 2,

66 .
	gahb_‰equícy
 = 64000000,

67 .
	g≠b1_‰equícy
 = 32000000,

68 .
	g≠b2_‰equícy
 = 64000000,

72 c⁄° 
rcc_˛ock_sˇÀ
 
	grcc_h£8mhz_c⁄figs
[] = {

74 .
∂l§c
 = 
RCC_CFGR_PLLSRC_HSE_PREDIV
,

75 .
	g∂lmul
 = 
RCC_CFGR_PLLMUL_MUL9
,

76 .
	g∂ldiv
 = 
RCC_CFGR2_PREDIV_NODIV
,

77 .
	gusbdiv1
 = 
Ál£
,

78 .
	gÊash_waô°©es
 = 2,

79 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

80 .
	gµª1
 = 
RCC_CFGR_PPRE1_DIV_2
,

81 .
	gµª2
 = 
RCC_CFGR_PPRE2_DIV_NONE
,

82 .
	gahb_‰equícy
 = 72e6,

83 .
	g≠b1_‰equícy
 = 32e6,

84 .
	g≠b2_‰equícy
 = 72e6,

88 
	$rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
)

90 
osc
) {

91 
RCC_PLL
:

92 
RCC_CIR
 |
RCC_CIR_PLLRDYC
;

94 
RCC_HSE
:

95 
RCC_CIR
 |
RCC_CIR_HSERDYC
;

97 
RCC_HSI
:

98 
RCC_CIR
 |
RCC_CIR_HSIRDYC
;

100 
RCC_LSE
:

101 
RCC_CIR
 |
RCC_CIR_LSERDYC
;

103 
RCC_LSI
:

104 
RCC_CIR
 |
RCC_CIR_LSIRDYC
;

107 
	}
}

109 
	$rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
)

111 
osc
) {

112 
RCC_PLL
:

113 
RCC_CIR
 |
RCC_CIR_PLLRDYIE
;

115 
RCC_HSE
:

116 
RCC_CIR
 |
RCC_CIR_HSERDYIE
;

118 
RCC_HSI
:

119 
RCC_CIR
 |
RCC_CIR_HSIRDYIE
;

121 
RCC_LSE
:

122 
RCC_CIR
 |
RCC_CIR_LSERDYIE
;

124 
RCC_LSI
:

125 
RCC_CIR
 |
RCC_CIR_LSIRDYIE
;

128 
	}
}

130 
	$rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
)

132 
osc
) {

133 
RCC_PLL
:

134 
RCC_CIR
 &~
RCC_CIR_PLLRDYIE
;

136 
RCC_HSE
:

137 
RCC_CIR
 &~
RCC_CIR_HSERDYIE
;

139 
RCC_HSI
:

140 
RCC_CIR
 &~
RCC_CIR_HSIRDYIE
;

142 
RCC_LSE
:

143 
RCC_CIR
 &~
RCC_CIR_LSERDYIE
;

145 
RCC_LSI
:

146 
RCC_CIR
 &~
RCC_CIR_LSIRDYIE
;

149 
	}
}

151 
	$rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
)

153 
osc
) {

154 
RCC_PLL
:

155  ((
RCC_CIR
 & 
RCC_CIR_PLLRDYF
) != 0);

157 
RCC_HSE
:

158  ((
RCC_CIR
 & 
RCC_CIR_HSERDYF
) != 0);

160 
RCC_HSI
:

161  ((
RCC_CIR
 & 
RCC_CIR_HSIRDYF
) != 0);

163 
RCC_LSE
:

164  ((
RCC_CIR
 & 
RCC_CIR_LSERDYF
) != 0);

166 
RCC_LSI
:

167  ((
RCC_CIR
 & 
RCC_CIR_LSIRDYF
) != 0);

171 
	`cm3_as£π_nŸ_ªached
();

172 
	}
}

174 
	$rcc_css_öt_˛ór
()

176 
RCC_CIR
 |
RCC_CIR_CSSC
;

177 
	}
}

179 
	$rcc_css_öt_Êag
()

181  ((
RCC_CIR
 & 
RCC_CIR_CSSF
) != 0);

182 
	}
}

184 
boﬁ
 
	$rcc_is_osc_ªady
(
rcc_osc
 
osc
)

186 
osc
) {

187 
RCC_PLL
:

188  
RCC_CR
 & 
RCC_CR_PLLRDY
;

189 
RCC_HSE
:

190  
RCC_CR
 & 
RCC_CR_HSERDY
;

191 
RCC_HSI
:

192  
RCC_CR
 & 
RCC_CR_HSIRDY
;

193 
RCC_LSE
:

194  
RCC_BDCR
 & 
RCC_BDCR_LSERDY
;

195 
RCC_LSI
:

196  
RCC_CSR
 & 
RCC_CSR_LSIRDY
;

198  
Ál£
;

199 
	}
}

201 
	$rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
)

203 !
	`rcc_is_osc_ªady
(
osc
));

204 
	}
}

207 
	$rcc_waô_f‹_osc_nŸ_ªady
(
rcc_osc
 
osc
)

209 
	`rcc_is_osc_ªady
(
osc
));

210 
	}
}

212 
	$rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
)

214 
osc
) {

215 
RCC_PLL
:

216 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

217 
RCC_CFGR_SWS_PLL
);

219 
RCC_HSE
:

220 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

221 
RCC_CFGR_SWS_HSE
);

223 
RCC_HSI
:

224 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

225 
RCC_CFGR_SWS_HSI
);

231 
	}
}

233 
	$rcc_osc_⁄
(
rcc_osc
 
osc
)

235 
osc
) {

236 
RCC_PLL
:

237 
RCC_CR
 |
RCC_CR_PLLON
;

239 
RCC_HSE
:

240 
RCC_CR
 |
RCC_CR_HSEON
;

242 
RCC_HSI
:

243 
RCC_CR
 |
RCC_CR_HSION
;

245 
RCC_LSE
:

246 
RCC_BDCR
 |
RCC_BDCR_LSEON
;

248 
RCC_LSI
:

249 
RCC_CSR
 |
RCC_CSR_LSION
;

252 
	}
}

254 
	$rcc_osc_off
(
rcc_osc
 
osc
)

256 
osc
) {

257 
RCC_PLL
:

258 
RCC_CR
 &~
RCC_CR_PLLON
;

260 
RCC_HSE
:

261 
RCC_CR
 &~
RCC_CR_HSEON
;

263 
RCC_HSI
:

264 
RCC_CR
 &~
RCC_CR_HSION
;

266 
RCC_LSE
:

267 
RCC_BDCR
 &~
RCC_BDCR_LSEON
;

269 
RCC_LSI
:

270 
RCC_CSR
 &~
RCC_CSR_LSION
;

273 
	}
}

275 
	$rcc_css_íabÀ
()

277 
RCC_CR
 |
RCC_CR_CSSON
;

278 
	}
}

280 
	$rcc_css_dißbÀ
()

282 
RCC_CR
 &~
RCC_CR_CSSON
;

283 
	}
}

285 
	$rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
)

287 
uöt32_t
 
ªg32
;

289 
ªg32
 = 
RCC_CFGR
;

290 
ªg32
 &= ~((1 << 1) | (1 << 0));

291 
RCC_CFGR
 = (
ªg32
 | 
˛k
);

292 
	}
}

294 
	$rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
)

296 
uöt32_t
 
ªg32
;

298 
ªg32
 = 
RCC_CFGR
;

299 
ªg32
 &~
RCC_CFGR_PLLSRC
;

300 
RCC_CFGR
 = (
ªg32
 | (
∂l§c
 << 16));

301 
	}
}

303 
	$rcc_£t_µª2
(
uöt32_t
 
µª2
)

305 
uöt32_t
 
ªg32
;

307 
ªg32
 = 
RCC_CFGR
;

308 
ªg32
 &~(
RCC_CFGR_PPRE2_MASK
 << 
RCC_CFGR_PPRE2_SHIFT
);

309 
RCC_CFGR
 = (
ªg32
 | (
µª2
 << 
RCC_CFGR_PPRE2_SHIFT
));

310 
	}
}

312 
	$rcc_£t_µª1
(
uöt32_t
 
µª1
)

314 
uöt32_t
 
ªg32
;

316 
ªg32
 = 
RCC_CFGR
;

317 
ªg32
 &~(
RCC_CFGR_PPRE1_MASK
 << 
RCC_CFGR_PPRE1_SHIFT
);

318 
RCC_CFGR
 = (
ªg32
 | (
µª1
 << 
RCC_CFGR_PPRE1_SHIFT
));

319 
	}
}

321 
	$rcc_£t_h¥e
(
uöt32_t
 
h¥e
)

323 
uöt32_t
 
ªg32
;

325 
ªg32
 = 
RCC_CFGR
;

326 
ªg32
 &~(
RCC_CFGR_HPRE_MASK
 << 
RCC_CFGR_HPRE_SHIFT
);

327 
RCC_CFGR
 = (
ªg32
 | (
h¥e
 << 
RCC_CFGR_HPRE_SHIFT
));

328 
	}
}

336 
	$rcc_£t_¥ediv
(
uöt32_t
 
¥ediv
)

338 
RCC_CFGR2
 = (RCC_CFGR2 & ~
RCC_CFGR2_PREDIV
Ë| 
¥ediv
;

339 
	}
}

341 
	$rcc_£t_∂l_mu…ùlõr
(
uöt32_t
 
∂l
)

343 
uöt32_t
 
ªg32
;

345 
ªg32
 = 
RCC_CFGR
;

346 
ªg32
 &~(
RCC_CFGR_PLLMUL_MASK
 << 
RCC_CFGR_PLLMUL_SHIFT
);

347 
RCC_CFGR
 = (
ªg32
 | (
∂l
 << 
RCC_CFGR_PLLMUL_SHIFT
));

348 
	}
}

351 
uöt32_t
 
	$rcc_gë_sy°em_˛ock_sour˚
()

354  (
RCC_CFGR
 & 0x000c) >> 2;

355 
	}
}

363 
	$rcc_˛ock_£tup_∂l
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
)

365 i‡(
˛ock
->
∂l§c
 =
RCC_CFGR_PLLSRC_HSE_PREDIV
) {

366 
	`rcc_osc_⁄
(
RCC_HSE
);

367 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

369 
	`rcc_osc_⁄
(
RCC_HSI
);

370 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

372 
	`rcc_osc_off
(
RCC_PLL
);

373 
	`rcc_usb_¥esˇÀ_1_5
();

374 i‡(
˛ock
->
usbdiv1
) {

375 
	`rcc_usb_¥esˇÀ_1
();

377 
	`rcc_waô_f‹_osc_nŸ_ªady
(
RCC_PLL
);

378 
	`rcc_£t_∂l_sour˚
(
˛ock
->
∂l§c
);

379 
	`rcc_£t_∂l_mu…ùlõr
(
˛ock
->
∂lmul
);

380 
	`rcc_£t_¥ediv
(
˛ock
->
∂ldiv
);

382 
	`rcc_osc_⁄
(
RCC_PLL
);

383 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

386 
	`Êash_¥e„tch_íabÀ
();

387 
	`Êash_£t_ws
(
˛ock
->
Êash_waô°©es
);

389 
	`rcc_£t_h¥e
(
˛ock
->
h¥e
);

390 
	`rcc_£t_µª2
(
˛ock
->
µª2
);

391 
	`rcc_£t_µª1
(
˛ock
->
µª1
);

393 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_PLL
);

395 
	`rcc_waô_f‹_sys˛k_°©us
(
RCC_PLL
);

398 
rcc_ahb_‰equícy
 = 
˛ock
->
ahb_‰equícy
;

399 
rcc_≠b1_‰equícy
 = 
˛ock
->
≠b1_‰equícy
;

400 
rcc_≠b2_‰equícy
 = 
˛ock
->
≠b2_‰equícy
;

401 
	}
}

404 
__©åibuã__
((
dïªˇãd
)Ë
	$rcc_˛ock_£tup_hsi
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
)

407 
	`rcc_osc_⁄
(
RCC_HSI
);

408 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

410 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_HSI
);

411 
	`rcc_waô_f‹_sys˛k_°©us
(
RCC_HSI
);

413 
	`rcc_osc_off
(
RCC_PLL
);

414 
	`rcc_waô_f‹_osc_nŸ_ªady
(
RCC_PLL
);

415 
	`rcc_£t_∂l_sour˚
(
˛ock
->
∂l§c
);

416 
	`rcc_£t_∂l_mu…ùlõr
(
˛ock
->
∂lmul
);

418 
	`rcc_osc_⁄
(
RCC_PLL
);

419 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

424 
	`rcc_£t_h¥e
(
˛ock
->
h¥e
);

425 
	`rcc_£t_µª2
(
˛ock
->
µª2
);

426 
	`rcc_£t_µª1
(
˛ock
->
µª1
);

428 
	`Êash_£t_ws
(
˛ock
->
Êash_waô°©es
);

430 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_PLL
);

432 
	`rcc_waô_f‹_sys˛k_°©us
(
RCC_PLL
);

435 
rcc_ahb_‰equícy
 = 
˛ock
->
ahb_‰equícy
;

436 
rcc_≠b1_‰equícy
 = 
˛ock
->
≠b1_‰equícy
;

437 
rcc_≠b2_‰equícy
 = 
˛ock
->
≠b2_‰equícy
;

438 
	}
}

441 
	$rcc_backupdomaö_ª£t
()

444 
RCC_BDCR
 |
RCC_BDCR_BDRST
;

447 
RCC_BDCR
 &~
RCC_BDCR_BDRST
;

448 
	}
}

450 
	$rcc_£t_i2c_˛ock_hsi
(
uöt32_t
 
i2c
)

452 i‡(
i2c
 =
I2C1
) {

453 
RCC_CFGR3
 &~
RCC_CFGR3_I2C1SW
;

455 i‡(
i2c
 =
I2C2
) {

456 
RCC_CFGR3
 &~
RCC_CFGR3_I2C2SW
;

458 
	}
}

460 
	$rcc_£t_i2c_˛ock_sys˛k
(
uöt32_t
 
i2c
)

462 i‡(
i2c
 =
I2C1
) {

463 
RCC_CFGR3
 |
RCC_CFGR3_I2C1SW
;

465 i‡(
i2c
 =
I2C2
) {

466 
RCC_CFGR3
 |
RCC_CFGR3_I2C2SW
;

468 
	}
}

470 
uöt32_t
 
	$rcc_gë_i2c_˛ocks
()

472  
RCC_CFGR3
 & (
RCC_CFGR3_I2C1SW
 | 
RCC_CFGR3_I2C2SW
);

473 
	}
}

475 
	$rcc_usb_¥esˇÀ_1_5
()

477 
RCC_CFGR
 &~
RCC_CFGR_USBPRES
;

478 
	}
}

480 
	$rcc_usb_¥esˇÀ_1
()

482 
RCC_CFGR
 |
RCC_CFGR_USBPRES
;

483 
	}
}

485 
	$rcc_adc_¥esˇÀ
(
uöt32_t
 
¥esˇÀ1
, uöt32_à
¥esˇÀ2
)

487 
uöt32_t
 
˛ór_mask
 = (
RCC_CFGR2_ADCxPRES_MASK


488 << 
RCC_CFGR2_ADC12PRES_SHIFT
)

489 | (
RCC_CFGR2_ADCxPRES_MASK


490 << 
RCC_CFGR2_ADC34PRES_SHIFT
);

491 
uöt32_t
 
£t
 = (
¥esˇÀ1
 << 
RCC_CFGR2_ADC12PRES_SHIFT
) |

492 (
¥esˇÀ2
 << 
RCC_CFGR2_ADC34PRES_SHIFT
);

493 
RCC_CFGR2
 &~(
˛ór_mask
);

494 
RCC_CFGR2
 |(
£t
);

495 
	}
}

	@libopencm3/lib/stm32/f3/rtc.c

36 
	~<lib›ícm3/°m32/πc.h
>

	@libopencm3/lib/stm32/f3/spi.c

31 
	~<lib›ícm3/°m32/•i.h
>

	@libopencm3/lib/stm32/f3/timer.c

31 
	~<lib›ícm3/°m32/timî.h
>

	@libopencm3/lib/stm32/f3/vector_chipset.c

21 
	~<lib›ícm3/cm3/scb.h
>

23 
	$¥e_maö
()

26 
SCB_CPACR
 |
SCB_CPACR_FULL
 * (
SCB_CPACR_CP10
 | 
SCB_CPACR_CP11
);

27 
	}
}

	@libopencm3/lib/stm32/f3/vector_nvic.c

15 #¥agm®
wók
 
nvic_wwdg_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pvd_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
èmp_°amp_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πc_wkup_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
Êash_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
rcc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
exti0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
exti1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
exti2_tsc_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
exti3_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
exti4_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
dma1_ch™√l1_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
dma1_ch™√l2_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
dma1_ch™√l3_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
dma1_ch™√l4_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
dma1_ch™√l5_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
dma1_ch™√l6_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
dma1_ch™√l7_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
adc1_2_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
usb_hp_ˇn1_tx_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
usb_Õ_ˇn1_rx0_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
ˇn1_rx1_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
ˇn1_s˚_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
exti9_5_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
tim1_brk_tim15_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
tim1_up_tim16_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
tim1_åg_com_tim17_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tim1_cc_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tim2_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
tim3_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
tim4_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
i2c1_ev_exti23_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
i2c1_î_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
i2c2_ev_exti24_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
i2c2_î_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
•i2_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ußπ1_exti25_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
ußπ2_exti26_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
ußπ3_exti28_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
exti15_10_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
πc_Æ¨m_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
usb_wkup_a_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
tim8_brk_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
tim8_up_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
tim8_åg_com_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
tim8_cc_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
adc3_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
ª£rved_1_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
ª£rved_2_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
ª£rved_3_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
•i3_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
u¨t4_exti34_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
u¨t5_exti35_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
tim6_dac_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
tim7_i§
 = 
blockög_h™dÀr


71 #¥agm®
wók
 
dma2_ch™√l1_i§
 = 
blockög_h™dÀr


72 #¥agm®
wók
 
dma2_ch™√l2_i§
 = 
blockög_h™dÀr


73 #¥agm®
wók
 
dma2_ch™√l3_i§
 = 
blockög_h™dÀr


74 #¥agm®
wók
 
dma2_ch™√l4_i§
 = 
blockög_h™dÀr


75 #¥agm®
wók
 
dma2_ch™√l5_i§
 = 
blockög_h™dÀr


76 #¥agm®
wók
 
ëh_i§
 = 
blockög_h™dÀr


77 #¥agm®
wók
 
ª£rved_4_i§
 = 
blockög_h™dÀr


78 #¥agm®
wók
 
ª£rved_5_i§
 = 
blockög_h™dÀr


79 #¥agm®
wók
 
comp123_i§
 = 
blockög_h™dÀr


80 #¥agm®
wók
 
comp456_i§
 = 
blockög_h™dÀr


81 #¥agm®
wók
 
comp7_i§
 = 
blockög_h™dÀr


82 #¥agm®
wók
 
hπim_ma°î_i§
 = 
blockög_h™dÀr


83 #¥agm®
wók
 
hπim_tima_i§
 = 
blockög_h™dÀr


84 #¥agm®
wók
 
hπim_timb_i§
 = 
blockög_h™dÀr


85 #¥agm®
wók
 
hπim_timc_i§
 = 
blockög_h™dÀr


86 #¥agm®
wók
 
hπim_timd_i§
 = 
blockög_h™dÀr


87 #¥agm®
wók
 
hπim_time_i§
 = 
blockög_h™dÀr


88 #¥agm®
wók
 
hπim_Êt_i§
 = 
blockög_h™dÀr


89 #¥agm®
wók
 
usb_hp_i§
 = 
blockög_h™dÀr


90 #¥agm®
wók
 
usb_Õ_i§
 = 
blockög_h™dÀr


91 #¥agm®
wók
 
usb_wkup_i§
 = 
blockög_h™dÀr


92 #¥agm®
wók
 
ª£rved_13_i§
 = 
blockög_h™dÀr


93 #¥agm®
wók
 
ª£rved_14_i§
 = 
blockög_h™dÀr


94 #¥agm®
wók
 
ª£rved_15_i§
 = 
blockög_h™dÀr


95 #¥agm®
wók
 
ª£rved_16_i§
 = 
blockög_h™dÀr


104 
	#IRQ_HANDLERS
 \

105 [
NVIC_NVIC_WWDG_IRQ
] = 
nvic_wwdg_i§
, \

106 [
NVIC_PVD_IRQ
] = 
pvd_i§
, \

107 [
NVIC_TAMP_STAMP_IRQ
] = 
èmp_°amp_i§
, \

108 [
NVIC_RTC_WKUP_IRQ
] = 
πc_wkup_i§
, \

109 [
NVIC_FLASH_IRQ
] = 
Êash_i§
, \

110 [
NVIC_RCC_IRQ
] = 
rcc_i§
, \

111 [
NVIC_EXTI0_IRQ
] = 
exti0_i§
, \

112 [
NVIC_EXTI1_IRQ
] = 
exti1_i§
, \

113 [
NVIC_EXTI2_TSC_IRQ
] = 
exti2_tsc_i§
, \

114 [
NVIC_EXTI3_IRQ
] = 
exti3_i§
, \

115 [
NVIC_EXTI4_IRQ
] = 
exti4_i§
, \

116 [
NVIC_DMA1_CHANNEL1_IRQ
] = 
dma1_ch™√l1_i§
, \

117 [
NVIC_DMA1_CHANNEL2_IRQ
] = 
dma1_ch™√l2_i§
, \

118 [
NVIC_DMA1_CHANNEL3_IRQ
] = 
dma1_ch™√l3_i§
, \

119 [
NVIC_DMA1_CHANNEL4_IRQ
] = 
dma1_ch™√l4_i§
, \

120 [
NVIC_DMA1_CHANNEL5_IRQ
] = 
dma1_ch™√l5_i§
, \

121 [
NVIC_DMA1_CHANNEL6_IRQ
] = 
dma1_ch™√l6_i§
, \

122 [
NVIC_DMA1_CHANNEL7_IRQ
] = 
dma1_ch™√l7_i§
, \

123 [
NVIC_ADC1_2_IRQ
] = 
adc1_2_i§
, \

124 [
NVIC_USB_HP_CAN1_TX_IRQ
] = 
usb_hp_ˇn1_tx_i§
, \

125 [
NVIC_USB_LP_CAN1_RX0_IRQ
] = 
usb_Õ_ˇn1_rx0_i§
, \

126 [
NVIC_CAN1_RX1_IRQ
] = 
ˇn1_rx1_i§
, \

127 [
NVIC_CAN1_SCE_IRQ
] = 
ˇn1_s˚_i§
, \

128 [
NVIC_EXTI9_5_IRQ
] = 
exti9_5_i§
, \

129 [
NVIC_TIM1_BRK_TIM15_IRQ
] = 
tim1_brk_tim15_i§
, \

130 [
NVIC_TIM1_UP_TIM16_IRQ
] = 
tim1_up_tim16_i§
, \

131 [
NVIC_TIM1_TRG_COM_TIM17_IRQ
] = 
tim1_åg_com_tim17_i§
, \

132 [
NVIC_TIM1_CC_IRQ
] = 
tim1_cc_i§
, \

133 [
NVIC_TIM2_IRQ
] = 
tim2_i§
, \

134 [
NVIC_TIM3_IRQ
] = 
tim3_i§
, \

135 [
NVIC_TIM4_IRQ
] = 
tim4_i§
, \

136 [
NVIC_I2C1_EV_EXTI23_IRQ
] = 
i2c1_ev_exti23_i§
, \

137 [
NVIC_I2C1_ER_IRQ
] = 
i2c1_î_i§
, \

138 [
NVIC_I2C2_EV_EXTI24_IRQ
] = 
i2c2_ev_exti24_i§
, \

139 [
NVIC_I2C2_ER_IRQ
] = 
i2c2_î_i§
, \

140 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

141 [
NVIC_SPI2_IRQ
] = 
•i2_i§
, \

142 [
NVIC_USART1_EXTI25_IRQ
] = 
ußπ1_exti25_i§
, \

143 [
NVIC_USART2_EXTI26_IRQ
] = 
ußπ2_exti26_i§
, \

144 [
NVIC_USART3_EXTI28_IRQ
] = 
ußπ3_exti28_i§
, \

145 [
NVIC_EXTI15_10_IRQ
] = 
exti15_10_i§
, \

146 [
NVIC_RTC_ALARM_IRQ
] = 
πc_Æ¨m_i§
, \

147 [
NVIC_USB_WKUP_A_IRQ
] = 
usb_wkup_a_i§
, \

148 [
NVIC_TIM8_BRK_IRQ
] = 
tim8_brk_i§
, \

149 [
NVIC_TIM8_UP_IRQ
] = 
tim8_up_i§
, \

150 [
NVIC_TIM8_TRG_COM_IRQ
] = 
tim8_åg_com_i§
, \

151 [
NVIC_TIM8_CC_IRQ
] = 
tim8_cc_i§
, \

152 [
NVIC_ADC3_IRQ
] = 
adc3_i§
, \

153 [
NVIC_RESERVED_1_IRQ
] = 
ª£rved_1_i§
, \

154 [
NVIC_RESERVED_2_IRQ
] = 
ª£rved_2_i§
, \

155 [
NVIC_RESERVED_3_IRQ
] = 
ª£rved_3_i§
, \

156 [
NVIC_SPI3_IRQ
] = 
•i3_i§
, \

157 [
NVIC_UART4_EXTI34_IRQ
] = 
u¨t4_exti34_i§
, \

158 [
NVIC_UART5_EXTI35_IRQ
] = 
u¨t5_exti35_i§
, \

159 [
NVIC_TIM6_DAC_IRQ
] = 
tim6_dac_i§
, \

160 [
NVIC_TIM7_IRQ
] = 
tim7_i§
, \

161 [
NVIC_DMA2_CHANNEL1_IRQ
] = 
dma2_ch™√l1_i§
, \

162 [
NVIC_DMA2_CHANNEL2_IRQ
] = 
dma2_ch™√l2_i§
, \

163 [
NVIC_DMA2_CHANNEL3_IRQ
] = 
dma2_ch™√l3_i§
, \

164 [
NVIC_DMA2_CHANNEL4_IRQ
] = 
dma2_ch™√l4_i§
, \

165 [
NVIC_DMA2_CHANNEL5_IRQ
] = 
dma2_ch™√l5_i§
, \

166 [
NVIC_ETH_IRQ
] = 
ëh_i§
, \

167 [
NVIC_RESERVED_4_IRQ
] = 
ª£rved_4_i§
, \

168 [
NVIC_RESERVED_5_IRQ
] = 
ª£rved_5_i§
, \

169 [
NVIC_COMP123_IRQ
] = 
comp123_i§
, \

170 [
NVIC_COMP456_IRQ
] = 
comp456_i§
, \

171 [
NVIC_COMP7_IRQ
] = 
comp7_i§
, \

172 [
NVIC_HRTIM_MASTER_IRQ
] = 
hπim_ma°î_i§
, \

173 [
NVIC_HRTIM_TIMA_IRQ
] = 
hπim_tima_i§
, \

174 [
NVIC_HRTIM_TIMB_IRQ
] = 
hπim_timb_i§
, \

175 [
NVIC_HRTIM_TIMC_IRQ
] = 
hπim_timc_i§
, \

176 [
NVIC_HRTIM_TIMD_IRQ
] = 
hπim_timd_i§
, \

177 [
NVIC_HRTIM_TIME_IRQ
] = 
hπim_time_i§
, \

178 [
NVIC_HRTIM_FLT_IRQ
] = 
hπim_Êt_i§
, \

179 [
NVIC_USB_HP_IRQ
] = 
usb_hp_i§
, \

180 [
NVIC_USB_LP_IRQ
] = 
usb_Õ_i§
, \

181 [
NVIC_USB_WKUP_IRQ
] = 
usb_wkup_i§
, \

182 [
NVIC_RESERVED_13_IRQ
] = 
ª£rved_13_i§
, \

183 [
NVIC_RESERVED_14_IRQ
] = 
ª£rved_14_i§
, \

184 [
NVIC_RESERVED_15_IRQ
] = 
ª£rved_15_i§
, \

185 [
NVIC_RESERVED_16_IRQ
] = 
ª£rved_16_i§


	)

	@libopencm3/lib/stm32/f4/adc.c

82 
	~<lib›ícm3/°m32/adc.h
>

98 
	$adc_£t_ßm∂e_time
(
uöt32_t
 
adc
, 
uöt8_t
 
ch™√l
, uöt8_à
time
)

100 
uöt32_t
 
ªg32
;

102 i‡(
ch™√l
 < 10) {

103 
ªg32
 = 
	`ADC_SMPR2
(
adc
);

104 
ªg32
 &~(0x7 << (
ch™√l
 * 3));

105 
ªg32
 |(
time
 << (
ch™√l
 * 3));

106 
	`ADC_SMPR2
(
adc
Ë
ªg32
;

108 
ªg32
 = 
	`ADC_SMPR1
(
adc
);

109 
ªg32
 &~(0x7 << ((
ch™√l
 - 10) * 3));

110 
ªg32
 |(
time
 << ((
ch™√l
 - 10) * 3));

111 
	`ADC_SMPR1
(
adc
Ë
ªg32
;

113 
	}
}

126 
	$adc_£t_ßm∂e_time_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
, 
uöt8_t
 
time
)

128 
uöt8_t
 
i
;

129 
uöt32_t
 
ªg32
 = 0;

131 
i
 = 0; i <= 9; i++) {

132 
ªg32
 |(
time
 << (
i
 * 3));

134 
	`ADC_SMPR2
(
adc
Ë
ªg32
;

136 
i
 = 10; i <= 17; i++) {

137 
ªg32
 |(
time
 << ((
i
 - 10) * 3));

139 
	`ADC_SMPR1
(
adc
Ë
ªg32
;

140 
	}
}

153 
	$adc_powî_⁄
(
uöt32_t
 
adc
)

155 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_ADON
;

156 
	}
}

167 
	$adc_£t_˛k_¥esˇÀ
(
uöt32_t
 
¥esˇÀ
)

169 
uöt32_t
 
ªg32
 = ((
ADC_CCR
 & ~
ADC_CCR_ADCPRE_MASK
Ë| 
¥esˇÀ
);

170 
ADC_CCR
 = 
ªg32
;

171 
	}
}

184 
	$adc_£t_mu…i_mode
(
uöt32_t
 
mode
)

186 
ADC_CCR
 |
mode
;

187 
	}
}

202 
	$adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

203 
uöt32_t
 
pﬁ¨ôy
)

205 
uöt32_t
 
ªg32
 = 
	`ADC_CR2
(
adc
);

207 
ªg32
 &~(
ADC_CR2_EXTSEL_MASK
 | 
ADC_CR2_EXTEN_MASK
);

208 
ªg32
 |(
åiggî
 | 
pﬁ¨ôy
);

209 
	`ADC_CR2
(
adc
Ë
ªg32
;

210 
	}
}

218 
	$adc_dißbÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
)

220 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_EXTEN_MASK
;

221 
	}
}

235 
	$adc_íabÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

236 
uöt32_t
 
pﬁ¨ôy
)

238 
uöt32_t
 
ªg32
 = 
	`ADC_CR2
(
adc
);

240 
ªg32
 &~(
ADC_CR2_JEXTSEL_MASK
 | 
ADC_CR2_JEXTEN_MASK
);

241 
ªg32
 |(
åiggî
 | 
pﬁ¨ôy
);

242 
	`ADC_CR2
(
adc
Ë
ªg32
;

243 
	}
}

251 
	$adc_dißbÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
)

253 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_JEXTEN_MASK
;

254 
	}
}

266 
	$adc_£t_ªsﬁuti⁄
(
uöt32_t
 
adc
, uöt32_à
ªsﬁuti⁄
)

268 
uöt32_t
 
ªg32
 = 
	`ADC_CR1
(
adc
);

270 
ªg32
 &~
ADC_CR1_RES_MASK
;

271 
ªg32
 |
ªsﬁuti⁄
;

272 
	`ADC_CR1
(
adc
Ë
ªg32
;

273 
	}
}

285 
	$adc_íabÀ_ovîrun_öãºu±
(
uöt32_t
 
adc
)

287 
	`ADC_CR1
(
adc
Ë|
ADC_CR1_OVRIE
;

288 
	}
}

296 
	$adc_dißbÀ_ovîrun_öãºu±
(
uöt32_t
 
adc
)

298 
	`ADC_CR1
(
adc
Ë&~
ADC_CR1_OVRIE
;

299 
	}
}

312 
boﬁ
 
	$adc_gë_ovîrun_Êag
(
uöt32_t
 
adc
)

314  
	`ADC_SR
(
adc
Ë& 
ADC_SR_OVR
;

315 
	}
}

328 
	$adc_˛ór_ovîrun_Êag
(
uöt32_t
 
adc
)

331 
	`ADC_SR
(
adc
Ë&~
ADC_SR_OVR
;

332 
	}
}

343 
	$adc_eoc_a·î_óch
(
uöt32_t
 
adc
)

345 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_EOCS
;

346 
	}
}

357 
	$adc_eoc_a·î_group
(
uöt32_t
 
adc
)

359 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_EOCS
;

360 
	}
}

371 
	$adc_£t_dma_c⁄töue
(
uöt32_t
 
adc
)

373 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_DDS
;

374 
	}
}

385 
	$adc_£t_dma_ãrmö©e
(
uöt32_t
 
adc
)

387 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_DDS
;

388 
	}
}

398 
boﬁ
 
	$adc_awd
(
uöt32_t
 
adc
)

400  
	`ADC_SR
(
adc
Ë& 
ADC_SR_AWD
;

401 
	}
}

412 
	$adc_íabÀ_ãm≥øtuª_£ns‹
()

414 
ADC_CCR
 |
ADC_CCR_TSVREFE
;

415 
	}
}

424 
	$adc_dißbÀ_ãm≥øtuª_£ns‹
()

426 
ADC_CCR
 &~
ADC_CCR_TSVREFE
;

427 
	}
}

	@libopencm3/lib/stm32/f4/crypto.c

31 
	~<lib›ícm3/°m32/¸y±o.h
>

39 
	$¸y±o_£t_mac_Æg‹ôhm
(
¸y±o_mode_mac
 
mode
)

41 
	`¸y±o_£t_Æg‹ôhm
((
¸y±o_mode
Ë
mode
);

42 
	}
}

49 
	$¸y±o_c⁄ãxt_sw≠
(
uöt32_t
 *
buf
)

51 
i
;

53 
i
 = 0; i < 8; i++) {

54 
uöt32_t
 
ßve
 = *
buf
;

55 *
buf
++ = 
	`CRYP_CSGCMCCMR
(
i
);

56 
	`CRYP_CSGCMCCMR
(
i
Ë
ßve
;

59 
i
 = 0; i < 8; i++) {

60 
uöt32_t
 
ßve
 = *
buf
;

61 *
buf
++ = 
	`CRYP_CSGCMR
(
i
);

62 
	`CRYP_CSGCMCCMR
(
i
Ë
ßve
;

64 
	}
}

	@libopencm3/lib/stm32/f4/dac.c

31 
	~<lib›ícm3/°m32/dac.h
>

	@libopencm3/lib/stm32/f4/dma.c

31 
	~<lib›ícm3/°m32/dma.h
>

	@libopencm3/lib/stm32/f4/flash.c

50 
	~<lib›ícm3/°m32/Êash.h
>

	@libopencm3/lib/stm32/f4/fmc.c

21 
	~<°döt.h
>

22 
	~<lib›ícm3/°m32/fsmc.h
>

32 
uöt32_t


33 
	$sdøm_timög
(
sdøm_timög
 *
t
) {

34 
uöt32_t
 
ªsu…
;

36 
ªsu…
 = 0;

37 
ªsu…
 |((
t
->
åcd
 - 1Ë& 0xfË<< 
FMC_SDTR_TRCD_SHIFT
;

38 
ªsu…
 |((
t
->
åp
 - 1Ë& 0xfË<< 
FMC_SDTR_TRP_SHIFT
;

39 
ªsu…
 |((
t
->
twr
 - 1Ë& 0xfË<< 
FMC_SDTR_TWR_SHIFT
;

40 
ªsu…
 |((
t
->
åc
 - 1Ë& 0xfË<< 
FMC_SDTR_TRC_SHIFT
;

41 
ªsu…
 |((
t
->
åas
 - 1Ë& 0xfË<< 
FMC_SDTR_TRAS_SHIFT
;

42 
ªsu…
 |((
t
->
tx§
 - 1Ë& 0xfË<< 
FMC_SDTR_TXSR_SHIFT
;

43 
ªsu…
 |((
t
->
tmrd
 - 1Ë& 0xfË<< 
FMC_SDTR_TMRD_SHIFT
;

44  
ªsu…
;

45 
	}
}

53 
	$sdøm_comm™d
(
fmc_sdøm_b™k
 
b™k
,

54 
fmc_sdøm_comm™d
 
cmd
, 
aut‹e‰esh
, 
modîeg
) {

55 
uöt32_t
 
tmp_ªg
 = 0;

57 
b™k
) {

58 
SDRAM_BANK1
:

59 
tmp_ªg
 = 
FMC_SDCMR_CTB1
;

61 
SDRAM_BANK2
:

62 
tmp_ªg
 = 
FMC_SDCMR_CTB2
;

64 
SDRAM_BOTH_BANKS
:

65 
tmp_ªg
 = 
FMC_SDCMR_CTB1
 | 
FMC_SDCMR_CTB2
;

68 
tmp_ªg
 |
aut‹e‰esh
 << 
FMC_SDCMR_NRFS_SHIFT
;

69 
tmp_ªg
 |
modîeg
 << 
FMC_SDCMR_MRD_SHIFT
;

70 
cmd
) {

71 
SDRAM_CLK_CONF
:

72 
tmp_ªg
 |
FMC_SDCMR_MODE_CLOCK_CONFIG_ENA
;

74 
SDRAM_AUTO_REFRESH
:

75 
tmp_ªg
 |
FMC_SDCMR_MODE_AUTO_REFRESH
;

77 
SDRAM_LOAD_MODE
:

78 
tmp_ªg
 |
FMC_SDCMR_MODE_LOAD_MODE_REGISTER
;

80 
SDRAM_PALL
:

81 
tmp_ªg
 |
FMC_SDCMR_MODE_PALL
;

83 
SDRAM_SELF_REFRESH
:

84 
tmp_ªg
 |
FMC_SDCMR_MODE_SELF_REFRESH
;

86 
SDRAM_POWER_DOWN
:

87 
tmp_ªg
 |
FMC_SDCMR_MODE_POWER_DOWN
;

89 
SDRAM_NORMAL
:

95 
FMC_SDSR
 & 
FMC_SDSR_BUSY
);

98 
FMC_SDCMR
 = 
tmp_ªg
;

99 
	}
}

	@libopencm3/lib/stm32/f4/gpio.c

31 
	~<lib›ícm3/°m32/gpio.h
>

	@libopencm3/lib/stm32/f4/hash.c

31 
	~<lib›ícm3/°m32/hash.h
>

	@libopencm3/lib/stm32/f4/i2c.c

31 
	~<lib›ícm3/°m32/i2c.h
>

	@libopencm3/lib/stm32/f4/ltdc.c

43 
	~<lib›ícm3/°m32/f4/…dc.h
>

45 
	$…dc_£t_t·_sync_timögs
(
uöt16_t
 
sync_width
, uöt16_à
sync_height
,

46 
uöt16_t
 
h_back_p‹ch
, uöt16_à
v_back_p‹ch
,

47 
uöt16_t
 
a˘ive_width
, uöt16_à
a˘ive_height
,

48 
uöt16_t
 
h_‰⁄t_p‹ch
, uöt16_à
v_‰⁄t_p‹ch
)

52 
uöt16_t
 
w
, 
h
;

53 
w
 = 
sync_width
 - 1;

54 
h
 = 
sync_height
 - 1;

56 
LTDC_SSCR
 = (
w
 << 16Ë| (
h
 << 0);

58 
w
 +
h_back_p‹ch
;

59 
h
 +
v_back_p‹ch
;

61 
LTDC_BPCR
 = (
w
 << 16Ë| (
h
 << 0);

63 
w
 +
a˘ive_width
;

64 
h
 +
a˘ive_height
;

66 
LTDC_AWCR
 = (
w
 << 16Ë| (
h
 << 0);

68 
w
 +
h_‰⁄t_p‹ch
;

69 
h
 +
v_‰⁄t_p‹ch
;

71 
LTDC_TWCR
 = (
w
 << 16Ë| (
h
 << 0);

72 
	}
}

74 
	$…dc_£tup_wödowög
(
uöt8_t
 
œyî_numbî
,

75 
uöt16_t
 
h_back_p‹ch
, uöt16_à
v_back_p‹ch
,

76 
uöt16_t
 
a˘ive_width
, uöt16_à
a˘ive_height
)

78 
a˘ive_width
 +
h_back_p‹ch
 - 1;

79 
a˘ive_height
 +
v_back_p‹ch
 - 1;

84 
	`LTDC_LxWHPCR
(
œyî_numbî
Ë(
a˘ive_width
 << 16) |

85 (
h_back_p‹ch
 << 0);

86 
	`LTDC_LxWVPCR
(
œyî_numbî
Ë(
a˘ive_height
 << 16) |

87 (
v_back_p‹ch
 << 0);

88 
	}
}

	@libopencm3/lib/stm32/f4/pwr.c

37 
	~<lib›ícm3/°m32/pwr.h
>

39 
	$pwr_£t_vos_sˇÀ
(
pwr_vos_sˇÀ
 
sˇÀ
)

41 i‡(
sˇÀ
 =
PWR_SCALE1
) {

42 
PWR_CR
 |
PWR_CR_VOS
;

43 } i‡(
sˇÀ
 =
PWR_SCALE2
) {

44 
PWR_CR
 &
PWR_CR_VOS
;

46 
	}
}

	@libopencm3/lib/stm32/f4/rcc.c

40 
	~<lib›ícm3/cm3/as£π.h
>

41 
	~<lib›ícm3/°m32/rcc.h
>

42 
	~<lib›ícm3/°m32/pwr.h
>

43 
	~<lib›ícm3/°m32/Êash.h
>

48 
uöt32_t
 
	grcc_ahb_‰equícy
 = 16000000;

49 
uöt32_t
 
	grcc_≠b1_‰equícy
 = 16000000;

50 
uöt32_t
 
	grcc_≠b2_‰equícy
 = 16000000;

52 c⁄° 
rcc_˛ock_sˇÀ
 
	grcc_h£_8mhz_3v3
[
RCC_CLOCK_3V3_END
] = {

54 .
∂lm
 = 8,

55 .
	g∂ 
 = 96,

56 .
	g∂Õ
 = 2,

57 .
	g∂lq
 = 2,

58 .
	g∂Ã
 = 0,

59 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

60 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

61 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

62 .
	gpowî_ßve
 = 1,

63 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

64 
FLASH_ACR_LATENCY_3WS
,

65 .
	gahb_‰equícy
 = 48000000,

66 .
	g≠b1_‰equícy
 = 12000000,

67 .
	g≠b2_‰equícy
 = 24000000,

70 .
	g∂lm
 = 8,

71 .
	g∂ 
 = 336,

72 .
	g∂Õ
 = 4,

73 .
	g∂lq
 = 7,

74 .
	g∂Ã
 = 0,

75 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

76 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_2
,

77 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_NONE
,

78 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

79 
FLASH_ACR_LATENCY_2WS
,

80 .
	gahb_‰equícy
 = 84000000,

81 .
	g≠b1_‰equícy
 = 42000000,

82 .
	g≠b2_‰equícy
 = 84000000,

85 .
	g∂lm
 = 8,

86 .
	g∂ 
 = 240,

87 .
	g∂Õ
 = 2,

88 .
	g∂lq
 = 5,

89 .
	g∂Ã
 = 0,

90 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

91 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

92 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

93 .
	gpowî_ßve
 = 1,

94 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

95 
FLASH_ACR_LATENCY_3WS
,

96 .
	gahb_‰equícy
 = 120000000,

97 .
	g≠b1_‰equícy
 = 30000000,

98 .
	g≠b2_‰equícy
 = 60000000,

101 .
	g∂lm
 = 8,

102 .
	g∂ 
 = 336,

103 .
	g∂Õ
 = 2,

104 .
	g∂lq
 = 7,

105 .
	g∂Ã
 = 0,

106 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

107 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

108 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

109 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

110 
FLASH_ACR_LATENCY_5WS
,

111 .
	gahb_‰equícy
 = 168000000,

112 .
	g≠b1_‰equícy
 = 42000000,

113 .
	g≠b2_‰equícy
 = 84000000,

117 c⁄° 
rcc_˛ock_sˇÀ
 
	grcc_h£_12mhz_3v3
[
RCC_CLOCK_3V3_END
] = {

119 .
∂lm
 = 12,

120 .
	g∂ 
 = 96,

121 .
	g∂Õ
 = 2,

122 .
	g∂lq
 = 2,

123 .
	g∂Ã
 = 0,

124 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

125 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

126 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

127 .
	gpowî_ßve
 = 1,

128 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

129 
FLASH_ACR_LATENCY_3WS
,

130 .
	gahb_‰equícy
 = 48000000,

131 .
	g≠b1_‰equícy
 = 12000000,

132 .
	g≠b2_‰equícy
 = 24000000,

135 .
	g∂lm
 = 12,

136 .
	g∂ 
 = 336,

137 .
	g∂Õ
 = 4,

138 .
	g∂lq
 = 7,

139 .
	g∂Ã
 = 0,

140 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

141 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_2
,

142 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_NONE
,

143 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

144 
FLASH_ACR_LATENCY_2WS
,

145 .
	gahb_‰equícy
 = 84000000,

146 .
	g≠b1_‰equícy
 = 42000000,

147 .
	g≠b2_‰equícy
 = 84000000,

150 .
	g∂lm
 = 12,

151 .
	g∂ 
 = 240,

152 .
	g∂Õ
 = 2,

153 .
	g∂lq
 = 5,

154 .
	g∂Ã
 = 0,

155 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

156 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

157 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

158 .
	gpowî_ßve
 = 1,

159 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

160 
FLASH_ACR_LATENCY_3WS
,

161 .
	gahb_‰equícy
 = 120000000,

162 .
	g≠b1_‰equícy
 = 30000000,

163 .
	g≠b2_‰equícy
 = 60000000,

166 .
	g∂lm
 = 12,

167 .
	g∂ 
 = 336,

168 .
	g∂Õ
 = 2,

169 .
	g∂lq
 = 7,

170 .
	g∂Ã
 = 0,

171 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

172 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

173 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

174 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

175 
FLASH_ACR_LATENCY_5WS
,

176 .
	gahb_‰equícy
 = 168000000,

177 .
	g≠b1_‰equícy
 = 42000000,

178 .
	g≠b2_‰equícy
 = 84000000,

182 c⁄° 
rcc_˛ock_sˇÀ
 
	grcc_h£_16mhz_3v3
[
RCC_CLOCK_3V3_END
] = {

184 .
∂lm
 = 16,

185 .
	g∂ 
 = 96,

186 .
	g∂Õ
 = 2,

187 .
	g∂lq
 = 2,

188 .
	g∂Ã
 = 0,

189 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

190 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

191 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

192 .
	gpowî_ßve
 = 1,

193 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

194 
FLASH_ACR_LATENCY_3WS
,

195 .
	gahb_‰equícy
 = 48000000,

196 .
	g≠b1_‰equícy
 = 12000000,

197 .
	g≠b2_‰equícy
 = 24000000,

200 .
	g∂lm
 = 16,

201 .
	g∂ 
 = 336,

202 .
	g∂Õ
 = 4,

203 .
	g∂lq
 = 7,

204 .
	g∂Ã
 = 0,

205 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

206 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_2
,

207 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_NONE
,

208 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

209 
FLASH_ACR_LATENCY_2WS
,

210 .
	gahb_‰equícy
 = 84000000,

211 .
	g≠b1_‰equícy
 = 42000000,

212 .
	g≠b2_‰equícy
 = 84000000,

215 .
	g∂lm
 = 16,

216 .
	g∂ 
 = 240,

217 .
	g∂Õ
 = 2,

218 .
	g∂lq
 = 5,

219 .
	g∂Ã
 = 0,

220 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

221 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

222 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

223 .
	gpowî_ßve
 = 1,

224 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

225 
FLASH_ACR_LATENCY_3WS
,

226 .
	gahb_‰equícy
 = 120000000,

227 .
	g≠b1_‰equícy
 = 30000000,

228 .
	g≠b2_‰equícy
 = 60000000,

231 .
	g∂lm
 = 16,

232 .
	g∂ 
 = 336,

233 .
	g∂Õ
 = 2,

234 .
	g∂lq
 = 7,

235 .
	g∂Ã
 = 0,

236 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

237 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

238 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

239 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

240 
FLASH_ACR_LATENCY_5WS
,

241 .
	gahb_‰equícy
 = 168000000,

242 .
	g≠b1_‰equícy
 = 42000000,

243 .
	g≠b2_‰equícy
 = 84000000,

247 c⁄° 
rcc_˛ock_sˇÀ
 
	grcc_h£_25mhz_3v3
[
RCC_CLOCK_3V3_END
] = {

249 .
∂lm
 = 25,

250 .
	g∂ 
 = 96,

251 .
	g∂Õ
 = 2,

252 .
	g∂lq
 = 2,

253 .
	g∂Ã
 = 0,

254 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

255 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

256 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

257 .
	gpowî_ßve
 = 1,

258 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

259 
FLASH_ACR_LATENCY_3WS
,

260 .
	gahb_‰equícy
 = 48000000,

261 .
	g≠b1_‰equícy
 = 12000000,

262 .
	g≠b2_‰equícy
 = 24000000,

265 .
	g∂lm
 = 25,

266 .
	g∂ 
 = 336,

267 .
	g∂Õ
 = 4,

268 .
	g∂lq
 = 7,

269 .
	g∂Ã
 = 0,

270 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

271 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_2
,

272 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_NONE
,

273 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

274 
FLASH_ACR_LATENCY_2WS
,

275 .
	gahb_‰equícy
 = 84000000,

276 .
	g≠b1_‰equícy
 = 42000000,

277 .
	g≠b2_‰equícy
 = 84000000,

280 .
	g∂lm
 = 25,

281 .
	g∂ 
 = 240,

282 .
	g∂Õ
 = 2,

283 .
	g∂lq
 = 5,

284 .
	g∂Ã
 = 0,

285 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

286 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

287 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

288 .
	gpowî_ßve
 = 1,

289 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

290 
FLASH_ACR_LATENCY_3WS
,

291 .
	gahb_‰equícy
 = 120000000,

292 .
	g≠b1_‰equícy
 = 30000000,

293 .
	g≠b2_‰equícy
 = 60000000,

296 .
	g∂lm
 = 25,

297 .
	g∂ 
 = 336,

298 .
	g∂Õ
 = 2,

299 .
	g∂lq
 = 7,

300 .
	g∂Ã
 = 0,

301 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

302 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

303 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

304 .
	gÊash_c⁄fig
 = 
FLASH_ACR_DCEN
 | 
FLASH_ACR_ICEN
 |

305 
FLASH_ACR_LATENCY_5WS
,

306 .
	gahb_‰equícy
 = 168000000,

307 .
	g≠b1_‰equícy
 = 42000000,

308 .
	g≠b2_‰equícy
 = 84000000,

312 
	$rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
)

314 
osc
) {

315 
RCC_PLL
:

316 
RCC_CIR
 |
RCC_CIR_PLLRDYC
;

318 
RCC_HSE
:

319 
RCC_CIR
 |
RCC_CIR_HSERDYC
;

321 
RCC_HSI
:

322 
RCC_CIR
 |
RCC_CIR_HSIRDYC
;

324 
RCC_LSE
:

325 
RCC_CIR
 |
RCC_CIR_LSERDYC
;

327 
RCC_LSI
:

328 
RCC_CIR
 |
RCC_CIR_LSIRDYC
;

330 
RCC_PLLSAI
:

331 
RCC_CIR
 |
RCC_CIR_PLLSAIRDYC
;

333 
RCC_PLLI2S
:

334 
RCC_CIR
 |
RCC_CIR_PLLI2SRDYC
;

337 
	}
}

339 
	$rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
)

341 
osc
) {

342 
RCC_PLL
:

343 
RCC_CIR
 |
RCC_CIR_PLLRDYIE
;

345 
RCC_HSE
:

346 
RCC_CIR
 |
RCC_CIR_HSERDYIE
;

348 
RCC_HSI
:

349 
RCC_CIR
 |
RCC_CIR_HSIRDYIE
;

351 
RCC_LSE
:

352 
RCC_CIR
 |
RCC_CIR_LSERDYIE
;

354 
RCC_LSI
:

355 
RCC_CIR
 |
RCC_CIR_LSIRDYIE
;

357 
RCC_PLLSAI
:

358 
RCC_CIR
 |
RCC_CIR_PLLSAIRDYIE
;

360 
RCC_PLLI2S
:

361 
RCC_CIR
 |
RCC_CIR_PLLI2SRDYIE
;

364 
	}
}

366 
	$rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
)

368 
osc
) {

369 
RCC_PLL
:

370 
RCC_CIR
 &~
RCC_CIR_PLLRDYIE
;

372 
RCC_HSE
:

373 
RCC_CIR
 &~
RCC_CIR_HSERDYIE
;

375 
RCC_HSI
:

376 
RCC_CIR
 &~
RCC_CIR_HSIRDYIE
;

378 
RCC_LSE
:

379 
RCC_CIR
 &~
RCC_CIR_LSERDYIE
;

381 
RCC_LSI
:

382 
RCC_CIR
 &~
RCC_CIR_LSIRDYIE
;

384 
RCC_PLLSAI
:

385 
RCC_CIR
 &~
RCC_CIR_PLLSAIRDYIE
;

387 
RCC_PLLI2S
:

388 
RCC_CIR
 &~
RCC_CIR_PLLI2SRDYIE
;

391 
	}
}

393 
	$rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
)

395 
osc
) {

396 
RCC_PLL
:

397  ((
RCC_CIR
 & 
RCC_CIR_PLLRDYF
) != 0);

398 
RCC_HSE
:

399  ((
RCC_CIR
 & 
RCC_CIR_HSERDYF
) != 0);

400 
RCC_HSI
:

401  ((
RCC_CIR
 & 
RCC_CIR_HSIRDYF
) != 0);

402 
RCC_LSE
:

403  ((
RCC_CIR
 & 
RCC_CIR_LSERDYF
) != 0);

404 
RCC_LSI
:

405  ((
RCC_CIR
 & 
RCC_CIR_LSIRDYF
) != 0);

406 
RCC_PLLSAI
:

407  ((
RCC_CIR
 & 
RCC_CIR_PLLSAIRDYF
) != 0);

408 
RCC_PLLI2S
:

409  ((
RCC_CIR
 & 
RCC_CIR_PLLI2SRDYF
) != 0);

412 
	}
}

414 
	$rcc_css_öt_˛ór
()

416 
RCC_CIR
 |
RCC_CIR_CSSC
;

417 
	}
}

419 
	$rcc_css_öt_Êag
()

421  ((
RCC_CIR
 & 
RCC_CIR_CSSF
) != 0);

422 
	}
}

424 
boﬁ
 
	$rcc_is_osc_ªady
(
rcc_osc
 
osc
)

426 
osc
) {

427 
RCC_PLL
:

428  
RCC_CR
 & 
RCC_CR_PLLRDY
;

429 
RCC_HSE
:

430  
RCC_CR
 & 
RCC_CR_HSERDY
;

431 
RCC_HSI
:

432  
RCC_CR
 & 
RCC_CR_HSIRDY
;

433 
RCC_LSE
:

434  
RCC_BDCR
 & 
RCC_BDCR_LSERDY
;

435 
RCC_LSI
:

436  
RCC_CSR
 & 
RCC_CSR_LSIRDY
;

437 
RCC_PLLSAI
:

438  
RCC_CR
 & 
RCC_CR_PLLSAIRDY
;

439 
RCC_PLLI2S
:

440  
RCC_CR
 & 
RCC_CR_PLLI2SRDY
;

442  
Ál£
;

443 
	}
}

445 
	$rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
)

447 !
	`rcc_is_osc_ªady
(
osc
));

448 
	}
}

450 
	$rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
)

452 
osc
) {

453 
RCC_PLL
:

454 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

455 
RCC_CFGR_SWS_PLL
);

457 
RCC_HSE
:

458 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

459 
RCC_CFGR_SWS_HSE
);

461 
RCC_HSI
:

462 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

463 
RCC_CFGR_SWS_HSI
);

469 
	}
}

471 
	$rcc_osc_⁄
(
rcc_osc
 
osc
)

473 
osc
) {

474 
RCC_PLL
:

475 
RCC_CR
 |
RCC_CR_PLLON
;

477 
RCC_HSE
:

478 
RCC_CR
 |
RCC_CR_HSEON
;

480 
RCC_HSI
:

481 
RCC_CR
 |
RCC_CR_HSION
;

483 
RCC_LSE
:

484 
RCC_BDCR
 |
RCC_BDCR_LSEON
;

486 
RCC_LSI
:

487 
RCC_CSR
 |
RCC_CSR_LSION
;

489 
RCC_PLLSAI
:

490 
RCC_CR
 |
RCC_CR_PLLSAION
;

492 
RCC_PLLI2S
:

493 
RCC_CR
 |
RCC_CR_PLLI2SON
;

496 
	}
}

498 
	$rcc_osc_off
(
rcc_osc
 
osc
)

500 
osc
) {

501 
RCC_PLL
:

502 
RCC_CR
 &~
RCC_CR_PLLON
;

504 
RCC_HSE
:

505 
RCC_CR
 &~
RCC_CR_HSEON
;

507 
RCC_HSI
:

508 
RCC_CR
 &~
RCC_CR_HSION
;

510 
RCC_LSE
:

511 
RCC_BDCR
 &~
RCC_BDCR_LSEON
;

513 
RCC_LSI
:

514 
RCC_CSR
 &~
RCC_CSR_LSION
;

516 
RCC_PLLSAI
:

517 
RCC_CR
 &~
RCC_CR_PLLSAION
;

519 
RCC_PLLI2S
:

520 
RCC_CR
 &~
RCC_CR_PLLI2SON
;

523 
	}
}

525 
	$rcc_css_íabÀ
()

527 
RCC_CR
 |
RCC_CR_CSSON
;

528 
	}
}

530 
	$rcc_css_dißbÀ
()

532 
RCC_CR
 &~
RCC_CR_CSSON
;

533 
	}
}

544 
	$rcc_∂lßi_c⁄fig
(
uöt16_t
 
n
, uöt16_à
p
, uöt16_à
q
, uöt16_à
r
)

546 
RCC_PLLSAICFGR
 = (

547 ((
n
 & 
RCC_PLLSAICFGR_PLLSAIN_MASK
Ë<< 
RCC_PLLSAICFGR_PLLSAIN_SHIFT
) |

548 ((
p
 & 
RCC_PLLSAICFGR_PLLSAIP_MASK
Ë<< 
RCC_PLLSAICFGR_PLLSAIP_SHIFT
) |

549 ((
q
 & 
RCC_PLLSAICFGR_PLLSAIQ_MASK
Ë<< 
RCC_PLLSAICFGR_PLLSAIQ_SHIFT
) |

550 ((
r
 & 
RCC_PLLSAICFGR_PLLSAIR_MASK
Ë<< 
RCC_PLLSAICFGR_PLLSAIR_SHIFT
));

551 
	}
}

561 
	$rcc_∂lßi_po°sˇÀrs
(
uöt8_t
 
q
, uöt8_à
r
)

563 
uöt32_t
 
ªg32
 = 
RCC_DCKCFGR
;

564 
ªg32
 &((
RCC_DCKCFGR_PLLSAIDIVR_MASK
 << 
RCC_DCKCFGR_PLLSAIDIVR_SHIFT
)

565 | (
RCC_DCKCFGR_PLLSAIDIVQ_MASK
 << 
RCC_DCKCFGR_PLLSAIDIVQ_SHIFT
));

566 
RCC_DCKCFGR
 = 
ªg32
 | ((
q
 << 
RCC_DCKCFGR_PLLSAIDIVQ_SHIFT
) |

567 (
r
 << 
RCC_DCKCFGR_PLLSAIDIVR_SHIFT
));

568 
	}
}

571 
	$rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
)

573 
uöt32_t
 
ªg32
;

575 
ªg32
 = 
RCC_CFGR
;

576 
ªg32
 &= ~((1 << 1) | (1 << 0));

577 
RCC_CFGR
 = (
ªg32
 | 
˛k
);

578 
	}
}

580 
	$rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
)

582 
uöt32_t
 
ªg32
;

584 
ªg32
 = 
RCC_PLLCFGR
;

585 
ªg32
 &= ~(1 << 22);

586 
RCC_PLLCFGR
 = (
ªg32
 | (
∂l§c
 << 22));

587 
	}
}

589 
	$rcc_£t_µª2
(
uöt32_t
 
µª2
)

591 
uöt32_t
 
ªg32
;

593 
ªg32
 = 
RCC_CFGR
;

594 
ªg32
 &= ~((1 << 13) | (1 << 14) | (1 << 15));

595 
RCC_CFGR
 = (
ªg32
 | (
µª2
 << 13));

596 
	}
}

598 
	$rcc_£t_µª1
(
uöt32_t
 
µª1
)

600 
uöt32_t
 
ªg32
;

602 
ªg32
 = 
RCC_CFGR
;

603 
ªg32
 &= ~((1 << 10) | (1 << 11) | (1 << 12));

604 
RCC_CFGR
 = (
ªg32
 | (
µª1
 << 10));

605 
	}
}

607 
	$rcc_£t_h¥e
(
uöt32_t
 
h¥e
)

609 
uöt32_t
 
ªg32
;

611 
ªg32
 = 
RCC_CFGR
;

612 
ªg32
 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));

613 
RCC_CFGR
 = (
ªg32
 | (
h¥e
 << 4));

614 
	}
}

616 
	$rcc_£t_π˝ª
(
uöt32_t
 
π˝ª
)

618 
uöt32_t
 
ªg32
;

620 
ªg32
 = 
RCC_CFGR
;

621 
ªg32
 &= ~((1 << 16) | (1 << 17) | (1 << 18) | (1 << 19) | (1 << 20));

622 
RCC_CFGR
 = (
ªg32
 | (
π˝ª
 << 16));

623 
	}
}

634 
	$rcc_£t_maö_∂l_hsi
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

635 
uöt32_t
 
∂lq
, uöt32_à
∂Ã
)

638 i‡(
∂Ã
 < 2) {

639 
∂Ã
 = 2;

641 
RCC_PLLCFGR
 = 0 |

642 ((
∂lm
 & 
RCC_PLLCFGR_PLLM_MASK
Ë<< 
RCC_PLLCFGR_PLLM_SHIFT
) |

643 ((
∂ 
 & 
RCC_PLLCFGR_PLLN_MASK
Ë<< 
RCC_PLLCFGR_PLLN_SHIFT
) |

644 ((((
∂Õ
 >> 1Ë- 1Ë& 
RCC_PLLCFGR_PLLP_MASK
Ë<< 
RCC_PLLCFGR_PLLP_SHIFT
) |

645 ((
∂lq
 & 
RCC_PLLCFGR_PLLQ_MASK
Ë<< 
RCC_PLLCFGR_PLLQ_SHIFT
) |

646 ((
∂Ã
 & 
RCC_PLLCFGR_PLLR_MASK
Ë<< 
RCC_PLLCFGR_PLLR_SHIFT
);

647 
	}
}

658 
	$rcc_£t_maö_∂l_h£
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

659 
uöt32_t
 
∂lq
, uöt32_à
∂Ã
)

662 i‡(
∂Ã
 < 2) {

663 
∂Ã
 = 2;

665 
RCC_PLLCFGR
 = 
RCC_PLLCFGR_PLLSRC
 |

666 ((
∂lm
 & 
RCC_PLLCFGR_PLLM_MASK
Ë<< 
RCC_PLLCFGR_PLLM_SHIFT
) |

667 ((
∂ 
 & 
RCC_PLLCFGR_PLLN_MASK
Ë<< 
RCC_PLLCFGR_PLLN_SHIFT
) |

668 ((((
∂Õ
 >> 1Ë- 1Ë& 
RCC_PLLCFGR_PLLP_MASK
Ë<< 
RCC_PLLCFGR_PLLP_SHIFT
) |

669 ((
∂lq
 & 
RCC_PLLCFGR_PLLQ_MASK
Ë<< 
RCC_PLLCFGR_PLLQ_SHIFT
) |

670 ((
∂Ã
 & 
RCC_PLLCFGR_PLLR_MASK
Ë<< 
RCC_PLLCFGR_PLLR_SHIFT
);

671 
	}
}

673 
uöt32_t
 
	$rcc_sy°em_˛ock_sour˚
()

676  (
RCC_CFGR
 & 0x000c) >> 2;

677 
	}
}

679 
	$rcc_˛ock_£tup_h£_3v3
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
)

682 
	`rcc_osc_⁄
(
RCC_HSI
);

683 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

686 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_HSI
);

689 
	`rcc_osc_⁄
(
RCC_HSE
);

690 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

693 i‡(!
˛ock
->
powî_ßve
) {

694 
	`pwr_£t_vos_sˇÀ
(
PWR_SCALE1
);

696 
	`pwr_£t_vos_sˇÀ
(
PWR_SCALE2
);

703 
	`rcc_£t_h¥e
(
˛ock
->
h¥e
);

704 
	`rcc_£t_µª1
(
˛ock
->
µª1
);

705 
	`rcc_£t_µª2
(
˛ock
->
µª2
);

707 
	`rcc_£t_maö_∂l_h£
(
˛ock
->
∂lm
, clock->
∂ 
,

708 
˛ock
->
∂Õ
, clock->
∂lq
, clock->
∂Ã
);

711 
	`rcc_osc_⁄
(
RCC_PLL
);

712 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

715 
	`Êash_£t_ws
(
˛ock
->
Êash_c⁄fig
);

718 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_PLL
);

721 
	`rcc_waô_f‹_sys˛k_°©us
(
RCC_PLL
);

724 
rcc_ahb_‰equícy
 = 
˛ock
->
ahb_‰equícy
;

725 
rcc_≠b1_‰equícy
 = 
˛ock
->
≠b1_‰equícy
;

726 
rcc_≠b2_‰equícy
 = 
˛ock
->
≠b2_‰equícy
;

729 
	`rcc_osc_off
(
RCC_HSI
);

730 
	}
}

	@libopencm3/lib/stm32/f4/rng.c

31 
	~<lib›ícm3/°m32/∫g.h
>

	@libopencm3/lib/stm32/f4/rtc.c

31 
	~<lib›ícm3/°m32/exti.h
>

32 
	~<lib›ícm3/cm3/nvic.h
>

33 
	~<lib›ícm3/°m32/πc.h
>

41 
	$πc_íabÀ_wakeup_timî
()

43 
RTC_CR
 |
RTC_CR_WUTE
 | (
RTC_CR_OSEL_WAKEUP
 << 
RTC_CR_OSEL_SHIFT
);

44 
	`πc_íabÀ_wakeup_timî_öãºu±
();

45 
	}
}

52 
	$πc_dißbÀ_wakeup_timî
()

54 
RTC_CR
 &~
RTC_CR_WUTE
;

55 
	`πc_dißbÀ_wakeup_timî_öãºu±
();

56 
	}
}

63 
	$πc_íabÀ_wakeup_timî_öãºu±
()

71 
	`exti_íabÀ_ªque°
(
EXTI22
);

72 
	`exti_£t_åiggî
(
EXTI22
, 
EXTI_TRIGGER_RISING
);

75 
	`nvic_íabÀ_úq
(
NVIC_RTC_WKUP_IRQ
);

76 
	`nvic_£t_¥i‹ôy
(
NVIC_RTC_WKUP_IRQ
, 1);

79 
RTC_CR
 |
RTC_CR_WUTIE
;

80 
	}
}

87 
	$πc_dißbÀ_wakeup_timî_öãºu±
()

90 
	`exti_dißbÀ_ªque°
(
EXTI22
);

93 
	`nvic_dißbÀ_úq
(
NVIC_RTC_WKUP_IRQ
);

96 
RTC_CR
 &~
RTC_CR_WUTIE
;

97 
	}
}

	@libopencm3/lib/stm32/f4/spi.c

31 
	~<lib›ícm3/°m32/•i.h
>

	@libopencm3/lib/stm32/f4/timer.c

38 
	~<lib›ícm3/°m32/timî.h
>

	@libopencm3/lib/stm32/f4/vector_chipset.c

21 
	~<lib›ícm3/cm3/scb.h
>

23 
	$¥e_maö
()

26 
SCB_CPACR
 |
SCB_CPACR_FULL
 * (
SCB_CPACR_CP10
 | 
SCB_CPACR_CP11
);

27 
	}
}

	@libopencm3/lib/stm32/f4/vector_nvic.c

15 #¥agm®
wók
 
nvic_wwdg_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pvd_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
èmp_°amp_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πc_wkup_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
Êash_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
rcc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
exti0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
exti1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
exti2_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
exti3_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
exti4_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
dma1_°ªam0_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
dma1_°ªam1_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
dma1_°ªam2_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
dma1_°ªam3_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
dma1_°ªam4_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
dma1_°ªam5_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
dma1_°ªam6_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
adc_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ˇn1_tx_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
ˇn1_rx0_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
ˇn1_rx1_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
ˇn1_s˚_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
exti9_5_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
tim1_brk_tim9_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
tim1_up_tim10_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
tim1_åg_com_tim11_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tim1_cc_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tim2_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
tim3_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
tim4_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
i2c1_ev_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
i2c1_î_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
i2c2_ev_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
i2c2_î_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
•i2_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
exti15_10_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
πc_Æ¨m_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
usb_fs_wkup_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
tim8_brk_tim12_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
tim8_up_tim13_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
tim8_åg_com_tim14_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
tim8_cc_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
dma1_°ªam7_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
fsmc_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
sdio_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
tim5_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
•i3_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
u¨t4_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
u¨t5_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
tim6_dac_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
tim7_i§
 = 
blockög_h™dÀr


71 #¥agm®
wók
 
dma2_°ªam0_i§
 = 
blockög_h™dÀr


72 #¥agm®
wók
 
dma2_°ªam1_i§
 = 
blockög_h™dÀr


73 #¥agm®
wók
 
dma2_°ªam2_i§
 = 
blockög_h™dÀr


74 #¥agm®
wók
 
dma2_°ªam3_i§
 = 
blockög_h™dÀr


75 #¥agm®
wók
 
dma2_°ªam4_i§
 = 
blockög_h™dÀr


76 #¥agm®
wók
 
ëh_i§
 = 
blockög_h™dÀr


77 #¥agm®
wók
 
ëh_wkup_i§
 = 
blockög_h™dÀr


78 #¥agm®
wók
 
ˇn2_tx_i§
 = 
blockög_h™dÀr


79 #¥agm®
wók
 
ˇn2_rx0_i§
 = 
blockög_h™dÀr


80 #¥agm®
wók
 
ˇn2_rx1_i§
 = 
blockög_h™dÀr


81 #¥agm®
wók
 
ˇn2_s˚_i§
 = 
blockög_h™dÀr


82 #¥agm®
wók
 
Ÿg_fs_i§
 = 
blockög_h™dÀr


83 #¥agm®
wók
 
dma2_°ªam5_i§
 = 
blockög_h™dÀr


84 #¥agm®
wók
 
dma2_°ªam6_i§
 = 
blockög_h™dÀr


85 #¥agm®
wók
 
dma2_°ªam7_i§
 = 
blockög_h™dÀr


86 #¥agm®
wók
 
ußπ6_i§
 = 
blockög_h™dÀr


87 #¥agm®
wók
 
i2c3_ev_i§
 = 
blockög_h™dÀr


88 #¥agm®
wók
 
i2c3_î_i§
 = 
blockög_h™dÀr


89 #¥agm®
wók
 
Ÿg_hs_ï1_out_i§
 = 
blockög_h™dÀr


90 #¥agm®
wók
 
Ÿg_hs_ï1_ö_i§
 = 
blockög_h™dÀr


91 #¥agm®
wók
 
Ÿg_hs_wkup_i§
 = 
blockög_h™dÀr


92 #¥agm®
wók
 
Ÿg_hs_i§
 = 
blockög_h™dÀr


93 #¥agm®
wók
 
dcmi_i§
 = 
blockög_h™dÀr


94 #¥agm®
wók
 
¸yp_i§
 = 
blockög_h™dÀr


95 #¥agm®
wók
 
hash_∫g_i§
 = 
blockög_h™dÀr


96 #¥agm®
wók
 
Âu_i§
 = 
blockög_h™dÀr


97 #¥agm®
wók
 
u¨t7_i§
 = 
blockög_h™dÀr


98 #¥agm®
wók
 
u¨t8_i§
 = 
blockög_h™dÀr


99 #¥agm®
wók
 
•i4_i§
 = 
blockög_h™dÀr


100 #¥agm®
wók
 
•i5_i§
 = 
blockög_h™dÀr


101 #¥agm®
wók
 
•i6_i§
 = 
blockög_h™dÀr


102 #¥agm®
wók
 
ßi1_i§
 = 
blockög_h™dÀr


103 #¥agm®
wók
 
lcd_t·_i§
 = 
blockög_h™dÀr


104 #¥agm®
wók
 
lcd_t·_îr_i§
 = 
blockög_h™dÀr


105 #¥agm®
wók
 
dma2d_i§
 = 
blockög_h™dÀr


114 
	#IRQ_HANDLERS
 \

115 [
NVIC_NVIC_WWDG_IRQ
] = 
nvic_wwdg_i§
, \

116 [
NVIC_PVD_IRQ
] = 
pvd_i§
, \

117 [
NVIC_TAMP_STAMP_IRQ
] = 
èmp_°amp_i§
, \

118 [
NVIC_RTC_WKUP_IRQ
] = 
πc_wkup_i§
, \

119 [
NVIC_FLASH_IRQ
] = 
Êash_i§
, \

120 [
NVIC_RCC_IRQ
] = 
rcc_i§
, \

121 [
NVIC_EXTI0_IRQ
] = 
exti0_i§
, \

122 [
NVIC_EXTI1_IRQ
] = 
exti1_i§
, \

123 [
NVIC_EXTI2_IRQ
] = 
exti2_i§
, \

124 [
NVIC_EXTI3_IRQ
] = 
exti3_i§
, \

125 [
NVIC_EXTI4_IRQ
] = 
exti4_i§
, \

126 [
NVIC_DMA1_STREAM0_IRQ
] = 
dma1_°ªam0_i§
, \

127 [
NVIC_DMA1_STREAM1_IRQ
] = 
dma1_°ªam1_i§
, \

128 [
NVIC_DMA1_STREAM2_IRQ
] = 
dma1_°ªam2_i§
, \

129 [
NVIC_DMA1_STREAM3_IRQ
] = 
dma1_°ªam3_i§
, \

130 [
NVIC_DMA1_STREAM4_IRQ
] = 
dma1_°ªam4_i§
, \

131 [
NVIC_DMA1_STREAM5_IRQ
] = 
dma1_°ªam5_i§
, \

132 [
NVIC_DMA1_STREAM6_IRQ
] = 
dma1_°ªam6_i§
, \

133 [
NVIC_ADC_IRQ
] = 
adc_i§
, \

134 [
NVIC_CAN1_TX_IRQ
] = 
ˇn1_tx_i§
, \

135 [
NVIC_CAN1_RX0_IRQ
] = 
ˇn1_rx0_i§
, \

136 [
NVIC_CAN1_RX1_IRQ
] = 
ˇn1_rx1_i§
, \

137 [
NVIC_CAN1_SCE_IRQ
] = 
ˇn1_s˚_i§
, \

138 [
NVIC_EXTI9_5_IRQ
] = 
exti9_5_i§
, \

139 [
NVIC_TIM1_BRK_TIM9_IRQ
] = 
tim1_brk_tim9_i§
, \

140 [
NVIC_TIM1_UP_TIM10_IRQ
] = 
tim1_up_tim10_i§
, \

141 [
NVIC_TIM1_TRG_COM_TIM11_IRQ
] = 
tim1_åg_com_tim11_i§
, \

142 [
NVIC_TIM1_CC_IRQ
] = 
tim1_cc_i§
, \

143 [
NVIC_TIM2_IRQ
] = 
tim2_i§
, \

144 [
NVIC_TIM3_IRQ
] = 
tim3_i§
, \

145 [
NVIC_TIM4_IRQ
] = 
tim4_i§
, \

146 [
NVIC_I2C1_EV_IRQ
] = 
i2c1_ev_i§
, \

147 [
NVIC_I2C1_ER_IRQ
] = 
i2c1_î_i§
, \

148 [
NVIC_I2C2_EV_IRQ
] = 
i2c2_ev_i§
, \

149 [
NVIC_I2C2_ER_IRQ
] = 
i2c2_î_i§
, \

150 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

151 [
NVIC_SPI2_IRQ
] = 
•i2_i§
, \

152 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

153 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

154 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

155 [
NVIC_EXTI15_10_IRQ
] = 
exti15_10_i§
, \

156 [
NVIC_RTC_ALARM_IRQ
] = 
πc_Æ¨m_i§
, \

157 [
NVIC_USB_FS_WKUP_IRQ
] = 
usb_fs_wkup_i§
, \

158 [
NVIC_TIM8_BRK_TIM12_IRQ
] = 
tim8_brk_tim12_i§
, \

159 [
NVIC_TIM8_UP_TIM13_IRQ
] = 
tim8_up_tim13_i§
, \

160 [
NVIC_TIM8_TRG_COM_TIM14_IRQ
] = 
tim8_åg_com_tim14_i§
, \

161 [
NVIC_TIM8_CC_IRQ
] = 
tim8_cc_i§
, \

162 [
NVIC_DMA1_STREAM7_IRQ
] = 
dma1_°ªam7_i§
, \

163 [
NVIC_FSMC_IRQ
] = 
fsmc_i§
, \

164 [
NVIC_SDIO_IRQ
] = 
sdio_i§
, \

165 [
NVIC_TIM5_IRQ
] = 
tim5_i§
, \

166 [
NVIC_SPI3_IRQ
] = 
•i3_i§
, \

167 [
NVIC_UART4_IRQ
] = 
u¨t4_i§
, \

168 [
NVIC_UART5_IRQ
] = 
u¨t5_i§
, \

169 [
NVIC_TIM6_DAC_IRQ
] = 
tim6_dac_i§
, \

170 [
NVIC_TIM7_IRQ
] = 
tim7_i§
, \

171 [
NVIC_DMA2_STREAM0_IRQ
] = 
dma2_°ªam0_i§
, \

172 [
NVIC_DMA2_STREAM1_IRQ
] = 
dma2_°ªam1_i§
, \

173 [
NVIC_DMA2_STREAM2_IRQ
] = 
dma2_°ªam2_i§
, \

174 [
NVIC_DMA2_STREAM3_IRQ
] = 
dma2_°ªam3_i§
, \

175 [
NVIC_DMA2_STREAM4_IRQ
] = 
dma2_°ªam4_i§
, \

176 [
NVIC_ETH_IRQ
] = 
ëh_i§
, \

177 [
NVIC_ETH_WKUP_IRQ
] = 
ëh_wkup_i§
, \

178 [
NVIC_CAN2_TX_IRQ
] = 
ˇn2_tx_i§
, \

179 [
NVIC_CAN2_RX0_IRQ
] = 
ˇn2_rx0_i§
, \

180 [
NVIC_CAN2_RX1_IRQ
] = 
ˇn2_rx1_i§
, \

181 [
NVIC_CAN2_SCE_IRQ
] = 
ˇn2_s˚_i§
, \

182 [
NVIC_OTG_FS_IRQ
] = 
Ÿg_fs_i§
, \

183 [
NVIC_DMA2_STREAM5_IRQ
] = 
dma2_°ªam5_i§
, \

184 [
NVIC_DMA2_STREAM6_IRQ
] = 
dma2_°ªam6_i§
, \

185 [
NVIC_DMA2_STREAM7_IRQ
] = 
dma2_°ªam7_i§
, \

186 [
NVIC_USART6_IRQ
] = 
ußπ6_i§
, \

187 [
NVIC_I2C3_EV_IRQ
] = 
i2c3_ev_i§
, \

188 [
NVIC_I2C3_ER_IRQ
] = 
i2c3_î_i§
, \

189 [
NVIC_OTG_HS_EP1_OUT_IRQ
] = 
Ÿg_hs_ï1_out_i§
, \

190 [
NVIC_OTG_HS_EP1_IN_IRQ
] = 
Ÿg_hs_ï1_ö_i§
, \

191 [
NVIC_OTG_HS_WKUP_IRQ
] = 
Ÿg_hs_wkup_i§
, \

192 [
NVIC_OTG_HS_IRQ
] = 
Ÿg_hs_i§
, \

193 [
NVIC_DCMI_IRQ
] = 
dcmi_i§
, \

194 [
NVIC_CRYP_IRQ
] = 
¸yp_i§
, \

195 [
NVIC_HASH_RNG_IRQ
] = 
hash_∫g_i§
, \

196 [
NVIC_FPU_IRQ
] = 
Âu_i§
, \

197 [
NVIC_UART7_IRQ
] = 
u¨t7_i§
, \

198 [
NVIC_UART8_IRQ
] = 
u¨t8_i§
, \

199 [
NVIC_SPI4_IRQ
] = 
•i4_i§
, \

200 [
NVIC_SPI5_IRQ
] = 
•i5_i§
, \

201 [
NVIC_SPI6_IRQ
] = 
•i6_i§
, \

202 [
NVIC_SAI1_IRQ
] = 
ßi1_i§
, \

203 [
NVIC_LCD_TFT_IRQ
] = 
lcd_t·_i§
, \

204 [
NVIC_LCD_TFT_ERR_IRQ
] = 
lcd_t·_îr_i§
, \

205 [
NVIC_DMA2D_IRQ
] = 
dma2d_i§


	)

	@libopencm3/lib/stm32/f7/flash.c

28 
	~<lib›ícm3/°m32/Êash.h
>

39 
ölöe
 
	$Êash_£t_¥ogøm_size
(
uöt32_t
 
psize
)

41 
FLASH_CR
 &~(
FLASH_CR_PROGRAM_MASK
 << 
FLASH_CR_PROGRAM_SHIFT
);

42 
FLASH_CR
 |
psize
 << 
FLASH_CR_PROGRAM_SHIFT
;

43 
	}
}

56 
ölöe
 
	$Êash_pùñöe_°Æl
()

58 
__asm__
 volatile("dsb":::"memory");

59 
	}
}

71 
	$Êash_£t_ws
(
uöt32_t
 
ws
)

73 
uöt32_t
 
ªg32
;

75 
ªg32
 = 
FLASH_ACR
;

76 
ªg32
 &~(
FLASH_ACR_LATENCY_MASK
);

77 
ªg32
 |
ws
;

78 
FLASH_ACR
 = 
ªg32
;

84 (
FLASH_ACR
 & 
FLASH_ACR_LATENCY_MASK
Ë!
ws
);

85 
	}
}

94 
	$Êash_u∆ock
()

97 
FLASH_CR
 |
FLASH_CR_LOCK
;

100 
FLASH_KEYR
 = 
FLASH_KEYR_KEY1
;

101 
FLASH_KEYR
 = 
FLASH_KEYR_KEY2
;

102 
	}
}

110 
	$Êash_lock
()

112 
FLASH_CR
 |
FLASH_CR_LOCK
;

113 
	}
}

120 
	$Êash_˛ór_pg≥º_Êag
()

122 
FLASH_SR
 |
FLASH_SR_PGPERR
;

123 
	}
}

130 
	$Êash_˛ór_e›_Êag
()

132 
FLASH_SR
 |
FLASH_SR_EOP
;

133 
	}
}

143 
	$Êash_waô_f‹_œ°_›î©i⁄
()

145 
	`Êash_pùñöe_°Æl
();

146 (
FLASH_SR
 & 
FLASH_SR_BSY
) == FLASH_SR_BSY);

147 
	}
}

156 
	$Êash_u∆ock_›ti⁄_byãs
()

159 
FLASH_OPTCR
 |
FLASH_OPTCR_OPTLOCK
;

162 
FLASH_OPTKEYR
 = 
FLASH_OPTKEYR_KEY1
;

163 
FLASH_OPTKEYR
 = 
FLASH_OPTKEYR_KEY2
;

164 
	}
}

173 
	$Êash_lock_›ti⁄_byãs
()

175 
FLASH_OPTCR
 |
FLASH_OPTCR_OPTLOCK
;

176 
	}
}

185 
	$Êash_˛ór_î£º_Êag
()

187 
FLASH_SR
 |
FLASH_SR_ERSERR
;

188 
	}
}

195 
	$Êash_˛ór_pg´º_Êag
()

197 
FLASH_SR
 |
FLASH_SR_PGAERR
;

198 
	}
}

205 
	$Êash_˛ór_wΩîr_Êag
()

207 
FLASH_SR
 |
FLASH_SR_WRPERR
;

208 
	}
}

215 
	$Êash_¨t_íabÀ
()

217 
FLASH_ACR
 |
FLASH_ACR_ARTEN
;

218 
	}
}

232 
	$Êash_¥e„tch_íabÀ
()

234 
FLASH_ACR
 |
FLASH_ACR_PRFTEN
;

235 
	}
}

244 
	$Êash_¥e„tch_dißbÀ
()

246 
FLASH_ACR
 &~
FLASH_ACR_PRFTEN
;

247 
	}
}

255 
	$Êash_¨t_ª£t
()

257 
FLASH_ACR
 |
FLASH_ACR_ARTRST
;

258 
	}
}

266 
	$Êash_˛ór_°©us_Êags
()

268 
	`Êash_˛ór_î£º_Êag
();

269 
	`Êash_˛ór_pg´º_Êag
();

270 
	`Êash_˛ór_wΩîr_Êag
();

271 
	`Êash_˛ór_pg≥º_Êag
();

272 
	`Êash_˛ór_e›_Êag
();

273 
	}
}

284 
	$Êash_îa£_Æl_£˘‹s
(
uöt32_t
 
¥ogøm_size
)

286 
	`Êash_waô_f‹_œ°_›î©i⁄
();

287 
	`Êash_£t_¥ogøm_size
(
¥ogøm_size
);

289 
FLASH_CR
 |
FLASH_CR_MER
;

290 
FLASH_CR
 |
FLASH_CR_STRT
;

292 
	`Êash_waô_f‹_œ°_›î©i⁄
();

293 
FLASH_CR
 &~
FLASH_CR_MER
;

294 
	}
}

309 
	$Êash_îa£_£˘‹
(
uöt8_t
 
£˘‹
, 
uöt32_t
 
¥ogøm_size
)

311 
	`Êash_waô_f‹_œ°_›î©i⁄
();

312 
	`Êash_£t_¥ogøm_size
(
¥ogøm_size
);

314 
FLASH_CR
 &~(
FLASH_CR_SNB_MASK
 << 
FLASH_CR_SNB_SHIFT
);

315 
FLASH_CR
 |(
£˘‹
 & 
FLASH_CR_SNB_MASK
Ë<< 
FLASH_CR_SNB_SHIFT
;

316 
FLASH_CR
 |
FLASH_CR_SER
;

317 
FLASH_CR
 |
FLASH_CR_STRT
;

319 
	`Êash_waô_f‹_œ°_›î©i⁄
();

320 
FLASH_CR
 &~
FLASH_CR_SER
;

321 
FLASH_CR
 &~(
FLASH_CR_SNB_MASK
 << 
FLASH_CR_SNB_SHIFT
);

322 
	}
}

335 
	$Êash_¥ogøm_doubÀ_w‹d
(
uöt32_t
 
addªss
, 
uöt64_t
 
d©a
)

338 
	`Êash_waô_f‹_œ°_›î©i⁄
();

339 
	`Êash_£t_¥ogøm_size
(
FLASH_CR_PROGRAM_X64
);

342 
FLASH_CR
 |
FLASH_CR_PG
;

345 
	`MMIO64
(
addªss
Ë
d©a
;

348 
	`Êash_waô_f‹_œ°_›î©i⁄
();

351 
FLASH_CR
 &~
FLASH_CR_PG
;

352 
	}
}

365 
	$Êash_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
)

368 
	`Êash_waô_f‹_œ°_›î©i⁄
();

369 
	`Êash_£t_¥ogøm_size
(
FLASH_CR_PROGRAM_X32
);

372 
FLASH_CR
 |
FLASH_CR_PG
;

375 
	`MMIO32
(
addªss
Ë
d©a
;

378 
	`Êash_waô_f‹_œ°_›î©i⁄
();

381 
FLASH_CR
 &~
FLASH_CR_PG
;

382 
	}
}

395 
	$Êash_¥ogøm_hÆf_w‹d
(
uöt32_t
 
addªss
, 
uöt16_t
 
d©a
)

397 
	`Êash_waô_f‹_œ°_›î©i⁄
();

398 
	`Êash_£t_¥ogøm_size
(
FLASH_CR_PROGRAM_X16
);

400 
FLASH_CR
 |
FLASH_CR_PG
;

402 
	`MMIO16
(
addªss
Ë
d©a
;

404 
	`Êash_waô_f‹_œ°_›î©i⁄
();

406 
FLASH_CR
 &~
FLASH_CR_PG
;

407 
	}
}

420 
	$Êash_¥ogøm_byã
(
uöt32_t
 
addªss
, 
uöt8_t
 
d©a
)

422 
	`Êash_waô_f‹_œ°_›î©i⁄
();

423 
	`Êash_£t_¥ogøm_size
(
FLASH_CR_PROGRAM_X8
);

425 
FLASH_CR
 |
FLASH_CR_PG
;

427 
	`MMIO8
(
addªss
Ë
d©a
;

429 
	`Êash_waô_f‹_œ°_›î©i⁄
();

431 
FLASH_CR
 &~
FLASH_CR_PG
;

432 
	}
}

447 
	$Êash_¥ogøm
(
uöt32_t
 
addªss
, 
uöt8_t
 *
d©a
, uöt32_à
Àn
)

452 
uöt32_t
 
i
;

453 
i
 = 0; i < 
Àn
; i++) {

454 
	`Êash_¥ogøm_byã
(
addªss
+
i
, 
d©a
[i]);

456 
	}
}

467 
	$Êash_¥ogøm_›ti⁄_byãs
(
uöt32_t
 
d©a
)

469 
	`Êash_waô_f‹_œ°_›î©i⁄
();

471 i‡(
FLASH_OPTCR
 & 
FLASH_OPTCR_OPTLOCK
) {

472 
	`Êash_u∆ock_›ti⁄_byãs
();

475 
FLASH_OPTCR
 = 
d©a
 & ~0x3;

476 
FLASH_OPTCR
 |
FLASH_OPTCR_OPTSTRT
;

477 
	`Êash_waô_f‹_œ°_›î©i⁄
();

478 
	}
}

	@libopencm3/lib/stm32/f7/gpio.c

31 
	~<lib›ícm3/°m32/gpio.h
>

	@libopencm3/lib/stm32/f7/pwr.c

39 
	~<lib›ícm3/°m32/pwr.h
>

41 
	$pwr_£t_vos_sˇÀ
(
pwr_vos_sˇÀ
 
sˇÀ
)

43 
PWR_CR1
 &~
PWR_CR1_VOS_MASK
;

45 i‡(
sˇÀ
 =
PWR_SCALE1
) {

46 
PWR_CR1
 |
PWR_CR1_VOS_SCALE_1
;

47 } i‡(
sˇÀ
 =
PWR_SCALE2
) {

48 
PWR_CR1
 |
PWR_CR1_VOS_SCALE_2
;

49 } i‡(
sˇÀ
 =
PWR_SCALE3
) {

50 
PWR_CR1
 |
PWR_CR1_VOS_SCALE_3
;

52 
	}
}

54 
	$pwr_íabÀ_ovîdrive
()

56 
PWR_CR1
 |
PWR_CR1_ODEN
;

57 !(
PWR_CSR1
 & 
PWR_CSR1_ODRDY
));

58 
PWR_CR1
 |
PWR_CR1_ODSWEN
;

59 !(
PWR_CSR1
 & 
PWR_CSR1_ODSWRDY
));

60 
	}
}

62 
	$pwr_dißbÀ_ovîdrive
()

64 
PWR_CR1
 &~(
PWR_CR1_ODEN
 | 
PWR_CR1_ODSWEN
);

65 !(
PWR_CSR1
 & 
PWR_CSR1_ODSWRDY
));

66 
	}
}

	@libopencm3/lib/stm32/f7/rcc.c

1 
	~<lib›ícm3/cm3/as£π.h
>

2 
	~<lib›ícm3/°m32/rcc.h
>

3 
	~<lib›ícm3/°m32/pwr.h
>

4 
	~<lib›ícm3/°m32/Êash.h
>

6 
uöt32_t
 
	grcc_ahb_‰equícy
 = 16000000;

7 
uöt32_t
 
	grcc_≠b1_‰equícy
 = 16000000;

8 
uöt32_t
 
	grcc_≠b2_‰equícy
 = 16000000;

12 c⁄° 
rcc_˛ock_sˇÀ
 
	grcc_3v3
[
RCC_CLOCK_3V3_END
] = {

14 .
∂ 
 = 432,

15 .
	g∂Õ
 = 2,

16 .
	g∂lq
 = 9,

17 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

18 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

19 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

20 .
	gvos_sˇÀ
 = 
PWR_SCALE1
,

21 .
	govîdrive
 = 1,

22 .
	gÊash_waô°©es
 = 7,

23 .
	gahb_‰equícy
 = 216000000,

24 .
	g≠b1_‰equícy
 = 54000000,

25 .
	g≠b2_‰equícy
 = 108000000,

28 .
	g∂ 
 = 336,

29 .
	g∂Õ
 = 2,

30 .
	g∂lq
 = 7,

31 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

32 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

33 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

34 .
	gvos_sˇÀ
 = 
PWR_SCALE2
,

35 .
	govîdrive
 = 1,

36 .
	gÊash_waô°©es
 = 5,

37 .
	gahb_‰equícy
 = 168000000,

38 .
	g≠b1_‰equícy
 = 42000000,

39 .
	g≠b2_‰equícy
 = 84000000,

42 .
	g∂ 
 = 240,

43 .
	g∂Õ
 = 2,

44 .
	g∂lq
 = 5,

45 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

46 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

47 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

48 .
	gvos_sˇÀ
 = 
PWR_SCALE3
,

49 .
	govîdrive
 = 0,

50 .
	gÊash_waô°©es
 = 3,

51 .
	gahb_‰equícy
 = 120000000,

52 .
	g≠b1_‰equícy
 = 30000000,

53 .
	g≠b2_‰equícy
 = 60000000,

56 .
	g∂ 
 = 144,

57 .
	g∂Õ
 = 2,

58 .
	g∂lq
 = 3,

59 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

60 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_4
,

61 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

62 .
	gvos_sˇÀ
 = 
PWR_SCALE3
,

63 .
	govîdrive
 = 0,

64 .
	gÊash_waô°©es
 = 2,

65 .
	gahb_‰equícy
 = 72000000,

66 .
	g≠b1_‰equícy
 = 18000000,

67 .
	g≠b2_‰equícy
 = 36000000,

70 .
	g∂ 
 = 192,

71 .
	g∂Õ
 = 4,

72 .
	g∂lq
 = 4,

73 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

74 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_2
,

75 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_2
,

76 .
	gvos_sˇÀ
 = 
PWR_SCALE3
,

77 .
	govîdrive
 = 0,

78 .
	gÊash_waô°©es
 = 1,

79 .
	gahb_‰equícy
 = 48000000,

80 .
	g≠b1_‰equícy
 = 24000000,

81 .
	g≠b2_‰equícy
 = 24000000,

84 .
	g∂ 
 = 192,

85 .
	g∂Õ
 = 8,

86 .
	g∂lq
 = 4,

87 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

88 .
	gµª1
 = 
RCC_CFGR_PPRE_DIV_NONE
,

89 .
	gµª2
 = 
RCC_CFGR_PPRE_DIV_NONE
,

90 .
	gvos_sˇÀ
 = 
PWR_SCALE3
,

91 .
	govîdrive
 = 0,

92 .
	gÊash_waô°©es
 = 0,

93 .
	gahb_‰equícy
 = 24000000,

94 .
	g≠b1_‰equícy
 = 24000000,

95 .
	g≠b2_‰equícy
 = 24000000,

99 
	$rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
)

101 
osc
) {

102 
RCC_PLL
:

103 
RCC_CIR
 |
RCC_CIR_PLLRDYC
;

105 
RCC_HSE
:

106 
RCC_CIR
 |
RCC_CIR_HSERDYC
;

108 
RCC_HSI
:

109 
RCC_CIR
 |
RCC_CIR_HSIRDYC
;

111 
RCC_LSE
:

112 
RCC_CIR
 |
RCC_CIR_LSERDYC
;

114 
RCC_LSI
:

115 
RCC_CIR
 |
RCC_CIR_LSIRDYC
;

118 
	}
}

120 
	$rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
)

122 
osc
) {

123 
RCC_PLL
:

124 
RCC_CIR
 |
RCC_CIR_PLLRDYIE
;

126 
RCC_HSE
:

127 
RCC_CIR
 |
RCC_CIR_HSERDYIE
;

129 
RCC_HSI
:

130 
RCC_CIR
 |
RCC_CIR_HSIRDYIE
;

132 
RCC_LSE
:

133 
RCC_CIR
 |
RCC_CIR_LSERDYIE
;

135 
RCC_LSI
:

136 
RCC_CIR
 |
RCC_CIR_LSIRDYIE
;

139 
	}
}

141 
	$rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
)

143 
osc
) {

144 
RCC_PLL
:

145 
RCC_CIR
 &~
RCC_CIR_PLLRDYIE
;

147 
RCC_HSE
:

148 
RCC_CIR
 &~
RCC_CIR_HSERDYIE
;

150 
RCC_HSI
:

151 
RCC_CIR
 &~
RCC_CIR_HSIRDYIE
;

153 
RCC_LSE
:

154 
RCC_CIR
 &~
RCC_CIR_LSERDYIE
;

156 
RCC_LSI
:

157 
RCC_CIR
 &~
RCC_CIR_LSIRDYIE
;

160 
	}
}

162 
	$rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
)

164 
osc
) {

165 
RCC_PLL
:

166  ((
RCC_CIR
 & 
RCC_CIR_PLLRDYF
) != 0);

168 
RCC_HSE
:

169  ((
RCC_CIR
 & 
RCC_CIR_HSERDYF
) != 0);

171 
RCC_HSI
:

172  ((
RCC_CIR
 & 
RCC_CIR_HSIRDYF
) != 0);

174 
RCC_LSE
:

175  ((
RCC_CIR
 & 
RCC_CIR_LSERDYF
) != 0);

177 
RCC_LSI
:

178  ((
RCC_CIR
 & 
RCC_CIR_LSIRDYF
) != 0);

182 
	`cm3_as£π_nŸ_ªached
();

183 
	}
}

185 
	$rcc_css_öt_˛ór
()

187 
RCC_CIR
 |
RCC_CIR_CSSC
;

188 
	}
}

190 
	$rcc_css_öt_Êag
()

192  ((
RCC_CIR
 & 
RCC_CIR_CSSF
) != 0);

193 
	}
}

195 
	$rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
)

197 
osc
) {

198 
RCC_PLL
:

199 (
RCC_CR
 & 
RCC_CR_PLLRDY
) == 0);

201 
RCC_HSE
:

202 (
RCC_CR
 & 
RCC_CR_HSERDY
) == 0);

204 
RCC_HSI
:

205 (
RCC_CR
 & 
RCC_CR_HSIRDY
) == 0);

207 
RCC_LSE
:

208 (
RCC_BDCR
 & 
RCC_BDCR_LSERDY
) == 0);

210 
RCC_LSI
:

211 (
RCC_CSR
 & 
RCC_CSR_LSIRDY
) == 0);

214 
	}
}

216 
	$rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
)

218 
osc
) {

219 
RCC_PLL
:

220 (
RCC_CFGR
 & ((1 << 1Ë| (1 << 0))Ë!
RCC_CFGR_SWS_PLL
);

222 
RCC_HSE
:

223 (
RCC_CFGR
 & ((1 << 1Ë| (1 << 0))Ë!
RCC_CFGR_SWS_HSE
);

225 
RCC_HSI
:

226 (
RCC_CFGR
 & ((1 << 1Ë| (1 << 0))Ë!
RCC_CFGR_SWS_HSI
);

232 
	}
}

234 
	$rcc_osc_⁄
(
rcc_osc
 
osc
)

236 
osc
) {

237 
RCC_PLL
:

238 
RCC_CR
 |
RCC_CR_PLLON
;

240 
RCC_HSE
:

241 
RCC_CR
 |
RCC_CR_HSEON
;

243 
RCC_HSI
:

244 
RCC_CR
 |
RCC_CR_HSION
;

246 
RCC_LSE
:

247 
RCC_BDCR
 |
RCC_BDCR_LSEON
;

249 
RCC_LSI
:

250 
RCC_CSR
 |
RCC_CSR_LSION
;

253 
	}
}

255 
	$rcc_osc_off
(
rcc_osc
 
osc
)

257 
osc
) {

258 
RCC_PLL
:

259 
RCC_CR
 &~
RCC_CR_PLLON
;

261 
RCC_HSE
:

262 
RCC_CR
 &~
RCC_CR_HSEON
;

264 
RCC_HSI
:

265 
RCC_CR
 &~
RCC_CR_HSION
;

267 
RCC_LSE
:

268 
RCC_BDCR
 &~
RCC_BDCR_LSEON
;

270 
RCC_LSI
:

271 
RCC_CSR
 &~
RCC_CSR_LSION
;

274 
	}
}

276 
	$rcc_css_íabÀ
()

278 
RCC_CR
 |
RCC_CR_CSSON
;

279 
	}
}

281 
	$rcc_css_dißbÀ
()

283 
RCC_CR
 &~
RCC_CR_CSSON
;

284 
	}
}

286 
	$rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
)

288 
uöt32_t
 
ªg32
;

290 
ªg32
 = 
RCC_CFGR
;

291 
ªg32
 &~(
RCC_CFGR_SW_MASK
 << 
RCC_CFGR_SW_SHIFT
);

292 
RCC_CFGR
 = (
ªg32
 | (
˛k
 << 
RCC_CFGR_SW_SHIFT
));

293 
	}
}

295 
	$rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
)

297 
uöt32_t
 
ªg32
;

299 
ªg32
 = 
RCC_PLLCFGR
;

300 
ªg32
 &= ~(1 << 22);

301 
RCC_PLLCFGR
 = (
ªg32
 | (
∂l§c
 << 22));

302 
	}
}

304 
	$rcc_£t_µª2
(
uöt32_t
 
µª2
)

306 
uöt32_t
 
ªg32
;

308 
ªg32
 = 
RCC_CFGR
;

309 
ªg32
 &~(
RCC_CFGR_PPRE2_MASK
 << 
RCC_CFGR_PPRE2_SHIFT
);

310 
RCC_CFGR
 = (
ªg32
 | (
µª2
 << 
RCC_CFGR_PPRE2_SHIFT
));

311 
	}
}

313 
	$rcc_£t_µª1
(
uöt32_t
 
µª1
)

315 
uöt32_t
 
ªg32
;

317 
ªg32
 = 
RCC_CFGR
;

318 
ªg32
 &~(
RCC_CFGR_PPRE1_MASK
 << 
RCC_CFGR_PPRE1_SHIFT
);

319 
RCC_CFGR
 = (
ªg32
 | (
µª1
 << 
RCC_CFGR_PPRE1_SHIFT
));

320 
	}
}

322 
	$rcc_£t_h¥e
(
uöt32_t
 
h¥e
)

324 
uöt32_t
 
ªg32
;

326 
ªg32
 = 
RCC_CFGR
;

327 
ªg32
 &~(
RCC_CFGR_HPRE_MASK
 << 
RCC_CFGR_HPRE_SHIFT
);

328 
RCC_CFGR
 = (
ªg32
 | (
h¥e
 << 
RCC_CFGR_HPRE_SHIFT
));

329 
	}
}

331 
	$rcc_£t_π˝ª
(
uöt32_t
 
π˝ª
)

333 
uöt32_t
 
ªg32
;

335 
ªg32
 = 
RCC_CFGR
;

336 
ªg32
 &~(
RCC_CFGR_RTCPRE_MASK
 << 
RCC_CFGR_RTCPRE_SHIFT
);

337 
RCC_CFGR
 = (
ªg32
 | (
π˝ª
 << 
RCC_CFGR_RTCPRE_SHIFT
));

338 
	}
}

340 
	$rcc_£t_maö_∂l_hsi
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

341 
uöt32_t
 
∂lq
)

343 
RCC_PLLCFGR
 = (
∂lm
 << 
RCC_PLLCFGR_PLLM_SHIFT
) |

344 (
∂ 
 << 
RCC_PLLCFGR_PLLN_SHIFT
) |

345 (((
∂Õ
 >> 1Ë- 1Ë<< 
RCC_PLLCFGR_PLLP_SHIFT
) |

346 (
∂lq
 << 
RCC_PLLCFGR_PLLQ_SHIFT
);

347 
	}
}

349 
	$rcc_£t_maö_∂l_h£
(
uöt32_t
 
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

350 
uöt32_t
 
∂lq
)

352 
RCC_PLLCFGR
 = (
∂lm
 << 
RCC_PLLCFGR_PLLM_SHIFT
) |

353 (
∂ 
 << 
RCC_PLLCFGR_PLLN_SHIFT
) |

354 (((
∂Õ
 >> 1Ë- 1Ë<< 
RCC_PLLCFGR_PLLP_SHIFT
) |

355 
RCC_PLLCFGR_PLLSRC
 |

356 (
∂lq
 << 
RCC_PLLCFGR_PLLQ_SHIFT
);

357 
	}
}

359 
uöt32_t
 
	$rcc_sy°em_˛ock_sour˚
()

362  (
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
;

363 
	}
}

365 
	$rcc_˛ock_£tup_h£
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
, 
uöt32_t
 
h£_mhz
)

367 
uöt8_t
 
∂lm
 = 
h£_mhz
;

370 
	`rcc_osc_⁄
(
RCC_HSI
);

371 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

374 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_HSI
);

377 
	`rcc_osc_⁄
(
RCC_HSE
);

378 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

380 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

381 
	`pwr_£t_vos_sˇÀ
(
˛ock
->
vos_sˇÀ
);

383 i‡(
˛ock
->
ovîdrive
) {

384 
	`pwr_íabÀ_ovîdrive
();

391 
	`rcc_£t_h¥e
(
˛ock
->
h¥e
);

392 
	`rcc_£t_µª1
(
˛ock
->
µª1
);

393 
	`rcc_£t_µª2
(
˛ock
->
µª2
);

395 
	`rcc_£t_maö_∂l_h£
(
∂lm
, 
˛ock
->
∂ 
,

396 
˛ock
->
∂Õ
, clock->
∂lq
);

399 
	`rcc_osc_⁄
(
RCC_PLL
);

400 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

403 
	`Êash_£t_ws
(
˛ock
->
Êash_waô°©es
);

404 
	`Êash_¨t_íabÀ
();

405 
	`Êash_¥e„tch_íabÀ
();

408 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_PLL
);

411 
	`rcc_waô_f‹_sys˛k_°©us
(
RCC_PLL
);

414 
rcc_ahb_‰equícy
 = 
˛ock
->
ahb_‰equícy
;

415 
rcc_≠b1_‰equícy
 = 
˛ock
->
≠b1_‰equícy
;

416 
rcc_≠b2_‰equícy
 = 
˛ock
->
≠b2_‰equícy
;

419 
	`rcc_osc_off
(
RCC_HSI
);

420 
	}
}

422 
	$rcc_˛ock_£tup_hsi
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
)

424 
uöt8_t
 
∂lm
 = 16;

427 
	`rcc_osc_⁄
(
RCC_HSI
);

428 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

431 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_HSI
);

433 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

434 
	`pwr_£t_vos_sˇÀ
(
˛ock
->
vos_sˇÀ
);

436 i‡(
˛ock
->
ovîdrive
) {

437 
	`pwr_íabÀ_ovîdrive
();

444 
	`rcc_£t_h¥e
(
˛ock
->
h¥e
);

445 
	`rcc_£t_µª1
(
˛ock
->
µª1
);

446 
	`rcc_£t_µª2
(
˛ock
->
µª2
);

448 
	`rcc_£t_maö_∂l_hsi
(
∂lm
, 
˛ock
->
∂ 
,

449 
˛ock
->
∂Õ
, clock->
∂lq
);

452 
	`rcc_osc_⁄
(
RCC_PLL
);

453 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

456 
	`Êash_£t_ws
(
˛ock
->
Êash_waô°©es
);

457 
	`Êash_¨t_íabÀ
();

458 
	`Êash_¥e„tch_íabÀ
();

461 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_PLL
);

464 
	`rcc_waô_f‹_sys˛k_°©us
(
RCC_PLL
);

467 
rcc_ahb_‰equícy
 = 
˛ock
->
ahb_‰equícy
;

468 
rcc_≠b1_‰equícy
 = 
˛ock
->
≠b1_‰equícy
;

469 
rcc_≠b2_‰equícy
 = 
˛ock
->
≠b2_‰equícy
;

470 
	}
}

	@libopencm3/lib/stm32/f7/vector_chipset.c

21 
	~<lib›ícm3/cm3/scb.h
>

23 
	$¥e_maö
()

26 
SCB_CPACR
 |
SCB_CPACR_FULL
 * (
SCB_CPACR_CP10
 | 
SCB_CPACR_CP11
);

27 
	}
}

	@libopencm3/lib/stm32/f7/vector_nvic.c

15 #¥agm®
wók
 
nvic_wwdg_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pvd_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
èmp_°amp_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πc_wkup_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
Êash_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
rcc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
exti0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
exti1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
exti2_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
exti3_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
exti4_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
dma1_°ªam0_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
dma1_°ªam1_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
dma1_°ªam2_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
dma1_°ªam3_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
dma1_°ªam4_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
dma1_°ªam5_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
dma1_°ªam6_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
adc_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ˇn1_tx_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
ˇn1_rx0_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
ˇn1_rx1_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
ˇn1_s˚_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
exti9_5_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
tim1_brk_tim9_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
tim1_up_tim10_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
tim1_åg_com_tim11_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tim1_cc_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tim2_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
tim3_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
tim4_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
i2c1_ev_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
i2c1_î_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
i2c2_ev_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
i2c2_î_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
•i2_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
exti15_10_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
πc_Æ¨m_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
usb_fs_wkup_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
tim8_brk_tim12_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
tim8_up_tim13_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
tim8_åg_com_tim14_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
tim8_cc_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
dma1_°ªam7_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
fsmc_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
sdmmc1_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
tim5_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
•i3_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
u¨t4_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
u¨t5_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
tim6_dac_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
tim7_i§
 = 
blockög_h™dÀr


71 #¥agm®
wók
 
dma2_°ªam0_i§
 = 
blockög_h™dÀr


72 #¥agm®
wók
 
dma2_°ªam1_i§
 = 
blockög_h™dÀr


73 #¥agm®
wók
 
dma2_°ªam2_i§
 = 
blockög_h™dÀr


74 #¥agm®
wók
 
dma2_°ªam3_i§
 = 
blockög_h™dÀr


75 #¥agm®
wók
 
dma2_°ªam4_i§
 = 
blockög_h™dÀr


76 #¥agm®
wók
 
ëh_i§
 = 
blockög_h™dÀr


77 #¥agm®
wók
 
ëh_wkup_i§
 = 
blockög_h™dÀr


78 #¥agm®
wók
 
ˇn2_tx_i§
 = 
blockög_h™dÀr


79 #¥agm®
wók
 
ˇn2_rx0_i§
 = 
blockög_h™dÀr


80 #¥agm®
wók
 
ˇn2_rx1_i§
 = 
blockög_h™dÀr


81 #¥agm®
wók
 
ˇn2_s˚_i§
 = 
blockög_h™dÀr


82 #¥agm®
wók
 
Ÿg_fs_i§
 = 
blockög_h™dÀr


83 #¥agm®
wók
 
dma2_°ªam5_i§
 = 
blockög_h™dÀr


84 #¥agm®
wók
 
dma2_°ªam6_i§
 = 
blockög_h™dÀr


85 #¥agm®
wók
 
dma2_°ªam7_i§
 = 
blockög_h™dÀr


86 #¥agm®
wók
 
ußπ6_i§
 = 
blockög_h™dÀr


87 #¥agm®
wók
 
i2c3_ev_i§
 = 
blockög_h™dÀr


88 #¥agm®
wók
 
i2c3_î_i§
 = 
blockög_h™dÀr


89 #¥agm®
wók
 
Ÿg_hs_ï1_out_i§
 = 
blockög_h™dÀr


90 #¥agm®
wók
 
Ÿg_hs_ï1_ö_i§
 = 
blockög_h™dÀr


91 #¥agm®
wók
 
Ÿg_hs_wkup_i§
 = 
blockög_h™dÀr


92 #¥agm®
wók
 
Ÿg_hs_i§
 = 
blockög_h™dÀr


93 #¥agm®
wók
 
dcmi_i§
 = 
blockög_h™dÀr


94 #¥agm®
wók
 
¸yp_i§
 = 
blockög_h™dÀr


95 #¥agm®
wók
 
hash_∫g_i§
 = 
blockög_h™dÀr


96 #¥agm®
wók
 
Âu_i§
 = 
blockög_h™dÀr


97 #¥agm®
wók
 
u¨t7_i§
 = 
blockög_h™dÀr


98 #¥agm®
wók
 
u¨t8_i§
 = 
blockög_h™dÀr


99 #¥agm®
wók
 
•i4_i§
 = 
blockög_h™dÀr


100 #¥agm®
wók
 
•i5_i§
 = 
blockög_h™dÀr


101 #¥agm®
wók
 
•i6_i§
 = 
blockög_h™dÀr


102 #¥agm®
wók
 
ßi1_i§
 = 
blockög_h™dÀr


103 #¥agm®
wók
 
lcd_t·_i§
 = 
blockög_h™dÀr


104 #¥agm®
wók
 
lcd_t·_îr_i§
 = 
blockög_h™dÀr


105 #¥agm®
wók
 
dma2d_i§
 = 
blockög_h™dÀr


106 #¥agm®
wók
 
ßi2_i§
 = 
blockög_h™dÀr


107 #¥agm®
wók
 
quad•i_i§
 = 
blockög_h™dÀr


108 #¥agm®
wók
 
i2c4_ev_i§
 = 
blockög_h™dÀr


109 #¥agm®
wók
 
i2c4_î_i§
 = 
blockög_h™dÀr


110 #¥agm®
wók
 
•di‰x_i§
 = 
blockög_h™dÀr


119 
	#IRQ_HANDLERS
 \

120 [
NVIC_NVIC_WWDG_IRQ
] = 
nvic_wwdg_i§
, \

121 [
NVIC_PVD_IRQ
] = 
pvd_i§
, \

122 [
NVIC_TAMP_STAMP_IRQ
] = 
èmp_°amp_i§
, \

123 [
NVIC_RTC_WKUP_IRQ
] = 
πc_wkup_i§
, \

124 [
NVIC_FLASH_IRQ
] = 
Êash_i§
, \

125 [
NVIC_RCC_IRQ
] = 
rcc_i§
, \

126 [
NVIC_EXTI0_IRQ
] = 
exti0_i§
, \

127 [
NVIC_EXTI1_IRQ
] = 
exti1_i§
, \

128 [
NVIC_EXTI2_IRQ
] = 
exti2_i§
, \

129 [
NVIC_EXTI3_IRQ
] = 
exti3_i§
, \

130 [
NVIC_EXTI4_IRQ
] = 
exti4_i§
, \

131 [
NVIC_DMA1_STREAM0_IRQ
] = 
dma1_°ªam0_i§
, \

132 [
NVIC_DMA1_STREAM1_IRQ
] = 
dma1_°ªam1_i§
, \

133 [
NVIC_DMA1_STREAM2_IRQ
] = 
dma1_°ªam2_i§
, \

134 [
NVIC_DMA1_STREAM3_IRQ
] = 
dma1_°ªam3_i§
, \

135 [
NVIC_DMA1_STREAM4_IRQ
] = 
dma1_°ªam4_i§
, \

136 [
NVIC_DMA1_STREAM5_IRQ
] = 
dma1_°ªam5_i§
, \

137 [
NVIC_DMA1_STREAM6_IRQ
] = 
dma1_°ªam6_i§
, \

138 [
NVIC_ADC_IRQ
] = 
adc_i§
, \

139 [
NVIC_CAN1_TX_IRQ
] = 
ˇn1_tx_i§
, \

140 [
NVIC_CAN1_RX0_IRQ
] = 
ˇn1_rx0_i§
, \

141 [
NVIC_CAN1_RX1_IRQ
] = 
ˇn1_rx1_i§
, \

142 [
NVIC_CAN1_SCE_IRQ
] = 
ˇn1_s˚_i§
, \

143 [
NVIC_EXTI9_5_IRQ
] = 
exti9_5_i§
, \

144 [
NVIC_TIM1_BRK_TIM9_IRQ
] = 
tim1_brk_tim9_i§
, \

145 [
NVIC_TIM1_UP_TIM10_IRQ
] = 
tim1_up_tim10_i§
, \

146 [
NVIC_TIM1_TRG_COM_TIM11_IRQ
] = 
tim1_åg_com_tim11_i§
, \

147 [
NVIC_TIM1_CC_IRQ
] = 
tim1_cc_i§
, \

148 [
NVIC_TIM2_IRQ
] = 
tim2_i§
, \

149 [
NVIC_TIM3_IRQ
] = 
tim3_i§
, \

150 [
NVIC_TIM4_IRQ
] = 
tim4_i§
, \

151 [
NVIC_I2C1_EV_IRQ
] = 
i2c1_ev_i§
, \

152 [
NVIC_I2C1_ER_IRQ
] = 
i2c1_î_i§
, \

153 [
NVIC_I2C2_EV_IRQ
] = 
i2c2_ev_i§
, \

154 [
NVIC_I2C2_ER_IRQ
] = 
i2c2_î_i§
, \

155 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

156 [
NVIC_SPI2_IRQ
] = 
•i2_i§
, \

157 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

158 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

159 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

160 [
NVIC_EXTI15_10_IRQ
] = 
exti15_10_i§
, \

161 [
NVIC_RTC_ALARM_IRQ
] = 
πc_Æ¨m_i§
, \

162 [
NVIC_USB_FS_WKUP_IRQ
] = 
usb_fs_wkup_i§
, \

163 [
NVIC_TIM8_BRK_TIM12_IRQ
] = 
tim8_brk_tim12_i§
, \

164 [
NVIC_TIM8_UP_TIM13_IRQ
] = 
tim8_up_tim13_i§
, \

165 [
NVIC_TIM8_TRG_COM_TIM14_IRQ
] = 
tim8_åg_com_tim14_i§
, \

166 [
NVIC_TIM8_CC_IRQ
] = 
tim8_cc_i§
, \

167 [
NVIC_DMA1_STREAM7_IRQ
] = 
dma1_°ªam7_i§
, \

168 [
NVIC_FSMC_IRQ
] = 
fsmc_i§
, \

169 [
NVIC_SDMMC1_IRQ
] = 
sdmmc1_i§
, \

170 [
NVIC_TIM5_IRQ
] = 
tim5_i§
, \

171 [
NVIC_SPI3_IRQ
] = 
•i3_i§
, \

172 [
NVIC_UART4_IRQ
] = 
u¨t4_i§
, \

173 [
NVIC_UART5_IRQ
] = 
u¨t5_i§
, \

174 [
NVIC_TIM6_DAC_IRQ
] = 
tim6_dac_i§
, \

175 [
NVIC_TIM7_IRQ
] = 
tim7_i§
, \

176 [
NVIC_DMA2_STREAM0_IRQ
] = 
dma2_°ªam0_i§
, \

177 [
NVIC_DMA2_STREAM1_IRQ
] = 
dma2_°ªam1_i§
, \

178 [
NVIC_DMA2_STREAM2_IRQ
] = 
dma2_°ªam2_i§
, \

179 [
NVIC_DMA2_STREAM3_IRQ
] = 
dma2_°ªam3_i§
, \

180 [
NVIC_DMA2_STREAM4_IRQ
] = 
dma2_°ªam4_i§
, \

181 [
NVIC_ETH_IRQ
] = 
ëh_i§
, \

182 [
NVIC_ETH_WKUP_IRQ
] = 
ëh_wkup_i§
, \

183 [
NVIC_CAN2_TX_IRQ
] = 
ˇn2_tx_i§
, \

184 [
NVIC_CAN2_RX0_IRQ
] = 
ˇn2_rx0_i§
, \

185 [
NVIC_CAN2_RX1_IRQ
] = 
ˇn2_rx1_i§
, \

186 [
NVIC_CAN2_SCE_IRQ
] = 
ˇn2_s˚_i§
, \

187 [
NVIC_OTG_FS_IRQ
] = 
Ÿg_fs_i§
, \

188 [
NVIC_DMA2_STREAM5_IRQ
] = 
dma2_°ªam5_i§
, \

189 [
NVIC_DMA2_STREAM6_IRQ
] = 
dma2_°ªam6_i§
, \

190 [
NVIC_DMA2_STREAM7_IRQ
] = 
dma2_°ªam7_i§
, \

191 [
NVIC_USART6_IRQ
] = 
ußπ6_i§
, \

192 [
NVIC_I2C3_EV_IRQ
] = 
i2c3_ev_i§
, \

193 [
NVIC_I2C3_ER_IRQ
] = 
i2c3_î_i§
, \

194 [
NVIC_OTG_HS_EP1_OUT_IRQ
] = 
Ÿg_hs_ï1_out_i§
, \

195 [
NVIC_OTG_HS_EP1_IN_IRQ
] = 
Ÿg_hs_ï1_ö_i§
, \

196 [
NVIC_OTG_HS_WKUP_IRQ
] = 
Ÿg_hs_wkup_i§
, \

197 [
NVIC_OTG_HS_IRQ
] = 
Ÿg_hs_i§
, \

198 [
NVIC_DCMI_IRQ
] = 
dcmi_i§
, \

199 [
NVIC_CRYP_IRQ
] = 
¸yp_i§
, \

200 [
NVIC_HASH_RNG_IRQ
] = 
hash_∫g_i§
, \

201 [
NVIC_FPU_IRQ
] = 
Âu_i§
, \

202 [
NVIC_UART7_IRQ
] = 
u¨t7_i§
, \

203 [
NVIC_UART8_IRQ
] = 
u¨t8_i§
, \

204 [
NVIC_SPI4_IRQ
] = 
•i4_i§
, \

205 [
NVIC_SPI5_IRQ
] = 
•i5_i§
, \

206 [
NVIC_SPI6_IRQ
] = 
•i6_i§
, \

207 [
NVIC_SAI1_IRQ
] = 
ßi1_i§
, \

208 [
NVIC_LCD_TFT_IRQ
] = 
lcd_t·_i§
, \

209 [
NVIC_LCD_TFT_ERR_IRQ
] = 
lcd_t·_îr_i§
, \

210 [
NVIC_DMA2D_IRQ
] = 
dma2d_i§
, \

211 [
NVIC_SAI2_IRQ
] = 
ßi2_i§
, \

212 [
NVIC_QUADSPI_IRQ
] = 
quad•i_i§
, \

213 [
NVIC_I2C4_EV_IRQ
] = 
i2c4_ev_i§
, \

214 [
NVIC_I2C4_ER_IRQ
] = 
i2c4_î_i§
, \

215 [
NVIC_SPDIFRX_IRQ
] = 
•di‰x_i§


	)

	@libopencm3/lib/stm32/l0/flash.c

27 
	~<lib›ícm3/°m32/Êash.h
>

	@libopencm3/lib/stm32/l0/gpio.c

31 
	~<lib›ícm3/°m32/gpio.h
>

	@libopencm3/lib/stm32/l0/i2c.c

31 
	~<lib›ícm3/°m32/i2c.h
>

	@libopencm3/lib/stm32/l0/iwdg.c

31 
	~<lib›ícm3/°m32/iwdg.h
>

	@libopencm3/lib/stm32/l0/rcc.c

37 
	~<lib›ícm3/cm3/as£π.h
>

38 
	~<lib›ícm3/°m32/Êash.h
>

39 
	~<lib›ícm3/°m32/pwr.h
>

40 
	~<lib›ícm3/°m32/rcc.h
>

43 
uöt32_t
 
	grcc_ahb_‰equícy
 = 2097000;

44 
uöt32_t
 
	grcc_≠b1_‰equícy
 = 2097000;

45 
uöt32_t
 
	grcc_≠b2_‰equícy
 = 2097000;

47 
	$rcc_osc_⁄
(
rcc_osc
 
osc
)

49 
osc
) {

50 
RCC_PLL
:

51 
RCC_CR
 |
RCC_CR_PLLON
;

53 
RCC_MSI
:

54 
RCC_CR
 |
RCC_CR_MSION
;

56 
RCC_HSE
:

57 
RCC_CR
 |
RCC_CR_HSEON
;

59 
RCC_HSI48
:

60 
RCC_CRRCR
 |
RCC_CRRCR_HSI48ON
;

62 
RCC_HSI16
:

63 
RCC_CR
 |
RCC_CR_HSI16ON
;

65 
RCC_LSE
:

66 
RCC_CSR
 |
RCC_CSR_LSEON
;

68 
RCC_LSI
:

69 
RCC_CSR
 |
RCC_CSR_LSION
;

72 
	}
}

74 
	$rcc_osc_off
(
rcc_osc
 
osc
)

76 
osc
) {

77 
RCC_PLL
:

78 
RCC_CR
 &~
RCC_CR_PLLON
;

80 
RCC_MSI
:

81 
RCC_CR
 &~
RCC_CR_MSION
;

83 
RCC_HSE
:

84 
RCC_CR
 &~
RCC_CR_HSEON
;

86 
RCC_HSI48
:

87 
RCC_CRRCR
 &~
RCC_CRRCR_HSI48ON
;

89 
RCC_HSI16
:

90 
RCC_CR
 &~
RCC_CR_HSI16ON
;

92 
RCC_LSE
:

93 
RCC_CSR
 &~
RCC_CSR_LSEON
;

95 
RCC_LSI
:

96 
RCC_CSR
 &~
RCC_CSR_LSION
;

99 
	}
}

110 
	$rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
)

112 
osc
) {

113 
RCC_PLL
:

114 
RCC_CICR
 |
RCC_CICR_PLLRDYC
;

116 
RCC_HSE
:

117 
RCC_CICR
 |
RCC_CICR_HSERDYC
;

119 
RCC_HSI48
:

120 
RCC_CICR
 |
RCC_CICR_HSI48RDYC
;

122 
RCC_HSI16
:

123 
RCC_CICR
 |
RCC_CICR_HSI16RDYC
;

125 
RCC_MSI
:

126 
RCC_CICR
 |
RCC_CICR_MSIRDYC
;

128 
RCC_LSE
:

129 
RCC_CICR
 |
RCC_CICR_LSERDYC
;

131 
RCC_LSI
:

132 
RCC_CICR
 |
RCC_CICR_LSIRDYC
;

135 
	}
}

142 
	$rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
)

144 
osc
) {

145 
RCC_PLL
:

146 
RCC_CIER
 |
RCC_CIER_PLLRDYIE
;

148 
RCC_HSE
:

149 
RCC_CIER
 |
RCC_CIER_HSERDYIE
;

151 
RCC_HSI48
:

152 
RCC_CIER
 |
RCC_CIER_HSI48RDYIE
;

154 
RCC_HSI16
:

155 
RCC_CIER
 |
RCC_CIER_HSI16RDYIE
;

157 
RCC_MSI
:

158 
RCC_CIER
 |
RCC_CIER_MSIRDYIE
;

160 
RCC_LSE
:

161 
RCC_CIER
 |
RCC_CIER_LSERDYIE
;

163 
RCC_LSI
:

164 
RCC_CIER
 |
RCC_CIER_LSIRDYIE
;

167 
	}
}

174 
	$rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
)

176 
osc
) {

177 
RCC_PLL
:

178 
RCC_CIER
 &~
RCC_CIER_PLLRDYIE
;

180 
RCC_HSE
:

181 
RCC_CIER
 &~
RCC_CIER_HSERDYIE
;

183 
RCC_HSI48
:

184 
RCC_CIER
 &~
RCC_CIER_HSI48RDYIE
;

186 
RCC_HSI16
:

187 
RCC_CIER
 &~
RCC_CIER_HSI16RDYIE
;

189 
RCC_MSI
:

190 
RCC_CIER
 &~
RCC_CIER_MSIRDYIE
;

192 
RCC_LSE
:

193 
RCC_CIER
 &~
RCC_CIER_LSERDYIE
;

195 
RCC_LSI
:

196 
RCC_CIER
 &~
RCC_CIER_LSIRDYIE
;

199 
	}
}

207 
	$rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
)

209 
osc
) {

210 
RCC_PLL
:

211  ((
RCC_CIFR
 & 
RCC_CIFR_PLLRDYF
) != 0);

213 
RCC_HSE
:

214  ((
RCC_CIFR
 & 
RCC_CIFR_HSERDYF
) != 0);

216 
RCC_HSI48
:

217  ((
RCC_CIFR
 & 
RCC_CIFR_HSI48RDYF
) != 0);

219 
RCC_HSI16
:

220  ((
RCC_CIFR
 & 
RCC_CIFR_HSI16RDYF
) != 0);

222 
RCC_MSI
:

223  ((
RCC_CIFR
 & 
RCC_CIFR_MSIRDYF
) != 0);

225 
RCC_LSE
:

226  ((
RCC_CIFR
 & 
RCC_CIFR_LSERDYF
) != 0);

228 
RCC_LSI
:

229  ((
RCC_CIFR
 & 
RCC_CIFR_LSIRDYF
) != 0);

233 
	`cm3_as£π_nŸ_ªached
();

234 
	}
}

237 
boﬁ
 
	$rcc_is_osc_ªady
(
rcc_osc
 
osc
)

239 
osc
) {

240 
RCC_PLL
:

241  
RCC_CR
 & 
RCC_CR_PLLRDY
;

242 
RCC_HSE
:

243  
RCC_CR
 & 
RCC_CR_HSERDY
;

244 
RCC_HSI16
:

245  
RCC_CR
 & 
RCC_CR_HSI16RDY
;

246 
RCC_HSI48
:

247  
RCC_CRRCR
 & 
RCC_CRRCR_HSI48RDY
;

248 
RCC_MSI
:

249  
RCC_CR
 & 
RCC_CR_MSIRDY
;

250 
RCC_LSE
:

251  
RCC_CSR
 & 
RCC_CSR_LSERDY
;

252 
RCC_LSI
:

253  
RCC_CSR
 & 
RCC_CSR_LSIRDY
;

255  
Ál£
;

256 
	}
}

258 
	$rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
)

260 !
	`rcc_is_osc_ªady
(
osc
));

261 
	}
}

266 
	$rcc_£t_hsi48_sour˚_rc48
()

268 
RCC_CCIPR
 |
RCC_CCIPR_HSI48SEL
;

269 
	}
}

274 
	$rcc_£t_hsi48_sour˚_∂l
()

276 
RCC_CCIPR
 &~
RCC_CCIPR_HSI48SEL
;

277 
	}
}

286 
	$rcc_£t_sys˛k_sour˚
(
rcc_osc
 
osc
)

288 
osc
) {

289 
RCC_PLL
:

290 
RCC_CFGR
 |
RCC_CFGR_SW_PLL
;

292 
RCC_HSE
:

293 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_SW_MASK
Ë| 
RCC_CFGR_SW_HSE
;

295 
RCC_HSI16
:

296 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_SW_MASK
Ë| 
RCC_CFGR_SW_HSI16
;

298 
RCC_MSI
:

299 
RCC_CFGR
 = (RCC_CFGR & ~
RCC_CFGR_SW_MASK
Ë| 
RCC_CFGR_SW_MSI
;

301 
RCC_HSI48
:

302 
RCC_LSE
:

303 
RCC_LSI
:

306 
	}
}

316 
	$rcc_£t_∂l_mu…ùlõr
(
uöt32_t
 
Á˘‹
)

318 
uöt32_t
 
ªg
 = 
RCC_CFGR


319 & ~(
RCC_CFGR_PLLMUL_MASK
 << 
RCC_CFGR_PLLMUL_SHIFT
);

320 
RCC_CFGR
 = 
ªg
 | (
Á˘‹
 << 
RCC_CFGR_PLLMUL_SHIFT
);

321 
	}
}

332 
	$rcc_£t_∂l_dividî
(
uöt32_t
 
Á˘‹
)

334 
uöt32_t
 
ªg
 = 
RCC_CFGR


335 & ~(
RCC_CFGR_PLLDIV_MASK
 << 
RCC_CFGR_PLLDIV_SHIFT
);

336 
RCC_CFGR
 = 
ªg
 | (
Á˘‹
 << 
RCC_CFGR_PLLDIV_SHIFT
);

337 
	}
}

343 
	$rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
)

345 
uöt32_t
 
ªg32
;

347 
ªg32
 = 
RCC_CFGR
;

348 
ªg32
 &~(
RCC_CFGR_PLLSRC_HSE_CLK
 << 16);

349 
RCC_CFGR
 = (
ªg32
 | (
∂l§c
<<16));

350 
	}
}

360 
	$rcc_£t_µª1
(
uöt32_t
 
µª
)

362 
uöt32_t
 
ªg
 = 
RCC_CFGR


363 & ~(
RCC_CFGR_PPRE1_MASK
 << 
RCC_CFGR_PPRE1_SHIFT
);

364 
RCC_CFGR
 = 
ªg
 | (
µª
 << 
RCC_CFGR_PPRE1_SHIFT
);

365 
	}
}

375 
	$rcc_£t_µª2
(
uöt32_t
 
µª
)

377 
uöt32_t
 
ªg
 = 
RCC_CFGR


378 & ~(
RCC_CFGR_PPRE2_MASK
 << 
RCC_CFGR_PPRE2_SHIFT
);

379 
RCC_CFGR
 = 
ªg
 | (
µª
 << 
RCC_CFGR_PPRE2_SHIFT
);

380 
	}
}

388 
	$rcc_£t_h¥e
(
uöt32_t
 
h¥e
)

390 
uöt32_t
 
ªg
 = 
RCC_CFGR
 & ~(
RCC_CFGR_HPRE_MASK
 << 
RCC_CFGR_HPRE_SHIFT
);

391 
RCC_CFGR
 = 
ªg
 | (
h¥e
 << 
RCC_CFGR_HPRE_SHIFT
);

392 
	}
}

398 
	$rcc_˛ock_£tup_∂l
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
)

401 i‡(
˛ock
->
∂l_sour˚
 =
RCC_CFGR_PLLSRC_HSE_CLK
) {

402 
	`rcc_osc_⁄
(
RCC_HSE
);

403 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

405 
	`rcc_osc_⁄
(
RCC_HSI16
);

406 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI16
);

409 
	`rcc_£t_h¥e
(
˛ock
->
h¥e
);

410 
	`rcc_£t_µª1
(
˛ock
->
µª1
);

411 
	`rcc_£t_µª2
(
˛ock
->
µª2
);

413 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

414 
	`pwr_£t_vos_sˇÀ
(
˛ock
->
vﬁège_sˇÀ
);

416 
	`rcc_osc_off
(
RCC_PLL
);

417 
	`rcc_is_osc_ªady
(
RCC_PLL
));

419 
	`Êash_¥e„tch_íabÀ
();

420 
	`Êash_£t_ws
(
˛ock
->
Êash_waô°©es
);

423 
	`rcc_£t_∂l_mu…ùlõr
(
˛ock
->
∂l_mul
);

424 
	`rcc_£t_∂l_dividî
(
˛ock
->
∂l_div
);

426 
	`rcc_osc_⁄
(
RCC_PLL
);

427 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

428 
	`rcc_£t_sys˛k_sour˚
(
RCC_PLL
);

431 
rcc_ahb_‰equícy
 = 
˛ock
->
ahb_‰equícy
;

432 
rcc_≠b1_‰equícy
 = 
˛ock
->
≠b1_‰equícy
;

433 
rcc_≠b2_‰equícy
 = 
˛ock
->
≠b2_‰equícy
;

434 
	}
}

	@libopencm3/lib/stm32/l0/rng.c

31 
	~<lib›ícm3/°m32/∫g.h
>

	@libopencm3/lib/stm32/l0/vector_nvic.c

15 #¥agm®
wók
 
wwdg_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pvd_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
πc_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
Êash_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
rcc_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
exti0_1_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
exti2_3_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
exti4_15_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
tsc_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
dma1_ch™√l1_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
dma1_ch™√l2_3_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
dma1_ch™√l4_5_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
adc_comp_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
Õtim1_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
ußπ4_5_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
tim2_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
tim3_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
tim6_dac_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
tim7_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ª£rved4_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
tim21_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
i2c3_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
tim22_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
i2c1_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
i2c2_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
•i2_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
Õu¨t1_´s_∫g_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
lcd_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
usb_i§
 = 
blockög_h™dÀr


55 
	#IRQ_HANDLERS
 \

56 [
NVIC_WWDG_IRQ
] = 
wwdg_i§
, \

57 [
NVIC_PVD_IRQ
] = 
pvd_i§
, \

58 [
NVIC_RTC_IRQ
] = 
πc_i§
, \

59 [
NVIC_FLASH_IRQ
] = 
Êash_i§
, \

60 [
NVIC_RCC_IRQ
] = 
rcc_i§
, \

61 [
NVIC_EXTI0_1_IRQ
] = 
exti0_1_i§
, \

62 [
NVIC_EXTI2_3_IRQ
] = 
exti2_3_i§
, \

63 [
NVIC_EXTI4_15_IRQ
] = 
exti4_15_i§
, \

64 [
NVIC_TSC_IRQ
] = 
tsc_i§
, \

65 [
NVIC_DMA1_CHANNEL1_IRQ
] = 
dma1_ch™√l1_i§
, \

66 [
NVIC_DMA1_CHANNEL2_3_IRQ
] = 
dma1_ch™√l2_3_i§
, \

67 [
NVIC_DMA1_CHANNEL4_5_IRQ
] = 
dma1_ch™√l4_5_i§
, \

68 [
NVIC_ADC_COMP_IRQ
] = 
adc_comp_i§
, \

69 [
NVIC_LPTIM1_IRQ
] = 
Õtim1_i§
, \

70 [
NVIC_USART4_5_IRQ
] = 
ußπ4_5_i§
, \

71 [
NVIC_TIM2_IRQ
] = 
tim2_i§
, \

72 [
NVIC_TIM3_IRQ
] = 
tim3_i§
, \

73 [
NVIC_TIM6_DAC_IRQ
] = 
tim6_dac_i§
, \

74 [
NVIC_TIM7_IRQ
] = 
tim7_i§
, \

75 [
NVIC_RESERVED4_IRQ
] = 
ª£rved4_i§
, \

76 [
NVIC_TIM21_IRQ
] = 
tim21_i§
, \

77 [
NVIC_I2C3_IRQ
] = 
i2c3_i§
, \

78 [
NVIC_TIM22_IRQ
] = 
tim22_i§
, \

79 [
NVIC_I2C1_IRQ
] = 
i2c1_i§
, \

80 [
NVIC_I2C2_IRQ
] = 
i2c2_i§
, \

81 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

82 [
NVIC_SPI2_IRQ
] = 
•i2_i§
, \

83 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

84 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

85 [
NVIC_LPUART1_AES_RNG_IRQ
] = 
Õu¨t1_´s_∫g_i§
, \

86 [
NVIC_LCD_IRQ
] = 
lcd_i§
, \

87 [
NVIC_USB_IRQ
] = 
usb_i§


	)

	@libopencm3/lib/stm32/l1/adc.c

28 
	~<lib›ícm3/°m32/adc.h
>

43 
	$adc_powî_⁄
(
uöt32_t
 
adc
)

45 
	`ADC_CR2
(
adc
Ë|
ADC_CR2_ADON
;

46 
	}
}

59 
	$adc_£t_ßm∂e_time
(
uöt32_t
 
adc
, 
uöt8_t
 
ch™√l
, uöt8_à
time
)

61 
uöt32_t
 
ªg32
;

63 i‡(
ch™√l
 < 10) {

64 
ªg32
 = 
	`ADC_SMPR3
(
adc
);

65 
ªg32
 &~(0x7 << (
ch™√l
 * 3));

66 
ªg32
 |(
time
 << (
ch™√l
 * 3));

67 
	`ADC_SMPR3
(
adc
Ë
ªg32
;

68 } i‡(
ch™√l
 < 20) {

69 
ªg32
 = 
	`ADC_SMPR2
(
adc
);

70 
ªg32
 &~(0x7 << ((
ch™√l
 - 10) * 3));

71 
ªg32
 |(
time
 << ((
ch™√l
 - 10) * 3));

72 
	`ADC_SMPR2
(
adc
Ë
ªg32
;

74 
ªg32
 = 
	`ADC_SMPR1
(
adc
);

75 
ªg32
 &~(0x7 << ((
ch™√l
 - 20) * 3));

76 
ªg32
 |(
time
 << ((
ch™√l
 - 20) * 3));

77 
	`ADC_SMPR1
(
adc
Ë
ªg32
;

79 
	}
}

91 
	$adc_£t_ßm∂e_time_⁄_Æl_ch™√ls
(
uöt32_t
 
adc
, 
uöt8_t
 
time
)

93 
uöt8_t
 
i
;

94 
uöt32_t
 
ªg32
 = 0;

96 
i
 = 0; i <= 9; i++) {

97 
ªg32
 |(
time
 << (
i
 * 3));

99 
	`ADC_SMPR0
(
adc
Ë
ªg32
;

100 
	`ADC_SMPR1
(
adc
Ë
ªg32
;

101 
	`ADC_SMPR2
(
adc
Ë
ªg32
;

102 
	`ADC_SMPR3
(
adc
Ë
ªg32
;

103 
	}
}

112 
	$adc_íabÀ_ãm≥øtuª_£ns‹
()

114 
ADC_CCR
 |
ADC_CCR_TSVREFE
;

115 
	}
}

124 
	$adc_dißbÀ_ãm≥øtuª_£ns‹
()

126 
ADC_CCR
 &~
ADC_CCR_TSVREFE
;

127 
	}
}

135 
	$adc_dißbÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
)

137 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_EXTEN_MASK
;

138 
	}
}

146 
	$adc_dißbÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
)

148 
	`ADC_CR2
(
adc
Ë&~
ADC_CR2_JEXTEN_MASK
;

149 
	}
}

164 
	$adc_íabÀ_exã∫Æ_åiggî_ªguœr
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

165 
uöt32_t
 
pﬁ¨ôy
)

167 
uöt32_t
 
ªg32
 = 
	`ADC_CR2
(
adc
);

169 
ªg32
 &~(
ADC_CR2_EXTSEL_MASK
 | 
ADC_CR2_EXTEN_MASK
);

170 
ªg32
 |(
åiggî
 | 
pﬁ¨ôy
);

171 
	`ADC_CR2
(
adc
Ë
ªg32
;

172 
	}
}

186 
	$adc_íabÀ_exã∫Æ_åiggî_öje˘ed
(
uöt32_t
 
adc
, uöt32_à
åiggî
,

187 
uöt32_t
 
pﬁ¨ôy
)

189 
uöt32_t
 
ªg32
 = 
	`ADC_CR2
(
adc
);

191 
ªg32
 &~(
ADC_CR2_JEXTSEL_MASK
 | 
ADC_CR2_JEXTEN_MASK
);

192 
ªg32
 |(
åiggî
 | 
pﬁ¨ôy
);

193 
	`ADC_CR2
(
adc
Ë
ªg32
;

194 
	}
}

	@libopencm3/lib/stm32/l1/dac.c

31 
	~<lib›ícm3/°m32/dac.h
>

	@libopencm3/lib/stm32/l1/dma.c

31 
	~<lib›ícm3/°m32/dma.h
>

	@libopencm3/lib/stm32/l1/flash.c

50 
	~<lib›ícm3/°m32/Êash.h
>

57 
	$Êash_64bô_íabÀ
()

59 
FLASH_ACR
 |
FLASH_ACR_ACC64
;

60 
	}
}

69 
	$Êash_64bô_dißbÀ
()

71 
FLASH_ACR
 &~
FLASH_ACR_ACC64
;

72 
	}
}

	@libopencm3/lib/stm32/l1/gpio.c

31 
	~<lib›ícm3/°m32/gpio.h
>

	@libopencm3/lib/stm32/l1/i2c.c

31 
	~<lib›ícm3/°m32/i2c.h
>

	@libopencm3/lib/stm32/l1/lcd.c

20 
	~<lib›ícm3/°m32/l1/lcd.h
>

21 
	~<lib›ícm3/°m32/rcc.h
>

23 
	$lcd_íabÀ
()

25 
LCD_CR
 |
LCD_CR_LCDEN
;

26 
	}
}

28 
	$lcd_upd©e
()

30 
LCD_SR
 |
LCD_SR_UDR
;

31 
	}
}

33 
	$lcd_waô_f‹_lcd_íabÀd
()

35 (
LCD_SR
 & 
LCD_SR_ENS
) == 0);

36 
	}
}

38 
	$lcd_waô_f‹_°ï_up_ªady
()

40 (
LCD_SR
 & 
LCD_SR_RDY
) == 0);

41 
	}
}

43 
	$lcd_waô_f‹_upd©e_ªady
()

45 (
LCD_SR
 & 
LCD_SR_UDR
) != 0);

46 
	}
}

48 
	$lcd_is_íabÀd
()

50  ((
LCD_SR
 & 
LCD_SR_ENS
) != 0);

51 
	}
}

53 
	$lcd_is_°ï_up_ªady
()

55  ((
LCD_SR
 & 
LCD_SR_RDY
) != 0);

56 
	}
}

58 
	$lcd_is_f‹_upd©e_ªady
()

60  ((
LCD_SR
 & 
LCD_SR_UDR
) == 0);

61 
	}
}

63 
	$lcd_£t_c⁄åa°
(
uöt8_t
 
c⁄åa°
)

65 
LCD_FCR
 &~(
LCD_FCR_CC_MASK
 << 
LCD_FCR_CC_SHIFT
);

66 
LCD_FCR
 |
c⁄åa°
 << 
LCD_FCR_CC_SHIFT
;

67 
	}
}

69 
	$lcd_£t_büs
(
uöt8_t
 
büs
)

71 
LCD_CR
 &~(
LCD_CR_BIAS_MASK
 << 
LCD_CR_BIAS_SHIFT
);

72 
LCD_CR
 |
büs
 << 
LCD_CR_BIAS_SHIFT
;

73 
	}
}

75 
	$lcd_£t_duty
(
uöt8_t
 
duty
)

77 
LCD_CR
 &~(
LCD_CR_DUTY_MASK
 << 
LCD_CR_DUTY_SHIFT
);

78 
LCD_CR
 |
duty
 << 
LCD_CR_DUTY_SHIFT
;

79 
	}
}

81 
	$lcd_£t_¥esˇÀr
(
uöt8_t
 
ps
)

83 
LCD_FCR
 &~(
LCD_FCR_PS_MASK
 << 
LCD_FCR_PS_SHIFT
);

84 
LCD_FCR
 |
ps
 << 
LCD_FCR_PS_SHIFT
;

85 
	}
}

87 
	$lcd_£t_dividî
(
uöt8_t
 
div
)

89 
LCD_FCR
 &~(
LCD_FCR_DIV_MASK
 << 
LCD_FCR_DIV_SHIFT
);

90 
LCD_FCR
 |
div
 << 
LCD_FCR_DIV_SHIFT
;

91 
	}
}

93 
	$lcd_íabÀ_£gmít_mu…ùÀxög
()

95 
LCD_CR
 |
LCD_CR_MUX_SEG
;

96 
	}
}

98 
	$lcd_dißbÀ_£gmít_mu…ùÀxög
()

100 
LCD_CR
 &~
LCD_CR_MUX_SEG
;

101 
	}
}

103 
	$lcd_£t_ª‰esh_‰equícy
(
uöt32_t
 
‰equícy
)

105 
uöt32_t
 
duty
, 
lcd_˛ock
;

106 (
LCD_CR
 >> 
LCD_CR_DUTY_SHIFT
Ë& 
LCD_CR_DUTY_MASK
) {

107 
LCD_CR_DUTY_STATIC
:

108 
duty
 = 1;

110 
LCD_CR_DUTY_1_2
:

111 
duty
 = 2;

113 
LCD_CR_DUTY_1_3
:

114 
duty
 = 3;

116 
LCD_CR_DUTY_1_4
:

117 
duty
 = 4;

119 
LCD_CR_DUTY_1_8
:

120 
duty
 = 8;

127 (
RCC_CSR
 >> 
RCC_CSR_RTCSEL_SHIFT
Ë& 
RCC_CSR_RTCSEL_MASK
) {

128 
RCC_CSR_RTCSEL_LSE
:

129 
lcd_˛ock
 = 32786;

131 
RCC_CSR_RTCSEL_LSI
:

132 
lcd_˛ock
 = 37000;

134 
RCC_CSR_RTCSEL_HSI
:

135 
lcd_˛ock
 = 16000000;

143 
uöt32_t
 
ps_mul_div
 = 
lcd_˛ock
 / (
duty
 * 
‰equícy
);

145 
div
, 
ps
 = 0;

146 
ps_mul_div
 > 32) {

147 
ps_mul_div
 >>= 1;

148 
ps
++;

150 
div
 = 
ps_mul_div
 - 16;

152 
	`lcd_£t_¥esˇÀr
(
ps
);

153 
	`lcd_£t_dividî
(
div
);

154 
	}
}

	@libopencm3/lib/stm32/l1/rcc.c

42 
	~<lib›ícm3/°m32/rcc.h
>

43 
	~<lib›ícm3/°m32/Êash.h
>

44 
	~<lib›ícm3/°m32/pwr.h
>

47 
uöt32_t
 
	grcc_ahb_‰equícy
 = 2097000;

48 
uöt32_t
 
	grcc_≠b1_‰equícy
 = 2097000;

49 
uöt32_t
 
	grcc_≠b2_‰equícy
 = 2097000;

51 c⁄° 
rcc_˛ock_sˇÀ
 
	grcc_˛ock_c⁄fig
[
RCC_CLOCK_CONFIG_END
] = {

53 .
∂l_sour˚
 = 
RCC_CFGR_PLLSRC_HSI_CLK
,

54 .
	g∂l_mul
 = 
RCC_CFGR_PLLMUL_MUL3
,

55 .
	g∂l_div
 = 
RCC_CFGR_PLLDIV_DIV2
,

56 .
	gh¥e
 = 
RCC_CFGR_HPRE_SYSCLK_NODIV
,

57 .
	gµª1
 = 
RCC_CFGR_PPRE1_HCLK_NODIV
,

58 .
	gµª2
 = 
RCC_CFGR_PPRE2_HCLK_NODIV
,

59 .
	gvﬁège_sˇÀ
 = 
PWR_SCALE1
,

60 .
	gÊash_waô°©es
 = 1,

61 .
	gahb_‰equícy
 = 24000000,

62 .
	g≠b1_‰equícy
 = 24000000,

63 .
	g≠b2_‰equícy
 = 24000000,

66 .
	g∂l_sour˚
 = 
RCC_CFGR_PLLSRC_HSI_CLK
,

67 .
	g∂l_mul
 = 
RCC_CFGR_PLLMUL_MUL6
,

68 .
	g∂l_div
 = 
RCC_CFGR_PLLDIV_DIV3
,

69 .
	gh¥e
 = 
RCC_CFGR_HPRE_SYSCLK_NODIV
,

70 .
	gµª1
 = 
RCC_CFGR_PPRE1_HCLK_NODIV
,

71 .
	gµª2
 = 
RCC_CFGR_PPRE2_HCLK_NODIV
,

72 .
	gvﬁège_sˇÀ
 = 
PWR_SCALE1
,

73 .
	gÊash_waô°©es
 = 1,

74 .
	gahb_‰equícy
 = 32000000,

75 .
	g≠b1_‰equícy
 = 32000000,

76 .
	g≠b2_‰equícy
 = 32000000,

79 .
	gh¥e
 = 
RCC_CFGR_HPRE_SYSCLK_NODIV
,

80 .
	gµª1
 = 
RCC_CFGR_PPRE1_HCLK_NODIV
,

81 .
	gµª2
 = 
RCC_CFGR_PPRE2_HCLK_NODIV
,

82 .
	gvﬁège_sˇÀ
 = 
PWR_SCALE1
,

83 .
	gÊash_waô°©es
 = 0,

84 .
	gahb_‰equícy
 = 16000000,

85 .
	g≠b1_‰equícy
 = 16000000,

86 .
	g≠b2_‰equícy
 = 16000000,

89 .
	gh¥e
 = 
RCC_CFGR_HPRE_SYSCLK_DIV4
,

90 .
	gµª1
 = 
RCC_CFGR_PPRE1_HCLK_NODIV
,

91 .
	gµª2
 = 
RCC_CFGR_PPRE2_HCLK_NODIV
,

92 .
	gvﬁège_sˇÀ
 = 
PWR_SCALE1
,

93 .
	gÊash_waô°©es
 = 0,

94 .
	gahb_‰equícy
 = 4000000,

95 .
	g≠b1_‰equícy
 = 4000000,

96 .
	g≠b2_‰equícy
 = 4000000,

99 .
	gh¥e
 = 
RCC_CFGR_HPRE_SYSCLK_NODIV
,

100 .
	gµª1
 = 
RCC_CFGR_PPRE1_HCLK_NODIV
,

101 .
	gµª2
 = 
RCC_CFGR_PPRE2_HCLK_NODIV
,

102 .
	gvﬁège_sˇÀ
 = 
PWR_SCALE1
,

103 .
	gÊash_waô°©es
 = 0,

104 .
	gahb_‰equícy
 = 4194000,

105 .
	g≠b1_‰equícy
 = 4194000,

106 .
	g≠b2_‰equícy
 = 4194000,

107 .
	gmsi_ønge
 = 
RCC_ICSCR_MSIRANGE_4MHZ
,

110 .
	gh¥e
 = 
RCC_CFGR_HPRE_SYSCLK_NODIV
,

111 .
	gµª1
 = 
RCC_CFGR_PPRE1_HCLK_NODIV
,

112 .
	gµª2
 = 
RCC_CFGR_PPRE2_HCLK_NODIV
,

113 .
	gvﬁège_sˇÀ
 = 
PWR_SCALE1
,

114 .
	gÊash_waô°©es
 = 0,

115 .
	gahb_‰equícy
 = 2097000,

116 .
	g≠b1_‰equícy
 = 2097000,

117 .
	g≠b2_‰equícy
 = 2097000,

118 .
	gmsi_ønge
 = 
RCC_ICSCR_MSIRANGE_2MHZ
,

122 
	$rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
)

124 
osc
) {

125 
RCC_PLL
:

126 
RCC_CIR
 |
RCC_CIR_PLLRDYC
;

128 
RCC_HSE
:

129 
RCC_CIR
 |
RCC_CIR_HSERDYC
;

131 
RCC_HSI
:

132 
RCC_CIR
 |
RCC_CIR_HSIRDYC
;

134 
RCC_LSE
:

135 
RCC_CIR
 |
RCC_CIR_LSERDYC
;

137 
RCC_LSI
:

138 
RCC_CIR
 |
RCC_CIR_LSIRDYC
;

140 
RCC_MSI
:

141 
RCC_CIR
 |
RCC_CIR_MSIRDYC
;

144 
	}
}

146 
	$rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
)

148 
osc
) {

149 
RCC_PLL
:

150 
RCC_CIR
 |
RCC_CIR_PLLRDYIE
;

152 
RCC_HSE
:

153 
RCC_CIR
 |
RCC_CIR_HSERDYIE
;

155 
RCC_HSI
:

156 
RCC_CIR
 |
RCC_CIR_HSIRDYIE
;

158 
RCC_LSE
:

159 
RCC_CIR
 |
RCC_CIR_LSERDYIE
;

161 
RCC_LSI
:

162 
RCC_CIR
 |
RCC_CIR_LSIRDYIE
;

164 
RCC_MSI
:

165 
RCC_CIR
 |
RCC_CIR_MSIRDYIE
;

168 
	}
}

170 
	$rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
)

172 
osc
) {

173 
RCC_PLL
:

174 
RCC_CIR
 &~
RCC_CIR_PLLRDYIE
;

176 
RCC_HSE
:

177 
RCC_CIR
 &~
RCC_CIR_HSERDYIE
;

179 
RCC_HSI
:

180 
RCC_CIR
 &~
RCC_CIR_HSIRDYIE
;

182 
RCC_LSE
:

183 
RCC_CIR
 &~
RCC_CIR_LSERDYIE
;

185 
RCC_LSI
:

186 
RCC_CIR
 &~
RCC_CIR_LSIRDYIE
;

188 
RCC_MSI
:

189 
RCC_CIR
 &~
RCC_CIR_MSIRDYIE
;

192 
	}
}

194 
	$rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
)

196 
osc
) {

197 
RCC_PLL
:

198  ((
RCC_CIR
 & 
RCC_CIR_PLLRDYF
) != 0);

200 
RCC_HSE
:

201  ((
RCC_CIR
 & 
RCC_CIR_HSERDYF
) != 0);

203 
RCC_HSI
:

204  ((
RCC_CIR
 & 
RCC_CIR_HSIRDYF
) != 0);

206 
RCC_LSE
:

207  ((
RCC_CIR
 & 
RCC_CIR_LSERDYF
) != 0);

209 
RCC_LSI
:

210  ((
RCC_CIR
 & 
RCC_CIR_LSIRDYF
) != 0);

212 
RCC_MSI
:

213  ((
RCC_CIR
 & 
RCC_CIR_MSIRDYF
) != 0);

219 
	}
}

221 
	$rcc_css_öt_˛ór
()

223 
RCC_CIR
 |
RCC_CIR_CSSC
;

224 
	}
}

226 
	$rcc_css_öt_Êag
()

228  ((
RCC_CIR
 & 
RCC_CIR_CSSF
) != 0);

229 
	}
}

231 
boﬁ
 
	$rcc_is_osc_ªady
(
rcc_osc
 
osc
)

233 
osc
) {

234 
RCC_PLL
:

235  
RCC_CR
 & 
RCC_CR_PLLRDY
;

236 
RCC_HSE
:

237  
RCC_CR
 & 
RCC_CR_HSERDY
;

238 
RCC_HSI
:

239  
RCC_CR
 & 
RCC_CR_HSIRDY
;

240 
RCC_MSI
:

241  
RCC_CR
 & 
RCC_CR_MSIRDY
;

242 
RCC_LSE
:

243  
RCC_CSR
 & 
RCC_CSR_LSERDY
;

244 
RCC_LSI
:

245  
RCC_CSR
 & 
RCC_CSR_LSIRDY
;

247  
Ál£
;

248 
	}
}

250 
	$rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
)

252 !
	`rcc_is_osc_ªady
(
osc
));

253 
	}
}

255 
	$rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
)

257 
osc
) {

258 
RCC_PLL
:

259 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

260 
RCC_CFGR_SWS_SYSCLKSEL_PLLCLK
);

262 
RCC_HSE
:

263 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

264 
RCC_CFGR_SWS_SYSCLKSEL_HSECLK
);

266 
RCC_HSI
:

267 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

268 
RCC_CFGR_SWS_SYSCLKSEL_HSICLK
);

270 
RCC_MSI
:

271 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
) !=

272 
RCC_CFGR_SWS_SYSCLKSEL_MSICLK
);

278 
	}
}

280 
	$rcc_osc_⁄
(
rcc_osc
 
osc
)

282 
osc
) {

283 
RCC_PLL
:

284 
RCC_CR
 |
RCC_CR_PLLON
;

286 
RCC_MSI
:

287 
RCC_CR
 |
RCC_CR_MSION
;

289 
RCC_HSE
:

290 
RCC_CR
 |
RCC_CR_HSEON
;

292 
RCC_HSI
:

293 
RCC_CR
 |
RCC_CR_HSION
;

295 
RCC_LSE
:

296 
RCC_CSR
 |
RCC_CSR_LSEON
;

298 
RCC_LSI
:

299 
RCC_CSR
 |
RCC_CSR_LSION
;

302 
	}
}

304 
	$rcc_osc_off
(
rcc_osc
 
osc
)

306 
osc
) {

307 
RCC_PLL
:

308 
RCC_CR
 &~
RCC_CR_PLLON
;

310 
RCC_MSI
:

311 
RCC_CR
 &~
RCC_CR_MSION
;

313 
RCC_HSE
:

314 
RCC_CR
 &~
RCC_CR_HSEON
;

316 
RCC_HSI
:

317 
RCC_CR
 &~
RCC_CR_HSION
;

319 
RCC_LSE
:

320 
RCC_CSR
 &~
RCC_CSR_LSEON
;

322 
RCC_LSI
:

323 
RCC_CSR
 &~
RCC_CSR_LSION
;

326 
	}
}

328 
	$rcc_css_íabÀ
()

330 
RCC_CR
 |
RCC_CR_CSSON
;

331 
	}
}

333 
	$rcc_css_dißbÀ
()

335 
RCC_CR
 &~
RCC_CR_CSSON
;

336 
	}
}

342 
	$rcc_£t_msi_ønge
(
uöt32_t
 
ønge
)

344 
uöt32_t
 
ªg
 = 
RCC_ICSCR
;

345 
ªg
 &~(
RCC_ICSCR_MSIRANGE_MASK
 << 
RCC_ICSCR_MSIRANGE_SHIFT
);

346 
ªg
 |(
ønge
 << 
RCC_ICSCR_MSIRANGE_SHIFT
);

347 
RCC_ICSCR
 = 
ªg
;

348 
	}
}

350 
	$rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
)

352 
uöt32_t
 
ªg32
;

354 
ªg32
 = 
RCC_CFGR
;

355 
ªg32
 &~(
RCC_CFGR_SW_MASK
 << 
RCC_CFGR_SW_SHIFT
);

356 
RCC_CFGR
 = (
ªg32
 | 
˛k
 << 
RCC_CFGR_SW_SHIFT
);

357 
	}
}

359 
	$rcc_£t_∂l_c⁄figuøti⁄
(
uöt32_t
 
sour˚
, uöt32_à
mu…ùlõr
,

360 
uöt32_t
 
divis‹
)

362 
uöt32_t
 
ªg32
;

364 
ªg32
 = 
RCC_CFGR
;

365 
ªg32
 &~(
RCC_CFGR_PLLDIV_MASK
 << 
RCC_CFGR_PLLDIV_SHIFT
);

366 
ªg32
 &~(
RCC_CFGR_PLLMUL_MASK
 << 
RCC_CFGR_PLLMUL_SHIFT
);

367 
ªg32
 &= ~(1 << 16);

368 
ªg32
 |(
sour˚
 << 16);

369 
ªg32
 |(
mu…ùlõr
 << 
RCC_CFGR_PLLMUL_SHIFT
);

370 
ªg32
 |(
divis‹
 << 
RCC_CFGR_PLLDIV_SHIFT
);

371 
RCC_CFGR
 = 
ªg32
;

372 
	}
}

374 
	$rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
)

376 
uöt32_t
 
ªg32
;

378 
ªg32
 = 
RCC_CFGR
;

379 
ªg32
 &= ~(1 << 16);

380 
RCC_CFGR
 = (
ªg32
 | (
∂l§c
 << 16));

381 
	}
}

383 
	$rcc_£t_µª2
(
uöt32_t
 
µª2
)

385 
uöt32_t
 
ªg32
;

387 
ªg32
 = 
RCC_CFGR
;

388 
ªg32
 &~(
RCC_CFGR_PPRE2_MASK
 << 
RCC_CFGR_PPRE2_SHIFT
);

389 
RCC_CFGR
 = (
ªg32
 | (
µª2
 << 
RCC_CFGR_PPRE2_SHIFT
));

390 
	}
}

392 
	$rcc_£t_µª1
(
uöt32_t
 
µª1
)

394 
uöt32_t
 
ªg32
;

396 
ªg32
 = 
RCC_CFGR
;

397 
ªg32
 &~(
RCC_CFGR_PPRE1_MASK
 << 
RCC_CFGR_PPRE1_SHIFT
);

398 
RCC_CFGR
 = (
ªg32
 | (
µª1
 << 
RCC_CFGR_PPRE1_SHIFT
));

399 
	}
}

401 
	$rcc_£t_h¥e
(
uöt32_t
 
h¥e
)

403 
uöt32_t
 
ªg32
;

405 
ªg32
 = 
RCC_CFGR
;

406 
ªg32
 &~(
RCC_CFGR_HPRE_MASK
 << 
RCC_CFGR_HPRE_SHIFT
);

407 
RCC_CFGR
 = (
ªg32
 | (
h¥e
 << 
RCC_CFGR_HPRE_SHIFT
));

408 
	}
}

410 
	$rcc_£t_π˝ª
(
uöt32_t
 
π˝ª
)

412 
uöt32_t
 
ªg32
;

414 
ªg32
 = 
RCC_CR
;

415 
ªg32
 &~(
RCC_CR_RTCPRE_MASK
 << 
RCC_CR_RTCPRE_SHIFT
);

416 
RCC_CR
 = (
ªg32
 | (
π˝ª
 << 
RCC_CR_RTCPRE_SHIFT
));

417 
	}
}

419 
uöt32_t
 
	$rcc_sy°em_˛ock_sour˚
()

422  (
RCC_CFGR
 & 0x000c) >> 2;

423 
	}
}

425 
	$rcc_πc_£À˘_˛ock
(
uöt32_t
 
˛ock
)

427 
RCC_CSR
 &~(
RCC_CSR_RTCSEL_MASK
 << 
RCC_CSR_RTCSEL_SHIFT
);

428 
RCC_CSR
 |(
˛ock
 << 
RCC_CSR_RTCSEL_SHIFT
);

429 
	}
}

431 
	$rcc_˛ock_£tup_msi
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
)

434 
	`rcc_£t_msi_ønge
(
˛ock
->
msi_ønge
);

435 
	`rcc_osc_⁄
(
RCC_MSI
);

436 
	`rcc_waô_f‹_osc_ªady
(
RCC_MSI
);

439 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_MSICLK
);

445 
	`rcc_£t_h¥e
(
˛ock
->
h¥e
);

446 
	`rcc_£t_µª1
(
˛ock
->
µª1
);

447 
	`rcc_£t_µª2
(
˛ock
->
µª2
);

449 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

450 
	`pwr_£t_vos_sˇÀ
(
˛ock
->
vﬁège_sˇÀ
);

453 
	`Êash_64bô_íabÀ
();

454 
	`Êash_¥e„tch_íabÀ
();

455 
	`Êash_£t_ws
(
˛ock
->
Êash_waô°©es
);

458 
rcc_ahb_‰equícy
 = 
˛ock
->
ahb_‰equícy
;

459 
rcc_≠b1_‰equícy
 = 
˛ock
->
≠b1_‰equícy
;

460 
rcc_≠b2_‰equícy
 = 
˛ock
->
≠b2_‰equícy
;

461 
	}
}

472 
	$rcc_˛ock_£tup_hsi
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
)

475 
	`rcc_osc_⁄
(
RCC_HSI
);

476 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

479 
	`Êash_64bô_íabÀ
();

480 
	`Êash_¥e„tch_íabÀ
();

483 i‡(
˛ock
->
ahb_‰equícy
 > 
rcc_ahb_‰equícy
) {

485 
	`pwr_£t_vos_sˇÀ
(
˛ock
->
vﬁège_sˇÀ
);

486 
	`rcc_£t_h¥e
(
˛ock
->
h¥e
);

487 
	`rcc_£t_µª1
(
˛ock
->
µª1
);

488 
	`rcc_£t_µª2
(
˛ock
->
µª2
);

489 
	`Êash_£t_ws
(
˛ock
->
Êash_waô°©es
);

492 
	`rcc_£t_h¥e
(
˛ock
->
h¥e
);

493 
	`rcc_£t_µª1
(
˛ock
->
µª1
);

494 
	`rcc_£t_µª2
(
˛ock
->
µª2
);

495 
	`Êash_£t_ws
(
˛ock
->
Êash_waô°©es
);

496 
	`pwr_£t_vos_sˇÀ
(
˛ock
->
vﬁège_sˇÀ
);

499 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

500 
PWR_CSR
 & 
PWR_CSR_VOSF
) {

503 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_HSICLK
);

506 
rcc_ahb_‰equícy
 = 
˛ock
->
ahb_‰equícy
;

507 
rcc_≠b1_‰equícy
 = 
˛ock
->
≠b1_‰equícy
;

508 
rcc_≠b2_‰equícy
 = 
˛ock
->
≠b2_‰equícy
;

509 
	}
}

511 
	$rcc_˛ock_£tup_∂l
(c⁄° 
rcc_˛ock_sˇÀ
 *
˛ock
)

514 i‡(
˛ock
->
∂l_sour˚
 =
RCC_CFGR_PLLSRC_HSE_CLK
) {

515 
	`rcc_osc_⁄
(
RCC_HSE
);

516 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSE
);

518 
	`rcc_osc_⁄
(
RCC_HSI
);

519 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

526 
	`rcc_£t_h¥e
(
˛ock
->
h¥e
);

527 
	`rcc_£t_µª1
(
˛ock
->
µª1
);

528 
	`rcc_£t_µª2
(
˛ock
->
µª2
);

530 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_PWR
);

531 
	`pwr_£t_vos_sˇÀ
(
˛ock
->
vﬁège_sˇÀ
);

534 
	`Êash_64bô_íabÀ
();

535 
	`Êash_¥e„tch_íabÀ
();

536 
	`Êash_£t_ws
(
˛ock
->
Êash_waô°©es
);

538 
	`rcc_£t_∂l_c⁄figuøti⁄
(
˛ock
->
∂l_sour˚
, clock->
∂l_mul
,

539 
˛ock
->
∂l_div
);

542 
	`rcc_osc_⁄
(
RCC_PLL
);

543 
	`rcc_waô_f‹_osc_ªady
(
RCC_PLL
);

546 
	`rcc_£t_sys˛k_sour˚
(
RCC_CFGR_SW_SYSCLKSEL_PLLCLK
);

549 
rcc_ahb_‰equícy
 = 
˛ock
->
ahb_‰equícy
;

550 
rcc_≠b1_‰equícy
 = 
˛ock
->
≠b1_‰equícy
;

551 
rcc_≠b2_‰equícy
 = 
˛ock
->
≠b2_‰equícy
;

552 
	}
}

	@libopencm3/lib/stm32/l1/rtc.c

31 
	~<lib›ícm3/°m32/πc.h
>

	@libopencm3/lib/stm32/l1/spi.c

31 
	~<lib›ícm3/°m32/•i.h
>

	@libopencm3/lib/stm32/l1/timer.c

35 
	~<lib›ícm3/°m32/timî.h
>

47 
	$timî_£t_›ti⁄
(
uöt32_t
 
timî_≥rùhîÆ
, uöt32_à
›ti⁄
)

49 i‡(
timî_≥rùhîÆ
 =
TIM2
) {

50 
	`TIM_OR
(
timî_≥rùhîÆ
Ë&~
TIM2_OR_ITR1_RMP_MASK
;

51 
	`TIM_OR
(
timî_≥rùhîÆ
Ë|
›ti⁄
;

52 } i‡(
timî_≥rùhîÆ
 =
TIM3
) {

53 
	`TIM_OR
(
timî_≥rùhîÆ
Ë&~
TIM3_OR_ITR2_RMP_MASK
;

54 
	`TIM_OR
(
timî_≥rùhîÆ
Ë|
›ti⁄
;

56 
	}
}

	@libopencm3/lib/stm32/l1/vector_nvic.c

15 #¥agm®
wók
 
wwdg_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pvd_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
èm≥r_°amp_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πc_wkup_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
Êash_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
rcc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
exti0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
exti1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
exti2_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
exti3_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
exti4_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
dma1_ch™√l1_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
dma1_ch™√l2_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
dma1_ch™√l3_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
dma1_ch™√l4_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
dma1_ch™√l5_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
dma1_ch™√l6_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
dma1_ch™√l7_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
adc1_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
usb_hp_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
usb_Õ_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
dac_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
comp_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
exti9_5_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
lcd_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
tim9_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
tim10_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tim11_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tim2_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
tim3_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
tim4_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
i2c1_ev_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
i2c1_î_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
i2c2_ev_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
i2c2_î_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
•i2_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
exti15_10_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
πc_Æ¨m_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
usb_fs_wakeup_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
tim6_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
tim7_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
sdio_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
tim5_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
•i3_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
u¨t4_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
u¨t5_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
dma2_ch1_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
dma2_ch2_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
dma2_ch3_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
dma2_ch4_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
dma2_ch5_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
´s_i§
 = 
blockög_h™dÀr


71 #¥agm®
wók
 
comp_acq_i§
 = 
blockög_h™dÀr


80 
	#IRQ_HANDLERS
 \

81 [
NVIC_WWDG_IRQ
] = 
wwdg_i§
, \

82 [
NVIC_PVD_IRQ
] = 
pvd_i§
, \

83 [
NVIC_TAMPER_STAMP_IRQ
] = 
èm≥r_°amp_i§
, \

84 [
NVIC_RTC_WKUP_IRQ
] = 
πc_wkup_i§
, \

85 [
NVIC_FLASH_IRQ
] = 
Êash_i§
, \

86 [
NVIC_RCC_IRQ
] = 
rcc_i§
, \

87 [
NVIC_EXTI0_IRQ
] = 
exti0_i§
, \

88 [
NVIC_EXTI1_IRQ
] = 
exti1_i§
, \

89 [
NVIC_EXTI2_IRQ
] = 
exti2_i§
, \

90 [
NVIC_EXTI3_IRQ
] = 
exti3_i§
, \

91 [
NVIC_EXTI4_IRQ
] = 
exti4_i§
, \

92 [
NVIC_DMA1_CHANNEL1_IRQ
] = 
dma1_ch™√l1_i§
, \

93 [
NVIC_DMA1_CHANNEL2_IRQ
] = 
dma1_ch™√l2_i§
, \

94 [
NVIC_DMA1_CHANNEL3_IRQ
] = 
dma1_ch™√l3_i§
, \

95 [
NVIC_DMA1_CHANNEL4_IRQ
] = 
dma1_ch™√l4_i§
, \

96 [
NVIC_DMA1_CHANNEL5_IRQ
] = 
dma1_ch™√l5_i§
, \

97 [
NVIC_DMA1_CHANNEL6_IRQ
] = 
dma1_ch™√l6_i§
, \

98 [
NVIC_DMA1_CHANNEL7_IRQ
] = 
dma1_ch™√l7_i§
, \

99 [
NVIC_ADC1_IRQ
] = 
adc1_i§
, \

100 [
NVIC_USB_HP_IRQ
] = 
usb_hp_i§
, \

101 [
NVIC_USB_LP_IRQ
] = 
usb_Õ_i§
, \

102 [
NVIC_DAC_IRQ
] = 
dac_i§
, \

103 [
NVIC_COMP_IRQ
] = 
comp_i§
, \

104 [
NVIC_EXTI9_5_IRQ
] = 
exti9_5_i§
, \

105 [
NVIC_LCD_IRQ
] = 
lcd_i§
, \

106 [
NVIC_TIM9_IRQ
] = 
tim9_i§
, \

107 [
NVIC_TIM10_IRQ
] = 
tim10_i§
, \

108 [
NVIC_TIM11_IRQ
] = 
tim11_i§
, \

109 [
NVIC_TIM2_IRQ
] = 
tim2_i§
, \

110 [
NVIC_TIM3_IRQ
] = 
tim3_i§
, \

111 [
NVIC_TIM4_IRQ
] = 
tim4_i§
, \

112 [
NVIC_I2C1_EV_IRQ
] = 
i2c1_ev_i§
, \

113 [
NVIC_I2C1_ER_IRQ
] = 
i2c1_î_i§
, \

114 [
NVIC_I2C2_EV_IRQ
] = 
i2c2_ev_i§
, \

115 [
NVIC_I2C2_ER_IRQ
] = 
i2c2_î_i§
, \

116 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

117 [
NVIC_SPI2_IRQ
] = 
•i2_i§
, \

118 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

119 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

120 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

121 [
NVIC_EXTI15_10_IRQ
] = 
exti15_10_i§
, \

122 [
NVIC_RTC_ALARM_IRQ
] = 
πc_Æ¨m_i§
, \

123 [
NVIC_USB_FS_WAKEUP_IRQ
] = 
usb_fs_wakeup_i§
, \

124 [
NVIC_TIM6_IRQ
] = 
tim6_i§
, \

125 [
NVIC_TIM7_IRQ
] = 
tim7_i§
, \

126 [
NVIC_SDIO_IRQ
] = 
sdio_i§
, \

127 [
NVIC_TIM5_IRQ
] = 
tim5_i§
, \

128 [
NVIC_SPI3_IRQ
] = 
•i3_i§
, \

129 [
NVIC_UART4_IRQ
] = 
u¨t4_i§
, \

130 [
NVIC_UART5_IRQ
] = 
u¨t5_i§
, \

131 [
NVIC_DMA2_CH1_IRQ
] = 
dma2_ch1_i§
, \

132 [
NVIC_DMA2_CH2_IRQ
] = 
dma2_ch2_i§
, \

133 [
NVIC_DMA2_CH3_IRQ
] = 
dma2_ch3_i§
, \

134 [
NVIC_DMA2_CH4_IRQ
] = 
dma2_ch4_i§
, \

135 [
NVIC_DMA2_CH5_IRQ
] = 
dma2_ch5_i§
, \

136 [
NVIC_AES_IRQ
] = 
´s_i§
, \

137 [
NVIC_COMP_ACQ_IRQ
] = 
comp_acq_i§


	)

	@libopencm3/lib/stm32/l4/adc.c

28 
	~<lib›ícm3/°m32/adc.h
>

39 
	$adc_íabÀ_ªguœt‹
(
uöt32_t
 
adc
)

41 
	`ADC_CR
(
adc
Ë|
ADC_CR_ADVREGEN
;

42 
	}
}

50 
	$adc_dißbÀ_ªguœt‹
(
uöt32_t
 
adc
)

52 
	`ADC_CR
(
adc
Ë&~
ADC_CR_ADVREGEN
;

53 
	}
}

	@libopencm3/lib/stm32/l4/flash.c

43 
	~<lib›ícm3/°m32/Êash.h
>

55 
	$Êash_¥e„tch_íabÀ
()

57 
FLASH_ACR
 |
FLASH_ACR_PRFTEN
;

58 
	}
}

65 
	$Êash_¥e„tch_dißbÀ
()

67 
FLASH_ACR
 &~
FLASH_ACR_PRFTEN
;

68 
	}
}

79 
	$Êash_£t_ws
(
uöt32_t
 
ws
)

81 
uöt32_t
 
ªg32
;

83 
ªg32
 = 
FLASH_ACR
;

84 
ªg32
 &~(
FLASH_ACR_LATENCY_MASK
 << 
FLASH_ACR_LATENCY_SHIFT
);

85 
ªg32
 |(
ws
 << 
FLASH_ACR_LATENCY_SHIFT
);

86 
FLASH_ACR
 = 
ªg32
;

87 
	}
}

93 
	$Êash_u∆ock
()

96 
FLASH_CR
 |
FLASH_CR_LOCK
;

99 
FLASH_KEYR
 = 
FLASH_KEYR_KEY1
;

100 
FLASH_KEYR
 = 
FLASH_KEYR_KEY2
;

101 
	}
}

106 
	$Êash_lock
()

108 
FLASH_CR
 |
FLASH_CR_LOCK
;

109 
	}
}

113 
	$Êash_˛ór_pg≥º_Êag
()

115 
FLASH_SR
 |
FLASH_SR_PROGERR
;

116 
	}
}

120 
	$Êash_˛ór_e›_Êag
()

122 
FLASH_SR
 |
FLASH_SR_EOP
;

123 
	}
}

127 
	$Êash_˛ór_bsy_Êag
()

129 
FLASH_SR
 &~
FLASH_SR_BSY
;

130 
	}
}

137 
	$Êash_waô_f‹_œ°_›î©i⁄
()

139 (
FLASH_SR
 & 
FLASH_SR_BSY
) == FLASH_SR_BSY);

140 
	}
}

144 
	$Êash_dˇche_íabÀ
()

146 
FLASH_ACR
 |
FLASH_ACR_DCEN
;

147 
	}
}

151 
	$Êash_dˇche_dißbÀ
()

153 
FLASH_ACR
 &~
FLASH_ACR_DCEN
;

154 
	}
}

158 
	$Êash_iˇche_íabÀ
()

160 
FLASH_ACR
 |
FLASH_ACR_ICEN
;

161 
	}
}

165 
	$Êash_iˇche_dißbÀ
()

167 
FLASH_ACR
 &~
FLASH_ACR_ICEN
;

168 
	}
}

174 
	$Êash_dˇche_ª£t
()

176 
FLASH_ACR
 |
FLASH_ACR_DCRST
;

177 
	}
}

182 
	$Êash_iˇche_ª£t
()

184 
FLASH_ACR
 |
FLASH_ACR_ICRST
;

185 
	}
}

190 
	$Êash_˛ór_pg£º_Êag
()

192 
FLASH_SR
 |
FLASH_SR_PGSERR
;

193 
	}
}

197 
	$Êash_˛ór_pg´º_Êag
()

199 
FLASH_SR
 |
FLASH_SR_PGAERR
;

200 
	}
}

204 
	$Êash_˛ór_wΩîr_Êag
()

206 
FLASH_SR
 |
FLASH_SR_WRPERR
;

207 
	}
}

212 
	$Êash_˛ór_°©us_Êags
()

214 
	`Êash_˛ór_pg£º_Êag
();

215 
	`Êash_˛ór_pg´º_Êag
();

216 
	`Êash_˛ór_wΩîr_Êag
();

217 
	`Êash_˛ór_pg≥º_Êag
();

218 
	`Êash_˛ór_e›_Êag
();

219 
	`Êash_˛ór_bsy_Êag
();

220 
	}
}

226 
	$Êash_u∆ock_›ti⁄_byãs
()

229 
FLASH_CR
 |
FLASH_CR_OPTLOCK
;

232 
FLASH_OPTKEYR
 = 
FLASH_OPTKEYR_KEY1
;

233 
FLASH_OPTKEYR
 = 
FLASH_OPTKEYR_KEY2
;

234 
	}
}

240 
	$Êash_lock_›ti⁄_byãs
()

242 
FLASH_CR
 |
FLASH_CR_OPTLOCK
;

243 
	}
}

253 
	$Êash_¥ogøm_w‹d
(
uöt32_t
 
addªss
, uöt32_à
d©a
)

256 
	`Êash_waô_f‹_œ°_›î©i⁄
();

259 
FLASH_CR
 |
FLASH_CR_PG
;

262 
	`MMIO32
(
addªss
Ë
d©a
;

265 
	`Êash_waô_f‹_œ°_›î©i⁄
();

268 
FLASH_CR
 &~
FLASH_CR_PG
;

269 
	}
}

279 
	$Êash_¥ogøm
(
uöt32_t
 
addªss
, 
uöt8_t
 *
d©a
, uöt32_à
Àn
)

284 
uöt32_t
 
i
;

285 
i
 = 0; i < 
Àn
; i++) {

286 
	`Êash_¥ogøm_w‹d
(
addªss
+
i
, 
d©a
[i]);

288 
	}
}

297 
	$Êash_îa£_£˘‹
(
uöt8_t
 
£˘‹
)

299 
	`Êash_waô_f‹_œ°_›î©i⁄
();

301 
FLASH_CR
 &~(
FLASH_CR_PNB_MASK
 << 
FLASH_CR_PNB_SHIFT
);

302 
FLASH_CR
 |(
£˘‹
 & 
FLASH_CR_PNB_MASK
Ë<< 
FLASH_CR_PNB_SHIFT
;

303 
FLASH_CR
 |
FLASH_CR_PER
;

304 
FLASH_CR
 |
FLASH_CR_START
;

306 
	`Êash_waô_f‹_œ°_›î©i⁄
();

307 
FLASH_CR
 &~
FLASH_CR_PER
;

308 
FLASH_CR
 &~(
FLASH_CR_PNB_MASK
 << 
FLASH_CR_PNB_SHIFT
);

309 
	}
}

315 
	$Êash_îa£_Æl_£˘‹s
()

317 
	`Êash_waô_f‹_œ°_›î©i⁄
();

319 
FLASH_CR
 |
FLASH_CR_MER1
 | 
FLASH_CR_MER2
;

320 
FLASH_CR
 |
FLASH_CR_START
;

322 
	`Êash_waô_f‹_œ°_›î©i⁄
();

323 
FLASH_CR
 &~
FLASH_CR_MER1
 & ~
FLASH_CR_MER2
;

324 
	}
}

331 
	$Êash_¥ogøm_›ti⁄_byãs
(
uöt32_t
 
d©a
)

333 
	`Êash_waô_f‹_œ°_›î©i⁄
();

335 i‡(
FLASH_CR
 & 
FLASH_CR_OPTLOCK
) {

336 
	`Êash_u∆ock_›ti⁄_byãs
();

339 
FLASH_OPTR
 = 
d©a
 & ~0x3;

340 
FLASH_OPTR
 |
FLASH_CR_OPTSTRT
;

341 
	`Êash_waô_f‹_œ°_›î©i⁄
();

342 
	}
}

	@libopencm3/lib/stm32/l4/i2c.c

31 
	~<lib›ícm3/°m32/i2c.h
>

	@libopencm3/lib/stm32/l4/pwr.c

37 
	~<lib›ícm3/°m32/pwr.h
>

39 
	$pwr_£t_vos_sˇÀ
(
pwr_vos_sˇÀ
 
sˇÀ
)

41 
uöt32_t
 
ªg32
;

43 
ªg32
 = 
PWR_CR1
;

44 
ªg32
 &~(
PWR_CR1_VOS_MASK
 << 
PWR_CR1_VOS_SHIFT
);

45 
sˇÀ
) {

46 
PWR_SCALE1
:

47 
ªg32
 |(
PWR_CR1_VOS_RANGE_1
 << 
PWR_CR1_VOS_SHIFT
);

49 
PWR_SCALE2
:

50 
ªg32
 |(
PWR_CR1_VOS_RANGE_2
 << 
PWR_CR1_VOS_SHIFT
);

53 
PWR_CR1
 = 
ªg32
;

54 
	}
}

	@libopencm3/lib/stm32/l4/rcc.c

39 
	~<lib›ícm3/°m32/rcc.h
>

42 
uöt32_t
 
	grcc_ahb_‰equícy
 = 4000000;

43 
uöt32_t
 
	grcc_≠b1_‰equícy
 = 4000000;

44 
uöt32_t
 
	grcc_≠b2_‰equícy
 = 4000000;

46 
	$rcc_osc_ªady_öt_˛ór
(
rcc_osc
 
osc
)

48 
osc
) {

49 
RCC_PLL
:

50 
RCC_CICR
 |
RCC_CICR_PLLRDYC
;

52 
RCC_HSE
:

53 
RCC_CICR
 |
RCC_CICR_HSERDYC
;

55 
RCC_HSI16
:

56 
RCC_CICR
 |
RCC_CICR_HSIRDYC
;

58 
RCC_MSI
:

59 
RCC_CICR
 |
RCC_CICR_MSIRDYC
;

61 
RCC_LSE
:

62 
RCC_CICR
 |
RCC_CICR_LSERDYC
;

64 
RCC_LSI
:

65 
RCC_CICR
 |
RCC_CICR_LSIRDYC
;

67 
RCC_HSI48
:

68 
RCC_CICR
 |
RCC_CICR_HSI48RDYC
;

71 
	}
}

73 
	$rcc_osc_ªady_öt_íabÀ
(
rcc_osc
 
osc
)

75 
osc
) {

76 
RCC_PLL
:

77 
RCC_CIER
 |
RCC_CIER_PLLRDYIE
;

79 
RCC_HSE
:

80 
RCC_CIER
 |
RCC_CIER_HSERDYIE
;

82 
RCC_HSI16
:

83 
RCC_CIER
 |
RCC_CIER_HSIRDYIE
;

85 
RCC_MSI
:

86 
RCC_CIER
 |
RCC_CIER_MSIRDYIE
;

88 
RCC_LSE
:

89 
RCC_CIER
 |
RCC_CIER_LSERDYIE
;

91 
RCC_LSI
:

92 
RCC_CIER
 |
RCC_CIER_LSIRDYIE
;

94 
RCC_HSI48
:

95 
RCC_CIER
 |
RCC_CIER_HSI48RDYIE
;

98 
	}
}

100 
	$rcc_osc_ªady_öt_dißbÀ
(
rcc_osc
 
osc
)

102 
osc
) {

103 
RCC_PLL
:

104 
RCC_CIER
 &~
RCC_CIER_PLLRDYIE
;

106 
RCC_HSE
:

107 
RCC_CIER
 &~
RCC_CIER_HSERDYIE
;

109 
RCC_HSI16
:

110 
RCC_CIER
 &~
RCC_CIER_HSIRDYIE
;

112 
RCC_MSI
:

113 
RCC_CIER
 &~
RCC_CIER_MSIRDYIE
;

115 
RCC_LSE
:

116 
RCC_CIER
 &~
RCC_CIER_LSERDYIE
;

118 
RCC_LSI
:

119 
RCC_CIER
 &~
RCC_CIER_LSIRDYIE
;

121 
RCC_HSI48
:

122 
RCC_CIER
 &~
RCC_CIER_HSI48RDYIE
;

125 
	}
}

127 
	$rcc_osc_ªady_öt_Êag
(
rcc_osc
 
osc
)

129 
osc
) {

130 
RCC_PLL
:

131  ((
RCC_CIFR
 & 
RCC_CIFR_PLLRDYF
) != 0);

133 
RCC_HSE
:

134  ((
RCC_CIFR
 & 
RCC_CIFR_HSERDYF
) != 0);

136 
RCC_HSI16
:

137  ((
RCC_CIFR
 & 
RCC_CIFR_HSIRDYF
) != 0);

139 
RCC_MSI
:

140  ((
RCC_CIFR
 & 
RCC_CIFR_MSIRDYF
) != 0);

142 
RCC_LSE
:

143  ((
RCC_CIFR
 & 
RCC_CIFR_LSERDYF
) != 0);

145 
RCC_LSI
:

146  ((
RCC_CIFR
 & 
RCC_CIFR_LSIRDYF
) != 0);

148 
RCC_HSI48
:

149  ((
RCC_CIFR
 & 
RCC_CIFR_HSI48RDYF
) != 0);

152  
Ál£
;

154 
	}
}

156 
	$rcc_css_öt_˛ór
()

158 
RCC_CICR
 |
RCC_CICR_CSSC
;

159 
	}
}

161 
	$rcc_css_öt_Êag
()

163  ((
RCC_CIFR
 & 
RCC_CIFR_CSSF
) != 0);

164 
	}
}

166 
boﬁ
 
	$rcc_is_osc_ªady
(
rcc_osc
 
osc
)

168 
osc
) {

169 
RCC_PLL
:

170  
RCC_CR
 & 
RCC_CR_PLLRDY
;

171 
RCC_HSE
:

172  
RCC_CR
 & 
RCC_CR_HSERDY
;

173 
RCC_HSI16
:

174  
RCC_CR
 & 
RCC_CR_HSIRDY
;

175 
RCC_MSI
:

176  
RCC_CR
 & 
RCC_CR_MSIRDY
;

177 
RCC_LSE
:

178  
RCC_BDCR
 & 
RCC_BDCR_LSERDY
;

179 
RCC_LSI
:

180  
RCC_CSR
 & 
RCC_CSR_LSIRDY
;

181 
RCC_HSI48
:

182  
RCC_CRRCR
 & 
RCC_CRRCR_HSI48RDY
;

184  
Ál£
;

185 
	}
}

187 
	$rcc_waô_f‹_osc_ªady
(
rcc_osc
 
osc
)

189 !
	`rcc_is_osc_ªady
(
osc
));

190 
	}
}

192 
	$rcc_waô_f‹_sys˛k_°©us
(
rcc_osc
 
osc
)

194 
osc
) {

195 
RCC_PLL
:

196 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
)

197 !
RCC_CFGR_SWS_PLL
);

199 
RCC_HSE
:

200 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
)

201 !
RCC_CFGR_SWS_HSE
);

203 
RCC_HSI16
:

204 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
)

205 !
RCC_CFGR_SWS_HSI16
);

207 
RCC_MSI
:

208 ((
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
)

209 !
RCC_CFGR_SWS_MSI
);

215 
	}
}

217 
	$rcc_osc_⁄
(
rcc_osc
 
osc
)

219 
osc
) {

220 
RCC_PLL
:

221 
RCC_CR
 |
RCC_CR_PLLON
;

223 
RCC_HSE
:

224 
RCC_CR
 |
RCC_CR_HSEON
;

226 
RCC_HSI16
:

227 
RCC_CR
 |
RCC_CR_HSION
;

229 
RCC_MSI
:

230 
RCC_CR
 |
RCC_CR_MSION
;

232 
RCC_LSE
:

233 
RCC_BDCR
 |
RCC_BDCR_LSEON
;

235 
RCC_LSI
:

236 
RCC_CSR
 |
RCC_CSR_LSION
;

238 
RCC_HSI48
:

239 
RCC_CRRCR
 |
RCC_CRRCR_HSI48ON
;

242 
	}
}

244 
	$rcc_osc_off
(
rcc_osc
 
osc
)

246 
osc
) {

247 
RCC_PLL
:

248 
RCC_CR
 &~
RCC_CR_PLLON
;

250 
RCC_HSE
:

251 
RCC_CR
 &~
RCC_CR_HSEON
;

253 
RCC_HSI16
:

254 
RCC_CR
 &~
RCC_CR_HSION
;

256 
RCC_MSI
:

257 
RCC_CR
 &~
RCC_CR_MSION
;

259 
RCC_LSE
:

260 
RCC_BDCR
 &~
RCC_BDCR_LSEON
;

262 
RCC_LSI
:

263 
RCC_CSR
 &~
RCC_CSR_LSION
;

265 
RCC_HSI48
:

266 
RCC_CRRCR
 &~
RCC_CRRCR_HSI48ON
;

269 
	}
}

271 
	$rcc_css_íabÀ
()

273 
RCC_CR
 |
RCC_CR_CSSON
;

274 
	}
}

276 
	$rcc_css_dißbÀ
()

278 
RCC_CR
 &~
RCC_CR_CSSON
;

279 
	}
}

281 
	$rcc_£t_sys˛k_sour˚
(
uöt32_t
 
˛k
)

283 
uöt32_t
 
ªg32
;

285 
ªg32
 = 
RCC_CFGR
;

286 
ªg32
 &~(
RCC_CFGR_SW_MASK
 << 
RCC_CFGR_SW_SHIFT
);

287 
RCC_CFGR
 = (
ªg32
 | (
˛k
 << 
RCC_CFGR_SW_SHIFT
));

288 
	}
}

290 
	$rcc_£t_∂l_sour˚
(
uöt32_t
 
∂l§c
)

292 
uöt32_t
 
ªg32
;

294 
ªg32
 = 
RCC_PLLCFGR
;

295 
ªg32
 &~(
RCC_PLLCFGR_PLLSRC_MASK
 << 
RCC_PLLCFGR_PLLSRC_SHIFT
);

296 
RCC_PLLCFGR
 = (
ªg32
 | (
∂l§c
 << 
RCC_PLLCFGR_PLLSRC_SHIFT
));

297 
	}
}

299 
	$rcc_£t_µª2
(
uöt32_t
 
µª2
)

301 
uöt32_t
 
ªg32
;

303 
ªg32
 = 
RCC_CFGR
;

304 
ªg32
 &~(
RCC_CFGR_PPRE2_MASK
 << 
RCC_CFGR_PPRE2_SHIFT
);

305 
RCC_CFGR
 = (
ªg32
 | (
µª2
 << 
RCC_CFGR_PPRE2_SHIFT
));

306 
	}
}

308 
	$rcc_£t_µª1
(
uöt32_t
 
µª1
)

310 
uöt32_t
 
ªg32
;

312 
ªg32
 = 
RCC_CFGR
;

313 
ªg32
 &~(
RCC_CFGR_PPRE1_MASK
 << 
RCC_CFGR_PPRE1_SHIFT
);

314 
RCC_CFGR
 = (
ªg32
 | (
µª1
 << 
RCC_CFGR_PPRE1_SHIFT
));

315 
	}
}

317 
	$rcc_£t_h¥e
(
uöt32_t
 
h¥e
)

319 
uöt32_t
 
ªg32
;

321 
ªg32
 = 
RCC_CFGR
;

322 
ªg32
 &~(
RCC_CFGR_HPRE_MASK
 << 
RCC_CFGR_HPRE_SHIFT
);

323 
RCC_CFGR
 = (
ªg32
 | (
h¥e
 << 
RCC_CFGR_HPRE_SHIFT
));

324 
	}
}

326 
	$rcc_£t_maö_∂l
(
uöt32_t
 
sour˚
, uöt32_à
∂lm
, uöt32_à
∂ 
, uöt32_à
∂Õ
,

327 
uöt32_t
 
∂lq
, uöt32_à
∂Ã
)

329 
RCC_PLLCFGR
 = (
	`RCC_PLLCFGR_PLLM
(
∂lm
Ë<< 
RCC_PLLCFGR_PLLM_SHIFT
) |

330 (
∂ 
 << 
RCC_PLLCFGR_PLLN_SHIFT
) |

331 (
∂Õ
) |

332 (
sour˚
 << 
RCC_PLLCFGR_PLLSRC_SHIFT
) |

333 (
∂lq
 << 
RCC_PLLCFGR_PLLQ_SHIFT
) |

334 (
∂Ã
 << 
RCC_PLLCFGR_PLLR_SHIFT
Ë| 
RCC_PLLCFGR_PLLREN
;

335 
	}
}

337 
uöt32_t
 
	$rcc_sy°em_˛ock_sour˚
()

340  (
RCC_CFGR
 >> 
RCC_CFGR_SWS_SHIFT
Ë& 
RCC_CFGR_SWS_MASK
;

341 
	}
}

349 
	$rcc_£t_msi_ønge
(
uöt32_t
 
msi_ønge
)

351 
uöt32_t
 
ªg
 = 
RCC_CR
;

352 
ªg
 &~(
RCC_CR_MSIRANGE_MASK
 << 
RCC_CR_MSIRANGE_SHIFT
);

353 
ªg
 |
msi_ønge
 << 
RCC_CR_MSIRANGE_SHIFT
;

354 
RCC_CR
 = 
ªg
 | 
RCC_CR_MSIRGSEL
;

355 
	}
}

364 
	$rcc_£t_msi_ønge_°™dby
(
uöt32_t
 
msi_ønge
)

366 
uöt32_t
 
ªg
 = 
RCC_CSR
;

367 
ªg
 &~(
RCC_CSR_MSIRANGE_MASK
 << 
RCC_CSR_MSIRANGE_SHIFT
);

368 
ªg
 |
msi_ønge
 << 
RCC_CSR_MSIRANGE_SHIFT
;

369 
RCC_CSR
 = 
ªg
;

370 
	}
}

	@libopencm3/lib/stm32/l4/vector_chipset.c

21 
	~<lib›ícm3/cm3/scb.h
>

23 
	$¥e_maö
()

26 
SCB_CPACR
 |
SCB_CPACR_FULL
 * (
SCB_CPACR_CP10
 | 
SCB_CPACR_CP11
);

27 
	}
}

	@libopencm3/lib/stm32/l4/vector_nvic.c

15 #¥agm®
wók
 
wwdg_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
pvd_pvm_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
èmp_°amp_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
πc_wkup_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
Êash_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
rcc_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
exti0_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
exti1_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
exti2_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
exti3_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
exti4_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
dma1_ch™√l1_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
dma1_ch™√l2_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
dma1_ch™√l3_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
dma1_ch™√l4_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
dma1_ch™√l5_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
dma1_ch™√l6_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
dma1_ch™√l7_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
adc1_2_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ˇn1_tx_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
ˇn1_rx0_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
ˇn1_rx1_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
ˇn1_s˚_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
exti9_5_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
tim1_brk_tim15_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
tim1_up_tim16_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
tim1_åg_com_tim17_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
tim1_cc_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
tim2_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
tim3_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
tim4_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
i2c1_ev_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
i2c1_î_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
i2c2_ev_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
i2c2_î_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
•i2_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ußπ1_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
ußπ2_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
ußπ3_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
exti15_10_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
πc_Æ¨m_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
dfsdm3_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
tim8_brk_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
tim8_up_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
tim8_åg_com_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
tim8_cc_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
adc3_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
fmc_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
sdmmc1_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
tim5_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
•i3_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
u¨t4_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
u¨t5_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
tim6_dacundî_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
tim7_i§
 = 
blockög_h™dÀr


71 #¥agm®
wók
 
dma2_ch™√l1_i§
 = 
blockög_h™dÀr


72 #¥agm®
wók
 
dma2_ch™√l2_i§
 = 
blockög_h™dÀr


73 #¥agm®
wók
 
dma2_ch™√l3_i§
 = 
blockög_h™dÀr


74 #¥agm®
wók
 
dma2_ch™√l4_i§
 = 
blockög_h™dÀr


75 #¥agm®
wók
 
dma2_ch™√l5_i§
 = 
blockög_h™dÀr


76 #¥agm®
wók
 
dfsdm0_i§
 = 
blockög_h™dÀr


77 #¥agm®
wók
 
dfsdm1_i§
 = 
blockög_h™dÀr


78 #¥agm®
wók
 
dfsdm2_i§
 = 
blockög_h™dÀr


79 #¥agm®
wók
 
comp_i§
 = 
blockög_h™dÀr


80 #¥agm®
wók
 
Õtim1_i§
 = 
blockög_h™dÀr


81 #¥agm®
wók
 
Õtim2_i§
 = 
blockög_h™dÀr


82 #¥agm®
wók
 
Ÿg_fs_i§
 = 
blockög_h™dÀr


83 #¥agm®
wók
 
dma2_ch™√l6_i§
 = 
blockög_h™dÀr


84 #¥agm®
wók
 
dma2_ch™√l7_i§
 = 
blockög_h™dÀr


85 #¥agm®
wók
 
Õu¨t1_i§
 = 
blockög_h™dÀr


86 #¥agm®
wók
 
quad•i_i§
 = 
blockög_h™dÀr


87 #¥agm®
wók
 
i2c3_ev_i§
 = 
blockög_h™dÀr


88 #¥agm®
wók
 
i2c3_î_i§
 = 
blockög_h™dÀr


89 #¥agm®
wók
 
ßi1_i§
 = 
blockög_h™dÀr


90 #¥agm®
wók
 
ßi2_i§
 = 
blockög_h™dÀr


91 #¥agm®
wók
 
swpmi1_i§
 = 
blockög_h™dÀr


92 #¥agm®
wók
 
tsc_i§
 = 
blockög_h™dÀr


93 #¥agm®
wók
 
lcd_i§
 = 
blockög_h™dÀr


94 #¥agm®
wók
 
´s_i§
 = 
blockög_h™dÀr


95 #¥agm®
wók
 
∫g_i§
 = 
blockög_h™dÀr


96 #¥agm®
wók
 
Âu_i§
 = 
blockög_h™dÀr


105 
	#IRQ_HANDLERS
 \

106 [
NVIC_WWDG_IRQ
] = 
wwdg_i§
, \

107 [
NVIC_PVD_PVM_IRQ
] = 
pvd_pvm_i§
, \

108 [
NVIC_TAMP_STAMP_IRQ
] = 
èmp_°amp_i§
, \

109 [
NVIC_RTC_WKUP_IRQ
] = 
πc_wkup_i§
, \

110 [
NVIC_FLASH_IRQ
] = 
Êash_i§
, \

111 [
NVIC_RCC_IRQ
] = 
rcc_i§
, \

112 [
NVIC_EXTI0_IRQ
] = 
exti0_i§
, \

113 [
NVIC_EXTI1_IRQ
] = 
exti1_i§
, \

114 [
NVIC_EXTI2_IRQ
] = 
exti2_i§
, \

115 [
NVIC_EXTI3_IRQ
] = 
exti3_i§
, \

116 [
NVIC_EXTI4_IRQ
] = 
exti4_i§
, \

117 [
NVIC_DMA1_CHANNEL1_IRQ
] = 
dma1_ch™√l1_i§
, \

118 [
NVIC_DMA1_CHANNEL2_IRQ
] = 
dma1_ch™√l2_i§
, \

119 [
NVIC_DMA1_CHANNEL3_IRQ
] = 
dma1_ch™√l3_i§
, \

120 [
NVIC_DMA1_CHANNEL4_IRQ
] = 
dma1_ch™√l4_i§
, \

121 [
NVIC_DMA1_CHANNEL5_IRQ
] = 
dma1_ch™√l5_i§
, \

122 [
NVIC_DMA1_CHANNEL6_IRQ
] = 
dma1_ch™√l6_i§
, \

123 [
NVIC_DMA1_CHANNEL7_IRQ
] = 
dma1_ch™√l7_i§
, \

124 [
NVIC_ADC1_2_IRQ
] = 
adc1_2_i§
, \

125 [
NVIC_CAN1_TX_IRQ
] = 
ˇn1_tx_i§
, \

126 [
NVIC_CAN1_RX0_IRQ
] = 
ˇn1_rx0_i§
, \

127 [
NVIC_CAN1_RX1_IRQ
] = 
ˇn1_rx1_i§
, \

128 [
NVIC_CAN1_SCE_IRQ
] = 
ˇn1_s˚_i§
, \

129 [
NVIC_EXTI9_5_IRQ
] = 
exti9_5_i§
, \

130 [
NVIC_TIM1_BRK_TIM15_IRQ
] = 
tim1_brk_tim15_i§
, \

131 [
NVIC_TIM1_UP_TIM16_IRQ
] = 
tim1_up_tim16_i§
, \

132 [
NVIC_TIM1_TRG_COM_TIM17_IRQ
] = 
tim1_åg_com_tim17_i§
, \

133 [
NVIC_TIM1_CC_IRQ
] = 
tim1_cc_i§
, \

134 [
NVIC_TIM2_IRQ
] = 
tim2_i§
, \

135 [
NVIC_TIM3_IRQ
] = 
tim3_i§
, \

136 [
NVIC_TIM4_IRQ
] = 
tim4_i§
, \

137 [
NVIC_I2C1_EV_IRQ
] = 
i2c1_ev_i§
, \

138 [
NVIC_I2C1_ER_IRQ
] = 
i2c1_î_i§
, \

139 [
NVIC_I2C2_EV_IRQ
] = 
i2c2_ev_i§
, \

140 [
NVIC_I2C2_ER_IRQ
] = 
i2c2_î_i§
, \

141 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

142 [
NVIC_SPI2_IRQ
] = 
•i2_i§
, \

143 [
NVIC_USART1_IRQ
] = 
ußπ1_i§
, \

144 [
NVIC_USART2_IRQ
] = 
ußπ2_i§
, \

145 [
NVIC_USART3_IRQ
] = 
ußπ3_i§
, \

146 [
NVIC_EXTI15_10_IRQ
] = 
exti15_10_i§
, \

147 [
NVIC_RTC_ALARM_IRQ
] = 
πc_Æ¨m_i§
, \

148 [
NVIC_DFSDM3_IRQ
] = 
dfsdm3_i§
, \

149 [
NVIC_TIM8_BRK_IRQ
] = 
tim8_brk_i§
, \

150 [
NVIC_TIM8_UP_IRQ
] = 
tim8_up_i§
, \

151 [
NVIC_TIM8_TRG_COM_IRQ
] = 
tim8_åg_com_i§
, \

152 [
NVIC_TIM8_CC_IRQ
] = 
tim8_cc_i§
, \

153 [
NVIC_ADC3_IRQ
] = 
adc3_i§
, \

154 [
NVIC_FMC_IRQ
] = 
fmc_i§
, \

155 [
NVIC_SDMMC1_IRQ
] = 
sdmmc1_i§
, \

156 [
NVIC_TIM5_IRQ
] = 
tim5_i§
, \

157 [
NVIC_SPI3_IRQ
] = 
•i3_i§
, \

158 [
NVIC_UART4_IRQ
] = 
u¨t4_i§
, \

159 [
NVIC_UART5_IRQ
] = 
u¨t5_i§
, \

160 [
NVIC_TIM6_DACUNDER_IRQ
] = 
tim6_dacundî_i§
, \

161 [
NVIC_TIM7_IRQ
] = 
tim7_i§
, \

162 [
NVIC_DMA2_CHANNEL1_IRQ
] = 
dma2_ch™√l1_i§
, \

163 [
NVIC_DMA2_CHANNEL2_IRQ
] = 
dma2_ch™√l2_i§
, \

164 [
NVIC_DMA2_CHANNEL3_IRQ
] = 
dma2_ch™√l3_i§
, \

165 [
NVIC_DMA2_CHANNEL4_IRQ
] = 
dma2_ch™√l4_i§
, \

166 [
NVIC_DMA2_CHANNEL5_IRQ
] = 
dma2_ch™√l5_i§
, \

167 [
NVIC_DFSDM0_IRQ
] = 
dfsdm0_i§
, \

168 [
NVIC_DFSDM1_IRQ
] = 
dfsdm1_i§
, \

169 [
NVIC_DFSDM2_IRQ
] = 
dfsdm2_i§
, \

170 [
NVIC_COMP_IRQ
] = 
comp_i§
, \

171 [
NVIC_LPTIM1_IRQ
] = 
Õtim1_i§
, \

172 [
NVIC_LPTIM2_IRQ
] = 
Õtim2_i§
, \

173 [
NVIC_OTG_FS_IRQ
] = 
Ÿg_fs_i§
, \

174 [
NVIC_DMA2_CHANNEL6_IRQ
] = 
dma2_ch™√l6_i§
, \

175 [
NVIC_DMA2_CHANNEL7_IRQ
] = 
dma2_ch™√l7_i§
, \

176 [
NVIC_LPUART1_IRQ
] = 
Õu¨t1_i§
, \

177 [
NVIC_QUADSPI_IRQ
] = 
quad•i_i§
, \

178 [
NVIC_I2C3_EV_IRQ
] = 
i2c3_ev_i§
, \

179 [
NVIC_I2C3_ER_IRQ
] = 
i2c3_î_i§
, \

180 [
NVIC_SAI1_IRQ
] = 
ßi1_i§
, \

181 [
NVIC_SAI2_IRQ
] = 
ßi2_i§
, \

182 [
NVIC_SWPMI1_IRQ
] = 
swpmi1_i§
, \

183 [
NVIC_TSC_IRQ
] = 
tsc_i§
, \

184 [
NVIC_LCD_IRQ
] = 
lcd_i§
, \

185 [
NVIC_AES_IRQ
] = 
´s_i§
, \

186 [
NVIC_RNG_IRQ
] = 
∫g_i§
, \

187 [
NVIC_FPU_IRQ
] = 
Âu_i§


	)

	@libopencm3/lib/stm32/st_usbfs_v1.c

20 
	~<lib›ícm3/cm3/comm⁄.h
>

21 
	~<lib›ícm3/°m32/rcc.h
>

22 
	~<lib›ícm3/°m32/toﬁs.h
>

23 
	~<lib›ícm3/°m32/°_usbfs.h
>

24 
	~<lib›ícm3/usb/usbd.h
>

25 
	~"../usb/usb_¥iv©e.h
"

26 
	~"comm⁄/°_usbfs_c‹e.h
"

28 
usbd_devi˚
 *
°_usbfs_v1_usbd_öô
();

30 c⁄° 
_usbd_drivî
 
	g°_usbfs_v1_usb_drivî
 = {

31 .
öô
 = 
°_usbfs_v1_usbd_öô
,

32 .
	g£t_addªss
 = 
°_usbfs_£t_addªss
,

33 .
	gï_£tup
 = 
°_usbfs_ï_£tup
,

34 .
	gï_ª£t
 = 
°_usbfs_ídpoöts_ª£t
,

35 .
	gï_°Æl_£t
 = 
°_usbfs_ï_°Æl_£t
,

36 .
	gï_°Æl_gë
 = 
°_usbfs_ï_°Æl_gë
,

37 .
	gï_«k_£t
 = 
°_usbfs_ï_«k_£t
,

38 .
	gï_wrôe_∑ckë
 = 
°_usbfs_ï_wrôe_∑ckë
,

39 .
	gï_ªad_∑ckë
 = 
°_usbfs_ï_ªad_∑ckë
,

40 .
	gpﬁl
 = 
°_usbfs_pﬁl
,

44 
usbd_devi˚
 *
	$°_usbfs_v1_usbd_öô
()

46 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_USB
);

47 
	`SET_REG
(
USB_CNTR_REG
, 0);

48 
	`SET_REG
(
USB_BTABLE_REG
, 0);

49 
	`SET_REG
(
USB_ISTR_REG
, 0);

52 
	`SET_REG
(
USB_CNTR_REG
, 
USB_CNTR_RESETM
 | 
USB_CNTR_CTRM
 |

53 
USB_CNTR_SUSPM
 | 
USB_CNTR_WKUPM
);

54  &
°_usbfs_dev
;

55 
	}
}

57 
	$°_usbfs_c›y_to_pm
(vﬁ©ûê*
vPM
, c⁄° *
buf
, 
uöt16_t
 
Àn
)

59 c⁄° 
uöt16_t
 *
lbuf
 = 
buf
;

60 vﬁ©ûê
uöt32_t
 *
PM
 = 
vPM
;

61 
Àn
 = (len + 1) >> 1;Üen;Üen--) {

62 *
PM
++ = *
lbuf
++;

64 
	}
}

73 
	$°_usbfs_c›y_‰om_pm
(*
buf
, c⁄° vﬁ©ûê*
vPM
, 
uöt16_t
 
Àn
)

75 
uöt16_t
 *
lbuf
 = 
buf
;

76 c⁄° vﬁ©ûê
uöt16_t
 *
PM
 = 
vPM
;

77 
uöt8_t
 
odd
 = 
Àn
 & 1;

79 
Àn
 >>1;Üí; 
PM
 +2, 
lbuf
++,Üen--) {

80 *
lbuf
 = *
PM
;

83 i‡(
odd
) {

84 *(
uöt8_t
 *Ë
lbuf
 = *(uöt8_à*Ë
PM
;

86 
	}
}

	@libopencm3/lib/stm32/st_usbfs_v2.c

21 
	~<lib›ícm3/cm3/comm⁄.h
>

22 
	~<lib›ícm3/°m32/rcc.h
>

23 
	~<lib›ícm3/°m32/toﬁs.h
>

24 
	~<lib›ícm3/°m32/°_usbfs.h
>

25 
	~<lib›ícm3/usb/usbd.h
>

26 
	~"../usb/usb_¥iv©e.h
"

27 
	~"comm⁄/°_usbfs_c‹e.h
"

29 
usbd_devi˚
 *
°_usbfs_v2_usbd_öô
();

31 c⁄° 
_usbd_drivî
 
	g°_usbfs_v2_usb_drivî
 = {

32 .
öô
 = 
°_usbfs_v2_usbd_öô
,

33 .
	g£t_addªss
 = 
°_usbfs_£t_addªss
,

34 .
	gï_£tup
 = 
°_usbfs_ï_£tup
,

35 .
	gï_ª£t
 = 
°_usbfs_ídpoöts_ª£t
,

36 .
	gï_°Æl_£t
 = 
°_usbfs_ï_°Æl_£t
,

37 .
	gï_°Æl_gë
 = 
°_usbfs_ï_°Æl_gë
,

38 .
	gï_«k_£t
 = 
°_usbfs_ï_«k_£t
,

39 .
	gï_wrôe_∑ckë
 = 
°_usbfs_ï_wrôe_∑ckë
,

40 .
	gï_ªad_∑ckë
 = 
°_usbfs_ï_ªad_∑ckë
,

41 .
	gpﬁl
 = 
°_usbfs_pﬁl
,

45 
usbd_devi˚
 *
	$°_usbfs_v2_usbd_öô
()

47 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_USB
);

48 
	`SET_REG
(
USB_CNTR_REG
, 0);

49 
	`SET_REG
(
USB_BTABLE_REG
, 0);

50 
	`SET_REG
(
USB_ISTR_REG
, 0);

53 
	`SET_REG
(
USB_CNTR_REG
, 
USB_CNTR_RESETM
 | 
USB_CNTR_CTRM
 |

54 
USB_CNTR_SUSPM
 | 
USB_CNTR_WKUPM
);

55 
	`SET_REG
(
USB_BCDR_REG
, 
USB_BCDR_DPPU
);

56  &
°_usbfs_dev
;

57 
	}
}

59 
	$°_usbfs_c›y_to_pm
(vﬁ©ûê*
vPM
, c⁄° *
buf
, 
uöt16_t
 
Àn
)

65 c⁄° 
uöt8_t
 *
lbuf
 = 
buf
;

66 vﬁ©ûê
uöt16_t
 *
PM
 = 
vPM
;

67 
uöt32_t
 
i
;

68 
i
 = 0; i < 
Àn
; i += 2) {

69 *
PM
++ = (
uöt16_t
)
lbuf
[
i
+1] << 8 |Übuf[i];

71 
	}
}

80 
	$°_usbfs_c›y_‰om_pm
(*
buf
, c⁄° vﬁ©ûê*
vPM
, 
uöt16_t
 
Àn
)

82 c⁄° vﬁ©ûê
uöt16_t
 *
PM
 = 
vPM
;

83 
uöt8_t
 
odd
 = 
Àn
 & 1;

84 
Àn
 >>= 1;

86 i‡(((
uöçå_t
Ë
buf
) & 0x01) {

87 ; 
Àn
; 
PM
++,Üen--) {

88 
uöt16_t
 
vÆue
 = *
PM
;

89 *(
uöt8_t
 *Ë
buf
++ = 
vÆue
;

90 *(
uöt8_t
 *Ë
buf
++ = 
vÆue
 >> 8;

93 ; 
Àn
; 
PM
++, 
buf
 += 2,Üen--) {

94 *(
uöt16_t
 *Ë
buf
 = *
PM
;

98 i‡(
odd
) {

99 *(
uöt8_t
 *Ë
buf
 = *(uöt8_à*Ë
PM
;

101 
	}
}

	@libopencm3/lib/usb/usb.c

38 
	~<°rög.h
>

39 
	~<lib›ícm3/usb/usbd.h
>

40 
	~"usb_¥iv©e.h
"

42 
usbd_devi˚
 *
	$usbd_öô
(c⁄° 
usbd_drivî
 *
drivî
,

43 c⁄° 
usb_devi˚_des¸ùt‹
 *
dev
,

44 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
c⁄f
,

45 c⁄° **
°rögs
, 
num_°rögs
,

46 
uöt8_t
 *
c⁄åﬁ_buf„r
, 
uöt16_t
 
c⁄åﬁ_buf„r_size
)

48 
usbd_devi˚
 *
usbd_dev
;

50 
usbd_dev
 = 
drivî
->
	`öô
();

52 
usbd_dev
->
drivî
 = driver;

53 
usbd_dev
->
desc
 = 
dev
;

54 
usbd_dev
->
c⁄fig
 = 
c⁄f
;

55 
usbd_dev
->
°rögs
 = strings;

56 
usbd_dev
->
num_°rögs
 =Çum_strings;

57 
usbd_dev
->
˘æ_buf
 = 
c⁄åﬁ_buf„r
;

58 
usbd_dev
->
˘æ_buf_Àn
 = 
c⁄åﬁ_buf„r_size
;

60 
usbd_dev
->
u£r_ˇŒback_˘r
[0][
USB_TRANSACTION_SETUP
] =

61 
_usbd_c⁄åﬁ_£tup
;

62 
usbd_dev
->
u£r_ˇŒback_˘r
[0][
USB_TRANSACTION_OUT
] =

63 
_usbd_c⁄åﬁ_out
;

64 
usbd_dev
->
u£r_ˇŒback_˘r
[0][
USB_TRANSACTION_IN
] =

65 
_usbd_c⁄åﬁ_ö
;

67 
i
;

68 
i
 = 0; i < 
MAX_USER_SET_CONFIG_CALLBACK
; i++) {

69 
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[
i
] = 
NULL
;

72  
usbd_dev
;

73 
	}
}

75 
	$usbd_ªgi°î_ª£t_ˇŒback
(
usbd_devi˚
 *
usbd_dev
, (*
ˇŒback
)())

77 
usbd_dev
->
u£r_ˇŒback_ª£t
 = 
ˇŒback
;

78 
	}
}

80 
	$usbd_ªgi°î_su•íd_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

81 (*
ˇŒback
)())

83 
usbd_dev
->
u£r_ˇŒback_su•íd
 = 
ˇŒback
;

84 
	}
}

86 
	$usbd_ªgi°î_ªsume_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

87 (*
ˇŒback
)())

89 
usbd_dev
->
u£r_ˇŒback_ªsume
 = 
ˇŒback
;

90 
	}
}

92 
	$usbd_ªgi°î_sof_ˇŒback
(
usbd_devi˚
 *
usbd_dev
, (*
ˇŒback
)())

94 
usbd_dev
->
u£r_ˇŒback_sof
 = 
ˇŒback
;

95 
	}
}

97 
	$_usbd_ª£t
(
usbd_devi˚
 *
usbd_dev
)

99 
usbd_dev
->
cuºít_addªss
 = 0;

100 
usbd_dev
->
cuºít_c⁄fig
 = 0;

101 
	`usbd_ï_£tup
(
usbd_dev
, 0, 
USB_ENDPOINT_ATTR_CONTROL
, usbd_dev->
desc
->
bMaxPackëSize0
, 
NULL
);

102 
usbd_dev
->
drivî
->
	`£t_addªss
(usbd_dev, 0);

104 i‡(
usbd_dev
->
u£r_ˇŒback_ª£t
) {

105 
usbd_dev
->
	`u£r_ˇŒback_ª£t
();

107 
	}
}

110 
	$usbd_pﬁl
(
usbd_devi˚
 *
usbd_dev
)

112 
usbd_dev
->
drivî
->
	`pﬁl
(usbd_dev);

113 
	}
}

115 
	$usbd_disc⁄√˘
(
usbd_devi˚
 *
usbd_dev
, 
boﬁ
 
disc⁄√˘ed
)

118 i‡(
usbd_dev
->
drivî
->
disc⁄√˘
) {

119 
usbd_dev
->
drivî
->
	`disc⁄√˘
(usbd_dev, 
disc⁄√˘ed
);

121 
	}
}

123 
	$usbd_ï_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
ty≥
,

124 
uöt16_t
 
max_size
, 
usbd_ídpoöt_ˇŒback
 
ˇŒback
)

126 
usbd_dev
->
drivî
->
	`ï_£tup
(usbd_dev, 
addr
, 
ty≥
, 
max_size
, 
ˇŒback
);

127 
	}
}

129 
uöt16_t
 
	$usbd_ï_wrôe_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

130 c⁄° *
buf
, 
uöt16_t
 
Àn
)

132  
usbd_dev
->
drivî
->
	`ï_wrôe_∑ckë
(usbd_dev, 
addr
, 
buf
, 
Àn
);

133 
	}
}

135 
uöt16_t
 
	$usbd_ï_ªad_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, *
buf
,

136 
uöt16_t
 
Àn
)

138  
usbd_dev
->
drivî
->
	`ï_ªad_∑ckë
(usbd_dev, 
addr
, 
buf
, 
Àn
);

139 
	}
}

141 
	$usbd_ï_°Æl_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
°Æl
)

143 
usbd_dev
->
drivî
->
	`ï_°Æl_£t
(usbd_dev, 
addr
, 
°Æl
);

144 
	}
}

146 
uöt8_t
 
	$usbd_ï_°Æl_gë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
)

148  
usbd_dev
->
drivî
->
	`ï_°Æl_gë
(usbd_dev, 
addr
);

149 
	}
}

151 
	$usbd_ï_«k_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
«k
)

153 
usbd_dev
->
drivî
->
	`ï_«k_£t
(usbd_dev, 
addr
, 
«k
);

154 
	}
}

	@libopencm3/lib/usb/usb_control.c

38 
	~<°dlib.h
>

39 
	~<lib›ícm3/usb/usbd.h
>

40 
	~"usb_¥iv©e.h
"

47 
	$°Æl_å™ß˘i⁄
(
usbd_devi˚
 *
usbd_dev
)

49 
	`usbd_ï_°Æl_£t
(
usbd_dev
, 0, 1);

50 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
IDLE
;

51 
	}
}

62 
boﬁ
 
	$√eds_zÕ
(
uöt16_t
 
Àn
, uöt16_à
wLígth
, 
uöt8_t
 
ï_size
)

64 i‡(
Àn
 < 
wLígth
) {

65 i‡(
Àn
 && (À¿% 
ï_size
 == 0)) {

66  
åue
;

69  
Ál£
;

70 
	}
}

73 
	$usbd_ªgi°î_c⁄åﬁ_ˇŒback
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ty≥
,

74 
uöt8_t
 
ty≥_mask
,

75 
usbd_c⁄åﬁ_ˇŒback
 
ˇŒback
)

77 
i
;

79 
i
 = 0; i < 
MAX_USER_CONTROL_CALLBACK
; i++) {

80 i‡(
usbd_dev
->
u£r_c⁄åﬁ_ˇŒback
[
i
].
cb
) {

84 
usbd_dev
->
u£r_c⁄åﬁ_ˇŒback
[
i
].
ty≥
 =Åype;

85 
usbd_dev
->
u£r_c⁄åﬁ_ˇŒback
[
i
].
ty≥_mask
 =Åype_mask;

86 
usbd_dev
->
u£r_c⁄åﬁ_ˇŒback
[
i
].
cb
 = 
ˇŒback
;

91 
	}
}

93 
	$usb_c⁄åﬁ_£nd_chunk
(
usbd_devi˚
 *
usbd_dev
)

95 i‡(
usbd_dev
->
desc
->
bMaxPackëSize0
 <

96 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
) {

98 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 0,

99 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
,

100 
usbd_dev
->
desc
->
bMaxPackëSize0
);

101 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
DATA_IN
;

102 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
 +=

103 
usbd_dev
->
desc
->
bMaxPackëSize0
;

104 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
 -=

105 
usbd_dev
->
desc
->
bMaxPackëSize0
;

108 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 0,

109 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
,

110 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
);

112 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 =

113 
usbd_dev
->
c⁄åﬁ_°©e
.
√eds_zÕ
 ?

114 
DATA_IN
 : 
LAST_DATA_IN
;

115 
usbd_dev
->
c⁄åﬁ_°©e
.
√eds_zÕ
 = 
Ál£
;

116 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
 = 0;

117 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
 = 
NULL
;

119 
	}
}

121 
	$usb_c⁄åﬁ_ªcv_chunk
(
usbd_devi˚
 *
usbd_dev
)

123 
uöt16_t
 
∑ckësize
 = 
	`MIN
(
usbd_dev
->
desc
->
bMaxPackëSize0
,

124 
usbd_dev
->
c⁄åﬁ_°©e
.
ªq
.
wLígth
 -

125 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
);

126 
uöt16_t
 
size
 = 
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 0,

127 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
 +

128 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
,

129 
∑ckësize
);

131 i‡(
size
 !
∑ckësize
) {

132 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

136 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
 +
size
;

138  
∑ckësize
;

139 
	}
}

141 
usbd_ªque°_ªtu∫_codes


142 
	$usb_c⁄åﬁ_ªque°_di•©ch
(
usbd_devi˚
 *
usbd_dev
,

143 
usb_£tup_d©a
 *
ªq
)

145 
i
, 
ªsu…
 = 0;

146 
u£r_c⁄åﬁ_ˇŒback
 *
cb
 = 
usbd_dev
->user_control_callback;

149 
i
 = 0; i < 
MAX_USER_CONTROL_CALLBACK
; i++) {

150 i‡(
cb
[
i
].cb =
NULL
) {

154 i‡((
ªq
->
bmReque°Ty≥
 & 
cb
[
i
].
ty≥_mask
Ë=cb[i].
ty≥
) {

155 
ªsu…
 = 
cb
[
i
].
	`cb
(
usbd_dev
, 
ªq
,

156 &(
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
),

157 &(
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
),

158 &(
usbd_dev
->
c⁄åﬁ_°©e
.
com∂ëe
));

159 i‡(
ªsu…
 =
USBD_REQ_HANDLED
 ||

160 
ªsu…
 =
USBD_REQ_NOTSUPP
) {

161  
ªsu…
;

167  
	`_usbd_°™d¨d_ªque°
(
usbd_dev
, 
ªq
,

168 &(
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
),

169 &(
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
));

170 
	}
}

173 
	$usb_c⁄åﬁ_£tup_ªad
(
usbd_devi˚
 *
usbd_dev
,

174 
usb_£tup_d©a
 *
ªq
)

176 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
 = usbd_dev->ctrl_buf;

177 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
 = 
ªq
->
wLígth
;

179 i‡(
	`usb_c⁄åﬁ_ªque°_di•©ch
(
usbd_dev
, 
ªq
)) {

180 i‡(
ªq
->
wLígth
) {

181 
usbd_dev
->
c⁄åﬁ_°©e
.
√eds_zÕ
 =

182 
	`√eds_zÕ
(
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
,

183 
ªq
->
wLígth
,

184 
usbd_dev
->
desc
->
bMaxPackëSize0
);

186 
	`usb_c⁄åﬁ_£nd_chunk
(
usbd_dev
);

189 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 0, 
NULL
, 0);

190 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
STATUS_IN
;

194 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

196 
	}
}

198 
	$usb_c⁄åﬁ_£tup_wrôe
(
usbd_devi˚
 *
usbd_dev
,

199 
usb_£tup_d©a
 *
ªq
)

201 i‡(
ªq
->
wLígth
 > 
usbd_dev
->
˘æ_buf_Àn
) {

202 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

207 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_buf
 = usbd_dev->ctrl_buf;

208 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
 = 0;

210 i‡(
ªq
->
wLígth
 > 
usbd_dev
->
desc
->
bMaxPackëSize0
) {

211 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
DATA_OUT
;

213 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
LAST_DATA_OUT
;

216 
	`usbd_ï_«k_£t
(
usbd_dev
, 0, 0);

217 
	}
}

222 
	$_usbd_c⁄åﬁ_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
)

224 
usb_£tup_d©a
 *
ªq
 = &
usbd_dev
->
c⁄åﬁ_°©e
.req;

225 ()
ó
;

227 
usbd_dev
->
c⁄åﬁ_°©e
.
com∂ëe
 = 
NULL
;

229 
	`usbd_ï_«k_£t
(
usbd_dev
, 0, 1);

231 i‡(
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 0, 
ªq
, 8) != 8) {

232 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

236 i‡(
ªq
->
wLígth
 == 0) {

237 
	`usb_c⁄åﬁ_£tup_ªad
(
usbd_dev
, 
ªq
);

238 } i‡(
ªq
->
bmReque°Ty≥
 & 0x80) {

239 
	`usb_c⁄åﬁ_£tup_ªad
(
usbd_dev
, 
ªq
);

241 
	`usb_c⁄åﬁ_£tup_wrôe
(
usbd_dev
, 
ªq
);

243 
	}
}

245 
	$_usbd_c⁄åﬁ_out
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
)

247 ()
ó
;

249 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
) {

250 
DATA_OUT
:

251 i‡(
	`usb_c⁄åﬁ_ªcv_chunk
(
usbd_dev
) < 0) {

254 i‡((
usbd_dev
->
c⁄åﬁ_°©e
.
ªq
.
wLígth
 -

255 
usbd_dev
->
c⁄åﬁ_°©e
.
˘æ_Àn
) <=

256 
usbd_dev
->
desc
->
bMaxPackëSize0
) {

257 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
LAST_DATA_OUT
;

260 
LAST_DATA_OUT
:

261 i‡(
	`usb_c⁄åﬁ_ªcv_chunk
(
usbd_dev
) < 0) {

268 i‡(
	`usb_c⁄åﬁ_ªque°_di•©ch
(
usbd_dev
,

269 &(
usbd_dev
->
c⁄åﬁ_°©e
.
ªq
))) {

271 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 0, 
NULL
, 0);

272 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
STATUS_IN
;

274 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

277 
STATUS_OUT
:

278 
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 0, 
NULL
, 0);

279 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
IDLE
;

280 i‡(
usbd_dev
->
c⁄åﬁ_°©e
.
com∂ëe
) {

281 
usbd_dev
->
c⁄åﬁ_°©e
.
	`com∂ëe
(usbd_dev,

282 &(
usbd_dev
->
c⁄åﬁ_°©e
.
ªq
));

284 
usbd_dev
->
c⁄åﬁ_°©e
.
com∂ëe
 = 
NULL
;

287 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

289 
	}
}

291 
	$_usbd_c⁄åﬁ_ö
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
)

293 ()
ó
;

294 
usb_£tup_d©a
 *
ªq
 = &(
usbd_dev
->
c⁄åﬁ_°©e
.req);

296 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
) {

297 
DATA_IN
:

298 
	`usb_c⁄åﬁ_£nd_chunk
(
usbd_dev
);

300 
LAST_DATA_IN
:

301 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
STATUS_OUT
;

302 
	`usbd_ï_«k_£t
(
usbd_dev
, 0, 0);

304 
STATUS_IN
:

305 i‡(
usbd_dev
->
c⁄åﬁ_°©e
.
com∂ëe
) {

306 
usbd_dev
->
c⁄åﬁ_°©e
.
	`com∂ëe
(usbd_dev,

307 &(
usbd_dev
->
c⁄åﬁ_°©e
.
ªq
));

311 i‡((
ªq
->
bmReque°Ty≥
 == 0) &&

312 (
ªq
->
bReque°
 =
USB_REQ_SET_ADDRESS
)) {

313 
usbd_dev
->
drivî
->
	`£t_addªss
(usbd_dev, 
ªq
->
wVÆue
);

315 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 = 
IDLE
;

318 
	`°Æl_å™ß˘i⁄
(
usbd_dev
);

320 
	}
}

	@libopencm3/lib/usb/usb_dwc_common.c

20 
	~<°rög.h
>

21 
	~<lib›ícm3/cm3/comm⁄.h
>

22 
	~<lib›ícm3/usb/usbd.h
>

23 
	~<lib›ícm3/usb/dwc/Ÿg_comm⁄.h
>

24 
	~"usb_¥iv©e.h
"

25 
	~"usb_dwc_comm⁄.h
"

30 
	#dev_ba£_addªss
 (
usbd_dev
->
drivî
->
ba£_addªss
)

	)

31 
	#REBASE
(
x
Ë
	`MMIO32
((xË+ (
dev_ba£_addªss
))

	)

33 
	$dwc_£t_addªss
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
)

35 
	`REBASE
(
OTG_DCFG
Ë(REBASE(OTG_DCFGË& ~
OTG_DCFG_DAD
Ë| (
addr
 << 4);

36 
	}
}

38 
	$dwc_ï_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
ty≥
,

39 
uöt16_t
 
max_size
,

40 (*
ˇŒback
Ë(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
))

46 
uöt8_t
 
dú
 = 
addr
 & 0x80;

47 
addr
 &= 0x7f;

49 i‡(
addr
 == 0) {

51 i‡(
max_size
 >= 64) {

52 
	`REBASE
(
OTG_DIEPCTL0
Ë
OTG_DIEPCTL0_MPSIZ_64
;

53 } i‡(
max_size
 >= 32) {

54 
	`REBASE
(
OTG_DIEPCTL0
Ë
OTG_DIEPCTL0_MPSIZ_32
;

55 } i‡(
max_size
 >= 16) {

56 
	`REBASE
(
OTG_DIEPCTL0
Ë
OTG_DIEPCTL0_MPSIZ_16
;

58 
	`REBASE
(
OTG_DIEPCTL0
Ë
OTG_DIEPCTL0_MPSIZ_8
;

61 
	`REBASE
(
OTG_DIEPTSIZ0
) =

62 (
max_size
 & 
OTG_DIEPSIZ0_XFRSIZ_MASK
);

63 
	`REBASE
(
OTG_DIEPCTL0
) |=

64 
OTG_DIEPCTL0_EPENA
 | 
OTG_DIEPCTL0_SNAK
;

67 
usbd_dev
->
d€±siz
[0] = 
OTG_DIEPSIZ0_STUPCNT_1
 |

68 
OTG_DIEPSIZ0_PKTCNT
 |

69 (
max_size
 & 
OTG_DIEPSIZ0_XFRSIZ_MASK
);

70 
	`REBASE
(
	`OTG_DOEPTSIZ
(0)Ë
usbd_dev
->
d€±siz
[0];

71 
	`REBASE
(
	`OTG_DOEPCTL
(0)) |=

72 
OTG_DOEPCTL0_EPENA
 | 
OTG_DIEPCTL0_SNAK
;

74 
	`REBASE
(
OTG_GNPTXFSIZ
Ë((
max_size
 / 4) << 16) |

75 
usbd_dev
->
drivî
->
rx_fifo_size
;

76 
usbd_dev
->
fifo_mem_t›
 +
max_size
 / 4;

77 
usbd_dev
->
fifo_mem_t›_ï0
 = usbd_dev->
fifo_mem_t›
;

82 i‡(
dú
) {

83 
	`REBASE
(
	`OTG_DIEPTXF
(
addr
)Ë((
max_size
 / 4) << 16) |

84 
usbd_dev
->
fifo_mem_t›
;

85 
usbd_dev
->
fifo_mem_t›
 +
max_size
 / 4;

87 
	`REBASE
(
	`OTG_DIEPTSIZ
(
addr
)) =

88 (
max_size
 & 
OTG_DIEPSIZ0_XFRSIZ_MASK
);

89 
	`REBASE
(
	`OTG_DIEPCTL
(
addr
)) |=

90 
OTG_DIEPCTL0_EPENA
 | 
OTG_DIEPCTL0_SNAK
 | (
ty≥
 << 18)

91 | 
OTG_DIEPCTL0_USBAEP
 | 
OTG_DIEPCTLX_SD0PID


92 | (
addr
 << 22Ë| 
max_size
;

94 i‡(
ˇŒback
) {

95 
usbd_dev
->
u£r_ˇŒback_˘r
[
addr
][
USB_TRANSACTION_IN
] =

96 (*)
ˇŒback
;

100 i‡(!
dú
) {

101 
usbd_dev
->
d€±siz
[
addr
] = 
OTG_DIEPSIZ0_PKTCNT
 |

102 (
max_size
 & 
OTG_DIEPSIZ0_XFRSIZ_MASK
);

103 
	`REBASE
(
	`OTG_DOEPTSIZ
(
addr
)Ë
usbd_dev
->
d€±siz
[addr];

104 
	`REBASE
(
	`OTG_DOEPCTL
(
addr
)Ë|
OTG_DOEPCTL0_EPENA
 |

105 
OTG_DOEPCTL0_USBAEP
 | 
OTG_DIEPCTL0_CNAK
 |

106 
OTG_DOEPCTLX_SD0PID
 | (
ty≥
 << 18Ë| 
max_size
;

108 i‡(
ˇŒback
) {

109 
usbd_dev
->
u£r_ˇŒback_˘r
[
addr
][
USB_TRANSACTION_OUT
] =

110 (*)
ˇŒback
;

113 
	}
}

115 
	$dwc_ídpoöts_ª£t
(
usbd_devi˚
 *
usbd_dev
)

117 
i
;

119 
usbd_dev
->
fifo_mem_t›
 = usbd_dev->
fifo_mem_t›_ï0
;

122 
i
 = 1; i < 4; i++) {

123 i‡(
	`REBASE
(
	`OTG_DOEPCTL
(
i
)Ë& 
OTG_DOEPCTL0_EPENA
) {

124 
	`REBASE
(
	`OTG_DOEPCTL
(
i
)Ë|
OTG_DOEPCTL0_EPDIS
;

126 i‡(
	`REBASE
(
	`OTG_DIEPCTL
(
i
)Ë& 
OTG_DIEPCTL0_EPENA
) {

127 
	`REBASE
(
	`OTG_DIEPCTL
(
i
)Ë|
OTG_DIEPCTL0_EPDIS
;

132 
	`REBASE
(
OTG_GRSTCTL
Ë
OTG_GRSTCTL_TXFFLSH
 | 
OTG_GRSTCTL_TXFNUM_ALL


133 | 
OTG_GRSTCTL_RXFFLSH
;

134 
	}
}

136 
	$dwc_ï_°Æl_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
°Æl
)

138 i‡(
addr
 == 0) {

139 i‡(
°Æl
) {

140 
	`REBASE
(
	`OTG_DIEPCTL
(
addr
)Ë|
OTG_DIEPCTL0_STALL
;

142 
	`REBASE
(
	`OTG_DIEPCTL
(
addr
)Ë&~
OTG_DIEPCTL0_STALL
;

146 i‡(
addr
 & 0x80) {

147 
addr
 &= 0x7F;

149 i‡(
°Æl
) {

150 
	`REBASE
(
	`OTG_DIEPCTL
(
addr
)Ë|
OTG_DIEPCTL0_STALL
;

152 
	`REBASE
(
	`OTG_DIEPCTL
(
addr
)Ë&~
OTG_DIEPCTL0_STALL
;

153 
	`REBASE
(
	`OTG_DIEPCTL
(
addr
)Ë|
OTG_DIEPCTLX_SD0PID
;

156 i‡(
°Æl
) {

157 
	`REBASE
(
	`OTG_DOEPCTL
(
addr
)Ë|
OTG_DOEPCTL0_STALL
;

159 
	`REBASE
(
	`OTG_DOEPCTL
(
addr
)Ë&~
OTG_DOEPCTL0_STALL
;

160 
	`REBASE
(
	`OTG_DOEPCTL
(
addr
)Ë|
OTG_DOEPCTLX_SD0PID
;

163 
	}
}

165 
uöt8_t
 
	$dwc_ï_°Æl_gë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
)

168 i‡(
addr
 & 0x80) {

169  (
	`REBASE
(
	`OTG_DIEPCTL
(
addr
 & 0x7f)) &

170 
OTG_DIEPCTL0_STALL
) ? 1 : 0;

172  (
	`REBASE
(
	`OTG_DOEPCTL
(
addr
)) &

173 
OTG_DOEPCTL0_STALL
) ? 1 : 0;

175 
	}
}

177 
	$dwc_ï_«k_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
«k
)

180 i‡(
addr
 & 0x80) {

184 
usbd_dev
->
f‹˚_«k
[
addr
] = 
«k
;

186 i‡(
«k
) {

187 
	`REBASE
(
	`OTG_DOEPCTL
(
addr
)Ë|
OTG_DOEPCTL0_SNAK
;

189 
	`REBASE
(
	`OTG_DOEPCTL
(
addr
)Ë|
OTG_DOEPCTL0_CNAK
;

191 
	}
}

193 
uöt16_t
 
	$dwc_ï_wrôe_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

194 c⁄° *
buf
, 
uöt16_t
 
Àn
)

196 c⁄° 
uöt32_t
 *
buf32
 = 
buf
;

197 #i‡
	`deföed
(
__ARM_ARCH_6M__
)

198 c⁄° 
uöt8_t
 *
buf8
 = 
buf
;

199 
uöt32_t
 
w‹d32
;

201 
i
;

203 
addr
 &= 0x7F;

206 i‡(
	`REBASE
(
	`OTG_DIEPTSIZ
(
addr
)Ë& 
OTG_DIEPSIZ0_PKTCNT
) {

211 
	`REBASE
(
	`OTG_DIEPTSIZ
(
addr
)Ë
OTG_DIEPSIZ0_PKTCNT
 | 
Àn
;

212 
	`REBASE
(
	`OTG_DIEPCTL
(
addr
)Ë|
OTG_DIEPCTL0_EPENA
 |

213 
OTG_DIEPCTL0_CNAK
;

217 #i‡
	`deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

218 
i
 = 
Àn
; i > 0; i -= 4) {

219 
	`REBASE
(
	`OTG_FIFO
(
addr
)Ë*
buf32
++;

223 #i‡
	`deföed
(
__ARM_ARCH_6M__
)

225 i‡(((
uöt32_t
)
buf8
 & 0x3) == 0) {

226 
i
 = 
Àn
; i > 0; i -= 4) {

227 
	`REBASE
(
	`OTG_FIFO
(
addr
)Ë*
buf32
++;

230 
i
 = 
Àn
; i > 0; i -= 4) {

231 
	`mem˝y
(&
w‹d32
, 
buf8
, 4);

232 
	`REBASE
(
	`OTG_FIFO
(
addr
)Ë
w‹d32
;

233 
buf8
 += 4;

238  
Àn
;

239 
	}
}

241 
uöt16_t
 
	$dwc_ï_ªad_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

242 *
buf
, 
uöt16_t
 
Àn
)

244 
i
;

245 
uöt32_t
 *
buf32
 = 
buf
;

246 #i‡
	`deföed
(
__ARM_ARCH_6M__
)

247 
uöt8_t
 *
buf8
 = 
buf
;

248 
uöt32_t
 
w‹d32
;

250 
uöt32_t
 
exåa
;

255 (Ë
addr
;

256 
Àn
 = 
	`MIN
÷í, 
usbd_dev
->
rxb˙t
);

259 #i‡
	`deföed
(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7EM__
)

260 
i
 = 
Àn
; i >= 4; i -= 4) {

261 *
buf32
++ = 
	`REBASE
(
	`OTG_FIFO
(0));

262 
usbd_dev
->
rxb˙t
 -= 4;

266 #i‡
	`deföed
(
__ARM_ARCH_6M__
)

268 i‡(((
uöt32_t
)
buf8
 & 0x3) == 0) {

269 
i
 = 
Àn
; i >= 4; i -= 4) {

270 *
buf32
++ = 
	`REBASE
(
	`OTG_FIFO
(0));

271 
usbd_dev
->
rxb˙t
 -= 4;

274 
i
 = 
Àn
; i >= 4; i -= 4) {

275 
w‹d32
 = 
	`REBASE
(
	`OTG_FIFO
(0));

276 
	`mem˝y
(
buf8
, &
w‹d32
, 4);

277 
usbd_dev
->
rxb˙t
 -= 4;

278 
buf8
 += 4;

281 
buf32
 = (
uöt32_t
 *)
buf8
;

285 i‡(
i
) {

286 
exåa
 = 
	`REBASE
(
	`OTG_FIFO
(0));

288 i‡(
usbd_dev
->
rxb˙t
 < 4) {

290 
usbd_dev
->
rxb˙t
 = 0;

292 
usbd_dev
->
rxb˙t
 -= 4;

294 
	`mem˝y
(
buf32
, &
exåa
, 
i
);

297  
Àn
;

298 
	}
}

300 
	$dwc_Êush_txfifo
(
usbd_devi˚
 *
usbd_dev
, 
ï
)

302 
uöt32_t
 
fifo
;

304 
	`REBASE
(
	`OTG_DIEPCTL
(
ï
)Ë|
OTG_DIEPCTL0_SNAK
;

306 !(
	`REBASE
(
	`OTG_DIEPINT
(
ï
)Ë& 
OTG_DIEPINTX_INEPNE
)) {

310 
fifo
 = (
	`REBASE
(
	`OTG_DIEPCTL
(
ï
)Ë& 
OTG_DIEPCTL0_TXFNUM_MASK
) >> 22;

312 !(
	`REBASE
(
OTG_GRSTCTL
Ë& 
OTG_GRSTCTL_AHBIDL
)) {

316 
	`REBASE
(
OTG_GRSTCTL
Ë(
fifo
 << 6Ë| 
OTG_GRSTCTL_TXFFLSH
;

318 
	`REBASE
(
	`OTG_DIEPTSIZ
(
ï
)) = 0;

319 (
	`REBASE
(
OTG_GRSTCTL
Ë& 
OTG_GRSTCTL_TXFFLSH
)) {

322 
	}
}

324 
	$dwc_pﬁl
(
usbd_devi˚
 *
usbd_dev
)

327 
uöt32_t
 
öt°s
 = 
	`REBASE
(
OTG_GINTSTS
);

328 
i
;

330 i‡(
öt°s
 & 
OTG_GINTSTS_ENUMDNE
) {

332 
	`REBASE
(
OTG_GINTSTS
Ë
OTG_GINTSTS_ENUMDNE
;

333 
usbd_dev
->
fifo_mem_t›
 = usbd_dev->
drivî
->
rx_fifo_size
;

334 
	`_usbd_ª£t
(
usbd_dev
);

342 
i
 = 0; i < 4; i++) {

343 i‡(
	`REBASE
(
	`OTG_DIEPINT
(
i
)Ë& 
OTG_DIEPINTX_XFRC
) {

345 i‡(
usbd_dev
->
u£r_ˇŒback_˘r
[
i
]

346 [
USB_TRANSACTION_IN
]) {

347 
usbd_dev
->
u£r_ˇŒback_˘r
[
i
]

348 [
USB_TRANSACTION_IN
](
usbd_dev
, 
i
);

351 
	`REBASE
(
	`OTG_DIEPINT
(
i
)Ë
OTG_DIEPINTX_XFRC
;

356 i‡(
öt°s
 & 
OTG_GINTSTS_RXFLVL
) {

358 
uöt32_t
 
rx°•
 = 
	`REBASE
(
OTG_GRXSTSP
);

359 
uöt32_t
 
pkt°s
 = 
rx°•
 & 
OTG_GRXSTSP_PKTSTS_MASK
;

360 
uöt8_t
 
ï
 = 
rx°•
 & 
OTG_GRXSTSP_EPNUM_MASK
;

361 i‡(
pkt°s
 =
OTG_GRXSTSP_PKTSTS_OUT_COMP


362 || 
pkt°s
 =
OTG_GRXSTSP_PKTSTS_SETUP_COMP
) {

363 
	`REBASE
(
	`OTG_DOEPTSIZ
(
ï
)Ë
usbd_dev
->
d€±siz
[ep];

364 
	`REBASE
(
	`OTG_DOEPCTL
(
ï
)Ë|
OTG_DOEPCTL0_EPENA
 |

365 (
usbd_dev
->
f‹˚_«k
[
ï
] ?

366 
OTG_DOEPCTL0_SNAK
 : 
OTG_DOEPCTL0_CNAK
);

370 i‡((
pkt°s
 !
OTG_GRXSTSP_PKTSTS_OUT
) &&

371 (
pkt°s
 !
OTG_GRXSTSP_PKTSTS_SETUP
)) {

375 
uöt8_t
 
ty≥
;

376 i‡(
pkt°s
 =
OTG_GRXSTSP_PKTSTS_SETUP
) {

377 
ty≥
 = 
USB_TRANSACTION_SETUP
;

379 
ty≥
 = 
USB_TRANSACTION_OUT
;

382 i‡(
ty≥
 =
USB_TRANSACTION_SETUP


383 && (
	`REBASE
(
	`OTG_DIEPTSIZ
(
ï
)Ë& 
OTG_DIEPSIZ0_PKTCNT
)) {

387 
	`dwc_Êush_txfifo
(
usbd_dev
, 
ï
);

391 
usbd_dev
->
rxb˙t
 = (
rx°•
 & 
OTG_GRXSTSP_BCNT_MASK
) >> 4;

393 i‡(
usbd_dev
->
u£r_ˇŒback_˘r
[
ï
][
ty≥
]) {

394 
usbd_dev
->
u£r_ˇŒback_˘r
[
ï
][
ty≥
] (usbd_dev,Ép);

398 
i
 = 0; i < 
usbd_dev
->
rxb˙t
; i += 4) {

400 ()
	`REBASE
(
	`OTG_FIFO
(0));

403 
usbd_dev
->
rxb˙t
 = 0;

406 i‡(
öt°s
 & 
OTG_GINTSTS_USBSUSP
) {

407 i‡(
usbd_dev
->
u£r_ˇŒback_su•íd
) {

408 
usbd_dev
->
	`u£r_ˇŒback_su•íd
();

410 
	`REBASE
(
OTG_GINTSTS
Ë
OTG_GINTSTS_USBSUSP
;

413 i‡(
öt°s
 & 
OTG_GINTSTS_WKUPINT
) {

414 i‡(
usbd_dev
->
u£r_ˇŒback_ªsume
) {

415 
usbd_dev
->
	`u£r_ˇŒback_ªsume
();

417 
	`REBASE
(
OTG_GINTSTS
Ë
OTG_GINTSTS_WKUPINT
;

420 i‡(
öt°s
 & 
OTG_GINTSTS_SOF
) {

421 i‡(
usbd_dev
->
u£r_ˇŒback_sof
) {

422 
usbd_dev
->
	`u£r_ˇŒback_sof
();

424 
	`REBASE
(
OTG_GINTSTS
Ë
OTG_GINTSTS_SOF
;

427 i‡(
usbd_dev
->
u£r_ˇŒback_sof
) {

428 
	`REBASE
(
OTG_GINTMSK
Ë|
OTG_GINTMSK_SOFM
;

430 
	`REBASE
(
OTG_GINTMSK
Ë&~
OTG_GINTMSK_SOFM
;

432 
	}
}

434 
	$dwc_disc⁄√˘
(
usbd_devi˚
 *
usbd_dev
, 
boﬁ
 
disc⁄√˘ed
)

436 i‡(
disc⁄√˘ed
) {

437 
	`REBASE
(
OTG_DCTL
Ë|
OTG_DCTL_SDIS
;

439 
	`REBASE
(
OTG_DCTL
Ë&~
OTG_DCTL_SDIS
;

441 
	}
}

	@libopencm3/lib/usb/usb_dwc_common.h

20 #i‚de‡
__USB_DWC_COMMON_H_


21 
	#__USB_DWC_COMMON_H_


	)

23 
dwc_£t_addªss
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
);

24 
dwc_ï_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
ty≥
,

25 
uöt16_t
 
max_size
,

26 (*
ˇŒback
)(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
));

27 
	`dwc_ídpoöts_ª£t
(
usbd_devi˚
 *
usbd_dev
);

28 
	`dwc_ï_°Æl_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
°Æl
);

29 
uöt8_t
 
	`dwc_ï_°Æl_gë
(
usbd_devi˚
 *
usbd_dev
, uöt8_à
addr
);

30 
	`dwc_ï_«k_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
«k
);

31 
uöt16_t
 
	`dwc_ï_wrôe_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

32 c⁄° *
buf
, 
uöt16_t
 
Àn
);

33 
uöt16_t
 
	`dwc_ï_ªad_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

34 *
buf
, 
uöt16_t
 
Àn
);

35 
	`dwc_pﬁl
(
usbd_devi˚
 *
usbd_dev
);

36 
	`dwc_disc⁄√˘
(
usbd_devi˚
 *
usbd_dev
, 
boﬁ
 
disc⁄√˘ed
);

	@libopencm3/lib/usb/usb_efm32.c

21 
	~<°rög.h
>

22 
	~<lib›ícm3/cm3/comm⁄.h
>

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/efm32/cmu.h
>

25 
	~<lib›ícm3/efm32/usb.h
>

26 
	~<lib›ícm3/usb/usbd.h
>

27 
	~"usb_¥iv©e.h
"

30 
	#RX_FIFO_SIZE
 256

	)

42 
	#ENDPOINT_COUNT
 4

	)

44 
_usbd_devi˚
 
	g_usbd_dev
;

47 
usbd_devi˚
 *
	$efm32lg_usbd_öô
()

50 
CMU_HFCORECLKEN0
 |
CMU_HFCORECLKEN0_USB
 | 
CMU_HFCORECLKEN0_USBC
;

51 
CMU_CMD
 = 
CMU_CMD_USBCCLKSEL_HFCLKNODIV
;

54 !(
CMU_STATUS
 & 
CMU_STATUS_USBCHFCLKSEL
));

56 
USB_GINTSTS
 = 
USB_GINTSTS_MMIS
;

58 
USB_CTRL
 &~
USB_CTRL_DMPUAP
;

59 
USB_ROUTE
 = 
USB_ROUTE_DMPUPEN
 | 
USB_ROUTE_PHYPEN
;

62 !(
USB_GRSTCTL
 & 
USB_GRSTCTL_AHBIDL
));

64 
USB_GRSTCTL
 |
USB_GRSTCTL_CSRST
;

65 
USB_GRSTCTL
 & 
USB_GRSTCTL_CSRST
);

68 
USB_GUSBCFG
 |
USB_GUSBCFG_FDMOD
 | 
USB_GUSBCFG_TRDT_16BIT
;

71 
USB_DCFG
 |
USB_DCFG_DSPD
;

74 
USB_PCGCCTL
 = 0;

76 
USB_GRXFSIZ
 = 
efm32lg_usb_drivî
.
rx_fifo_size
;

77 
_usbd_dev
.
fifo_mem_t›
 = 
efm32lg_usb_drivî
.
rx_fifo_size
;

80 
USB_GAHBCFG
 |
USB_GAHBCFG_GLBLINTRMSK
;

81 
USB_GINTMSK
 = 
USB_GINTMSK_ENUMDNEM
 |

82 
USB_GINTMSK_RXFLVLM
 |

83 
USB_GINTMSK_IEPINT
 |

84 
USB_GINTMSK_USBSUSPM
 |

85 
USB_GINTMSK_WUIM
;

86 
USB_DAINTMSK
 = 0xF;

87 
USB_DIEPMSK
 = 
USB_DIEPMSK_XFRCM
;

89  &
_usbd_dev
;

90 
	}
}

92 
	$efm32lg_£t_addªss
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
)

94 ()
usbd_dev
;

96 
USB_DCFG
 = (USB_DCFG & ~
USB_DCFG_DAD
Ë| (
addr
 << 4);

97 
	}
}

99 
	$efm32lg_ï_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
ty≥
,

100 
uöt16_t
 
max_size
,

101 (*
ˇŒback
Ë(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
))

107 
uöt8_t
 
dú
 = 
addr
 & 0x80;

108 
addr
 &= 0x7f;

110 i‡(
addr
 == 0) {

112 i‡(
max_size
 >= 64) {

113 
USB_DIEP0CTL
 = 
USB_DIEP0CTL_MPSIZ_64
;

114 } i‡(
max_size
 >= 32) {

115 
USB_DIEP0CTL
 = 
USB_DIEP0CTL_MPSIZ_32
;

116 } i‡(
max_size
 >= 16) {

117 
USB_DIEP0CTL
 = 
USB_DIEP0CTL_MPSIZ_16
;

119 
USB_DIEP0CTL
 = 
USB_DIEP0CTL_MPSIZ_8
;

122 
USB_DIEP0TSIZ
 =

123 (
max_size
 & 
USB_DIEP0TSIZ_XFRSIZ_MASK
);

124 
USB_DIEP0CTL
 |=

125 
USB_DIEP0CTL_EPENA
 | 
USB_DIEP0CTL_SNAK
;

128 
usbd_dev
->
d€±siz
[0] = 
USB_DIEP0TSIZ_STUPCNT_1
 |

129 
USB_DIEP0TSIZ_PKTCNT
 |

130 (
max_size
 & 
USB_DIEP0TSIZ_XFRSIZ_MASK
);

131 
	`USB_DOEPx_TSIZ
(0Ë
usbd_dev
->
d€±siz
[0];

132 
	`USB_DOEPx_CTL
(0) |=

133 
USB_DOEP0CTL_EPENA
 | 
USB_DIEP0CTL_SNAK
;

135 
USB_GNPTXFSIZ
 = ((
max_size
 / 4) << 16) |

136 
usbd_dev
->
drivî
->
rx_fifo_size
;

137 
usbd_dev
->
fifo_mem_t›
 +
max_size
 / 4;

138 
usbd_dev
->
fifo_mem_t›_ï0
 = usbd_dev->
fifo_mem_t›
;

143 i‡(
dú
) {

144 
	`USB_DIEPTXF
(
addr
Ë((
max_size
 / 4) << 16) |

145 
usbd_dev
->
fifo_mem_t›
;

146 
usbd_dev
->
fifo_mem_t›
 +
max_size
 / 4;

148 
	`USB_DIEPx_TSIZ
(
addr
) =

149 (
max_size
 & 
USB_DIEP0TSIZ_XFRSIZ_MASK
);

150 
	`USB_DIEPx_CTL
(
addr
) |=

151 
USB_DIEP0CTL_EPENA
 | 
USB_DIEP0CTL_SNAK
 | (
ty≥
 << 18)

152 | 
USB_DIEP0CTL_USBAEP
 | 
USB_DIEP0CTL_SD0PID


153 | (
addr
 << 22Ë| 
max_size
;

155 i‡(
ˇŒback
) {

156 
usbd_dev
->
u£r_ˇŒback_˘r
[
addr
][
USB_TRANSACTION_IN
] =

157 (*)
ˇŒback
;

161 i‡(!
dú
) {

162 
usbd_dev
->
d€±siz
[
addr
] = 
USB_DIEP0TSIZ_PKTCNT
 |

163 (
max_size
 & 
USB_DIEP0TSIZ_XFRSIZ_MASK
);

164 
	`USB_DOEPx_TSIZ
(
addr
Ë
usbd_dev
->
d€±siz
[addr];

165 
	`USB_DOEPx_CTL
(
addr
Ë|
USB_DOEP0CTL_EPENA
 |

166 
USB_DOEP0CTL_USBAEP
 | 
USB_DIEP0CTL_CNAK
 |

167 
USB_DOEP0CTL_SD0PID
 | (
ty≥
 << 18Ë| 
max_size
;

169 i‡(
ˇŒback
) {

170 
usbd_dev
->
u£r_ˇŒback_˘r
[
addr
][
USB_TRANSACTION_OUT
] =

171 (*)
ˇŒback
;

174 
	}
}

176 
	$efm32lg_ídpoöts_ª£t
(
usbd_devi˚
 *
usbd_dev
)

179 
usbd_dev
->
fifo_mem_t›
 = usbd_dev->
fifo_mem_t›_ï0
;

180 
	}
}

182 
	$efm32lg_ï_°Æl_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

183 
uöt8_t
 
°Æl
)

185 ()
usbd_dev
;

186 i‡(
addr
 == 0) {

187 i‡(
°Æl
) {

188 
	`USB_DIEPx_CTL
(
addr
Ë|
USB_DIEP0CTL_STALL
;

190 
	`USB_DIEPx_CTL
(
addr
Ë&~
USB_DIEP0CTL_STALL
;

194 i‡(
addr
 & 0x80) {

195 
addr
 &= 0x7F;

197 i‡(
°Æl
) {

198 
	`USB_DIEPx_CTL
(
addr
Ë|
USB_DIEP0CTL_STALL
;

200 
	`USB_DIEPx_CTL
(
addr
Ë&~
USB_DIEP0CTL_STALL
;

201 
	`USB_DIEPx_CTL
(
addr
Ë|
USB_DIEP0CTL_SD0PID
;

204 i‡(
°Æl
) {

205 
	`USB_DOEPx_CTL
(
addr
Ë|
USB_DOEP0CTL_STALL
;

207 
	`USB_DOEPx_CTL
(
addr
Ë&~
USB_DOEP0CTL_STALL
;

208 
	`USB_DOEPx_CTL
(
addr
Ë|
USB_DOEP0CTL_SD0PID
;

211 
	}
}

213 
uöt8_t
 
	$efm32lg_ï_°Æl_gë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
)

215 ()
usbd_dev
;

218 i‡(
addr
 & 0x80) {

219  (
	`USB_DIEPx_CTL
(
addr
 & 0x7f) &

220 
USB_DIEP0CTL_STALL
) ? 1 : 0;

222  (
	`USB_DOEPx_CTL
(
addr
) &

223 
USB_DOEP0CTL_STALL
) ? 1 : 0;

225 
	}
}

227 
	$efm32lg_ï_«k_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
«k
)

230 i‡(
addr
 & 0x80) {

234 
usbd_dev
->
f‹˚_«k
[
addr
] = 
«k
;

236 i‡(
«k
) {

237 
	`USB_DOEPx_CTL
(
addr
Ë|
USB_DOEP0CTL_SNAK
;

239 
	`USB_DOEPx_CTL
(
addr
Ë|
USB_DOEP0CTL_CNAK
;

241 
	}
}

243 
uöt16_t
 
	$efm32lg_ï_wrôe_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

244 c⁄° *
buf
, 
uöt16_t
 
Àn
)

246 ()
usbd_dev
;

247 c⁄° 
uöt32_t
 *
buf32
 = 
buf
;

248 
i
;

250 
addr
 &= 0x7F;

253 i‡(
	`USB_DIEPx_TSIZ
(
addr
Ë& 
USB_DIEP0TSIZ_PKTCNT
) {

258 
	`USB_DIEPx_TSIZ
(
addr
Ë
USB_DIEP0TSIZ_PKTCNT
 | 
Àn
;

259 
	`USB_DIEPx_CTL
(
addr
Ë|
USB_DIEP0CTL_EPENA
 |

260 
USB_DIEP0CTL_CNAK
;

261 vﬁ©ûê
uöt32_t
 *
fifo
 = 
	`USB_FIFOxD
(
addr
);

264 
i
 = 
Àn
; i > 0; i -= 4) {

265 *
fifo
++ = *
buf32
++;

268  
Àn
;

269 
	}
}

271 
uöt16_t
 
	$efm32lg_ï_ªad_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

272 *
buf
, 
uöt16_t
 
Àn
)

274 
i
;

275 
uöt32_t
 *
buf32
 = 
buf
;

276 
uöt32_t
 
exåa
;

278 
Àn
 = 
	`MIN
÷í, 
usbd_dev
->
rxb˙t
);

279 
usbd_dev
->
rxb˙t
 -
Àn
;

281 vﬁ©ûê
uöt32_t
 *
fifo
 = 
	`USB_FIFOxD
(
addr
);

282 
i
 = 
Àn
; i >= 4; i -= 4) {

283 *
buf32
++ = *
fifo
++;

286 i‡(
i
) {

287 
exåa
 = *
fifo
++;

288 
	`mem˝y
(
buf32
, &
exåa
, 
i
);

291 
	`USB_DOEPx_TSIZ
(
addr
Ë
usbd_dev
->
d€±siz
[addr];

292 
	`USB_DOEPx_CTL
(
addr
Ë|
USB_DOEP0CTL_EPENA
 |

293 (
usbd_dev
->
f‹˚_«k
[
addr
] ?

294 
USB_DOEP0CTL_SNAK
 : 
USB_DOEP0CTL_CNAK
);

296  
Àn
;

297 
	}
}

299 
	$efm32lg_pﬁl
(
usbd_devi˚
 *
usbd_dev
)

302 
uöt32_t
 
öt°s
 = 
USB_GINTSTS
;

303 
i
;

305 i‡(
öt°s
 & 
USB_GINTSTS_ENUMDNE
) {

307 
USB_GINTSTS
 = 
USB_GINTSTS_ENUMDNE
;

308 
usbd_dev
->
fifo_mem_t›
 = usbd_dev->
drivî
->
rx_fifo_size
;

309 
	`_usbd_ª£t
(
usbd_dev
);

314 i‡(
öt°s
 & 
USB_GINTSTS_RXFLVL
) {

316 
uöt32_t
 
rx°•
 = 
USB_GRXSTSP
;

317 
uöt32_t
 
pkt°s
 = 
rx°•
 & 
USB_GRXSTSP_PKTSTS_MASK
;

318 i‡((
pkt°s
 !
USB_GRXSTSP_PKTSTS_OUT
) &&

319 (
pkt°s
 !
USB_GRXSTSP_PKTSTS_SETUP
)) {

323 
uöt8_t
 
ï
 = 
rx°•
 & 
USB_GRXSTSP_EPNUM_MASK
;

324 
uöt8_t
 
ty≥
;

325 i‡(
pkt°s
 =
USB_GRXSTSP_PKTSTS_SETUP
) {

326 
ty≥
 = 
USB_TRANSACTION_SETUP
;

328 
ty≥
 = 
USB_TRANSACTION_OUT
;

332 
usbd_dev
->
rxb˙t
 = (
rx°•
 & 
USB_GRXSTSP_BCNT_MASK
) >> 4;

339 
i
 = 0; i < 1000; i++) {

340 
	`__asm__
("nop");

343 i‡(
usbd_dev
->
u£r_ˇŒback_˘r
[
ï
][
ty≥
]) {

344 
usbd_dev
->
u£r_ˇŒback_˘r
[
ï
][
ty≥
] (usbd_dev,Ép);

348 
i
 = 0; i < 
usbd_dev
->
rxb˙t
; i += 4) {

349 ()*
	`USB_FIFOxD
(
ï
);

352 
usbd_dev
->
rxb˙t
 = 0;

359 
i
 = 0; i < 
ENDPOINT_COUNT
; i++) {

360 i‡(
	`USB_DIEPx_INT
(
i
Ë& 
USB_DIEP_INT_XFRC
) {

362 i‡(
usbd_dev
->
u£r_ˇŒback_˘r
[
i
]

363 [
USB_TRANSACTION_IN
]) {

364 
usbd_dev
->
u£r_ˇŒback_˘r
[
i
]

365 [
USB_TRANSACTION_IN
](
usbd_dev
, 
i
);

368 
	`USB_DIEPx_INT
(
i
Ë
USB_DIEP_INT_XFRC
;

372 i‡(
öt°s
 & 
USB_GINTSTS_USBSUSP
) {

373 i‡(
usbd_dev
->
u£r_ˇŒback_su•íd
) {

374 
usbd_dev
->
	`u£r_ˇŒback_su•íd
();

376 
USB_GINTSTS
 = 
USB_GINTSTS_USBSUSP
;

379 i‡(
öt°s
 & 
USB_GINTSTS_WKUPINT
) {

380 i‡(
usbd_dev
->
u£r_ˇŒback_ªsume
) {

381 
usbd_dev
->
	`u£r_ˇŒback_ªsume
();

383 
USB_GINTSTS
 = 
USB_GINTSTS_WKUPINT
;

386 i‡(
öt°s
 & 
USB_GINTSTS_SOF
) {

387 i‡(
usbd_dev
->
u£r_ˇŒback_sof
) {

388 
usbd_dev
->
	`u£r_ˇŒback_sof
();

390 
USB_GINTSTS
 = 
USB_GINTSTS_SOF
;

393 i‡(
usbd_dev
->
u£r_ˇŒback_sof
) {

394 
USB_GINTMSK
 |
USB_GINTMSK_SOFM
;

396 
USB_GINTMSK
 &~
USB_GINTMSK_SOFM
;

398 
	}
}

400 
	$efm32lg_disc⁄√˘
(
usbd_devi˚
 *
usbd_dev
, 
boﬁ
 
disc⁄√˘ed
)

402 ()
usbd_dev
;

404 i‡(
disc⁄√˘ed
) {

405 
USB_DCTL
 |
USB_DCTL_SDIS
;

407 
USB_DCTL
 &~
USB_DCTL_SDIS
;

409 
	}
}

411 c⁄° 
_usbd_drivî
 
	gefm32lg_usb_drivî
 = {

412 .
öô
 = 
efm32lg_usbd_öô
,

413 .
	g£t_addªss
 = 
efm32lg_£t_addªss
,

414 .
	gï_£tup
 = 
efm32lg_ï_£tup
,

415 .
	gï_ª£t
 = 
efm32lg_ídpoöts_ª£t
,

416 .
	gï_°Æl_£t
 = 
efm32lg_ï_°Æl_£t
,

417 .
	gï_°Æl_gë
 = 
efm32lg_ï_°Æl_gë
,

418 .
	gï_«k_£t
 = 
efm32lg_ï_«k_£t
,

419 .
	gï_wrôe_∑ckë
 = 
efm32lg_ï_wrôe_∑ckë
,

420 .
	gï_ªad_∑ckë
 = 
efm32lg_ï_ªad_∑ckë
,

421 .
	gpﬁl
 = 
efm32lg_pﬁl
,

422 .
	gdisc⁄√˘
 = 
efm32lg_disc⁄√˘
,

423 .
	gba£_addªss
 = 
USB_BASE
,

424 .
	g£t_addªss_bef‹e_°©us
 = 1,

425 .
	grx_fifo_size
 = 
RX_FIFO_SIZE
,

	@libopencm3/lib/usb/usb_efm32hg.c

21 
	~<°rög.h
>

22 
	~<lib›ícm3/cm3/comm⁄.h
>

23 
	~<lib›ícm3/efm32/mem‹ym≠.h
>

24 
	~<lib›ícm3/efm32/cmu.h
>

25 
	~<lib›ícm3/efm32/usb.h
>

26 
	~<lib›ícm3/usb/usbd.h
>

27 
	~<lib›ícm3/usb/dwc/Ÿg_fs.h
>

28 
	~"usb_¥iv©e.h
"

29 
	~"usb_dwc_comm⁄.h
"

32 
	#RX_FIFO_SIZE
 256

	)

37 
	#ENDPOINT_COUNT
 4

	)

39 
_usbd_devi˚
 
	g_usbd_dev
;

42 
usbd_devi˚
 *
	$efm32hg_usbd_öô
()

45 
	`cmu_≥rùh_˛ock_íabÀ
(
CMU_USB
);

46 
	`cmu_≥rùh_˛ock_íabÀ
(
CMU_USBC
);

47 
	`cmu_≥rùh_˛ock_íabÀ
(
CMU_LE
);

50 
CMU_LFCLKSEL
 = 
CMU_LFCLKSEL_LFC_LFRCO
;

53 
	`cmu_≥rùh_˛ock_íabÀ
(
CMU_USBLE
);

56 
CMU_USHFRCOCONF
 = 
CMU_USHFRCOCONF_BAND_48MHZ
;

59 
CMU_USBCRCTRL
 |
CMU_USBCRCTRL_EN
;

62 
	`cmu_osc_⁄
(
USHFRCO
);

63 
	`cmu_waô_f‹_osc_ªady
(
USHFRCO
);

66 
	`cmu_£t_usb˛k_sour˚
(
USHFRCO
);

67 
	`cmu_waô_f‹_usb˛k_£À˘ed
(
USHFRCO
);

70 
USB_CTRL
 = 0;

73 
USB_ROUTE
 = 
USB_ROUTE_PHYPEN
;

76 !(
OTG_FS_GRSTCTL
 & 
OTG_GRSTCTL_AHBIDL
));

78 
OTG_FS_GRSTCTL
 |
OTG_GRSTCTL_CSRST
;

79 
OTG_FS_GRSTCTL
 & 
OTG_GRSTCTL_CSRST
);

82 
OTG_FS_DCTL
 &~
OTG_DCTL_SDIS
;

85 
OTG_FS_GUSBCFG
 |
OTG_GUSBCFG_FDMOD
 | 
OTG_GUSBCFG_TRDT_MASK
;

87 
OTG_FS_GINTSTS
 = 
OTG_GINTSTS_MMIS
;

90 
OTG_FS_DCFG
 |
OTG_DCFG_DSPD
;

93 
OTG_FS_PCGCCTL
 = 0;

95 
OTG_FS_GRXFSIZ
 = 
efm32hg_usb_drivî
.
rx_fifo_size
;

96 
_usbd_dev
.
fifo_mem_t›
 = 
efm32hg_usb_drivî
.
rx_fifo_size
;

99 
OTG_FS_GAHBCFG
 |
OTG_GAHBCFG_GINT
;

100 
OTG_FS_GINTMSK
 = 
OTG_GINTMSK_ENUMDNEM
 |

101 
OTG_GINTMSK_RXFLVLM
 |

102 
OTG_GINTMSK_IEPINT
 |

103 
OTG_GINTMSK_USBSUSPM
 |

104 
OTG_GINTMSK_WUIM
;

105 
OTG_FS_DAINTMSK
 = 0xF;

106 
OTG_FS_DIEPMSK
 = 
OTG_DIEPMSK_XFRCM
;

108  &
_usbd_dev
;

109 
	}
}

111 c⁄° 
_usbd_drivî
 
	gefm32hg_usb_drivî
 = {

112 .
öô
 = 
efm32hg_usbd_öô
,

113 .
	g£t_addªss
 = 
dwc_£t_addªss
,

114 .
	gï_£tup
 = 
dwc_ï_£tup
,

115 .
	gï_ª£t
 = 
dwc_ídpoöts_ª£t
,

116 .
	gï_°Æl_£t
 = 
dwc_ï_°Æl_£t
,

117 .
	gï_°Æl_gë
 = 
dwc_ï_°Æl_gë
,

118 .
	gï_«k_£t
 = 
dwc_ï_«k_£t
,

119 .
	gï_wrôe_∑ckë
 = 
dwc_ï_wrôe_∑ckë
,

120 .
	gï_ªad_∑ckë
 = 
dwc_ï_ªad_∑ckë
,

121 .
	gpﬁl
 = 
dwc_pﬁl
,

122 .
	gdisc⁄√˘
 = 
dwc_disc⁄√˘
,

123 .
	gba£_addªss
 = 
USB_OTG_FS_BASE
,

124 .
	g£t_addªss_bef‹e_°©us
 = 1,

125 .
	grx_fifo_size
 = 
RX_FIFO_SIZE
,

	@libopencm3/lib/usb/usb_f107.c

20 
	~<°rög.h
>

21 
	~<lib›ícm3/cm3/comm⁄.h
>

22 
	~<lib›ícm3/°m32/toﬁs.h
>

23 
	~<lib›ícm3/°m32/rcc.h
>

24 
	~<lib›ícm3/usb/usbd.h
>

25 
	~<lib›ícm3/usb/dwc/Ÿg_fs.h
>

26 
	~"usb_¥iv©e.h
"

27 
	~"usb_dwc_comm⁄.h
"

30 
	#RX_FIFO_SIZE
 128

	)

32 
usbd_devi˚
 *
°m32f107_usbd_öô
();

34 
_usbd_devi˚
 
	gusbd_dev
;

36 c⁄° 
_usbd_drivî
 
	g°m32f107_usb_drivî
 = {

37 .
öô
 = 
°m32f107_usbd_öô
,

38 .
	g£t_addªss
 = 
dwc_£t_addªss
,

39 .
	gï_£tup
 = 
dwc_ï_£tup
,

40 .
	gï_ª£t
 = 
dwc_ídpoöts_ª£t
,

41 .
	gï_°Æl_£t
 = 
dwc_ï_°Æl_£t
,

42 .
	gï_°Æl_gë
 = 
dwc_ï_°Æl_gë
,

43 .
	gï_«k_£t
 = 
dwc_ï_«k_£t
,

44 .
	gï_wrôe_∑ckë
 = 
dwc_ï_wrôe_∑ckë
,

45 .
	gï_ªad_∑ckë
 = 
dwc_ï_ªad_∑ckë
,

46 .
	gpﬁl
 = 
dwc_pﬁl
,

47 .
	gdisc⁄√˘
 = 
dwc_disc⁄√˘
,

48 .
	gba£_addªss
 = 
USB_OTG_FS_BASE
,

49 .
	g£t_addªss_bef‹e_°©us
 = 1,

50 .
	grx_fifo_size
 = 
RX_FIFO_SIZE
,

54 
usbd_devi˚
 *
	$°m32f107_usbd_öô
()

56 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_OTGFS
);

57 
OTG_FS_GUSBCFG
 |
OTG_GUSBCFG_PHYSEL
;

60 !(
OTG_FS_GRSTCTL
 & 
OTG_GRSTCTL_AHBIDL
));

62 
OTG_FS_GRSTCTL
 |
OTG_GRSTCTL_CSRST
;

63 
OTG_FS_GRSTCTL
 & 
OTG_GRSTCTL_CSRST
);

65 i‡(
OTG_FS_CID
 >
OTG_CID_HAS_VBDEN
) {

67 
OTG_FS_GCCFG
 |
OTG_GCCFG_VBDEN
 | 
OTG_GCCFG_PWRDWN
;

70 
OTG_FS_GCCFG
 |
OTG_GCCFG_VBUSBSEN
 | 
OTG_GCCFG_PWRDWN
;

73 
OTG_FS_DCTL
 &~
OTG_DCTL_SDIS
;

76 
OTG_FS_GUSBCFG
 |
OTG_GUSBCFG_FDMOD
 | 
OTG_GUSBCFG_TRDT_MASK
;

78 
OTG_FS_GINTSTS
 = 
OTG_GINTSTS_MMIS
;

81 
OTG_FS_DCFG
 |
OTG_DCFG_DSPD
;

84 
OTG_FS_PCGCCTL
 = 0;

86 
OTG_FS_GRXFSIZ
 = 
°m32f107_usb_drivî
.
rx_fifo_size
;

87 
usbd_dev
.
fifo_mem_t›
 = 
°m32f107_usb_drivî
.
rx_fifo_size
;

90 
OTG_FS_GAHBCFG
 |
OTG_GAHBCFG_GINT
;

91 
OTG_FS_GINTMSK
 = 
OTG_GINTMSK_ENUMDNEM
 |

92 
OTG_GINTMSK_RXFLVLM
 |

93 
OTG_GINTMSK_IEPINT
 |

94 
OTG_GINTMSK_USBSUSPM
 |

95 
OTG_GINTMSK_WUIM
;

96 
OTG_FS_DAINTMSK
 = 0xF;

97 
OTG_FS_DIEPMSK
 = 
OTG_DIEPMSK_XFRCM
;

99  &
usbd_dev
;

100 
	}
}

	@libopencm3/lib/usb/usb_f207.c

20 
	~<°rög.h
>

21 
	~<lib›ícm3/cm3/comm⁄.h
>

22 
	~<lib›ícm3/°m32/toﬁs.h
>

23 
	~<lib›ícm3/°m32/rcc.h
>

24 
	~<lib›ícm3/usb/usbd.h
>

25 
	~<lib›ícm3/usb/dwc/Ÿg_hs.h
>

26 
	~"usb_¥iv©e.h
"

27 
	~"usb_dwc_comm⁄.h
"

30 
	#RX_FIFO_SIZE
 512

	)

32 
usbd_devi˚
 *
°m32f207_usbd_öô
();

34 
_usbd_devi˚
 
	gusbd_dev
;

36 c⁄° 
_usbd_drivî
 
	g°m32f207_usb_drivî
 = {

37 .
öô
 = 
°m32f207_usbd_öô
,

38 .
	g£t_addªss
 = 
dwc_£t_addªss
,

39 .
	gï_£tup
 = 
dwc_ï_£tup
,

40 .
	gï_ª£t
 = 
dwc_ídpoöts_ª£t
,

41 .
	gï_°Æl_£t
 = 
dwc_ï_°Æl_£t
,

42 .
	gï_°Æl_gë
 = 
dwc_ï_°Æl_gë
,

43 .
	gï_«k_£t
 = 
dwc_ï_«k_£t
,

44 .
	gï_wrôe_∑ckë
 = 
dwc_ï_wrôe_∑ckë
,

45 .
	gï_ªad_∑ckë
 = 
dwc_ï_ªad_∑ckë
,

46 .
	gpﬁl
 = 
dwc_pﬁl
,

47 .
	gdisc⁄√˘
 = 
dwc_disc⁄√˘
,

48 .
	gba£_addªss
 = 
USB_OTG_HS_BASE
,

49 .
	g£t_addªss_bef‹e_°©us
 = 1,

50 .
	grx_fifo_size
 = 
RX_FIFO_SIZE
,

54 
usbd_devi˚
 *
	$°m32f207_usbd_öô
()

56 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_OTGHS
);

57 
OTG_HS_GINTSTS
 = 
OTG_GINTSTS_MMIS
;

59 
OTG_HS_GUSBCFG
 |
OTG_GUSBCFG_PHYSEL
;

61 
OTG_HS_GCCFG
 |
OTG_GCCFG_VBUSBSEN
 | 
OTG_GCCFG_PWRDWN
;

64 !(
OTG_HS_GRSTCTL
 & 
OTG_GRSTCTL_AHBIDL
));

66 
OTG_HS_GRSTCTL
 |
OTG_GRSTCTL_CSRST
;

67 
OTG_HS_GRSTCTL
 & 
OTG_GRSTCTL_CSRST
);

70 
OTG_HS_GUSBCFG
 |
OTG_GUSBCFG_FDMOD
 | 
OTG_GUSBCFG_TRDT_MASK
;

73 
OTG_HS_DCFG
 |
OTG_DCFG_DSPD
;

76 
OTG_HS_PCGCCTL
 = 0;

78 
OTG_HS_GRXFSIZ
 = 
°m32f207_usb_drivî
.
rx_fifo_size
;

79 
usbd_dev
.
fifo_mem_t›
 = 
°m32f207_usb_drivî
.
rx_fifo_size
;

82 
OTG_HS_GAHBCFG
 |
OTG_GAHBCFG_GINT
;

83 
OTG_HS_GINTMSK
 = 
OTG_GINTMSK_ENUMDNEM
 |

84 
OTG_GINTMSK_RXFLVLM
 |

85 
OTG_GINTMSK_IEPINT
 |

86 
OTG_GINTMSK_USBSUSPM
 |

87 
OTG_GINTMSK_WUIM
;

88 
OTG_HS_DAINTMSK
 = 0xF;

89 
OTG_HS_DIEPMSK
 = 
OTG_DIEPMSK_XFRCM
;

91  &
usbd_dev
;

92 
	}
}

	@libopencm3/lib/usb/usb_lm4f.c

102 
	~<lib›ícm3/cm3/comm⁄.h
>

103 
	~<lib›ícm3/lm4f/usb.h
>

104 
	~<lib›ícm3/lm4f/rcc.h
>

105 
	~<lib›ícm3/usb/usbd.h
>

106 
	~"../../lib/usb/usb_¥iv©e.h
"

108 
	~<°dboﬁ.h
>

111 
	#MAX_FIFO_RAM
 (4 * 1024)

	)

113 c⁄° 
_usbd_drivî
 
	glm4f_usb_drivî
;

132 
	$usb_íabÀ_öãºu±s
(
usb_öãºu±
 
öts
,

133 
usb_ï_öãºu±
 
rx_öts
,

134 
usb_ï_öãºu±
 
tx_öts
)

136 
USB_IE
 |
öts
;

137 
USB_RXIE
 |
rx_öts
;

138 
USB_TXIE
 |
tx_öts
;

139 
	}
}

158 
	$usb_dißbÀ_öãºu±s
(
usb_öãºu±
 
öts
,

159 
usb_ï_öãºu±
 
rx_öts
,

160 
usb_ï_öãºu±
 
tx_öts
)

162 
USB_IE
 &~
öts
;

163 
USB_RXIE
 &~
rx_öts
;

164 
USB_TXIE
 &~
tx_öts
;

165 
	}
}

170 
ölöe
 
	$lm4f_usb_so·_disc⁄√˘
()

172 
USB_POWER
 &~
USB_POWER_SOFTCONN
;

173 
	}
}

175 
ölöe
 
	$lm4f_usb_so·_c⁄√˘
()

177 
USB_POWER
 |
USB_POWER_SOFTCONN
;

178 
	}
}

180 
	$lm4f_£t_addªss
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
)

182 ()
usbd_dev
;

184 
USB_FADDR
 = 
addr
 & 
USB_FADDR_FUNCADDR_MASK
;

185 
	}
}

187 
	$lm4f_ï_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
ty≥
,

188 
uöt16_t
 
max_size
,

189 (*
ˇŒback
Ë(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
))

191 ()
usbd_dev
;

192 ()
ty≥
;

194 
uöt8_t
 
ªg8
;

195 
uöt16_t
 
fifo_size
;

197 c⁄° 
boﬁ
 
dú_tx
 = 
addr
 & 0x80;

198 c⁄° 
uöt8_t
 
ï
 = 
addr
 & 0x0f;

204 i‡(
max_size
 > 1024) {

205 
fifo_size
 = 2048;

206 
ªg8
 = 
USB_FIFOSZ_SIZE_2048
;

207 } i‡(
max_size
 > 512) {

208 
fifo_size
 = 1024;

209 
ªg8
 = 
USB_FIFOSZ_SIZE_1024
;

210 } i‡(
max_size
 > 256) {

211 
fifo_size
 = 512;

212 
ªg8
 = 
USB_FIFOSZ_SIZE_512
;

213 } i‡(
max_size
 > 128) {

214 
fifo_size
 = 256;

215 
ªg8
 = 
USB_FIFOSZ_SIZE_256
;

216 } i‡(
max_size
 > 64) {

217 
fifo_size
 = 128;

218 
ªg8
 = 
USB_FIFOSZ_SIZE_128
;

219 } i‡(
max_size
 > 32) {

220 
fifo_size
 = 64;

221 
ªg8
 = 
USB_FIFOSZ_SIZE_64
;

222 } i‡(
max_size
 > 16) {

223 
fifo_size
 = 32;

224 
ªg8
 = 
USB_FIFOSZ_SIZE_32
;

225 } i‡(
max_size
 > 8) {

226 
fifo_size
 = 16;

227 
ªg8
 = 
USB_FIFOSZ_SIZE_16
;

229 
fifo_size
 = 8;

230 
ªg8
 = 
USB_FIFOSZ_SIZE_8
;

234 i‡(
addr
 == 0) {

235 
USB_EPIDX
 = 0;

237 i‡(
ªg8
 > 
USB_FIFOSZ_SIZE_64
) {

238 
ªg8
 = 
USB_FIFOSZ_SIZE_64
;

242 
USB_RXFIFOSZ
 = 
ªg8
;

243 
USB_TXFIFOSZ
 = 
ªg8
;

249 
usbd_dev
->
fifo_mem_t›_ï0
 = 64;

254 i‡(
usbd_dev
->
fifo_mem_t›
 + 
fifo_size
 > 
MAX_FIFO_RAM
) {

258 
USB_EPIDX
 = 
addr
 & 
USB_EPIDX_MASK
;

261 i‡(
dú_tx
) {

262 
	`USB_TXMAXP
(
ï
Ë
max_size
;

263 
USB_TXFIFOSZ
 = 
ªg8
;

264 
USB_TXFIFOADD
 = ((
usbd_dev
->
fifo_mem_t›
) >> 3);

265 i‡(
ˇŒback
) {

266 
usbd_dev
->
u£r_ˇŒback_˘r
[
ï
][
USB_TRANSACTION_IN
] =

267 (*)
ˇŒback
;

269 i‡(
ty≥
 =
USB_ENDPOINT_ATTR_ISOCHRONOUS
) {

270 
	`USB_TXCSRH
(
ï
Ë|
USB_TXCSRH_ISO
;

272 
	`USB_TXCSRH
(
ï
Ë&~
USB_TXCSRH_ISO
;

275 
	`USB_RXMAXP
(
ï
Ë
max_size
;

276 
USB_RXFIFOSZ
 = 
ªg8
;

277 
USB_RXFIFOADD
 = ((
usbd_dev
->
fifo_mem_t›
) >> 3);

278 i‡(
ˇŒback
) {

279 
usbd_dev
->
u£r_ˇŒback_˘r
[
ï
][
USB_TRANSACTION_OUT
] =

280 (*)
ˇŒback
;

282 i‡(
ty≥
 =
USB_ENDPOINT_ATTR_ISOCHRONOUS
) {

283 
	`USB_RXCSRH
(
ï
Ë|
USB_RXCSRH_ISO
;

285 
	`USB_RXCSRH
(
ï
Ë&~
USB_RXCSRH_ISO
;

289 
usbd_dev
->
fifo_mem_t›
 +
fifo_size
;

290 
	}
}

292 
	$lm4f_ídpoöts_ª£t
(
usbd_devi˚
 *
usbd_dev
)

298 
usbd_dev
->
fifo_mem_t›
 = 64;

299 
	}
}

301 
	$lm4f_ï_°Æl_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

302 
uöt8_t
 
°Æl
)

304 ()
usbd_dev
;

306 c⁄° 
uöt8_t
 
ï
 = 
addr
 & 0x0f;

307 c⁄° 
boﬁ
 
dú_tx
 = 
addr
 & 0x80;

309 i‡(
ï
 == 0) {

310 i‡(
°Æl
) {

311 
USB_CSRL0
 |
USB_CSRL0_STALL
;

313 
USB_CSRL0
 &~
USB_CSRL0_STALL
;

318 i‡(
dú_tx
) {

319 i‡(
°Æl
) {

320 (
	`USB_TXCSRL
(
ï
)Ë|
USB_TXCSRL_STALL
;

322 (
	`USB_TXCSRL
(
ï
)Ë&~
USB_TXCSRL_STALL
;

325 i‡(
°Æl
) {

326 (
	`USB_RXCSRL
(
ï
)Ë|
USB_RXCSRL_STALL
;

328 (
	`USB_RXCSRL
(
ï
)Ë&~
USB_RXCSRL_STALL
;

331 
	}
}

333 
uöt8_t
 
	$lm4f_ï_°Æl_gë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
)

335 ()
usbd_dev
;

337 c⁄° 
uöt8_t
 
ï
 = 
addr
 & 0x0f;

338 c⁄° 
boﬁ
 
dú_tx
 = 
addr
 & 0x80;

340 i‡(
ï
 == 0) {

341  
USB_CSRL0
 & 
USB_CSRL0_STALLED
;

344 i‡(
dú_tx
) {

345  
	`USB_TXCSRL
(
ï
Ë& 
USB_TXCSRL_STALLED
;

347  
	`USB_RXCSRL
(
ï
Ë& 
USB_RXCSRL_STALLED
;

349 
	}
}

351 
	$lm4f_ï_«k_£t
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
, uöt8_à
«k
)

353 ()
usbd_dev
;

354 ()
addr
;

355 ()
«k
;

358 
	}
}

360 
uöt16_t
 
	$lm4f_ï_wrôe_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

361 c⁄° *
buf
, 
uöt16_t
 
Àn
)

363 c⁄° 
uöt8_t
 
ï
 = 
addr
 & 0xf;

364 
uöt16_t
 
i
;

366 ()
usbd_dev
;

369 i‡(
ï
 =0 && (
USB_CSRL0
 & 
USB_CSRL0_TXRDY
)) {

371 } i‡(
	`USB_TXCSRL
(
ï
Ë& 
USB_TXCSRL_TXRDY
) {

380 
i
 = 0; i < (
Àn
 & ~0x3); i += 4) {

381 
	`USB_FIFO32
(
ï
Ë*((
uöt32_t
 *)(
buf
 + 
i
));

383 i‡(
Àn
 & 0x2) {

384 
	`USB_FIFO16
(
ï
Ë*((
uöt16_t
 *)(
buf
 + 
i
));

385 
i
 += 2;

387 i‡(
Àn
 & 0x1) {

388 
	`USB_FIFO8
(
ï
Ë*((
uöt8_t
 *)(
buf
 + 
i
));

389 
i
 += 1;

392 i‡(
ï
 == 0) {

399 i‡(
Àn
 != 64) {

400 
USB_CSRL0
 |
USB_CSRL0_TXRDY
 | 
USB_CSRL0_DATAEND
;

402 
USB_CSRL0
 |
USB_CSRL0_TXRDY
;

405 
	`USB_TXCSRL
(
ï
Ë|
USB_TXCSRL_TXRDY
;

408  
i
;

409 
	}
}

411 
uöt16_t
 
	$lm4f_ï_ªad_∑ckë
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
addr
,

412 *
buf
, 
uöt16_t
 
Àn
)

414 ()
usbd_dev
;

416 
uöt16_t
 
æí
;

417 
uöt8_t
 
ï
 = 
addr
 & 0xf;

419 
uöt16_t
 
fifoö
 = 
	`USB_RXCOUNT
(
ï
);

421 
æí
 = (
fifoö
 > 
Àn
) ?Üen : fifoin;

428 
Àn
 = 0;Üí < (
æí
 & ~0x3);Üen += 4) {

429 *((
uöt32_t
 *)(
buf
 + 
Àn
)Ë
	`USB_FIFO32
(
ï
);

431 i‡(
æí
 & 0x2) {

432 *((
uöt16_t
 *)(
buf
 + 
Àn
)Ë
	`USB_FIFO16
(
ï
);

433 
Àn
 += 2;

435 i‡(
æí
 & 0x1) {

436 *((
uöt8_t
 *)(
buf
 + 
Àn
)Ë
	`USB_FIFO8
(
ï
);

439 i‡(
ï
 == 0) {

449 
USB_CSRL0
 |
USB_CSRL0_RXRDYC
;

452 
	`USB_RXCSRL
(
ï
Ë&~
USB_RXCSRL_RXRDY
;

455  
æí
;

456 
	}
}

458 
	$lm4f_pﬁl
(
usbd_devi˚
 *
usbd_dev
)

460 (*
tx_cb
)(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
);

461 (*
rx_cb
)(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
);

462 
i
;

469 c⁄° 
uöt8_t
 
usb_is
 = 
USB_IS
;

470 c⁄° 
uöt8_t
 
usb_rxis
 = 
USB_RXIS
;

471 c⁄° 
uöt8_t
 
usb_txis
 = 
USB_TXIS
;

472 c⁄° 
uöt8_t
 
usb_c§l0
 = 
USB_CSRL0
;

474 i‡((
usb_is
 & 
USB_IM_SUSPEND
Ë&& (
usbd_dev
->
u£r_ˇŒback_su•íd
)) {

475 
usbd_dev
->
	`u£r_ˇŒback_su•íd
();

478 i‡((
usb_is
 & 
USB_IM_RESUME
Ë&& (
usbd_dev
->
u£r_ˇŒback_ªsume
)) {

479 
usbd_dev
->
	`u£r_ˇŒback_ªsume
();

482 i‡(
usb_is
 & 
USB_IM_RESET
) {

483 
	`_usbd_ª£t
(
usbd_dev
);

486 i‡((
usb_is
 & 
USB_IM_SOF
Ë&& (
usbd_dev
->
u£r_ˇŒback_sof
)) {

487 
usbd_dev
->
	`u£r_ˇŒback_sof
();

490 i‡(
usb_txis
 & 
USB_EP0
) {

500 i‡(
usb_c§l0
 & 
USB_CSRL0_RXRDY
) {

501 
_usbd_å™ß˘i⁄
 
ty≥
;

502 
ty≥
 = (
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 !
DATA_OUT
 &&

503 
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 !
LAST_DATA_OUT
)

504 ? 
USB_TRANSACTION_SETUP
 :

505 
USB_TRANSACTION_OUT
;

507 i‡(
usbd_dev
->
u£r_ˇŒback_˘r
[0][
ty≥
]) {

508 
usbd_dev
->

509 
u£r_ˇŒback_˘r
[0][
ty≥
](
usbd_dev
, 0);

514 
tx_cb
 = 
usbd_dev
->
u£r_ˇŒback_˘r
[0]

515 [
USB_TRANSACTION_IN
];

531 i‡((
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 !
DATA_IN
) &&

532 (
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 !
LAST_DATA_IN
) &&

533 (
usbd_dev
->
c⁄åﬁ_°©e
.
°©e
 !
STATUS_IN
)) {

537 i‡(
tx_cb
) {

538 
	`tx_cb
(
usbd_dev
, 0);

544 
i
 = 1; i < 8; i++) {

545 
tx_cb
 = 
usbd_dev
->
u£r_ˇŒback_˘r
[
i
][
USB_TRANSACTION_IN
];

546 
rx_cb
 = 
usbd_dev
->
u£r_ˇŒback_˘r
[
i
][
USB_TRANSACTION_OUT
];

548 i‡((
usb_txis
 & (1 << 
i
)Ë&& 
tx_cb
) {

549 
	`tx_cb
(
usbd_dev
, 
i
);

552 i‡((
usb_rxis
 & (1 << 
i
)Ë&& 
rx_cb
) {

553 
	`rx_cb
(
usbd_dev
, 
i
);

558 
	}
}

560 
	$lm4f_disc⁄√˘
(
usbd_devi˚
 *
usbd_dev
, 
boﬁ
 
disc⁄√˘ed
)

562 ()
usbd_dev
;

569 i‡(
disc⁄√˘ed
) {

570 
	`lm4f_usb_so·_disc⁄√˘
();

572 
	`lm4f_usb_so·_c⁄√˘
();

574 
	}
}

580 
_usbd_devi˚
 
	gusbd_dev
;

583 
usbd_devi˚
 *
	$lm4f_usbd_öô
()

585 
i
;

588 
	`≥rùh_˛ock_íabÀ
(
RCC_USB0
);

590 
SYSCTL_IMC
 |(
SYSCTL_IMC_USBPLLLIM
 | 
SYSCTL_IMC_PLLLIM
);

591 
	`rcc_usb_∂l_⁄
();

594 
	`lm4f_usb_so·_disc⁄√˘
();

597 
SYSCTL_SRUSB
 = 1;

598 
i
 = 0; i < 1000; i++) {

599 
	`__asm__
("nop");

601 
SYSCTL_SRUSB
 = 0;

609 
i
 = 0;

610 (
SYSCTL_RIS
 & 
SYSCTL_RIS_USBPLLLRIS
) == 0) {

611 
i
++;

612 i‡(
i
 > 0xffff) {

618 
	`lm4f_usb_so·_c⁄√˘
();

621 
usbd_dev
.
fifo_mem_t›
 = 64;

623  &
usbd_dev
;

624 
	}
}

627 
	#RX_FIFO_SIZE
 512

	)

629 c⁄° 
_usbd_drivî
 
	glm4f_usb_drivî
 = {

630 .
öô
 = 
lm4f_usbd_öô
,

631 .
	g£t_addªss
 = 
lm4f_£t_addªss
,

632 .
	gï_£tup
 = 
lm4f_ï_£tup
,

633 .
	gï_ª£t
 = 
lm4f_ídpoöts_ª£t
,

634 .
	gï_°Æl_£t
 = 
lm4f_ï_°Æl_£t
,

635 .
	gï_°Æl_gë
 = 
lm4f_ï_°Æl_gë
,

636 .
	gï_«k_£t
 = 
lm4f_ï_«k_£t
,

637 .
	gï_wrôe_∑ckë
 = 
lm4f_ï_wrôe_∑ckë
,

638 .
	gï_ªad_∑ckë
 = 
lm4f_ï_ªad_∑ckë
,

639 .
	gpﬁl
 = 
lm4f_pﬁl
,

640 .
	gdisc⁄√˘
 = 
lm4f_disc⁄√˘
,

641 .
	gba£_addªss
 = 
USB_BASE
,

642 .
	g£t_addªss_bef‹e_°©us
 = 
Ál£
,

643 .
	grx_fifo_size
 = 
RX_FIFO_SIZE
,

	@libopencm3/lib/usb/usb_msc.c

21 
	~<°döt.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<lib›ícm3/cm3/comm⁄.h
>

25 
	~<lib›ícm3/usb/usbd.h
>

26 
	~<lib›ícm3/usb/msc.h
>

27 
	~"usb_¥iv©e.h
"

39 
	#CBW_SIGNATURE
 0x43425355

	)

40 
	#CBW_STATUS_SUCCESS
 0

	)

41 
	#CBW_STATUS_FAILED
 1

	)

42 
	#CBW_STATUS_PHASE_ERROR
 2

	)

45 
	#CSW_SIGNATURE
 0x53425355

	)

46 
	#CSW_STATUS_SUCCESS
 0

	)

47 
	#CSW_STATUS_FAILED
 1

	)

48 
	#CSW_STATUS_PHASE_ERROR
 2

	)

51 
	#SCSI_TEST_UNIT_READY
 0x00

	)

52 
	#SCSI_REQUEST_SENSE
 0x03

	)

53 
	#SCSI_FORMAT_UNIT
 0x04

	)

54 
	#SCSI_READ_6
 0x08

	)

55 
	#SCSI_WRITE_6
 0x0A

	)

56 
	#SCSI_INQUIRY
 0x12

	)

57 
	#SCSI_MODE_SENSE_6
 0x1A

	)

58 
	#SCSI_SEND_DIAGNOSTIC
 0x1D

	)

59 
	#SCSI_READ_CAPACITY
 0x25

	)

60 
	#SCSI_READ_10
 0x28

	)

66 
	#SCSI_REPORT_LUNS
 0xA0

	)

67 
	#SCSI_PREVENT_ALLOW_MEDIUM_REMOVAL
 0x1E

	)

68 
	#SCSI_MODE_SELECT_6
 0x15

	)

69 
	#SCSI_MODE_SELECT_10
 0x55

	)

70 
	#SCSI_MODE_SENSE_10
 0x5A

	)

71 
	#SCSI_READ_12
 0xA8

	)

72 
	#SCSI_READ_FORMAT_CAPACITIES
 0x23

	)

73 
	#SCSI_READ_TOC_PMA_ATIP
 0x43

	)

74 
	#SCSI_START_STOP_UNIT
 0x1B

	)

75 
	#SCSI_SYNCHRONIZE_CACHE
 0x35

	)

76 
	#SCSI_VERIFY
 0x2F

	)

77 
	#SCSI_WRITE_10
 0x2A

	)

78 
	#SCSI_WRITE_12
 0xAA

	)

81 
	esbc_£n£_key
 {

82 
	mSBC_SENSE_KEY_NO_SENSE
 = 0x00,

83 
	mSBC_SENSE_KEY_RECOVERED_ERROR
 = 0x01,

84 
	mSBC_SENSE_KEY_NOT_READY
 = 0x02,

85 
	mSBC_SENSE_KEY_MEDIUM_ERROR
 = 0x03,

86 
	mSBC_SENSE_KEY_HARDWARE_ERROR
 = 0x04,

87 
	mSBC_SENSE_KEY_ILLEGAL_REQUEST
 = 0x05,

88 
	mSBC_SENSE_KEY_UNIT_ATTENTION
 = 0x06,

89 
	mSBC_SENSE_KEY_DATA_PROTECT
 = 0x07,

90 
	mSBC_SENSE_KEY_BLANK_CHECK
 = 0x08,

91 
	mSBC_SENSE_KEY_VENDOR_SPECIFIC
 = 0x09,

92 
	mSBC_SENSE_KEY_COPY_ABORTED
 = 0x0A,

93 
	mSBC_SENSE_KEY_ABORTED_COMMAND
 = 0x0B,

94 
	mSBC_SENSE_KEY_VOLUME_OVERFLOW
 = 0x0D,

95 
	mSBC_SENSE_KEY_MISCOMPARE
 = 0x0E

98 
	esbc_asc
 {

99 
	mSBC_ASC_NO_ADDITIONAL_SENSE_INFORMATION
 = 0x00,

100 
	mSBC_ASC_PERIPHERAL_DEVICE_WRITE_FAULT
 = 0x03,

101 
	mSBC_ASC_LOGICAL_UNIT_NOT_READY
 = 0x04,

102 
	mSBC_ASC_UNRECOVERED_READ_ERROR
 = 0x11,

103 
	mSBC_ASC_INVALID_COMMAND_OPERATION_CODE
 = 0x20,

104 
	mSBC_ASC_LBA_OUT_OF_RANGE
 = 0x21,

105 
	mSBC_ASC_INVALID_FIELD_IN_CDB
 = 0x24,

106 
	mSBC_ASC_WRITE_PROTECTED
 = 0x27,

107 
	mSBC_ASC_NOT_READY_TO_READY_CHANGE
 = 0x28,

108 
	mSBC_ASC_FORMAT_ERROR
 = 0x31,

109 
	mSBC_ASC_MEDIUM_NOT_PRESENT
 = 0x3A

112 
	esbc_ascq
 {

113 
	mSBC_ASCQ_NA
 = 0x00,

114 
	mSBC_ASCQ_FORMAT_COMMAND_FAILED
 = 0x01,

115 
	mSBC_ASCQ_INITIALIZING_COMMAND_REQUIRED
 = 0x02,

116 
	mSBC_ASCQ_OPERATION_IN_PROGRESS
 = 0x07

119 
	eå™s_evít
 {

120 
	mEVENT_CBW_VALID
,

121 
	mEVENT_NEED_STATUS


124 
	susb_msc_cbw
 {

125 
uöt32_t
 
	mdCBWSig«tuª
;

126 
uöt32_t
 
	mdCBWTag
;

127 
uöt32_t
 
	mdCBWD©aTøns„rLígth
;

128 
uöt8_t
 
	mbmCBWFœgs
;

129 
uöt8_t
 
	mbCBWLUN
;

130 
uöt8_t
 
	mbCBWCBLígth
;

131 
uöt8_t
 
	mCBWCB
[16];

132 } 
__©åibuã__
((
∑cked
));

134 
	susb_msc_csw
 {

135 
uöt32_t
 
	mdCSWSig«tuª
;

136 
uöt32_t
 
	mdCSWTag
;

137 
uöt32_t
 
	mdCSWD©aResidue
;

138 
uöt8_t
 
	mbCSWSètus
;

139 } 
__©åibuã__
((
∑cked
));

141 
	ssbc_£n£_öfo
 {

142 
uöt8_t
 
	mkey
;

143 
uöt8_t
 
	masc
;

144 
uöt8_t
 
	mascq
;

147 
	susb_msc_å™s
 {

148 
uöt8_t
 
	mcbw_˙t
;

150 
usb_msc_cbw
 
	mcbw
;

151 
uöt8_t
 
	mbuf
[1];

152 } 
	mcbw
;

154 
uöt32_t
 
	mbyãs_to_ªad
;

155 
uöt32_t
 
	mbyãs_to_wrôe
;

156 
uöt32_t
 
	mbyã_cou¡
;

159 
uöt32_t
 
	mlba_°¨t
;

160 
uöt32_t
 
	mblock_cou¡
;

161 
uöt32_t
 
	mcuºít_block
;

163 
uöt8_t
 
	mmsd_buf
[512];

165 
boﬁ
 
	mcsw_vÆid
;

166 
uöt8_t
 
	mcsw_£¡
;

168 
usb_msc_csw
 
	mcsw
;

169 
uöt8_t
 
	mbuf
[1];

170 } 
	mcsw
;

173 
	s_usbd_mass_°‹age
 {

174 
usbd_devi˚
 *
	musbd_dev
;

175 
uöt8_t
 
	mï_ö
;

176 
uöt8_t
 
	mï_ö_size
;

177 
uöt8_t
 
	mï_out
;

178 
uöt8_t
 
	mï_out_size
;

180 c⁄° *
	mvíd‹_id
;

181 c⁄° *
	m¥odu˘_id
;

182 c⁄° *
	m¥odu˘_ªvisi⁄_Àvñ
;

183 
uöt32_t
 
	mblock_cou¡
;

185 (*
	mªad_block
)(
uöt32_t
 
	mlba
, 
uöt8_t
 *
	mc›y_to
);

186 (*
	mwrôe_block
)(
uöt32_t
 
	mlba
, c⁄° 
uöt8_t
 *
	mc›y_‰om
);

188 (*
	mlock
)();

189 (*
	mu∆ock
)();

191 
usb_msc_å™s
 
	må™s
;

192 
sbc_£n£_öfo
 
	m£n£
;

195 
usbd_mass_°‹age
 
	g_mass_°‹age
;

199 c⁄° 
uöt8_t
 
	g_•c3_öquúy_ª•⁄£
[36] = {

217 c⁄° 
uöt8_t
 
	g_•c3_ªque°_£n£
[18] = {

236 
	$£t_sbc_°©us
(
usbd_mass_°‹age
 *
ms
,

237 
sbc_£n£_key
 
key
,

238 
sbc_asc
 
asc
,

239 
sbc_ascq
 
ascq
)

241 
ms
->
£n£
.
key
 = (
uöt8_t
) key;

242 
ms
->
£n£
.
asc
 = (
uöt8_t
)ásc;

243 
ms
->
£n£
.
ascq
 = (
uöt8_t
)áscq;

244 
	}
}

246 
	$£t_sbc_°©us_good
(
usbd_mass_°‹age
 *
ms
)

248 
	`£t_sbc_°©us
(
ms
,

249 
SBC_SENSE_KEY_NO_SENSE
,

250 
SBC_ASC_NO_ADDITIONAL_SENSE_INFORMATION
,

251 
SBC_ASCQ_NA
);

252 
	}
}

254 
uöt8_t
 *
	$gë_cbw_buf
(
usb_msc_å™s
 *
å™s
)

256  &
å™s
->
cbw
.cbw.
CBWCB
[0];

257 
	}
}

259 
	$scsi_ªad_6
(
usbd_mass_°‹age
 *
ms
,

260 
usb_msc_å™s
 *
å™s
,

261 
å™s_evít
 
evít
)

263 i‡(
EVENT_CBW_VALID
 =
evít
) {

264 
uöt8_t
 *
buf
;

266 
buf
 = 
	`gë_cbw_buf
(
å™s
);

268 
å™s
->
lba_°¨t
 = (
buf
[2] << 8) | buf[3];

269 
å™s
->
block_cou¡
 = 
buf
[4];

270 
å™s
->
cuºít_block
 = 0;

275 
å™s
->
byãs_to_wrôe
 =Åøns->
block_cou¡
 << 9;

277 
	`£t_sbc_°©us_good
(
ms
);

279 
	}
}

281 
	$scsi_wrôe_6
(
usbd_mass_°‹age
 *
ms
,

282 
usb_msc_å™s
 *
å™s
,

283 
å™s_evít
 
evít
)

285 (Ë
ms
;

287 i‡(
EVENT_CBW_VALID
 =
evít
) {

288 
uöt8_t
 *
buf
;

290 
buf
 = 
	`gë_cbw_buf
(
å™s
);

292 
å™s
->
lba_°¨t
 = ((0x1‡& 
buf
[1]) << 16)

293 | (
buf
[2] << 8) | buf[3];

294 
å™s
->
block_cou¡
 = 
buf
[4];

295 
å™s
->
cuºít_block
 = 0;

297 
å™s
->
byãs_to_ªad
 =Åøns->
block_cou¡
 << 9;

299 
	}
}

301 
	$scsi_wrôe_10
(
usbd_mass_°‹age
 *
ms
,

302 
usb_msc_å™s
 *
å™s
,

303 
å™s_evít
 
evít
)

305 (Ë
ms
;

307 i‡(
EVENT_CBW_VALID
 =
evít
) {

308 
uöt8_t
 *
buf
;

310 
buf
 = 
	`gë_cbw_buf
(
å™s
);

312 
å™s
->
lba_°¨t
 = (
buf
[2] << 24) | (buf[3] << 16) |

313 (
buf
[4] << 8) | buf[5];

314 
å™s
->
block_cou¡
 = (
buf
[7] << 8) | buf[8];

315 
å™s
->
cuºít_block
 = 0;

317 
å™s
->
byãs_to_ªad
 =Åøns->
block_cou¡
 << 9;

319 
	}
}

321 
	$scsi_ªad_10
(
usbd_mass_°‹age
 *
ms
,

322 
usb_msc_å™s
 *
å™s
,

323 
å™s_evít
 
evít
)

325 i‡(
EVENT_CBW_VALID
 =
evít
) {

326 
uöt8_t
 *
buf
;

328 
buf
 = 
	`gë_cbw_buf
(
å™s
);

330 
å™s
->
lba_°¨t
 = (
buf
[2] << 24) | (buf[3] << 16)

331 | (
buf
[4] << 8) | buf[5];

332 
å™s
->
block_cou¡
 = (
buf
[7] << 8) | buf[8];

337 
å™s
->
byãs_to_wrôe
 =Åøns->
block_cou¡
 << 9;

339 
	`£t_sbc_°©us_good
(
ms
);

341 
	}
}

343 
	$scsi_ªad_ˇ∑côy
(
usbd_mass_°‹age
 *
ms
,

344 
usb_msc_å™s
 *
å™s
,

345 
å™s_evít
 
evít
)

347 i‡(
EVENT_CBW_VALID
 =
evít
) {

348 
å™s
->
msd_buf
[0] = 
ms
->
block_cou¡
 >> 24;

349 
å™s
->
msd_buf
[1] = 0xf‡& (
ms
->
block_cou¡
 >> 16);

350 
å™s
->
msd_buf
[2] = 0xf‡& (
ms
->
block_cou¡
 >> 8);

351 
å™s
->
msd_buf
[3] = 0xf‡& 
ms
->
block_cou¡
;

354 
å™s
->
msd_buf
[4] = 0;

355 
å™s
->
msd_buf
[5] = 0;

356 
å™s
->
msd_buf
[6] = 2;

357 
å™s
->
msd_buf
[7] = 0;

358 
å™s
->
byãs_to_wrôe
 = 8;

359 
	`£t_sbc_°©us_good
(
ms
);

361 
	}
}

363 
	$scsi_f‹m©_unô
(
usbd_mass_°‹age
 *
ms
,

364 
usb_msc_å™s
 *
å™s
,

365 
å™s_evít
 
evít
)

367 i‡(
EVENT_CBW_VALID
 =
evít
) {

368 
uöt32_t
 
i
;

370 
	`mem£t
(
å™s
->
msd_buf
, 0, 512);

372 
i
 = 0; i < 
ms
->
block_cou¡
; i++) {

373 (*
ms
->
wrôe_block
)(
i
, 
å™s
->
msd_buf
);

376 
	`£t_sbc_°©us_good
(
ms
);

378 
	}
}

380 
	$scsi_ªque°_£n£
(
usbd_mass_°‹age
 *
ms
,

381 
usb_msc_å™s
 *
å™s
,

382 
å™s_evít
 
evít
)

384 i‡(
EVENT_CBW_VALID
 =
evít
) {

385 
uöt8_t
 *
buf
;

387 
buf
 = &
å™s
->
cbw
.cbw.
CBWCB
[0];

389 
å™s
->
byãs_to_wrôe
 = 
buf
[4];

390 
	`mem˝y
(
å™s
->
msd_buf
, 
_•c3_ªque°_£n£
,

391 (
_•c3_ªque°_£n£
));

393 
å™s
->
msd_buf
[2] = 
ms
->
£n£
.
key
;

394 
å™s
->
msd_buf
[12] = 
ms
->
£n£
.
asc
;

395 
å™s
->
msd_buf
[13] = 
ms
->
£n£
.
ascq
;

397 
	}
}

399 
	$scsi_mode_£n£_6
(
usbd_mass_°‹age
 *
ms
,

400 
usb_msc_å™s
 *
å™s
,

401 
å™s_evít
 
evít
)

403 (Ë
ms
;

405 i‡(
EVENT_CBW_VALID
 =
evít
) {

407 
uöt8_t
 *
buf
;

408 
uöt8_t
 
∑ge_code
;

409 
uöt8_t
 
Æloˇti⁄_Àngth
;

411 
buf
 = &
å™s
->
cbw
.cbw.
CBWCB
[0];

412 
∑ge_code
 = 
buf
[2];

413 
Æloˇti⁄_Àngth
 = 
buf
[4];

415 i‡(0x1C =
∑ge_code
) {

417 
å™s
->
byãs_to_wrôe
 = 4;

419 
å™s
->
msd_buf
[0] = 3;

420 
å™s
->
msd_buf
[1] = 0;

421 
å™s
->
msd_buf
[2] = 0;

422 
å™s
->
csw
.csw.
dCSWD©aResidue
 = 4;

424 } i‡(0x01 =
∑ge_code
) {

425 } i‡(0x3F =
∑ge_code
) {

428 
å™s
->
csw
.csw.
bCSWSètus
 = 
CSW_STATUS_FAILED
;

429 
	`£t_sbc_°©us
(
ms
,

430 
SBC_SENSE_KEY_ILLEGAL_REQUEST
,

431 
SBC_ASC_INVALID_FIELD_IN_CDB
,

432 
SBC_ASCQ_NA
);

436 
	}
}

438 
	$scsi_öquúy
(
usbd_mass_°‹age
 *
ms
,

439 
usb_msc_å™s
 *
å™s
,

440 
å™s_evít
 
evít
)

442 i‡(
EVENT_CBW_VALID
 =
evít
) {

443 
uöt8_t
 
evpd
;

444 
uöt8_t
 *
buf
;

446 
buf
 = 
	`gë_cbw_buf
(
å™s
);

447 
evpd
 = 1 & 
buf
[1];

449 i‡(0 =
evpd
) {

450 
size_t
 
Àn
;

451 
å™s
->
byãs_to_wrôe
 = (
_•c3_öquúy_ª•⁄£
);

452 
	`mem˝y
(
å™s
->
msd_buf
, 
_•c3_öquúy_ª•⁄£
,

453 (
_•c3_öquúy_ª•⁄£
));

455 
Àn
 = 
	`°æí
(
ms
->
víd‹_id
);

456 
Àn
 = 
	`MIN
(len, 8);

457 
	`mem˝y
(&
å™s
->
msd_buf
[8], 
ms
->
víd‹_id
, 
Àn
);

459 
Àn
 = 
	`°æí
(
ms
->
¥odu˘_id
);

460 
Àn
 = 
	`MIN
(len, 16);

461 
	`mem˝y
(&
å™s
->
msd_buf
[16], 
ms
->
¥odu˘_id
, 
Àn
);

463 
Àn
 = 
	`°æí
(
ms
->
¥odu˘_ªvisi⁄_Àvñ
);

464 
Àn
 = 
	`MIN
(len, 4);

465 
	`mem˝y
(&
å™s
->
msd_buf
[32], 
ms
->
¥odu˘_ªvisi⁄_Àvñ
,

466 
Àn
);

468 
å™s
->
csw
.csw.
dCSWD©aResidue
 =

469 (
_•c3_öquúy_ª•⁄£
);

471 
	`£t_sbc_°©us_good
(
ms
);

477 
	}
}

479 
	$scsi_comm™d
(
usbd_mass_°‹age
 *
ms
,

480 
usb_msc_å™s
 *
å™s
,

481 
å™s_evít
 
evít
)

483 i‡(
EVENT_CBW_VALID
 =
evít
) {

485 
å™s
->
csw_£¡
 = 0;

486 
å™s
->
csw
.csw.
dCSWSig«tuª
 = 
CSW_SIGNATURE
;

487 
å™s
->
csw
.csw.
dCSWTag
 =Åøns->
cbw
.cbw.
dCBWTag
;

488 
å™s
->
csw
.csw.
dCSWD©aResidue
 = 0;

489 
å™s
->
csw
.csw.
bCSWSètus
 = 
CSW_STATUS_SUCCESS
;

491 
å™s
->
byãs_to_wrôe
 = 0;

492 
å™s
->
byãs_to_ªad
 = 0;

493 
å™s
->
byã_cou¡
 = 0;

496 
å™s
->
cbw
.cbw.
CBWCB
[0]) {

497 
SCSI_TEST_UNIT_READY
:

498 
SCSI_SEND_DIAGNOSTIC
:

500 
	`£t_sbc_°©us_good
(
ms
);

502 
SCSI_FORMAT_UNIT
:

503 
	`scsi_f‹m©_unô
(
ms
, 
å™s
, 
evít
);

505 
SCSI_REQUEST_SENSE
:

506 
	`scsi_ªque°_£n£
(
ms
, 
å™s
, 
evít
);

508 
SCSI_MODE_SENSE_6
:

509 
	`scsi_mode_£n£_6
(
ms
, 
å™s
, 
evít
);

511 
SCSI_READ_6
:

512 
	`scsi_ªad_6
(
ms
, 
å™s
, 
evít
);

514 
SCSI_INQUIRY
:

515 
	`scsi_öquúy
(
ms
, 
å™s
, 
evít
);

517 
SCSI_READ_CAPACITY
:

518 
	`scsi_ªad_ˇ∑côy
(
ms
, 
å™s
, 
evít
);

520 
SCSI_READ_10
:

521 
	`scsi_ªad_10
(
ms
, 
å™s
, 
evít
);

523 
SCSI_WRITE_6
:

524 
	`scsi_wrôe_6
(
ms
, 
å™s
, 
evít
);

526 
SCSI_WRITE_10
:

527 
	`scsi_wrôe_10
(
ms
, 
å™s
, 
evít
);

530 
	`£t_sbc_°©us
(
ms
, 
SBC_SENSE_KEY_ILLEGAL_REQUEST
,

531 
SBC_ASC_INVALID_COMMAND_OPERATION_CODE
,

532 
SBC_ASCQ_NA
);

534 
å™s
->
byãs_to_wrôe
 = 0;

535 
å™s
->
byãs_to_ªad
 = 0;

536 
å™s
->
csw
.csw.
bCSWSètus
 = 
CSW_STATUS_FAILED
;

539 
	}
}

544 
	$msc_d©a_rx_cb
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
)

546 
usbd_mass_°‹age
 *
ms
;

547 
usb_msc_å™s
 *
å™s
;

548 
Àn
, 
max_Àn
, 
À·
;

549 *
p
;

551 
ms
 = &
_mass_°‹age
;

552 
å™s
 = &
ms
->trans;

555 
À·
 = (
usb_msc_cbw
Ë- 
å™s
->
cbw_˙t
;

556 i‡(0 < 
À·
) {

557 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

558 
p
 = &
å™s
->
cbw
.
buf
[0x1f‡&Åøns->
cbw_˙t
];

559 
Àn
 = 
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 
ï
, 
p
, 
max_Àn
);

560 
å™s
->
cbw_˙t
 +
Àn
;

562 i‡((
usb_msc_cbw
Ë=
å™s
->
cbw_˙t
) {

563 
	`scsi_comm™d
(
ms
, 
å™s
, 
EVENT_CBW_VALID
);

564 i‡(
å™s
->
byã_cou¡
 <Åøns->
byãs_to_ªad
) {

572 i‡(
å™s
->
byã_cou¡
 <Åøns->
byãs_to_ªad
) {

573 i‡(0 < 
å™s
->
block_cou¡
) {

574 i‡((0 =
å™s
->
byã_cou¡
Ë&& (
NULL
 !
ms
->
lock
)) {

575 (*
ms
->
lock
)();

579 
À·
 = 
å™s
->
byãs_to_ªad
 -Åøns->
byã_cou¡
;

580 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

581 
p
 = &
å™s
->
msd_buf
[0x1f‡&Åøns->
byã_cou¡
];

582 
Àn
 = 
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 
ï
, 
p
, 
max_Àn
);

583 
å™s
->
byã_cou¡
 +
Àn
;

585 i‡(0 < 
å™s
->
block_cou¡
) {

586 i‡(0 =(0x1f‡& 
å™s
->
byã_cou¡
)) {

587 
uöt32_t
 
lba
;

589 
lba
 = 
å™s
->
lba_°¨t
 +Åøns->
cuºít_block
;

590 i‡(0 !(*
ms
->
wrôe_block
)(
lba
,

591 
å™s
->
msd_buf
)) {

594 
å™s
->
cuºít_block
++;

599 i‡(
Ál£
 =
å™s
->
csw_vÆid
) {

600 
	`scsi_comm™d
(
ms
, 
å™s
, 
EVENT_NEED_STATUS
);

601 
å™s
->
csw_vÆid
 = 
åue
;

603 
À·
 = (
usb_msc_csw
Ë- 
å™s
->
csw_£¡
;

604 i‡(0 < 
À·
) {

605 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

606 
p
 = &
å™s
->
csw
.
buf
[å™s->
csw_£¡
];

607 
Àn
 = 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 
ms
->
ï_ö
, 
p
,

608 
max_Àn
);

609 
å™s
->
csw_£¡
 +
Àn
;

612 } i‡(
å™s
->
byã_cou¡
 <Åøns->
byãs_to_wrôe
) {

613 i‡(0 < 
å™s
->
block_cou¡
) {

614 i‡((0 =
å™s
->
byã_cou¡
Ë&& (
NULL
 !
ms
->
lock
)) {

615 (*
ms
->
lock
)();

618 i‡(0 =(0x1f‡& 
å™s
->
byã_cou¡
)) {

619 
uöt32_t
 
lba
;

621 
lba
 = 
å™s
->
lba_°¨t
 +Åøns->
cuºít_block
;

622 i‡(0 !(*
ms
->
ªad_block
)(
lba
,

623 
å™s
->
msd_buf
)) {

626 
å™s
->
cuºít_block
++;

630 
À·
 = 
å™s
->
byãs_to_wrôe
 -Åøns->
byã_cou¡
;

631 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

632 
p
 = &
å™s
->
msd_buf
[0x1f‡&Åøns->
byã_cou¡
];

633 
Àn
 = 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 
ms
->
ï_ö
, 
p
, 
max_Àn
);

634 
å™s
->
byã_cou¡
 +
Àn
;

636 i‡(0 < 
å™s
->
block_cou¡
) {

637 i‡(
å™s
->
cuºít_block
 =å™s->
block_cou¡
) {

638 
uöt32_t
 
lba
;

640 
lba
 = 
å™s
->
lba_°¨t
 +Åøns->
cuºít_block
;

641 i‡(0 !(*
ms
->
wrôe_block
)(
lba
,

642 
å™s
->
msd_buf
)) {

646 
å™s
->
cuºít_block
 = 0;

647 i‡(
NULL
 !
ms
->
u∆ock
) {

648 (*
ms
->
u∆ock
)();

652 i‡(
Ál£
 =
å™s
->
csw_vÆid
) {

653 
	`scsi_comm™d
(
ms
, 
å™s
, 
EVENT_NEED_STATUS
);

654 
å™s
->
csw_vÆid
 = 
åue
;

657 
À·
 = (
usb_msc_csw
Ë- 
å™s
->
csw_£¡
;

658 i‡(0 < 
À·
) {

659 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

660 
p
 = &
å™s
->
csw
.
buf
[å™s->
csw_£¡
];

661 
Àn
 = 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 
ms
->
ï_ö
, 
p
,

662 
max_Àn
);

663 
å™s
->
csw_£¡
 +
Àn
;

666 
	}
}

669 
	$msc_d©a_tx_cb
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
)

671 
usbd_mass_°‹age
 *
ms
;

672 
usb_msc_å™s
 *
å™s
;

673 
Àn
, 
max_Àn
, 
À·
;

674 *
p
;

676 
ms
 = &
_mass_°‹age
;

677 
å™s
 = &
ms
->trans;

679 i‡(
å™s
->
byã_cou¡
 <Åøns->
byãs_to_wrôe
) {

680 i‡(0 < 
å™s
->
block_cou¡
) {

681 i‡(0 =(0x1f‡& 
å™s
->
byã_cou¡
)) {

682 
uöt32_t
 
lba
;

684 
lba
 = 
å™s
->
lba_°¨t
 +Åøns->
cuºít_block
;

685 i‡(0 !(*
ms
->
ªad_block
)(
lba
,

686 
å™s
->
msd_buf
)) {

689 
å™s
->
cuºít_block
++;

693 
À·
 = 
å™s
->
byãs_to_wrôe
 -Åøns->
byã_cou¡
;

694 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

695 
p
 = &
å™s
->
msd_buf
[0x1f‡&Åøns->
byã_cou¡
];

696 
Àn
 = 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 
ï
, 
p
, 
max_Àn
);

697 
å™s
->
byã_cou¡
 +
Àn
;

699 i‡(0 < 
å™s
->
block_cou¡
) {

700 i‡(
å™s
->
cuºít_block
 =å™s->
block_cou¡
) {

701 
å™s
->
cuºít_block
 = 0;

702 i‡(
NULL
 !
ms
->
u∆ock
) {

703 (*
ms
->
u∆ock
)();

707 i‡(
Ál£
 =
å™s
->
csw_vÆid
) {

708 
	`scsi_comm™d
(
ms
, 
å™s
, 
EVENT_NEED_STATUS
);

709 
å™s
->
csw_vÆid
 = 
åue
;

712 
À·
 = (
usb_msc_csw
Ë- 
å™s
->
csw_£¡
;

713 i‡(0 < 
À·
) {

714 
max_Àn
 = 
	`MIN
(
ms
->
ï_out_size
, 
À·
);

715 
p
 = &
å™s
->
csw
.
buf
[å™s->
csw_£¡
];

716 
Àn
 = 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 
ï
, 
p
, 
max_Àn
);

717 
å™s
->
csw_£¡
 +
Àn
;

718 } i‡((
usb_msc_csw
Ë=
å™s
->
csw_£¡
) {

720 
å™s
->
lba_°¨t
 = 0xffffffff;

721 
å™s
->
block_cou¡
 = 0;

722 
å™s
->
cuºít_block
 = 0;

723 
å™s
->
cbw_˙t
 = 0;

724 
å™s
->
byãs_to_ªad
 = 0;

725 
å™s
->
byãs_to_wrôe
 = 0;

726 
å™s
->
byã_cou¡
 = 0;

727 
å™s
->
csw_£¡
 = 0;

728 
å™s
->
csw_vÆid
 = 
Ál£
;

731 
	}
}

736 
usbd_ªque°_ªtu∫_codes


737 
	$msc_c⁄åﬁ_ªque°
(
usbd_devi˚
 *
usbd_dev
,

738 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
,

739 
usbd_c⁄åﬁ_com∂ëe_ˇŒback
 *
com∂ëe
)

741 ()
com∂ëe
;

742 ()
usbd_dev
;

744 
ªq
->
bReque°
) {

745 
USB_MSC_REQ_BULK_ONLY_RESET
:

747  
USBD_REQ_HANDLED
;

748 
USB_MSC_REQ_GET_MAX_LUN
:

750 *
buf
[0] = 0;

751 *
Àn
 = 1;

752  
USBD_REQ_HANDLED
;

755  
USBD_REQ_NOTSUPP
;

756 
	}
}

759 
	$msc_£t_c⁄fig
(
usbd_devi˚
 *
usbd_dev
, 
uöt16_t
 
wVÆue
)

761 
usbd_mass_°‹age
 *
ms
 = &
_mass_°‹age
;

763 ()
wVÆue
;

765 
	`usbd_ï_£tup
(
usbd_dev
, 
ms
->
ï_ö
, 
USB_ENDPOINT_ATTR_BULK
,

766 
ms
->
ï_ö_size
, 
msc_d©a_tx_cb
);

767 
	`usbd_ï_£tup
(
usbd_dev
, 
ms
->
ï_out
, 
USB_ENDPOINT_ATTR_BULK
,

768 
ms
->
ï_out_size
, 
msc_d©a_rx_cb
);

770 
	`usbd_ªgi°î_c⁄åﬁ_ˇŒback
(

771 
usbd_dev
,

772 
USB_REQ_TYPE_CLASS
 | 
USB_REQ_TYPE_INTERFACE
,

773 
USB_REQ_TYPE_TYPE
 | 
USB_REQ_TYPE_RECIPIENT
,

774 
msc_c⁄åﬁ_ªque°
);

775 
	}
}

801 
usbd_mass_°‹age
 *
	$usb_msc_öô
(
usbd_devi˚
 *
usbd_dev
,

802 
uöt8_t
 
ï_ö
, uöt8_à
ï_ö_size
,

803 
uöt8_t
 
ï_out
, uöt8_à
ï_out_size
,

804 c⁄° *
víd‹_id
,

805 c⁄° *
¥odu˘_id
,

806 c⁄° *
¥odu˘_ªvisi⁄_Àvñ
,

807 c⁄° 
uöt32_t
 
block_cou¡
,

808 (*
ªad_block
)(
uöt32_t
 
lba
,

809 
uöt8_t
 *
c›y_to
),

810 (*
wrôe_block
)(
uöt32_t
 
lba
,

811 c⁄° 
uöt8_t
 *
c›y_‰om
))

813 
_mass_°‹age
.
usbd_dev
 = usbd_dev;

814 
_mass_°‹age
.
ï_ö
 =Ép_in;

815 
_mass_°‹age
.
ï_ö_size
 =Ép_in_size;

816 
_mass_°‹age
.
ï_out
 =Ép_out;

817 
_mass_°‹age
.
ï_out_size
 =Ép_out_size;

818 
_mass_°‹age
.
víd‹_id
 = vendor_id;

819 
_mass_°‹age
.
¥odu˘_id
 =Öroduct_id;

820 
_mass_°‹age
.
¥odu˘_ªvisi⁄_Àvñ
 =Öroduct_revision_level;

821 
_mass_°‹age
.
block_cou¡
 = block_count - 1;

822 
_mass_°‹age
.
ªad_block
 =Ñead_block;

823 
_mass_°‹age
.
wrôe_block
 = write_block;

824 
_mass_°‹age
.
lock
 = 
NULL
;

825 
_mass_°‹age
.
u∆ock
 = 
NULL
;

827 
_mass_°‹age
.
å™s
.
lba_°¨t
 = 0xffffffff;

828 
_mass_°‹age
.
å™s
.
block_cou¡
 = 0;

829 
_mass_°‹age
.
å™s
.
cuºít_block
 = 0;

830 
_mass_°‹age
.
å™s
.
cbw_˙t
 = 0;

831 
_mass_°‹age
.
å™s
.
byãs_to_ªad
 = 0;

832 
_mass_°‹age
.
å™s
.
byãs_to_wrôe
 = 0;

833 
_mass_°‹age
.
å™s
.
byã_cou¡
 = 0;

834 
_mass_°‹age
.
å™s
.
csw_vÆid
 = 
Ál£
;

835 
_mass_°‹age
.
å™s
.
csw_£¡
 = 0;

837 
	`£t_sbc_°©us_good
(&
_mass_°‹age
);

839 
	`usbd_ªgi°î_£t_c⁄fig_ˇŒback
(
usbd_dev
, 
msc_£t_c⁄fig
);

841  &
_mass_°‹age
;

842 
	}
}

	@libopencm3/lib/usb/usb_private.h

38 #i‚de‡
__USB_PRIVATE_H


39 
	#__USB_PRIVATE_H


	)

41 
	#MAX_USER_CONTROL_CALLBACK
 4

	)

42 
	#MAX_USER_SET_CONFIG_CALLBACK
 4

	)

44 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

47 
	s_usbd_devi˚
 {

48 c⁄° 
usb_devi˚_des¸ùt‹
 *
	mdesc
;

49 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
	mc⁄fig
;

50 c⁄° **
	m°rögs
;

51 
	mnum_°rögs
;

53 
uöt8_t
 *
	m˘æ_buf
;

54 
uöt16_t
 
	m˘æ_buf_Àn
;

56 
uöt8_t
 
	mcuºít_addªss
;

57 
uöt8_t
 
	mcuºít_c⁄fig
;

59 
uöt16_t
 
	mpm_t›
;

62 (*
	mu£r_ˇŒback_ª£t
)();

63 (*
	mu£r_ˇŒback_su•íd
)();

64 (*
	mu£r_ˇŒback_ªsume
)();

65 (*
	mu£r_ˇŒback_sof
)();

67 
	susb_c⁄åﬁ_°©e
 {

69 
	mIDLE
, 
	mSTALLED
,

70 
	mDATA_IN
, 
	mLAST_DATA_IN
, 
	mSTATUS_IN
,

71 
	mDATA_OUT
, 
	mLAST_DATA_OUT
, 
	mSTATUS_OUT
,

72 } 
	m°©e
;

73 
usb_£tup_d©a
 
ªq
 
__©åibuã__
((
Æig√d
(4)));

74 
uöt8_t
 *
	m˘æ_buf
;

75 
uöt16_t
 
	m˘æ_Àn
;

76 
usbd_c⁄åﬁ_com∂ëe_ˇŒback
 
	mcom∂ëe
;

77 
boﬁ
 
	m√eds_zÕ
;

78 } 
	mc⁄åﬁ_°©e
;

80 
	su£r_c⁄åﬁ_ˇŒback
 {

81 
usbd_c⁄åﬁ_ˇŒback
 
	mcb
;

82 
uöt8_t
 
	mty≥
;

83 
uöt8_t
 
	mty≥_mask
;

84 } 
	mu£r_c⁄åﬁ_ˇŒback
[
MAX_USER_CONTROL_CALLBACK
];

86 
usbd_ídpoöt_ˇŒback
 
	mu£r_ˇŒback_˘r
[8][3];

89 
usbd_£t_c⁄fig_ˇŒback
 
	mu£r_ˇŒback_£t_c⁄fig
[
MAX_USER_SET_CONFIG_CALLBACK
];

91 
usbd_£t_Æt£âög_ˇŒback
 
	mu£r_ˇŒback_£t_Æt£âög
;

93 c⁄° 
_usbd_drivî
 *
	mdrivî
;

97 
uöt16_t
 
	mfifo_mem_t›
;

98 
uöt16_t
 
	mfifo_mem_t›_ï0
;

99 
uöt8_t
 
	mf‹˚_«k
[4];

104 
uöt32_t
 
	md€±siz
[4];

110 
uöt16_t
 
	mrxb˙t
;

113 
	e_usbd_å™ß˘i⁄
 {

114 
	mUSB_TRANSACTION_IN
,

115 
	mUSB_TRANSACTION_OUT
,

116 
	mUSB_TRANSACTION_SETUP
,

122 
_usbd_c⁄åﬁ_ö
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
);

123 
_usbd_c⁄åﬁ_out
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
);

124 
_usbd_c⁄åﬁ_£tup
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ó
);

126 
usbd_ªque°_ªtu∫_codes
 
_usbd_°™d¨d_ªque°_devi˚
(
usbd_devi˚
 *
usbd_dev
,

127 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

128 
uöt16_t
 *
Àn
);

129 
usbd_ªque°_ªtu∫_codes
 
_usbd_°™d¨d_ªque°_öãrÁ˚
(
usbd_devi˚
 *
usbd_dev
,

130 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

131 
uöt16_t
 *
Àn
);

132 
usbd_ªque°_ªtu∫_codes
 
_usbd_°™d¨d_ªque°_ídpoöt
(
usbd_devi˚
 *
usbd_dev
,

133 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

134 
uöt16_t
 *
Àn
);

135 
usbd_ªque°_ªtu∫_codes
 
_usbd_°™d¨d_ªque°
(
usbd_devi˚
 *
usbd_dev
, 
usb_£tup_d©a
 *
ªq
,

136 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
);

138 
_usbd_ª£t
(
usbd_devi˚
 *
usbd_dev
);

141 
	s_usbd_drivî
 {

142 
	musbd_devi˚
 *(*
	möô
)();

143 (*
	m£t_addªss
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
);

144 (*
	mï_£tup
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
, uöt8_à
	mty≥
,

145 
uöt16_t
 
	mmax_size
, 
usbd_ídpoöt_ˇŒback
 
	mcb
);

146 (*
	mï_ª£t
)(
usbd_devi˚
 *
	musbd_dev
);

147 (*
	mï_°Æl_£t
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
,

148 
uöt8_t
 
	m°Æl
);

149 (*
	mï_«k_£t
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
, uöt8_à
	m«k
);

150 
uöt8_t
 (*
ï_°Æl_gë
)(
usbd_devi˚
 *
	musbd_dev
, uöt8_à
	maddr
);

151 
uöt16_t
 (*
ï_wrôe_∑ckë
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
,

152 c⁄° *
	mbuf
, 
uöt16_t
 
	mÀn
);

153 
uöt16_t
 (*
ï_ªad_∑ckë
)(
usbd_devi˚
 *
	musbd_dev
, 
uöt8_t
 
	maddr
,

154 *
	mbuf
, 
uöt16_t
 
	mÀn
);

155 (*
	mpﬁl
)(
usbd_devi˚
 *
	musbd_dev
);

156 (*
	mdisc⁄√˘
)(
usbd_devi˚
 *
	musbd_dev
, 
boﬁ
 
	mdisc⁄√˘ed
);

157 
uöt32_t
 
	mba£_addªss
;

158 
boﬁ
 
	m£t_addªss_bef‹e_°©us
;

159 
uöt16_t
 
	mrx_fifo_size
;

	@libopencm3/lib/usb/usb_standard.c

38 
	~<°rög.h
>

39 
	~<lib›ícm3/usb/usbd.h
>

40 
	~"usb_¥iv©e.h
"

42 
	$usbd_ªgi°î_£t_c⁄fig_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

43 
usbd_£t_c⁄fig_ˇŒback
 
ˇŒback
)

45 
i
;

47 
i
 = 0; i < 
MAX_USER_SET_CONFIG_CALLBACK
; i++) {

48 i‡(
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[
i
]) {

52 
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[
i
] = 
ˇŒback
;

57 
	}
}

59 
	$usbd_ªgi°î_£t_Æt£âög_ˇŒback
(
usbd_devi˚
 *
usbd_dev
,

60 
usbd_£t_Æt£âög_ˇŒback
 
ˇŒback
)

62 
usbd_dev
->
u£r_ˇŒback_£t_Æt£âög
 = 
ˇŒback
;

63 
	}
}

65 
uöt16_t
 
	$buûd_c⁄fig_des¸ùt‹
(
usbd_devi˚
 *
usbd_dev
,

66 
uöt8_t
 
ödex
, uöt8_à*
buf
, 
uöt16_t
 
Àn
)

68 
uöt8_t
 *
tmpbuf
 = 
buf
;

69 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
cfg
 = &
usbd_dev
->
c⁄fig
[
ödex
];

70 
uöt16_t
 
cou¡
, 
tŸÆ
 = 0, 
tŸÆÀn
 = 0;

71 
uöt16_t
 
i
, 
j
, 
k
;

73 
	`mem˝y
(
buf
, 
cfg
, 
cou¡
 = 
	`MIN
(
Àn
, cfg->
bLígth
));

74 
buf
 +
cou¡
;

75 
Àn
 -
cou¡
;

76 
tŸÆ
 +
cou¡
;

77 
tŸÆÀn
 +
cfg
->
bLígth
;

80 
i
 = 0; i < 
cfg
->
bNumI¡îÁ˚s
; i++) {

82 i‡(
cfg
->
öãrÁ˚
[
i
].
iÁ˚_assoc
) {

83 c⁄° 
usb_iÁ˚_assoc_des¸ùt‹
 *
assoc
 =

84 
cfg
->
öãrÁ˚
[
i
].
iÁ˚_assoc
;

85 
	`mem˝y
(
buf
, 
assoc
, 
cou¡
 = 
	`MIN
(
Àn
,ássoc->
bLígth
));

86 
buf
 +
cou¡
;

87 
Àn
 -
cou¡
;

88 
tŸÆ
 +
cou¡
;

89 
tŸÆÀn
 +
assoc
->
bLígth
;

92 
j
 = 0; j < 
cfg
->
öãrÁ˚
[
i
].
num_Æt£âög
; j++) {

93 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 *
iÁ˚
 =

94 &
cfg
->
öãrÁ˚
[
i
].
Æt£âög
[
j
];

96 
	`mem˝y
(
buf
, 
iÁ˚
, 
cou¡
 = 
	`MIN
(
Àn
, iÁ˚->
bLígth
));

97 
buf
 +
cou¡
;

98 
Àn
 -
cou¡
;

99 
tŸÆ
 +
cou¡
;

100 
tŸÆÀn
 +
iÁ˚
->
bLígth
;

102 i‡(
iÁ˚
->
exåa
) {

103 
	`mem˝y
(
buf
, 
iÁ˚
->
exåa
,

104 
cou¡
 = 
	`MIN
(
Àn
, 
iÁ˚
->
exåÆí
));

105 
buf
 +
cou¡
;

106 
Àn
 -
cou¡
;

107 
tŸÆ
 +
cou¡
;

108 
tŸÆÀn
 +
iÁ˚
->
exåÆí
;

111 
k
 = 0; k < 
iÁ˚
->
bNumEndpoöts
; k++) {

112 c⁄° 
usb_ídpoöt_des¸ùt‹
 *
ï
 =

113 &
iÁ˚
->
ídpoöt
[
k
];

114 
	`mem˝y
(
buf
, 
ï
, 
cou¡
 = 
	`MIN
(
Àn
,Ép->
bLígth
));

115 
buf
 +
cou¡
;

116 
Àn
 -
cou¡
;

117 
tŸÆ
 +
cou¡
;

118 
tŸÆÀn
 +
ï
->
bLígth
;

120 i‡(
ï
->
exåa
) {

121 
	`mem˝y
(
buf
, 
ï
->
exåa
,

122 
cou¡
 = 
	`MIN
(
Àn
, 
ï
->
exåÆí
));

123 
buf
 +
cou¡
;

124 
Àn
 -
cou¡
;

125 
tŸÆ
 +
cou¡
;

126 
tŸÆÀn
 +
ï
->
exåÆí
;

134 
	`mem˝y
((
tmpbuf
 + 2), &
tŸÆÀn
, (
uöt16_t
));

136  
tŸÆ
;

137 
	}
}

139 
	$usb_des¸ùt‹_ty≥
(
uöt16_t
 
wVÆue
)

141  
wVÆue
 >> 8;

142 
	}
}

144 
	$usb_des¸ùt‹_ödex
(
uöt16_t
 
wVÆue
)

146  
wVÆue
 & 0xFF;

147 
	}
}

149 
usbd_ªque°_ªtu∫_codes


150 
	$usb_°™d¨d_gë_des¸ùt‹
(
usbd_devi˚
 *
usbd_dev
,

151 
usb_£tup_d©a
 *
ªq
,

152 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

154 
i
, 
¨øy_idx
, 
des¸_idx
;

155 
usb_°rög_des¸ùt‹
 *
sd
;

157 
des¸_idx
 = 
	`usb_des¸ùt‹_ödex
(
ªq
->
wVÆue
);

159 
	`usb_des¸ùt‹_ty≥
(
ªq
->
wVÆue
)) {

160 
USB_DT_DEVICE
:

161 *
buf
 = (
uöt8_t
 *Ë
usbd_dev
->
desc
;

162 *
Àn
 = 
	`MIN
(*Àn, 
usbd_dev
->
desc
->
bLígth
);

163  
USBD_REQ_HANDLED
;

164 
USB_DT_CONFIGURATION
:

165 *
buf
 = 
usbd_dev
->
˘æ_buf
;

166 *
Àn
 = 
	`buûd_c⁄fig_des¸ùt‹
(
usbd_dev
, 
des¸_idx
, *
buf
, *len);

167  
USBD_REQ_HANDLED
;

168 
USB_DT_STRING
:

169 
sd
 = (
usb_°rög_des¸ùt‹
 *)
usbd_dev
->
˘æ_buf
;

171 i‡(
des¸_idx
 == 0) {

173 
sd
->
wD©a
[0] = 
USB_LANGID_ENGLISH_US
;

174 
sd
->
bLígth
 = (sd->bLength) +

175 (
sd
->
bDes¸ùt‹Ty≥
) +

176 (
sd
->
wD©a
[0]);

178 *
Àn
 = 
	`MIN
(*Àn, 
sd
->
bLígth
);

180 
¨øy_idx
 = 
des¸_idx
 - 1;

182 i‡(!
usbd_dev
->
°rögs
) {

184  
USBD_REQ_NOTSUPP
;

188 i‡(
¨øy_idx
 >
usbd_dev
->
num_°rögs
) {

189  
USBD_REQ_NOTSUPP
;

194 i‡(
ªq
->
wIndex
 !
USB_LANGID_ENGLISH_US
) {

195  
USBD_REQ_NOTSUPP
;

201 
sd
->
bLígth
 = 
	`°æí
(
usbd_dev
->
°rögs
[
¨øy_idx
]) * 2 +

202 (
sd
->
bLígth
) +

203 (
sd
->
bDes¸ùt‹Ty≥
);

205 *
Àn
 = 
	`MIN
(*Àn, 
sd
->
bLígth
);

207 
i
 = 0; i < (*
Àn
 / 2) - 1; i++) {

208 
sd
->
wD©a
[
i
] =

209 
usbd_dev
->
°rögs
[
¨øy_idx
][
i
];

213 
sd
->
bDes¸ùt‹Ty≥
 = 
USB_DT_STRING
;

214 *
buf
 = (
uöt8_t
 *)
sd
;

216  
USBD_REQ_HANDLED
;

218  
USBD_REQ_NOTSUPP
;

219 
	}
}

221 
usbd_ªque°_ªtu∫_codes


222 
	$usb_°™d¨d_£t_addªss
(
usbd_devi˚
 *
usbd_dev
,

223 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

224 
uöt16_t
 *
Àn
)

226 ()
ªq
;

227 ()
buf
;

228 ()
Àn
;

231 i‡((
ªq
->
bmReque°Ty≥
 !0Ë|| (ªq->
wVÆue
 >= 128)) {

232  
USBD_REQ_NOTSUPP
;

235 
usbd_dev
->
cuºít_addªss
 = 
ªq
->
wVÆue
;

241 i‡(
usbd_dev
->
drivî
->
£t_addªss_bef‹e_°©us
) {

242 
usbd_dev
->
drivî
->
	`£t_addªss
(usbd_dev, 
ªq
->
wVÆue
);

245  
USBD_REQ_HANDLED
;

246 
	}
}

248 
usbd_ªque°_ªtu∫_codes


249 
	$usb_°™d¨d_£t_c⁄figuøti⁄
(
usbd_devi˚
 *
usbd_dev
,

250 
usb_£tup_d©a
 *
ªq
,

251 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

253 
i
;

254 
found_ödex
 = -1;

255 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
cfg
;

257 ()
ªq
;

258 ()
buf
;

259 ()
Àn
;

261 i‡(
ªq
->
wVÆue
 > 0) {

262 
i
 = 0; i < 
usbd_dev
->
desc
->
bNumC⁄figuøti⁄s
; i++) {

263 i‡(
ªq
->
wVÆue


264 =
usbd_dev
->
c⁄fig
[
i
].
bC⁄figuøti⁄VÆue
) {

265 
found_ödex
 = 
i
;

269 i‡(
found_ödex
 < 0) {

270  
USBD_REQ_NOTSUPP
;

274 
usbd_dev
->
cuºít_c⁄fig
 = 
found_ödex
 + 1;

276 i‡(
usbd_dev
->
cuºít_c⁄fig
 > 0) {

277 
cfg
 = &
usbd_dev
->
c⁄fig
[usbd_dev->
cuºít_c⁄fig
 - 1];

280 
i
 = 0; i < 
cfg
->
bNumI¡îÁ˚s
; i++) {

281 i‡(
cfg
->
öãrÁ˚
[
i
].
cur_Æt£âög
) {

282 *
cfg
->
öãrÁ˚
[
i
].
cur_Æt£âög
 = 0;

288 
usbd_dev
->
drivî
->
	`ï_ª£t
(usbd_dev);

290 i‡(
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[0]) {

295 
i
 = 0; i < 
MAX_USER_CONTROL_CALLBACK
; i++) {

296 
usbd_dev
->
u£r_c⁄åﬁ_ˇŒback
[
i
].
cb
 = 
NULL
;

299 
i
 = 0; i < 
MAX_USER_SET_CONFIG_CALLBACK
; i++) {

300 i‡(
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[
i
]) {

301 
usbd_dev
->
u£r_ˇŒback_£t_c⁄fig
[
i
](usbd_dev,

302 
ªq
->
wVÆue
);

307  
USBD_REQ_HANDLED
;

308 
	}
}

310 
usbd_ªque°_ªtu∫_codes


311 
	$usb_°™d¨d_gë_c⁄figuøti⁄
(
usbd_devi˚
 *
usbd_dev
,

312 
usb_£tup_d©a
 *
ªq
,

313 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

315 ()
ªq
;

317 i‡(*
Àn
 > 1) {

318 *
Àn
 = 1;

320 i‡(
usbd_dev
->
cuºít_c⁄fig
 > 0) {

321 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
cfg
 =

322 &
usbd_dev
->
c⁄fig
[usbd_dev->
cuºít_c⁄fig
 - 1];

323 (*
buf
)[0] = 
cfg
->
bC⁄figuøti⁄VÆue
;

325 (*
buf
)[0] = 0;

328  
USBD_REQ_HANDLED
;

329 
	}
}

331 
usbd_ªque°_ªtu∫_codes


332 
	$usb_°™d¨d_£t_öãrÁ˚
(
usbd_devi˚
 *
usbd_dev
,

333 
usb_£tup_d©a
 *
ªq
,

334 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

336 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
cfx
 =

337 &
usbd_dev
->
c⁄fig
[usbd_dev->
cuºít_c⁄fig
 - 1];

338 c⁄° 
usb_öãrÁ˚
 *
iÁ˚
;

340 ()
buf
;

342 i‡(
ªq
->
wIndex
 >
cfx
->
bNumI¡îÁ˚s
) {

343  
USBD_REQ_NOTSUPP
;

346 
iÁ˚
 = &
cfx
->
öãrÁ˚
[
ªq
->
wIndex
];

348 i‡(
ªq
->
wVÆue
 >
iÁ˚
->
num_Æt£âög
) {

349  
USBD_REQ_NOTSUPP
;

352 i‡(
iÁ˚
->
cur_Æt£âög
) {

353 *
iÁ˚
->
cur_Æt£âög
 = 
ªq
->
wVÆue
;

354 } i‡(
ªq
->
wVÆue
 > 0) {

355  
USBD_REQ_NOTSUPP
;

358 i‡(
usbd_dev
->
u£r_ˇŒback_£t_Æt£âög
) {

359 
usbd_dev
->
	`u£r_ˇŒback_£t_Æt£âög
(usbd_dev,

360 
ªq
->
wIndex
,

361 
ªq
->
wVÆue
);

364 *
Àn
 = 0;

366  
USBD_REQ_HANDLED
;

367 
	}
}

369 
usbd_ªque°_ªtu∫_codes


370 
	$usb_°™d¨d_gë_öãrÁ˚
(
usbd_devi˚
 *
usbd_dev
,

371 
usb_£tup_d©a
 *
ªq
,

372 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

374 
uöt8_t
 *
cur_Æt£âög
;

375 c⁄° 
usb_c⁄fig_des¸ùt‹
 *
cfx
 =

376 &
usbd_dev
->
c⁄fig
[usbd_dev->
cuºít_c⁄fig
 - 1];

378 i‡(
ªq
->
wIndex
 >
cfx
->
bNumI¡îÁ˚s
) {

379  
USBD_REQ_NOTSUPP
;

382 *
Àn
 = 1;

383 
cur_Æt£âög
 = 
cfx
->
öãrÁ˚
[
ªq
->
wIndex
].cur_altsetting;

384 (*
buf
)[0] = (
cur_Æt£âög
) ? *cur_altsetting : 0;

386  
USBD_REQ_HANDLED
;

387 
	}
}

389 
usbd_ªque°_ªtu∫_codes


390 
	$usb_°™d¨d_devi˚_gë_°©us
(
usbd_devi˚
 *
usbd_dev
,

391 
usb_£tup_d©a
 *
ªq
,

392 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

394 ()
usbd_dev
;

395 ()
ªq
;

399 i‡(*
Àn
 > 2) {

400 *
Àn
 = 2;

402 (*
buf
)[0] = 0;

403 (*
buf
)[1] = 0;

405  
USBD_REQ_HANDLED
;

406 
	}
}

408 
usbd_ªque°_ªtu∫_codes


409 
	$usb_°™d¨d_öãrÁ˚_gë_°©us
(
usbd_devi˚
 *
usbd_dev
,

410 
usb_£tup_d©a
 *
ªq
,

411 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

413 ()
usbd_dev
;

414 ()
ªq
;

417 i‡(*
Àn
 > 2) {

418 *
Àn
 = 2;

420 (*
buf
)[0] = 0;

421 (*
buf
)[1] = 0;

423  
USBD_REQ_HANDLED
;

424 
	}
}

426 
usbd_ªque°_ªtu∫_codes


427 
	$usb_°™d¨d_ídpoöt_gë_°©us
(
usbd_devi˚
 *
usbd_dev
,

428 
usb_£tup_d©a
 *
ªq
,

429 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

431 ()
ªq
;

433 i‡(*
Àn
 > 2) {

434 *
Àn
 = 2;

436 (*
buf
)[0] = 
	`usbd_ï_°Æl_gë
(
usbd_dev
, 
ªq
->
wIndex
) ? 1 : 0;

437 (*
buf
)[1] = 0;

439  
USBD_REQ_HANDLED
;

440 
	}
}

442 
usbd_ªque°_ªtu∫_codes


443 
	$usb_°™d¨d_ídpoöt_°Æl
(
usbd_devi˚
 *
usbd_dev
,

444 
usb_£tup_d©a
 *
ªq
,

445 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

447 ()
buf
;

448 ()
Àn
;

450 
	`usbd_ï_°Æl_£t
(
usbd_dev
, 
ªq
->
wIndex
, 1);

452  
USBD_REQ_HANDLED
;

453 
	}
}

455 
usbd_ªque°_ªtu∫_codes


456 
	$usb_°™d¨d_ídpoöt_un°Æl
(
usbd_devi˚
 *
usbd_dev
,

457 
usb_£tup_d©a
 *
ªq
,

458 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

460 ()
buf
;

461 ()
Àn
;

463 
	`usbd_ï_°Æl_£t
(
usbd_dev
, 
ªq
->
wIndex
, 0);

465  
USBD_REQ_HANDLED
;

466 
	}
}

471 
usbd_ªque°_ªtu∫_codes


472 
	$_usbd_°™d¨d_ªque°_devi˚
(
usbd_devi˚
 *
usbd_dev
,

473 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

474 
uöt16_t
 *
Àn
)

476 
	`usbd_ªque°_ªtu∫_codes
 (*
comm™d
)(
usbd_devi˚
 *
usbd_dev
,

477 
usb_£tup_d©a
 *
ªq
,

478 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
Ë
NULL
;

480 
ªq
->
bReque°
) {

481 
USB_REQ_CLEAR_FEATURE
:

482 
USB_REQ_SET_FEATURE
:

483 i‡(
ªq
->
wVÆue
 =
USB_FEAT_DEVICE_REMOTE_WAKEUP
) {

487 i‡(
ªq
->
wVÆue
 =
USB_FEAT_TEST_MODE
) {

492 
USB_REQ_SET_ADDRESS
:

497 
comm™d
 = 
usb_°™d¨d_£t_addªss
;

499 
USB_REQ_SET_CONFIGURATION
:

500 
comm™d
 = 
usb_°™d¨d_£t_c⁄figuøti⁄
;

502 
USB_REQ_GET_CONFIGURATION
:

503 
comm™d
 = 
usb_°™d¨d_gë_c⁄figuøti⁄
;

505 
USB_REQ_GET_DESCRIPTOR
:

506 
comm™d
 = 
usb_°™d¨d_gë_des¸ùt‹
;

508 
USB_REQ_GET_STATUS
:

513 
comm™d
 = 
usb_°™d¨d_devi˚_gë_°©us
;

515 
USB_REQ_SET_DESCRIPTOR
:

520 i‡(!
comm™d
) {

521  
USBD_REQ_NOTSUPP
;

524  
	`comm™d
(
usbd_dev
, 
ªq
, 
buf
, 
Àn
);

525 
	}
}

527 
usbd_ªque°_ªtu∫_codes


528 
	$_usbd_°™d¨d_ªque°_öãrÁ˚
(
usbd_devi˚
 *
usbd_dev
,

529 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

530 
uöt16_t
 *
Àn
)

532 
	`usbd_ªque°_ªtu∫_codes
 (*
comm™d
)(
usbd_devi˚
 *
usbd_dev
,

533 
usb_£tup_d©a
 *
ªq
,

534 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
Ë
NULL
;

536 
ªq
->
bReque°
) {

537 
USB_REQ_CLEAR_FEATURE
:

538 
USB_REQ_SET_FEATURE
:

541 
USB_REQ_GET_INTERFACE
:

542 
comm™d
 = 
usb_°™d¨d_gë_öãrÁ˚
;

544 
USB_REQ_SET_INTERFACE
:

545 
comm™d
 = 
usb_°™d¨d_£t_öãrÁ˚
;

547 
USB_REQ_GET_STATUS
:

548 
comm™d
 = 
usb_°™d¨d_öãrÁ˚_gë_°©us
;

552 i‡(!
comm™d
) {

553  
USBD_REQ_NOTSUPP
;

556  
	`comm™d
(
usbd_dev
, 
ªq
, 
buf
, 
Àn
);

557 
	}
}

559 
usbd_ªque°_ªtu∫_codes


560 
	$_usbd_°™d¨d_ªque°_ídpoöt
(
usbd_devi˚
 *
usbd_dev
,

561 
usb_£tup_d©a
 *
ªq
, 
uöt8_t
 **
buf
,

562 
uöt16_t
 *
Àn
)

564 
	`usbd_ªque°_ªtu∫_codes
 (*
comm™d
Ë(
usbd_devi˚
 *
usbd_dev
,

565 
usb_£tup_d©a
 *
ªq
,

566 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
Ë
NULL
;

568 
ªq
->
bReque°
) {

569 
USB_REQ_CLEAR_FEATURE
:

570 i‡(
ªq
->
wVÆue
 =
USB_FEAT_ENDPOINT_HALT
) {

571 
comm™d
 = 
usb_°™d¨d_ídpoöt_un°Æl
;

574 
USB_REQ_SET_FEATURE
:

575 i‡(
ªq
->
wVÆue
 =
USB_FEAT_ENDPOINT_HALT
) {

576 
comm™d
 = 
usb_°™d¨d_ídpoöt_°Æl
;

579 
USB_REQ_GET_STATUS
:

580 
comm™d
 = 
usb_°™d¨d_ídpoöt_gë_°©us
;

582 
USB_REQ_SET_SYNCH_FRAME
:

591 i‡(!
comm™d
) {

592  
USBD_REQ_NOTSUPP
;

595  
	`comm™d
(
usbd_dev
, 
ªq
, 
buf
, 
Àn
);

596 
	}
}

598 
usbd_ªque°_ªtu∫_codes


599 
	$_usbd_°™d¨d_ªque°
(
usbd_devi˚
 *
usbd_dev
, 
usb_£tup_d©a
 *
ªq
,

600 
uöt8_t
 **
buf
, 
uöt16_t
 *
Àn
)

603 i‡((
ªq
->
bmReque°Ty≥
 & 
USB_REQ_TYPE_TYPE
Ë!
USB_REQ_TYPE_STANDARD
) {

604  
USBD_REQ_NOTSUPP
;

607 
ªq
->
bmReque°Ty≥
 & 
USB_REQ_TYPE_RECIPIENT
) {

608 
USB_REQ_TYPE_DEVICE
:

609  
	`_usbd_°™d¨d_ªque°_devi˚
(
usbd_dev
, 
ªq
, 
buf
, 
Àn
);

610 
USB_REQ_TYPE_INTERFACE
:

611  
	`_usbd_°™d¨d_ªque°_öãrÁ˚
(
usbd_dev
, 
ªq
,

612 
buf
, 
Àn
);

613 
USB_REQ_TYPE_ENDPOINT
:

614  
	`_usbd_°™d¨d_ªque°_ídpoöt
(
usbd_dev
, 
ªq
, 
buf
, 
Àn
);

616  
USBD_REQ_NOTSUPP
;

618 
	}
}

	@libopencm3/lib/vf6xx/ccm.c

38 
	~<lib›ícm3/vf6xx/mem‹ym≠.h
>

39 
	~<lib›ícm3/vf6xx/ccm.h
>

40 
	~<lib›ícm3/vf6xx/™adig.h
>

43 c⁄° 
uöt32_t
 
	g∂l1_maö_˛k
 = 528000000;

44 c⁄° 
uöt32_t
 
	g∂l2_maö_˛k
 = 528000000;

45 c⁄° 
uöt32_t
 
	g∂l3_maö_˛k
 = 480000000;

48 
uöt32_t
 
	gccm_c‹e_˛k
;

51 
uöt32_t
 
	gccm_∂©f‹m_bus_˛k
;

54 
uöt32_t
 
	gccm_ùg_bus_˛k
;

57 
uöt32_t
 
ccm_gë_∂l_pfd
(uöt32_à
pfd_£l
, uöt32_à
∂l_pfd
, uöt32_à
∂l_˛k
);

66 
	$ccm_˛ock_g©e_íabÀ
(
ccm_˛ock_g©e
 
gr
)

68 
uöt32_t
 
off£t
 = (uöt32_t)
gr
 / 16;

69 
uöt32_t
 
gr_mask
 = 0x3 << ((
gr
 % 16) * 2);

70 
	`CCM_CCGR
(
off£t
 * 4Ë|
gr_mask
;

71 
	}
}

80 
	$ccm_˛ock_g©e_dißbÀ
(
ccm_˛ock_g©e
 
gr
)

82 
uöt32_t
 
off£t
 = (uöt32_t)
gr
 / 16;

83 
uöt32_t
 
gr_mask
 = 0x3 << ((
gr
 % 16) * 2);

84 
	`CCM_CCGR
(
off£t
 * 4Ë&~
gr_mask
;

85 
	}
}

100 
uöt32_t
 
	$ccm_gë_∂l_pfd
(
uöt32_t
 
pfd_£l
, uöt32_à
∂l_pfd
, uöt32_à
∂l_˛k
)

102 
uöt64_t
 
∂l_pfd_˛k
;

103 
uöt32_t
 
∂l_pfd_‰ac
 = 
∂l_pfd
;

105 
pfd_£l
) {

106 
CCM_CCSR_PLL_PFD_CLK_SEL_MAIN
:

107  
∂l_˛k
;

108 
CCM_CCSR_PLL_PFD_CLK_SEL_PFD1
:

109 
∂l_pfd_‰ac
 &
ANADIG_PLL_PFD1_FRAC_MASK
;

110 
∂l_pfd_‰ac
 >>
ANADIG_PLL_PFD1_FRAC_SHIFT
;

112 
CCM_CCSR_PLL_PFD_CLK_SEL_PFD2
:

113 
∂l_pfd_‰ac
 &
ANADIG_PLL_PFD2_FRAC_MASK
;

114 
∂l_pfd_‰ac
 >>
ANADIG_PLL_PFD2_FRAC_SHIFT
;

116 
CCM_CCSR_PLL_PFD_CLK_SEL_PFD3
:

117 
∂l_pfd_‰ac
 &
ANADIG_PLL_PFD3_FRAC_MASK
;

118 
∂l_pfd_‰ac
 >>
ANADIG_PLL_PFD3_FRAC_SHIFT
;

120 
CCM_CCSR_PLL_PFD_CLK_SEL_PFD4
:

121 
∂l_pfd_‰ac
 &
ANADIG_PLL_PFD4_FRAC_MASK
;

122 
∂l_pfd_‰ac
 >>
ANADIG_PLL_PFD4_FRAC_SHIFT
;

127 
∂l_pfd_˛k
 = 
∂l_˛k
;

128 
∂l_pfd_˛k
 *= 18;

129 
∂l_pfd_˛k
 /
∂l_pfd_‰ac
;

131  (
uöt32_t
)
∂l_pfd_˛k
;

132 
	}
}

150 
	$ccm_ˇlcuœã_˛ocks
()

152 
uöt32_t
 
cc§
 = 
CCM_CCSR
;

153 
uöt32_t
 
ˇ¸r
 = 
CCM_CACRR
;

154 
uöt32_t
 
¨m_˛k_div
 = (
ˇ¸r
 & 
CCM_CACRR_ARM_CLK_DIV_MASK
) + 1;

155 
uöt32_t
 
bus_˛k_div
 = 
ˇ¸r
 & 
CCM_CACRR_BUS_CLK_DIV_MASK
;

156 
uöt32_t
 
ùg_˛k_div
 = 
ˇ¸r
 & 
CCM_CACRR_IPG_CLK_DIV_MASK
;

157 
uöt32_t
 
∂l_pfd_£l
;

159 
bus_˛k_div
 >>
CCM_CACRR_BUS_CLK_DIV_SHIFT
;

160 
bus_˛k_div
 += 1;

162 
ùg_˛k_div
 >>
CCM_CACRR_IPG_CLK_DIV_SHIFT
;

163 
ùg_˛k_div
 += 1;

166 
cc§
 & 
CCM_CCSR_SYS_CLK_SEL_MASK
) {

167 
CCM_CCSR_SYS_CLK_SEL_FAST
:

168 
ccm_c‹e_˛k
 = 24000000;

170 
CCM_CCSR_SYS_CLK_SEL_SLOW
:

171 
ccm_c‹e_˛k
 = 32000;

173 
CCM_CCSR_SYS_CLK_SEL_PLL2_PFD
:

174 
∂l_pfd_£l
 = 
cc§
 & 
CCM_CCSR_PLL2_PFD_CLK_SEL_MASK
;

175 
∂l_pfd_£l
 >>
CCM_CCSR_PLL2_PFD_CLK_SEL_SHIFT
;

177 
ccm_c‹e_˛k
 = 
	`ccm_gë_∂l_pfd
(
∂l_pfd_£l
, 
ANADIG_PLL2_PFD
,

178 
∂l2_maö_˛k
);

180 
CCM_CCSR_SYS_CLK_SEL_PLL2
:

181 
ccm_c‹e_˛k
 = 
∂l2_maö_˛k
;

183 
CCM_CCSR_SYS_CLK_SEL_PLL1_PFD
:

184 
∂l_pfd_£l
 = 
cc§
 & 
CCM_CCSR_PLL1_PFD_CLK_SEL_MASK
;

185 
∂l_pfd_£l
 >>
CCM_CCSR_PLL1_PFD_CLK_SEL_SHIFT
;

187 
ccm_c‹e_˛k
 = 
	`ccm_gë_∂l_pfd
(
∂l_pfd_£l
, 
ANADIG_PLL1_PFD
,

188 
∂l1_maö_˛k
);

190 
CCM_CCSR_SYS_CLK_SEL_PLL3
:

191 
ccm_c‹e_˛k
 = 
∂l3_maö_˛k
;

195 
ccm_c‹e_˛k
 /
¨m_˛k_div
;

196 
ccm_∂©f‹m_bus_˛k
 = 
ccm_c‹e_˛k
 / 
bus_˛k_div
;

197 
ccm_ùg_bus_˛k
 = 
ccm_∂©f‹m_bus_˛k
 / 
ùg_˛k_div
;

200 
	}
}

	@libopencm3/lib/vf6xx/gpio.c

40 
	~<lib›ícm3/vf6xx/gpio.h
>

41 
	~<lib›ícm3/vf6xx/ccm.h
>

51 
	$gpio_£t
(
uöt32_t
 
gpio
)

53 
uöt32_t
 
p‹t
 = 
	`GPIO
(
gpio
 / 32);

54 
	`GPIO_PSOR
(
p‹t
Ë
	`GPIO_OFFSET
(
gpio
);

55 
	}
}

65 
	$gpio_˛ór
(
uöt32_t
 
gpio
)

67 
uöt32_t
 
p‹t
 = 
	`GPIO
(
gpio
 / 32);

68 
	`GPIO_PCOR
(
p‹t
Ë
	`GPIO_OFFSET
(
gpio
);

69 
	}
}

81 
boﬁ
 
	$gpio_gë
(
uöt32_t
 
gpio
)

83 
uöt32_t
 
p‹t
 = 
	`GPIO
(
gpio
 / 32);

84  !!(
	`GPIO_PDIR
(
p‹t
Ë& 
	`GPIO_OFFSET
(
gpio
));

85 
	}
}

95 
	$gpio_toggÀ
(
uöt32_t
 
gpio
)

97 
uöt32_t
 
p‹t
 = 
	`GPIO
(
gpio
 / 32);

98 
	`GPIO_PTOR
(
p‹t
Ë
	`GPIO_OFFSET
(
gpio
);

99 
	}
}

110 
uöt32_t
 
	$gpio_p‹t_ªad
(
uöt32_t
 
gpi›‹t
)

112  
	`GPIO_PDIR
(
gpi›‹t
);

113 
	}
}

125 
	$gpio_p‹t_wrôe
(
uöt32_t
 
gpi›‹t
, uöt32_à
d©a
)

127 
	`GPIO_PDOR
(
gpi›‹t
Ë
d©a
;

128 
	}
}

	@libopencm3/lib/vf6xx/iomuxc.c

40 
	~<lib›ícm3/vf6xx/iomuxc.h
>

41 
	~<lib›ícm3/vf6xx/ccm.h
>

51 
	$iomuxc_mux
(
vf6xx_∑d
 
∑d
, 
uöt32_t
 
muxc
)

53 
	`IOMUXC
(
∑d
Ë
muxc
;

54 
	}
}

	@libopencm3/lib/vf6xx/uart.c

39 
	~<lib›ícm3/vf6xx/u¨t.h
>

40 
	~<lib›ícm3/vf6xx/ccm.h
>

53 
	$u¨t_£t_baudøã
(
uöt32_t
 
u¨t
, uöt32_à
baud
)

55 
uöt32_t
 
bd_˛k
 = 
ccm_ùg_bus_˛k
 / 
baud
;

56 
uöt32_t
 
sbr
;

59 
bd_˛k
 /= 8;

60 
sbr
 = 
bd_˛k
 / 2 + (bd_clk & 0x1);

62 
	`UART_BDL
(
u¨t
Ë
sbr
 & 
UART_BDL_SBR_MASK
;

63 
	`UART_BDH
(
u¨t
Ë(
sbr
 >> 8Ë& 
UART_BDH_SBR_MASK
;

64 
	}
}

76 
	$u¨t_£t_∑rôy
(
uöt32_t
 
u¨t
, 
uöt8_t
 
∑rôy
)

78 
uöt8_t
 
ªg8
;

80 
ªg8
 = 
	`UART_C1
(
u¨t
);

81 
ªg8
 = (ªg8 & ~
UART_PARITY_MASK
Ë| 
∑rôy
;

82 
	`UART_C1
(
u¨t
Ë
ªg8
;

83 
	}
}

95 
	$u¨t_£t_Êow_c⁄åﬁ
(
uöt32_t
 
u¨t
, 
uöt8_t
 
Êowc⁄åﬁ
)

97 
uöt8_t
 
ªg8
;

99 
ªg8
 = 
	`UART_MODEM
(
u¨t
);

100 
ªg8
 = (ªg8 & ~
UART_FLOWCONTROL_MASK
Ë| 
Êowc⁄åﬁ
;

101 
	`UART_MODEM
(
u¨t
Ë
ªg8
;

102 
	}
}

113 
	$u¨t_íabÀ
(
uöt32_t
 
u¨t
)

115 
	`UART_C2
(
u¨t
Ë|(
UART_C2_TE
 | 
UART_C2_RE
);

116 
	}
}

127 
	$u¨t_dißbÀ
(
uöt32_t
 
u¨t
)

129 
	`UART_C2
(
u¨t
Ë&~(
UART_C2_TE
 | 
UART_C2_RE
);

130 
	}
}

140 
	$u¨t_£nd
(
uöt32_t
 
u¨t
, 
uöt8_t
 
d©a
)

142 
	`UART_D
(
u¨t
Ë
d©a
;

143 
	}
}

155 
	$u¨t_waô_£nd_ªady
(
uöt32_t
 
u¨t
)

158 (
	`UART_S1
(
u¨t
Ë& 
UART_S1_TC
) == 0);

159 
	}
}

171 
	$u¨t_£nd_blockög
(
uöt32_t
 
u¨t
, 
uöt8_t
 
d©a
)

173 
	`u¨t_waô_£nd_ªady
(
u¨t
);

174 
	`u¨t_£nd
(
u¨t
, 
d©a
);

175 
	}
}

185 
uöt8_t
 
	$u¨t_ªcv
(
uöt32_t
 
u¨t
)

188  
	`UART_D
(
u¨t
);

189 
	}
}

200 
	$u¨t_waô_ªcv_ªady
(
uöt32_t
 
u¨t
)

203 (
	`UART_S1
(
u¨t
Ë& 
UART_S1_RDRF
) == 0);

204 
	}
}

217 
uöt8_t
 
	$u¨t_ªcv_blockög
(
uöt32_t
 
u¨t
)

219 
	`u¨t_waô_ªcv_ªady
(
u¨t
);

221  
	`u¨t_ªcv
(
u¨t
);

222 
	}
}

	@libopencm3/lib/vf6xx/vector_chipset.c

20 
	~<lib›ícm3/cm3/scb.h
>

22 
ölöe
 
	$¥e_maö
()

28 
	`__asm__
 ( \

33 
SCB_VTOR
 = (
uöt32_t
)&
ve˘‹_èbÀ
;

36 
SCB_CPACR
 |
SCB_CPACR_FULL
 * (
SCB_CPACR_CP10
 | 
SCB_CPACR_CP11
);

37 
	}
}

	@libopencm3/lib/vf6xx/vector_nvic.c

15 #¥agm®
wók
 
˝u2˝u_öt0_i§
 = 
blockög_h™dÀr


16 #¥agm®
wók
 
˝u2˝u_öt1_i§
 = 
blockög_h™dÀr


17 #¥agm®
wók
 
˝u2˝u_öt2_i§
 = 
blockög_h™dÀr


18 #¥agm®
wók
 
˝u2˝u_öt3_i§
 = 
blockög_h™dÀr


19 #¥agm®
wók
 
dúe˘ed0_£ma4_i§
 = 
blockög_h™dÀr


20 #¥agm®
wók
 
dúe˘ed1_mcm_i§
 = 
blockög_h™dÀr


21 #¥agm®
wók
 
dúe˘ed2_i§
 = 
blockög_h™dÀr


22 #¥agm®
wók
 
dúe˘ed3_i§
 = 
blockög_h™dÀr


23 #¥agm®
wók
 
dma0_i§
 = 
blockög_h™dÀr


24 #¥agm®
wók
 
dma0_îr‹_i§
 = 
blockög_h™dÀr


25 #¥agm®
wók
 
dma1_i§
 = 
blockög_h™dÀr


26 #¥agm®
wók
 
dma1_îr‹_i§
 = 
blockög_h™dÀr


27 #¥agm®
wók
 
ª£rved0_i§
 = 
blockög_h™dÀr


28 #¥agm®
wók
 
ª£rved1_i§
 = 
blockög_h™dÀr


29 #¥agm®
wók
 
mscm_ecc0_i§
 = 
blockög_h™dÀr


30 #¥agm®
wók
 
mscm_ecc1_i§
 = 
blockög_h™dÀr


31 #¥agm®
wók
 
csu_Æ¨m_i§
 = 
blockög_h™dÀr


32 #¥agm®
wók
 
ª£rved2_i§
 = 
blockög_h™dÀr


33 #¥agm®
wók
 
mscm_a˘zs_i§
 = 
blockög_h™dÀr


34 #¥agm®
wók
 
ª£rved3_i§
 = 
blockög_h™dÀr


35 #¥agm®
wók
 
wdog_a5_i§
 = 
blockög_h™dÀr


36 #¥agm®
wók
 
wdog_m4_i§
 = 
blockög_h™dÀr


37 #¥agm®
wók
 
wdog_¢vs_i§
 = 
blockög_h™dÀr


38 #¥agm®
wók
 
˝1_boŸ_Áû_i§
 = 
blockög_h™dÀr


39 #¥agm®
wók
 
q•i0_i§
 = 
blockög_h™dÀr


40 #¥agm®
wók
 
q•i1_i§
 = 
blockög_h™dÀr


41 #¥agm®
wók
 
ddrmc_i§
 = 
blockög_h™dÀr


42 #¥agm®
wók
 
sdhc0_i§
 = 
blockög_h™dÀr


43 #¥agm®
wók
 
sdhc1_i§
 = 
blockög_h™dÀr


44 #¥agm®
wók
 
ª£rved4_i§
 = 
blockög_h™dÀr


45 #¥agm®
wók
 
dcu0_i§
 = 
blockög_h™dÀr


46 #¥agm®
wók
 
dcu1_i§
 = 
blockög_h™dÀr


47 #¥agm®
wók
 
viu_i§
 = 
blockög_h™dÀr


48 #¥agm®
wók
 
ª£rved5_i§
 = 
blockög_h™dÀr


49 #¥agm®
wók
 
ª£rved6_i§
 = 
blockög_h™dÀr


50 #¥agm®
wók
 
æe_i§
 = 
blockög_h™dÀr


51 #¥agm®
wók
 
£g_lcd_i§
 = 
blockög_h™dÀr


52 #¥agm®
wók
 
ª£rved7_i§
 = 
blockög_h™dÀr


53 #¥agm®
wók
 
ª£rved8_i§
 = 
blockög_h™dÀr


54 #¥agm®
wók
 
pô_i§
 = 
blockög_h™dÀr


55 #¥agm®
wók
 
Õtimî0_i§
 = 
blockög_h™dÀr


56 #¥agm®
wók
 
ª£rved9_i§
 = 
blockög_h™dÀr


57 #¥agm®
wók
 
Êextimî0_i§
 = 
blockög_h™dÀr


58 #¥agm®
wók
 
Êextimî1_i§
 = 
blockög_h™dÀr


59 #¥agm®
wók
 
Êextimî2_i§
 = 
blockög_h™dÀr


60 #¥agm®
wók
 
Êextimî3_i§
 = 
blockög_h™dÀr


61 #¥agm®
wók
 
ª£rved10_i§
 = 
blockög_h™dÀr


62 #¥agm®
wók
 
ª£rved11_i§
 = 
blockög_h™dÀr


63 #¥agm®
wók
 
ª£rved12_i§
 = 
blockög_h™dÀr


64 #¥agm®
wók
 
ª£rved13_i§
 = 
blockög_h™dÀr


65 #¥agm®
wók
 
usbphy0_i§
 = 
blockög_h™dÀr


66 #¥agm®
wók
 
usbphy1_i§
 = 
blockög_h™dÀr


67 #¥agm®
wók
 
ª£rved14_i§
 = 
blockög_h™dÀr


68 #¥agm®
wók
 
adc0_i§
 = 
blockög_h™dÀr


69 #¥agm®
wók
 
adc1_i§
 = 
blockög_h™dÀr


70 #¥agm®
wók
 
dac0_i§
 = 
blockög_h™dÀr


71 #¥agm®
wók
 
dac1_i§
 = 
blockög_h™dÀr


72 #¥agm®
wók
 
ª£rved15_i§
 = 
blockög_h™dÀr


73 #¥agm®
wók
 
Êexˇn0_i§
 = 
blockög_h™dÀr


74 #¥agm®
wók
 
Êexˇn1_i§
 = 
blockög_h™dÀr


75 #¥agm®
wók
 
ª£rved16_i§
 = 
blockög_h™dÀr


76 #¥agm®
wók
 
u¨t0_i§
 = 
blockög_h™dÀr


77 #¥agm®
wók
 
u¨t1_i§
 = 
blockög_h™dÀr


78 #¥agm®
wók
 
u¨t2_i§
 = 
blockög_h™dÀr


79 #¥agm®
wók
 
u¨t3_i§
 = 
blockög_h™dÀr


80 #¥agm®
wók
 
u¨t4_i§
 = 
blockög_h™dÀr


81 #¥agm®
wók
 
u¨t5_i§
 = 
blockög_h™dÀr


82 #¥agm®
wók
 
•i0_i§
 = 
blockög_h™dÀr


83 #¥agm®
wók
 
•i1_i§
 = 
blockög_h™dÀr


84 #¥agm®
wók
 
•i2_i§
 = 
blockög_h™dÀr


85 #¥agm®
wók
 
•i3_i§
 = 
blockög_h™dÀr


86 #¥agm®
wók
 
i2c0_i§
 = 
blockög_h™dÀr


87 #¥agm®
wók
 
i2c1_i§
 = 
blockög_h™dÀr


88 #¥agm®
wók
 
i2c2_i§
 = 
blockög_h™dÀr


89 #¥agm®
wók
 
i2c3_i§
 = 
blockög_h™dÀr


90 #¥agm®
wók
 
usbc0_i§
 = 
blockög_h™dÀr


91 #¥agm®
wók
 
usbc1_i§
 = 
blockög_h™dÀr


92 #¥agm®
wók
 
ª£rved17_i§
 = 
blockög_h™dÀr


93 #¥agm®
wók
 
íë0_i§
 = 
blockög_h™dÀr


94 #¥agm®
wók
 
íë1_i§
 = 
blockög_h™dÀr


95 #¥agm®
wók
 
íë0_1588_i§
 = 
blockög_h™dÀr


96 #¥agm®
wók
 
íë1_1588_i§
 = 
blockög_h™dÀr


97 #¥agm®
wók
 
íë_swôch_i§
 = 
blockög_h™dÀr


98 #¥agm®
wók
 
nfc_i§
 = 
blockög_h™dÀr


99 #¥agm®
wók
 
ßi0_i§
 = 
blockög_h™dÀr


100 #¥agm®
wók
 
ßi1_i§
 = 
blockög_h™dÀr


101 #¥agm®
wók
 
ßi2_i§
 = 
blockög_h™dÀr


102 #¥agm®
wók
 
ßi3_i§
 = 
blockög_h™dÀr


103 #¥agm®
wók
 
eßi_bififo_i§
 = 
blockög_h™dÀr


104 #¥agm®
wók
 
•dif_i§
 = 
blockög_h™dÀr


105 #¥agm®
wók
 
a§c_i§
 = 
blockög_h™dÀr


106 #¥agm®
wók
 
vªg_i§
 = 
blockög_h™dÀr


107 #¥agm®
wók
 
wkpu0_i§
 = 
blockög_h™dÀr


108 #¥agm®
wók
 
ª£rved18_i§
 = 
blockög_h™dÀr


109 #¥agm®
wók
 
ccm_fxosc_i§
 = 
blockög_h™dÀr


110 #¥agm®
wók
 
ccm_i§
 = 
blockög_h™dÀr


111 #¥agm®
wók
 
§c_i§
 = 
blockög_h™dÀr


112 #¥agm®
wók
 
pdb_i§
 = 
blockög_h™dÀr


113 #¥agm®
wók
 
ewm_i§
 = 
blockög_h™dÀr


114 #¥agm®
wók
 
ª£rved19_i§
 = 
blockög_h™dÀr


115 #¥agm®
wók
 
ª£rved20_i§
 = 
blockög_h™dÀr


116 #¥agm®
wók
 
ª£rved21_i§
 = 
blockög_h™dÀr


117 #¥agm®
wók
 
ª£rved22_i§
 = 
blockög_h™dÀr


118 #¥agm®
wók
 
ª£rved23_i§
 = 
blockög_h™dÀr


119 #¥agm®
wók
 
ª£rved24_i§
 = 
blockög_h™dÀr


120 #¥agm®
wók
 
ª£rved25_i§
 = 
blockög_h™dÀr


121 #¥agm®
wók
 
ª£rved26_i§
 = 
blockög_h™dÀr


122 #¥agm®
wók
 
gpio0_i§
 = 
blockög_h™dÀr


123 #¥agm®
wók
 
gpio1_i§
 = 
blockög_h™dÀr


124 #¥agm®
wók
 
gpio2_i§
 = 
blockög_h™dÀr


125 #¥agm®
wók
 
gpio3_i§
 = 
blockög_h™dÀr


126 #¥agm®
wók
 
gpio4_i§
 = 
blockög_h™dÀr


135 
	#IRQ_HANDLERS
 \

136 [
NVIC_CPU2CPU_INT0_IRQ
] = 
˝u2˝u_öt0_i§
, \

137 [
NVIC_CPU2CPU_INT1_IRQ
] = 
˝u2˝u_öt1_i§
, \

138 [
NVIC_CPU2CPU_INT2_IRQ
] = 
˝u2˝u_öt2_i§
, \

139 [
NVIC_CPU2CPU_INT3_IRQ
] = 
˝u2˝u_öt3_i§
, \

140 [
NVIC_DIRECTED0_SEMA4_IRQ
] = 
dúe˘ed0_£ma4_i§
, \

141 [
NVIC_DIRECTED1_MCM_IRQ
] = 
dúe˘ed1_mcm_i§
, \

142 [
NVIC_DIRECTED2_IRQ
] = 
dúe˘ed2_i§
, \

143 [
NVIC_DIRECTED3_IRQ
] = 
dúe˘ed3_i§
, \

144 [
NVIC_DMA0_IRQ
] = 
dma0_i§
, \

145 [
NVIC_DMA0_ERROR_IRQ
] = 
dma0_îr‹_i§
, \

146 [
NVIC_DMA1_IRQ
] = 
dma1_i§
, \

147 [
NVIC_DMA1_ERROR_IRQ
] = 
dma1_îr‹_i§
, \

148 [
NVIC_RESERVED0_IRQ
] = 
ª£rved0_i§
, \

149 [
NVIC_RESERVED1_IRQ
] = 
ª£rved1_i§
, \

150 [
NVIC_MSCM_ECC0_IRQ
] = 
mscm_ecc0_i§
, \

151 [
NVIC_MSCM_ECC1_IRQ
] = 
mscm_ecc1_i§
, \

152 [
NVIC_CSU_ALARM_IRQ
] = 
csu_Æ¨m_i§
, \

153 [
NVIC_RESERVED2_IRQ
] = 
ª£rved2_i§
, \

154 [
NVIC_MSCM_ACTZS_IRQ
] = 
mscm_a˘zs_i§
, \

155 [
NVIC_RESERVED3_IRQ
] = 
ª£rved3_i§
, \

156 [
NVIC_WDOG_A5_IRQ
] = 
wdog_a5_i§
, \

157 [
NVIC_WDOG_M4_IRQ
] = 
wdog_m4_i§
, \

158 [
NVIC_WDOG_SNVS_IRQ
] = 
wdog_¢vs_i§
, \

159 [
NVIC_CP1_BOOT_FAIL_IRQ
] = 
˝1_boŸ_Áû_i§
, \

160 [
NVIC_QSPI0_IRQ
] = 
q•i0_i§
, \

161 [
NVIC_QSPI1_IRQ
] = 
q•i1_i§
, \

162 [
NVIC_DDRMC_IRQ
] = 
ddrmc_i§
, \

163 [
NVIC_SDHC0_IRQ
] = 
sdhc0_i§
, \

164 [
NVIC_SDHC1_IRQ
] = 
sdhc1_i§
, \

165 [
NVIC_RESERVED4_IRQ
] = 
ª£rved4_i§
, \

166 [
NVIC_DCU0_IRQ
] = 
dcu0_i§
, \

167 [
NVIC_DCU1_IRQ
] = 
dcu1_i§
, \

168 [
NVIC_VIU_IRQ
] = 
viu_i§
, \

169 [
NVIC_RESERVED5_IRQ
] = 
ª£rved5_i§
, \

170 [
NVIC_RESERVED6_IRQ
] = 
ª£rved6_i§
, \

171 [
NVIC_RLE_IRQ
] = 
æe_i§
, \

172 [
NVIC_SEG_LCD_IRQ
] = 
£g_lcd_i§
, \

173 [
NVIC_RESERVED7_IRQ
] = 
ª£rved7_i§
, \

174 [
NVIC_RESERVED8_IRQ
] = 
ª£rved8_i§
, \

175 [
NVIC_PIT_IRQ
] = 
pô_i§
, \

176 [
NVIC_LPTIMER0_IRQ
] = 
Õtimî0_i§
, \

177 [
NVIC_RESERVED9_IRQ
] = 
ª£rved9_i§
, \

178 [
NVIC_FLEXTIMER0_IRQ
] = 
Êextimî0_i§
, \

179 [
NVIC_FLEXTIMER1_IRQ
] = 
Êextimî1_i§
, \

180 [
NVIC_FLEXTIMER2_IRQ
] = 
Êextimî2_i§
, \

181 [
NVIC_FLEXTIMER3_IRQ
] = 
Êextimî3_i§
, \

182 [
NVIC_RESERVED10_IRQ
] = 
ª£rved10_i§
, \

183 [
NVIC_RESERVED11_IRQ
] = 
ª£rved11_i§
, \

184 [
NVIC_RESERVED12_IRQ
] = 
ª£rved12_i§
, \

185 [
NVIC_RESERVED13_IRQ
] = 
ª£rved13_i§
, \

186 [
NVIC_USBPHY0_IRQ
] = 
usbphy0_i§
, \

187 [
NVIC_USBPHY1_IRQ
] = 
usbphy1_i§
, \

188 [
NVIC_RESERVED14_IRQ
] = 
ª£rved14_i§
, \

189 [
NVIC_ADC0_IRQ
] = 
adc0_i§
, \

190 [
NVIC_ADC1_IRQ
] = 
adc1_i§
, \

191 [
NVIC_DAC0_IRQ
] = 
dac0_i§
, \

192 [
NVIC_DAC1_IRQ
] = 
dac1_i§
, \

193 [
NVIC_RESERVED15_IRQ
] = 
ª£rved15_i§
, \

194 [
NVIC_FLEXCAN0_IRQ
] = 
Êexˇn0_i§
, \

195 [
NVIC_FLEXCAN1_IRQ
] = 
Êexˇn1_i§
, \

196 [
NVIC_RESERVED16_IRQ
] = 
ª£rved16_i§
, \

197 [
NVIC_UART0_IRQ
] = 
u¨t0_i§
, \

198 [
NVIC_UART1_IRQ
] = 
u¨t1_i§
, \

199 [
NVIC_UART2_IRQ
] = 
u¨t2_i§
, \

200 [
NVIC_UART3_IRQ
] = 
u¨t3_i§
, \

201 [
NVIC_UART4_IRQ
] = 
u¨t4_i§
, \

202 [
NVIC_UART5_IRQ
] = 
u¨t5_i§
, \

203 [
NVIC_SPI0_IRQ
] = 
•i0_i§
, \

204 [
NVIC_SPI1_IRQ
] = 
•i1_i§
, \

205 [
NVIC_SPI2_IRQ
] = 
•i2_i§
, \

206 [
NVIC_SPI3_IRQ
] = 
•i3_i§
, \

207 [
NVIC_I2C0_IRQ
] = 
i2c0_i§
, \

208 [
NVIC_I2C1_IRQ
] = 
i2c1_i§
, \

209 [
NVIC_I2C2_IRQ
] = 
i2c2_i§
, \

210 [
NVIC_I2C3_IRQ
] = 
i2c3_i§
, \

211 [
NVIC_USBC0_IRQ
] = 
usbc0_i§
, \

212 [
NVIC_USBC1_IRQ
] = 
usbc1_i§
, \

213 [
NVIC_RESERVED17_IRQ
] = 
ª£rved17_i§
, \

214 [
NVIC_ENET0_IRQ
] = 
íë0_i§
, \

215 [
NVIC_ENET1_IRQ
] = 
íë1_i§
, \

216 [
NVIC_ENET0_1588_IRQ
] = 
íë0_1588_i§
, \

217 [
NVIC_ENET1_1588_IRQ
] = 
íë1_1588_i§
, \

218 [
NVIC_ENET_SWITCH_IRQ
] = 
íë_swôch_i§
, \

219 [
NVIC_NFC_IRQ
] = 
nfc_i§
, \

220 [
NVIC_SAI0_IRQ
] = 
ßi0_i§
, \

221 [
NVIC_SAI1_IRQ
] = 
ßi1_i§
, \

222 [
NVIC_SAI2_IRQ
] = 
ßi2_i§
, \

223 [
NVIC_SAI3_IRQ
] = 
ßi3_i§
, \

224 [
NVIC_ESAI_BIFIFO_IRQ
] = 
eßi_bififo_i§
, \

225 [
NVIC_SPDIF_IRQ
] = 
•dif_i§
, \

226 [
NVIC_ASRC_IRQ
] = 
a§c_i§
, \

227 [
NVIC_VREG_IRQ
] = 
vªg_i§
, \

228 [
NVIC_WKPU0_IRQ
] = 
wkpu0_i§
, \

229 [
NVIC_RESERVED18_IRQ
] = 
ª£rved18_i§
, \

230 [
NVIC_CCM_FXOSC_IRQ
] = 
ccm_fxosc_i§
, \

231 [
NVIC_CCM_IRQ
] = 
ccm_i§
, \

232 [
NVIC_SRC_IRQ
] = 
§c_i§
, \

233 [
NVIC_PDB_IRQ
] = 
pdb_i§
, \

234 [
NVIC_EWM_IRQ
] = 
ewm_i§
, \

235 [
NVIC_RESERVED19_IRQ
] = 
ª£rved19_i§
, \

236 [
NVIC_RESERVED20_IRQ
] = 
ª£rved20_i§
, \

237 [
NVIC_RESERVED21_IRQ
] = 
ª£rved21_i§
, \

238 [
NVIC_RESERVED22_IRQ
] = 
ª£rved22_i§
, \

239 [
NVIC_RESERVED23_IRQ
] = 
ª£rved23_i§
, \

240 [
NVIC_RESERVED24_IRQ
] = 
ª£rved24_i§
, \

241 [
NVIC_RESERVED25_IRQ
] = 
ª£rved25_i§
, \

242 [
NVIC_RESERVED26_IRQ
] = 
ª£rved26_i§
, \

243 [
NVIC_GPIO0_IRQ
] = 
gpio0_i§
, \

244 [
NVIC_GPIO1_IRQ
] = 
gpio1_i§
, \

245 [
NVIC_GPIO2_IRQ
] = 
gpio2_i§
, \

246 [
NVIC_GPIO3_IRQ
] = 
gpio3_i§
, \

247 [
NVIC_GPIO4_IRQ
] = 
gpio4_i§


	)

	@libopencm3/tests/gadget-zero/delay.c

25 
	~<°döt.h
>

26 
	~<lib›ícm3/°m32/rcc.h
>

27 
	~<lib›ícm3/°m32/timî.h
>

29 
	~"dñay.h
"

31 
	$dñay_£tup
()

34 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_TIM6
);

36 
	`timî_£t_¥esˇÀr
(
TIM6
, 
rcc_≠b1_‰equícy
 / 1e6 - 1);

37 
	`timî_£t_≥riod
(
TIM6
, 0xffff);

38 
	`timî_⁄e_shŸ_mode
(
TIM6
);

39 
	}
}

41 
	$dñay_us
(
uöt16_t
 
us
)

43 
	`TIM_ARR
(
TIM6
Ë
us
;

44 
	`TIM_EGR
(
TIM6
Ë
TIM_EGR_UG
;

45 
	`TIM_CR1
(
TIM6
Ë|
TIM_CR1_CEN
;

47 
	`TIM_CR1
(
TIM6
Ë& 
TIM_CR1_CEN
);

48 
	}
}

	@libopencm3/tests/gadget-zero/delay.h

20 #¥agm®
⁄˚


22 #ifde‡
__˝lu•lus


29 
dñay_£tup
();

35 
dñay_us
(
uöt16_t
 
us
);

37 #ifde‡
__˝lu•lus


	@libopencm3/tests/gadget-zero/delay_efm32.c

20 
	~<°döt.h
>

21 
	~<lib›ícm3/efm32/cmu.h
>

22 
	~<lib›ícm3/efm32/timî.h
>

24 
	~"dñay.h
"

26 c⁄° 
uöt32_t
 
ahb_‰equícy
;

28 
	$dñay_£tup
()

30 
	`cmu_≥rùh_˛ock_íabÀ
(
CMU_TIMER2
);

32 
	`timî_°¨t
(
TIMER2
);

33 
	}
}

35 
	$dñay_us
(
uöt16_t
 
us
)

37 vﬁ©ûê
uöt16_t
 
time_now
 = 0;

39 
uöt16_t
 
dñay_ahb_cy˛es
 = 
us
 * (
ahb_‰equícy
 / 1000000);

41 
TIMER2_CNT
 = 0;

42 
time_now
 < 
dñay_ahb_cy˛es
) {

43 
time_now
 = 
TIMER2_CNT
;

45 
	}
}

	@libopencm3/tests/gadget-zero/main-efm32hg309-generic.c

21 
	~<lib›ícm3/cm3/comm⁄.h
>

22 
	~<lib›ícm3/cm3/ve˘‹.h
>

23 
	~<lib›ícm3/cm3/scb.h
>

24 
	~<lib›ícm3/cm3/nvic.h
>

26 
	~<°dio.h
>

27 
	~"usb-gadgë0.h
"

30 #ifde‡
ER_DEBUG


31 
	#ER_DPRINTF
(
fmt
, ...) \

32 dÿ{ 
	`¥ötf
(
fmt
, ## 
__VA_ARGS__
); } 0)

	)

34 
	#ER_DPRINTF
(
fmt
, ...) \

35 dÿ{ } 0)

	)

38 c⁄° 
uöt32_t
 
	gahb_‰equícy
 = 14000000;

40 
	~"åa˚.h
"

41 
	$åa˚_£nd_blockög8
(
°imulus_p‹t
, 
c
)

43 ()
°imulus_p‹t
;

44 ()
c
;

45 
	}
}

47 
	$maö
()

49 
usbd_devi˚
 *
usbd_dev
 = 
	`gadgë0_öô
(&
efm32hg_usb_drivî
,

52 
	`ER_DPRINTF
("bootup complete\n");

55 
	`gadgë0_run
(
usbd_dev
);

57 
	}
}

	@libopencm3/tests/gadget-zero/main-stm32f072disco.c

20 
	~<lib›ícm3/cm3/nvic.h
>

21 
	~<lib›ícm3/°m32/¸s.h
>

22 
	~<lib›ícm3/°m32/gpio.h
>

23 
	~<lib›ícm3/°m32/rcc.h
>

25 
	~<°dio.h
>

26 
	~"usb-gadgë0.h
"

29 #ifde‡
ER_DEBUG


30 
	#ER_DPRINTF
(
fmt
, ...) \

31 dÿ{ 
	`¥ötf
(
fmt
, ## 
__VA_ARGS__
); } 0)

	)

33 
	#ER_DPRINTF
(
fmt
, ...) \

34 dÿ{ } 0)

	)

37 
	~"åa˚.h
"

38 
	$åa˚_£nd_blockög8
(
°imulus_p‹t
, 
c
)

40 ()
°imulus_p‹t
;

41 ()
c
;

42 
	}
}

45 
	$maö
()

47 
	`rcc_˛ock_£tup_ö_hsi48_out_48mhz
();

48 
	`¸s_autŸrim_usb_íabÀ
();

49 
	`rcc_£t_usb˛k_sour˚
(
RCC_HSI48
);

52 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOC
);

53 
	`gpio_mode_£tup
(
GPIOC
, 
GPIO_MODE_OUTPUT
, 
GPIO_PUPD_NONE
, 
GPIO7
);

54 
	`gpio_£t
(
GPIOC
, 
GPIO7
);

56 
usbd_devi˚
 *
usbd_dev
 = 
	`gadgë0_öô
(&
°_usbfs_v2_usb_drivî
,

59 
	`ER_DPRINTF
("bootup complete\n");

60 
	`gpio_˛ór
(
GPIOC
, 
GPIO7
);

62 
	`gadgë0_run
(
usbd_dev
);

65 
	}
}

	@libopencm3/tests/gadget-zero/main-stm32f103-generic.c

20 
	~<lib›ícm3/cm3/nvic.h
>

21 
	~<lib›ícm3/°m32/gpio.h
>

22 
	~<lib›ícm3/°m32/rcc.h
>

24 
	~<°dio.h
>

25 
	~"usb-gadgë0.h
"

27 
	#ER_DEBUG


	)

28 #ifde‡
ER_DEBUG


29 
	#ER_DPRINTF
(
fmt
, ...) \

30 dÿ{ 
	`¥ötf
(
fmt
, ## 
__VA_ARGS__
); } 0)

	)

32 
	#ER_DPRINTF
(
fmt
, ...) \

33 dÿ{ } 0)

	)

36 
	$maö
()

38 
	`rcc_˛ock_£tup_ö_h£_8mhz_out_72mhz
();

40 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOC
);

41 
	`gpio_£t_mode
(
GPIOC
, 
GPIO_MODE_OUTPUT_2_MHZ
,

42 
GPIO_CNF_OUTPUT_PUSHPULL
, 
GPIO13
);

43 
	`gpio_£t
(
GPIOC
, 
GPIO13
);

45 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOA
);

51 
	`gpio_£t_mode
(
GPIOA
, 
GPIO_MODE_OUTPUT_2_MHZ
,

52 
GPIO_CNF_OUTPUT_PUSHPULL
, 
GPIO12
);

53 
	`gpio_˛ór
(
GPIOA
, 
GPIO12
);

54 
i
 = 0; i < 800000; i++) {

55 
	`__asm__
("nop");

58 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_OTGFS
);

61 
usbd_devi˚
 *
usbd_dev
 = 
	`gadgë0_öô
(&
°_usbfs_v1_usb_drivî
,

64 
	`ER_DPRINTF
("bootup complete\n");

65 
	`gpio_˛ór
(
GPIOC
, 
GPIO13
);

67 
	`gadgë0_run
(
usbd_dev
);

70 
	}
}

	@libopencm3/tests/gadget-zero/main-stm32f3-disco.c

24 
	~<lib›ícm3/cm3/nvic.h
>

25 
	~<lib›ícm3/°m32/gpio.h
>

26 
	~<lib›ícm3/°m32/Êash.h
>

27 
	~<lib›ícm3/°m32/rcc.h
>

28 
	~<lib›ícm3/°m32/syscfg.h
>

30 
	~<°dio.h
>

31 
	~"usb-gadgë0.h
"

33 
	#ER_DEBUG


	)

34 #ifde‡
ER_DEBUG


35 
	#ER_DPRINTF
(
fmt
, ...) \

36 dÿ{ 
	`¥ötf
(
fmt
, ## 
__VA_ARGS__
); } 0)

	)

38 
	#ER_DPRINTF
(
fmt
, ...) \

39 dÿ{ } 0)

	)

42 c⁄° 
rcc_˛ock_sˇÀ
 
	gthis_˛ock_c⁄fig
 = {

44 .
∂l§c
 = 
RCC_CFGR_PLLSRC_HSE_PREDIV
,

45 .
	g∂lmul
 = 
RCC_CFGR_PLLMUL_MUL9
,

46 .
	g∂ldiv
 = 
RCC_CFGR2_PREDIV_NODIV
,

47 .
	gusbdiv1
 = 
Ál£
,

48 .
	gÊash_waô°©es
 = 2,

49 .
	gh¥e
 = 
RCC_CFGR_HPRE_DIV_NONE
,

50 .
	gµª1
 = 
RCC_CFGR_PPRE1_DIV_2
,

51 .
	gµª2
 = 
RCC_CFGR_PPRE2_DIV_NONE
,

52 .
	gahb_‰equícy
 = 72e6,

53 .
	g≠b1_‰equícy
 = 32e6,

54 .
	g≠b2_‰equícy
 = 72e6,

58 
	$maö
()

60 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOE
);

61 
	`gpio_mode_£tup
(
GPIOE
, 
GPIO_MODE_OUTPUT
, 
GPIO_PUPD_NONE
, 
GPIO11
|
GPIO12
);

62 
	`gpio_£t
(
GPIOE
, 
GPIO12
);

63 
	`rcc_˛ock_£tup_∂l
(&
this_˛ock_c⁄fig
);

65 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOA
);

71 
	`gpio_mode_£tup
(
GPIOA
, 
GPIO_MODE_OUTPUT
, 
GPIO_PUPD_NONE
, 
GPIO12
);

72 
	`gpio_˛ór
(
GPIOA
, 
GPIO12
);

73 
i
 = 0; i < 800000; i++) {

74 
	`__asm__
("nop");

77 
	`gpio_mode_£tup
(
GPIOA
, 
GPIO_MODE_AF
, 
GPIO_PUPD_NONE
, 
GPIO11
|
GPIO12
);

78 
	`gpio_£t_af
(
GPIOA
, 
GPIO_AF14
, 
GPIO11
|
GPIO12
);

80 
usbd_devi˚
 *
usbd_dev
 = 
	`gadgë0_öô
(&
°_usbfs_v1_usb_drivî
,

83 
	`ER_DPRINTF
("bootup complete\n");

84 
	`gpio_˛ór
(
GPIOE
, 
GPIO12
);

85 
i
 = 0;

87 
	`gpio_toggÀ
(
GPIOE
, 
GPIO12
);

88 
	`gadgë0_run
(
usbd_dev
);

89 
	`ER_DPRINTF
("lo› %d\n", 
i
++);

92 
	}
}

	@libopencm3/tests/gadget-zero/main-stm32f429i-disco.c

20 
	~<lib›ícm3/cm3/nvic.h
>

21 
	~<lib›ícm3/°m32/gpio.h
>

22 
	~<lib›ícm3/°m32/rcc.h
>

24 
	~<°dio.h
>

25 
	~"usb-gadgë0.h
"

27 
	#ER_DEBUG


	)

28 #ifde‡
ER_DEBUG


29 
	#ER_DPRINTF
(
fmt
, ...) \

30 dÿ{ 
	`¥ötf
(
fmt
, ## 
__VA_ARGS__
); } 0)

	)

32 
	#ER_DPRINTF
(
fmt
, ...) \

33 dÿ{ } 0)

	)

36 
	$maö
()

38 
	`rcc_˛ock_£tup_h£_3v3
(&
rcc_h£_8mhz_3v3
[
RCC_CLOCK_3V3_168MHZ
]);

39 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOB
);

40 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_OTGHS
);

42 
	`gpio_mode_£tup
(
GPIOB
, 
GPIO_MODE_AF
, 
GPIO_PUPD_NONE
,

43 
GPIO13
 | 
GPIO14
 | 
GPIO15
);

44 
	`gpio_£t_af
(
GPIOB
, 
GPIO_AF12
, 
GPIO13
 | 
GPIO14
 | 
GPIO15
);

47 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOD
);

48 
	`gpio_mode_£tup
(
GPIOD
, 
GPIO_MODE_OUTPUT
,

49 
GPIO_PUPD_NONE
, 
GPIO12
 | 
GPIO13
 | 
GPIO14
 | 
GPIO15
);

51 
usbd_devi˚
 *
usbd_dev
 = 
	`gadgë0_öô
(&
Ÿghs_usb_drivî
, "stm32f429i-disco");

53 
	`ER_DPRINTF
("bootup complete\n");

55 
	`gadgë0_run
(
usbd_dev
);

58 
	}
}

	@libopencm3/tests/gadget-zero/main-stm32f4disco.c

20 
	~<lib›ícm3/cm3/nvic.h
>

21 
	~<lib›ícm3/°m32/gpio.h
>

22 
	~<lib›ícm3/°m32/rcc.h
>

24 
	~<°dio.h
>

25 
	~"usb-gadgë0.h
"

27 
	#ER_DEBUG


	)

28 #ifde‡
ER_DEBUG


29 
	#ER_DPRINTF
(
fmt
, ...) \

30 dÿ{ 
	`¥ötf
(
fmt
, ## 
__VA_ARGS__
); } 0)

	)

32 
	#ER_DPRINTF
(
fmt
, ...) \

33 dÿ{ } 0)

	)

36 
	$maö
()

38 
	`rcc_˛ock_£tup_h£_3v3
(&
rcc_h£_8mhz_3v3
[
RCC_CLOCK_3V3_168MHZ
]);

39 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOA
);

40 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_OTGFS
);

42 
	`gpio_mode_£tup
(
GPIOA
, 
GPIO_MODE_AF
, 
GPIO_PUPD_NONE
,

43 
GPIO9
 | 
GPIO11
 | 
GPIO12
);

44 
	`gpio_£t_af
(
GPIOA
, 
GPIO_AF10
, 
GPIO9
 | 
GPIO11
 | 
GPIO12
);

47 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOD
);

48 
	`gpio_mode_£tup
(
GPIOD
, 
GPIO_MODE_OUTPUT
,

49 
GPIO_PUPD_NONE
, 
GPIO12
 | 
GPIO13
 | 
GPIO14
 | 
GPIO15
);

51 
usbd_devi˚
 *
usbd_dev
 = 
	`gadgë0_öô
(&
Ÿgfs_usb_drivî
, "stm32f4disco");

53 
	`ER_DPRINTF
("bootup complete\n");

55 
	`gadgë0_run
(
usbd_dev
);

58 
	}
}

	@libopencm3/tests/gadget-zero/main-stm32l053disco.c

20 
	~<lib›ícm3/cm3/nvic.h
>

21 
	~<lib›ícm3/°m32/¸s.h
>

22 
	~<lib›ícm3/°m32/gpio.h
>

23 
	~<lib›ícm3/°m32/rcc.h
>

24 
	~<lib›ícm3/°m32/syscfg.h
>

26 
	~<°dio.h
>

27 
	~"usb-gadgë0.h
"

30 #ifde‡
ER_DEBUG


31 
	#ER_DPRINTF
(
fmt
, ...) \

32 dÿ{ 
	`¥ötf
(
fmt
, ## 
__VA_ARGS__
); } 0)

	)

34 
	#ER_DPRINTF
(
fmt
, ...) \

35 dÿ{ } 0)

	)

38 
	~"åa˚.h
"

39 
	$åa˚_£nd_blockög8
(
°imulus_p‹t
, 
c
)

41 ()
°imulus_p‹t
;

42 ()
c
;

43 
	}
}

45 
	$maö
()

48 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOA
);

49 
	`gpio_mode_£tup
(
GPIOA
, 
GPIO_MODE_OUTPUT
, 
GPIO_PUPD_NONE
, 
GPIO5
);

50 
	`gpio_£t
(
GPIOA
, 
GPIO5
);

53 
rcc_˛ock_sˇÀ
 
my˛ock
 = {

54 .
ahb_‰equícy
 = 32e6,

55 .
≠b1_‰equícy
 = 32e6,

56 .
≠b2_‰equícy
 = 32e6,

57 .
Êash_waô°©es
 = 1,

58 .
∂l_sour˚
 = 
RCC_CFGR_PLLSRC_HSI16_CLK
,

60 .
∂l_mul
 = 
RCC_CFGR_PLLMUL_MUL4
,

61 .
∂l_div
 = 
RCC_CFGR_PLLDIV_DIV2
,

62 .
h¥e
 = 
RCC_CFGR_HPRE_NODIV
,

63 .
µª1
 = 
RCC_CFGR_PPRE1_NODIV
,

64 .
µª2
 = 
RCC_CFGR_PPRE2_NODIV
,

66 
	`rcc_˛ock_£tup_∂l
(&
my˛ock
);

69 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_SYSCFG
);

70 
SYSCFG_CFGR3
 |
SYSCFG_CFGR3_ENREF_HSI48
 | 
SYSCFG_CFGR3_EN_VREFINT
;

71 !(
SYSCFG_CFGR3
 & 
SYSCFG_CFGR3_REF_HSI48_RDYF
));

74 
	`¸s_autŸrim_usb_íabÀ
();

75 
	`rcc_£t_hsi48_sour˚_rc48
();

77 
	`rcc_osc_⁄
(
RCC_HSI48
);

78 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI48
);

80 
usbd_devi˚
 *
usbd_dev
 = 
	`gadgë0_öô
(&
°_usbfs_v2_usb_drivî
,

83 
	`ER_DPRINTF
("bootup complete\n");

84 
	`gpio_˛ór
(
GPIOA
, 
GPIO5
);

86 
	`gadgë0_run
(
usbd_dev
);

89 
	}
}

	@libopencm3/tests/gadget-zero/main-stm32l1-generic.c

24 
	~<lib›ícm3/cm3/nvic.h
>

25 
	~<lib›ícm3/°m32/gpio.h
>

26 
	~<lib›ícm3/°m32/Êash.h
>

27 
	~<lib›ícm3/°m32/rcc.h
>

28 
	~<lib›ícm3/°m32/syscfg.h
>

30 
	~<°dio.h
>

31 
	~"usb-gadgë0.h
"

33 
	#ER_DEBUG


	)

34 #ifde‡
ER_DEBUG


35 
	#ER_DPRINTF
(
fmt
, ...) \

36 dÿ{ 
	`¥ötf
(
fmt
, ## 
__VA_ARGS__
); } 0)

	)

38 
	#ER_DPRINTF
(
fmt
, ...) \

39 dÿ{ } 0)

	)

42 c⁄° 
rcc_˛ock_sˇÀ
 
	gthis_˛ock_c⁄fig
 = {

44 .
∂l_sour˚
 = 
RCC_CFGR_PLLSRC_HSE_CLK
,

45 .
	g∂l_mul
 = 
RCC_CFGR_PLLMUL_MUL6
,

46 .
	g∂l_div
 = 
RCC_CFGR_PLLDIV_DIV3
,

47 .
	gh¥e
 = 
RCC_CFGR_HPRE_SYSCLK_NODIV
,

48 .
	gµª1
 = 
RCC_CFGR_PPRE1_HCLK_NODIV
,

49 .
	gµª2
 = 
RCC_CFGR_PPRE2_HCLK_NODIV
,

50 .
	gvﬁège_sˇÀ
 = 
PWR_SCALE1
,

51 .
	gÊash_waô°©es
 = 1,

52 .
	gahb_‰equícy
 = 32000000,

53 .
	g≠b1_‰equícy
 = 32000000,

54 .
	g≠b2_‰equícy
 = 32000000,

58 
	$maö
()

60 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_GPIOB
);

61 
	`gpio_mode_£tup
(
GPIOB
, 
GPIO_MODE_OUTPUT
, 
GPIO_PUPD_NONE
, 
GPIO8
|
GPIO9
);

62 
	`gpio_£t
(
GPIOB
, 
GPIO8
);

63 
	`rcc_˛ock_£tup_∂l
(&
this_˛ock_c⁄fig
);

66 
	`rcc_≥rùh_˛ock_íabÀ
(
RCC_SYSCFG
);

67 
SYSCFG_PMC
 |
SYSCFG_PMC_USB_PU
;

69 
usbd_devi˚
 *
usbd_dev
 = 
	`gadgë0_öô
(&
°_usbfs_v1_usb_drivî
,

72 
	`ER_DPRINTF
("bootup complete\n");

73 
	`gpio_˛ór
(
GPIOB
, 
GPIO8
);

75 
	`gpio_£t
(
GPIOB
, 
GPIO9
);

76 
	`gadgë0_run
(
usbd_dev
);

77 
	`gpio_˛ór
(
GPIOB
, 
GPIO9
);

80 
	}
}

	@libopencm3/tests/gadget-zero/usb-gadget0.c

25 
	~<as£π.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<lib›ícm3/usb/usbd.h
>

30 
	~"åa˚.h
"

31 
	~"dñay.h
"

32 
	~"usb-gadgë0.h
"

34 
	#ER_DEBUG


	)

35 #ifde‡
ER_DEBUG


36 
	~<°dio.h
>

37 
	#ER_DPRINTF
(
fmt
, ...) \

38 dÿ{ 
	`¥ötf
(
fmt
, ## 
__VA_ARGS__
); } 0)

	)

40 
	#ER_DPRINTF
(
fmt
, ...) \

41 dÿ{ } 0)

	)

47 
	#GZ_REQ_SET_PATTERN
 1

	)

48 
	#GZ_REQ_PRODUCE
 2

	)

49 
	#GZ_REQ_SET_ALIGNED
 3

	)

50 
	#GZ_REQ_SET_UNALIGNED
 4

	)

51 
	#INTEL_COMPLIANCE_WRITE
 0x5b

	)

52 
	#INTEL_COMPLIANCE_READ
 0x5c

	)

55 
	#GZ_CFG_SOURCESINK
 2

	)

56 
	#GZ_CFG_LOOPBACK
 3

	)

58 
	#BULK_EP_MAXPACKET
 64

	)

60 c⁄° 
usb_devi˚_des¸ùt‹
 
	gdev
 = {

61 .
bLígth
 = 
USB_DT_DEVICE_SIZE
,

62 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_DEVICE
,

63 .
	gbcdUSB
 = 0x0200,

64 .
	gbDevi˚Cœss
 = 
USB_CLASS_VENDOR
,

65 .
	gbDevi˚SubCœss
 = 0,

66 .
	gbDevi˚PrŸocﬁ
 = 0,

67 .
	gbMaxPackëSize0
 = 
BULK_EP_MAXPACKET
,

73 .
	gidVíd‹
 = 0xcafe,

74 .
	gidProdu˘
 = 0xcafe,

75 .
	gbcdDevi˚
 = 0x0001,

76 .
	giM™uÁ˘uªr
 = 1,

77 .
	giProdu˘
 = 2,

78 .
	giSîülNumbî
 = 3,

79 .
	gbNumC⁄figuøti⁄s
 = 2,

82 c⁄° 
usb_ídpoöt_des¸ùt‹
 
	gídp_bulk
[] = {

84 .
bLígth
 = 
USB_DT_ENDPOINT_SIZE
,

85 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

86 .
	gbEndpoötAddªss
 = 0x01,

87 .
	gbmAâribuãs
 = 
USB_ENDPOINT_ATTR_BULK
,

88 .
	gwMaxPackëSize
 = 
BULK_EP_MAXPACKET
,

89 .
	gbI¡îvÆ
 = 1,

92 .
	gbLígth
 = 
USB_DT_ENDPOINT_SIZE
,

93 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

94 .
	gbEndpoötAddªss
 = 0x82,

95 .
	gbmAâribuãs
 = 
USB_ENDPOINT_ATTR_BULK
,

96 .
	gwMaxPackëSize
 = 
BULK_EP_MAXPACKET
,

97 .
	gbI¡îvÆ
 = 1,

101 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	giÁ˚_sour˚sök
[] = {

103 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

104 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

105 .
	gbI¡îÁ˚Numbî
 = 0,

106 .
	gbA…î«ãSëtög
 = 0,

107 .
	gbNumEndpoöts
 = 2,

108 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_VENDOR
,

109 .
	giI¡îÁ˚
 = 0,

110 .
	gídpoöt
 = 
ídp_bulk
,

114 c⁄° 
usb_öãrÁ˚_des¸ùt‹
 
	giÁ˚_lo›back
[] = {

116 .
bLígth
 = 
USB_DT_INTERFACE_SIZE
,

117 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

118 .
	gbI¡îÁ˚Numbî
 = 0,

119 .
	gbA…î«ãSëtög
 = 0,

120 .
	gbNumEndpoöts
 = 2,

121 .
	gbI¡îÁ˚Cœss
 = 
USB_CLASS_VENDOR
,

122 .
	giI¡îÁ˚
 = 0,

123 .
	gídpoöt
 = 
ídp_bulk
,

127 c⁄° 
usb_öãrÁ˚
 
	giÁ˚s_sour˚sök
[] = {

129 .
num_Æt£âög
 = 1,

130 .
	gÆt£âög
 = 
iÁ˚_sour˚sök
,

134 c⁄° 
usb_öãrÁ˚
 
	giÁ˚s_lo›back
[] = {

136 .
num_Æt£âög
 = 1,

137 .
	gÆt£âög
 = 
iÁ˚_lo›back
,

141 c⁄° 
usb_c⁄fig_des¸ùt‹
 
	gc⁄fig
[] = {

143 .
bLígth
 = 
USB_DT_CONFIGURATION_SIZE
,

144 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_CONFIGURATION
,

145 .
	gwTŸÆLígth
 = 0,

146 .
	gbNumI¡îÁ˚s
 = 1,

147 .
	gbC⁄figuøti⁄VÆue
 = 
GZ_CFG_SOURCESINK
,

148 .
	giC⁄figuøti⁄
 = 4,

149 .
	gbmAâribuãs
 = 0x80,

150 .
	gbMaxPowî
 = 0x32,

151 .
	göãrÁ˚
 = 
iÁ˚s_sour˚sök
,

154 .
	gbLígth
 = 
USB_DT_CONFIGURATION_SIZE
,

155 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_CONFIGURATION
,

156 .
	gwTŸÆLígth
 = 0,

157 .
	gbNumI¡îÁ˚s
 = 1,

158 .
	gbC⁄figuøti⁄VÆue
 = 
GZ_CFG_LOOPBACK
,

159 .
	giC⁄figuøti⁄
 = 5,

160 .
	gbmAâribuãs
 = 0x80,

161 .
	gbMaxPowî
 = 0x32,

162 .
	göãrÁ˚
 = 
iÁ˚s_lo›back
,

166 
	g£rül
[] = "0123456789.0123456789.0123456789";

167 c⁄° *
	gusb_°rögs
[] = {

170 
£rül
,

176 
uöt8_t
 
	gusbd_c⁄åﬁ_buf„r
[5*
BULK_EP_MAXPACKET
];

177 
usbd_devi˚
 *
	gour_dev
;

181 
uöt8_t
 
	m∑âîn
;

182 
	m∑âîn_cou¡î
;

183 
	mã°_u«lig√d
;

184 } 
	g°©e
 = {

185 .
∑âîn
 = 0,

186 .
	g∑âîn_cou¡î
 = 0,

187 .
	gã°_u«lig√d
 = 0,

190 
	$gadgë0_ss_out_cb
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
)

192 (Ë
ï
;

193 
uöt16_t
 
x
;

196 
uöt8_t
 
buf
[
BULK_EP_MAXPACKET
 + 1] 
	`__©åibuã__
 ((
	`Æig√d
(2)));

197 
uöt8_t
 *
de°
;

199 
	`åa˚_£nd_blockög8
(0, 'O');

200 i‡(
°©e
.
ã°_u«lig√d
) {

201 
de°
 = 
buf
 + 1;

203 
de°
 = 
buf
;

205 
x
 = 
	`usbd_ï_ªad_∑ckë
(
usbd_dev
, 
ï
, 
de°
, 
BULK_EP_MAXPACKET
);

206 
	`åa˚_£nd_blockög8
(1, 
x
);

207 
	}
}

209 
	$gadgë0_ss_ö_cb
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
)

211 (Ë
usbd_dev
;

212 
uöt8_t
 
buf
[
BULK_EP_MAXPACKET
 + 1] 
	`__©åibuã__
 ((
	`Æig√d
(2)));

213 
uöt8_t
 *
§c
;

215 
	`åa˚_£nd_blockög8
(0, 'I');

216 i‡(
°©e
.
ã°_u«lig√d
) {

217 
§c
 = 
buf
 + 1;

219 
§c
 = 
buf
;

222 
°©e
.
∑âîn
) {

224 
	`mem£t
(
§c
, 0, 
BULK_EP_MAXPACKET
);

227 
i
 = 0; i < 
BULK_EP_MAXPACKET
; i++) {

228 
§c
[
i
] = 
°©e
.
∑âîn_cou¡î
++ % 63;

233 
uöt16_t
 
x
 = 
	`usbd_ï_wrôe_∑ckë
(
usbd_dev
, 
ï
, 
§c
, 
BULK_EP_MAXPACKET
);

235 
	`åa˚_£nd_blockög8
(2, 
x
);

236 i‡(
x
 !
BULK_EP_MAXPACKET
) {

237 
	`ER_DPRINTF
("ÁûedÅÿwrôe?: %d\n", 
x
);

240 
	}
}

242 
	$gadgë0_rx_cb_lo›back
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
)

244 (Ë
usbd_dev
;

245 
	`ER_DPRINTF
("lo›Ñx %x\n", 
ï
);

247 
	}
}

249 
	$gadgë0_tx_cb_lo›back
(
usbd_devi˚
 *
usbd_dev
, 
uöt8_t
 
ï
)

251 (Ë
usbd_dev
;

252 
	`ER_DPRINTF
("lo›Åx %x\n", 
ï
);

254 
	}
}

256 
usbd_ªque°_ªtu∫_codes
 
	$gadgë0_c⁄åﬁ_ªque°
(
usbd_devi˚
 *
usbd_dev
,

257 
usb_£tup_d©a
 *
ªq
,

258 
uöt8_t
 **
buf
,

259 
uöt16_t
 *
Àn
,

260 
usbd_c⁄åﬁ_com∂ëe_ˇŒback
 *
com∂ëe
)

262 (Ë
usbd_dev
;

263 (Ë
com∂ëe
;

264 (Ë
buf
;

265 (Ë
Àn
;

266 
	`ER_DPRINTF
("ctrl breq: %x, bmRT: %x, windex :%x, wlen: %x, wval :%x\n",

267 
ªq
->
bReque°
,Ñeq->
bmReque°Ty≥
,Ñeq->
wIndex
,Ñeq->
wLígth
,

268 
ªq
->
wVÆue
);

271 
ªq
->
bReque°
) {

272 
GZ_REQ_SET_PATTERN
:

273 
°©e
.
∑âîn_cou¡î
 = 0;

274 
°©e
.
∑âîn
 = 
ªq
->
wVÆue
;

275  
USBD_REQ_HANDLED
;

276 
INTEL_COMPLIANCE_WRITE
:

277 
INTEL_COMPLIANCE_READ
:

278 
	`ER_DPRINTF
("unimplemented!");

279  
USBD_REQ_NOTSUPP
;

280 
GZ_REQ_SET_UNALIGNED
:

281 
°©e
.
ã°_u«lig√d
 = 1;

282  
USBD_REQ_HANDLED
;

283 
GZ_REQ_SET_ALIGNED
:

284 
°©e
.
ã°_u«lig√d
 = 0;

285  
USBD_REQ_HANDLED
;

286 
GZ_REQ_PRODUCE
:

287 
	`ER_DPRINTF
("Ákêlo›back o‡%d\n", 
ªq
->
wVÆue
);

288 i‡(
ªq
->
wVÆue
 > (
usbd_c⁄åﬁ_buf„r
)) {

289 
	`ER_DPRINTF
("Can't write moreÅhan out control buffer! %d > %d\n",

290 
ªq
->
wVÆue
, (
usbd_c⁄åﬁ_buf„r
));

291  
USBD_REQ_NOTSUPP
;

294 i‡(
ªq
->
wVÆue
 >Ñeq->
wLígth
) {

295 
	`ER_DPRINTF
("TruncatingÑeplyÅo match wLen\n");

296 *
Àn
 = 
ªq
->
wLígth
;

298 *
Àn
 = 
ªq
->
wVÆue
;

300  
USBD_REQ_HANDLED
;

302  
USBD_REQ_NEXT_CALLBACK
;

303 
	}
}

305 
	$gadgë0_£t_c⁄fig
(
usbd_devi˚
 *
usbd_dev
, 
uöt16_t
 
wVÆue
)

307 
	`ER_DPRINTF
("£àcfg %d\n", 
wVÆue
);

308 
wVÆue
) {

309 
GZ_CFG_SOURCESINK
:

310 
°©e
.
ã°_u«lig√d
 = 0;

311 
	`usbd_ï_£tup
(
usbd_dev
, 0x01, 
USB_ENDPOINT_ATTR_BULK
, 
BULK_EP_MAXPACKET
,

312 
gadgë0_ss_out_cb
);

313 
	`usbd_ï_£tup
(
usbd_dev
, 0x82, 
USB_ENDPOINT_ATTR_BULK
, 
BULK_EP_MAXPACKET
,

314 
gadgë0_ss_ö_cb
);

315 
	`usbd_ªgi°î_c⁄åﬁ_ˇŒback
(

316 
usbd_dev
,

317 
USB_REQ_TYPE_VENDOR
 | 
USB_REQ_TYPE_INTERFACE
,

318 
USB_REQ_TYPE_TYPE
 | 
USB_REQ_TYPE_RECIPIENT
,

319 
gadgë0_c⁄åﬁ_ªque°
);

321 
	`gadgë0_ss_ö_cb
(
usbd_dev
, 0x82);

323 
GZ_CFG_LOOPBACK
:

324 
	`usbd_ï_£tup
(
usbd_dev
, 0x01, 
USB_ENDPOINT_ATTR_BULK
, 
BULK_EP_MAXPACKET
,

325 
gadgë0_rx_cb_lo›back
);

326 
	`usbd_ï_£tup
(
usbd_dev
, 0x82, 
USB_ENDPOINT_ATTR_BULK
, 
BULK_EP_MAXPACKET
,

327 
gadgë0_tx_cb_lo›back
);

330 
	`ER_DPRINTF
("£àc⁄figuøti⁄ unknown: %d\n", 
wVÆue
);

332 
	}
}

334 
usbd_devi˚
 *
	$gadgë0_öô
(c⁄° 
usbd_drivî
 *
drivî
, c⁄° *
u£r£rül
)

336 #ifde‡
ER_DEBUG


337 
	`£tbuf
(
°dout
, 
NULL
);

339 i‡(
u£r£rül
) {

340 
usb_°rögs
[2] = 
u£r£rül
;

342 
our_dev
 = 
	`usbd_öô
(
drivî
, &
dev
, 
c⁄fig
,

343 
usb_°rögs
, 5,

344 
usbd_c⁄åﬁ_buf„r
, (usbd_control_buffer));

346 
	`usbd_ªgi°î_£t_c⁄fig_ˇŒback
(
our_dev
, 
gadgë0_£t_c⁄fig
);

347 
	`dñay_£tup
();

349  
our_dev
;

350 
	}
}

352 
	$gadgë0_run
(
usbd_devi˚
 *
usbd_dev
)

354 
	`usbd_pﬁl
(
usbd_dev
);

356 
	`dñay_us
(100);

357 
	}
}

	@libopencm3/tests/gadget-zero/usb-gadget0.h

20 #i‚de‡
USB_GADGET0_H


21 
	#USB_GADGET0_H


	)

23 
	~<lib›ícm3/usb/usbd.h
>

33 
usbd_devi˚
 *
gadgë0_öô
(c⁄° 
usbd_drivî
 *
drivî
, c⁄° *
u£r£rül
);

40 
gadgë0_run
(
usbd_devi˚
 *
usbd_dev
);

	@libopencm3/tests/shared/trace.c

1 
	~<°döt.h
>

2 
	~<lib›ícm3/cm3/comm⁄.h
>

3 
	~<lib›ícm3/cm3/mem‹ym≠.h
>

4 
	~<lib›ícm3/cm3/ôm.h
>

5 
	~"åa˚.h
"

7 
	$åa˚_£nd_blockög8
(
°imulus_p‹t
, 
c
)

9 i‡(!(
ITM_TER
[0] & (1<<
°imulus_p‹t
))) {

12 !(
	`ITM_STIM8
(
°imulus_p‹t
Ë& 
ITM_STIM_FIFOREADY
));

13 
	`ITM_STIM8
(
°imulus_p‹t
Ë
c
;

14 
	}
}

16 
	$åa˚_£nd8
(
°imulus_p‹t
, 
vÆ
)

18 i‡(!(
ITM_TER
[0] & (1<<
°imulus_p‹t
))) {

21 
	`ITM_STIM8
(
°imulus_p‹t
Ë
vÆ
;

22 
	}
}

24 
	$åa˚_£nd_blockög16
(
°imulus_p‹t
, 
uöt16_t
 
vÆ
)

26 i‡(!(
ITM_TER
[0] & (1<<
°imulus_p‹t
))) {

29 !(
	`ITM_STIM16
(
°imulus_p‹t
Ë& 
ITM_STIM_FIFOREADY
));

30 
	`ITM_STIM16
(
°imulus_p‹t
Ë
vÆ
;

31 
	}
}

33 
	$åa˚_£nd16
(
°imulus_p‹t
, 
uöt16_t
 
vÆ
)

35 i‡(!(
ITM_TER
[0] & (1<<
°imulus_p‹t
))) {

38 
	`ITM_STIM16
(
°imulus_p‹t
Ë
vÆ
;

39 
	}
}

42 
	$åa˚_£nd_blockög32
(
°imulus_p‹t
, 
uöt32_t
 
vÆ
)

44 i‡(!(
ITM_TER
[0] & (1<<
°imulus_p‹t
))) {

47 !(
	`ITM_STIM32
(
°imulus_p‹t
Ë& 
ITM_STIM_FIFOREADY
));

48 
	`ITM_STIM32
(
°imulus_p‹t
Ë
vÆ
;

49 
	}
}

51 
	$åa˚_£nd32
(
°imulus_p‹t
, 
uöt32_t
 
vÆ
)

53 i‡(!(
ITM_TER
[0] & (1<<
°imulus_p‹t
))) {

56 
	`ITM_STIM32
(
°imulus_p‹t
Ë
vÆ
;

57 
	}
}

	@libopencm3/tests/shared/trace.h

8 #i‚de‡
TRACE_H


9 
	#TRACE_H


	)

11 
	~<°döt.h
>

13 #ifdef 
__˝lu•lus


17 
åa˚_£nd_blockög8
(
°imulus_p‹t
, 
c
);

18 
åa˚_£nd8
(
°imulus_p‹t
, 
c
);

20 
åa˚_£nd_blockög16
(
°imulus_p‹t
, 
uöt16_t
 
vÆ
);

21 
åa˚_£nd16
(
°imulus_p‹t
, 
uöt16_t
 
vÆ
);

23 
åa˚_£nd_blockög32
(
°imulus_p‹t
, 
uöt32_t
 
vÆ
);

24 
åa˚_£nd32
(
°imulus_p‹t
, 
uöt32_t
 
vÆ
);

27 #ifdef 
__˝lu•lus


	@libopencm3/tests/shared/trace_stdio.c

6 
	~<î∫o.h
>

7 
	~<°dio.h
>

8 
	~<uni°d.h
>

10 
	~"åa˚.h
"

12 #i‚de‡
STIMULUS_STDIO


13 
	#STIMULUS_STDIO
 0

	)

16 
_wrôe
(
fûe
, *
±r
, 
Àn
);

17 
	$_wrôe
(
fûe
, *
±r
, 
Àn
)

19 
i
;

21 i‡(
fûe
 =
STDOUT_FILENO
 || fûê=
STDERR_FILENO
) {

22 
i
 = 0; i < 
Àn
; i++) {

23 i‡(
±r
[
i
] == '\n') {

24 
	`åa˚_£nd_blockög8
(
STIMULUS_STDIO
, '\r');

26 
	`åa˚_£nd_blockög8
(
STIMULUS_STDIO
, 
±r
[
i
]);

28  
i
;

30 
î∫o
 = 
EIO
;

32 
	}
}

	@main_f1.c

40 
	~"hw_c⁄fig.h
"

42 
	~<°dlib.h
>

44 
	~<lib›ícm3/°m32/rcc.h
>

45 
	~<lib›ícm3/°m32/f1/bkp.h
>

46 
	~<lib›ícm3/°m32/gpio.h
>

47 
	~<lib›ícm3/°m32/Êash.h
>

48 
	~<lib›ícm3/°m32/ußπ.h
>

49 
	~<lib›ícm3/°m32/pwr.h
>

51 
	~<lib›ícm3/cm3/sy°ick.h
>

53 
	~"bl.h
"

56 
	#UDID_START
 0x1FFFF7E8

	)

58 #ifde‡
INTERFACE_USART


59 
	#BOARD_INTERFACE_CONFIG
 (*)
BOARD_USART


	)

61 
	#BOARD_INTERFACE_CONFIG
 
NULL


	)

64 
	#BOARD_FLASH_SIZE
 (
BOARD_PAGES
 * 
FLASH_PAGE_SIZE
)

	)

65 
	#APP_SIZE_MAX
 (
BOARD_FLASH_SIZE
 - 
BOOTLOADER_RESERVATION_SIZE
)

	)

66 
	#BOOTLOADER_RESERVATION_SIZE
 (
BOOTLOADER_PAGE
 * 
FLASH_PAGE_SIZE
)

	)

68 #i‡
INTERFACE_USART


69 
	#BOARD_INTERFACE_CONFIG_USART
 (*)
BOARD_USART


	)

71 #i‡
INTERFACE_USB


72 
	#BOARD_INTERFACE_CONFIG_USB
 
NULL


	)

76 
bﬂrdöfo
 
	gbﬂrd_öfo
 =

78 .
id
 = 
DEVICE_ID
,

79 .
	gªv
 = 
DEVICE_REV
,

80 .
	g¢
 = 
DEVICE_SN
,

81 .
	gfw_size
 = 
APP_SIZE_MAX
,

82 .
	gÊash_°rc
 = 
DEVICE_FLASH_STRC
,

83 .
	gdevi˚_des
 = 
DEVICE_DES
,

84 .
	gsy°ick_mhz
 = 
OSC_FREQ


92 
	$bﬂrd_öô
()

95 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
BOARD_CLOCK_LED_ACTIVITY_REGISTER
, 
BOARD_CLOCK_LED_ACTIVITY
);

96 
	`gpio_£t_mode
(
BOARD_PORT_LED_ACTIVITY
, 
GPIO_MODE_OUTPUT_50_MHZ
, 
GPIO_CNF_OUTPUT_PUSHPULL
, 
BOARD_PIN_LED_ACTIVITY
);

97 
	`BOARD_LED_ON
(
BOARD_PORT_LED_ACTIVITY
, 
BOARD_PIN_LED_ACTIVITY
);

99 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
BOARD_CLOCK_LED_BOOTLOADER_REGISTER
, 
BOARD_CLOCK_LED_BOOTLOADER
);

100 
	`gpio_£t_mode
(
BOARD_PORT_LED_BOOTLOADER
, 
GPIO_MODE_OUTPUT_50_MHZ
, 
GPIO_CNF_OUTPUT_PUSHPULL
, 
BOARD_PIN_LED_BOOTLOADER
);

101 
	`BOARD_LED_ON
(
BOARD_PORT_LED_BOOTLOADER
, 
BOARD_PIN_LED_BOOTLOADER
);

104 #ifde‡
BOARD_FORCE_BL_PIN


105 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
BOARD_FORCE_BL_CLOCK_REGISTER
, 
BOARD_FORCE_BL_CLOCK_BIT
);

106 
	`gpio_£t_mode
(
BOARD_FORCE_BL_PORT
, 
GPIO_MODE_INPUT
, 
BOARD_FORCE_BL_PULL
, 
BOARD_FORCE_BL_PIN
);

108 #if(
BOARD_FORCE_BL_PULL
 == 1)

109 
	`gpio_£t
(
BOARD_FORCE_BL_PORT
, 
BOARD_FORCE_BL_PIN
);

111 
	`gpio_˛ór
(
BOARD_FORCE_BL_PORT
, 
BOARD_FORCE_BL_PIN
);

117 #ifde‡
INTERFACE_USART


118 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
BOARD_USART_PIN_CLOCK_REGISTER
, 
BOARD_USART_PIN_CLOCK_BIT
);

119 
	`gpio_£t_mode
(
BOARD_PORT_USART
, 
GPIO_MODE_OUTPUT_50_MHZ
, 
GPIO_CNF_OUTPUT_ALTFN_PUSHPULL
, 
BOARD_PIN_TX
);

120 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
BOARD_USART_CLOCK_REGISTER
, 
BOARD_USART_CLOCK_BIT
);

122 
	}
}

129 
	$bﬂrd_deöô
()

131 
	`gpio_£t_mode
(
BOARD_PORT_LED_ACTIVITY
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_FLOAT
, 
BOARD_PIN_LED_ACTIVITY
);

132 
	`gpio_£t_mode
(
BOARD_PORT_LED_BOOTLOADER
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_FLOAT
, 
BOARD_PIN_LED_BOOTLOADER
);

134 #ifde‡
BOARD_FORCE_BL_PIN


135 
	`gpio_£t_mode
(
BOARD_FORCE_BL_PORT
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_FLOAT
, 
BOARD_FORCE_BL_PIN
);

136 
	`gpio_˛ór
(
BOARD_FORCE_BL_PORT
, 
BOARD_FORCE_BL_PIN
);

139 #ifde‡
INTERFACE_USART


140 
	`gpio_£t_mode
(
BOARD_PORT_USART
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_FLOAT
, 
BOARD_PIN_TX
);

141 
	`rcc_≥rùhîÆ_dißbÀ_˛ock
(&
BOARD_USART_CLOCK_REGISTER
, 
BOARD_USART_CLOCK_BIT
);

145 
RCC_APB2ENR
 = 0x00000000;

146 
	}
}

153 
ölöe
 
	$˛ock_öô
()

155 
	`rcc_˛ock_£tup_ö_hsi_out_48mhz
();

156 
	}
}

163 
boﬁ
 
	$bﬂrd_ã°_f‹˚_pö
()

165 #i‡
	`deföed
(
BOARD_FORCE_BL_PIN
)

166 vﬁ©ûê
ßm∂es
 = 0;

167 vﬁ©ûê
vŸe
 = 0;

170 
ßm∂es
 = 0; samples < 200; samples++)

172 i‡(
	`gpio_gë
(
BOARD_FORCE_BL_PORT
, 
BOARD_FORCE_BL_PIN
Ë=
BOARD_FORCE_BL_STATE
)

174 
vŸe
++;

179 i‡((
vŸe
 * 100Ë> (
ßm∂es
 * 90))

181  
åue
;

185  
Ál£
;

186 
	}
}

188 #i‡
INTERFACE_USART


194 
boﬁ
 
	$bﬂrd_ã°_ußπ_ª˚ivög_bªak
()

197 
	`sy°ick_öãºu±_dißbÀ
();

198 
	`sy°ick_cou¡î_dißbÀ
();

199 
	`sy°ick_£t_˛ocksour˚
(
STK_CSR_CLKSOURCE_AHB
);

207 
	`sy°ick_£t_ªlﬂd
(729);

208 
	`sy°ick_cou¡î_íabÀ
();

210 
uöt8_t
 
˙t_c⁄£cutive_low
 = 0;

211 
uöt8_t
 
˙t
 = 0;

219 
˙t
 < 60)

222 i‡(
	`sy°ick_gë_cou¡Êag
() == 1)

224 i‡(
	`gpio_gë
(
BOARD_PORT_USART
, 
BOARD_PIN_RX
) == 0)

226 
˙t_c⁄£cutive_low
++;

231 
˙t_c⁄£cutive_low
 = 0;

234 
˙t
++;

238 i‡(
˙t_c⁄£cutive_low
 >= 18)

244 
	`sy°ick_cou¡î_dißbÀ
();

246 i‡(
˙t_c⁄£cutive_low
 >= 18)

248  
åue
;

251  
Ál£
;

252 
	}
}

260 
	$˛ock_deöô
()

263 
	`rcc_osc_⁄
(
RCC_HSI
);

264 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

267 
RCC_CFGR
 = 0x000000;

270 
	`rcc_osc_off
(
RCC_HSE
);

271 
	`rcc_osc_off
(
RCC_PLL
);

272 
	`rcc_css_dißbÀ
();

275 
	`rcc_osc_by∑ss_dißbÀ
(
RCC_HSE
);

278 
RCC_CIR
 = 0x000000;

279 
	}
}

286 
uöt32_t
 
	$Êash_func_£˘‹_size
(
£˘‹
)

288 i‡(
£˘‹
 < (
BOARD_PAGES
 - 
BOOTLOADER_PAGE
))

290  
FLASH_PAGE_SIZE
;

293 
	}
}

300 
	$Êash_func_îa£_£˘‹
(
£˘‹
)

302 i‡(
£˘‹
 < 
BOARD_PAGES
)

304 
	`Êash_îa£_∑ge
(
APP_LOAD_ADDRESS
 + (
£˘‹
 * 
FLASH_PAGE_SIZE
));

306 
	}
}

314 
	$Êash_func_wrôe_w‹d
(
uöt32_t
 
addªss
, uöt32_à
w‹d
)

316 
	`Êash_¥ogøm_w‹d
(
addªss
 + 
APP_LOAD_ADDRESS
, 
w‹d
);

317 
	}
}

324 
uöt32_t
 
	$Êash_func_ªad_w‹d
(
uöt32_t
 
addªss
)

326  *(
uöt32_t
 *)(
addªss
 + 
APP_LOAD_ADDRESS
);

327 
	}
}

334 
uöt32_t
 
	$Êash_func_ªad_udid
(
uöt32_t
 
addªss
)

338  *(
uöt32_t
 *)(
addªss
 + 
UDID_START
);

339 
	}
}

346 
	$Àd_⁄
(
Àd
)

348 
Àd
)

350 
LED_ACTIVITY
:

351 
	`BOARD_LED_ON
(
BOARD_PORT_LED_ACTIVITY
, 
BOARD_PIN_LED_ACTIVITY
);

354 
LED_BOOTLOADER
:

355 
	`BOARD_LED_ON
(
BOARD_PORT_LED_BOOTLOADER
, 
BOARD_PIN_LED_BOOTLOADER
);

358 
	}
}

365 
	$Àd_off
(
Àd
)

367 
Àd
)

369 
LED_ACTIVITY
:

370 
	`BOARD_LED_OFF
(
BOARD_PORT_LED_ACTIVITY
, 
BOARD_PIN_LED_ACTIVITY
);

373 
LED_BOOTLOADER
:

374 
	`BOARD_LED_OFF
(
BOARD_PORT_LED_BOOTLOADER
, 
BOARD_PIN_LED_BOOTLOADER
);

377 
	}
}

384 
	$Àd_toggÀ
(
Àd
)

386 
Àd
)

388 
LED_ACTIVITY
:

389 
	`gpio_toggÀ
(
BOARD_PORT_LED_ACTIVITY
, 
BOARD_PIN_LED_ACTIVITY
);

392 
LED_BOOTLOADER
:

393 
	`gpio_toggÀ
(
BOARD_PORT_LED_BOOTLOADER
, 
BOARD_PIN_LED_BOOTLOADER
);

396 
	}
}

403 
	$maö
()

406 
uöt8_t
 
åy_boŸ
 = 1;

409 
timeout
 = 
BOOTLOADER_DELAY
;

412 
	`bﬂrd_öô
();

415 
	`˛ock_öô
();

418 i‡(
	`bﬂrd_ã°_f‹˚_pö
())

420 
åy_boŸ
 = 
Ál£
;

423 #i‡
INTERFACE_USART


427 i‡(
	`bﬂrd_ã°_ußπ_ª˚ivög_bªak
())

429 
åy_boŸ
 = 
Ál£
;

434 i‡(
åy_boŸ
)

437 
	`jump_to_≠p
();

439 
timeout
 = 0;

443 #i‡
INTERFACE_USART


444 
	`cöô
(
BOARD_INTERFACE_CONFIG_USART
, 
USART
);

446 #i‡
INTERFACE_USB


447 
	`cöô
(
BOARD_INTERFACE_CONFIG_USB
, 
USB
);

453 
	`boŸlﬂdî
(
timeout
);

456 i‡(
	`bﬂrd_ã°_f‹˚_pö
())

461 #i‡
INTERFACE_USART


463 i‡(
	`bﬂrd_ã°_ußπ_ª˚ivög_bªak
())

471 
	`jump_to_≠p
();

474 
timeout
 = 0;

476 
	}
}

	@main_f4.c

40 
	~"hw_c⁄fig.h
"

42 
	~<°dlib.h
>

44 
	~<lib›ícm3/°m32/rcc.h
>

45 
	~<lib›ícm3/°m32/f1/bkp.h
>

46 
	~<lib›ícm3/°m32/gpio.h
>

47 
	~<lib›ícm3/°m32/Êash.h
>

48 
	~<lib›ícm3/°m32/ußπ.h
>

49 
	~<lib›ícm3/°m32/pwr.h
>

51 
	~<lib›ícm3/cm3/sy°ick.h
>

53 
	~"bl.h
"

56 
	#UDID_START
 0x1FFFF7E8

	)

58 #ifde‡
INTERFACE_USART


59 
	#BOARD_INTERFACE_CONFIG
 (*)
BOARD_USART


	)

61 
	#BOARD_INTERFACE_CONFIG
 
NULL


	)

64 
	#BOARD_FLASH_SIZE
 (
BOARD_PAGES
 * 
FLASH_PAGE_SIZE
)

	)

65 
	#APP_SIZE_MAX
 (
BOARD_FLASH_SIZE
 - 
BOOTLOADER_RESERVATION_SIZE
)

	)

66 
	#BOOTLOADER_RESERVATION_SIZE
 (
BOOTLOADER_PAGE
 * 
FLASH_PAGE_SIZE
)

	)

68 #i‡
INTERFACE_USART


69 
	#BOARD_INTERFACE_CONFIG_USART
 (*)
BOARD_USART


	)

71 #i‡
INTERFACE_USB


72 
	#BOARD_INTERFACE_CONFIG_USB
 
NULL


	)

76 
bﬂrdöfo
 
	gbﬂrd_öfo
 =

78 .
id
 = 
DEVICE_ID
,

79 .
	gªv
 = 
DEVICE_REV
,

80 .
	g¢
 = 
DEVICE_SN
,

81 .
	gfw_size
 = 
APP_SIZE_MAX
,

82 .
	gÊash_°rc
 = 
DEVICE_FLASH_STRC
,

83 .
	gdevi˚_des
 = 
DEVICE_DES
,

84 .
	gsy°ick_mhz
 = 
OSC_FREQ


92 
	$bﬂrd_öô
()

95 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
BOARD_CLOCK_LED_ACTIVITY_REGISTER
, 
BOARD_CLOCK_LED_ACTIVITY
);

96 
	`gpio_£t_mode
(
BOARD_PORT_LED_ACTIVITY
, 
GPIO_MODE_OUTPUT_50_MHZ
, 
GPIO_CNF_OUTPUT_PUSHPULL
, 
BOARD_PIN_LED_ACTIVITY
);

97 
	`BOARD_LED_ON
(
BOARD_PORT_LED_ACTIVITY
, 
BOARD_PIN_LED_ACTIVITY
);

99 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
BOARD_CLOCK_LED_BOOTLOADER_REGISTER
, 
BOARD_CLOCK_LED_BOOTLOADER
);

100 
	`gpio_£t_mode
(
BOARD_PORT_LED_BOOTLOADER
, 
GPIO_MODE_OUTPUT_50_MHZ
, 
GPIO_CNF_OUTPUT_PUSHPULL
, 
BOARD_PIN_LED_BOOTLOADER
);

101 
	`BOARD_LED_ON
(
BOARD_PORT_LED_BOOTLOADER
, 
BOARD_PIN_LED_BOOTLOADER
);

104 #ifde‡
BOARD_FORCE_BL_PIN


105 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
BOARD_FORCE_BL_CLOCK_REGISTER
, 
BOARD_FORCE_BL_CLOCK_BIT
);

106 
	`gpio_£t_mode
(
BOARD_FORCE_BL_PORT
, 
GPIO_MODE_INPUT
, 
BOARD_FORCE_BL_PULL
, 
BOARD_FORCE_BL_PIN
);

108 #if(
BOARD_FORCE_BL_PULL
 == 1)

109 
	`gpio_£t
(
BOARD_FORCE_BL_PORT
, 
BOARD_FORCE_BL_PIN
);

111 
	`gpio_˛ór
(
BOARD_FORCE_BL_PORT
, 
BOARD_FORCE_BL_PIN
);

117 #ifde‡
INTERFACE_USART


118 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
BOARD_USART_PIN_CLOCK_REGISTER
, 
BOARD_USART_PIN_CLOCK_BIT
);

119 
	`gpio_£t_mode
(
BOARD_PORT_USART
, 
GPIO_MODE_OUTPUT_50_MHZ
, 
GPIO_CNF_OUTPUT_ALTFN_PUSHPULL
, 
BOARD_PIN_TX
);

120 
	`rcc_≥rùhîÆ_íabÀ_˛ock
(&
BOARD_USART_CLOCK_REGISTER
, 
BOARD_USART_CLOCK_BIT
);

122 
	}
}

129 
	$bﬂrd_deöô
()

131 
	`gpio_£t_mode
(
BOARD_PORT_LED_ACTIVITY
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_FLOAT
, 
BOARD_PIN_LED_ACTIVITY
);

132 
	`gpio_£t_mode
(
BOARD_PORT_LED_BOOTLOADER
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_FLOAT
, 
BOARD_PIN_LED_BOOTLOADER
);

134 #ifde‡
BOARD_FORCE_BL_PIN


135 
	`gpio_£t_mode
(
BOARD_FORCE_BL_PORT
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_FLOAT
, 
BOARD_FORCE_BL_PIN
);

136 
	`gpio_˛ór
(
BOARD_FORCE_BL_PORT
, 
BOARD_FORCE_BL_PIN
);

139 #ifde‡
INTERFACE_USART


140 
	`gpio_£t_mode
(
BOARD_PORT_USART
, 
GPIO_MODE_INPUT
, 
GPIO_CNF_INPUT_FLOAT
, 
BOARD_PIN_TX
);

141 
	`rcc_≥rùhîÆ_dißbÀ_˛ock
(&
BOARD_USART_CLOCK_REGISTER
, 
BOARD_USART_CLOCK_BIT
);

145 
RCC_APB2ENR
 = 0x00000000;

146 
	}
}

153 
ölöe
 
	$˛ock_öô
()

155 
	`rcc_˛ock_£tup_ö_hsi_out_48mhz
();

156 
	}
}

163 
boﬁ
 
	$bﬂrd_ã°_f‹˚_pö
()

165 #i‡
	`deföed
(
BOARD_FORCE_BL_PIN
)

166 vﬁ©ûê
ßm∂es
 = 0;

167 vﬁ©ûê
vŸe
 = 0;

170 
ßm∂es
 = 0; samples < 200; samples++)

172 i‡(
	`gpio_gë
(
BOARD_FORCE_BL_PORT
, 
BOARD_FORCE_BL_PIN
Ë=
BOARD_FORCE_BL_STATE
)

174 
vŸe
++;

179 i‡((
vŸe
 * 100Ë> (
ßm∂es
 * 90))

181  
åue
;

185  
Ál£
;

186 
	}
}

188 #i‡
INTERFACE_USART


194 
boﬁ
 
	$bﬂrd_ã°_ußπ_ª˚ivög_bªak
()

197 
	`sy°ick_öãºu±_dißbÀ
();

198 
	`sy°ick_cou¡î_dißbÀ
();

199 
	`sy°ick_£t_˛ocksour˚
(
STK_CSR_CLKSOURCE_AHB
);

207 
	`sy°ick_£t_ªlﬂd
(729);

208 
	`sy°ick_cou¡î_íabÀ
();

210 
uöt8_t
 
˙t_c⁄£cutive_low
 = 0;

211 
uöt8_t
 
˙t
 = 0;

219 
˙t
 < 60)

222 i‡(
	`sy°ick_gë_cou¡Êag
() == 1)

224 i‡(
	`gpio_gë
(
BOARD_PORT_USART
, 
BOARD_PIN_RX
) == 0)

226 
˙t_c⁄£cutive_low
++;

231 
˙t_c⁄£cutive_low
 = 0;

234 
˙t
++;

238 i‡(
˙t_c⁄£cutive_low
 >= 18)

244 
	`sy°ick_cou¡î_dißbÀ
();

246 i‡(
˙t_c⁄£cutive_low
 >= 18)

248  
åue
;

251  
Ál£
;

252 
	}
}

260 
	$˛ock_deöô
()

263 
	`rcc_osc_⁄
(
RCC_HSI
);

264 
	`rcc_waô_f‹_osc_ªady
(
RCC_HSI
);

267 
RCC_CFGR
 = 0x000000;

270 
	`rcc_osc_off
(
RCC_HSE
);

271 
	`rcc_osc_off
(
RCC_PLL
);

272 
	`rcc_css_dißbÀ
();

275 
	`rcc_osc_by∑ss_dißbÀ
(
RCC_HSE
);

278 
RCC_CIR
 = 0x000000;

279 
	}
}

286 
uöt32_t
 
	$Êash_func_£˘‹_size
(
£˘‹
)

288 i‡(
£˘‹
 < (
BOARD_PAGES
 - 
BOOTLOADER_PAGE
))

290  
FLASH_PAGE_SIZE
;

293 
	}
}

300 
	$Êash_func_îa£_£˘‹
(
£˘‹
)

302 i‡(
£˘‹
 < 
BOARD_PAGES
)

304 
	`Êash_îa£_∑ge
(
APP_LOAD_ADDRESS
 + (
£˘‹
 * 
FLASH_PAGE_SIZE
));

306 
	}
}

314 
	$Êash_func_wrôe_w‹d
(
uöt32_t
 
addªss
, uöt32_à
w‹d
)

316 
	`Êash_¥ogøm_w‹d
(
addªss
 + 
APP_LOAD_ADDRESS
, 
w‹d
);

317 
	}
}

324 
uöt32_t
 
	$Êash_func_ªad_w‹d
(
uöt32_t
 
addªss
)

326  *(
uöt32_t
 *)(
addªss
 + 
APP_LOAD_ADDRESS
);

327 
	}
}

334 
uöt32_t
 
	$Êash_func_ªad_udid
(
uöt32_t
 
addªss
)

338  *(
uöt32_t
 *)(
addªss
 + 
UDID_START
);

339 
	}
}

346 
	$Àd_⁄
(
Àd
)

348 
Àd
)

350 
LED_ACTIVITY
:

351 
	`BOARD_LED_ON
(
BOARD_PORT_LED_ACTIVITY
, 
BOARD_PIN_LED_ACTIVITY
);

354 
LED_BOOTLOADER
:

355 
	`BOARD_LED_ON
(
BOARD_PORT_LED_BOOTLOADER
, 
BOARD_PIN_LED_BOOTLOADER
);

358 
	}
}

365 
	$Àd_off
(
Àd
)

367 
Àd
)

369 
LED_ACTIVITY
:

370 
	`BOARD_LED_OFF
(
BOARD_PORT_LED_ACTIVITY
, 
BOARD_PIN_LED_ACTIVITY
);

373 
LED_BOOTLOADER
:

374 
	`BOARD_LED_OFF
(
BOARD_PORT_LED_BOOTLOADER
, 
BOARD_PIN_LED_BOOTLOADER
);

377 
	}
}

384 
	$Àd_toggÀ
(
Àd
)

386 
Àd
)

388 
LED_ACTIVITY
:

389 
	`gpio_toggÀ
(
BOARD_PORT_LED_ACTIVITY
, 
BOARD_PIN_LED_ACTIVITY
);

392 
LED_BOOTLOADER
:

393 
	`gpio_toggÀ
(
BOARD_PORT_LED_BOOTLOADER
, 
BOARD_PIN_LED_BOOTLOADER
);

396 
	}
}

403 
	$maö
()

406 
uöt8_t
 
åy_boŸ
 = 1;

409 
timeout
 = 
BOOTLOADER_DELAY
;

412 
	`bﬂrd_öô
();

415 
	`˛ock_öô
();

418 i‡(
	`bﬂrd_ã°_f‹˚_pö
())

420 
åy_boŸ
 = 
Ál£
;

423 #i‡
INTERFACE_USART


427 i‡(
	`bﬂrd_ã°_ußπ_ª˚ivög_bªak
())

429 
åy_boŸ
 = 
Ál£
;

434 i‡(
åy_boŸ
)

437 
	`jump_to_≠p
();

439 
timeout
 = 0;

443 #i‡
INTERFACE_USART


444 
	`cöô
(
BOARD_INTERFACE_CONFIG_USART
, 
USART
);

446 #i‡
INTERFACE_USB


447 
	`cöô
(
BOARD_INTERFACE_CONFIG_USB
, 
USB
);

453 
	`boŸlﬂdî
(
timeout
);

456 i‡(
	`bﬂrd_ã°_f‹˚_pö
())

461 #i‡
INTERFACE_USART


463 i‡(
	`bﬂrd_ã°_ußπ_ª˚ivög_bªak
())

471 
	`jump_to_≠p
();

474 
timeout
 = 0;

476 
	}
}

	@usart.c

42 
	~"hw_c⁄fig.h
"

44 
	~<lib›ícm3/°m32/rcc.h
>

45 
	~<lib›ícm3/°m32/gpio.h
>

46 
	~<lib›ícm3/°m32/ußπ.h
>

48 
	~"bl.h
"

49 
	~"ußπ.h
"

52 
uöt32_t
 
	gußπ
;

59 
	$u¨t_cöô
(*
c⁄fig
)

61 
ußπ
 = (
uöt32_t
)
c⁄fig
;

64 
	`ußπ_£t_baudøã
(
ußπ
, 115200);

65 
	`ußπ_£t_d©abôs
(
ußπ
, 8);

66 
	`ußπ_£t_°›bôs
(
ußπ
, 
USART_STOPBITS_1
);

67 
	`ußπ_£t_mode
(
ußπ
, 
USART_MODE_TX_RX
);

68 
	`ußπ_£t_∑rôy
(
ußπ
, 
USART_PARITY_NONE
);

69 
	`ußπ_£t_Êow_c⁄åﬁ
(
ußπ
, 
USART_FLOWCONTROL_NONE
);

72 
	`ußπ_íabÀ
(
ußπ
);

73 
	}
}

80 
	$u¨t_cföi
()

82 
	`ußπ_dißbÀ
(
ußπ
);

83 
	}
}

90 
	$u¨t_cö
()

92 
c
 = -1;

94 i‡(
	`USART_SR
(
ußπ
Ë& 
USART_SR_RXNE
)

96 
c
 = 
	`ußπ_ªcv
(
ußπ
);

99  
c
;

100 
	}
}

108 
	$u¨t_cout
(
uöt8_t
 *
buf
, 
Àn
)

110 
Àn
--)

112 
	`ußπ_£nd_blockög
(
ußπ
, *
buf
++);

114 
	}
}

	@usart.h

41 #i‚de‡
__UART_H


42 
	#__UART_H


	)

44 
u¨t_cöô
(*
c⁄fig
);

45 
u¨t_cföi
();

46 
u¨t_cö
();

47 
u¨t_cout
(
uöt8_t
 *
buf
, 
Àn
);

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
862
37427
bl.c
bl.h
cdcacm.c
cdcacm.h
hw_config.h
libopencm3/include/libopencm3/cm3/assert.h
libopencm3/include/libopencm3/cm3/common.h
libopencm3/include/libopencm3/cm3/cortex.h
libopencm3/include/libopencm3/cm3/doc-cm3.h
libopencm3/include/libopencm3/cm3/dwt.h
libopencm3/include/libopencm3/cm3/fpb.h
libopencm3/include/libopencm3/cm3/itm.h
libopencm3/include/libopencm3/cm3/memorymap.h
libopencm3/include/libopencm3/cm3/mpu.h
libopencm3/include/libopencm3/cm3/nvic.h
libopencm3/include/libopencm3/cm3/scb.h
libopencm3/include/libopencm3/cm3/scs.h
libopencm3/include/libopencm3/cm3/sync.h
libopencm3/include/libopencm3/cm3/systick.h
libopencm3/include/libopencm3/cm3/tpiu.h
libopencm3/include/libopencm3/cm3/vector.h
libopencm3/include/libopencm3/dispatch/nvic.h
libopencm3/include/libopencm3/efm32/acmp.h
libopencm3/include/libopencm3/efm32/adc.h
libopencm3/include/libopencm3/efm32/burtc.h
libopencm3/include/libopencm3/efm32/cmu.h
libopencm3/include/libopencm3/efm32/common/acmp_common.h
libopencm3/include/libopencm3/efm32/common/adc_common.h
libopencm3/include/libopencm3/efm32/common/burtc_common.h
libopencm3/include/libopencm3/efm32/common/cmu_common.h
libopencm3/include/libopencm3/efm32/common/dac_common.h
libopencm3/include/libopencm3/efm32/common/dma_common.h
libopencm3/include/libopencm3/efm32/common/emu_common.h
libopencm3/include/libopencm3/efm32/common/gpio_common.h
libopencm3/include/libopencm3/efm32/common/gpio_common_hglg.h
libopencm3/include/libopencm3/efm32/common/i2c_common.h
libopencm3/include/libopencm3/efm32/common/letimer_common.h
libopencm3/include/libopencm3/efm32/common/msc_common.h
libopencm3/include/libopencm3/efm32/common/opamp_common.h
libopencm3/include/libopencm3/efm32/common/prs_common.h
libopencm3/include/libopencm3/efm32/common/rmu_common.h
libopencm3/include/libopencm3/efm32/common/rtc_common.h
libopencm3/include/libopencm3/efm32/common/timer_common.h
libopencm3/include/libopencm3/efm32/common/uart_common.h
libopencm3/include/libopencm3/efm32/common/usart_common.h
libopencm3/include/libopencm3/efm32/common/usb_common.h
libopencm3/include/libopencm3/efm32/common/wdog_common.h
libopencm3/include/libopencm3/efm32/common/wdog_common_hglg.h
libopencm3/include/libopencm3/efm32/dac.h
libopencm3/include/libopencm3/efm32/dma.h
libopencm3/include/libopencm3/efm32/emu.h
libopencm3/include/libopencm3/efm32/ezr32wg/acmp.h
libopencm3/include/libopencm3/efm32/ezr32wg/adc.h
libopencm3/include/libopencm3/efm32/ezr32wg/burtc.h
libopencm3/include/libopencm3/efm32/ezr32wg/cmu.h
libopencm3/include/libopencm3/efm32/ezr32wg/dac.h
libopencm3/include/libopencm3/efm32/ezr32wg/dma.h
libopencm3/include/libopencm3/efm32/ezr32wg/doc-ezr32wg.h
libopencm3/include/libopencm3/efm32/ezr32wg/emu.h
libopencm3/include/libopencm3/efm32/ezr32wg/gpio.h
libopencm3/include/libopencm3/efm32/ezr32wg/i2c.h
libopencm3/include/libopencm3/efm32/ezr32wg/letimer.h
libopencm3/include/libopencm3/efm32/ezr32wg/memorymap.h
libopencm3/include/libopencm3/efm32/ezr32wg/msc.h
libopencm3/include/libopencm3/efm32/ezr32wg/nvic.h
libopencm3/include/libopencm3/efm32/ezr32wg/opamp.h
libopencm3/include/libopencm3/efm32/ezr32wg/prs.h
libopencm3/include/libopencm3/efm32/ezr32wg/rmu.h
libopencm3/include/libopencm3/efm32/ezr32wg/rtc.h
libopencm3/include/libopencm3/efm32/ezr32wg/timer.h
libopencm3/include/libopencm3/efm32/ezr32wg/uart.h
libopencm3/include/libopencm3/efm32/ezr32wg/usart.h
libopencm3/include/libopencm3/efm32/ezr32wg/usb.h
libopencm3/include/libopencm3/efm32/ezr32wg/wdog.h
libopencm3/include/libopencm3/efm32/g/doc-efm32g.h
libopencm3/include/libopencm3/efm32/g/nvic.h
libopencm3/include/libopencm3/efm32/gg/doc-efm32gg.h
libopencm3/include/libopencm3/efm32/gg/nvic.h
libopencm3/include/libopencm3/efm32/gpio.h
libopencm3/include/libopencm3/efm32/hg/cmu.h
libopencm3/include/libopencm3/efm32/hg/doc-efm32hg.h
libopencm3/include/libopencm3/efm32/hg/gpio.h
libopencm3/include/libopencm3/efm32/hg/memorymap.h
libopencm3/include/libopencm3/efm32/hg/nvic.h
libopencm3/include/libopencm3/efm32/hg/timer.h
libopencm3/include/libopencm3/efm32/hg/usb.h
libopencm3/include/libopencm3/efm32/hg/wdog.h
libopencm3/include/libopencm3/efm32/i2c.h
libopencm3/include/libopencm3/efm32/letimer.h
libopencm3/include/libopencm3/efm32/lg/acmp.h
libopencm3/include/libopencm3/efm32/lg/adc.h
libopencm3/include/libopencm3/efm32/lg/burtc.h
libopencm3/include/libopencm3/efm32/lg/cmu.h
libopencm3/include/libopencm3/efm32/lg/dac.h
libopencm3/include/libopencm3/efm32/lg/dma.h
libopencm3/include/libopencm3/efm32/lg/doc-efm32lg.h
libopencm3/include/libopencm3/efm32/lg/emu.h
libopencm3/include/libopencm3/efm32/lg/gpio.h
libopencm3/include/libopencm3/efm32/lg/i2c.h
libopencm3/include/libopencm3/efm32/lg/letimer.h
libopencm3/include/libopencm3/efm32/lg/memorymap.h
libopencm3/include/libopencm3/efm32/lg/msc.h
libopencm3/include/libopencm3/efm32/lg/nvic.h
libopencm3/include/libopencm3/efm32/lg/opamp.h
libopencm3/include/libopencm3/efm32/lg/prs.h
libopencm3/include/libopencm3/efm32/lg/rmu.h
libopencm3/include/libopencm3/efm32/lg/rtc.h
libopencm3/include/libopencm3/efm32/lg/timer.h
libopencm3/include/libopencm3/efm32/lg/uart.h
libopencm3/include/libopencm3/efm32/lg/usart.h
libopencm3/include/libopencm3/efm32/lg/usb.h
libopencm3/include/libopencm3/efm32/lg/wdog.h
libopencm3/include/libopencm3/efm32/memorymap.h
libopencm3/include/libopencm3/efm32/msc.h
libopencm3/include/libopencm3/efm32/opamp.h
libopencm3/include/libopencm3/efm32/prs.h
libopencm3/include/libopencm3/efm32/rmu.h
libopencm3/include/libopencm3/efm32/rtc.h
libopencm3/include/libopencm3/efm32/tg/doc-efm32tg.h
libopencm3/include/libopencm3/efm32/tg/memorymap.h
libopencm3/include/libopencm3/efm32/tg/nvic.h
libopencm3/include/libopencm3/efm32/timer.h
libopencm3/include/libopencm3/efm32/uart.h
libopencm3/include/libopencm3/efm32/usart.h
libopencm3/include/libopencm3/efm32/usb.h
libopencm3/include/libopencm3/efm32/wdog.h
libopencm3/include/libopencm3/efm32/wg/acmp.h
libopencm3/include/libopencm3/efm32/wg/adc.h
libopencm3/include/libopencm3/efm32/wg/burtc.h
libopencm3/include/libopencm3/efm32/wg/cmu.h
libopencm3/include/libopencm3/efm32/wg/dac.h
libopencm3/include/libopencm3/efm32/wg/dma.h
libopencm3/include/libopencm3/efm32/wg/doc-efm32wg.h
libopencm3/include/libopencm3/efm32/wg/emu.h
libopencm3/include/libopencm3/efm32/wg/gpio.h
libopencm3/include/libopencm3/efm32/wg/i2c.h
libopencm3/include/libopencm3/efm32/wg/letimer.h
libopencm3/include/libopencm3/efm32/wg/memorymap.h
libopencm3/include/libopencm3/efm32/wg/msc.h
libopencm3/include/libopencm3/efm32/wg/nvic.h
libopencm3/include/libopencm3/efm32/wg/opamp.h
libopencm3/include/libopencm3/efm32/wg/prs.h
libopencm3/include/libopencm3/efm32/wg/rmu.h
libopencm3/include/libopencm3/efm32/wg/rtc.h
libopencm3/include/libopencm3/efm32/wg/timer.h
libopencm3/include/libopencm3/efm32/wg/uart.h
libopencm3/include/libopencm3/efm32/wg/usart.h
libopencm3/include/libopencm3/efm32/wg/usb.h
libopencm3/include/libopencm3/efm32/wg/wdog.h
libopencm3/include/libopencm3/ethernet/mac.h
libopencm3/include/libopencm3/ethernet/mac_stm32fxx7.h
libopencm3/include/libopencm3/ethernet/phy.h
libopencm3/include/libopencm3/ethernet/phy_ksz80x1.h
libopencm3/include/libopencm3/ethernet/phy_lan87xx.h
libopencm3/include/libopencm3/ethernet/phy_ste100.h
libopencm3/include/libopencm3/lm3s/doc-lm3s.h
libopencm3/include/libopencm3/lm3s/gpio.h
libopencm3/include/libopencm3/lm3s/memorymap.h
libopencm3/include/libopencm3/lm3s/nvic.h
libopencm3/include/libopencm3/lm3s/rcc.h
libopencm3/include/libopencm3/lm3s/systemcontrol.h
libopencm3/include/libopencm3/lm3s/usart.h
libopencm3/include/libopencm3/lm4f/doc-lm4f.h
libopencm3/include/libopencm3/lm4f/gpio.h
libopencm3/include/libopencm3/lm4f/memorymap.h
libopencm3/include/libopencm3/lm4f/nvic.h
libopencm3/include/libopencm3/lm4f/rcc.h
libopencm3/include/libopencm3/lm4f/ssi.h
libopencm3/include/libopencm3/lm4f/systemcontrol.h
libopencm3/include/libopencm3/lm4f/uart.h
libopencm3/include/libopencm3/lm4f/usb.h
libopencm3/include/libopencm3/lpc13xx/doc-lpc13xx.h
libopencm3/include/libopencm3/lpc13xx/gpio.h
libopencm3/include/libopencm3/lpc13xx/memorymap.h
libopencm3/include/libopencm3/lpc13xx/nvic.h
libopencm3/include/libopencm3/lpc17xx/clock.h
libopencm3/include/libopencm3/lpc17xx/doc-lpc17xx.h
libopencm3/include/libopencm3/lpc17xx/gpio.h
libopencm3/include/libopencm3/lpc17xx/memorymap.h
libopencm3/include/libopencm3/lpc17xx/nvic.h
libopencm3/include/libopencm3/lpc17xx/pwr.h
libopencm3/include/libopencm3/lpc43xx/adc.h
libopencm3/include/libopencm3/lpc43xx/atimer.h
libopencm3/include/libopencm3/lpc43xx/ccu.h
libopencm3/include/libopencm3/lpc43xx/cgu.h
libopencm3/include/libopencm3/lpc43xx/creg.h
libopencm3/include/libopencm3/lpc43xx/doc-lpc43xx.h
libopencm3/include/libopencm3/lpc43xx/eventrouter.h
libopencm3/include/libopencm3/lpc43xx/gima.h
libopencm3/include/libopencm3/lpc43xx/gpdma.h
libopencm3/include/libopencm3/lpc43xx/gpio.h
libopencm3/include/libopencm3/lpc43xx/i2c.h
libopencm3/include/libopencm3/lpc43xx/i2s.h
libopencm3/include/libopencm3/lpc43xx/ipc.h
libopencm3/include/libopencm3/lpc43xx/m0/nvic.h
libopencm3/include/libopencm3/lpc43xx/m4/nvic.h
libopencm3/include/libopencm3/lpc43xx/memorymap.h
libopencm3/include/libopencm3/lpc43xx/rgu.h
libopencm3/include/libopencm3/lpc43xx/ritimer.h
libopencm3/include/libopencm3/lpc43xx/scu.h
libopencm3/include/libopencm3/lpc43xx/sdio.h
libopencm3/include/libopencm3/lpc43xx/sgpio.h
libopencm3/include/libopencm3/lpc43xx/ssp.h
libopencm3/include/libopencm3/lpc43xx/timer.h
libopencm3/include/libopencm3/lpc43xx/uart.h
libopencm3/include/libopencm3/lpc43xx/usb.h
libopencm3/include/libopencm3/lpc43xx/wwdt.h
libopencm3/include/libopencm3/sam/3a/gpio.h
libopencm3/include/libopencm3/sam/3a/memorymap.h
libopencm3/include/libopencm3/sam/3a/nvic.h
libopencm3/include/libopencm3/sam/3a/pio.h
libopencm3/include/libopencm3/sam/3a/pmc.h
libopencm3/include/libopencm3/sam/3n/gpio.h
libopencm3/include/libopencm3/sam/3n/memorymap.h
libopencm3/include/libopencm3/sam/3n/nvic.h
libopencm3/include/libopencm3/sam/3n/periph.h
libopencm3/include/libopencm3/sam/3n/pio.h
libopencm3/include/libopencm3/sam/3n/pmc.h
libopencm3/include/libopencm3/sam/3s/gpio.h
libopencm3/include/libopencm3/sam/3s/memorymap.h
libopencm3/include/libopencm3/sam/3s/nvic.h
libopencm3/include/libopencm3/sam/3s/periph.h
libopencm3/include/libopencm3/sam/3s/pio.h
libopencm3/include/libopencm3/sam/3s/pmc.h
libopencm3/include/libopencm3/sam/3s/smc.h
libopencm3/include/libopencm3/sam/3u/gpio.h
libopencm3/include/libopencm3/sam/3u/memorymap.h
libopencm3/include/libopencm3/sam/3u/nvic.h
libopencm3/include/libopencm3/sam/3u/periph.h
libopencm3/include/libopencm3/sam/3u/pio.h
libopencm3/include/libopencm3/sam/3u/pmc.h
libopencm3/include/libopencm3/sam/3x/gpio.h
libopencm3/include/libopencm3/sam/3x/memorymap.h
libopencm3/include/libopencm3/sam/3x/nvic.h
libopencm3/include/libopencm3/sam/3x/pio.h
libopencm3/include/libopencm3/sam/3x/pmc.h
libopencm3/include/libopencm3/sam/4l/adcife.h
libopencm3/include/libopencm3/sam/4l/gpio.h
libopencm3/include/libopencm3/sam/4l/memorymap.h
libopencm3/include/libopencm3/sam/4l/nvic.h
libopencm3/include/libopencm3/sam/4l/pm.h
libopencm3/include/libopencm3/sam/4l/scif.h
libopencm3/include/libopencm3/sam/adcife.h
libopencm3/include/libopencm3/sam/common/gpio_common_3a3u3x.h
libopencm3/include/libopencm3/sam/common/gpio_common_3n3s.h
libopencm3/include/libopencm3/sam/common/gpio_common_all.h
libopencm3/include/libopencm3/sam/common/periph_common_3a3x.h
libopencm3/include/libopencm3/sam/common/pio_common_3a3u3x.h
libopencm3/include/libopencm3/sam/common/pio_common_3n3s.h
libopencm3/include/libopencm3/sam/common/pio_common_all.h
libopencm3/include/libopencm3/sam/common/pmc_common_3a3s3x.h
libopencm3/include/libopencm3/sam/common/pmc_common_3a3u3x.h
libopencm3/include/libopencm3/sam/common/pmc_common_3n3u.h
libopencm3/include/libopencm3/sam/common/pmc_common_all.h
libopencm3/include/libopencm3/sam/common/smc_common_3a3u3x.h
libopencm3/include/libopencm3/sam/d/memorymap.h
libopencm3/include/libopencm3/sam/d/nvic.h
libopencm3/include/libopencm3/sam/d/port.h
libopencm3/include/libopencm3/sam/eefc.h
libopencm3/include/libopencm3/sam/gpio.h
libopencm3/include/libopencm3/sam/memorymap.h
libopencm3/include/libopencm3/sam/periph.h
libopencm3/include/libopencm3/sam/pio.h
libopencm3/include/libopencm3/sam/pm.h
libopencm3/include/libopencm3/sam/pmc.h
libopencm3/include/libopencm3/sam/pwm.h
libopencm3/include/libopencm3/sam/scif.h
libopencm3/include/libopencm3/sam/smc.h
libopencm3/include/libopencm3/sam/tc.h
libopencm3/include/libopencm3/sam/uart.h
libopencm3/include/libopencm3/sam/usart.h
libopencm3/include/libopencm3/sam/wdt.h
libopencm3/include/libopencm3/stm32/adc.h
libopencm3/include/libopencm3/stm32/can.h
libopencm3/include/libopencm3/stm32/cec.h
libopencm3/include/libopencm3/stm32/common/adc_common_v1.h
libopencm3/include/libopencm3/stm32/common/adc_common_v2.h
libopencm3/include/libopencm3/stm32/common/adc_common_v2_multi.h
libopencm3/include/libopencm3/stm32/common/adc_common_v2_single.h
libopencm3/include/libopencm3/stm32/common/crc_common_all.h
libopencm3/include/libopencm3/stm32/common/crc_v2.h
libopencm3/include/libopencm3/stm32/common/crs_common_all.h
libopencm3/include/libopencm3/stm32/common/crypto_common_f24.h
libopencm3/include/libopencm3/stm32/common/dac_common_all.h
libopencm3/include/libopencm3/stm32/common/dma_common_f24.h
libopencm3/include/libopencm3/stm32/common/dma_common_l1f013.h
libopencm3/include/libopencm3/stm32/common/exti_common_all.h
libopencm3/include/libopencm3/stm32/common/flash_common_f01.h
libopencm3/include/libopencm3/stm32/common/flash_common_f234.h
libopencm3/include/libopencm3/stm32/common/flash_common_f24.h
libopencm3/include/libopencm3/stm32/common/flash_common_l01.h
libopencm3/include/libopencm3/stm32/common/gpio_common_all.h
libopencm3/include/libopencm3/stm32/common/gpio_common_f234.h
libopencm3/include/libopencm3/stm32/common/gpio_common_f24.h
libopencm3/include/libopencm3/stm32/common/hash_common_f24.h
libopencm3/include/libopencm3/stm32/common/hrtim_common_all.h
libopencm3/include/libopencm3/stm32/common/i2c_common_v1.h
libopencm3/include/libopencm3/stm32/common/i2c_common_v2.h
libopencm3/include/libopencm3/stm32/common/iwdg_common_all.h
libopencm3/include/libopencm3/stm32/common/iwdg_common_v2.h
libopencm3/include/libopencm3/stm32/common/pwr_common_v1.h
libopencm3/include/libopencm3/stm32/common/pwr_common_v2.h
libopencm3/include/libopencm3/stm32/common/rcc_common_all.h
libopencm3/include/libopencm3/stm32/common/rng_common_v1.h
libopencm3/include/libopencm3/stm32/common/rtc_common_l1f024.h
libopencm3/include/libopencm3/stm32/common/spi_common_all.h
libopencm3/include/libopencm3/stm32/common/spi_common_v1.h
libopencm3/include/libopencm3/stm32/common/spi_common_v1_frf.h
libopencm3/include/libopencm3/stm32/common/spi_common_v2.h
libopencm3/include/libopencm3/stm32/common/st_usbfs_common.h
libopencm3/include/libopencm3/stm32/common/st_usbfs_v1.h
libopencm3/include/libopencm3/stm32/common/st_usbfs_v2.h
libopencm3/include/libopencm3/stm32/common/syscfg_common_l1f234.h
libopencm3/include/libopencm3/stm32/common/timer_common_all.h
libopencm3/include/libopencm3/stm32/common/timer_common_f24.h
libopencm3/include/libopencm3/stm32/common/usart_common_all.h
libopencm3/include/libopencm3/stm32/common/usart_common_f124.h
libopencm3/include/libopencm3/stm32/common/usart_common_f24.h
libopencm3/include/libopencm3/stm32/common/usart_common_v2.h
libopencm3/include/libopencm3/stm32/comparator.h
libopencm3/include/libopencm3/stm32/crc.h
libopencm3/include/libopencm3/stm32/crs.h
libopencm3/include/libopencm3/stm32/crypto.h
libopencm3/include/libopencm3/stm32/dac.h
libopencm3/include/libopencm3/stm32/dbgmcu.h
libopencm3/include/libopencm3/stm32/dcmi.h
libopencm3/include/libopencm3/stm32/desig.h
libopencm3/include/libopencm3/stm32/dma.h
libopencm3/include/libopencm3/stm32/dma2d.h
libopencm3/include/libopencm3/stm32/dsi.h
libopencm3/include/libopencm3/stm32/exti.h
libopencm3/include/libopencm3/stm32/f0/adc.h
libopencm3/include/libopencm3/stm32/f0/cec.h
libopencm3/include/libopencm3/stm32/f0/comparator.h
libopencm3/include/libopencm3/stm32/f0/crc.h
libopencm3/include/libopencm3/stm32/f0/dac.h
libopencm3/include/libopencm3/stm32/f0/dma.h
libopencm3/include/libopencm3/stm32/f0/doc-stm32f0.h
libopencm3/include/libopencm3/stm32/f0/exti.h
libopencm3/include/libopencm3/stm32/f0/flash.h
libopencm3/include/libopencm3/stm32/f0/gpio.h
libopencm3/include/libopencm3/stm32/f0/i2c.h
libopencm3/include/libopencm3/stm32/f0/iwdg.h
libopencm3/include/libopencm3/stm32/f0/memorymap.h
libopencm3/include/libopencm3/stm32/f0/nvic.h
libopencm3/include/libopencm3/stm32/f0/pwr.h
libopencm3/include/libopencm3/stm32/f0/rcc.h
libopencm3/include/libopencm3/stm32/f0/rtc.h
libopencm3/include/libopencm3/stm32/f0/spi.h
libopencm3/include/libopencm3/stm32/f0/st_usbfs.h
libopencm3/include/libopencm3/stm32/f0/syscfg.h
libopencm3/include/libopencm3/stm32/f0/timer.h
libopencm3/include/libopencm3/stm32/f0/tsc.h
libopencm3/include/libopencm3/stm32/f0/usart.h
libopencm3/include/libopencm3/stm32/f1/adc.h
libopencm3/include/libopencm3/stm32/f1/bkp.h
libopencm3/include/libopencm3/stm32/f1/crc.h
libopencm3/include/libopencm3/stm32/f1/dac.h
libopencm3/include/libopencm3/stm32/f1/dma.h
libopencm3/include/libopencm3/stm32/f1/doc-stm32f1.h
libopencm3/include/libopencm3/stm32/f1/exti.h
libopencm3/include/libopencm3/stm32/f1/flash.h
libopencm3/include/libopencm3/stm32/f1/gpio.h
libopencm3/include/libopencm3/stm32/f1/i2c.h
libopencm3/include/libopencm3/stm32/f1/iwdg.h
libopencm3/include/libopencm3/stm32/f1/memorymap.h
libopencm3/include/libopencm3/stm32/f1/nvic.h
libopencm3/include/libopencm3/stm32/f1/pwr.h
libopencm3/include/libopencm3/stm32/f1/rcc.h
libopencm3/include/libopencm3/stm32/f1/rtc.h
libopencm3/include/libopencm3/stm32/f1/spi.h
libopencm3/include/libopencm3/stm32/f1/st_usbfs.h
libopencm3/include/libopencm3/stm32/f1/timer.h
libopencm3/include/libopencm3/stm32/f1/usart.h
libopencm3/include/libopencm3/stm32/f2/crc.h
libopencm3/include/libopencm3/stm32/f2/crypto.h
libopencm3/include/libopencm3/stm32/f2/dac.h
libopencm3/include/libopencm3/stm32/f2/dma.h
libopencm3/include/libopencm3/stm32/f2/doc-stm32f2.h
libopencm3/include/libopencm3/stm32/f2/exti.h
libopencm3/include/libopencm3/stm32/f2/flash.h
libopencm3/include/libopencm3/stm32/f2/gpio.h
libopencm3/include/libopencm3/stm32/f2/hash.h
libopencm3/include/libopencm3/stm32/f2/i2c.h
libopencm3/include/libopencm3/stm32/f2/iwdg.h
libopencm3/include/libopencm3/stm32/f2/memorymap.h
libopencm3/include/libopencm3/stm32/f2/nvic.h
libopencm3/include/libopencm3/stm32/f2/pwr.h
libopencm3/include/libopencm3/stm32/f2/rcc.h
libopencm3/include/libopencm3/stm32/f2/rng.h
libopencm3/include/libopencm3/stm32/f2/rtc.h
libopencm3/include/libopencm3/stm32/f2/spi.h
libopencm3/include/libopencm3/stm32/f2/syscfg.h
libopencm3/include/libopencm3/stm32/f2/timer.h
libopencm3/include/libopencm3/stm32/f2/usart.h
libopencm3/include/libopencm3/stm32/f3/adc.h
libopencm3/include/libopencm3/stm32/f3/crc.h
libopencm3/include/libopencm3/stm32/f3/dac.h
libopencm3/include/libopencm3/stm32/f3/dma.h
libopencm3/include/libopencm3/stm32/f3/doc-stm32f3.h
libopencm3/include/libopencm3/stm32/f3/exti.h
libopencm3/include/libopencm3/stm32/f3/flash.h
libopencm3/include/libopencm3/stm32/f3/gpio.h
libopencm3/include/libopencm3/stm32/f3/hrtim.h
libopencm3/include/libopencm3/stm32/f3/i2c.h
libopencm3/include/libopencm3/stm32/f3/iwdg.h
libopencm3/include/libopencm3/stm32/f3/memorymap.h
libopencm3/include/libopencm3/stm32/f3/nvic.h
libopencm3/include/libopencm3/stm32/f3/pwr.h
libopencm3/include/libopencm3/stm32/f3/rcc.h
libopencm3/include/libopencm3/stm32/f3/rtc.h
libopencm3/include/libopencm3/stm32/f3/spi.h
libopencm3/include/libopencm3/stm32/f3/st_usbfs.h
libopencm3/include/libopencm3/stm32/f3/syscfg.h
libopencm3/include/libopencm3/stm32/f3/timer.h
libopencm3/include/libopencm3/stm32/f3/usart.h
libopencm3/include/libopencm3/stm32/f4/adc.h
libopencm3/include/libopencm3/stm32/f4/crc.h
libopencm3/include/libopencm3/stm32/f4/crypto.h
libopencm3/include/libopencm3/stm32/f4/dac.h
libopencm3/include/libopencm3/stm32/f4/dcmi.h
libopencm3/include/libopencm3/stm32/f4/dma.h
libopencm3/include/libopencm3/stm32/f4/dma2d.h
libopencm3/include/libopencm3/stm32/f4/doc-stm32f4.h
libopencm3/include/libopencm3/stm32/f4/dsi.h
libopencm3/include/libopencm3/stm32/f4/exti.h
libopencm3/include/libopencm3/stm32/f4/flash.h
libopencm3/include/libopencm3/stm32/f4/fmc.h
libopencm3/include/libopencm3/stm32/f4/gpio.h
libopencm3/include/libopencm3/stm32/f4/hash.h
libopencm3/include/libopencm3/stm32/f4/i2c.h
libopencm3/include/libopencm3/stm32/f4/iwdg.h
libopencm3/include/libopencm3/stm32/f4/ltdc.h
libopencm3/include/libopencm3/stm32/f4/memorymap.h
libopencm3/include/libopencm3/stm32/f4/nvic.h
libopencm3/include/libopencm3/stm32/f4/pwr.h
libopencm3/include/libopencm3/stm32/f4/quadspi.h
libopencm3/include/libopencm3/stm32/f4/rcc.h
libopencm3/include/libopencm3/stm32/f4/rng.h
libopencm3/include/libopencm3/stm32/f4/rtc.h
libopencm3/include/libopencm3/stm32/f4/spi.h
libopencm3/include/libopencm3/stm32/f4/syscfg.h
libopencm3/include/libopencm3/stm32/f4/timer.h
libopencm3/include/libopencm3/stm32/f4/usart.h
libopencm3/include/libopencm3/stm32/f7/doc-stm32f7.h
libopencm3/include/libopencm3/stm32/f7/flash.h
libopencm3/include/libopencm3/stm32/f7/gpio.h
libopencm3/include/libopencm3/stm32/f7/memorymap.h
libopencm3/include/libopencm3/stm32/f7/nvic.h
libopencm3/include/libopencm3/stm32/f7/pwr.h
libopencm3/include/libopencm3/stm32/f7/rcc.h
libopencm3/include/libopencm3/stm32/f7/rng.h
libopencm3/include/libopencm3/stm32/f7/usart.h
libopencm3/include/libopencm3/stm32/flash.h
libopencm3/include/libopencm3/stm32/fsmc.h
libopencm3/include/libopencm3/stm32/gpio.h
libopencm3/include/libopencm3/stm32/hash.h
libopencm3/include/libopencm3/stm32/hrtim.h
libopencm3/include/libopencm3/stm32/i2c.h
libopencm3/include/libopencm3/stm32/iwdg.h
libopencm3/include/libopencm3/stm32/l0/adc.h
libopencm3/include/libopencm3/stm32/l0/dma.h
libopencm3/include/libopencm3/stm32/l0/doc-stm32l0.h
libopencm3/include/libopencm3/stm32/l0/exti.h
libopencm3/include/libopencm3/stm32/l0/flash.h
libopencm3/include/libopencm3/stm32/l0/gpio.h
libopencm3/include/libopencm3/stm32/l0/i2c.h
libopencm3/include/libopencm3/stm32/l0/iwdg.h
libopencm3/include/libopencm3/stm32/l0/memorymap.h
libopencm3/include/libopencm3/stm32/l0/nvic.h
libopencm3/include/libopencm3/stm32/l0/pwr.h
libopencm3/include/libopencm3/stm32/l0/rcc.h
libopencm3/include/libopencm3/stm32/l0/rng.h
libopencm3/include/libopencm3/stm32/l0/rtc.h
libopencm3/include/libopencm3/stm32/l0/spi.h
libopencm3/include/libopencm3/stm32/l0/st_usbfs.h
libopencm3/include/libopencm3/stm32/l0/syscfg.h
libopencm3/include/libopencm3/stm32/l0/timer.h
libopencm3/include/libopencm3/stm32/l0/usart.h
libopencm3/include/libopencm3/stm32/l1/adc.h
libopencm3/include/libopencm3/stm32/l1/crc.h
libopencm3/include/libopencm3/stm32/l1/dac.h
libopencm3/include/libopencm3/stm32/l1/dma.h
libopencm3/include/libopencm3/stm32/l1/doc-stm32l1.h
libopencm3/include/libopencm3/stm32/l1/exti.h
libopencm3/include/libopencm3/stm32/l1/flash.h
libopencm3/include/libopencm3/stm32/l1/gpio.h
libopencm3/include/libopencm3/stm32/l1/i2c.h
libopencm3/include/libopencm3/stm32/l1/iwdg.h
libopencm3/include/libopencm3/stm32/l1/lcd.h
libopencm3/include/libopencm3/stm32/l1/memorymap.h
libopencm3/include/libopencm3/stm32/l1/nvic.h
libopencm3/include/libopencm3/stm32/l1/pwr.h
libopencm3/include/libopencm3/stm32/l1/rcc.h
libopencm3/include/libopencm3/stm32/l1/ri.h
libopencm3/include/libopencm3/stm32/l1/rtc.h
libopencm3/include/libopencm3/stm32/l1/spi.h
libopencm3/include/libopencm3/stm32/l1/st_usbfs.h
libopencm3/include/libopencm3/stm32/l1/syscfg.h
libopencm3/include/libopencm3/stm32/l1/timer.h
libopencm3/include/libopencm3/stm32/l1/usart.h
libopencm3/include/libopencm3/stm32/l4/adc.h
libopencm3/include/libopencm3/stm32/l4/crc.h
libopencm3/include/libopencm3/stm32/l4/dma.h
libopencm3/include/libopencm3/stm32/l4/doc-stm32l4.h
libopencm3/include/libopencm3/stm32/l4/exti.h
libopencm3/include/libopencm3/stm32/l4/flash.h
libopencm3/include/libopencm3/stm32/l4/gpio.h
libopencm3/include/libopencm3/stm32/l4/i2c.h
libopencm3/include/libopencm3/stm32/l4/iwdg.h
libopencm3/include/libopencm3/stm32/l4/memorymap.h
libopencm3/include/libopencm3/stm32/l4/nvic.h
libopencm3/include/libopencm3/stm32/l4/pwr.h
libopencm3/include/libopencm3/stm32/l4/rcc.h
libopencm3/include/libopencm3/stm32/l4/rng.h
libopencm3/include/libopencm3/stm32/l4/rtc.h
libopencm3/include/libopencm3/stm32/l4/spi.h
libopencm3/include/libopencm3/stm32/l4/st_usbfs.h
libopencm3/include/libopencm3/stm32/l4/syscfg.h
libopencm3/include/libopencm3/stm32/l4/timer.h
libopencm3/include/libopencm3/stm32/l4/usart.h
libopencm3/include/libopencm3/stm32/ltdc.h
libopencm3/include/libopencm3/stm32/memorymap.h
libopencm3/include/libopencm3/stm32/pwr.h
libopencm3/include/libopencm3/stm32/quadspi.h
libopencm3/include/libopencm3/stm32/rcc.h
libopencm3/include/libopencm3/stm32/rng.h
libopencm3/include/libopencm3/stm32/rtc.h
libopencm3/include/libopencm3/stm32/sdio.h
libopencm3/include/libopencm3/stm32/spi.h
libopencm3/include/libopencm3/stm32/st_usbfs.h
libopencm3/include/libopencm3/stm32/syscfg.h
libopencm3/include/libopencm3/stm32/timer.h
libopencm3/include/libopencm3/stm32/tools.h
libopencm3/include/libopencm3/stm32/tsc.h
libopencm3/include/libopencm3/stm32/usart.h
libopencm3/include/libopencm3/stm32/wwdg.h
libopencm3/include/libopencm3/usb/audio.h
libopencm3/include/libopencm3/usb/cdc.h
libopencm3/include/libopencm3/usb/dfu.h
libopencm3/include/libopencm3/usb/doc-usb.h
libopencm3/include/libopencm3/usb/dwc/otg_common.h
libopencm3/include/libopencm3/usb/dwc/otg_fs.h
libopencm3/include/libopencm3/usb/dwc/otg_hs.h
libopencm3/include/libopencm3/usb/hid.h
libopencm3/include/libopencm3/usb/midi.h
libopencm3/include/libopencm3/usb/msc.h
libopencm3/include/libopencm3/usb/usbd.h
libopencm3/include/libopencm3/usb/usbstd.h
libopencm3/include/libopencm3/vf6xx/anadig.h
libopencm3/include/libopencm3/vf6xx/ccm.h
libopencm3/include/libopencm3/vf6xx/doc-vf6xx.h
libopencm3/include/libopencm3/vf6xx/gpio.h
libopencm3/include/libopencm3/vf6xx/iomuxc.h
libopencm3/include/libopencm3/vf6xx/memorymap.h
libopencm3/include/libopencm3/vf6xx/nvic.h
libopencm3/include/libopencm3/vf6xx/uart.h
libopencm3/include/libopencmsis/core_cm3.h
libopencm3/include/libopencmsis/dispatch/irqhandlers.h
libopencm3/include/libopencmsis/efm32/ezr32wg/irqhandlers.h
libopencm3/include/libopencmsis/efm32/g/irqhandlers.h
libopencm3/include/libopencmsis/efm32/gg/irqhandlers.h
libopencm3/include/libopencmsis/efm32/hg/irqhandlers.h
libopencm3/include/libopencmsis/efm32/lg/irqhandlers.h
libopencm3/include/libopencmsis/efm32/tg/irqhandlers.h
libopencm3/include/libopencmsis/efm32/wg/irqhandlers.h
libopencm3/include/libopencmsis/lm3s/irqhandlers.h
libopencm3/include/libopencmsis/lpc13xx/irqhandlers.h
libopencm3/include/libopencmsis/lpc17xx/irqhandlers.h
libopencm3/include/libopencmsis/lpc43xx/m0/irqhandlers.h
libopencm3/include/libopencmsis/lpc43xx/m4/irqhandlers.h
libopencm3/include/libopencmsis/sam/3a/irqhandlers.h
libopencm3/include/libopencmsis/sam/3n/irqhandlers.h
libopencm3/include/libopencmsis/sam/3s/irqhandlers.h
libopencm3/include/libopencmsis/sam/3u/irqhandlers.h
libopencm3/include/libopencmsis/sam/3x/irqhandlers.h
libopencm3/include/libopencmsis/sam/4l/irqhandlers.h
libopencm3/include/libopencmsis/sam/d/irqhandlers.h
libopencm3/include/libopencmsis/stm32/f0/irqhandlers.h
libopencm3/include/libopencmsis/stm32/f1/irqhandlers.h
libopencm3/include/libopencmsis/stm32/f2/irqhandlers.h
libopencm3/include/libopencmsis/stm32/f3/irqhandlers.h
libopencm3/include/libopencmsis/stm32/f4/irqhandlers.h
libopencm3/include/libopencmsis/stm32/f7/irqhandlers.h
libopencm3/include/libopencmsis/stm32/l0/irqhandlers.h
libopencm3/include/libopencmsis/stm32/l1/irqhandlers.h
libopencm3/include/libopencmsis/stm32/l4/irqhandlers.h
libopencm3/include/libopencmsis/vf6xx/irqhandlers.h
libopencm3/lib/cm3/assert.c
libopencm3/lib/cm3/dwt.c
libopencm3/lib/cm3/nvic.c
libopencm3/lib/cm3/scb.c
libopencm3/lib/cm3/sync.c
libopencm3/lib/cm3/systick.c
libopencm3/lib/cm3/vector.c
libopencm3/lib/dispatch/vector_chipset.c
libopencm3/lib/dispatch/vector_nvic.c
libopencm3/lib/efm32/common/adc_common.c
libopencm3/lib/efm32/common/cmu_common.c
libopencm3/lib/efm32/common/dac_common.c
libopencm3/lib/efm32/common/dma_common.c
libopencm3/lib/efm32/common/gpio_common.c
libopencm3/lib/efm32/common/prs_common.c
libopencm3/lib/efm32/common/timer_common.c
libopencm3/lib/efm32/ezr32wg/vector_chipset.c
libopencm3/lib/efm32/ezr32wg/vector_nvic.c
libopencm3/lib/efm32/g/vector_nvic.c
libopencm3/lib/efm32/gg/vector_nvic.c
libopencm3/lib/efm32/hg/cmu.c
libopencm3/lib/efm32/hg/vector_nvic.c
libopencm3/lib/efm32/lg/vector_nvic.c
libopencm3/lib/efm32/tg/vector_nvic.c
libopencm3/lib/efm32/wg/vector_chipset.c
libopencm3/lib/efm32/wg/vector_nvic.c
libopencm3/lib/ethernet/mac.c
libopencm3/lib/ethernet/mac_stm32fxx7.c
libopencm3/lib/ethernet/phy.c
libopencm3/lib/ethernet/phy_ksz80x1.c
libopencm3/lib/lm3s/gpio.c
libopencm3/lib/lm3s/rcc.c
libopencm3/lib/lm3s/usart.c
libopencm3/lib/lm3s/vector_nvic.c
libopencm3/lib/lm4f/gpio.c
libopencm3/lib/lm4f/rcc.c
libopencm3/lib/lm4f/systemcontrol.c
libopencm3/lib/lm4f/uart.c
libopencm3/lib/lm4f/vector_chipset.c
libopencm3/lib/lpc13xx/gpio.c
libopencm3/lib/lpc13xx/vector_nvic.c
libopencm3/lib/lpc17xx/gpio.c
libopencm3/lib/lpc17xx/pwr.c
libopencm3/lib/lpc17xx/vector_nvic.c
libopencm3/lib/lpc43xx/gpio.c
libopencm3/lib/lpc43xx/i2c.c
libopencm3/lib/lpc43xx/ipc.c
libopencm3/lib/lpc43xx/m0/vector_nvic.c
libopencm3/lib/lpc43xx/m4/vector_chipset.c
libopencm3/lib/lpc43xx/m4/vector_nvic.c
libopencm3/lib/lpc43xx/scu.c
libopencm3/lib/lpc43xx/ssp.c
libopencm3/lib/lpc43xx/timer.c
libopencm3/lib/lpc43xx/uart.c
libopencm3/lib/sam/3a/vector_nvic.c
libopencm3/lib/sam/3n/vector_nvic.c
libopencm3/lib/sam/3s/vector_nvic.c
libopencm3/lib/sam/3u/vector_nvic.c
libopencm3/lib/sam/3x/vector_nvic.c
libopencm3/lib/sam/4l/adcife.c
libopencm3/lib/sam/4l/gpio.c
libopencm3/lib/sam/4l/pm.c
libopencm3/lib/sam/4l/scif.c
libopencm3/lib/sam/4l/usart.c
libopencm3/lib/sam/4l/vector_nvic.c
libopencm3/lib/sam/common/gpio_common_3a3u3x.c
libopencm3/lib/sam/common/gpio_common_3n3s.c
libopencm3/lib/sam/common/gpio_common_all.c
libopencm3/lib/sam/common/pmc.c
libopencm3/lib/sam/common/usart_common_3.c
libopencm3/lib/sam/common/usart_common_all.c
libopencm3/lib/sam/d/vector_nvic.c
libopencm3/lib/stm32/can.c
libopencm3/lib/stm32/common/adc_common_v1.c
libopencm3/lib/stm32/common/adc_common_v2.c
libopencm3/lib/stm32/common/adc_common_v2_multi.c
libopencm3/lib/stm32/common/crc_common_all.c
libopencm3/lib/stm32/common/crc_v2.c
libopencm3/lib/stm32/common/crs_common_all.c
libopencm3/lib/stm32/common/crypto_common_f24.c
libopencm3/lib/stm32/common/dac_common_all.c
libopencm3/lib/stm32/common/dma_common_f24.c
libopencm3/lib/stm32/common/dma_common_l1f013.c
libopencm3/lib/stm32/common/exti_common_all.c
libopencm3/lib/stm32/common/flash_common_f01.c
libopencm3/lib/stm32/common/flash_common_f234.c
libopencm3/lib/stm32/common/flash_common_f24.c
libopencm3/lib/stm32/common/flash_common_l01.c
libopencm3/lib/stm32/common/gpio_common_all.c
libopencm3/lib/stm32/common/gpio_common_f0234.c
libopencm3/lib/stm32/common/hash_common_f24.c
libopencm3/lib/stm32/common/i2c_common_v1.c
libopencm3/lib/stm32/common/i2c_common_v2.c
libopencm3/lib/stm32/common/iwdg_common_all.c
libopencm3/lib/stm32/common/pwr_common_v1.c
libopencm3/lib/stm32/common/pwr_common_v2.c
libopencm3/lib/stm32/common/rcc_common_all.c
libopencm3/lib/stm32/common/rng_common_v1.c
libopencm3/lib/stm32/common/rtc_common_l1f024.c
libopencm3/lib/stm32/common/spi_common_all.c
libopencm3/lib/stm32/common/spi_common_v1.c
libopencm3/lib/stm32/common/spi_common_v1_frf.c
libopencm3/lib/stm32/common/spi_common_v2.c
libopencm3/lib/stm32/common/st_usbfs_core.c
libopencm3/lib/stm32/common/st_usbfs_core.h
libopencm3/lib/stm32/common/timer_common_all.c
libopencm3/lib/stm32/common/timer_common_f0234.c
libopencm3/lib/stm32/common/timer_common_f24.c
libopencm3/lib/stm32/common/usart_common_all.c
libopencm3/lib/stm32/common/usart_common_f124.c
libopencm3/lib/stm32/common/usart_common_v2.c
libopencm3/lib/stm32/desig.c
libopencm3/lib/stm32/f0/adc.c
libopencm3/lib/stm32/f0/comparator.c
libopencm3/lib/stm32/f0/dac.c
libopencm3/lib/stm32/f0/dma.c
libopencm3/lib/stm32/f0/flash.c
libopencm3/lib/stm32/f0/gpio.c
libopencm3/lib/stm32/f0/i2c.c
libopencm3/lib/stm32/f0/pwr.c
libopencm3/lib/stm32/f0/rcc.c
libopencm3/lib/stm32/f0/rtc.c
libopencm3/lib/stm32/f0/spi.c
libopencm3/lib/stm32/f0/syscfg.c
libopencm3/lib/stm32/f0/timer.c
libopencm3/lib/stm32/f0/vector_nvic.c
libopencm3/lib/stm32/f1/adc.c
libopencm3/lib/stm32/f1/dac.c
libopencm3/lib/stm32/f1/dma.c
libopencm3/lib/stm32/f1/flash.c
libopencm3/lib/stm32/f1/gpio.c
libopencm3/lib/stm32/f1/i2c.c
libopencm3/lib/stm32/f1/pwr.c
libopencm3/lib/stm32/f1/rcc.c
libopencm3/lib/stm32/f1/rtc.c
libopencm3/lib/stm32/f1/spi.c
libopencm3/lib/stm32/f1/timer.c
libopencm3/lib/stm32/f1/vector_nvic.c
libopencm3/lib/stm32/f2/crypto.c
libopencm3/lib/stm32/f2/dac.c
libopencm3/lib/stm32/f2/dma.c
libopencm3/lib/stm32/f2/flash.c
libopencm3/lib/stm32/f2/gpio.c
libopencm3/lib/stm32/f2/hash.c
libopencm3/lib/stm32/f2/i2c.c
libopencm3/lib/stm32/f2/pwr.c
libopencm3/lib/stm32/f2/rcc.c
libopencm3/lib/stm32/f2/rng.c
libopencm3/lib/stm32/f2/rtc.c
libopencm3/lib/stm32/f2/spi.c
libopencm3/lib/stm32/f2/timer.c
libopencm3/lib/stm32/f2/vector_nvic.c
libopencm3/lib/stm32/f3/adc.c
libopencm3/lib/stm32/f3/dac.c
libopencm3/lib/stm32/f3/dma.c
libopencm3/lib/stm32/f3/flash.c
libopencm3/lib/stm32/f3/i2c.c
libopencm3/lib/stm32/f3/pwr.c
libopencm3/lib/stm32/f3/rcc.c
libopencm3/lib/stm32/f3/rtc.c
libopencm3/lib/stm32/f3/spi.c
libopencm3/lib/stm32/f3/timer.c
libopencm3/lib/stm32/f3/vector_chipset.c
libopencm3/lib/stm32/f3/vector_nvic.c
libopencm3/lib/stm32/f4/adc.c
libopencm3/lib/stm32/f4/crypto.c
libopencm3/lib/stm32/f4/dac.c
libopencm3/lib/stm32/f4/dma.c
libopencm3/lib/stm32/f4/flash.c
libopencm3/lib/stm32/f4/fmc.c
libopencm3/lib/stm32/f4/gpio.c
libopencm3/lib/stm32/f4/hash.c
libopencm3/lib/stm32/f4/i2c.c
libopencm3/lib/stm32/f4/ltdc.c
libopencm3/lib/stm32/f4/pwr.c
libopencm3/lib/stm32/f4/rcc.c
libopencm3/lib/stm32/f4/rng.c
libopencm3/lib/stm32/f4/rtc.c
libopencm3/lib/stm32/f4/spi.c
libopencm3/lib/stm32/f4/timer.c
libopencm3/lib/stm32/f4/vector_chipset.c
libopencm3/lib/stm32/f4/vector_nvic.c
libopencm3/lib/stm32/f7/flash.c
libopencm3/lib/stm32/f7/gpio.c
libopencm3/lib/stm32/f7/pwr.c
libopencm3/lib/stm32/f7/rcc.c
libopencm3/lib/stm32/f7/vector_chipset.c
libopencm3/lib/stm32/f7/vector_nvic.c
libopencm3/lib/stm32/l0/flash.c
libopencm3/lib/stm32/l0/gpio.c
libopencm3/lib/stm32/l0/i2c.c
libopencm3/lib/stm32/l0/iwdg.c
libopencm3/lib/stm32/l0/rcc.c
libopencm3/lib/stm32/l0/rng.c
libopencm3/lib/stm32/l0/vector_nvic.c
libopencm3/lib/stm32/l1/adc.c
libopencm3/lib/stm32/l1/dac.c
libopencm3/lib/stm32/l1/dma.c
libopencm3/lib/stm32/l1/flash.c
libopencm3/lib/stm32/l1/gpio.c
libopencm3/lib/stm32/l1/i2c.c
libopencm3/lib/stm32/l1/lcd.c
libopencm3/lib/stm32/l1/rcc.c
libopencm3/lib/stm32/l1/rtc.c
libopencm3/lib/stm32/l1/spi.c
libopencm3/lib/stm32/l1/timer.c
libopencm3/lib/stm32/l1/vector_nvic.c
libopencm3/lib/stm32/l4/adc.c
libopencm3/lib/stm32/l4/flash.c
libopencm3/lib/stm32/l4/i2c.c
libopencm3/lib/stm32/l4/pwr.c
libopencm3/lib/stm32/l4/rcc.c
libopencm3/lib/stm32/l4/vector_chipset.c
libopencm3/lib/stm32/l4/vector_nvic.c
libopencm3/lib/stm32/st_usbfs_v1.c
libopencm3/lib/stm32/st_usbfs_v2.c
libopencm3/lib/usb/usb.c
libopencm3/lib/usb/usb_control.c
libopencm3/lib/usb/usb_dwc_common.c
libopencm3/lib/usb/usb_dwc_common.h
libopencm3/lib/usb/usb_efm32.c
libopencm3/lib/usb/usb_efm32hg.c
libopencm3/lib/usb/usb_f107.c
libopencm3/lib/usb/usb_f207.c
libopencm3/lib/usb/usb_lm4f.c
libopencm3/lib/usb/usb_msc.c
libopencm3/lib/usb/usb_private.h
libopencm3/lib/usb/usb_standard.c
libopencm3/lib/vf6xx/ccm.c
libopencm3/lib/vf6xx/gpio.c
libopencm3/lib/vf6xx/iomuxc.c
libopencm3/lib/vf6xx/uart.c
libopencm3/lib/vf6xx/vector_chipset.c
libopencm3/lib/vf6xx/vector_nvic.c
libopencm3/tests/gadget-zero/delay.c
libopencm3/tests/gadget-zero/delay.h
libopencm3/tests/gadget-zero/delay_efm32.c
libopencm3/tests/gadget-zero/main-efm32hg309-generic.c
libopencm3/tests/gadget-zero/main-stm32f072disco.c
libopencm3/tests/gadget-zero/main-stm32f103-generic.c
libopencm3/tests/gadget-zero/main-stm32f3-disco.c
libopencm3/tests/gadget-zero/main-stm32f429i-disco.c
libopencm3/tests/gadget-zero/main-stm32f4disco.c
libopencm3/tests/gadget-zero/main-stm32l053disco.c
libopencm3/tests/gadget-zero/main-stm32l1-generic.c
libopencm3/tests/gadget-zero/usb-gadget0.c
libopencm3/tests/gadget-zero/usb-gadget0.h
libopencm3/tests/shared/trace.c
libopencm3/tests/shared/trace.h
libopencm3/tests/shared/trace_stdio.c
main_f1.c
main_f4.c
usart.c
usart.h
/usr/include/assert.h
/usr/include/errno.h
/usr/include/inttypes.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/stdc-predef.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
